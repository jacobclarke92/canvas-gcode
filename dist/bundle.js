/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={563:(t,e,n)=>{"use strict";n.d(e,{Z:()=>h});var r=n(73),i=n(132),o=n(604),s=n(323);function u(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var h=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),l(this,"subPaths",[])}var e,n;return e=t,n=[{key:"clone",value:function(){var e=new t;return e.subPaths=this.subPaths.slice(0),e}},{key:"moveTo",value:function(t,e){var n=new r.Z;n.moveTo(t,e),this.subPaths.push(n),this.current=n}},{key:"ensure",value:function(t,e){0===this.subPaths.length&&this.moveTo(t,e)}},{key:"close",value:function(){if(!this.current)return!1;this.current.close()}},{key:"lineTo",value:function(){var t;this.ensure.apply(this,arguments),(t=this.current).lineTo.apply(t,arguments)}},{key:"arc",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e[0],i=e[1],o=e[2],s=e[3],u=e[4],a=e[5];this.ellipse(r,i,o,o,s,u,a)}},{key:"ellipse",value:function(){for(var t,e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=n[0],s=n[1],u=n[2],a=(n[3],n[4]),l=n[5],h=(n[6],(0,i.CS)(o,s,a,l,u));this.current&&(0,i.Bj)(this.current.lastPoint(),h.start)||this.lineTo(h.start.x,h.start.y),(t=this.current).ellipse.apply(t,n)}},{key:"quadraticCurveTo",value:function(){var t;(t=this.current).quadraticCurveTo.apply(t,arguments)}},{key:"bezierCurveTo",value:function(){var t;(t=this.current).bezierCurveTo.apply(t,arguments)}},{key:"rect",value:function(t,e,n,r){this.moveTo(t,e),this.lineTo(t+n,e),this.lineTo(t+n,e+r),this.lineTo(t,e+r),this.lineTo(t,e)}},{key:"toPolys",value:function(t,e){if(!t)throw"NO SCALE!";return this.subPaths.map((function(n){return n.toPoly(t,e)}))}},{key:"fromPolys",value:function(t,e){if(!e)throw"NO SCALE!";this.subPaths=[];for(var n=0,i=t.length;n<i;++n){var o=new r.Z;o.fromPolys(t[n],e),this.subPaths.push(o),this.current=o}return this}},{key:"clip",value:function(e,n,r){if(!e)return this;n=n||0;var i=1e3,s=this.toPolys(i,r),u=e.toPolys(i,r),a=new o.Clipper;a.AddPaths(s,o.PolyType.ptSubject,!0),a.AddPaths(u,o.PolyType.ptClip,!0);var l=[];a.Execute(n,l);var h=new t;return h.fromPolys(l,i),h}},{key:"translate",value:function(e,n){var r=new t;return this.subPaths.forEach((function(t){var i=t.getPoints();r.moveTo(i[0].x+e,i[0].y+n),i.slice(1).forEach((function(t){r.lineTo(t.x+e,t.y+n)}))})),r}},{key:"clipToBounds",value:function(e){var n,r=new t,i=new s.Z,o=i.clone();return this.subPaths.forEach((function(t){t.getPoints().forEach((function(t,s){if(t=t.clone(),n=t.clone(),t.y<e.top){var u=(t.x-i.x)/(t.y-i.y);t.x+=u*(e.top-t.y)||0,t.y=e.top}else if(o.y<e.top){var a=(t.x-o.x)/(t.y-o.y)*(e.top-t.y)||0;r.moveTo(t.x+a,e.top)}if(t.x>e.right){var l=(t.y-i.y)/(t.x-i.x);t.y+=l*(e.right-t.x),t.x=e.right}else o.x,e.right;0===s?r.moveTo(t.x,t.y):r.lineTo(t.x,t.y),i=t,o=n}))})),r}},{key:"simplify",value:function(e,n){var r=this.toPolys(1e3,n),i=o.PolyFillType.pftNonZero;"evenodd"===e&&(i=o.PolyFillType.pftEvenOdd),r=o.Clipper.SimplifyPolygons(r,i);var s=new t;return s.fromPolys(r,1e3),s}},{key:"is",value:function(t){return 1===this.subPaths.length&&2===this.subPaths[0].actions.length&&this.subPaths[0].actions[1].type===t}},{key:"offset",value:function(e,n){if(0===e)return this;if(this.is("ELLIPSE")){var r=new t,i=this.subPaths[0].actions[1].args;return!(i[2]+e<0)&&(r.ellipse(i[0],i[1],i[2]+e,i[3]+e,i[4],i[5],i[6]),r)}var s=1e3,u=this.toPolys(s,n),a=new o.ClipperOffset;a.AddPaths(u,o.JoinType.jtMiter,o.EndType.etClosedPolygon);var l=[];try{a.Execute(l,e*s)}catch(t){return!1}if(!l||0===l.length||0===l[0].length)return!1;var h=new t;return h.fromPolys(l,s),h.close(),h}},{key:"ramp",value:function(t){}},{key:"addPath",value:function(t){this.subPaths=this.subPaths.concat(t.subPaths)}},{key:"estimateMaxOffset",value:function(t){for(var e=this.getBounds(),n=Math.abs(e.right-e.left),r=Math.abs(e.bottom-e.top),i=Math.min(n,r)/2,o=0,s=0;s<5;++s){var u=o+(i-o)/2;this.offset(-u,3)?o=u:i=u}return{lt:i,gt:o}}},{key:"fillPath",value:function(e,n){for(var r=new t,i=Math.sin(Math.PI/4),o=this,s=o.estimateMaxOffset(5).lt,u=-(s-=e/2);u<-e/2;u+=e*i){var a=o.offset(u,n);if(!a)break;a=a.reverse(),r.addPath(a)}var l=o.offset(-e/2,n);return l&&r.addPath(l.reverse()),r}},{key:"connectEnds",value:function(t){for(var e=this.subPaths.length-1;e>0;--e){var n=this.subPaths[e-1],r=this.subPaths[e],i=n.lastPoint(),o=r.nearestPoint(i),s=o.point;o.distance<2*t&&(r=r.shift(o.i),n.lineTo(s.x,s.y),r.actions[0].type="LINE_TO",n.actions=n.actions.concat(r.actions),this.subPaths.splice(e,1))}return this}},{key:"reverse",value:function(){if(this.is("ELLIPSE")){var e=new t,n=this.subPaths[0].actions[1].args;return e.ellipse(n[0],n[1],n[2],n[3],n[5],n[4],!n[6]),e}var r=new t;return r.subPaths=this.subPaths.map((function(t){return t.reverse()})).reverse(),r}},{key:"sort",value:function(){if(0===this.subPaths.length)return this;var e=new t,n=this.subPaths[0].lastPoint();return e.subPaths=this.subPaths.sort((function(t,e){var r=t.lastPoint(),i=e.firstPoint(),o=s.Z.distance(r,n),u=s.Z.distance(i,n);return n=e.lastPoint(),o<u?-1:o>u?1:0})),e}},{key:"firstPoint",value:function(){return!!this.current&&this.subPaths[0].firstPoint()}},{key:"lastPoint",value:function(){return!!this.current&&this.subPaths[this.subPaths.length-1].lastPoint()}},{key:"getPoints",value:function(t){var e=[];return this.subPaths.forEach((function(n){var r;e.push.apply(e,function(t){if(Array.isArray(t))return u(t)}(r=n.getPoints(t))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(r)||function(t,e){if(t){if("string"==typeof t)return u(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?u(t,e):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())})),e}},{key:"getBounds",value:function(){var t=this.getPoints(),e=this.firstPoint()||new s.Z,n={left:e.x,top:e.y,right:e.x,bottom:e.y};return t.forEach((function(t){n.left=Math.min(n.left,t.x),n.top=Math.min(n.top,t.y),n.right=Math.max(n.right,t.x),n.bottom=Math.max(n.bottom,t.y)})),n}}],n&&a(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();l(h,"actions",r.Z.actions)},323:(t,e,n)=>{"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.d(e,{Z:()=>o});var o=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2?arguments[2]:void 0,o=arguments.length>3?arguments[3]:void 0;r(this,t),this.x=isNaN(e)?0:e,this.y=isNaN(n)?0:n,this.z=isNaN(i)?0:i,this.a=isNaN(o)?0:o}var e,n,o;return e=t,o=[{key:"distance",value:function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}},{key:"angleBetween",value:function(t,e){return Math.acos(t.dot(e)/(t.magnitude()*e.magnitude()))}}],(n=[{key:"clone",value:function(){return new t(this.x,this.y)}},{key:"round",value:function(){return new t(Math.round(this.x),Math.round(this.y))}},{key:"equals",value:function(t){return this.x===t.x&&this.y===t.y}},{key:"add",value:function(e){return new t(this.x+e.x,this.y+e.y)}},{key:"midpoint",value:function(e){return new t((this.x+e.x)/2,(this.y+e.y)/2)}},{key:"subtract",value:function(e){return new t(this.x-e.x,this.y-e.y)}},{key:"magnitude",value:function(){return Math.sqrt(this.x*this.x+this.y*this.y)}},{key:"multiply",value:function(e){return"number"==typeof e?new t(this.x*e,this.y*e):new t(this.x*e.x,this.y*e.y)}},{key:"scale",value:function(t){return this.multiply(t)}},{key:"divide",value:function(e){return new t(this.x/e.x,this.y/e.y)}},{key:"normalize",value:function(){return this.multiply(1/this.magnitude())}},{key:"set",value:function(t,e){this.x=t,this.y=e}},{key:"dot",value:function(t){return this.x*t.x+this.y*t.y}},{key:"translate",value:function(e,n){return new t(this.x+e,this.y+n)}},{key:"moveAlongAngle",value:function(t,e){return this.translate(Math.cos(t)*e,Math.sin(t)*e)}},{key:"rotate",value:function(e){return new t(this.x*Math.cos(e)-this.y*Math.sin(e),this.x*Math.sin(e)+this.y*Math.cos(e))}},{key:"angleTo",value:function(t){return Math.atan2(t.y-this.y,t.x-this.x)}},{key:"distanceTo",value:function(t){return Math.sqrt(Math.pow(t.x-this.x,2)+Math.pow(t.y-this.y,2))}},{key:"angleBetween",value:function(t){return Math.acos(this.dot(t)/(this.magnitude()*t.magnitude()))}},{key:"toUnit",value:function(){return this.multiply(1/this.magnitude())}}])&&i(e.prototype,n),o&&i(e,o),Object.defineProperty(e,"prototype",{writable:!1}),t}()},204:(t,e,n)=>{"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n.d(e,{v:()=>o});var o=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),i(this,"vs",{}),this.ctx=e.ctx,this.canvasWidth=this.cw=e.width,this.canvasHeight=this.ch=e.height,this.cx=this.canvasWidth/2,this.cy=this.canvasHeight/2}var e,n;return e=t,(n=[{key:"init",value:function(){}},{key:"initDraw",value:function(){}},{key:"draw",value:function(t){}},{key:"reset",value:function(){this.ctx.reset()}}])&&r(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();i(o,"generateGCode",!0)},73:(t,e,n)=>{"use strict";n.d(e,{Z:()=>h});var r=n(563),i=n(323),o=n(132);function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,i,o=[],s=!0,u=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(o.push(r.value),!e||o.length!==e);s=!0);}catch(t){u=!0,i=t}finally{try{s||null==n.return||n.return()}finally{if(u)throw i}}return o}}(t,e)||function(t,e){if(t){if("string"==typeof t)return u(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?u(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var h=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),l(this,"actions",[]),l(this,"pointsCache",[]),e&&this.fromPoints(e)}var e,n;return e=t,n=[{key:"clone",value:function(){var e=new t;return e.actions=this.actions.slice(0),e}},{key:"isClosed",value:function(){return(0,o.Bj)(this.firstPoint(),this.lastPoint())}},{key:"closed",get:function(){return this.isClosed()}},{key:"offset",value:function(t){var e=this.toPath().offset(t);return!!e&&e.subPaths[0]}},{key:"simplify",value:function(){var t=this.toPath().simplify();return!!t&&t.subPaths[0]}},{key:"toPath",value:function(){var t=this.clone(),e=new r.Z;return e.subPaths.push(t),e.current=e.subPaths[e.subPaths.length-1],e}},{key:"addAction",value:function(t){this.actions.push(t),this.pointsCache=[]}},{key:"firstPoint",value:function(){var t=new i.Z(0,0),e=this.actions[0];return"ELLIPSE"===e.type?t=(0,o.CS)(e.args[0],e.args[1],e.args[4],e.args[5],e.args[2]).start:(t.x=e.args[e.args.length-2],t.y=e.args[e.args.length-1]),t}},{key:"lastPoint",value:function(){var t=new i.Z(0,0),e=this.actions[this.actions.length-1];return"ELLIPSE"===e.type?t=(0,o.CS)(e.args[0],e.args[1],e.args[4],e.args[5],e.args[2]).end:(t.x=e.args[e.args.length-2],t.y=e.args[e.args.length-1]),t}},{key:"fromPoints",value:function(t){this.moveTo(t[0].x,t[0].y);for(var e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y)}},{key:"getActionLength",value:function(t,e,n){var r=this.actions[n];if("ELLIPSE"===r.type){var i=s(r.args,7),o=(i[0],i[1],i[2],i[3]),u=i[4],a=i[5];return i[6],r.args,(a-u)*o}var l=r.args,h=l[l.length-2]-t,c=l[l.length-1]-e;return Math.sqrt(h*h+c*c)}},{key:"getLength",value:function(){for(var t=0,e=this.firstPoint(),n=this.getPoints(1e4),r=1,i=n.length;r<i;++r){var o=n[r],s=e.x,u=e.y,a=o.x-s,l=o.y-u;t+=Math.sqrt(a*a+l*l)}return t}},{key:"nearestPoint",value:function(t){var e,n,r=new i.Z,o=1/0;return this.actions.forEach((function(u,a){if("ELLIPSE"===u.type){var l=s(u.args,7),h=l[0],c=l[1],f=l[2],p=l[3],v=l[4];l[5],l[6],r.x=h+f*Math.cos(v),r.y=c+p*Math.sin(v)}else r.x=u.args[u.args.length-2],r.y=u.args[u.args.length-1];var y=i.Z.distance(t,r);y<o&&(e=a,n=r.clone(),o=y)})),{i:e,distance:o,point:n}}},{key:"pointAt",value:function(t){var e=new i.Z,n=this.actions[t];return"LINE_TO"===n.type&&(e.x=n.args[n.args.length-2],e.y=n.args[n.args.length-1]),e}},{key:"shiftToNearest",value:function(t,e){var n=this.nearestPoint(new i.Z(t,e));return this.shift(n.i)}},{key:"shift",value:function(e){if(0===e)return this;var n=new t;return n.actions=this.actions.slice(e).concat(this.actions.slice(0,e)),n.actions.forEach((function(t){t.type="LINE_TO"})),n.lineTo(n.actions[0].args[0],n.actions[0].args[1]),n}},{key:"moveTo",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this.addAction({type:"MOVE_TO",args:e})}},{key:"lineTo",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this.addAction({type:"LINE_TO",args:e})}},{key:"quadraticCurveTo",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this.addAction({type:"QUADRATIC_CURVE_TO",args:e})}},{key:"bezierCurveTo",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this.addAction({type:"BEZIER_CURVE_TO",args:e})}},{key:"arc",value:function(){this.ellipse.apply(this,arguments)}},{key:"ellipse",value:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];this.addAction({type:"ELLIPSE",args:e})}},{key:"getPoints",value:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:40,e=[],n=0,r=this.actions.length;n<r;n++){var o=this.actions[n];switch(o.type){case"MOVE_TO":case"LINE_TO":e.push(new i.Z(o.args[0],o.args[1]));break;case"QUADRATIC_CURVE_TO":var u=void 0,a=void 0,l=s(o.args,4),h=l[0],p=l[1],v=l[2],y=l[3];if(e.length>0){var d=e[e.length-1];u=d.x,a=d.y}else{var m=this.actions[n-1];if("ELLIPSE"!==m.type){var P=m.args;u=P[P.length-2],a=P[P.length-1]}else u=m.args[0],a=m.args[1]}for(var g=1;g<=t;g++){var x=g/t,_=c(x,u,h,v),b=c(x,a,p,y);e.push(new i.Z(_,b))}break;case"BEZIER_CURVE_TO":var w=void 0,C=void 0,I=s(o.args,6),O=I[0],E=I[1],T=I[2],S=I[3],L=I[4],A=I[5];if(e.length>0){var M=e[e.length-1];w=M.x,C=M.y}else{var N=this.actions[n-1];if("ELLIPSE"!==N.type){var X=N.args;w=X[X.length-2],C=X[X.length-1]}else w=N.args[0],C=N.args[1]}for(var Y=1;Y<=t;Y++){var R=Y/t,D=f(R,w,O,T,L),k=f(R,C,E,S,A);e.push(new i.Z(D,k))}break;case"ELLIPSE":var B=void 0,j=void 0,Z=s(o.args,7),F=Z[0],W=Z[1],z=Z[2],V=Z[3],q=Z[4],U=Z[5],H=Z[6],G=U-q,J=void 0;for(B=0;B<=t;B++){j=B/t,G===2*-Math.PI&&(G=2*Math.PI),G<0&&(G+=2*Math.PI),G>2*Math.PI&&(G-=2*Math.PI),H?(G===2*Math.PI&&(G=0),J=U+(1-j)*(2*Math.PI-G)):J=q+j*G;var $=F+z*Math.cos(J),Q=W+V*Math.sin(J);e.push(new i.Z($,Q))}}}return this.closed&&e.push(e[0]),e}},{key:"toPoly",value:function(t,e){return this.getPoints(e).map((function(e){return{X:e.x*t,Y:e.y*t}}))}},{key:"fromPolys",value:function(t,e){e=1/e,this.moveTo(t[0].X*e,t[0].Y*e);for(var n=1,r=t.length;n<r;++n)this.lineTo(t[n].X*e,t[n].Y*e);return this.close(),this}},{key:"close",value:function(){if(!this.isClosed()){var t=this.actions[0].args;this.lineTo.apply(this,t)}}},{key:"reverse",value:function(){var e=new t,n=this.getPoints().reverse();if(0==n.length)return e;e.moveTo(n[0].x,n[0].y);for(var r=1,i=n.length;r<i;++r)e.lineTo(n[r].x,n[r].y);return e}}],n&&a(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();l(h,"actions",{MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",ELLIPSE:"ellipse"});var c=function(t,e,n,r){return function(t,e){var n=1-t;return n*n*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,n)+function(t,e){return t*t*e}(t,r)},f=function(t,e,n,r,i){return function(t,e){var n=1-t;return n*n*n*e}(t,e)+function(t,e){var n=1-t;return 3*n*n*t*e}(t,n)+function(t,e){return 3*(1-t)*t*t*e}(t,r)+function(t,e){return t*t*t*e}(t,i)}},604:t=>{!function(){"use strict";var e,n={version:"6.4.2.2",use_lines:!0,use_xyz:!1},r=!1;if(t.exports?(t.exports=n,r=!0):"undefined"!=typeof document?window.ClipperLib=n:self.ClipperLib=n,r)i="chrome",e="Netscape";else{var i=navigator.userAgent.toString().toLowerCase();e=navigator.appName}var o,s={};function u(t,e,r){n.biginteger_used=1,null!=t&&("number"==typeof t&&void 0===e?this.fromInt(t):"number"==typeof t?this.fromNumber(t,e,r):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}function a(){return new u(null,void 0,void 0)}-1!=i.indexOf("chrome")&&-1==i.indexOf("chromium")?s.chrome=1:s.chrome=0,-1!=i.indexOf("chromium")?s.chromium=1:s.chromium=0,-1!=i.indexOf("safari")&&-1==i.indexOf("chrome")&&-1==i.indexOf("chromium")?s.safari=1:s.safari=0,-1!=i.indexOf("firefox")?s.firefox=1:s.firefox=0,-1!=i.indexOf("firefox/17")?s.firefox17=1:s.firefox17=0,-1!=i.indexOf("firefox/15")?s.firefox15=1:s.firefox15=0,-1!=i.indexOf("firefox/3")?s.firefox3=1:s.firefox3=0,-1!=i.indexOf("opera")?s.opera=1:s.opera=0,-1!=i.indexOf("msie 10")?s.msie10=1:s.msie10=0,-1!=i.indexOf("msie 9")?s.msie9=1:s.msie9=0,-1!=i.indexOf("msie 8")?s.msie8=1:s.msie8=0,-1!=i.indexOf("msie 7")?s.msie7=1:s.msie7=0,-1!=i.indexOf("msie ")?s.msie=1:s.msie=0,n.biginteger_used=null,"Microsoft Internet Explorer"==e?(u.prototype.am=function(t,e,n,r,i,o){for(var s=32767&e,u=e>>15;--o>=0;){var a=32767&this[t],l=this[t++]>>15,h=u*a+l*s;i=((a=s*a+((32767&h)<<15)+n[r]+(1073741823&i))>>>30)+(h>>>15)+u*l+(i>>>30),n[r++]=1073741823&a}return i},o=30):"Netscape"!=e?(u.prototype.am=function(t,e,n,r,i,o){for(;--o>=0;){var s=e*this[t++]+n[r]+i;i=Math.floor(s/67108864),n[r++]=67108863&s}return i},o=26):(u.prototype.am=function(t,e,n,r,i,o){for(var s=16383&e,u=e>>14;--o>=0;){var a=16383&this[t],l=this[t++]>>14,h=u*a+l*s;i=((a=s*a+((16383&h)<<14)+n[r]+i)>>28)+(h>>14)+u*l,n[r++]=268435455&a}return i},o=28),u.prototype.DB=o,u.prototype.DM=(1<<o)-1,u.prototype.DV=1<<o,u.prototype.FV=Math.pow(2,52),u.prototype.F1=52-o,u.prototype.F2=2*o-52;var l,h,c=new Array;for(l="0".charCodeAt(0),h=0;h<=9;++h)c[l++]=h;for(l="a".charCodeAt(0),h=10;h<36;++h)c[l++]=h;for(l="A".charCodeAt(0),h=10;h<36;++h)c[l++]=h;function f(t){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(t)}function p(t,e){var n=c[t.charCodeAt(e)];return null==n?-1:n}function v(t){var e=a();return e.fromInt(t),e}function y(t){var e,n=1;return 0!=(e=t>>>16)&&(t=e,n+=16),0!=(e=t>>8)&&(t=e,n+=8),0!=(e=t>>4)&&(t=e,n+=4),0!=(e=t>>2)&&(t=e,n+=2),0!=(e=t>>1)&&(t=e,n+=1),n}function d(t){this.m=t}function m(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function P(t,e){return t&e}function g(t,e){return t|e}function x(t,e){return t^e}function _(t,e){return t&~e}function b(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function w(t){for(var e=0;0!=t;)t&=t-1,++e;return e}function C(){}function I(t){return t}function O(t){this.r2=a(),this.q3=a(),u.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}d.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},d.prototype.revert=function(t){return t},d.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},d.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},d.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},m.prototype.convert=function(t){var e=a();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(u.ZERO)>0&&this.m.subTo(e,e),e},m.prototype.revert=function(t){var e=a();return t.copyTo(e),this.reduce(e),e},m.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var n=32767&t[e],r=n*this.mpl+((n*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[n=e+this.m.t]+=this.m.am(0,r,t,e,0,this.m.t);t[n]>=t.DV;)t[n]-=t.DV,t[++n]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},m.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},m.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},u.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},u.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},u.prototype.fromString=function(t,e){var n;if(16==e)n=4;else if(8==e)n=3;else if(256==e)n=8;else if(2==e)n=1;else if(32==e)n=5;else{if(4!=e)return void this.fromRadix(t,e);n=2}this.t=0,this.s=0;for(var r=t.length,i=!1,o=0;--r>=0;){var s=8==n?255&t[r]:p(t,r);s<0?"-"==t.charAt(r)&&(i=!0):(i=!1,0==o?this[this.t++]=s:o+n>this.DB?(this[this.t-1]|=(s&(1<<this.DB-o)-1)<<o,this[this.t++]=s>>this.DB-o):this[this.t-1]|=s<<o,(o+=n)>=this.DB&&(o-=this.DB))}8==n&&0!=(128&t[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),i&&u.ZERO.subTo(this,this)},u.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},u.prototype.dlShiftTo=function(t,e){var n;for(n=this.t-1;n>=0;--n)e[n+t]=this[n];for(n=t-1;n>=0;--n)e[n]=0;e.t=this.t+t,e.s=this.s},u.prototype.drShiftTo=function(t,e){for(var n=t;n<this.t;++n)e[n-t]=this[n];e.t=Math.max(this.t-t,0),e.s=this.s},u.prototype.lShiftTo=function(t,e){var n,r=t%this.DB,i=this.DB-r,o=(1<<i)-1,s=Math.floor(t/this.DB),u=this.s<<r&this.DM;for(n=this.t-1;n>=0;--n)e[n+s+1]=this[n]>>i|u,u=(this[n]&o)<<r;for(n=s-1;n>=0;--n)e[n]=0;e[s]=u,e.t=this.t+s+1,e.s=this.s,e.clamp()},u.prototype.rShiftTo=function(t,e){e.s=this.s;var n=Math.floor(t/this.DB);if(n>=this.t)e.t=0;else{var r=t%this.DB,i=this.DB-r,o=(1<<r)-1;e[0]=this[n]>>r;for(var s=n+1;s<this.t;++s)e[s-n-1]|=(this[s]&o)<<i,e[s-n]=this[s]>>r;r>0&&(e[this.t-n-1]|=(this.s&o)<<i),e.t=this.t-n,e.clamp()}},u.prototype.subTo=function(t,e){for(var n=0,r=0,i=Math.min(t.t,this.t);n<i;)r+=this[n]-t[n],e[n++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r-=t.s;n<this.t;)r+=this[n],e[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<t.t;)r-=t[n],e[n++]=r&this.DM,r>>=this.DB;r-=t.s}e.s=r<0?-1:0,r<-1?e[n++]=this.DV+r:r>0&&(e[n++]=r),e.t=n,e.clamp()},u.prototype.multiplyTo=function(t,e){var n=this.abs(),r=t.abs(),i=n.t;for(e.t=i+r.t;--i>=0;)e[i]=0;for(i=0;i<r.t;++i)e[i+n.t]=n.am(0,r[i],e,i,0,n.t);e.s=0,e.clamp(),this.s!=t.s&&u.ZERO.subTo(e,e)},u.prototype.squareTo=function(t){for(var e=this.abs(),n=t.t=2*e.t;--n>=0;)t[n]=0;for(n=0;n<e.t-1;++n){var r=e.am(n,e[n],t,2*n,0,1);(t[n+e.t]+=e.am(n+1,2*e[n],t,2*n+1,r,e.t-n-1))>=e.DV&&(t[n+e.t]-=e.DV,t[n+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(n,e[n],t,2*n,0,1)),t.s=0,t.clamp()},u.prototype.divRemTo=function(t,e,n){var r=t.abs();if(!(r.t<=0)){var i=this.abs();if(i.t<r.t)return null!=e&&e.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=a());var o=a(),s=this.s,l=t.s,h=this.DB-y(r[r.t-1]);h>0?(r.lShiftTo(h,o),i.lShiftTo(h,n)):(r.copyTo(o),i.copyTo(n));var c=o.t,f=o[c-1];if(0!=f){var p=f*(1<<this.F1)+(c>1?o[c-2]>>this.F2:0),v=this.FV/p,d=(1<<this.F1)/p,m=1<<this.F2,P=n.t,g=P-c,x=null==e?a():e;for(o.dlShiftTo(g,x),n.compareTo(x)>=0&&(n[n.t++]=1,n.subTo(x,n)),u.ONE.dlShiftTo(c,x),x.subTo(o,o);o.t<c;)o[o.t++]=0;for(;--g>=0;){var _=n[--P]==f?this.DM:Math.floor(n[P]*v+(n[P-1]+m)*d);if((n[P]+=o.am(0,_,n,g,0,c))<_)for(o.dlShiftTo(g,x),n.subTo(x,n);n[P]<--_;)n.subTo(x,n)}null!=e&&(n.drShiftTo(c,e),s!=l&&u.ZERO.subTo(e,e)),n.t=c,n.clamp(),h>0&&n.rShiftTo(h,n),s<0&&u.ZERO.subTo(n,n)}}},u.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},u.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},u.prototype.exp=function(t,e){if(t>4294967295||t<1)return u.ONE;var n=a(),r=a(),i=e.convert(this),o=y(t)-1;for(i.copyTo(n);--o>=0;)if(e.sqrTo(n,r),(t&1<<o)>0)e.mulTo(r,i,n);else{var s=n;n=r,r=s}return e.revert(n)},u.prototype.toString=function(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var n,r=(1<<e)-1,i=!1,o="",s=this.t,u=this.DB-s*this.DB%e;if(s-- >0)for(u<this.DB&&(n=this[s]>>u)>0&&(i=!0,o=f(n));s>=0;)u<e?(n=(this[s]&(1<<u)-1)<<e-u,n|=this[--s]>>(u+=this.DB-e)):(n=this[s]>>(u-=e)&r,u<=0&&(u+=this.DB,--s)),n>0&&(i=!0),i&&(o+=f(n));return i?o:"0"},u.prototype.negate=function(){var t=a();return u.ZERO.subTo(this,t),t},u.prototype.abs=function(){return this.s<0?this.negate():this},u.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var n=this.t;if(0!=(e=n-t.t))return this.s<0?-e:e;for(;--n>=0;)if(0!=(e=this[n]-t[n]))return e;return 0},u.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+y(this[this.t-1]^this.s&this.DM)},u.prototype.mod=function(t){var e=a();return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(u.ZERO)>0&&t.subTo(e,e),e},u.prototype.modPowInt=function(t,e){var n;return n=t<256||e.isEven()?new d(e):new m(e),this.exp(t,n)},u.ZERO=v(0),u.ONE=v(1),C.prototype.convert=I,C.prototype.revert=I,C.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n)},C.prototype.sqrTo=function(t,e){t.squareTo(e)},O.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=a();return t.copyTo(e),this.reduce(e),e},O.prototype.revert=function(t){return t},O.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},O.prototype.mulTo=function(t,e,n){t.multiplyTo(e,n),this.reduce(n)},O.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)};var E=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],T=(1<<26)/E[E.length-1];u.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},u.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),n=Math.pow(t,e),r=v(n),i=a(),o=a(),s="";for(this.divRemTo(r,i,o);i.signum()>0;)s=(n+o.intValue()).toString(t).substr(1)+s,i.divRemTo(r,i,o);return o.intValue().toString(t)+s},u.prototype.fromRadix=function(t,e){this.fromInt(0),null==e&&(e=10);for(var n=this.chunkSize(e),r=Math.pow(e,n),i=!1,o=0,s=0,a=0;a<t.length;++a){var l=p(t,a);l<0?"-"==t.charAt(a)&&0==this.signum()&&(i=!0):(s=e*s+l,++o>=n&&(this.dMultiply(r),this.dAddOffset(s,0),o=0,s=0))}o>0&&(this.dMultiply(Math.pow(e,o)),this.dAddOffset(s,0)),i&&u.ZERO.subTo(this,this)},u.prototype.fromNumber=function(t,e,n){if("number"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,n),this.testBit(t-1)||this.bitwiseTo(u.ONE.shiftLeft(t-1),g,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(u.ONE.shiftLeft(t-1),this);else{var r=new Array,i=7&t;r.length=1+(t>>3),e.nextBytes(r),i>0?r[0]&=(1<<i)-1:r[0]=0,this.fromString(r,256)}},u.prototype.bitwiseTo=function(t,e,n){var r,i,o=Math.min(t.t,this.t);for(r=0;r<o;++r)n[r]=e(this[r],t[r]);if(t.t<this.t){for(i=t.s&this.DM,r=o;r<this.t;++r)n[r]=e(this[r],i);n.t=this.t}else{for(i=this.s&this.DM,r=o;r<t.t;++r)n[r]=e(i,t[r]);n.t=t.t}n.s=e(this.s,t.s),n.clamp()},u.prototype.changeBit=function(t,e){var n=u.ONE.shiftLeft(t);return this.bitwiseTo(n,e,n),n},u.prototype.addTo=function(t,e){for(var n=0,r=0,i=Math.min(t.t,this.t);n<i;)r+=this[n]+t[n],e[n++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r+=t.s;n<this.t;)r+=this[n],e[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<t.t;)r+=t[n],e[n++]=r&this.DM,r>>=this.DB;r+=t.s}e.s=r<0?-1:0,r>0?e[n++]=r:r<-1&&(e[n++]=this.DV+r),e.t=n,e.clamp()},u.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},u.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},u.prototype.multiplyLowerTo=function(t,e,n){var r,i=Math.min(this.t+t.t,e);for(n.s=0,n.t=i;i>0;)n[--i]=0;for(r=n.t-this.t;i<r;++i)n[i+this.t]=this.am(0,t[i],n,i,0,this.t);for(r=Math.min(t.t,e);i<r;++i)this.am(0,t[i],n,i,0,e-i);n.clamp()},u.prototype.multiplyUpperTo=function(t,e,n){--e;var r=n.t=this.t+t.t-e;for(n.s=0;--r>=0;)n[r]=0;for(r=Math.max(e-this.t,0);r<t.t;++r)n[this.t+r-e]=this.am(e-r,t[r],n,0,0,this.t+r-e);n.clamp(),n.drShiftTo(1,n)},u.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,n=this.s<0?t-1:0;if(this.t>0)if(0==e)n=this[0]%t;else for(var r=this.t-1;r>=0;--r)n=(e*n+this[r])%t;return n},u.prototype.millerRabin=function(t){var e=this.subtract(u.ONE),n=e.getLowestSetBit();if(n<=0)return!1;var r=e.shiftRight(n);(t=t+1>>1)>E.length&&(t=E.length);for(var i=a(),o=0;o<t;++o){i.fromInt(E[Math.floor(Math.random()*E.length)]);var s=i.modPow(r,this);if(0!=s.compareTo(u.ONE)&&0!=s.compareTo(e)){for(var l=1;l++<n&&0!=s.compareTo(e);)if(0==(s=s.modPowInt(2,this)).compareTo(u.ONE))return!1;if(0!=s.compareTo(e))return!1}}return!0},u.prototype.clone=function(){var t=a();return this.copyTo(t),t},u.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},u.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},u.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},u.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},u.prototype.toByteArray=function(){var t=this.t,e=new Array;e[0]=this.s;var n,r=this.DB-t*this.DB%8,i=0;if(t-- >0)for(r<this.DB&&(n=this[t]>>r)!=(this.s&this.DM)>>r&&(e[i++]=n|this.s<<this.DB-r);t>=0;)r<8?(n=(this[t]&(1<<r)-1)<<8-r,n|=this[--t]>>(r+=this.DB-8)):(n=this[t]>>(r-=8)&255,r<=0&&(r+=this.DB,--t)),0!=(128&n)&&(n|=-256),0==i&&(128&this.s)!=(128&n)&&++i,(i>0||n!=this.s)&&(e[i++]=n);return e},u.prototype.equals=function(t){return 0==this.compareTo(t)},u.prototype.min=function(t){return this.compareTo(t)<0?this:t},u.prototype.max=function(t){return this.compareTo(t)>0?this:t},u.prototype.and=function(t){var e=a();return this.bitwiseTo(t,P,e),e},u.prototype.or=function(t){var e=a();return this.bitwiseTo(t,g,e),e},u.prototype.xor=function(t){var e=a();return this.bitwiseTo(t,x,e),e},u.prototype.andNot=function(t){var e=a();return this.bitwiseTo(t,_,e),e},u.prototype.not=function(){for(var t=a(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},u.prototype.shiftLeft=function(t){var e=a();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},u.prototype.shiftRight=function(t){var e=a();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},u.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+b(this[t]);return this.s<0?this.t*this.DB:-1},u.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,n=0;n<this.t;++n)t+=w(this[n]^e);return t},u.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},u.prototype.setBit=function(t){return this.changeBit(t,g)},u.prototype.clearBit=function(t){return this.changeBit(t,_)},u.prototype.flipBit=function(t){return this.changeBit(t,x)},u.prototype.add=function(t){var e=a();return this.addTo(t,e),e},u.prototype.subtract=function(t){var e=a();return this.subTo(t,e),e},u.prototype.multiply=function(t){var e=a();return this.multiplyTo(t,e),e},u.prototype.divide=function(t){var e=a();return this.divRemTo(t,e,null),e},u.prototype.remainder=function(t){var e=a();return this.divRemTo(t,null,e),e},u.prototype.divideAndRemainder=function(t){var e=a(),n=a();return this.divRemTo(t,e,n),new Array(e,n)},u.prototype.modPow=function(t,e){var n,r,i=t.bitLength(),o=v(1);if(i<=0)return o;n=i<18?1:i<48?3:i<144?4:i<768?5:6,r=i<8?new d(e):e.isEven()?new O(e):new m(e);var s=new Array,u=3,l=n-1,h=(1<<n)-1;if(s[1]=r.convert(this),n>1){var c=a();for(r.sqrTo(s[1],c);u<=h;)s[u]=a(),r.mulTo(c,s[u-2],s[u]),u+=2}var f,p,P=t.t-1,g=!0,x=a();for(i=y(t[P])-1;P>=0;){for(i>=l?f=t[P]>>i-l&h:(f=(t[P]&(1<<i+1)-1)<<l-i,P>0&&(f|=t[P-1]>>this.DB+i-l)),u=n;0==(1&f);)f>>=1,--u;if((i-=u)<0&&(i+=this.DB,--P),g)s[f].copyTo(o),g=!1;else{for(;u>1;)r.sqrTo(o,x),r.sqrTo(x,o),u-=2;u>0?r.sqrTo(o,x):(p=o,o=x,x=p),r.mulTo(x,s[f],o)}for(;P>=0&&0==(t[P]&1<<i);)r.sqrTo(o,x),p=o,o=x,x=p,--i<0&&(i=this.DB-1,--P)}return r.revert(o)},u.prototype.modInverse=function(t){var e=t.isEven();if(this.isEven()&&e||0==t.signum())return u.ZERO;for(var n=t.clone(),r=this.clone(),i=v(1),o=v(0),s=v(0),a=v(1);0!=n.signum();){for(;n.isEven();)n.rShiftTo(1,n),e?(i.isEven()&&o.isEven()||(i.addTo(this,i),o.subTo(t,o)),i.rShiftTo(1,i)):o.isEven()||o.subTo(t,o),o.rShiftTo(1,o);for(;r.isEven();)r.rShiftTo(1,r),e?(s.isEven()&&a.isEven()||(s.addTo(this,s),a.subTo(t,a)),s.rShiftTo(1,s)):a.isEven()||a.subTo(t,a),a.rShiftTo(1,a);n.compareTo(r)>=0?(n.subTo(r,n),e&&i.subTo(s,i),o.subTo(a,o)):(r.subTo(n,r),e&&s.subTo(i,s),a.subTo(o,a))}return 0!=r.compareTo(u.ONE)?u.ZERO:a.compareTo(t)>=0?a.subtract(t):a.signum()<0?(a.addTo(t,a),a.signum()<0?a.add(t):a):a},u.prototype.pow=function(t){return this.exp(t,new C)},u.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),n=t.s<0?t.negate():t.clone();if(e.compareTo(n)<0){var r=e;e=n,n=r}var i=e.getLowestSetBit(),o=n.getLowestSetBit();if(o<0)return e;for(i<o&&(o=i),o>0&&(e.rShiftTo(o,e),n.rShiftTo(o,n));e.signum()>0;)(i=e.getLowestSetBit())>0&&e.rShiftTo(i,e),(i=n.getLowestSetBit())>0&&n.rShiftTo(i,n),e.compareTo(n)>=0?(e.subTo(n,e),e.rShiftTo(1,e)):(n.subTo(e,n),n.rShiftTo(1,n));return o>0&&n.lShiftTo(o,n),n},u.prototype.isProbablePrime=function(t){var e,n=this.abs();if(1==n.t&&n[0]<=E[E.length-1]){for(e=0;e<E.length;++e)if(n[0]==E[e])return!0;return!1}if(n.isEven())return!1;for(e=1;e<E.length;){for(var r=E[e],i=e+1;i<E.length&&r<T;)r*=E[i++];for(r=n.modInt(r);e<i;)if(r%E[e++]==0)return!1}return n.millerRabin(t)},u.prototype.square=function(){var t=a();return this.squareTo(t),t};var S=u;S.prototype.IsNegative=function(){return-1==this.compareTo(S.ZERO)},S.op_Equality=function(t,e){return 0==t.compareTo(e)},S.op_Inequality=function(t,e){return 0!=t.compareTo(e)},S.op_GreaterThan=function(t,e){return t.compareTo(e)>0},S.op_LessThan=function(t,e){return t.compareTo(e)<0},S.op_Addition=function(t,e){return new S(t,void 0,void 0).add(new S(e,void 0,void 0))},S.op_Subtraction=function(t,e){return new S(t,void 0,void 0).subtract(new S(e,void 0,void 0))},S.Int128Mul=function(t,e){return new S(t,void 0,void 0).multiply(new S(e,void 0,void 0))},S.op_Division=function(t,e){return t.divide(e)},S.prototype.ToDouble=function(){return parseFloat(this.toString())};var L=function(t,e){var n;if(void 0===Object.getOwnPropertyNames){for(n in e.prototype)void 0!==t.prototype[n]&&t.prototype[n]!==Object.prototype[n]||(t.prototype[n]=e.prototype[n]);for(n in e)void 0===t[n]&&(t[n]=e[n]);t.$baseCtor=e}else{for(var r=Object.getOwnPropertyNames(e.prototype),i=0;i<r.length;i++)void 0===Object.getOwnPropertyDescriptor(t.prototype,r[i])&&Object.defineProperty(t.prototype,r[i],Object.getOwnPropertyDescriptor(e.prototype,r[i]));for(n in e)void 0===t[n]&&(t[n]=e[n]);t.$baseCtor=e}};n.Path=function(){return[]},n.Path.prototype.push=Array.prototype.push,n.Paths=function(){return[]},n.Paths.prototype.push=Array.prototype.push,n.DoublePoint=function(){var t=arguments;this.X=0,this.Y=0,1===t.length?(this.X=t[0].X,this.Y=t[0].Y):2===t.length&&(this.X=t[0],this.Y=t[1])},n.DoublePoint0=function(){this.X=0,this.Y=0},n.DoublePoint0.prototype=n.DoublePoint.prototype,n.DoublePoint1=function(t){this.X=t.X,this.Y=t.Y},n.DoublePoint1.prototype=n.DoublePoint.prototype,n.DoublePoint2=function(t,e){this.X=t,this.Y=e},n.DoublePoint2.prototype=n.DoublePoint.prototype,n.PolyNode=function(){this.m_Parent=null,this.m_polygon=new n.Path,this.m_Index=0,this.m_jointype=0,this.m_endtype=0,this.m_Childs=[],this.IsOpen=!1},n.PolyNode.prototype.IsHoleNode=function(){for(var t=!0,e=this.m_Parent;null!==e;)t=!t,e=e.m_Parent;return t},n.PolyNode.prototype.ChildCount=function(){return this.m_Childs.length},n.PolyNode.prototype.Contour=function(){return this.m_polygon},n.PolyNode.prototype.AddChild=function(t){var e=this.m_Childs.length;this.m_Childs.push(t),t.m_Parent=this,t.m_Index=e},n.PolyNode.prototype.GetNext=function(){return this.m_Childs.length>0?this.m_Childs[0]:this.GetNextSiblingUp()},n.PolyNode.prototype.GetNextSiblingUp=function(){return null===this.m_Parent?null:this.m_Index===this.m_Parent.m_Childs.length-1?this.m_Parent.GetNextSiblingUp():this.m_Parent.m_Childs[this.m_Index+1]},n.PolyNode.prototype.Childs=function(){return this.m_Childs},n.PolyNode.prototype.Parent=function(){return this.m_Parent},n.PolyNode.prototype.IsHole=function(){return this.IsHoleNode()},n.PolyTree=function(){this.m_AllPolys=[],n.PolyNode.call(this)},n.PolyTree.prototype.Clear=function(){for(var t=0,e=this.m_AllPolys.length;t<e;t++)this.m_AllPolys[t]=null;this.m_AllPolys.length=0,this.m_Childs.length=0},n.PolyTree.prototype.GetFirst=function(){return this.m_Childs.length>0?this.m_Childs[0]:null},n.PolyTree.prototype.Total=function(){var t=this.m_AllPolys.length;return t>0&&this.m_Childs[0]!==this.m_AllPolys[0]&&t--,t},L(n.PolyTree,n.PolyNode),n.Math_Abs_Int64=n.Math_Abs_Int32=n.Math_Abs_Double=function(t){return Math.abs(t)},n.Math_Max_Int32_Int32=function(t,e){return Math.max(t,e)},s.msie||s.opera||s.safari?n.Cast_Int32=function(t){return 0|t}:n.Cast_Int32=function(t){return~~t},void 0===Number.toInteger&&(Number.toInteger=null),s.chrome?n.Cast_Int64=function(t){return t<-2147483648||t>2147483647?t<0?Math.ceil(t):Math.floor(t):~~t}:s.firefox&&"function"==typeof Number.toInteger?n.Cast_Int64=function(t){return Number.toInteger(t)}:s.msie7||s.msie8?n.Cast_Int64=function(t){return parseInt(t,10)}:s.msie?n.Cast_Int64=function(t){return t<-2147483648||t>2147483647?t<0?Math.ceil(t):Math.floor(t):0|t}:n.Cast_Int64=function(t){return t<0?Math.ceil(t):Math.floor(t)},n.Clear=function(t){t.length=0},n.PI=3.141592653589793,n.PI2=6.283185307179586,n.IntPoint=function(){var t=arguments,e=t.length;if(this.X=0,this.Y=0,n.use_xyz)if(this.Z=0,3===e)this.X=t[0],this.Y=t[1],this.Z=t[2];else if(2===e)this.X=t[0],this.Y=t[1],this.Z=0;else if(1===e)if(t[0]instanceof n.DoublePoint){var r=t[0];this.X=n.Clipper.Round(r.X),this.Y=n.Clipper.Round(r.Y),this.Z=0}else void 0===(i=t[0]).Z&&(i.Z=0),this.X=i.X,this.Y=i.Y,this.Z=i.Z;else this.X=0,this.Y=0,this.Z=0;else if(2===e)this.X=t[0],this.Y=t[1];else if(1===e)if(t[0]instanceof n.DoublePoint)r=t[0],this.X=n.Clipper.Round(r.X),this.Y=n.Clipper.Round(r.Y);else{var i=t[0];this.X=i.X,this.Y=i.Y}else this.X=0,this.Y=0},n.IntPoint.op_Equality=function(t,e){return t.X===e.X&&t.Y===e.Y},n.IntPoint.op_Inequality=function(t,e){return t.X!==e.X||t.Y!==e.Y},n.IntPoint0=function(){this.X=0,this.Y=0,n.use_xyz&&(this.Z=0)},n.IntPoint0.prototype=n.IntPoint.prototype,n.IntPoint1=function(t){this.X=t.X,this.Y=t.Y,n.use_xyz&&(void 0===t.Z?this.Z=0:this.Z=t.Z)},n.IntPoint1.prototype=n.IntPoint.prototype,n.IntPoint1dp=function(t){this.X=n.Clipper.Round(t.X),this.Y=n.Clipper.Round(t.Y),n.use_xyz&&(this.Z=0)},n.IntPoint1dp.prototype=n.IntPoint.prototype,n.IntPoint2=function(t,e,r){this.X=t,this.Y=e,n.use_xyz&&(this.Z=void 0===r?0:r)},n.IntPoint2.prototype=n.IntPoint.prototype,n.IntRect=function(){var t=arguments,e=t.length;if(4===e)this.left=t[0],this.top=t[1],this.right=t[2],this.bottom=t[3];else if(1===e){var n=t[0];this.left=n.left,this.top=n.top,this.right=n.right,this.bottom=n.bottom}else this.left=0,this.top=0,this.right=0,this.bottom=0},n.IntRect0=function(){this.left=0,this.top=0,this.right=0,this.bottom=0},n.IntRect0.prototype=n.IntRect.prototype,n.IntRect1=function(t){this.left=t.left,this.top=t.top,this.right=t.right,this.bottom=t.bottom},n.IntRect1.prototype=n.IntRect.prototype,n.IntRect4=function(t,e,n,r){this.left=t,this.top=e,this.right=n,this.bottom=r},n.IntRect4.prototype=n.IntRect.prototype,n.ClipType={ctIntersection:0,ctUnion:1,ctDifference:2,ctXor:3},n.PolyType={ptSubject:0,ptClip:1},n.PolyFillType={pftEvenOdd:0,pftNonZero:1,pftPositive:2,pftNegative:3},n.JoinType={jtSquare:0,jtRound:1,jtMiter:2},n.EndType={etOpenSquare:0,etOpenRound:1,etOpenButt:2,etClosedLine:3,etClosedPolygon:4},n.EdgeSide={esLeft:0,esRight:1},n.Direction={dRightToLeft:0,dLeftToRight:1},n.TEdge=function(){this.Bot=new n.IntPoint0,this.Curr=new n.IntPoint0,this.Top=new n.IntPoint0,this.Delta=new n.IntPoint0,this.Dx=0,this.PolyTyp=n.PolyType.ptSubject,this.Side=n.EdgeSide.esLeft,this.WindDelta=0,this.WindCnt=0,this.WindCnt2=0,this.OutIdx=0,this.Next=null,this.Prev=null,this.NextInLML=null,this.NextInAEL=null,this.PrevInAEL=null,this.NextInSEL=null,this.PrevInSEL=null},n.IntersectNode=function(){this.Edge1=null,this.Edge2=null,this.Pt=new n.IntPoint0},n.MyIntersectNodeSort=function(){},n.MyIntersectNodeSort.Compare=function(t,e){var n=e.Pt.Y-t.Pt.Y;return n>0?1:n<0?-1:0},n.LocalMinima=function(){this.Y=0,this.LeftBound=null,this.RightBound=null,this.Next=null},n.Scanbeam=function(){this.Y=0,this.Next=null},n.Maxima=function(){this.X=0,this.Next=null,this.Prev=null},n.OutRec=function(){this.Idx=0,this.IsHole=!1,this.IsOpen=!1,this.FirstLeft=null,this.Pts=null,this.BottomPt=null,this.PolyNode=null},n.OutPt=function(){this.Idx=0,this.Pt=new n.IntPoint0,this.Next=null,this.Prev=null},n.Join=function(){this.OutPt1=null,this.OutPt2=null,this.OffPt=new n.IntPoint0},n.ClipperBase=function(){this.m_MinimaList=null,this.m_CurrentLM=null,this.m_edges=new Array,this.m_UseFullRange=!1,this.m_HasOpenPaths=!1,this.PreserveCollinear=!1,this.m_Scanbeam=null,this.m_PolyOuts=null,this.m_ActiveEdges=null},n.ClipperBase.horizontal=-9007199254740992,n.ClipperBase.Skip=-2,n.ClipperBase.Unassigned=-1,n.ClipperBase.tolerance=1e-20,n.ClipperBase.loRange=47453132,n.ClipperBase.hiRange=0xfffffffffffff,n.ClipperBase.near_zero=function(t){return t>-n.ClipperBase.tolerance&&t<n.ClipperBase.tolerance},n.ClipperBase.IsHorizontal=function(t){return 0===t.Delta.Y},n.ClipperBase.prototype.PointIsVertex=function(t,e){var r=e;do{if(n.IntPoint.op_Equality(r.Pt,t))return!0;r=r.Next}while(r!==e);return!1},n.ClipperBase.prototype.PointOnLineSegment=function(t,e,n,r){return r?t.X===e.X&&t.Y===e.Y||t.X===n.X&&t.Y===n.Y||t.X>e.X==t.X<n.X&&t.Y>e.Y==t.Y<n.Y&&S.op_Equality(S.Int128Mul(t.X-e.X,n.Y-e.Y),S.Int128Mul(n.X-e.X,t.Y-e.Y)):t.X===e.X&&t.Y===e.Y||t.X===n.X&&t.Y===n.Y||t.X>e.X==t.X<n.X&&t.Y>e.Y==t.Y<n.Y&&(t.X-e.X)*(n.Y-e.Y)==(n.X-e.X)*(t.Y-e.Y)},n.ClipperBase.prototype.PointOnPolygon=function(t,e,n){for(var r=e;;){if(this.PointOnLineSegment(t,r.Pt,r.Next.Pt,n))return!0;if((r=r.Next)===e)break}return!1},n.ClipperBase.prototype.SlopesEqual=n.ClipperBase.SlopesEqual=function(){var t,e,r,i,o,s,u=arguments,a=u.length;return 3===a?(t=u[0],e=u[1],u[2]?S.op_Equality(S.Int128Mul(t.Delta.Y,e.Delta.X),S.Int128Mul(t.Delta.X,e.Delta.Y)):n.Cast_Int64(t.Delta.Y*e.Delta.X)===n.Cast_Int64(t.Delta.X*e.Delta.Y)):4===a?(r=u[0],i=u[1],o=u[2],u[3]?S.op_Equality(S.Int128Mul(r.Y-i.Y,i.X-o.X),S.Int128Mul(r.X-i.X,i.Y-o.Y)):n.Cast_Int64((r.Y-i.Y)*(i.X-o.X))-n.Cast_Int64((r.X-i.X)*(i.Y-o.Y))==0):(r=u[0],i=u[1],o=u[2],s=u[3],u[4]?S.op_Equality(S.Int128Mul(r.Y-i.Y,o.X-s.X),S.Int128Mul(r.X-i.X,o.Y-s.Y)):n.Cast_Int64((r.Y-i.Y)*(o.X-s.X))-n.Cast_Int64((r.X-i.X)*(o.Y-s.Y))==0)},n.ClipperBase.SlopesEqual3=function(t,e,r){return r?S.op_Equality(S.Int128Mul(t.Delta.Y,e.Delta.X),S.Int128Mul(t.Delta.X,e.Delta.Y)):n.Cast_Int64(t.Delta.Y*e.Delta.X)===n.Cast_Int64(t.Delta.X*e.Delta.Y)},n.ClipperBase.SlopesEqual4=function(t,e,r,i){return i?S.op_Equality(S.Int128Mul(t.Y-e.Y,e.X-r.X),S.Int128Mul(t.X-e.X,e.Y-r.Y)):n.Cast_Int64((t.Y-e.Y)*(e.X-r.X))-n.Cast_Int64((t.X-e.X)*(e.Y-r.Y))==0},n.ClipperBase.SlopesEqual5=function(t,e,r,i,o){return o?S.op_Equality(S.Int128Mul(t.Y-e.Y,r.X-i.X),S.Int128Mul(t.X-e.X,r.Y-i.Y)):n.Cast_Int64((t.Y-e.Y)*(r.X-i.X))-n.Cast_Int64((t.X-e.X)*(r.Y-i.Y))==0},n.ClipperBase.prototype.Clear=function(){this.DisposeLocalMinimaList();for(var t=0,e=this.m_edges.length;t<e;++t){for(var r=0,i=this.m_edges[t].length;r<i;++r)this.m_edges[t][r]=null;n.Clear(this.m_edges[t])}n.Clear(this.m_edges),this.m_UseFullRange=!1,this.m_HasOpenPaths=!1},n.ClipperBase.prototype.DisposeLocalMinimaList=function(){for(;null!==this.m_MinimaList;){var t=this.m_MinimaList.Next;this.m_MinimaList=null,this.m_MinimaList=t}this.m_CurrentLM=null},n.ClipperBase.prototype.RangeTest=function(t,e){e.Value?(t.X>n.ClipperBase.hiRange||t.Y>n.ClipperBase.hiRange||-t.X>n.ClipperBase.hiRange||-t.Y>n.ClipperBase.hiRange)&&n.Error("Coordinate outside allowed range in RangeTest()."):(t.X>n.ClipperBase.loRange||t.Y>n.ClipperBase.loRange||-t.X>n.ClipperBase.loRange||-t.Y>n.ClipperBase.loRange)&&(e.Value=!0,this.RangeTest(t,e))},n.ClipperBase.prototype.InitEdge=function(t,e,r,i){t.Next=e,t.Prev=r,t.Curr.X=i.X,t.Curr.Y=i.Y,n.use_xyz&&(t.Curr.Z=i.Z),t.OutIdx=-1},n.ClipperBase.prototype.InitEdge2=function(t,e){t.Curr.Y>=t.Next.Curr.Y?(t.Bot.X=t.Curr.X,t.Bot.Y=t.Curr.Y,n.use_xyz&&(t.Bot.Z=t.Curr.Z),t.Top.X=t.Next.Curr.X,t.Top.Y=t.Next.Curr.Y,n.use_xyz&&(t.Top.Z=t.Next.Curr.Z)):(t.Top.X=t.Curr.X,t.Top.Y=t.Curr.Y,n.use_xyz&&(t.Top.Z=t.Curr.Z),t.Bot.X=t.Next.Curr.X,t.Bot.Y=t.Next.Curr.Y,n.use_xyz&&(t.Bot.Z=t.Next.Curr.Z)),this.SetDx(t),t.PolyTyp=e},n.ClipperBase.prototype.FindNextLocMin=function(t){for(var e;;){for(;n.IntPoint.op_Inequality(t.Bot,t.Prev.Bot)||n.IntPoint.op_Equality(t.Curr,t.Top);)t=t.Next;if(t.Dx!==n.ClipperBase.horizontal&&t.Prev.Dx!==n.ClipperBase.horizontal)break;for(;t.Prev.Dx===n.ClipperBase.horizontal;)t=t.Prev;for(e=t;t.Dx===n.ClipperBase.horizontal;)t=t.Next;if(t.Top.Y!==t.Prev.Bot.Y){e.Prev.Bot.X<t.Bot.X&&(t=e);break}}return t},n.ClipperBase.prototype.ProcessBound=function(t,e){var r,i,o=t;if(o.OutIdx===n.ClipperBase.Skip){if(t=o,e){for(;t.Top.Y===t.Next.Bot.Y;)t=t.Next;for(;t!==o&&t.Dx===n.ClipperBase.horizontal;)t=t.Prev}else{for(;t.Top.Y===t.Prev.Bot.Y;)t=t.Prev;for(;t!==o&&t.Dx===n.ClipperBase.horizontal;)t=t.Next}if(t===o)o=e?t.Next:t.Prev;else{t=e?o.Next:o.Prev;var s=new n.LocalMinima;s.Next=null,s.Y=t.Bot.Y,s.LeftBound=null,s.RightBound=t,t.WindDelta=0,o=this.ProcessBound(t,e),this.InsertLocalMinima(s)}return o}if(t.Dx===n.ClipperBase.horizontal&&((r=e?t.Prev:t.Next).Dx===n.ClipperBase.horizontal?r.Bot.X!==t.Bot.X&&r.Top.X!==t.Bot.X&&this.ReverseHorizontal(t):r.Bot.X!==t.Bot.X&&this.ReverseHorizontal(t)),r=t,e){for(;o.Top.Y===o.Next.Bot.Y&&o.Next.OutIdx!==n.ClipperBase.Skip;)o=o.Next;if(o.Dx===n.ClipperBase.horizontal&&o.Next.OutIdx!==n.ClipperBase.Skip){for(i=o;i.Prev.Dx===n.ClipperBase.horizontal;)i=i.Prev;i.Prev.Top.X>o.Next.Top.X&&(o=i.Prev)}for(;t!==o;)t.NextInLML=t.Next,t.Dx===n.ClipperBase.horizontal&&t!==r&&t.Bot.X!==t.Prev.Top.X&&this.ReverseHorizontal(t),t=t.Next;t.Dx===n.ClipperBase.horizontal&&t!==r&&t.Bot.X!==t.Prev.Top.X&&this.ReverseHorizontal(t),o=o.Next}else{for(;o.Top.Y===o.Prev.Bot.Y&&o.Prev.OutIdx!==n.ClipperBase.Skip;)o=o.Prev;if(o.Dx===n.ClipperBase.horizontal&&o.Prev.OutIdx!==n.ClipperBase.Skip){for(i=o;i.Next.Dx===n.ClipperBase.horizontal;)i=i.Next;(i.Next.Top.X===o.Prev.Top.X||i.Next.Top.X>o.Prev.Top.X)&&(o=i.Next)}for(;t!==o;)t.NextInLML=t.Prev,t.Dx===n.ClipperBase.horizontal&&t!==r&&t.Bot.X!==t.Next.Top.X&&this.ReverseHorizontal(t),t=t.Prev;t.Dx===n.ClipperBase.horizontal&&t!==r&&t.Bot.X!==t.Next.Top.X&&this.ReverseHorizontal(t),o=o.Prev}return o},n.ClipperBase.prototype.AddPath=function(t,e,r){n.use_lines?r||e!==n.PolyType.ptClip||n.Error("AddPath: Open paths must be subject."):r||n.Error("AddPath: Open paths have been disabled.");var i=t.length-1;if(r)for(;i>0&&n.IntPoint.op_Equality(t[i],t[0]);)--i;for(;i>0&&n.IntPoint.op_Equality(t[i],t[i-1]);)--i;if(r&&i<2||!r&&i<1)return!1;for(var o=new Array,s=0;s<=i;s++)o.push(new n.TEdge);var u=!0;o[1].Curr.X=t[1].X,o[1].Curr.Y=t[1].Y,n.use_xyz&&(o[1].Curr.Z=t[1].Z);var a={Value:this.m_UseFullRange};for(this.RangeTest(t[0],a),this.m_UseFullRange=a.Value,a.Value=this.m_UseFullRange,this.RangeTest(t[i],a),this.m_UseFullRange=a.Value,this.InitEdge(o[0],o[1],o[i],t[0]),this.InitEdge(o[i],o[0],o[i-1],t[i]),s=i-1;s>=1;--s)a.Value=this.m_UseFullRange,this.RangeTest(t[s],a),this.m_UseFullRange=a.Value,this.InitEdge(o[s],o[s+1],o[s-1],t[s]);for(var l,h=o[0],c=h,f=h;;)if(c.Curr!==c.Next.Curr||!r&&c.Next===h){if(c.Prev===c.Next)break;if(!r||!n.ClipperBase.SlopesEqual4(c.Prev.Curr,c.Curr,c.Next.Curr,this.m_UseFullRange)||this.PreserveCollinear&&this.Pt2IsBetweenPt1AndPt3(c.Prev.Curr,c.Curr,c.Next.Curr)){if((c=c.Next)===f||!r&&c.Next===h)break}else c===h&&(h=c.Next),f=c=(c=this.RemoveEdge(c)).Prev}else{if(c===c.Next)break;c===h&&(h=c.Next),f=c=this.RemoveEdge(c)}if(!r&&c===c.Next||r&&c.Prev===c.Next)return!1;r||(this.m_HasOpenPaths=!0,h.Prev.OutIdx=n.ClipperBase.Skip),c=h;do{this.InitEdge2(c,e),c=c.Next,u&&c.Curr.Y!==h.Curr.Y&&(u=!1)}while(c!==h);if(u){if(r)return!1;for(c.Prev.OutIdx=n.ClipperBase.Skip,(v=new n.LocalMinima).Next=null,v.Y=c.Bot.Y,v.LeftBound=null,v.RightBound=c,v.RightBound.Side=n.EdgeSide.esRight,v.RightBound.WindDelta=0;c.Bot.X!==c.Prev.Top.X&&this.ReverseHorizontal(c),c.Next.OutIdx!==n.ClipperBase.Skip;)c.NextInLML=c.Next,c=c.Next;return this.InsertLocalMinima(v),this.m_edges.push(o),!0}this.m_edges.push(o);var p=null;for(n.IntPoint.op_Equality(c.Prev.Bot,c.Prev.Top)&&(c=c.Next);(c=this.FindNextLocMin(c))!==p;){var v;null===p&&(p=c),(v=new n.LocalMinima).Next=null,v.Y=c.Bot.Y,c.Dx<c.Prev.Dx?(v.LeftBound=c.Prev,v.RightBound=c,l=!1):(v.LeftBound=c,v.RightBound=c.Prev,l=!0),v.LeftBound.Side=n.EdgeSide.esLeft,v.RightBound.Side=n.EdgeSide.esRight,r?v.LeftBound.Next===v.RightBound?v.LeftBound.WindDelta=-1:v.LeftBound.WindDelta=1:v.LeftBound.WindDelta=0,v.RightBound.WindDelta=-v.LeftBound.WindDelta,(c=this.ProcessBound(v.LeftBound,l)).OutIdx===n.ClipperBase.Skip&&(c=this.ProcessBound(c,l));var y=this.ProcessBound(v.RightBound,!l);y.OutIdx===n.ClipperBase.Skip&&(y=this.ProcessBound(y,!l)),v.LeftBound.OutIdx===n.ClipperBase.Skip?v.LeftBound=null:v.RightBound.OutIdx===n.ClipperBase.Skip&&(v.RightBound=null),this.InsertLocalMinima(v),l||(c=y)}return!0},n.ClipperBase.prototype.AddPaths=function(t,e,n){for(var r=!1,i=0,o=t.length;i<o;++i)this.AddPath(t[i],e,n)&&(r=!0);return r},n.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3=function(t,e,r){return!(n.IntPoint.op_Equality(t,r)||n.IntPoint.op_Equality(t,e)||n.IntPoint.op_Equality(r,e))&&(t.X!==r.X?e.X>t.X==e.X<r.X:e.Y>t.Y==e.Y<r.Y)},n.ClipperBase.prototype.RemoveEdge=function(t){t.Prev.Next=t.Next,t.Next.Prev=t.Prev;var e=t.Next;return t.Prev=null,e},n.ClipperBase.prototype.SetDx=function(t){t.Delta.X=t.Top.X-t.Bot.X,t.Delta.Y=t.Top.Y-t.Bot.Y,0===t.Delta.Y?t.Dx=n.ClipperBase.horizontal:t.Dx=t.Delta.X/t.Delta.Y},n.ClipperBase.prototype.InsertLocalMinima=function(t){if(null===this.m_MinimaList)this.m_MinimaList=t;else if(t.Y>=this.m_MinimaList.Y)t.Next=this.m_MinimaList,this.m_MinimaList=t;else{for(var e=this.m_MinimaList;null!==e.Next&&t.Y<e.Next.Y;)e=e.Next;t.Next=e.Next,e.Next=t}},n.ClipperBase.prototype.PopLocalMinima=function(t,e){return e.v=this.m_CurrentLM,null!==this.m_CurrentLM&&this.m_CurrentLM.Y===t&&(this.m_CurrentLM=this.m_CurrentLM.Next,!0)},n.ClipperBase.prototype.ReverseHorizontal=function(t){var e=t.Top.X;t.Top.X=t.Bot.X,t.Bot.X=e,n.use_xyz&&(e=t.Top.Z,t.Top.Z=t.Bot.Z,t.Bot.Z=e)},n.ClipperBase.prototype.Reset=function(){if(this.m_CurrentLM=this.m_MinimaList,null!==this.m_CurrentLM){this.m_Scanbeam=null;for(var t=this.m_MinimaList;null!==t;){this.InsertScanbeam(t.Y);var e=t.LeftBound;null!==e&&(e.Curr.X=e.Bot.X,e.Curr.Y=e.Bot.Y,n.use_xyz&&(e.Curr.Z=e.Bot.Z),e.OutIdx=n.ClipperBase.Unassigned),null!==(e=t.RightBound)&&(e.Curr.X=e.Bot.X,e.Curr.Y=e.Bot.Y,n.use_xyz&&(e.Curr.Z=e.Bot.Z),e.OutIdx=n.ClipperBase.Unassigned),t=t.Next}this.m_ActiveEdges=null}},n.ClipperBase.prototype.InsertScanbeam=function(t){if(null===this.m_Scanbeam)this.m_Scanbeam=new n.Scanbeam,this.m_Scanbeam.Next=null,this.m_Scanbeam.Y=t;else if(t>this.m_Scanbeam.Y){var e=new n.Scanbeam;e.Y=t,e.Next=this.m_Scanbeam,this.m_Scanbeam=e}else{for(var r=this.m_Scanbeam;null!==r.Next&&t<=r.Next.Y;)r=r.Next;if(t===r.Y)return;var i=new n.Scanbeam;i.Y=t,i.Next=r.Next,r.Next=i}},n.ClipperBase.prototype.PopScanbeam=function(t){return null===this.m_Scanbeam?(t.v=0,!1):(t.v=this.m_Scanbeam.Y,this.m_Scanbeam=this.m_Scanbeam.Next,!0)},n.ClipperBase.prototype.LocalMinimaPending=function(){return null!==this.m_CurrentLM},n.ClipperBase.prototype.CreateOutRec=function(){var t=new n.OutRec;return t.Idx=n.ClipperBase.Unassigned,t.IsHole=!1,t.IsOpen=!1,t.FirstLeft=null,t.Pts=null,t.BottomPt=null,t.PolyNode=null,this.m_PolyOuts.push(t),t.Idx=this.m_PolyOuts.length-1,t},n.ClipperBase.prototype.DisposeOutRec=function(t){var e=this.m_PolyOuts[t];e.Pts=null,e=null,this.m_PolyOuts[t]=null},n.ClipperBase.prototype.UpdateEdgeIntoAEL=function(t){null===t.NextInLML&&n.Error("UpdateEdgeIntoAEL: invalid call");var e=t.PrevInAEL,r=t.NextInAEL;return t.NextInLML.OutIdx=t.OutIdx,null!==e?e.NextInAEL=t.NextInLML:this.m_ActiveEdges=t.NextInLML,null!==r&&(r.PrevInAEL=t.NextInLML),t.NextInLML.Side=t.Side,t.NextInLML.WindDelta=t.WindDelta,t.NextInLML.WindCnt=t.WindCnt,t.NextInLML.WindCnt2=t.WindCnt2,(t=t.NextInLML).Curr.X=t.Bot.X,t.Curr.Y=t.Bot.Y,t.PrevInAEL=e,t.NextInAEL=r,n.ClipperBase.IsHorizontal(t)||this.InsertScanbeam(t.Top.Y),t},n.ClipperBase.prototype.SwapPositionsInAEL=function(t,e){if(t.NextInAEL!==t.PrevInAEL&&e.NextInAEL!==e.PrevInAEL){if(t.NextInAEL===e){var n=e.NextInAEL;null!==n&&(n.PrevInAEL=t);var r=t.PrevInAEL;null!==r&&(r.NextInAEL=e),e.PrevInAEL=r,e.NextInAEL=t,t.PrevInAEL=e,t.NextInAEL=n}else if(e.NextInAEL===t){var i=t.NextInAEL;null!==i&&(i.PrevInAEL=e);var o=e.PrevInAEL;null!==o&&(o.NextInAEL=t),t.PrevInAEL=o,t.NextInAEL=e,e.PrevInAEL=t,e.NextInAEL=i}else{var s=t.NextInAEL,u=t.PrevInAEL;t.NextInAEL=e.NextInAEL,null!==t.NextInAEL&&(t.NextInAEL.PrevInAEL=t),t.PrevInAEL=e.PrevInAEL,null!==t.PrevInAEL&&(t.PrevInAEL.NextInAEL=t),e.NextInAEL=s,null!==e.NextInAEL&&(e.NextInAEL.PrevInAEL=e),e.PrevInAEL=u,null!==e.PrevInAEL&&(e.PrevInAEL.NextInAEL=e)}null===t.PrevInAEL?this.m_ActiveEdges=t:null===e.PrevInAEL&&(this.m_ActiveEdges=e)}},n.ClipperBase.prototype.DeleteFromAEL=function(t){var e=t.PrevInAEL,n=t.NextInAEL;null===e&&null===n&&t!==this.m_ActiveEdges||(null!==e?e.NextInAEL=n:this.m_ActiveEdges=n,null!==n&&(n.PrevInAEL=e),t.NextInAEL=null,t.PrevInAEL=null)},n.Clipper=function(t){void 0===t&&(t=0),this.m_PolyOuts=null,this.m_ClipType=n.ClipType.ctIntersection,this.m_Scanbeam=null,this.m_Maxima=null,this.m_ActiveEdges=null,this.m_SortedEdges=null,this.m_IntersectList=null,this.m_IntersectNodeComparer=null,this.m_ExecuteLocked=!1,this.m_ClipFillType=n.PolyFillType.pftEvenOdd,this.m_SubjFillType=n.PolyFillType.pftEvenOdd,this.m_Joins=null,this.m_GhostJoins=null,this.m_UsingPolyTree=!1,this.ReverseSolution=!1,this.StrictlySimple=!1,n.ClipperBase.call(this),this.m_Scanbeam=null,this.m_Maxima=null,this.m_ActiveEdges=null,this.m_SortedEdges=null,this.m_IntersectList=new Array,this.m_IntersectNodeComparer=n.MyIntersectNodeSort.Compare,this.m_ExecuteLocked=!1,this.m_UsingPolyTree=!1,this.m_PolyOuts=new Array,this.m_Joins=new Array,this.m_GhostJoins=new Array,this.ReverseSolution=0!=(1&t),this.StrictlySimple=0!=(2&t),this.PreserveCollinear=0!=(4&t),n.use_xyz&&(this.ZFillFunction=null)},n.Clipper.ioReverseSolution=1,n.Clipper.ioStrictlySimple=2,n.Clipper.ioPreserveCollinear=4,n.Clipper.prototype.Clear=function(){0!==this.m_edges.length&&(this.DisposeAllPolyPts(),n.ClipperBase.prototype.Clear.call(this))},n.Clipper.prototype.InsertMaxima=function(t){var e=new n.Maxima;if(e.X=t,null===this.m_Maxima)this.m_Maxima=e,this.m_Maxima.Next=null,this.m_Maxima.Prev=null;else if(t<this.m_Maxima.X)e.Next=this.m_Maxima,e.Prev=null,this.m_Maxima=e;else{for(var r=this.m_Maxima;null!==r.Next&&t>=r.Next.X;)r=r.Next;if(t===r.X)return;e.Next=r.Next,e.Prev=r,null!==r.Next&&(r.Next.Prev=e),r.Next=e}},n.Clipper.prototype.Execute=function(){var t=arguments,e=t.length,r=t[1]instanceof n.PolyTree;if(4===e&&!r){var i=t[0],o=t[1],s=t[2],u=t[3];if(this.m_ExecuteLocked)return!1;this.m_HasOpenPaths&&n.Error("Error: PolyTree struct is needed for open path clipping."),this.m_ExecuteLocked=!0,n.Clear(o),this.m_SubjFillType=s,this.m_ClipFillType=u,this.m_ClipType=i,this.m_UsingPolyTree=!1;try{(l=this.ExecuteInternal())&&this.BuildResult(o)}finally{this.DisposeAllPolyPts(),this.m_ExecuteLocked=!1}return l}if(4===e&&r){i=t[0];var a=t[1];if(s=t[2],u=t[3],this.m_ExecuteLocked)return!1;this.m_ExecuteLocked=!0,this.m_SubjFillType=s,this.m_ClipFillType=u,this.m_ClipType=i,this.m_UsingPolyTree=!0;try{var l;(l=this.ExecuteInternal())&&this.BuildResult2(a)}finally{this.DisposeAllPolyPts(),this.m_ExecuteLocked=!1}return l}return 2!==e||r?2===e&&r?(i=t[0],a=t[1],this.Execute(i,a,n.PolyFillType.pftEvenOdd,n.PolyFillType.pftEvenOdd)):void 0:(i=t[0],o=t[1],this.Execute(i,o,n.PolyFillType.pftEvenOdd,n.PolyFillType.pftEvenOdd))},n.Clipper.prototype.FixHoleLinkage=function(t){if(null!==t.FirstLeft&&(t.IsHole===t.FirstLeft.IsHole||null===t.FirstLeft.Pts)){for(var e=t.FirstLeft;null!==e&&(e.IsHole===t.IsHole||null===e.Pts);)e=e.FirstLeft;t.FirstLeft=e}},n.Clipper.prototype.ExecuteInternal=function(){try{this.Reset(),this.m_SortedEdges=null,this.m_Maxima=null;var t,e,n,r={},i={};if(!this.PopScanbeam(r))return!1;for(this.InsertLocalMinimaIntoAEL(r.v);this.PopScanbeam(i)||this.LocalMinimaPending();){if(this.ProcessHorizontals(),this.m_GhostJoins.length=0,!this.ProcessIntersections(i.v))return!1;this.ProcessEdgesAtTopOfScanbeam(i.v),r.v=i.v,this.InsertLocalMinimaIntoAEL(r.v)}for(e=0,n=this.m_PolyOuts.length;e<n;e++)null===(t=this.m_PolyOuts[e]).Pts||t.IsOpen||(t.IsHole^this.ReverseSolution)==this.Area$1(t)>0&&this.ReversePolyPtLinks(t.Pts);for(this.JoinCommonEdges(),e=0,n=this.m_PolyOuts.length;e<n;e++)null!==(t=this.m_PolyOuts[e]).Pts&&(t.IsOpen?this.FixupOutPolyline(t):this.FixupOutPolygon(t));return this.StrictlySimple&&this.DoSimplePolygons(),!0}finally{this.m_Joins.length=0,this.m_GhostJoins.length=0}},n.Clipper.prototype.DisposeAllPolyPts=function(){for(var t=0,e=this.m_PolyOuts.length;t<e;++t)this.DisposeOutRec(t);n.Clear(this.m_PolyOuts)},n.Clipper.prototype.AddJoin=function(t,e,r){var i=new n.Join;i.OutPt1=t,i.OutPt2=e,i.OffPt.X=r.X,i.OffPt.Y=r.Y,n.use_xyz&&(i.OffPt.Z=r.Z),this.m_Joins.push(i)},n.Clipper.prototype.AddGhostJoin=function(t,e){var r=new n.Join;r.OutPt1=t,r.OffPt.X=e.X,r.OffPt.Y=e.Y,n.use_xyz&&(r.OffPt.Z=e.Z),this.m_GhostJoins.push(r)},n.Clipper.prototype.SetZ=function(t,e,r){if(null!==this.ZFillFunction){if(0!==t.Z||null===this.ZFillFunction)return;n.IntPoint.op_Equality(t,e.Bot)?t.Z=e.Bot.Z:n.IntPoint.op_Equality(t,e.Top)?t.Z=e.Top.Z:n.IntPoint.op_Equality(t,r.Bot)?t.Z=r.Bot.Z:n.IntPoint.op_Equality(t,r.Top)?t.Z=r.Top.Z:this.ZFillFunction(e.Bot,e.Top,r.Bot,r.Top,t)}},n.Clipper.prototype.InsertLocalMinimaIntoAEL=function(t){for(var e,r,i={};this.PopLocalMinima(t,i);){e=i.v.LeftBound,r=i.v.RightBound;var o=null;if(null===e?(this.InsertEdgeIntoAEL(r,null),this.SetWindingCount(r),this.IsContributing(r)&&(o=this.AddOutPt(r,r.Bot))):null===r?(this.InsertEdgeIntoAEL(e,null),this.SetWindingCount(e),this.IsContributing(e)&&(o=this.AddOutPt(e,e.Bot)),this.InsertScanbeam(e.Top.Y)):(this.InsertEdgeIntoAEL(e,null),this.InsertEdgeIntoAEL(r,e),this.SetWindingCount(e),r.WindCnt=e.WindCnt,r.WindCnt2=e.WindCnt2,this.IsContributing(e)&&(o=this.AddLocalMinPoly(e,r,e.Bot)),this.InsertScanbeam(e.Top.Y)),null!==r&&(n.ClipperBase.IsHorizontal(r)?(null!==r.NextInLML&&this.InsertScanbeam(r.NextInLML.Top.Y),this.AddEdgeToSEL(r)):this.InsertScanbeam(r.Top.Y)),null!==e&&null!==r){if(null!==o&&n.ClipperBase.IsHorizontal(r)&&this.m_GhostJoins.length>0&&0!==r.WindDelta)for(var s=0,u=this.m_GhostJoins.length;s<u;s++){var a=this.m_GhostJoins[s];this.HorzSegmentsOverlap(a.OutPt1.Pt.X,a.OffPt.X,r.Bot.X,r.Top.X)&&this.AddJoin(a.OutPt1,o,a.OffPt)}if(e.OutIdx>=0&&null!==e.PrevInAEL&&e.PrevInAEL.Curr.X===e.Bot.X&&e.PrevInAEL.OutIdx>=0&&n.ClipperBase.SlopesEqual5(e.PrevInAEL.Curr,e.PrevInAEL.Top,e.Curr,e.Top,this.m_UseFullRange)&&0!==e.WindDelta&&0!==e.PrevInAEL.WindDelta){var l=this.AddOutPt(e.PrevInAEL,e.Bot);this.AddJoin(o,l,e.Top)}if(e.NextInAEL!==r){r.OutIdx>=0&&r.PrevInAEL.OutIdx>=0&&n.ClipperBase.SlopesEqual5(r.PrevInAEL.Curr,r.PrevInAEL.Top,r.Curr,r.Top,this.m_UseFullRange)&&0!==r.WindDelta&&0!==r.PrevInAEL.WindDelta&&(l=this.AddOutPt(r.PrevInAEL,r.Bot),this.AddJoin(o,l,r.Top));var h=e.NextInAEL;if(null!==h)for(;h!==r;)this.IntersectEdges(r,h,e.Curr),h=h.NextInAEL}}}},n.Clipper.prototype.InsertEdgeIntoAEL=function(t,e){if(null===this.m_ActiveEdges)t.PrevInAEL=null,t.NextInAEL=null,this.m_ActiveEdges=t;else if(null===e&&this.E2InsertsBeforeE1(this.m_ActiveEdges,t))t.PrevInAEL=null,t.NextInAEL=this.m_ActiveEdges,this.m_ActiveEdges.PrevInAEL=t,this.m_ActiveEdges=t;else{for(null===e&&(e=this.m_ActiveEdges);null!==e.NextInAEL&&!this.E2InsertsBeforeE1(e.NextInAEL,t);)e=e.NextInAEL;t.NextInAEL=e.NextInAEL,null!==e.NextInAEL&&(e.NextInAEL.PrevInAEL=t),t.PrevInAEL=e,e.NextInAEL=t}},n.Clipper.prototype.E2InsertsBeforeE1=function(t,e){return e.Curr.X===t.Curr.X?e.Top.Y>t.Top.Y?e.Top.X<n.Clipper.TopX(t,e.Top.Y):t.Top.X>n.Clipper.TopX(e,t.Top.Y):e.Curr.X<t.Curr.X},n.Clipper.prototype.IsEvenOddFillType=function(t){return t.PolyTyp===n.PolyType.ptSubject?this.m_SubjFillType===n.PolyFillType.pftEvenOdd:this.m_ClipFillType===n.PolyFillType.pftEvenOdd},n.Clipper.prototype.IsEvenOddAltFillType=function(t){return t.PolyTyp===n.PolyType.ptSubject?this.m_ClipFillType===n.PolyFillType.pftEvenOdd:this.m_SubjFillType===n.PolyFillType.pftEvenOdd},n.Clipper.prototype.IsContributing=function(t){var e,r;switch(t.PolyTyp===n.PolyType.ptSubject?(e=this.m_SubjFillType,r=this.m_ClipFillType):(e=this.m_ClipFillType,r=this.m_SubjFillType),e){case n.PolyFillType.pftEvenOdd:if(0===t.WindDelta&&1!==t.WindCnt)return!1;break;case n.PolyFillType.pftNonZero:if(1!==Math.abs(t.WindCnt))return!1;break;case n.PolyFillType.pftPositive:if(1!==t.WindCnt)return!1;break;default:if(-1!==t.WindCnt)return!1}switch(this.m_ClipType){case n.ClipType.ctIntersection:switch(r){case n.PolyFillType.pftEvenOdd:case n.PolyFillType.pftNonZero:return 0!==t.WindCnt2;case n.PolyFillType.pftPositive:return t.WindCnt2>0;default:return t.WindCnt2<0}case n.ClipType.ctUnion:switch(r){case n.PolyFillType.pftEvenOdd:case n.PolyFillType.pftNonZero:return 0===t.WindCnt2;case n.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}case n.ClipType.ctDifference:if(t.PolyTyp===n.PolyType.ptSubject)switch(r){case n.PolyFillType.pftEvenOdd:case n.PolyFillType.pftNonZero:return 0===t.WindCnt2;case n.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}else switch(r){case n.PolyFillType.pftEvenOdd:case n.PolyFillType.pftNonZero:return 0!==t.WindCnt2;case n.PolyFillType.pftPositive:return t.WindCnt2>0;default:return t.WindCnt2<0}case n.ClipType.ctXor:if(0!==t.WindDelta)return!0;switch(r){case n.PolyFillType.pftEvenOdd:case n.PolyFillType.pftNonZero:return 0===t.WindCnt2;case n.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}}return!0},n.Clipper.prototype.SetWindingCount=function(t){for(var e=t.PrevInAEL;null!==e&&(e.PolyTyp!==t.PolyTyp||0===e.WindDelta);)e=e.PrevInAEL;if(null===e){var r=t.PolyTyp===n.PolyType.ptSubject?this.m_SubjFillType:this.m_ClipFillType;0===t.WindDelta?t.WindCnt=r===n.PolyFillType.pftNegative?-1:1:t.WindCnt=t.WindDelta,t.WindCnt2=0,e=this.m_ActiveEdges}else if(0===t.WindDelta&&this.m_ClipType!==n.ClipType.ctUnion)t.WindCnt=1,t.WindCnt2=e.WindCnt2,e=e.NextInAEL;else if(this.IsEvenOddFillType(t)){if(0===t.WindDelta){for(var i=!0,o=e.PrevInAEL;null!==o;)o.PolyTyp===e.PolyTyp&&0!==o.WindDelta&&(i=!i),o=o.PrevInAEL;t.WindCnt=i?0:1}else t.WindCnt=t.WindDelta;t.WindCnt2=e.WindCnt2,e=e.NextInAEL}else e.WindCnt*e.WindDelta<0?Math.abs(e.WindCnt)>1?e.WindDelta*t.WindDelta<0?t.WindCnt=e.WindCnt:t.WindCnt=e.WindCnt+t.WindDelta:t.WindCnt=0===t.WindDelta?1:t.WindDelta:0===t.WindDelta?t.WindCnt=e.WindCnt<0?e.WindCnt-1:e.WindCnt+1:e.WindDelta*t.WindDelta<0?t.WindCnt=e.WindCnt:t.WindCnt=e.WindCnt+t.WindDelta,t.WindCnt2=e.WindCnt2,e=e.NextInAEL;if(this.IsEvenOddAltFillType(t))for(;e!==t;)0!==e.WindDelta&&(t.WindCnt2=0===t.WindCnt2?1:0),e=e.NextInAEL;else for(;e!==t;)t.WindCnt2+=e.WindDelta,e=e.NextInAEL},n.Clipper.prototype.AddEdgeToSEL=function(t){null===this.m_SortedEdges?(this.m_SortedEdges=t,t.PrevInSEL=null,t.NextInSEL=null):(t.NextInSEL=this.m_SortedEdges,t.PrevInSEL=null,this.m_SortedEdges.PrevInSEL=t,this.m_SortedEdges=t)},n.Clipper.prototype.PopEdgeFromSEL=function(t){if(t.v=this.m_SortedEdges,null===t.v)return!1;var e=t.v;return this.m_SortedEdges=t.v.NextInSEL,null!==this.m_SortedEdges&&(this.m_SortedEdges.PrevInSEL=null),e.NextInSEL=null,e.PrevInSEL=null,!0},n.Clipper.prototype.CopyAELToSEL=function(){var t=this.m_ActiveEdges;for(this.m_SortedEdges=t;null!==t;)t.PrevInSEL=t.PrevInAEL,t.NextInSEL=t.NextInAEL,t=t.NextInAEL},n.Clipper.prototype.SwapPositionsInSEL=function(t,e){if(!(null===t.NextInSEL&&null===t.PrevInSEL||null===e.NextInSEL&&null===e.PrevInSEL)){if(t.NextInSEL===e)null!==(n=e.NextInSEL)&&(n.PrevInSEL=t),null!==(r=t.PrevInSEL)&&(r.NextInSEL=e),e.PrevInSEL=r,e.NextInSEL=t,t.PrevInSEL=e,t.NextInSEL=n;else if(e.NextInSEL===t)null!==(n=t.NextInSEL)&&(n.PrevInSEL=e),null!==(r=e.PrevInSEL)&&(r.NextInSEL=t),t.PrevInSEL=r,t.NextInSEL=e,e.PrevInSEL=t,e.NextInSEL=n;else{var n=t.NextInSEL,r=t.PrevInSEL;t.NextInSEL=e.NextInSEL,null!==t.NextInSEL&&(t.NextInSEL.PrevInSEL=t),t.PrevInSEL=e.PrevInSEL,null!==t.PrevInSEL&&(t.PrevInSEL.NextInSEL=t),e.NextInSEL=n,null!==e.NextInSEL&&(e.NextInSEL.PrevInSEL=e),e.PrevInSEL=r,null!==e.PrevInSEL&&(e.PrevInSEL.NextInSEL=e)}null===t.PrevInSEL?this.m_SortedEdges=t:null===e.PrevInSEL&&(this.m_SortedEdges=e)}},n.Clipper.prototype.AddLocalMaxPoly=function(t,e,n){this.AddOutPt(t,n),0===e.WindDelta&&this.AddOutPt(e,n),t.OutIdx===e.OutIdx?(t.OutIdx=-1,e.OutIdx=-1):t.OutIdx<e.OutIdx?this.AppendPolygon(t,e):this.AppendPolygon(e,t)},n.Clipper.prototype.AddLocalMinPoly=function(t,e,r){var i,o,s;if(n.ClipperBase.IsHorizontal(e)||t.Dx>e.Dx?(i=this.AddOutPt(t,r),e.OutIdx=t.OutIdx,t.Side=n.EdgeSide.esLeft,e.Side=n.EdgeSide.esRight,s=(o=t).PrevInAEL===e?e.PrevInAEL:o.PrevInAEL):(i=this.AddOutPt(e,r),t.OutIdx=e.OutIdx,t.Side=n.EdgeSide.esRight,e.Side=n.EdgeSide.esLeft,s=(o=e).PrevInAEL===t?t.PrevInAEL:o.PrevInAEL),null!==s&&s.OutIdx>=0&&s.Top.Y<r.Y&&o.Top.Y<r.Y){var u=n.Clipper.TopX(s,r.Y),a=n.Clipper.TopX(o,r.Y);if(u===a&&0!==o.WindDelta&&0!==s.WindDelta&&n.ClipperBase.SlopesEqual5(new n.IntPoint2(u,r.Y),s.Top,new n.IntPoint2(a,r.Y),o.Top,this.m_UseFullRange)){var l=this.AddOutPt(s,r);this.AddJoin(i,l,o.Top)}}return i},n.Clipper.prototype.AddOutPt=function(t,e){if(t.OutIdx<0){(i=this.CreateOutRec()).IsOpen=0===t.WindDelta;var r=new n.OutPt;return i.Pts=r,r.Idx=i.Idx,r.Pt.X=e.X,r.Pt.Y=e.Y,n.use_xyz&&(r.Pt.Z=e.Z),r.Next=r,r.Prev=r,i.IsOpen||this.SetHoleState(t,i),t.OutIdx=i.Idx,r}var i,o=(i=this.m_PolyOuts[t.OutIdx]).Pts,s=t.Side===n.EdgeSide.esLeft;return s&&n.IntPoint.op_Equality(e,o.Pt)?o:!s&&n.IntPoint.op_Equality(e,o.Prev.Pt)?o.Prev:((r=new n.OutPt).Idx=i.Idx,r.Pt.X=e.X,r.Pt.Y=e.Y,n.use_xyz&&(r.Pt.Z=e.Z),r.Next=o,r.Prev=o.Prev,r.Prev.Next=r,o.Prev=r,s&&(i.Pts=r),r)},n.Clipper.prototype.GetLastOutPt=function(t){var e=this.m_PolyOuts[t.OutIdx];return t.Side===n.EdgeSide.esLeft?e.Pts:e.Pts.Prev},n.Clipper.prototype.SwapPoints=function(t,e){var r=new n.IntPoint1(t.Value);t.Value.X=e.Value.X,t.Value.Y=e.Value.Y,n.use_xyz&&(t.Value.Z=e.Value.Z),e.Value.X=r.X,e.Value.Y=r.Y,n.use_xyz&&(e.Value.Z=r.Z)},n.Clipper.prototype.HorzSegmentsOverlap=function(t,e,n,r){var i;return t>e&&(i=t,t=e,e=i),n>r&&(i=n,n=r,r=i),t<r&&n<e},n.Clipper.prototype.SetHoleState=function(t,e){for(var n=t.PrevInAEL,r=null;null!==n;)n.OutIdx>=0&&0!==n.WindDelta&&(null===r?r=n:r.OutIdx===n.OutIdx&&(r=null)),n=n.PrevInAEL;null===r?(e.FirstLeft=null,e.IsHole=!1):(e.FirstLeft=this.m_PolyOuts[r.OutIdx],e.IsHole=!e.FirstLeft.IsHole)},n.Clipper.prototype.GetDx=function(t,e){return t.Y===e.Y?n.ClipperBase.horizontal:(e.X-t.X)/(e.Y-t.Y)},n.Clipper.prototype.FirstIsBottomPt=function(t,e){for(var r=t.Prev;n.IntPoint.op_Equality(r.Pt,t.Pt)&&r!==t;)r=r.Prev;var i=Math.abs(this.GetDx(t.Pt,r.Pt));for(r=t.Next;n.IntPoint.op_Equality(r.Pt,t.Pt)&&r!==t;)r=r.Next;var o=Math.abs(this.GetDx(t.Pt,r.Pt));for(r=e.Prev;n.IntPoint.op_Equality(r.Pt,e.Pt)&&r!==e;)r=r.Prev;var s=Math.abs(this.GetDx(e.Pt,r.Pt));for(r=e.Next;n.IntPoint.op_Equality(r.Pt,e.Pt)&&r!==e;)r=r.Next;var u=Math.abs(this.GetDx(e.Pt,r.Pt));return Math.max(i,o)===Math.max(s,u)&&Math.min(i,o)===Math.min(s,u)?this.Area(t)>0:i>=s&&i>=u||o>=s&&o>=u},n.Clipper.prototype.GetBottomPt=function(t){for(var e=null,r=t.Next;r!==t;)r.Pt.Y>t.Pt.Y?(t=r,e=null):r.Pt.Y===t.Pt.Y&&r.Pt.X<=t.Pt.X&&(r.Pt.X<t.Pt.X?(e=null,t=r):r.Next!==t&&r.Prev!==t&&(e=r)),r=r.Next;if(null!==e)for(;e!==r;)for(this.FirstIsBottomPt(r,e)||(t=e),e=e.Next;n.IntPoint.op_Inequality(e.Pt,t.Pt);)e=e.Next;return t},n.Clipper.prototype.GetLowermostRec=function(t,e){null===t.BottomPt&&(t.BottomPt=this.GetBottomPt(t.Pts)),null===e.BottomPt&&(e.BottomPt=this.GetBottomPt(e.Pts));var n=t.BottomPt,r=e.BottomPt;return n.Pt.Y>r.Pt.Y?t:n.Pt.Y<r.Pt.Y?e:n.Pt.X<r.Pt.X?t:n.Pt.X>r.Pt.X||n.Next===n?e:r.Next===r||this.FirstIsBottomPt(n,r)?t:e},n.Clipper.prototype.OutRec1RightOfOutRec2=function(t,e){do{if((t=t.FirstLeft)===e)return!0}while(null!==t);return!1},n.Clipper.prototype.GetOutRec=function(t){for(var e=this.m_PolyOuts[t];e!==this.m_PolyOuts[e.Idx];)e=this.m_PolyOuts[e.Idx];return e},n.Clipper.prototype.AppendPolygon=function(t,e){var r,i=this.m_PolyOuts[t.OutIdx],o=this.m_PolyOuts[e.OutIdx];r=this.OutRec1RightOfOutRec2(i,o)?o:this.OutRec1RightOfOutRec2(o,i)?i:this.GetLowermostRec(i,o);var s=i.Pts,u=s.Prev,a=o.Pts,l=a.Prev;t.Side===n.EdgeSide.esLeft?e.Side===n.EdgeSide.esLeft?(this.ReversePolyPtLinks(a),a.Next=s,s.Prev=a,u.Next=l,l.Prev=u,i.Pts=l):(l.Next=s,s.Prev=l,a.Prev=u,u.Next=a,i.Pts=a):e.Side===n.EdgeSide.esRight?(this.ReversePolyPtLinks(a),u.Next=l,l.Prev=u,a.Next=s,s.Prev=a):(u.Next=a,a.Prev=u,s.Prev=l,l.Next=s),i.BottomPt=null,r===o&&(o.FirstLeft!==i&&(i.FirstLeft=o.FirstLeft),i.IsHole=o.IsHole),o.Pts=null,o.BottomPt=null,o.FirstLeft=i;var h=t.OutIdx,c=e.OutIdx;t.OutIdx=-1,e.OutIdx=-1;for(var f=this.m_ActiveEdges;null!==f;){if(f.OutIdx===c){f.OutIdx=h,f.Side=t.Side;break}f=f.NextInAEL}o.Idx=i.Idx},n.Clipper.prototype.ReversePolyPtLinks=function(t){if(null!==t){var e,n;e=t;do{n=e.Next,e.Next=e.Prev,e.Prev=n,e=n}while(e!==t)}},n.Clipper.SwapSides=function(t,e){var n=t.Side;t.Side=e.Side,e.Side=n},n.Clipper.SwapPolyIndexes=function(t,e){var n=t.OutIdx;t.OutIdx=e.OutIdx,e.OutIdx=n},n.Clipper.prototype.IntersectEdges=function(t,e,r){var i=t.OutIdx>=0,o=e.OutIdx>=0;if(n.use_xyz&&this.SetZ(r,t,e),!n.use_lines||0!==t.WindDelta&&0!==e.WindDelta){if(t.PolyTyp===e.PolyTyp)if(this.IsEvenOddFillType(t)){var s=t.WindCnt;t.WindCnt=e.WindCnt,e.WindCnt=s}else t.WindCnt+e.WindDelta===0?t.WindCnt=-t.WindCnt:t.WindCnt+=e.WindDelta,e.WindCnt-t.WindDelta==0?e.WindCnt=-e.WindCnt:e.WindCnt-=t.WindDelta;else this.IsEvenOddFillType(e)?t.WindCnt2=0===t.WindCnt2?1:0:t.WindCnt2+=e.WindDelta,this.IsEvenOddFillType(t)?e.WindCnt2=0===e.WindCnt2?1:0:e.WindCnt2-=t.WindDelta;var u,a,l,h,c,f;switch(t.PolyTyp===n.PolyType.ptSubject?(u=this.m_SubjFillType,l=this.m_ClipFillType):(u=this.m_ClipFillType,l=this.m_SubjFillType),e.PolyTyp===n.PolyType.ptSubject?(a=this.m_SubjFillType,h=this.m_ClipFillType):(a=this.m_ClipFillType,h=this.m_SubjFillType),u){case n.PolyFillType.pftPositive:c=t.WindCnt;break;case n.PolyFillType.pftNegative:c=-t.WindCnt;break;default:c=Math.abs(t.WindCnt)}switch(a){case n.PolyFillType.pftPositive:f=e.WindCnt;break;case n.PolyFillType.pftNegative:f=-e.WindCnt;break;default:f=Math.abs(e.WindCnt)}if(i&&o)0!==c&&1!==c||0!==f&&1!==f||t.PolyTyp!==e.PolyTyp&&this.m_ClipType!==n.ClipType.ctXor?this.AddLocalMaxPoly(t,e,r):(this.AddOutPt(t,r),this.AddOutPt(e,r),n.Clipper.SwapSides(t,e),n.Clipper.SwapPolyIndexes(t,e));else if(i)0!==f&&1!==f||(this.AddOutPt(t,r),n.Clipper.SwapSides(t,e),n.Clipper.SwapPolyIndexes(t,e));else if(o)0!==c&&1!==c||(this.AddOutPt(e,r),n.Clipper.SwapSides(t,e),n.Clipper.SwapPolyIndexes(t,e));else if(!(0!==c&&1!==c||0!==f&&1!==f)){var p,v;switch(l){case n.PolyFillType.pftPositive:p=t.WindCnt2;break;case n.PolyFillType.pftNegative:p=-t.WindCnt2;break;default:p=Math.abs(t.WindCnt2)}switch(h){case n.PolyFillType.pftPositive:v=e.WindCnt2;break;case n.PolyFillType.pftNegative:v=-e.WindCnt2;break;default:v=Math.abs(e.WindCnt2)}if(t.PolyTyp!==e.PolyTyp)this.AddLocalMinPoly(t,e,r);else if(1===c&&1===f)switch(this.m_ClipType){case n.ClipType.ctIntersection:p>0&&v>0&&this.AddLocalMinPoly(t,e,r);break;case n.ClipType.ctUnion:p<=0&&v<=0&&this.AddLocalMinPoly(t,e,r);break;case n.ClipType.ctDifference:(t.PolyTyp===n.PolyType.ptClip&&p>0&&v>0||t.PolyTyp===n.PolyType.ptSubject&&p<=0&&v<=0)&&this.AddLocalMinPoly(t,e,r);break;case n.ClipType.ctXor:this.AddLocalMinPoly(t,e,r)}else n.Clipper.SwapSides(t,e)}}else{if(0===t.WindDelta&&0===e.WindDelta)return;t.PolyTyp===e.PolyTyp&&t.WindDelta!==e.WindDelta&&this.m_ClipType===n.ClipType.ctUnion?0===t.WindDelta?o&&(this.AddOutPt(t,r),i&&(t.OutIdx=-1)):i&&(this.AddOutPt(e,r),o&&(e.OutIdx=-1)):t.PolyTyp!==e.PolyTyp&&(0!==t.WindDelta||1!==Math.abs(e.WindCnt)||this.m_ClipType===n.ClipType.ctUnion&&0!==e.WindCnt2?0!==e.WindDelta||1!==Math.abs(t.WindCnt)||this.m_ClipType===n.ClipType.ctUnion&&0!==t.WindCnt2||(this.AddOutPt(e,r),o&&(e.OutIdx=-1)):(this.AddOutPt(t,r),i&&(t.OutIdx=-1)))}},n.Clipper.prototype.DeleteFromSEL=function(t){var e=t.PrevInSEL,n=t.NextInSEL;null===e&&null===n&&t!==this.m_SortedEdges||(null!==e?e.NextInSEL=n:this.m_SortedEdges=n,null!==n&&(n.PrevInSEL=e),t.NextInSEL=null,t.PrevInSEL=null)},n.Clipper.prototype.ProcessHorizontals=function(){for(var t={};this.PopEdgeFromSEL(t);)this.ProcessHorizontal(t.v)},n.Clipper.prototype.GetHorzDirection=function(t,e){t.Bot.X<t.Top.X?(e.Left=t.Bot.X,e.Right=t.Top.X,e.Dir=n.Direction.dLeftToRight):(e.Left=t.Top.X,e.Right=t.Bot.X,e.Dir=n.Direction.dRightToLeft)},n.Clipper.prototype.ProcessHorizontal=function(t){var e={Dir:null,Left:null,Right:null};this.GetHorzDirection(t,e);for(var r=e.Dir,i=e.Left,o=e.Right,s=0===t.WindDelta,u=t,a=null;null!==u.NextInLML&&n.ClipperBase.IsHorizontal(u.NextInLML);)u=u.NextInLML;null===u.NextInLML&&(a=this.GetMaximaPair(u));var l=this.m_Maxima;if(null!==l)if(r===n.Direction.dLeftToRight){for(;null!==l&&l.X<=t.Bot.X;)l=l.Next;null!==l&&l.X>=u.Top.X&&(l=null)}else{for(;null!==l.Next&&l.Next.X<t.Bot.X;)l=l.Next;l.X<=u.Top.X&&(l=null)}for(var h=null;;){for(var c=t===u,f=this.GetNextInAEL(t,r);null!==f;){if(null!==l)if(r===n.Direction.dLeftToRight)for(;null!==l&&l.X<f.Curr.X;)t.OutIdx>=0&&!s&&this.AddOutPt(t,new n.IntPoint2(l.X,t.Bot.Y)),l=l.Next;else for(;null!==l&&l.X>f.Curr.X;)t.OutIdx>=0&&!s&&this.AddOutPt(t,new n.IntPoint2(l.X,t.Bot.Y)),l=l.Prev;if(r===n.Direction.dLeftToRight&&f.Curr.X>o||r===n.Direction.dRightToLeft&&f.Curr.X<i)break;if(f.Curr.X===t.Top.X&&null!==t.NextInLML&&f.Dx<t.NextInLML.Dx)break;if(t.OutIdx>=0&&!s){n.use_xyz&&(r===n.Direction.dLeftToRight?this.SetZ(f.Curr,t,f):this.SetZ(f.Curr,f,t)),h=this.AddOutPt(t,f.Curr);for(var p=this.m_SortedEdges;null!==p;){if(p.OutIdx>=0&&this.HorzSegmentsOverlap(t.Bot.X,t.Top.X,p.Bot.X,p.Top.X)){var v=this.GetLastOutPt(p);this.AddJoin(v,h,p.Top)}p=p.NextInSEL}this.AddGhostJoin(h,t.Bot)}if(f===a&&c)return t.OutIdx>=0&&this.AddLocalMaxPoly(t,a,t.Top),this.DeleteFromAEL(t),void this.DeleteFromAEL(a);if(r===n.Direction.dLeftToRight){var y=new n.IntPoint2(f.Curr.X,t.Curr.Y);this.IntersectEdges(t,f,y)}else y=new n.IntPoint2(f.Curr.X,t.Curr.Y),this.IntersectEdges(f,t,y);var d=this.GetNextInAEL(f,r);this.SwapPositionsInAEL(t,f),f=d}if(null===t.NextInLML||!n.ClipperBase.IsHorizontal(t.NextInLML))break;(t=this.UpdateEdgeIntoAEL(t)).OutIdx>=0&&this.AddOutPt(t,t.Bot),e={Dir:r,Left:i,Right:o},this.GetHorzDirection(t,e),r=e.Dir,i=e.Left,o=e.Right}if(t.OutIdx>=0&&null===h){for(h=this.GetLastOutPt(t),p=this.m_SortedEdges;null!==p;)p.OutIdx>=0&&this.HorzSegmentsOverlap(t.Bot.X,t.Top.X,p.Bot.X,p.Top.X)&&(v=this.GetLastOutPt(p),this.AddJoin(v,h,p.Top)),p=p.NextInSEL;this.AddGhostJoin(h,t.Top)}if(null!==t.NextInLML)if(t.OutIdx>=0){if(h=this.AddOutPt(t,t.Top),0===(t=this.UpdateEdgeIntoAEL(t)).WindDelta)return;var m=t.PrevInAEL;d=t.NextInAEL,null!==m&&m.Curr.X===t.Bot.X&&m.Curr.Y===t.Bot.Y&&0===m.WindDelta&&m.OutIdx>=0&&m.Curr.Y>m.Top.Y&&n.ClipperBase.SlopesEqual3(t,m,this.m_UseFullRange)?(v=this.AddOutPt(m,t.Bot),this.AddJoin(h,v,t.Top)):null!==d&&d.Curr.X===t.Bot.X&&d.Curr.Y===t.Bot.Y&&0!==d.WindDelta&&d.OutIdx>=0&&d.Curr.Y>d.Top.Y&&n.ClipperBase.SlopesEqual3(t,d,this.m_UseFullRange)&&(v=this.AddOutPt(d,t.Bot),this.AddJoin(h,v,t.Top))}else t=this.UpdateEdgeIntoAEL(t);else t.OutIdx>=0&&this.AddOutPt(t,t.Top),this.DeleteFromAEL(t)},n.Clipper.prototype.GetNextInAEL=function(t,e){return e===n.Direction.dLeftToRight?t.NextInAEL:t.PrevInAEL},n.Clipper.prototype.IsMinima=function(t){return null!==t&&t.Prev.NextInLML!==t&&t.Next.NextInLML!==t},n.Clipper.prototype.IsMaxima=function(t,e){return null!==t&&t.Top.Y===e&&null===t.NextInLML},n.Clipper.prototype.IsIntermediate=function(t,e){return t.Top.Y===e&&null!==t.NextInLML},n.Clipper.prototype.GetMaximaPair=function(t){return n.IntPoint.op_Equality(t.Next.Top,t.Top)&&null===t.Next.NextInLML?t.Next:n.IntPoint.op_Equality(t.Prev.Top,t.Top)&&null===t.Prev.NextInLML?t.Prev:null},n.Clipper.prototype.GetMaximaPairEx=function(t){var e=this.GetMaximaPair(t);return null===e||e.OutIdx===n.ClipperBase.Skip||e.NextInAEL===e.PrevInAEL&&!n.ClipperBase.IsHorizontal(e)?null:e},n.Clipper.prototype.ProcessIntersections=function(t){if(null===this.m_ActiveEdges)return!0;try{if(this.BuildIntersectList(t),0===this.m_IntersectList.length)return!0;if(1!==this.m_IntersectList.length&&!this.FixupIntersectionOrder())return!1;this.ProcessIntersectList()}catch(t){this.m_SortedEdges=null,this.m_IntersectList.length=0,n.Error("ProcessIntersections error")}return this.m_SortedEdges=null,!0},n.Clipper.prototype.BuildIntersectList=function(t){if(null!==this.m_ActiveEdges){var e=this.m_ActiveEdges;for(this.m_SortedEdges=e;null!==e;)e.PrevInSEL=e.PrevInAEL,e.NextInSEL=e.NextInAEL,e.Curr.X=n.Clipper.TopX(e,t),e=e.NextInAEL;for(var r=!0;r&&null!==this.m_SortedEdges;){for(r=!1,e=this.m_SortedEdges;null!==e.NextInSEL;){var i=e.NextInSEL,o=new n.IntPoint0;if(e.Curr.X>i.Curr.X){this.IntersectPoint(e,i,o),o.Y<t&&(o=new n.IntPoint2(n.Clipper.TopX(e,t),t));var s=new n.IntersectNode;s.Edge1=e,s.Edge2=i,s.Pt.X=o.X,s.Pt.Y=o.Y,n.use_xyz&&(s.Pt.Z=o.Z),this.m_IntersectList.push(s),this.SwapPositionsInSEL(e,i),r=!0}else e=i}if(null===e.PrevInSEL)break;e.PrevInSEL.NextInSEL=null}this.m_SortedEdges=null}},n.Clipper.prototype.EdgesAdjacent=function(t){return t.Edge1.NextInSEL===t.Edge2||t.Edge1.PrevInSEL===t.Edge2},n.Clipper.IntersectNodeSort=function(t,e){return e.Pt.Y-t.Pt.Y},n.Clipper.prototype.FixupIntersectionOrder=function(){this.m_IntersectList.sort(this.m_IntersectNodeComparer),this.CopyAELToSEL();for(var t=this.m_IntersectList.length,e=0;e<t;e++){if(!this.EdgesAdjacent(this.m_IntersectList[e])){for(var n=e+1;n<t&&!this.EdgesAdjacent(this.m_IntersectList[n]);)n++;if(n===t)return!1;var r=this.m_IntersectList[e];this.m_IntersectList[e]=this.m_IntersectList[n],this.m_IntersectList[n]=r}this.SwapPositionsInSEL(this.m_IntersectList[e].Edge1,this.m_IntersectList[e].Edge2)}return!0},n.Clipper.prototype.ProcessIntersectList=function(){for(var t=0,e=this.m_IntersectList.length;t<e;t++){var n=this.m_IntersectList[t];this.IntersectEdges(n.Edge1,n.Edge2,n.Pt),this.SwapPositionsInAEL(n.Edge1,n.Edge2)}this.m_IntersectList.length=0},s.msie?n.Clipper.Round=function(t){return t<0?Math.ceil(t-.5):Math.round(t)}:s.chromium?n.Clipper.Round=function(t){return t<0?-Math.round(Math.abs(t)):Math.round(t)}:s.safari?n.Clipper.Round=function(t){return t<0?(t-=.5)<-2147483648?Math.ceil(t):0|t:(t+=.5)>2147483647?Math.floor(t):0|t}:n.Clipper.Round=function(t){return t<0?Math.ceil(t-.5):Math.floor(t+.5)},n.Clipper.TopX=function(t,e){return e===t.Top.Y?t.Top.X:t.Bot.X+n.Clipper.Round(t.Dx*(e-t.Bot.Y))},n.Clipper.prototype.IntersectPoint=function(t,e,r){var i,o;if(r.X=0,r.Y=0,t.Dx===e.Dx)return r.Y=t.Curr.Y,void(r.X=n.Clipper.TopX(t,r.Y));if(0===t.Delta.X)r.X=t.Bot.X,n.ClipperBase.IsHorizontal(e)?r.Y=e.Bot.Y:(o=e.Bot.Y-e.Bot.X/e.Dx,r.Y=n.Clipper.Round(r.X/e.Dx+o));else if(0===e.Delta.X)r.X=e.Bot.X,n.ClipperBase.IsHorizontal(t)?r.Y=t.Bot.Y:(i=t.Bot.Y-t.Bot.X/t.Dx,r.Y=n.Clipper.Round(r.X/t.Dx+i));else{i=t.Bot.X-t.Bot.Y*t.Dx;var s=((o=e.Bot.X-e.Bot.Y*e.Dx)-i)/(t.Dx-e.Dx);r.Y=n.Clipper.Round(s),Math.abs(t.Dx)<Math.abs(e.Dx)?r.X=n.Clipper.Round(t.Dx*s+i):r.X=n.Clipper.Round(e.Dx*s+o)}if(r.Y<t.Top.Y||r.Y<e.Top.Y){if(t.Top.Y>e.Top.Y)return r.Y=t.Top.Y,r.X=n.Clipper.TopX(e,t.Top.Y),r.X<t.Top.X;r.Y=e.Top.Y,Math.abs(t.Dx)<Math.abs(e.Dx)?r.X=n.Clipper.TopX(t,r.Y):r.X=n.Clipper.TopX(e,r.Y)}r.Y>t.Curr.Y&&(r.Y=t.Curr.Y,Math.abs(t.Dx)>Math.abs(e.Dx)?r.X=n.Clipper.TopX(e,r.Y):r.X=n.Clipper.TopX(t,r.Y))},n.Clipper.prototype.ProcessEdgesAtTopOfScanbeam=function(t){for(var e=this.m_ActiveEdges;null!==e;){var r=this.IsMaxima(e,t);if(r){var i=this.GetMaximaPairEx(e);r=null===i||!n.ClipperBase.IsHorizontal(i)}if(r){this.StrictlySimple&&this.InsertMaxima(e.Top.X);var o=e.PrevInAEL;this.DoMaxima(e),e=null===o?this.m_ActiveEdges:o.NextInAEL}else{if(this.IsIntermediate(e,t)&&n.ClipperBase.IsHorizontal(e.NextInLML)?((e=this.UpdateEdgeIntoAEL(e)).OutIdx>=0&&this.AddOutPt(e,e.Bot),this.AddEdgeToSEL(e)):(e.Curr.X=n.Clipper.TopX(e,t),e.Curr.Y=t),n.use_xyz&&(e.Top.Y===t?e.Curr.Z=e.Top.Z:e.Bot.Y===t?e.Curr.Z=e.Bot.Z:e.Curr.Z=0),this.StrictlySimple&&(o=e.PrevInAEL,e.OutIdx>=0&&0!==e.WindDelta&&null!==o&&o.OutIdx>=0&&o.Curr.X===e.Curr.X&&0!==o.WindDelta)){var s=new n.IntPoint1(e.Curr);n.use_xyz&&this.SetZ(s,o,e);var u=this.AddOutPt(o,s),a=this.AddOutPt(e,s);this.AddJoin(u,a,s)}e=e.NextInAEL}}for(this.ProcessHorizontals(),this.m_Maxima=null,e=this.m_ActiveEdges;null!==e;){if(this.IsIntermediate(e,t)){u=null,e.OutIdx>=0&&(u=this.AddOutPt(e,e.Top)),o=(e=this.UpdateEdgeIntoAEL(e)).PrevInAEL;var l=e.NextInAEL;null!==o&&o.Curr.X===e.Bot.X&&o.Curr.Y===e.Bot.Y&&null!==u&&o.OutIdx>=0&&o.Curr.Y===o.Top.Y&&n.ClipperBase.SlopesEqual5(e.Curr,e.Top,o.Curr,o.Top,this.m_UseFullRange)&&0!==e.WindDelta&&0!==o.WindDelta?(a=this.AddOutPt(ePrev2,e.Bot),this.AddJoin(u,a,e.Top)):null!==l&&l.Curr.X===e.Bot.X&&l.Curr.Y===e.Bot.Y&&null!==u&&l.OutIdx>=0&&l.Curr.Y===l.Top.Y&&n.ClipperBase.SlopesEqual5(e.Curr,e.Top,l.Curr,l.Top,this.m_UseFullRange)&&0!==e.WindDelta&&0!==l.WindDelta&&(a=this.AddOutPt(l,e.Bot),this.AddJoin(u,a,e.Top))}e=e.NextInAEL}},n.Clipper.prototype.DoMaxima=function(t){var e=this.GetMaximaPairEx(t);if(null===e)return t.OutIdx>=0&&this.AddOutPt(t,t.Top),void this.DeleteFromAEL(t);for(var r=t.NextInAEL;null!==r&&r!==e;)this.IntersectEdges(t,r,t.Top),this.SwapPositionsInAEL(t,r),r=t.NextInAEL;-1===t.OutIdx&&-1===e.OutIdx?(this.DeleteFromAEL(t),this.DeleteFromAEL(e)):t.OutIdx>=0&&e.OutIdx>=0?(t.OutIdx>=0&&this.AddLocalMaxPoly(t,e,t.Top),this.DeleteFromAEL(t),this.DeleteFromAEL(e)):n.use_lines&&0===t.WindDelta?(t.OutIdx>=0&&(this.AddOutPt(t,t.Top),t.OutIdx=n.ClipperBase.Unassigned),this.DeleteFromAEL(t),e.OutIdx>=0&&(this.AddOutPt(e,t.Top),e.OutIdx=n.ClipperBase.Unassigned),this.DeleteFromAEL(e)):n.Error("DoMaxima error")},n.Clipper.ReversePaths=function(t){for(var e=0,n=t.length;e<n;e++)t[e].reverse()},n.Clipper.Orientation=function(t){return n.Clipper.Area(t)>=0},n.Clipper.prototype.PointCount=function(t){if(null===t)return 0;var e=0,n=t;do{e++,n=n.Next}while(n!==t);return e},n.Clipper.prototype.BuildResult=function(t){n.Clear(t);for(var e=0,r=this.m_PolyOuts.length;e<r;e++){var i=this.m_PolyOuts[e];if(null!==i.Pts){var o=i.Pts.Prev,s=this.PointCount(o);if(!(s<2)){for(var u=new Array(s),a=0;a<s;a++)u[a]=o.Pt,o=o.Prev;t.push(u)}}}},n.Clipper.prototype.BuildResult2=function(t){t.Clear();for(var e=0,r=this.m_PolyOuts.length;e<r;e++){var i=this.m_PolyOuts[e],o=this.PointCount(i.Pts);if(!(i.IsOpen&&o<2||!i.IsOpen&&o<3)){this.FixHoleLinkage(i);var s=new n.PolyNode;t.m_AllPolys.push(s),i.PolyNode=s,s.m_polygon.length=o;for(var u=i.Pts.Prev,a=0;a<o;a++)s.m_polygon[a]=u.Pt,u=u.Prev}}for(e=0,r=this.m_PolyOuts.length;e<r;e++)null!==(i=this.m_PolyOuts[e]).PolyNode&&(i.IsOpen?(i.PolyNode.IsOpen=!0,t.AddChild(i.PolyNode)):null!==i.FirstLeft&&null!==i.FirstLeft.PolyNode?i.FirstLeft.PolyNode.AddChild(i.PolyNode):t.AddChild(i.PolyNode))},n.Clipper.prototype.FixupOutPolyline=function(t){for(var e=t.Pts,r=e.Prev;e!==r;)if(e=e.Next,n.IntPoint.op_Equality(e.Pt,e.Prev.Pt)){e===r&&(r=e.Prev);var i=e.Prev;i.Next=e.Next,e.Next.Prev=i,e=i}e===e.Prev&&(t.Pts=null)},n.Clipper.prototype.FixupOutPolygon=function(t){var e=null;t.BottomPt=null;for(var r=t.Pts,i=this.PreserveCollinear||this.StrictlySimple;;){if(r.Prev===r||r.Prev===r.Next)return void(t.Pts=null);if(n.IntPoint.op_Equality(r.Pt,r.Next.Pt)||n.IntPoint.op_Equality(r.Pt,r.Prev.Pt)||n.ClipperBase.SlopesEqual4(r.Prev.Pt,r.Pt,r.Next.Pt,this.m_UseFullRange)&&(!i||!this.Pt2IsBetweenPt1AndPt3(r.Prev.Pt,r.Pt,r.Next.Pt)))e=null,r.Prev.Next=r.Next,r.Next.Prev=r.Prev,r=r.Prev;else{if(r===e)break;null===e&&(e=r),r=r.Next}}t.Pts=r},n.Clipper.prototype.DupOutPt=function(t,e){var r=new n.OutPt;return r.Pt.X=t.Pt.X,r.Pt.Y=t.Pt.Y,n.use_xyz&&(r.Pt.Z=t.Pt.Z),r.Idx=t.Idx,e?(r.Next=t.Next,r.Prev=t,t.Next.Prev=r,t.Next=r):(r.Prev=t.Prev,r.Next=t,t.Prev.Next=r,t.Prev=r),r},n.Clipper.prototype.GetOverlap=function(t,e,n,r,i){return t<e?n<r?(i.Left=Math.max(t,n),i.Right=Math.min(e,r)):(i.Left=Math.max(t,r),i.Right=Math.min(e,n)):n<r?(i.Left=Math.max(e,n),i.Right=Math.min(t,r)):(i.Left=Math.max(e,r),i.Right=Math.min(t,n)),i.Left<i.Right},n.Clipper.prototype.JoinHorz=function(t,e,r,i,o,s){var u=t.Pt.X>e.Pt.X?n.Direction.dRightToLeft:n.Direction.dLeftToRight,a=r.Pt.X>i.Pt.X?n.Direction.dRightToLeft:n.Direction.dLeftToRight;if(u===a)return!1;if(u===n.Direction.dLeftToRight){for(;t.Next.Pt.X<=o.X&&t.Next.Pt.X>=t.Pt.X&&t.Next.Pt.Y===o.Y;)t=t.Next;s&&t.Pt.X!==o.X&&(t=t.Next),e=this.DupOutPt(t,!s),n.IntPoint.op_Inequality(e.Pt,o)&&((t=e).Pt.X=o.X,t.Pt.Y=o.Y,n.use_xyz&&(t.Pt.Z=o.Z),e=this.DupOutPt(t,!s))}else{for(;t.Next.Pt.X>=o.X&&t.Next.Pt.X<=t.Pt.X&&t.Next.Pt.Y===o.Y;)t=t.Next;s||t.Pt.X===o.X||(t=t.Next),e=this.DupOutPt(t,s),n.IntPoint.op_Inequality(e.Pt,o)&&((t=e).Pt.X=o.X,t.Pt.Y=o.Y,n.use_xyz&&(t.Pt.Z=o.Z),e=this.DupOutPt(t,s))}if(a===n.Direction.dLeftToRight){for(;r.Next.Pt.X<=o.X&&r.Next.Pt.X>=r.Pt.X&&r.Next.Pt.Y===o.Y;)r=r.Next;s&&r.Pt.X!==o.X&&(r=r.Next),i=this.DupOutPt(r,!s),n.IntPoint.op_Inequality(i.Pt,o)&&((r=i).Pt.X=o.X,r.Pt.Y=o.Y,n.use_xyz&&(r.Pt.Z=o.Z),i=this.DupOutPt(r,!s))}else{for(;r.Next.Pt.X>=o.X&&r.Next.Pt.X<=r.Pt.X&&r.Next.Pt.Y===o.Y;)r=r.Next;s||r.Pt.X===o.X||(r=r.Next),i=this.DupOutPt(r,s),n.IntPoint.op_Inequality(i.Pt,o)&&((r=i).Pt.X=o.X,r.Pt.Y=o.Y,n.use_xyz&&(r.Pt.Z=o.Z),i=this.DupOutPt(r,s))}return u===n.Direction.dLeftToRight===s?(t.Prev=r,r.Next=t,e.Next=i,i.Prev=e):(t.Next=r,r.Prev=t,e.Prev=i,i.Next=e),!0},n.Clipper.prototype.JoinPoints=function(t,e,r){var i=t.OutPt1,o=new n.OutPt,s=t.OutPt2,u=new n.OutPt,a=t.OutPt1.Pt.Y===t.OffPt.Y;if(a&&n.IntPoint.op_Equality(t.OffPt,t.OutPt1.Pt)&&n.IntPoint.op_Equality(t.OffPt,t.OutPt2.Pt)){if(e!==r)return!1;for(o=t.OutPt1.Next;o!==i&&n.IntPoint.op_Equality(o.Pt,t.OffPt);)o=o.Next;var l=o.Pt.Y>t.OffPt.Y;for(u=t.OutPt2.Next;u!==s&&n.IntPoint.op_Equality(u.Pt,t.OffPt);)u=u.Next;return l!==u.Pt.Y>t.OffPt.Y&&(l?(o=this.DupOutPt(i,!1),u=this.DupOutPt(s,!0),i.Prev=s,s.Next=i,o.Next=u,u.Prev=o,t.OutPt1=i,t.OutPt2=o,!0):(o=this.DupOutPt(i,!0),u=this.DupOutPt(s,!1),i.Next=s,s.Prev=i,o.Prev=u,u.Next=o,t.OutPt1=i,t.OutPt2=o,!0))}if(a){for(o=i;i.Prev.Pt.Y===i.Pt.Y&&i.Prev!==o&&i.Prev!==s;)i=i.Prev;for(;o.Next.Pt.Y===o.Pt.Y&&o.Next!==i&&o.Next!==s;)o=o.Next;if(o.Next===i||o.Next===s)return!1;for(u=s;s.Prev.Pt.Y===s.Pt.Y&&s.Prev!==u&&s.Prev!==o;)s=s.Prev;for(;u.Next.Pt.Y===u.Pt.Y&&u.Next!==s&&u.Next!==i;)u=u.Next;if(u.Next===s||u.Next===i)return!1;var h={Left:null,Right:null};if(!this.GetOverlap(i.Pt.X,o.Pt.X,s.Pt.X,u.Pt.X,h))return!1;var c,f=h.Left,p=h.Right,v=new n.IntPoint0;return i.Pt.X>=f&&i.Pt.X<=p?(v.X=i.Pt.X,v.Y=i.Pt.Y,n.use_xyz&&(v.Z=i.Pt.Z),c=i.Pt.X>o.Pt.X):s.Pt.X>=f&&s.Pt.X<=p?(v.X=s.Pt.X,v.Y=s.Pt.Y,n.use_xyz&&(v.Z=s.Pt.Z),c=s.Pt.X>u.Pt.X):o.Pt.X>=f&&o.Pt.X<=p?(v.X=o.Pt.X,v.Y=o.Pt.Y,n.use_xyz&&(v.Z=o.Pt.Z),c=o.Pt.X>i.Pt.X):(v.X=u.Pt.X,v.Y=u.Pt.Y,n.use_xyz&&(v.Z=u.Pt.Z),c=u.Pt.X>s.Pt.X),t.OutPt1=i,t.OutPt2=s,this.JoinHorz(i,o,s,u,v,c)}for(o=i.Next;n.IntPoint.op_Equality(o.Pt,i.Pt)&&o!==i;)o=o.Next;var y=o.Pt.Y>i.Pt.Y||!n.ClipperBase.SlopesEqual4(i.Pt,o.Pt,t.OffPt,this.m_UseFullRange);if(y){for(o=i.Prev;n.IntPoint.op_Equality(o.Pt,i.Pt)&&o!==i;)o=o.Prev;if(o.Pt.Y>i.Pt.Y||!n.ClipperBase.SlopesEqual4(i.Pt,o.Pt,t.OffPt,this.m_UseFullRange))return!1}for(u=s.Next;n.IntPoint.op_Equality(u.Pt,s.Pt)&&u!==s;)u=u.Next;var d=u.Pt.Y>s.Pt.Y||!n.ClipperBase.SlopesEqual4(s.Pt,u.Pt,t.OffPt,this.m_UseFullRange);if(d){for(u=s.Prev;n.IntPoint.op_Equality(u.Pt,s.Pt)&&u!==s;)u=u.Prev;if(u.Pt.Y>s.Pt.Y||!n.ClipperBase.SlopesEqual4(s.Pt,u.Pt,t.OffPt,this.m_UseFullRange))return!1}return!(o===i||u===s||o===u||e===r&&y===d||(y?(o=this.DupOutPt(i,!1),u=this.DupOutPt(s,!0),i.Prev=s,s.Next=i,o.Next=u,u.Prev=o,t.OutPt1=i,t.OutPt2=o,0):(o=this.DupOutPt(i,!0),u=this.DupOutPt(s,!1),i.Next=s,s.Prev=i,o.Prev=u,u.Next=o,t.OutPt1=i,t.OutPt2=o,0)))},n.Clipper.GetBounds=function(t){for(var e=0,r=t.length;e<r&&0===t[e].length;)e++;if(e===r)return new n.IntRect(0,0,0,0);var i=new n.IntRect;for(i.left=t[e][0].X,i.right=i.left,i.top=t[e][0].Y,i.bottom=i.top;e<r;e++)for(var o=0,s=t[e].length;o<s;o++)t[e][o].X<i.left?i.left=t[e][o].X:t[e][o].X>i.right&&(i.right=t[e][o].X),t[e][o].Y<i.top?i.top=t[e][o].Y:t[e][o].Y>i.bottom&&(i.bottom=t[e][o].Y);return i},n.Clipper.prototype.GetBounds2=function(t){var e=t,r=new n.IntRect;for(r.left=t.Pt.X,r.right=t.Pt.X,r.top=t.Pt.Y,r.bottom=t.Pt.Y,t=t.Next;t!==e;)t.Pt.X<r.left&&(r.left=t.Pt.X),t.Pt.X>r.right&&(r.right=t.Pt.X),t.Pt.Y<r.top&&(r.top=t.Pt.Y),t.Pt.Y>r.bottom&&(r.bottom=t.Pt.Y),t=t.Next;return r},n.Clipper.PointInPolygon=function(t,e){var n=0,r=e.length;if(r<3)return 0;for(var i=e[0],o=1;o<=r;++o){var s=o===r?e[0]:e[o];if(s.Y===t.Y&&(s.X===t.X||i.Y===t.Y&&s.X>t.X==i.X<t.X))return-1;if(i.Y<t.Y!=s.Y<t.Y)if(i.X>=t.X)if(s.X>t.X)n=1-n;else{if(0==(u=(i.X-t.X)*(s.Y-t.Y)-(s.X-t.X)*(i.Y-t.Y)))return-1;u>0==s.Y>i.Y&&(n=1-n)}else if(s.X>t.X){var u;if(0==(u=(i.X-t.X)*(s.Y-t.Y)-(s.X-t.X)*(i.Y-t.Y)))return-1;u>0==s.Y>i.Y&&(n=1-n)}i=s}return n},n.Clipper.prototype.PointInPolygon=function(t,e){var n=0,r=e,i=t.X,o=t.Y,s=e.Pt.X,u=e.Pt.Y;do{var a=(e=e.Next).Pt.X,l=e.Pt.Y;if(l===o&&(a===i||u===o&&a>i==s<i))return-1;if(u<o!=l<o)if(s>=i)if(a>i)n=1-n;else{if(0==(h=(s-i)*(l-o)-(a-i)*(u-o)))return-1;h>0==l>u&&(n=1-n)}else if(a>i){var h;if(0==(h=(s-i)*(l-o)-(a-i)*(u-o)))return-1;h>0==l>u&&(n=1-n)}s=a,u=l}while(r!==e);return n},n.Clipper.prototype.Poly2ContainsPoly1=function(t,e){var n=t;do{var r=this.PointInPolygon(n.Pt,e);if(r>=0)return r>0;n=n.Next}while(n!==t);return!0},n.Clipper.prototype.FixupFirstLefts1=function(t,e){for(var r,i,o=0,s=this.m_PolyOuts.length;o<s;o++)r=this.m_PolyOuts[o],i=n.Clipper.ParseFirstLeft(r.FirstLeft),null!==r.Pts&&i===t&&this.Poly2ContainsPoly1(r.Pts,e.Pts)&&(r.FirstLeft=e)},n.Clipper.prototype.FixupFirstLefts2=function(t,e){for(var r,i,o=e.FirstLeft,s=0,u=this.m_PolyOuts.length;s<u;s++)null!==(r=this.m_PolyOuts[s]).Pts&&r!==e&&r!==t&&((i=n.Clipper.ParseFirstLeft(r.FirstLeft))!==o&&i!==t&&i!==e||(this.Poly2ContainsPoly1(r.Pts,t.Pts)?r.FirstLeft=t:this.Poly2ContainsPoly1(r.Pts,e.Pts)?r.FirstLeft=e:r.FirstLeft!==t&&r.FirstLeft!==e||(r.FirstLeft=o)))},n.Clipper.prototype.FixupFirstLefts3=function(t,e){for(var r,i,o=0,s=this.m_PolyOuts.length;o<s;o++)r=this.m_PolyOuts[o],i=n.Clipper.ParseFirstLeft(r.FirstLeft),null!==r.Pts&&i===t&&(r.FirstLeft=e)},n.Clipper.ParseFirstLeft=function(t){for(;null!==t&&null===t.Pts;)t=t.FirstLeft;return t},n.Clipper.prototype.JoinCommonEdges=function(){for(var t=0,e=this.m_Joins.length;t<e;t++){var n,r=this.m_Joins[t],i=this.GetOutRec(r.OutPt1.Idx),o=this.GetOutRec(r.OutPt2.Idx);null!==i.Pts&&null!==o.Pts&&(i.IsOpen||o.IsOpen||(n=i===o?i:this.OutRec1RightOfOutRec2(i,o)?o:this.OutRec1RightOfOutRec2(o,i)?i:this.GetLowermostRec(i,o),this.JoinPoints(r,i,o)&&(i===o?(i.Pts=r.OutPt1,i.BottomPt=null,(o=this.CreateOutRec()).Pts=r.OutPt2,this.UpdateOutPtIdxs(o),this.Poly2ContainsPoly1(o.Pts,i.Pts)?(o.IsHole=!i.IsHole,o.FirstLeft=i,this.m_UsingPolyTree&&this.FixupFirstLefts2(o,i),(o.IsHole^this.ReverseSolution)==this.Area$1(o)>0&&this.ReversePolyPtLinks(o.Pts)):this.Poly2ContainsPoly1(i.Pts,o.Pts)?(o.IsHole=i.IsHole,i.IsHole=!o.IsHole,o.FirstLeft=i.FirstLeft,i.FirstLeft=o,this.m_UsingPolyTree&&this.FixupFirstLefts2(i,o),(i.IsHole^this.ReverseSolution)==this.Area$1(i)>0&&this.ReversePolyPtLinks(i.Pts)):(o.IsHole=i.IsHole,o.FirstLeft=i.FirstLeft,this.m_UsingPolyTree&&this.FixupFirstLefts1(i,o))):(o.Pts=null,o.BottomPt=null,o.Idx=i.Idx,i.IsHole=n.IsHole,n===o&&(i.FirstLeft=o.FirstLeft),o.FirstLeft=i,this.m_UsingPolyTree&&this.FixupFirstLefts3(o,i)))))}},n.Clipper.prototype.UpdateOutPtIdxs=function(t){var e=t.Pts;do{e.Idx=t.Idx,e=e.Prev}while(e!==t.Pts)},n.Clipper.prototype.DoSimplePolygons=function(){for(var t=0;t<this.m_PolyOuts.length;){var e=this.m_PolyOuts[t++],r=e.Pts;if(null!==r&&!e.IsOpen)do{for(var i=r.Next;i!==e.Pts;){if(n.IntPoint.op_Equality(r.Pt,i.Pt)&&i.Next!==r&&i.Prev!==r){var o=r.Prev,s=i.Prev;r.Prev=s,s.Next=r,i.Prev=o,o.Next=i,e.Pts=r;var u=this.CreateOutRec();u.Pts=i,this.UpdateOutPtIdxs(u),this.Poly2ContainsPoly1(u.Pts,e.Pts)?(u.IsHole=!e.IsHole,u.FirstLeft=e,this.m_UsingPolyTree&&this.FixupFirstLefts2(u,e)):this.Poly2ContainsPoly1(e.Pts,u.Pts)?(u.IsHole=e.IsHole,e.IsHole=!u.IsHole,u.FirstLeft=e.FirstLeft,e.FirstLeft=u,this.m_UsingPolyTree&&this.FixupFirstLefts2(e,u)):(u.IsHole=e.IsHole,u.FirstLeft=e.FirstLeft,this.m_UsingPolyTree&&this.FixupFirstLefts1(e,u)),i=r}i=i.Next}r=r.Next}while(r!==e.Pts)}},n.Clipper.Area=function(t){if(!Array.isArray(t))return 0;var e=t.length;if(e<3)return 0;for(var n=0,r=0,i=e-1;r<e;++r)n+=(t[i].X+t[r].X)*(t[i].Y-t[r].Y),i=r;return.5*-n},n.Clipper.prototype.Area=function(t){var e=t;if(null===t)return 0;var n=0;do{n+=(t.Prev.Pt.X+t.Pt.X)*(t.Prev.Pt.Y-t.Pt.Y),t=t.Next}while(t!==e);return.5*n},n.Clipper.prototype.Area$1=function(t){return this.Area(t.Pts)},n.Clipper.SimplifyPolygon=function(t,e){var r=new Array,i=new n.Clipper(0);return i.StrictlySimple=!0,i.AddPath(t,n.PolyType.ptSubject,!0),i.Execute(n.ClipType.ctUnion,r,e,e),r},n.Clipper.SimplifyPolygons=function(t,e){void 0===e&&(e=n.PolyFillType.pftEvenOdd);var r=new Array,i=new n.Clipper(0);return i.StrictlySimple=!0,i.AddPaths(t,n.PolyType.ptSubject,!0),i.Execute(n.ClipType.ctUnion,r,e,e),r},n.Clipper.DistanceSqrd=function(t,e){var n=t.X-e.X,r=t.Y-e.Y;return n*n+r*r},n.Clipper.DistanceFromLineSqrd=function(t,e,n){var r=e.Y-n.Y,i=n.X-e.X,o=r*e.X+i*e.Y;return(o=r*t.X+i*t.Y-o)*o/(r*r+i*i)},n.Clipper.SlopesNearCollinear=function(t,e,r,i){return Math.abs(t.X-e.X)>Math.abs(t.Y-e.Y)?t.X>e.X==t.X<r.X?n.Clipper.DistanceFromLineSqrd(t,e,r)<i:e.X>t.X==e.X<r.X?n.Clipper.DistanceFromLineSqrd(e,t,r)<i:n.Clipper.DistanceFromLineSqrd(r,t,e)<i:t.Y>e.Y==t.Y<r.Y?n.Clipper.DistanceFromLineSqrd(t,e,r)<i:e.Y>t.Y==e.Y<r.Y?n.Clipper.DistanceFromLineSqrd(e,t,r)<i:n.Clipper.DistanceFromLineSqrd(r,t,e)<i},n.Clipper.PointsAreClose=function(t,e,n){var r=t.X-e.X,i=t.Y-e.Y;return r*r+i*i<=n},n.Clipper.ExcludeOp=function(t){var e=t.Prev;return e.Next=t.Next,t.Next.Prev=e,e.Idx=0,e},n.Clipper.CleanPolygon=function(t,e){void 0===e&&(e=1.415);var r=t.length;if(0===r)return new Array;for(var i=new Array(r),o=0;o<r;++o)i[o]=new n.OutPt;for(o=0;o<r;++o)i[o].Pt=t[o],i[o].Next=i[(o+1)%r],i[o].Next.Prev=i[o],i[o].Idx=0;for(var s=e*e,u=i[0];0===u.Idx&&u.Next!==u.Prev;)n.Clipper.PointsAreClose(u.Pt,u.Prev.Pt,s)?(u=n.Clipper.ExcludeOp(u),r--):n.Clipper.PointsAreClose(u.Prev.Pt,u.Next.Pt,s)?(n.Clipper.ExcludeOp(u.Next),u=n.Clipper.ExcludeOp(u),r-=2):n.Clipper.SlopesNearCollinear(u.Prev.Pt,u.Pt,u.Next.Pt,s)?(u=n.Clipper.ExcludeOp(u),r--):(u.Idx=1,u=u.Next);r<3&&(r=0);var a=new Array(r);for(o=0;o<r;++o)a[o]=new n.IntPoint1(u.Pt),u=u.Next;return i=null,a},n.Clipper.CleanPolygons=function(t,e){for(var r=new Array(t.length),i=0,o=t.length;i<o;i++)r[i]=n.Clipper.CleanPolygon(t[i],e);return r},n.Clipper.Minkowski=function(t,e,r,i){var o=i?1:0,s=t.length,u=e.length,a=new Array;if(r)for(var l=0;l<u;l++){for(var h=new Array(s),c=0,f=t.length,p=t[c];c<f;p=t[++c])h[c]=new n.IntPoint2(e[l].X+p.X,e[l].Y+p.Y);a.push(h)}else for(l=0;l<u;l++){for(h=new Array(s),c=0,f=t.length,p=t[c];c<f;p=t[++c])h[c]=new n.IntPoint2(e[l].X-p.X,e[l].Y-p.Y);a.push(h)}var v=new Array;for(l=0;l<u-1+o;l++)for(c=0;c<s;c++){var y=new Array;y.push(a[l%u][c%s]),y.push(a[(l+1)%u][c%s]),y.push(a[(l+1)%u][(c+1)%s]),y.push(a[l%u][(c+1)%s]),n.Clipper.Orientation(y)||y.reverse(),v.push(y)}return v},n.Clipper.MinkowskiSum=function(t,e,r){if(e[0]instanceof Array){l=e;for(var i=new n.Paths,o=(u=new n.Clipper,0);o<l.length;++o){var s=n.Clipper.Minkowski(t,l[o],!0,r);u.AddPaths(s,n.PolyType.ptSubject,!0),r&&(a=n.Clipper.TranslatePath(l[o],t[0]),u.AddPath(a,n.PolyType.ptClip,!0))}return u.Execute(n.ClipType.ctUnion,i,n.PolyFillType.pftNonZero,n.PolyFillType.pftNonZero),i}var u,a=e,l=n.Clipper.Minkowski(t,a,!0,r);return(u=new n.Clipper).AddPaths(l,n.PolyType.ptSubject,!0),u.Execute(n.ClipType.ctUnion,l,n.PolyFillType.pftNonZero,n.PolyFillType.pftNonZero),l},n.Clipper.TranslatePath=function(t,e){for(var r=new n.Path,i=0;i<t.length;i++)r.push(new n.IntPoint2(t[i].X+e.X,t[i].Y+e.Y));return r},n.Clipper.MinkowskiDiff=function(t,e){var r=n.Clipper.Minkowski(t,e,!1,!0),i=new n.Clipper;return i.AddPaths(r,n.PolyType.ptSubject,!0),i.Execute(n.ClipType.ctUnion,r,n.PolyFillType.pftNonZero,n.PolyFillType.pftNonZero),r},n.Clipper.PolyTreeToPaths=function(t){var e=new Array;return n.Clipper.AddPolyNodeToPaths(t,n.Clipper.NodeType.ntAny,e),e},n.Clipper.AddPolyNodeToPaths=function(t,e,r){var i=!0;switch(e){case n.Clipper.NodeType.ntOpen:return;case n.Clipper.NodeType.ntClosed:i=!t.IsOpen}t.m_polygon.length>0&&i&&r.push(t.m_polygon);for(var o=0,s=t.Childs(),u=s.length,a=s[o];o<u;a=s[++o])n.Clipper.AddPolyNodeToPaths(a,e,r)},n.Clipper.OpenPathsFromPolyTree=function(t){for(var e=new n.Paths,r=0,i=t.ChildCount();r<i;r++)t.Childs()[r].IsOpen&&e.push(t.Childs()[r].m_polygon);return e},n.Clipper.ClosedPathsFromPolyTree=function(t){var e=new n.Paths;return n.Clipper.AddPolyNodeToPaths(t,n.Clipper.NodeType.ntClosed,e),e},L(n.Clipper,n.ClipperBase),n.Clipper.NodeType={ntAny:0,ntOpen:1,ntClosed:2},n.ClipperOffset=function(t,e){void 0===t&&(t=2),void 0===e&&(e=n.ClipperOffset.def_arc_tolerance),this.m_destPolys=new n.Paths,this.m_srcPoly=new n.Path,this.m_destPoly=new n.Path,this.m_normals=new Array,this.m_delta=0,this.m_sinA=0,this.m_sin=0,this.m_cos=0,this.m_miterLim=0,this.m_StepsPerRad=0,this.m_lowest=new n.IntPoint0,this.m_polyNodes=new n.PolyNode,this.MiterLimit=t,this.ArcTolerance=e,this.m_lowest.X=-1},n.ClipperOffset.two_pi=6.28318530717959,n.ClipperOffset.def_arc_tolerance=.25,n.ClipperOffset.prototype.Clear=function(){n.Clear(this.m_polyNodes.Childs()),this.m_lowest.X=-1},n.ClipperOffset.Round=n.Clipper.Round,n.ClipperOffset.prototype.AddPath=function(t,e,r){var i=t.length-1;if(!(i<0)){var o=new n.PolyNode;if(o.m_jointype=e,o.m_endtype=r,r===n.EndType.etClosedLine||r===n.EndType.etClosedPolygon)for(;i>0&&n.IntPoint.op_Equality(t[0],t[i]);)i--;o.m_polygon.push(t[0]);for(var s=0,u=0,a=1;a<=i;a++)n.IntPoint.op_Inequality(o.m_polygon[s],t[a])&&(s++,o.m_polygon.push(t[a]),(t[a].Y>o.m_polygon[u].Y||t[a].Y===o.m_polygon[u].Y&&t[a].X<o.m_polygon[u].X)&&(u=s));if(!(r===n.EndType.etClosedPolygon&&s<2)&&(this.m_polyNodes.AddChild(o),r===n.EndType.etClosedPolygon))if(this.m_lowest.X<0)this.m_lowest=new n.IntPoint2(this.m_polyNodes.ChildCount()-1,u);else{var l=this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];(o.m_polygon[u].Y>l.Y||o.m_polygon[u].Y===l.Y&&o.m_polygon[u].X<l.X)&&(this.m_lowest=new n.IntPoint2(this.m_polyNodes.ChildCount()-1,u))}}},n.ClipperOffset.prototype.AddPaths=function(t,e,n){for(var r=0,i=t.length;r<i;r++)this.AddPath(t[r],e,n)},n.ClipperOffset.prototype.FixOrientations=function(){if(this.m_lowest.X>=0&&!n.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))for(var t=0;t<this.m_polyNodes.ChildCount();t++)((e=this.m_polyNodes.Childs()[t]).m_endtype===n.EndType.etClosedPolygon||e.m_endtype===n.EndType.etClosedLine&&n.Clipper.Orientation(e.m_polygon))&&e.m_polygon.reverse();else for(t=0;t<this.m_polyNodes.ChildCount();t++){var e;(e=this.m_polyNodes.Childs()[t]).m_endtype!==n.EndType.etClosedLine||n.Clipper.Orientation(e.m_polygon)||e.m_polygon.reverse()}},n.ClipperOffset.GetUnitNormal=function(t,e){var r=e.X-t.X,i=e.Y-t.Y;if(0===r&&0===i)return new n.DoublePoint2(0,0);var o=1/Math.sqrt(r*r+i*i);return r*=o,i*=o,new n.DoublePoint2(i,-r)},n.ClipperOffset.prototype.DoOffset=function(t){if(this.m_destPolys=new Array,this.m_delta=t,n.ClipperBase.near_zero(t))for(var e=0;e<this.m_polyNodes.ChildCount();e++)(o=this.m_polyNodes.Childs()[e]).m_endtype===n.EndType.etClosedPolygon&&this.m_destPolys.push(o.m_polygon);else{var r;this.MiterLimit>2?this.m_miterLim=2/(this.MiterLimit*this.MiterLimit):this.m_miterLim=.5,r=this.ArcTolerance<=0?n.ClipperOffset.def_arc_tolerance:this.ArcTolerance>Math.abs(t)*n.ClipperOffset.def_arc_tolerance?Math.abs(t)*n.ClipperOffset.def_arc_tolerance:this.ArcTolerance;var i=3.14159265358979/Math.acos(1-r/Math.abs(t));for(this.m_sin=Math.sin(n.ClipperOffset.two_pi/i),this.m_cos=Math.cos(n.ClipperOffset.two_pi/i),this.m_StepsPerRad=i/n.ClipperOffset.two_pi,t<0&&(this.m_sin=-this.m_sin),e=0;e<this.m_polyNodes.ChildCount();e++){var o=this.m_polyNodes.Childs()[e];this.m_srcPoly=o.m_polygon;var s=this.m_srcPoly.length;if(!(0===s||t<=0&&(s<3||o.m_endtype!==n.EndType.etClosedPolygon)))if(this.m_destPoly=new Array,1!==s){for(this.m_normals.length=0,f=0;f<s-1;f++)this.m_normals.push(n.ClipperOffset.GetUnitNormal(this.m_srcPoly[f],this.m_srcPoly[f+1]));if(o.m_endtype===n.EndType.etClosedLine||o.m_endtype===n.EndType.etClosedPolygon?this.m_normals.push(n.ClipperOffset.GetUnitNormal(this.m_srcPoly[s-1],this.m_srcPoly[0])):this.m_normals.push(new n.DoublePoint1(this.m_normals[s-2])),o.m_endtype===n.EndType.etClosedPolygon){var u=s-1;for(f=0;f<s;f++)u=this.OffsetPoint(f,u,o.m_jointype);this.m_destPolys.push(this.m_destPoly)}else if(o.m_endtype===n.EndType.etClosedLine){for(u=s-1,f=0;f<s;f++)u=this.OffsetPoint(f,u,o.m_jointype);this.m_destPolys.push(this.m_destPoly),this.m_destPoly=new Array;var a=this.m_normals[s-1];for(f=s-1;f>0;f--)this.m_normals[f]=new n.DoublePoint2(-this.m_normals[f-1].X,-this.m_normals[f-1].Y);for(this.m_normals[0]=new n.DoublePoint2(-a.X,-a.Y),u=0,f=s-1;f>=0;f--)u=this.OffsetPoint(f,u,o.m_jointype);this.m_destPolys.push(this.m_destPoly)}else{var l;for(u=0,f=1;f<s-1;++f)u=this.OffsetPoint(f,u,o.m_jointype);for(o.m_endtype===n.EndType.etOpenButt?(f=s-1,l=new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[f].X+this.m_normals[f].X*t),n.ClipperOffset.Round(this.m_srcPoly[f].Y+this.m_normals[f].Y*t)),this.m_destPoly.push(l),l=new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[f].X-this.m_normals[f].X*t),n.ClipperOffset.Round(this.m_srcPoly[f].Y-this.m_normals[f].Y*t)),this.m_destPoly.push(l)):(f=s-1,u=s-2,this.m_sinA=0,this.m_normals[f]=new n.DoublePoint2(-this.m_normals[f].X,-this.m_normals[f].Y),o.m_endtype===n.EndType.etOpenSquare?this.DoSquare(f,u):this.DoRound(f,u)),f=s-1;f>0;f--)this.m_normals[f]=new n.DoublePoint2(-this.m_normals[f-1].X,-this.m_normals[f-1].Y);for(this.m_normals[0]=new n.DoublePoint2(-this.m_normals[1].X,-this.m_normals[1].Y),f=(u=s-1)-1;f>0;--f)u=this.OffsetPoint(f,u,o.m_jointype);o.m_endtype===n.EndType.etOpenButt?(l=new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[0].X-this.m_normals[0].X*t),n.ClipperOffset.Round(this.m_srcPoly[0].Y-this.m_normals[0].Y*t)),this.m_destPoly.push(l),l=new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[0].X+this.m_normals[0].X*t),n.ClipperOffset.Round(this.m_srcPoly[0].Y+this.m_normals[0].Y*t)),this.m_destPoly.push(l)):(u=1,this.m_sinA=0,o.m_endtype===n.EndType.etOpenSquare?this.DoSquare(0,1):this.DoRound(0,1)),this.m_destPolys.push(this.m_destPoly)}}else{if(o.m_jointype===n.JoinType.jtRound)for(var h=1,c=0,f=1;f<=i;f++){this.m_destPoly.push(new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[0].X+h*t),n.ClipperOffset.Round(this.m_srcPoly[0].Y+c*t)));var p=h;h=h*this.m_cos-this.m_sin*c,c=p*this.m_sin+c*this.m_cos}else{h=-1,c=-1;for(f=0;f<4;++f)this.m_destPoly.push(new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[0].X+h*t),n.ClipperOffset.Round(this.m_srcPoly[0].Y+c*t))),h<0?h=1:c<0?c=1:h=-1}this.m_destPolys.push(this.m_destPoly)}}}},n.ClipperOffset.prototype.Execute=function(){var t=arguments,e=t[0]instanceof n.PolyTree;if(e)if(s=t[0],u=t[1],s.Clear(),this.FixOrientations(),this.DoOffset(u),(o=new n.Clipper(0)).AddPaths(this.m_destPolys,n.PolyType.ptSubject,!0),u>0)o.Execute(n.ClipType.ctUnion,s,n.PolyFillType.pftPositive,n.PolyFillType.pftPositive);else if(l=n.Clipper.GetBounds(this.m_destPolys),(a=new n.Path).push(new n.IntPoint2(l.left-10,l.bottom+10)),a.push(new n.IntPoint2(l.right+10,l.bottom+10)),a.push(new n.IntPoint2(l.right+10,l.top-10)),a.push(new n.IntPoint2(l.left-10,l.top-10)),o.AddPath(a,n.PolyType.ptSubject,!0),o.ReverseSolution=!0,o.Execute(n.ClipType.ctUnion,s,n.PolyFillType.pftNegative,n.PolyFillType.pftNegative),1===s.ChildCount()&&s.Childs()[0].ChildCount()>0){var r=s.Childs()[0];s.Childs()[0]=r.Childs()[0],s.Childs()[0].m_Parent=s;for(var i=1;i<r.ChildCount();i++)s.AddChild(r.Childs()[i])}else s.Clear();else{var o,s=t[0],u=t[1];if(n.Clear(s),this.FixOrientations(),this.DoOffset(u),(o=new n.Clipper(0)).AddPaths(this.m_destPolys,n.PolyType.ptSubject,!0),u>0)o.Execute(n.ClipType.ctUnion,s,n.PolyFillType.pftPositive,n.PolyFillType.pftPositive);else{var a,l=n.Clipper.GetBounds(this.m_destPolys);(a=new n.Path).push(new n.IntPoint2(l.left-10,l.bottom+10)),a.push(new n.IntPoint2(l.right+10,l.bottom+10)),a.push(new n.IntPoint2(l.right+10,l.top-10)),a.push(new n.IntPoint2(l.left-10,l.top-10)),o.AddPath(a,n.PolyType.ptSubject,!0),o.ReverseSolution=!0,o.Execute(n.ClipType.ctUnion,s,n.PolyFillType.pftNegative,n.PolyFillType.pftNegative),s.length>0&&s.splice(0,1)}}},n.ClipperOffset.prototype.OffsetPoint=function(t,e,r){if(this.m_sinA=this.m_normals[e].X*this.m_normals[t].Y-this.m_normals[t].X*this.m_normals[e].Y,Math.abs(this.m_sinA*this.m_delta)<1){if(this.m_normals[e].X*this.m_normals[t].X+this.m_normals[t].Y*this.m_normals[e].Y>0)return this.m_destPoly.push(new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[e].X*this.m_delta),n.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[e].Y*this.m_delta))),e}else this.m_sinA>1?this.m_sinA=1:this.m_sinA<-1&&(this.m_sinA=-1);if(this.m_sinA*this.m_delta<0)this.m_destPoly.push(new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[e].X*this.m_delta),n.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[e].Y*this.m_delta))),this.m_destPoly.push(new n.IntPoint1(this.m_srcPoly[t])),this.m_destPoly.push(new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[t].X*this.m_delta),n.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[t].Y*this.m_delta)));else switch(r){case n.JoinType.jtMiter:var i=this.m_normals[t].X*this.m_normals[e].X+this.m_normals[t].Y*this.m_normals[e].Y+1;i>=this.m_miterLim?this.DoMiter(t,e,i):this.DoSquare(t,e);break;case n.JoinType.jtSquare:this.DoSquare(t,e);break;case n.JoinType.jtRound:this.DoRound(t,e)}return t},n.ClipperOffset.prototype.DoSquare=function(t,e){var r=Math.tan(Math.atan2(this.m_sinA,this.m_normals[e].X*this.m_normals[t].X+this.m_normals[e].Y*this.m_normals[t].Y)/4);this.m_destPoly.push(new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_delta*(this.m_normals[e].X-this.m_normals[e].Y*r)),n.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_delta*(this.m_normals[e].Y+this.m_normals[e].X*r)))),this.m_destPoly.push(new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_delta*(this.m_normals[t].X+this.m_normals[t].Y*r)),n.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_delta*(this.m_normals[t].Y-this.m_normals[t].X*r))))},n.ClipperOffset.prototype.DoMiter=function(t,e,r){var i=this.m_delta/r;this.m_destPoly.push(new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[t].X+(this.m_normals[e].X+this.m_normals[t].X)*i),n.ClipperOffset.Round(this.m_srcPoly[t].Y+(this.m_normals[e].Y+this.m_normals[t].Y)*i)))},n.ClipperOffset.prototype.DoRound=function(t,e){for(var r,i=Math.atan2(this.m_sinA,this.m_normals[e].X*this.m_normals[t].X+this.m_normals[e].Y*this.m_normals[t].Y),o=Math.max(n.Cast_Int32(n.ClipperOffset.Round(this.m_StepsPerRad*Math.abs(i))),1),s=this.m_normals[e].X,u=this.m_normals[e].Y,a=0;a<o;++a)this.m_destPoly.push(new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[t].X+s*this.m_delta),n.ClipperOffset.Round(this.m_srcPoly[t].Y+u*this.m_delta))),r=s,s=s*this.m_cos-this.m_sin*u,u=r*this.m_sin+u*this.m_cos;this.m_destPoly.push(new n.IntPoint2(n.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[t].X*this.m_delta),n.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[t].Y*this.m_delta)))},n.Error=function(t){try{throw new Error(t)}catch(t){alert(t.message)}},n.JS={},n.JS.AreaOfPolygon=function(t,e){return e||(e=1),n.Clipper.Area(t)/(e*e)},n.JS.AreaOfPolygons=function(t,e){e||(e=1);for(var r=0,i=0;i<t.length;i++)r+=n.Clipper.Area(t[i]);return r/(e*e)},n.JS.BoundsOfPath=function(t,e){return n.JS.BoundsOfPaths([t],e)},n.JS.BoundsOfPaths=function(t,e){e||(e=1);var r=n.Clipper.GetBounds(t);return r.left/=e,r.bottom/=e,r.right/=e,r.top/=e,r},n.JS.Clean=function(t,e){if(!(t instanceof Array))return[];var r=t[0]instanceof Array;if(t=n.JS.Clone(t),"number"!=typeof e||null===e)return n.Error("Delta is not a number in Clean()."),t;if(0===t.length||1===t.length&&0===t[0].length||e<0)return t;r||(t=[t]);for(var i,o,s,u,a,l,h,c=t.length,f=[],p=0;p<c;p++)if(0!==(i=(o=t[p]).length))if(i<3)s=o,f.push(s);else{for(s=o,u=e*e,a=o[0],l=1,h=1;h<i;h++)(o[h].X-a.X)*(o[h].X-a.X)+(o[h].Y-a.Y)*(o[h].Y-a.Y)<=u||(s[l]=o[h],a=o[h],l++);a=o[l-1],(o[0].X-a.X)*(o[0].X-a.X)+(o[0].Y-a.Y)*(o[0].Y-a.Y)<=u&&l--,l<i&&s.splice(l,i-l),s.length&&f.push(s)}return!r&&f.length?f=f[0]:r||0!==f.length?r&&0===f.length&&(f=[[]]):f=[],f},n.JS.Clone=function(t){if(!(t instanceof Array))return[];if(0===t.length)return[];if(1===t.length&&0===t[0].length)return[[]];var e=t[0]instanceof Array;e||(t=[t]);var n,r,i,o,s=t.length,u=new Array(s);for(r=0;r<s;r++){for(n=t[r].length,o=new Array(n),i=0;i<n;i++)o[i]={X:t[r][i].X,Y:t[r][i].Y};u[r]=o}return e||(u=u[0]),u},n.JS.Lighten=function(t,e){if(!(t instanceof Array))return[];if("number"!=typeof e||null===e)return n.Error("Tolerance is not a number in Lighten()."),n.JS.Clone(t);if(0===t.length||1===t.length&&0===t[0].length||e<0)return n.JS.Clone(t);var r,i,o,s,u,a,l,h,c,f,p,v,y,d,m,P,g=t[0]instanceof Array;g||(t=[t]);var x=t.length,_=e*e,b=[];for(r=0;r<x;r++)if(0!==(a=(o=t[r]).length)){for(s=0;s<1e6;s++){for(u=[],o[(a=o.length)-1].X!==o[0].X||o[a-1].Y!==o[0].Y?(p=1,o.push({X:o[0].X,Y:o[0].Y}),a=o.length):p=0,f=[],i=0;i<a-2;i++)l=o[i],c=o[i+1],h=o[i+2],m=l.X,P=l.Y,v=h.X-m,y=h.Y-P,0===v&&0===y||((d=((c.X-m)*v+(c.Y-P)*y)/(v*v+y*y))>1?(m=h.X,P=h.Y):d>0&&(m+=v*d,P+=y*d)),(v=c.X-m)*v+(y=c.Y-P)*y<=_&&(f[i+1]=1,i++);for(u.push({X:o[0].X,Y:o[0].Y}),i=1;i<a-1;i++)f[i]||u.push({X:o[i].X,Y:o[i].Y});if(u.push({X:o[a-1].X,Y:o[a-1].Y}),p&&o.pop(),!f.length)break;o=u}u[(a=u.length)-1].X===u[0].X&&u[a-1].Y===u[0].Y&&u.pop(),u.length>2&&b.push(u)}return g||(b=b[0]),void 0===b&&(b=[]),b},n.JS.PerimeterOfPath=function(t,e,n){if(void 0===t)return 0;var r,i,o=Math.sqrt,s=0,u=0,a=0,l=0,h=0,c=t.length;if(c<2)return 0;for(e&&(t[c]=t[0],c++);--c;)u=(r=t[c]).X,a=r.Y,s+=o((u-(l=(i=t[c-1]).X))*(u-l)+(a-(h=i.Y))*(a-h));return e&&t.pop(),s/n},n.JS.PerimeterOfPaths=function(t,e,r){r||(r=1);for(var i=0,o=0;o<t.length;o++)i+=n.JS.PerimeterOfPath(t[o],e,r);return i},n.JS.ScaleDownPath=function(t,e){var n,r;for(e||(e=1),n=t.length;n--;)(r=t[n]).X=r.X/e,r.Y=r.Y/e},n.JS.ScaleDownPaths=function(t,e){var n,r,i;for(e||(e=1),n=t.length;n--;)for(r=t[n].length;r--;)(i=t[n][r]).X=i.X/e,i.Y=i.Y/e},n.JS.ScaleUpPath=function(t,e){var n,r,i=Math.round;for(e||(e=1),n=t.length;n--;)(r=t[n]).X=i(r.X*e),r.Y=i(r.Y*e)},n.JS.ScaleUpPaths=function(t,e){var n,r,i,o=Math.round;for(e||(e=1),n=t.length;n--;)for(r=t[n].length;r--;)(i=t[n][r]).X=o(i.X*e),i.Y=o(i.Y*e)},n.ExPolygons=function(){return[]},n.ExPolygon=function(){this.outer=null,this.holes=null},n.JS.AddOuterPolyNodeToExPolygons=function(t,e){var r=new n.ExPolygon;r.outer=t.Contour();var i,o,s,u,a,l,h=t.Childs(),c=h.length;for(r.holes=new Array(c),s=0;s<c;s++)for(i=h[s],r.holes[s]=i.Contour(),u=0,l=(a=i.Childs()).length;u<l;u++)o=a[u],n.JS.AddOuterPolyNodeToExPolygons(o,e);e.push(r)},n.JS.ExPolygonsToPaths=function(t){var e,r,i,o,s=new n.Paths;for(e=0,i=t.length;e<i;e++)for(s.push(t[e].outer),r=0,o=t[e].holes.length;r<o;r++)s.push(t[e].holes[r]);return s},n.JS.PolyTreeToExPolygons=function(t){var e,r,i,o,s=new n.ExPolygons;for(r=0,o=(i=t.Childs()).length;r<o;r++)e=i[r],n.JS.AddOuterPolyNodeToExPolygons(e,s);return s}}()},899:(t,e,n)=>{"use strict";n.d(e,{Z:()=>v});var r=n(204),i=n(561),o=n(109);function s(t){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s(t)}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function l(t,e){return l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},l(t,e)}function h(t,e){if(e&&("object"===s(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function c(t){return c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},c(t)}var f,p,v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&l(t,e)}(p,t);var e,n,r,s,f=(r=p,s=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=c(r);if(s){var n=c(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return h(this,t)});function p(){return u(this,p),f.apply(this,arguments)}return e=p,(n=[{key:"init",value:function(){this.pos={x:this.canvasWidth/2,y:this.canvasHeight/2},this.vs.xDrift=new o.Z({name:"x Drift",min:0,max:20,initialValue:5}),this.vs.yDrift=new o.Z({name:"y Drift",min:0,max:20,initialValue:5}),this.vs.circleMinRadius=new o.Z({name:"Min rad",min:0,max:25,initialValue:3}),this.vs.circleMaxRadius=new o.Z({name:"Max rad",min:0,max:50,initialValue:12}),this.vs.circleDrift=new o.Z({name:"Circle Drift",min:0,max:100,initialValue:30}),this.vs.circleSpawnRate=new o.Z({name:"Spawn rate",min:1,max:300,step:1,initialValue:150}),this.vs.circleSpawnChance=new o.Z({name:"Spawn chance",min:0,max:1,initialValue:.5})}},{key:"initDraw",value:function(){this.vs.circleMaxRadius.value<this.vs.circleMinRadius.value&&this.vs.circleMaxRadius.setValue(this.vs.circleMinRadius.value,!0)}},{key:"draw",value:function(t){if(this.pos.x=(0,i.re)(this.pos.x,this.canvasWidth),this.pos.y=(0,i.re)(this.pos.y,this.canvasHeight),t%100==0&&(this.ctx.strokeStyle="#".concat((65793*(0,i.c4)(128)).toString(16))),this.ctx.beginPath(),this.ctx.moveTo(this.pos.x,this.pos.y),this.pos.x+=(0,i.Qy)(this.vs.xDrift.value),this.pos.y+=(0,i.Qy)(this.vs.yDrift.value),this.ctx.lineTo(this.pos.x,this.pos.y),this.ctx.stroke(),this.ctx.closePath(),t%this.vs.circleSpawnRate.value==0&&Math.random()<this.vs.circleSpawnChance.value){var e=this.ctx.fillStyle,n=this.ctx.strokeStyle;this.ctx.strokeStyle="#000",this.ctx.fillStyle="#".concat(Math.floor(8388607.5+(0,i.c4)(8388607.5)).toString(16)),this.ctx.beginPath(),this.ctx.circle(this.pos.x+(0,i.rO)(this.vs.circleDrift.value),this.pos.y+(0,i.rO)(this.vs.circleDrift.value),(0,i.c4)(this.vs.circleMaxRadius.value,this.vs.circleMinRadius.value)),this.ctx.fill(),this.ctx.stroke(),this.ctx.closePath(),this.ctx.strokeStyle=n,this.ctx.fillStyle=e}}}])&&a(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),p}(r.v);(p="generateGCode")in(f=v)?Object.defineProperty(f,p,{value:false,enumerable:!0,configurable:!0,writable:!0}):f[p]=false},715:(t,e,n)=>{"use strict";function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function s(t,e){return s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},s(t,e)}function u(t,e){if(e&&("object"===r(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function a(t){return a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},a(t)}n.d(e,{Z:()=>l});var l=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&s(t,e)}(c,t);var e,n,r,l,h=(r=c,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=a(r);if(l){var n=a(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return u(this,t)});function c(){return i(this,c),h.apply(this,arguments)}return e=c,(n=[{key:"init",value:function(){this.ctx.driver.comment("Drawing single line"),this.ctx.beginPath(),this.ctx.moveTo(100,100),this.ctx.lineTo(200,100),this.ctx.stroke(),this.ctx.closePath(),this.ctx.driver.comment("Drawing joined line"),this.ctx.beginPath(),this.ctx.moveTo(200,400),this.ctx.lineTo(250,400),this.ctx.lineTo(300,450),this.ctx.stroke(),this.ctx.closePath(),this.ctx.driver.comment("Drawing rect"),this.ctx.beginPath(),this.ctx.rect(200,200,50,50),this.ctx.stroke(),this.ctx.closePath(),this.ctx.driver.comment("Drawing circle"),this.ctx.beginPath(),"circle"in this.ctx&&this.ctx.circle(400,400,50),this.ctx.stroke(),this.ctx.closePath()}}])&&o(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),c}(n(204).v)},798:(t,e,n)=>{"use strict";n.d(e,{Z:()=>m});var r=n(563),i=n(323),o=n(204),s=n(132),u=n(286),a=n(109);function l(t){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},l(t)}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},f(t,e)}function p(t,e){if(e&&("object"===l(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return v(t)}function v(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function y(t){return y=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},y(t)}function d(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var m=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&f(t,e)}(P,t);var e,n,o,l,m=(o=P,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=y(o);if(l){var n=y(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return p(this,t)});function P(){var t;h(this,P);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return d(v(t=m.call.apply(m,[this].concat(n))),"count",0),t}return e=P,(n=[{key:"init",value:function(){var t=this;this.vs.precision=new a.Z({initialValue:180,min:2,max:1440,step:1}),this.vs.speedPow1=new a.Z({initialValue:.5,min:.001,max:10,step:.001}),this.vs.radiusMin=new a.Z({initialValue:10,min:1,max:200,step:1}),this.vs.radiusMax=new a.Z({initialValue:50,min:1,max:200,step:1}),this.vs.radiusThetaMulti=new a.Z({initialValue:1,min:.001,max:5,step:.001}),this.osc=new u.Z({speed:function(e){var n=Math.sqrt(e)/-Math.pow(Math.sqrt(e),t.vs.speedPow1.value);return isNaN(n)?0:n},radius:function(e){return new i.Z(t.vs.radiusMin.value+Math.cos(e*t.vs.radiusThetaMulti.value)*t.vs.radiusMax.value,t.vs.radiusMin.value+Math.sin(e*t.vs.radiusThetaMulti.value)*t.vs.radiusMax.value)}})}},{key:"initDraw",value:function(){this.vs.radiusMin.value>this.vs.radiusMax.value&&this.vs.radiusMax.setValue(this.vs.radiusMin.value,!0),console.log({precision:this.vs.precision.value,speedPow1:this.vs.speedPow1.value,radiusMin:this.vs.radiusMin.value,radiusMax:this.vs.radiusMax.value,radiusThetaMulti:this.vs.radiusThetaMulti.value}),this.count=0,this.lastPoint=void 0,this.osc.reset();var t=this.cw/2-this.vs.radiusMax.value-100,e=(0,s.CS)(this.cx,this.cy,0,2*Math.PI,t).start,n=new r.Z;n.moveTo(e.x,e.y),n.arc(this.cx,this.cy,t,0,2*Math.PI,!1),this.circlePoints=n.getPoints(this.vs.precision.value)}},{key:"draw",value:function(t){if(!(this.count>=this.circlePoints.length)){this.osc.step(this.count+1);var e=this.circlePoints[this.count],n=new i.Z(e.x+this.osc.x,e.y+this.osc.y);this.lastPoint&&e&&(this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.lineTo(n.x,n.y),this.ctx.stroke(),this.ctx.closePath()),this.lastPoint=n.clone(),this.count++}}}])&&c(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),P}(o.v)},613:(t,e,n)=>{"use strict";n.d(e,{Z:()=>y});var r=n(323),i=n(204),o=n(561),s=n(109);function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function h(t,e){return h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},h(t,e)}function c(t,e){if(e&&("object"===u(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function f(t){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},f(t)}var p,v,y=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&h(t,e)}(v,t);var e,n,i,u,p=(i=v,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=f(i);if(u){var n=f(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return c(this,t)});function v(){return a(this,v),p.apply(this,arguments)}return e=v,(n=[{key:"init",value:function(){this.vs.stopAfter=new s.Z({initialValue:5,min:1,max:200,step:1}),this.vs.driftMin=new s.Z({initialValue:20,min:0,max:100,step:1}),this.vs.driftMax=new s.Z({initialValue:50,min:0,max:100,step:1}),this.vs.midpointDrift=new s.Z({initialValue:30,min:0,max:100,step:1})}},{key:"initDraw",value:function(){var t=Math.random()*Math.PI*2;this.lastPoint=new r.Z(this.cx+100*Math.cos(t),this.cy+100*+Math.sin(t)),this.lastAnchorPoint=this.lastPoint.clone()}},{key:"draw",value:function(t){if(!(t>this.vs.stopAfter.value)){var e=new r.Z(this.lastPoint.x+Math.cos(Math.random()*Math.PI*2)*(this.vs.driftMin.value+Math.random()*(this.vs.driftMax.value-this.vs.driftMin.value)),this.lastPoint.y+Math.sin(Math.random()*Math.PI*2)*(this.vs.driftMin.value+Math.random()*(this.vs.driftMax.value-this.vs.driftMin.value)));e.x+=(this.cx-e.x)/15,e.y+=(this.cy-e.y)/15;var n=this.lastAnchorPoint.angleTo(this.lastPoint),i=this.lastAnchorPoint.distanceTo(this.lastPoint),s=this.lastAnchorPoint.add(new r.Z(Math.cos(n)*(2*i),Math.sin(n)*(2*i))).add(new r.Z((0,o.rO)(this.vs.midpointDrift.value),(0,o.rO)(this.vs.midpointDrift.value)));s.x+=(this.cx-s.x)/15,s.y+=(this.cy-s.y)/15,this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.bezierCurveTo(s.x,s.y,s.x,s.y,e.x,e.y),this.ctx.stroke(),this.ctx.closePath(),this.lastPoint=e.clone(),this.lastAnchorPoint=s.clone()}}}])&&l(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),v}(i.v);(v="generateGCode")in(p=y)?Object.defineProperty(p,v,{value:false,enumerable:!0,configurable:!0,writable:!0}):p[v]=false},918:(t,e,n)=>{"use strict";n.d(e,{Z:()=>p});var r=n(323),i=n(204),o=n(286),s=n(109);function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function h(t,e){return h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},h(t,e)}function c(t,e){if(e&&("object"===u(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function f(t){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},f(t)}var p=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&h(t,e)}(v,t);var e,n,i,u,p=(i=v,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=f(i);if(u){var n=f(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return c(this,t)});function v(){return a(this,v),p.apply(this,arguments)}return e=v,(n=[{key:"init",value:function(){var t=this;this.vs.speedUp=new s.Z({initialValue:10,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new s.Z({initialValue:5e4,min:1,max:12e4,step:1,disableRandomize:!0}),this.vs.osc1speed=new s.Z({initialValue:.1,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.osc1dist=new s.Z({initialValue:Math.PI/4,min:Math.PI/8,max:16*Math.PI,step:Math.PI/32}),this.vs.osc1phase=new s.Z({initialValue:0,min:0,max:2*Math.PI,step:Math.PI/16}),this.vs.osc2speed=new s.Z({initialValue:.1,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.osc2dist=new s.Z({initialValue:Math.PI/4,min:Math.PI/8,max:16*Math.PI,step:Math.PI/32}),this.vs.osc2phase=new s.Z({initialValue:0,min:0,max:2*Math.PI,step:Math.PI/16}),this.vs.osc3speed=new s.Z({initialValue:.1,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.osc3dist=new s.Z({initialValue:Math.PI/4,min:Math.PI/8,max:16*Math.PI,step:Math.PI/32}),this.vs.osc3phase=new s.Z({initialValue:0,min:0,max:2*Math.PI,step:Math.PI/16}),this.osc1=new o.Z({speed:function(e){return t.vs.osc1speed.value},radius:function(e){return t.vs.osc1dist.value},phase:0}),this.osc2=new o.Z({speed:function(e){return t.vs.osc2speed.value},radius:function(e){return t.vs.osc2dist.value},phase:0}),this.osc3=new o.Z({speed:function(e){return t.vs.osc3speed.value},radius:function(e){return t.vs.osc3dist.value},phase:0})}},{key:"initDraw",value:function(){this.lastPoint=new r.Z(this.cx,this.cy),this.vs.stopAfter.step=this.vs.speedUp.value,this.osc1.phase=this.vs.osc1phase.value,this.osc2.phase=this.vs.osc2phase.value,this.osc3.phase=this.vs.osc3phase.value,this.osc1.reset(),this.osc2.reset(),this.osc3.reset()}},{key:"draw",value:function(t){var e=this.vs.speedUp.value;if(!(t*e>this.vs.stopAfter.value))for(var n=0;n<e;n++){this.osc1.step(t),this.osc2.step(t),this.osc3.step(t);var r=this.lastPoint.clone().add(this.osc1.value.add(this.osc2.value).add(this.osc3.value));this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.lineTo(r.x,r.y),this.ctx.stroke(),this.ctx.closePath(),this.lastPoint=r}}}])&&l(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),v}(i.v)},511:(t,e,n)=>{"use strict";n.d(e,{Z:()=>p});var r=n(323),i=n(204),o=n(286),s=n(109);function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function h(t,e){return h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},h(t,e)}function c(t,e){if(e&&("object"===u(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function f(t){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},f(t)}var p=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&h(t,e)}(v,t);var e,n,i,u,p=(i=v,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=f(i);if(u){var n=f(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return c(this,t)});function v(){return a(this,v),p.apply(this,arguments)}return e=v,(n=[{key:"init",value:function(){var t=this;this.vs.speedUp=new s.Z({initialValue:15,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new s.Z({initialValue:1e3,min:1,max:2e4,step:1,disableRandomize:!0}),this.vs.oscSpeed=new s.Z({initialValue:.1825,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.oscSpeedMulti=new s.Z({initialValue:2.994,min:.5,max:5,step:1e-5}),this.vs.oscDist=new s.Z({initialValue:50,min:1,max:75,step:.25}),this.vs.osc1phase=new s.Z({initialValue:5.9,min:0,max:2*Math.PI,step:Math.PI/32}),this.vs.osc2phase=new s.Z({initialValue:1.8,min:0,max:2*Math.PI,step:Math.PI/32}),this.vs.osc3phase=new s.Z({initialValue:2,min:0,max:2*Math.PI,step:Math.PI/32}),this.osc1=new o.Z({speed:function(e){return t.vs.oscSpeed.value*t.vs.oscSpeedMulti.value/2},radius:function(e){return t.vs.oscDist.value},phase:0}),this.osc2=new o.Z({speed:function(e){return t.vs.oscSpeed.value*Math.pow(t.vs.oscSpeedMulti.value,2)/2},radius:function(e){return t.vs.oscDist.value},phase:0}),this.osc3=new o.Z({speed:function(e){return t.vs.oscSpeed.value*Math.pow(t.vs.oscSpeedMulti.value,3)/3},radius:function(e){return t.vs.oscDist.value},phase:0})}},{key:"initDraw",value:function(){this.lastPoint=new r.Z(this.cx,this.cy),this.vs.stopAfter.step=this.vs.speedUp.value,this.osc1.phase=this.vs.osc1phase.value,this.osc2.phase=this.vs.osc2phase.value,this.osc3.phase=this.vs.osc3phase.value,this.osc1.reset(),this.osc2.reset(),this.osc3.reset()}},{key:"draw",value:function(t){var e=this.vs.speedUp.value;if(!(t*e>this.vs.stopAfter.value))for(var n=0;n<e;n++){this.osc1.step(t),this.osc2.step(t),this.osc3.step(t);var r=this.lastPoint.clone().add(this.osc1.value.add(this.osc2.value).add(this.osc3.value));this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.lineTo(r.x,r.y),this.ctx.stroke(),this.ctx.closePath(),this.lastPoint=r}}}])&&l(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),v}(i.v)},166:(t,e,n)=>{"use strict";n.d(e,{Z:()=>p});var r=n(323),i=n(204),o=n(286),s=n(109);function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function h(t,e){return h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},h(t,e)}function c(t,e){if(e&&("object"===u(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function f(t){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},f(t)}var p=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&h(t,e)}(v,t);var e,n,i,u,p=(i=v,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=f(i);if(u){var n=f(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return c(this,t)});function v(){return a(this,v),p.apply(this,arguments)}return e=v,(n=[{key:"init",value:function(){var t=this;this.vs.speedUp=new s.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new s.Z({initialValue:100,min:1,max:1e3,step:1,disableRandomize:!0}),this.vs.shrinkAmount=new s.Z({initialValue:15,min:1,max:50,step:1}),this.vs.shrinkDiv=new s.Z({initialValue:1,min:0,max:1.5,step:.01}),this.vs.shrinkFalloff=new s.Z({initialValue:1,min:.9,max:1.1,step:.005}),this.vs.shrinkVariance=new s.Z({initialValue:0,min:0,max:50,step:.01}),this.vs.shrinkVarOsc=new s.Z({initialValue:Math.PI/32,min:0,max:Math.PI/4,step:.001}),this.vs.rotateSpeed=new s.Z({initialValue:Math.PI/32,min:-Math.PI/4,max:Math.PI/4,step:.001}),this.osc1=new o.Z({radius:function(e){return t.vs.shrinkVariance.value},speed:function(e){return t.vs.shrinkVarOsc.value},phase:0})}},{key:"initDraw",value:function(){this.lastPoint=new r.Z(this.cx,this.cy),this.radius=.45*this.cw,this.theta=0,this.osc1.reset()}},{key:"draw",value:function(t){var e=this.vs.speedUp.value;if(!(t*e>this.vs.stopAfter.value))for(var n=0;n<e;n++){var r=t*e+n;this.osc1.step(r),this.radius>0&&(this.ctx.beginPath(),this.ctx.circle(this.lastPoint.x,this.lastPoint.y,this.radius),this.ctx.stroke(),this.ctx.closePath()),this.theta+=this.vs.rotateSpeed.value;var i=this.radius-(this.vs.shrinkAmount.value+this.osc1.x)*Math.pow(this.vs.shrinkFalloff.value,r),o=this.radius-i;this.lastPoint=this.lastPoint.moveAlongAngle(this.theta,o*this.vs.shrinkDiv.value),this.radius=i}}}])&&l(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),v}(i.v)},703:(t,e,n)=>{"use strict";n.d(e,{Z:()=>d});var r=n(323),i=n(204),o=n(497),s=n(109);function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}function a(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,e){return c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},c(t,e)}function f(t,e){if(e&&("object"===u(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function p(t){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},p(t)}var v,y,d=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&c(t,e)}(y,t);var e,n,i,u,v=(i=y,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=p(i);if(u){var n=p(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return f(this,t)});function y(){return l(this,y),v.apply(this,arguments)}return e=y,(n=[{key:"init",value:function(){this.vs.seed=new s.Z({initialValue:1e3,min:1e3,max:5e3,step:1}),this.vs.atLeast=new s.Z({initialValue:800,min:1,max:5e3,step:1,disableRandomize:!0}),this.vs.maxRadius=new s.Z({initialValue:300,min:2,max:1200,step:1,disableRandomize:!0}),this.vs.minRadius=new s.Z({initialValue:2,min:1,max:50,step:1,disableRandomize:!0})}},{key:"initDraw",value:function(){(0,o.b)(this.vs.seed.value),this.reordered=!1,this.redrawnCount=0,this.circles=[],this.radius=.45*this.cw,this.ctx.beginPath(),this.ctx.circle(this.cx,this.cy,this.radius),this.ctx.stroke(),this.ctx.closePath()}},{key:"draw",value:function(t){if(this.circles.length>this.vs.atLeast.value)if(this.reordered){if(this.redrawnCount<this.circles.length){var e=this.circles[this.redrawnCount];this.ctx.beginPath(),this.ctx.circle(e.position.x,e.position.y,e.radius),this.ctx.stroke(),this.ctx.closePath(),this.redrawnCount++}}else{var n=new r.Z(this.cx,this.cy);this.circles.sort((function(t,e){return r.Z.distance(n,e.position)-r.Z.distance(n,t.position)})),this.ctx.reset(),this.ctx.beginPath(),this.ctx.circle(this.cx,this.cy,this.radius),this.ctx.stroke(),this.ctx.closePath(),this.reordered=!0}else{var i=(0,o.M)()*Math.PI*2,s=(0,o.M)()*this.radius,u=new r.Z(this.cx+Math.cos(i)*s,this.cy+Math.sin(i)*s),l=0,h=!0,c=0,f=this.radius-r.Z.distance(new r.Z(this.cx,this.cy),u);if(this.circles.length){var p,v=[],y=function(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return a(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,u=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return s=t.done,t},e:function(t){u=!0,o=t},f:function(){try{s||null==n.return||n.return()}finally{if(u)throw o}}}}(this.circles);try{for(y.s();!(p=y.n()).done;){var d=p.value,m=r.Z.distance(d.position,u);m<=d.radius?h=!1:v.push(m-d.radius)}}catch(t){y.e(t)}finally{y.f()}v.sort((function(t,e){return t-e})),l=v[0],h&&l>f&&(l=f,c=0)}else l=f;(l>this.vs.maxRadius.value||l<this.vs.minRadius.value)&&(h=!1),h&&l>0&&(0!==c&&(this.ctx.strokeStyle="#000",this.ctx.beginPath(),this.ctx.moveTo(u.x,u.y),this.ctx.lineTo(u.x+Math.cos(c)*l,u.y+Math.sin(c)*l),this.ctx.stroke(),this.ctx.closePath()),this.circles.push({position:u,radius:l}),this.ctx.beginPath(),this.ctx.circle(u.x,u.y,l),this.ctx.stroke(),this.ctx.closePath())}}}])&&h(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),y}(i.v);(y="generateGCode")in(v=d)?Object.defineProperty(v,y,{value:false,enumerable:!0,configurable:!0,writable:!0}):v[y]=false},139:(t,e,n)=>{"use strict";n.d(e,{Z:()=>c});var r=n(204),i=n(109);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function a(t,e){return a=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},a(t,e)}function l(t,e){if(e&&("object"===o(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function h(t){return h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},h(t)}var c=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&a(t,e)}(f,t);var e,n,r,o,c=(r=f,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=h(r);if(o){var n=h(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return l(this,t)});function f(){return s(this,f),c.apply(this,arguments)}return e=f,(n=[{key:"init",value:function(){this.vs.cols=new i.Z({initialValue:3,min:1,max:10,step:1,disableRandomize:!0}),this.vs.rows=new i.Z({initialValue:4,min:1,max:10,step:1,disableRandomize:!0}),this.vs.gap=new i.Z({initialValue:20,min:0,max:100,step:1,disableRandomize:!0}),this.vs.outerGap=new i.Z({initialValue:50,min:0,max:250,step:1,disableRandomize:!0})}},{key:"initDraw",value:function(){var t=this.vs.cols.value,e=this.vs.rows.value,n=this.vs.gap.value,r=this.vs.outerGap.value;this.effectiveWidth=this.cw-2*r,this.effectiveHeight=this.ch-2*r;for(var i=(this.effectiveWidth-n*(t-1))/t,o=r,s=r,u=0;u<e;u++){o=r;for(var a=0;a<t;a++)this.ctx.beginPath(),this.ctx.rect(o,s,i,i),this.ctx.stroke(),this.ctx.closePath(),o+=i+n;s+=i+n}}},{key:"draw",value:function(t){}}])&&u(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),f}(r.v)},97:(t,e,n)=>{"use strict";n.d(e,{Z:()=>y});var r=n(204),i=n(393),o=n(497),s=n(109);function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function h(t,e){return h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},h(t,e)}function c(t,e){if(e&&("object"===u(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return f(t)}function f(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function p(t){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},p(t)}function v(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var y=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&h(t,e)}(d,t);var e,n,r,u,y=(r=d,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=p(r);if(u){var n=p(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return c(this,t)});function d(){var t;a(this,d);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return v(f(t=y.call.apply(y,[this].concat(n))),"drawCount",0),v(f(t),"maxDrawCount",0),t}return e=d,(n=[{key:"init",value:function(){this.vs.speedUp=new s.Z({initialValue:10,min:1,max:100,step:1,disableRandomize:!0}),this.vs.seed=new s.Z({initialValue:1e3,min:1e3,max:5e3,step:1}),this.vs.cols=new s.Z({initialValue:90,min:1,max:200,step:1,disableRandomize:!0}),this.vs.rows=new s.Z({initialValue:90,min:1,max:200,step:1,disableRandomize:!0}),this.vs.shape=new s.Z({initialValue:1,min:0,max:1,step:1,disableRandomize:!0}),this.vs.size=new s.Z({initialValue:180,min:1,max:750,step:1}),this.vs.perlinDiv=new s.Z({initialValue:25,min:1,max:100,step:1,disableRandomize:!0}),this.vs.offsetX=new s.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.offsetY=new s.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.outerGap=new s.Z({initialValue:120,min:0,max:250,step:1,disableRandomize:!0})}},{key:"initDraw",value:function(){(0,o.b)(this.vs.seed.value),(0,i.ii)(this.vs.seed.value);var t=this.vs.cols.value,e=this.vs.rows.value,n=this.vs.outerGap.value;this.effectiveWidth=this.cw-2*n,this.effectiveHeight=this.ch-2*n,this.drawCount=0,this.maxDrawCount=e*t}},{key:"draw",value:function(t){if(!(this.drawCount>=this.maxDrawCount)){var e=this.vs.speedUp.value,n=this.vs.cols.value,r=this.vs.rows.value,o=this.vs.outerGap.value,s=this.vs.size.value,u=this.vs.shape.value,a=this.vs.perlinDiv.value,l=this.vs.offsetX.value,h=this.vs.offsetY.value,c=this.effectiveWidth/n,f=this.effectiveHeight/r;0===u&&(e=Math.max(1,Math.floor(e/4)));for(var p=0;p<this.vs.speedUp.value;p++){var v=this.drawCount+p;if(v>=this.maxDrawCount)break;var y=v%n,d=Math.floor(v/n),m=o+y*c,P=o+d*f,g=Math.abs((0,i.tv)((y+l)/a,(d+h)/a))*s;this.ctx.beginPath(),0===u?this.ctx.circle(m,P,g):1===u&&this.ctx.rect(m-g/2,P-g/2,g,g),this.ctx.stroke(),this.ctx.closePath()}this.drawCount+=this.vs.speedUp.value}}}])&&l(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),d}(r.v)},165:(t,e,n)=>{"use strict";n.d(e,{Z:()=>y});var r=n(204),i=n(393),o=n(497),s=n(109);function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function h(t,e){return h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},h(t,e)}function c(t,e){if(e&&("object"===u(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return f(t)}function f(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function p(t){return p=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},p(t)}function v(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var y=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&h(t,e)}(d,t);var e,n,r,u,y=(r=d,u=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=p(r);if(u){var n=p(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return c(this,t)});function d(){var t;a(this,d);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return v(f(t=y.call.apply(y,[this].concat(n))),"drawCount",0),v(f(t),"maxDrawCount",0),t}return e=d,(n=[{key:"init",value:function(){this.vs.speedUp=new s.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.seed=new s.Z({initialValue:9275,min:1e3,max:5e3,step:1}),this.vs.cols=new s.Z({initialValue:120,min:1,max:300,step:1}),this.vs.rows=new s.Z({initialValue:150,min:1,max:300,step:1}),this.vs.size=new s.Z({initialValue:5,min:1,max:80,step:1}),this.vs.perlinDivX=new s.Z({initialValue:75,min:1,max:100,step:1}),this.vs.perlinDivY=new s.Z({initialValue:75,min:1,max:100,step:1}),this.vs.perlinOffsetX=new s.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.perlinOffsetY=new s.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.drawOffsetStart=new s.Z({initialValue:10,min:-50,max:50,step:1}),this.vs.drawOffsetEnd=new s.Z({initialValue:-45,min:-50,max:50,step:1}),this.vs.outerGap=new s.Z({initialValue:180,min:0,max:250,step:1,disableRandomize:!0})}},{key:"initDraw",value:function(){(0,o.b)(this.vs.seed.value),(0,i.ii)(this.vs.seed.value);var t=this.vs.cols.value,e=this.vs.rows.value,n=this.vs.outerGap.value;this.effectiveWidth=this.cw-2*n,this.effectiveHeight=this.ch-2*n,this.drawCount=0,this.maxDrawCount=e*t}},{key:"draw",value:function(t){if(!(this.drawCount>=this.maxDrawCount)){for(var e=this.vs.cols.value,n=this.vs.rows.value,r=this.vs.outerGap.value,o=this.vs.size.value,s=this.vs.perlinDivX.value,u=this.vs.perlinDivY.value,a=this.vs.perlinOffsetX.value,l=this.vs.perlinOffsetY.value,h=this.vs.drawOffsetStart.value,c=this.vs.drawOffsetEnd.value,f=this.effectiveWidth/e,p=this.effectiveHeight/n,v=o/(1+(this.vs.size.max-(e+n)/2)/500),y=0;y<this.vs.speedUp.value;y++){var d=this.drawCount+y;if(d>=this.maxDrawCount)break;var m=d%e,P=Math.floor(d/e),g=r+m*f,x=r+P*p,_=(0,i.tv)((m+a)/s,(P+l)/u)*Math.PI*2,b={x:g+Math.cos(_)*(v+h),y:x+Math.sin(_)*(v+h)},w={x:g+Math.cos(_+Math.PI)*(v+c),y:x+Math.sin(_+Math.PI)*(v+c)};this.ctx.beginPath(),d%2==0?(this.ctx.moveTo(b.x,b.y),this.ctx.lineTo(w.x,w.y)):(this.ctx.moveTo(w.x,w.y),this.ctx.lineTo(b.x,b.y)),this.ctx.stroke(),this.ctx.closePath()}this.drawCount+=this.vs.speedUp.value}}}])&&l(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),d}(r.v)},52:(t,e,n)=>{"use strict";n.d(e,{Z:()=>m});var r=n(323),i=n(204),o=n(561),s=n(497),u=n(109);function a(t){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a(t)}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},f(t,e)}function p(t,e){if(e&&("object"===a(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return v(t)}function v(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function y(t){return y=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},y(t)}function d(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var m=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&f(t,e)}(P,t);var e,n,i,a,m=(i=P,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=y(i);if(a){var n=y(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return p(this,t)});function P(){var t;h(this,P);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return d(v(t=m.call.apply(m,[this].concat(n))),"branchLevel",0),d(v(t),"drawnCurrentStems",0),d(v(t),"currentStems",[]),d(v(t),"nextStems",[]),t}return e=P,(n=[{key:"init",value:function(){this.vs.seed=new u.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.initBranchLength=new u.Z({initialValue:80,min:50,max:100,step:1}),this.vs.branchLengthFalloff=new u.Z({initialValue:.83,min:.4,max:.9,step:.005}),this.vs.splitProbability=new u.Z({initialValue:.6,min:0,max:1,step:.005}),this.vs.pruneProbability=new u.Z({initialValue:.95,min:0,max:1,step:.05}),this.vs.bloomProbability=new u.Z({initialValue:.6,min:0,max:1,step:.05}),this.vs.bloomSize=new u.Z({initialValue:3,min:2,max:12,step:1}),this.vs.splitAngleRange=new u.Z({initialValue:.44,min:0,max:Math.PI/2,step:Math.PI/256}),this.vs.splitAngleBranchLevelMulti=new u.Z({initialValue:.1,min:-1,max:1,step:.05}),this.vs.splitAngleMinPercent=new u.Z({initialValue:.5,min:0,max:1,step:.05}),this.vs.chaosFactor=new u.Z({initialValue:.85,min:0,max:2,step:.01}),this.vs.splitCount=new u.Z({initialValue:2,min:2,max:5,step:1,disableRandomize:!0}),this.vs.maxBranchLevels=new u.Z({initialValue:14,min:1,max:24,step:1,disableRandomize:!0})}},{key:"initDraw",value:function(){(0,s.b)(this.vs.seed.value),this.branchLevel=0,this.drawnCurrentStems=0,this.currentStems=[],this.nextStems=[];var t=this.vs.branchLengthFalloff.value,e=this.vs.initBranchLength.value/t,n=-Math.PI/2,i=this.drawBranch(new r.Z(this.cx,1.2*this.cy),n,e);this.currentStems.push({position:i,angle:n,length:e})}},{key:"draw",value:function(t){if(!(this.branchLevel>this.vs.maxBranchLevels.value))if(this.drawnCurrentStems>=this.currentStems.length)this.currentStems=function(t){if(Array.isArray(t))return l(t)}(C=this.nextStems)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(C)||function(t,e){if(t){if("string"==typeof t)return l(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(t,e):void 0}}(C)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),this.nextStems=[],this.branchLevel++,this.drawnCurrentStems=0;else{var e=this.currentStems[this.drawnCurrentStems],n=this.vs.branchLengthFalloff.value,r=this.branchLevel<3?1:this.vs.splitProbability.value,i=this.vs.splitAngleRange.value,u=this.vs.splitAngleBranchLevelMulti.value,a=this.vs.splitAngleMinPercent.value,h=this.vs.pruneProbability.value,c=this.vs.bloomProbability.value,f=this.vs.chaosFactor.value;if((0,s.M)()<=r)for(var p=this.vs.splitCount.value,v=i*(1+u*this.branchLevel/4),y=v*a+(0,o.EA)(v*(1-a))+(0,o.Qy)(f)*Math.PI/8,d=2*y/p,m=0;m<p;m++){var P=e.length*n*(1+(0,o.Qy)(f/8)),g=e.angle-y/2+d*m+(0,o.Qy)(Math.PI*f/10),x=this.drawBranch(e.position,g,P);this.nextStems.push({position:x,angle:g,length:P})}else{var _=e.angle+(0,o.Qy)(Math.PI*f/10),b=e.length*n*(1+(0,o.Qy)(f/8)),w=this.drawBranch(e.position,_,b);this.branchLevel!==this.vs.maxBranchLevels.value&&(0,s.M)()>h?this.nextStems.push({position:w,angle:_,length:b}):(0,s.M)()<c&&this.drawBloom(w,_)}this.drawnCurrentStems++}var C}},{key:"drawBranch",value:function(t,e,n){this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y);var i=t.clone().add(new r.Z(Math.cos(e)*n,Math.sin(e)*n));return this.ctx.lineTo(i.x,i.y),this.ctx.stroke(),this.ctx.closePath(),i}},{key:"drawBloom",value:function(t,e){var n=this.vs.bloomSize.value;this.ctx.beginPath(),this.ctx.circle(t.x+Math.cos(e)*n,t.y+Math.sin(e)*n,n),this.ctx.stroke(),this.ctx.closePath()}}])&&c(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),P}(i.v)},286:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(323);function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var s=function(){function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,"value",new r.Z),o(this,"offsetPhase",-Math.PI/2),"function"==typeof e.speed?(this.speedFunc=e.speed,this.speed=this.speedFunc(0)):this.speed=e.speed||Math.PI/180,void 0===e.radius)this.radius=new r.Z(1,1);else if("function"==typeof e.radius){this.radiusFunc=e.radius;var n=this.radiusFunc(0);this.radius="number"==typeof n?new r.Z(n,n):n}else this.radius="number"==typeof e.radius?new r.Z(e.radius,e.radius):e.radius.clone();this.offset=e.offset?e.offset.clone():new r.Z(0,0),this.offsetPhase=e.offsetPhase||0,this.phase=e.phase||0,this.theta=new r.Z(this.phase,this.phase),this.process()}var e,n;return e=t,(n=[{key:"x",get:function(){return this.value.x}},{key:"y",get:function(){return this.value.y}},{key:"reset",value:function(){this.theta=new r.Z(this.phase,this.phase)}},{key:"step",value:function(t){if(this.speedFunc){var e=this.speedFunc(t);"number"!=typeof e||isNaN(e)||(this.speed=e)}if(this.radiusFunc){var n=this.radiusFunc(t);this.radius="number"==typeof n?new r.Z(n,n):n}this.theta.x=this.theta.x+this.speed,this.theta.y=this.theta.y+this.speed,this.process()}},{key:"process",value:function(){this.value.x=this.offset.x+Math.cos(this.offsetPhase+this.theta.x)*this.radius.x,this.value.y=this.offset.y+Math.sin(this.offsetPhase+this.theta.y)*this.radius.y,isNaN(this.value.x)}}])&&i(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}()},109:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(561);function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=0,s=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.name=e.name||"Var-".concat(o++),this.min=e.min,this.max=e.max,this.step=e.step||.01,this._value=e.initialValue||e.min,this._disableRandomize=e.disableRandomize||!1}var e,n;return e=t,n=[{key:"value",get:function(){return this._value},set:function(t){this._value=(0,r.re)(t,this.max,this.min)}},{key:"setValue",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.value=t,e&&(this.inputElem.value=String(this.value))}},{key:"randomize",value:function(){if(!this._disableRandomize){var t=Math.round((this.max-this.min)/this.step),e=this.min+(0,r.c4)(t)*this.step;this.step>=1&&(e=Math.round(e)),this.setValue(e,!0)}}}],n&&i(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}()},393:(t,e,n)=>{"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n.d(e,{ii:()=>c,tv:()=>v});var s=i((function t(e,n,r){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,"dot2",(function(t,e){return i.x*t+i.y*e})),o(this,"dot3",(function(t,e,n){return i.x*t+i.y*e+i.z*n})),this.x=e,this.y=n,this.z=r})),u=[new s(1,1,0),new s(-1,1,0),new s(1,-1,0),new s(-1,-1,0),new s(1,0,1),new s(-1,0,1),new s(1,0,-1),new s(-1,0,-1),new s(0,1,1),new s(0,-1,1),new s(0,1,-1),new s(0,-1,-1)],a=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],l=new Array(512),h=new Array(512),c=function(t){t>0&&t<1&&(t*=65536),(t=Math.floor(t))<256&&(t|=t<<8);for(var e=0;e<256;e++){var n=1&e?a[e]^255&t:a[e]^t>>8&255;l[e]=l[e+256]=n,h[e]=h[e+256]=u[n%12]}};c(0),Math.sqrt(3),Math.sqrt(3);var f=function(t){return t*t*t*(t*(6*t-15)+10)},p=function(t,e,n){return(1-n)*t+n*e},v=function(t,e){var n=Math.floor(t),r=Math.floor(e);t-=n,e-=r;var i=h[(n&=255)+l[r&=255]].dot2(t,e),o=h[n+l[r+1]].dot2(t,e-1),s=h[n+1+l[r]].dot2(t-1,e),u=h[n+1+l[r+1]].dot2(t-1,e-1),a=f(t);return p(p(i,s,a),p(o,u,a),f(e))}},561:(t,e,n)=>{"use strict";n.d(e,{EA:()=>o,Qy:()=>u,c4:()=>i,rO:()=>s,re:()=>a});var r=n(497),i=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Math.round((0,r.M)()*(t-e)+e)},o=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return(0,r.M)()*(t-e)+e},s=function(t){return Math.round((0,r.M)()*(2*t)-t)},u=function(t){return(0,r.M)()*(2*t)-t},a=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return t<n?e:t>e?n:t}},132:(t,e,n)=>{"use strict";n.d(e,{Bj:()=>a,CS:()=>o,S3:()=>u,mb:()=>s});var r=n(323),i=1e-6,o=function(t,e,n,i,o){return n%=2*Math.PI,i%=2*Math.PI,{start:new r.Z(o*Math.cos(n)+t,o*Math.sin(n)+e),end:new r.Z(o*Math.cos(i)+t,o*Math.sin(i)+e)}},s=function(t,e,n){t=t.clone(),e=e.clone(),n=n.clone();var r=Math.atan2(e.y-t.y,e.x-t.x),i=Math.atan2(n.y-t.y,n.x-t.x),o=t.subtract(e).magnitude();return i===r&&(i+=2*Math.PI),{start:r,end:i,radius:o}},u=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;if(Math.abs(t-e)<i)return!0;var r=Math.abs(t),o=Math.abs(e),s=Math.abs(t-e);return t==e||(0===t||0===e||s<Number.MIN_VALUE?s<n*Number.MIN_VALUE:s/(r+o)<n)},a=function(t,e){return u(t.x,e.x)&&u(t.y,e.y)}},497:(t,e,n)=>{"use strict";n.d(e,{M:()=>u,b:()=>s});var r=123456789,i=987654321,o=4294967295,s=function(t){r=123456789+t&o,i=987654321-t&o},u=function(){return(((i=36969*(65535&i)+(i>>16)&o)<<16)+(65535&(r=18e3*(65535&r)+(r>>16)&o))>>>0)/4294967296};s(0)},486:function(t,e,n){var r;t=n.nmd(t),function(){var i,o="Expected a function",s="__lodash_hash_undefined__",u="__lodash_placeholder__",a=32,l=128,h=1/0,c=9007199254740991,f=NaN,p=4294967295,v=[["ary",l],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",a],["partialRight",64],["rearg",256]],y="[object Arguments]",d="[object Array]",m="[object Boolean]",P="[object Date]",g="[object Error]",x="[object Function]",_="[object GeneratorFunction]",b="[object Map]",w="[object Number]",C="[object Object]",I="[object Promise]",O="[object RegExp]",E="[object Set]",T="[object String]",S="[object Symbol]",L="[object WeakMap]",A="[object ArrayBuffer]",M="[object DataView]",N="[object Float32Array]",X="[object Float64Array]",Y="[object Int8Array]",R="[object Int16Array]",D="[object Int32Array]",k="[object Uint8Array]",B="[object Uint8ClampedArray]",j="[object Uint16Array]",Z="[object Uint32Array]",F=/\b__p \+= '';/g,W=/\b(__p \+=) '' \+/g,z=/(__e\(.*?\)|\b__t\)) \+\n'';/g,V=/&(?:amp|lt|gt|quot|#39);/g,q=/[&<>"']/g,U=RegExp(V.source),H=RegExp(q.source),G=/<%-([\s\S]+?)%>/g,J=/<%([\s\S]+?)%>/g,$=/<%=([\s\S]+?)%>/g,Q=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,K=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,et=/[\\^$.*+?()[\]{}|]/g,nt=RegExp(et.source),rt=/^\s+/,it=/\s/,ot=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,st=/\{\n\/\* \[wrapped with (.+)\] \*/,ut=/,? & /,at=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,lt=/[()=,{}\[\]\/\s]/,ht=/\\(\\)?/g,ct=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ft=/\w*$/,pt=/^[-+]0x[0-9a-f]+$/i,vt=/^0b[01]+$/i,yt=/^\[object .+?Constructor\]$/,dt=/^0o[0-7]+$/i,mt=/^(?:0|[1-9]\d*)$/,Pt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,gt=/($^)/,xt=/['\n\r\u2028\u2029\\]/g,_t="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",bt="a-z\\xdf-\\xf6\\xf8-\\xff",wt="A-Z\\xc0-\\xd6\\xd8-\\xde",Ct="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",It="["+Ct+"]",Ot="["+_t+"]",Et="\\d+",Tt="["+bt+"]",St="[^\\ud800-\\udfff"+Ct+Et+"\\u2700-\\u27bf"+bt+wt+"]",Lt="\\ud83c[\\udffb-\\udfff]",At="[^\\ud800-\\udfff]",Mt="(?:\\ud83c[\\udde6-\\uddff]){2}",Nt="[\\ud800-\\udbff][\\udc00-\\udfff]",Xt="["+wt+"]",Yt="(?:"+Tt+"|"+St+")",Rt="(?:"+Xt+"|"+St+")",Dt="(?:['’](?:d|ll|m|re|s|t|ve))?",kt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Bt="(?:"+Ot+"|"+Lt+")?",jt="[\\ufe0e\\ufe0f]?",Zt=jt+Bt+"(?:\\u200d(?:"+[At,Mt,Nt].join("|")+")"+jt+Bt+")*",Ft="(?:"+["[\\u2700-\\u27bf]",Mt,Nt].join("|")+")"+Zt,Wt="(?:"+[At+Ot+"?",Ot,Mt,Nt,"[\\ud800-\\udfff]"].join("|")+")",zt=RegExp("['’]","g"),Vt=RegExp(Ot,"g"),qt=RegExp(Lt+"(?="+Lt+")|"+Wt+Zt,"g"),Ut=RegExp([Xt+"?"+Tt+"+"+Dt+"(?="+[It,Xt,"$"].join("|")+")",Rt+"+"+kt+"(?="+[It,Xt+Yt,"$"].join("|")+")",Xt+"?"+Yt+"+"+Dt,Xt+"+"+kt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Et,Ft].join("|"),"g"),Ht=RegExp("[\\u200d\\ud800-\\udfff"+_t+"\\ufe0e\\ufe0f]"),Gt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Jt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],$t=-1,Qt={};Qt[N]=Qt[X]=Qt[Y]=Qt[R]=Qt[D]=Qt[k]=Qt[B]=Qt[j]=Qt[Z]=!0,Qt[y]=Qt[d]=Qt[A]=Qt[m]=Qt[M]=Qt[P]=Qt[g]=Qt[x]=Qt[b]=Qt[w]=Qt[C]=Qt[O]=Qt[E]=Qt[T]=Qt[L]=!1;var Kt={};Kt[y]=Kt[d]=Kt[A]=Kt[M]=Kt[m]=Kt[P]=Kt[N]=Kt[X]=Kt[Y]=Kt[R]=Kt[D]=Kt[b]=Kt[w]=Kt[C]=Kt[O]=Kt[E]=Kt[T]=Kt[S]=Kt[k]=Kt[B]=Kt[j]=Kt[Z]=!0,Kt[g]=Kt[x]=Kt[L]=!1;var te={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ee=parseFloat,ne=parseInt,re="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,ie="object"==typeof self&&self&&self.Object===Object&&self,oe=re||ie||Function("return this")(),se=e&&!e.nodeType&&e,ue=se&&t&&!t.nodeType&&t,ae=ue&&ue.exports===se,le=ae&&re.process,he=function(){try{return ue&&ue.require&&ue.require("util").types||le&&le.binding&&le.binding("util")}catch(t){}}(),ce=he&&he.isArrayBuffer,fe=he&&he.isDate,pe=he&&he.isMap,ve=he&&he.isRegExp,ye=he&&he.isSet,de=he&&he.isTypedArray;function me(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Pe(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var s=t[i];e(r,s,n(s),t)}return r}function ge(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function xe(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function _e(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function be(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var s=t[n];e(s,n,t)&&(o[i++]=s)}return o}function we(t,e){return!(null==t||!t.length)&&Ne(t,e,0)>-1}function Ce(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Ie(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function Oe(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function Ee(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function Te(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function Se(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var Le=De("length");function Ae(t,e,n){var r;return n(t,(function(t,n,i){if(e(t,n,i))return r=n,!1})),r}function Me(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function Ne(t,e,n){return e==e?function(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):Me(t,Ye,n)}function Xe(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function Ye(t){return t!=t}function Re(t,e){var n=null==t?0:t.length;return n?je(t,e)/n:f}function De(t){return function(e){return null==e?i:e[t]}}function ke(t){return function(e){return null==t?i:t[e]}}function Be(t,e,n,r,i){return i(t,(function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)})),n}function je(t,e){for(var n,r=-1,o=t.length;++r<o;){var s=e(t[r]);s!==i&&(n=n===i?s:n+s)}return n}function Ze(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function Fe(t){return t?t.slice(0,un(t)+1).replace(rt,""):t}function We(t){return function(e){return t(e)}}function ze(t,e){return Ie(e,(function(e){return t[e]}))}function Ve(t,e){return t.has(e)}function qe(t,e){for(var n=-1,r=t.length;++n<r&&Ne(e,t[n],0)>-1;);return n}function Ue(t,e){for(var n=t.length;n--&&Ne(e,t[n],0)>-1;);return n}function He(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}var Ge=ke({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Je=ke({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function $e(t){return"\\"+te[t]}function Qe(t){return Ht.test(t)}function Ke(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function tn(t,e){return function(n){return t(e(n))}}function en(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var s=t[n];s!==e&&s!==u||(t[n]=u,o[i++]=n)}return o}function nn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function rn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function on(t){return Qe(t)?function(t){for(var e=qt.lastIndex=0;qt.test(t);)++e;return e}(t):Le(t)}function sn(t){return Qe(t)?function(t){return t.match(qt)||[]}(t):function(t){return t.split("")}(t)}function un(t){for(var e=t.length;e--&&it.test(t.charAt(e)););return e}var an=ke({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),ln=function t(e){var n,r=(e=null==e?oe:ln.defaults(oe.Object(),e,ln.pick(oe,Jt))).Array,it=e.Date,_t=e.Error,bt=e.Function,wt=e.Math,Ct=e.Object,It=e.RegExp,Ot=e.String,Et=e.TypeError,Tt=r.prototype,St=bt.prototype,Lt=Ct.prototype,At=e["__core-js_shared__"],Mt=St.toString,Nt=Lt.hasOwnProperty,Xt=0,Yt=(n=/[^.]+$/.exec(At&&At.keys&&At.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Rt=Lt.toString,Dt=Mt.call(Ct),kt=oe._,Bt=It("^"+Mt.call(Nt).replace(et,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),jt=ae?e.Buffer:i,Zt=e.Symbol,Ft=e.Uint8Array,Wt=jt?jt.allocUnsafe:i,qt=tn(Ct.getPrototypeOf,Ct),Ht=Ct.create,te=Lt.propertyIsEnumerable,re=Tt.splice,ie=Zt?Zt.isConcatSpreadable:i,se=Zt?Zt.iterator:i,ue=Zt?Zt.toStringTag:i,le=function(){try{var t=lo(Ct,"defineProperty");return t({},"",{}),t}catch(t){}}(),he=e.clearTimeout!==oe.clearTimeout&&e.clearTimeout,Le=it&&it.now!==oe.Date.now&&it.now,ke=e.setTimeout!==oe.setTimeout&&e.setTimeout,hn=wt.ceil,cn=wt.floor,fn=Ct.getOwnPropertySymbols,pn=jt?jt.isBuffer:i,vn=e.isFinite,yn=Tt.join,dn=tn(Ct.keys,Ct),mn=wt.max,Pn=wt.min,gn=it.now,xn=e.parseInt,_n=wt.random,bn=Tt.reverse,wn=lo(e,"DataView"),Cn=lo(e,"Map"),In=lo(e,"Promise"),On=lo(e,"Set"),En=lo(e,"WeakMap"),Tn=lo(Ct,"create"),Sn=En&&new En,Ln={},An=Bo(wn),Mn=Bo(Cn),Nn=Bo(In),Xn=Bo(On),Yn=Bo(En),Rn=Zt?Zt.prototype:i,Dn=Rn?Rn.valueOf:i,kn=Rn?Rn.toString:i;function Bn(t){if(nu(t)&&!Vs(t)&&!(t instanceof Wn)){if(t instanceof Fn)return t;if(Nt.call(t,"__wrapped__"))return jo(t)}return new Fn(t)}var jn=function(){function t(){}return function(e){if(!eu(e))return{};if(Ht)return Ht(e);t.prototype=e;var n=new t;return t.prototype=i,n}}();function Zn(){}function Fn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=i}function Wn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function zn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Vn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function qn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Un(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new qn;++e<n;)this.add(t[e])}function Hn(t){var e=this.__data__=new Vn(t);this.size=e.size}function Gn(t,e){var n=Vs(t),r=!n&&zs(t),i=!n&&!r&&Gs(t),o=!n&&!r&&!i&&hu(t),s=n||r||i||o,u=s?Ze(t.length,Ot):[],a=u.length;for(var l in t)!e&&!Nt.call(t,l)||s&&("length"==l||i&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||mo(l,a))||u.push(l);return u}function Jn(t){var e=t.length;return e?t[qr(0,e-1)]:i}function $n(t,e){return Xo(Ei(t),sr(e,0,t.length))}function Qn(t){return Xo(Ei(t))}function Kn(t,e,n){(n!==i&&!Zs(t[e],n)||n===i&&!(e in t))&&ir(t,e,n)}function tr(t,e,n){var r=t[e];Nt.call(t,e)&&Zs(r,n)&&(n!==i||e in t)||ir(t,e,n)}function er(t,e){for(var n=t.length;n--;)if(Zs(t[n][0],e))return n;return-1}function nr(t,e,n,r){return cr(t,(function(t,i,o){e(r,t,n(t),o)})),r}function rr(t,e){return t&&Ti(e,Mu(e),t)}function ir(t,e,n){"__proto__"==e&&le?le(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function or(t,e){for(var n=-1,o=e.length,s=r(o),u=null==t;++n<o;)s[n]=u?i:Eu(t,e[n]);return s}function sr(t,e,n){return t==t&&(n!==i&&(t=t<=n?t:n),e!==i&&(t=t>=e?t:e)),t}function ur(t,e,n,r,o,s){var u,a=1&e,l=2&e,h=4&e;if(n&&(u=o?n(t,r,o,s):n(t)),u!==i)return u;if(!eu(t))return t;var c=Vs(t);if(c){if(u=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&Nt.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!a)return Ei(t,u)}else{var f=fo(t),p=f==x||f==_;if(Gs(t))return _i(t,a);if(f==C||f==y||p&&!o){if(u=l||p?{}:vo(t),!a)return l?function(t,e){return Ti(t,co(t),e)}(t,function(t,e){return t&&Ti(e,Nu(e),t)}(u,t)):function(t,e){return Ti(t,ho(t),e)}(t,rr(u,t))}else{if(!Kt[f])return o?t:{};u=function(t,e,n){var r,i=t.constructor;switch(e){case A:return bi(t);case m:case P:return new i(+t);case M:return function(t,e){var n=e?bi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case N:case X:case Y:case R:case D:case k:case B:case j:case Z:return wi(t,n);case b:return new i;case w:case T:return new i(t);case O:return function(t){var e=new t.constructor(t.source,ft.exec(t));return e.lastIndex=t.lastIndex,e}(t);case E:return new i;case S:return r=t,Dn?Ct(Dn.call(r)):{}}}(t,f,a)}}s||(s=new Hn);var v=s.get(t);if(v)return v;s.set(t,u),uu(t)?t.forEach((function(r){u.add(ur(r,e,n,r,t,s))})):ru(t)&&t.forEach((function(r,i){u.set(i,ur(r,e,n,i,t,s))}));var d=c?i:(h?l?no:eo:l?Nu:Mu)(t);return ge(d||t,(function(r,i){d&&(r=t[i=r]),tr(u,i,ur(r,e,n,i,t,s))})),u}function ar(t,e,n){var r=n.length;if(null==t)return!r;for(t=Ct(t);r--;){var o=n[r],s=e[o],u=t[o];if(u===i&&!(o in t)||!s(u))return!1}return!0}function lr(t,e,n){if("function"!=typeof t)throw new Et(o);return Lo((function(){t.apply(i,n)}),e)}function hr(t,e,n,r){var i=-1,o=we,s=!0,u=t.length,a=[],l=e.length;if(!u)return a;n&&(e=Ie(e,We(n))),r?(o=Ce,s=!1):e.length>=200&&(o=Ve,s=!1,e=new Un(e));t:for(;++i<u;){var h=t[i],c=null==n?h:n(h);if(h=r||0!==h?h:0,s&&c==c){for(var f=l;f--;)if(e[f]===c)continue t;a.push(h)}else o(e,c,r)||a.push(h)}return a}Bn.templateSettings={escape:G,evaluate:J,interpolate:$,variable:"",imports:{_:Bn}},Bn.prototype=Zn.prototype,Bn.prototype.constructor=Bn,Fn.prototype=jn(Zn.prototype),Fn.prototype.constructor=Fn,Wn.prototype=jn(Zn.prototype),Wn.prototype.constructor=Wn,zn.prototype.clear=function(){this.__data__=Tn?Tn(null):{},this.size=0},zn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},zn.prototype.get=function(t){var e=this.__data__;if(Tn){var n=e[t];return n===s?i:n}return Nt.call(e,t)?e[t]:i},zn.prototype.has=function(t){var e=this.__data__;return Tn?e[t]!==i:Nt.call(e,t)},zn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Tn&&e===i?s:e,this},Vn.prototype.clear=function(){this.__data__=[],this.size=0},Vn.prototype.delete=function(t){var e=this.__data__,n=er(e,t);return!(n<0||(n==e.length-1?e.pop():re.call(e,n,1),--this.size,0))},Vn.prototype.get=function(t){var e=this.__data__,n=er(e,t);return n<0?i:e[n][1]},Vn.prototype.has=function(t){return er(this.__data__,t)>-1},Vn.prototype.set=function(t,e){var n=this.__data__,r=er(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},qn.prototype.clear=function(){this.size=0,this.__data__={hash:new zn,map:new(Cn||Vn),string:new zn}},qn.prototype.delete=function(t){var e=uo(this,t).delete(t);return this.size-=e?1:0,e},qn.prototype.get=function(t){return uo(this,t).get(t)},qn.prototype.has=function(t){return uo(this,t).has(t)},qn.prototype.set=function(t,e){var n=uo(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},Un.prototype.add=Un.prototype.push=function(t){return this.__data__.set(t,s),this},Un.prototype.has=function(t){return this.__data__.has(t)},Hn.prototype.clear=function(){this.__data__=new Vn,this.size=0},Hn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Hn.prototype.get=function(t){return this.__data__.get(t)},Hn.prototype.has=function(t){return this.__data__.has(t)},Hn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Vn){var r=n.__data__;if(!Cn||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new qn(r)}return n.set(t,e),this.size=n.size,this};var cr=Ai(gr),fr=Ai(xr,!0);function pr(t,e){var n=!0;return cr(t,(function(t,r,i){return n=!!e(t,r,i)})),n}function vr(t,e,n){for(var r=-1,o=t.length;++r<o;){var s=t[r],u=e(s);if(null!=u&&(a===i?u==u&&!lu(u):n(u,a)))var a=u,l=s}return l}function yr(t,e){var n=[];return cr(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}function dr(t,e,n,r,i){var o=-1,s=t.length;for(n||(n=yo),i||(i=[]);++o<s;){var u=t[o];e>0&&n(u)?e>1?dr(u,e-1,n,r,i):Oe(i,u):r||(i[i.length]=u)}return i}var mr=Mi(),Pr=Mi(!0);function gr(t,e){return t&&mr(t,e,Mu)}function xr(t,e){return t&&Pr(t,e,Mu)}function _r(t,e){return be(e,(function(e){return Qs(t[e])}))}function br(t,e){for(var n=0,r=(e=mi(e,t)).length;null!=t&&n<r;)t=t[ko(e[n++])];return n&&n==r?t:i}function wr(t,e,n){var r=e(t);return Vs(t)?r:Oe(r,n(t))}function Cr(t){return null==t?t===i?"[object Undefined]":"[object Null]":ue&&ue in Ct(t)?function(t){var e=Nt.call(t,ue),n=t[ue];try{t[ue]=i;var r=!0}catch(t){}var o=Rt.call(t);return r&&(e?t[ue]=n:delete t[ue]),o}(t):function(t){return Rt.call(t)}(t)}function Ir(t,e){return t>e}function Or(t,e){return null!=t&&Nt.call(t,e)}function Er(t,e){return null!=t&&e in Ct(t)}function Tr(t,e,n){for(var o=n?Ce:we,s=t[0].length,u=t.length,a=u,l=r(u),h=1/0,c=[];a--;){var f=t[a];a&&e&&(f=Ie(f,We(e))),h=Pn(f.length,h),l[a]=!n&&(e||s>=120&&f.length>=120)?new Un(a&&f):i}f=t[0];var p=-1,v=l[0];t:for(;++p<s&&c.length<h;){var y=f[p],d=e?e(y):y;if(y=n||0!==y?y:0,!(v?Ve(v,d):o(c,d,n))){for(a=u;--a;){var m=l[a];if(!(m?Ve(m,d):o(t[a],d,n)))continue t}v&&v.push(d),c.push(y)}}return c}function Sr(t,e,n){var r=null==(t=Oo(t,e=mi(e,t)))?t:t[ko($o(e))];return null==r?i:me(r,t,n)}function Lr(t){return nu(t)&&Cr(t)==y}function Ar(t,e,n,r,o){return t===e||(null==t||null==e||!nu(t)&&!nu(e)?t!=t&&e!=e:function(t,e,n,r,o,s){var u=Vs(t),a=Vs(e),l=u?d:fo(t),h=a?d:fo(e),c=(l=l==y?C:l)==C,f=(h=h==y?C:h)==C,p=l==h;if(p&&Gs(t)){if(!Gs(e))return!1;u=!0,c=!1}if(p&&!c)return s||(s=new Hn),u||hu(t)?Ki(t,e,n,r,o,s):function(t,e,n,r,i,o,s){switch(n){case M:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case A:return!(t.byteLength!=e.byteLength||!o(new Ft(t),new Ft(e)));case m:case P:case w:return Zs(+t,+e);case g:return t.name==e.name&&t.message==e.message;case O:case T:return t==e+"";case b:var u=Ke;case E:var a=1&r;if(u||(u=nn),t.size!=e.size&&!a)return!1;var l=s.get(t);if(l)return l==e;r|=2,s.set(t,e);var h=Ki(u(t),u(e),r,i,o,s);return s.delete(t),h;case S:if(Dn)return Dn.call(t)==Dn.call(e)}return!1}(t,e,l,n,r,o,s);if(!(1&n)){var v=c&&Nt.call(t,"__wrapped__"),x=f&&Nt.call(e,"__wrapped__");if(v||x){var _=v?t.value():t,I=x?e.value():e;return s||(s=new Hn),o(_,I,n,r,s)}}return!!p&&(s||(s=new Hn),function(t,e,n,r,o,s){var u=1&n,a=eo(t),l=a.length;if(l!=eo(e).length&&!u)return!1;for(var h=l;h--;){var c=a[h];if(!(u?c in e:Nt.call(e,c)))return!1}var f=s.get(t),p=s.get(e);if(f&&p)return f==e&&p==t;var v=!0;s.set(t,e),s.set(e,t);for(var y=u;++h<l;){var d=t[c=a[h]],m=e[c];if(r)var P=u?r(m,d,c,e,t,s):r(d,m,c,t,e,s);if(!(P===i?d===m||o(d,m,n,r,s):P)){v=!1;break}y||(y="constructor"==c)}if(v&&!y){var g=t.constructor,x=e.constructor;g==x||!("constructor"in t)||!("constructor"in e)||"function"==typeof g&&g instanceof g&&"function"==typeof x&&x instanceof x||(v=!1)}return s.delete(t),s.delete(e),v}(t,e,n,r,o,s))}(t,e,n,r,Ar,o))}function Mr(t,e,n,r){var o=n.length,s=o,u=!r;if(null==t)return!s;for(t=Ct(t);o--;){var a=n[o];if(u&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++o<s;){var l=(a=n[o])[0],h=t[l],c=a[1];if(u&&a[2]){if(h===i&&!(l in t))return!1}else{var f=new Hn;if(r)var p=r(h,c,l,t,e,f);if(!(p===i?Ar(c,h,3,r,f):p))return!1}}return!0}function Nr(t){return!(!eu(t)||(e=t,Yt&&Yt in e))&&(Qs(t)?Bt:yt).test(Bo(t));var e}function Xr(t){return"function"==typeof t?t:null==t?ia:"object"==typeof t?Vs(t)?Br(t[0],t[1]):kr(t):pa(t)}function Yr(t){if(!bo(t))return dn(t);var e=[];for(var n in Ct(t))Nt.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Rr(t,e){return t<e}function Dr(t,e){var n=-1,i=Us(t)?r(t.length):[];return cr(t,(function(t,r,o){i[++n]=e(t,r,o)})),i}function kr(t){var e=ao(t);return 1==e.length&&e[0][2]?Co(e[0][0],e[0][1]):function(n){return n===t||Mr(n,t,e)}}function Br(t,e){return go(t)&&wo(e)?Co(ko(t),e):function(n){var r=Eu(n,t);return r===i&&r===e?Tu(n,t):Ar(e,r,3)}}function jr(t,e,n,r,o){t!==e&&mr(e,(function(s,u){if(o||(o=new Hn),eu(s))!function(t,e,n,r,o,s,u){var a=To(t,n),l=To(e,n),h=u.get(l);if(h)Kn(t,n,h);else{var c=s?s(a,l,n+"",t,e,u):i,f=c===i;if(f){var p=Vs(l),v=!p&&Gs(l),y=!p&&!v&&hu(l);c=l,p||v||y?Vs(a)?c=a:Hs(a)?c=Ei(a):v?(f=!1,c=_i(l,!0)):y?(f=!1,c=wi(l,!0)):c=[]:ou(l)||zs(l)?(c=a,zs(a)?c=Pu(a):eu(a)&&!Qs(a)||(c=vo(l))):f=!1}f&&(u.set(l,c),o(c,l,r,s,u),u.delete(l)),Kn(t,n,c)}}(t,e,u,n,jr,r,o);else{var a=r?r(To(t,u),s,u+"",t,e,o):i;a===i&&(a=s),Kn(t,u,a)}}),Nu)}function Zr(t,e){var n=t.length;if(n)return mo(e+=e<0?n:0,n)?t[e]:i}function Fr(t,e,n){e=e.length?Ie(e,(function(t){return Vs(t)?function(e){return br(e,1===t.length?t[0]:t)}:t})):[ia];var r=-1;e=Ie(e,We(so()));var i=Dr(t,(function(t,n,i){var o=Ie(e,(function(e){return e(t)}));return{criteria:o,index:++r,value:t}}));return function(t,e){var r=t.length;for(t.sort((function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,o=e.criteria,s=i.length,u=n.length;++r<s;){var a=Ci(i[r],o[r]);if(a)return r>=u?a:a*("desc"==n[r]?-1:1)}return t.index-e.index}(t,e,n)}));r--;)t[r]=t[r].value;return t}(i)}function Wr(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var s=e[r],u=br(t,s);n(u,s)&&$r(o,mi(s,t),u)}return o}function zr(t,e,n,r){var i=r?Xe:Ne,o=-1,s=e.length,u=t;for(t===e&&(e=Ei(e)),n&&(u=Ie(t,We(n)));++o<s;)for(var a=0,l=e[o],h=n?n(l):l;(a=i(u,h,a,r))>-1;)u!==t&&re.call(u,a,1),re.call(t,a,1);return t}function Vr(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;mo(i)?re.call(t,i,1):li(t,i)}}return t}function qr(t,e){return t+cn(_n()*(e-t+1))}function Ur(t,e){var n="";if(!t||e<1||e>c)return n;do{e%2&&(n+=t),(e=cn(e/2))&&(t+=t)}while(e);return n}function Hr(t,e){return Ao(Io(t,e,ia),t+"")}function Gr(t){return Jn(Zu(t))}function Jr(t,e){var n=Zu(t);return Xo(n,sr(e,0,n.length))}function $r(t,e,n,r){if(!eu(t))return t;for(var o=-1,s=(e=mi(e,t)).length,u=s-1,a=t;null!=a&&++o<s;){var l=ko(e[o]),h=n;if("__proto__"===l||"constructor"===l||"prototype"===l)return t;if(o!=u){var c=a[l];(h=r?r(c,l,a):i)===i&&(h=eu(c)?c:mo(e[o+1])?[]:{})}tr(a,l,h),a=a[l]}return t}var Qr=Sn?function(t,e){return Sn.set(t,e),t}:ia,Kr=le?function(t,e){return le(t,"toString",{configurable:!0,enumerable:!1,value:ea(e),writable:!0})}:ia;function ti(t){return Xo(Zu(t))}function ei(t,e,n){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var s=r(o);++i<o;)s[i]=t[i+e];return s}function ni(t,e){var n;return cr(t,(function(t,r,i){return!(n=e(t,r,i))})),!!n}function ri(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;r<i;){var o=r+i>>>1,s=t[o];null!==s&&!lu(s)&&(n?s<=e:s<e)?r=o+1:i=o}return i}return ii(t,e,ia,n)}function ii(t,e,n,r){var o=0,s=null==t?0:t.length;if(0===s)return 0;for(var u=(e=n(e))!=e,a=null===e,l=lu(e),h=e===i;o<s;){var c=cn((o+s)/2),f=n(t[c]),p=f!==i,v=null===f,y=f==f,d=lu(f);if(u)var m=r||y;else m=h?y&&(r||p):a?y&&p&&(r||!v):l?y&&p&&!v&&(r||!d):!v&&!d&&(r?f<=e:f<e);m?o=c+1:s=c}return Pn(s,4294967294)}function oi(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var s=t[n],u=e?e(s):s;if(!n||!Zs(u,a)){var a=u;o[i++]=0===s?0:s}}return o}function si(t){return"number"==typeof t?t:lu(t)?f:+t}function ui(t){if("string"==typeof t)return t;if(Vs(t))return Ie(t,ui)+"";if(lu(t))return kn?kn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function ai(t,e,n){var r=-1,i=we,o=t.length,s=!0,u=[],a=u;if(n)s=!1,i=Ce;else if(o>=200){var l=e?null:Ui(t);if(l)return nn(l);s=!1,i=Ve,a=new Un}else a=e?[]:u;t:for(;++r<o;){var h=t[r],c=e?e(h):h;if(h=n||0!==h?h:0,s&&c==c){for(var f=a.length;f--;)if(a[f]===c)continue t;e&&a.push(c),u.push(h)}else i(a,c,n)||(a!==u&&a.push(c),u.push(h))}return u}function li(t,e){return null==(t=Oo(t,e=mi(e,t)))||delete t[ko($o(e))]}function hi(t,e,n,r){return $r(t,e,n(br(t,e)),r)}function ci(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?ei(t,r?0:o,r?o+1:i):ei(t,r?o+1:0,r?i:o)}function fi(t,e){var n=t;return n instanceof Wn&&(n=n.value()),Ee(e,(function(t,e){return e.func.apply(e.thisArg,Oe([t],e.args))}),n)}function pi(t,e,n){var i=t.length;if(i<2)return i?ai(t[0]):[];for(var o=-1,s=r(i);++o<i;)for(var u=t[o],a=-1;++a<i;)a!=o&&(s[o]=hr(s[o]||u,t[a],e,n));return ai(dr(s,1),e,n)}function vi(t,e,n){for(var r=-1,o=t.length,s=e.length,u={};++r<o;){var a=r<s?e[r]:i;n(u,t[r],a)}return u}function yi(t){return Hs(t)?t:[]}function di(t){return"function"==typeof t?t:ia}function mi(t,e){return Vs(t)?t:go(t,e)?[t]:Do(gu(t))}var Pi=Hr;function gi(t,e,n){var r=t.length;return n=n===i?r:n,!e&&n>=r?t:ei(t,e,n)}var xi=he||function(t){return oe.clearTimeout(t)};function _i(t,e){if(e)return t.slice();var n=t.length,r=Wt?Wt(n):new t.constructor(n);return t.copy(r),r}function bi(t){var e=new t.constructor(t.byteLength);return new Ft(e).set(new Ft(t)),e}function wi(t,e){var n=e?bi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Ci(t,e){if(t!==e){var n=t!==i,r=null===t,o=t==t,s=lu(t),u=e!==i,a=null===e,l=e==e,h=lu(e);if(!a&&!h&&!s&&t>e||s&&u&&l&&!a&&!h||r&&u&&l||!n&&l||!o)return 1;if(!r&&!s&&!h&&t<e||h&&n&&o&&!r&&!s||a&&n&&o||!u&&o||!l)return-1}return 0}function Ii(t,e,n,i){for(var o=-1,s=t.length,u=n.length,a=-1,l=e.length,h=mn(s-u,0),c=r(l+h),f=!i;++a<l;)c[a]=e[a];for(;++o<u;)(f||o<s)&&(c[n[o]]=t[o]);for(;h--;)c[a++]=t[o++];return c}function Oi(t,e,n,i){for(var o=-1,s=t.length,u=-1,a=n.length,l=-1,h=e.length,c=mn(s-a,0),f=r(c+h),p=!i;++o<c;)f[o]=t[o];for(var v=o;++l<h;)f[v+l]=e[l];for(;++u<a;)(p||o<s)&&(f[v+n[u]]=t[o++]);return f}function Ei(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function Ti(t,e,n,r){var o=!n;n||(n={});for(var s=-1,u=e.length;++s<u;){var a=e[s],l=r?r(n[a],t[a],a,n,t):i;l===i&&(l=t[a]),o?ir(n,a,l):tr(n,a,l)}return n}function Si(t,e){return function(n,r){var i=Vs(n)?Pe:nr,o=e?e():{};return i(n,t,so(r,2),o)}}function Li(t){return Hr((function(e,n){var r=-1,o=n.length,s=o>1?n[o-1]:i,u=o>2?n[2]:i;for(s=t.length>3&&"function"==typeof s?(o--,s):i,u&&Po(n[0],n[1],u)&&(s=o<3?i:s,o=1),e=Ct(e);++r<o;){var a=n[r];a&&t(e,a,r,s)}return e}))}function Ai(t,e){return function(n,r){if(null==n)return n;if(!Us(n))return t(n,r);for(var i=n.length,o=e?i:-1,s=Ct(n);(e?o--:++o<i)&&!1!==r(s[o],o,s););return n}}function Mi(t){return function(e,n,r){for(var i=-1,o=Ct(e),s=r(e),u=s.length;u--;){var a=s[t?u:++i];if(!1===n(o[a],a,o))break}return e}}function Ni(t){return function(e){var n=Qe(e=gu(e))?sn(e):i,r=n?n[0]:e.charAt(0),o=n?gi(n,1).join(""):e.slice(1);return r[t]()+o}}function Xi(t){return function(e){return Ee(Qu(zu(e).replace(zt,"")),t,"")}}function Yi(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=jn(t.prototype),r=t.apply(n,e);return eu(r)?r:n}}function Ri(t){return function(e,n,r){var o=Ct(e);if(!Us(e)){var s=so(n,3);e=Mu(e),n=function(t){return s(o[t],t,o)}}var u=t(e,n,r);return u>-1?o[s?e[u]:u]:i}}function Di(t){return to((function(e){var n=e.length,r=n,s=Fn.prototype.thru;for(t&&e.reverse();r--;){var u=e[r];if("function"!=typeof u)throw new Et(o);if(s&&!a&&"wrapper"==io(u))var a=new Fn([],!0)}for(r=a?r:n;++r<n;){var l=io(u=e[r]),h="wrapper"==l?ro(u):i;a=h&&xo(h[0])&&424==h[1]&&!h[4].length&&1==h[9]?a[io(h[0])].apply(a,h[3]):1==u.length&&xo(u)?a[l]():a.thru(u)}return function(){var t=arguments,r=t[0];if(a&&1==t.length&&Vs(r))return a.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}}))}function ki(t,e,n,o,s,u,a,h,c,f){var p=e&l,v=1&e,y=2&e,d=24&e,m=512&e,P=y?i:Yi(t);return function i(){for(var l=arguments.length,g=r(l),x=l;x--;)g[x]=arguments[x];if(d)var _=oo(i),b=He(g,_);if(o&&(g=Ii(g,o,s,d)),u&&(g=Oi(g,u,a,d)),l-=b,d&&l<f){var w=en(g,_);return Vi(t,e,ki,i.placeholder,n,g,w,h,c,f-l)}var C=v?n:this,I=y?C[t]:t;return l=g.length,h?g=Eo(g,h):m&&l>1&&g.reverse(),p&&c<l&&(g.length=c),this&&this!==oe&&this instanceof i&&(I=P||Yi(I)),I.apply(C,g)}}function Bi(t,e){return function(n,r){return function(t,e,n,r){return gr(t,(function(t,i,o){e(r,n(t),i,o)})),r}(n,t,e(r),{})}}function ji(t,e){return function(n,r){var o;if(n===i&&r===i)return e;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=ui(n),r=ui(r)):(n=si(n),r=si(r)),o=t(n,r)}return o}}function Zi(t){return to((function(e){return e=Ie(e,We(so())),Hr((function(n){var r=this;return t(e,(function(t){return me(t,r,n)}))}))}))}function Fi(t,e){var n=(e=e===i?" ":ui(e)).length;if(n<2)return n?Ur(e,t):e;var r=Ur(e,hn(t/on(e)));return Qe(e)?gi(sn(r),0,t).join(""):r.slice(0,t)}function Wi(t){return function(e,n,o){return o&&"number"!=typeof o&&Po(e,n,o)&&(n=o=i),e=vu(e),n===i?(n=e,e=0):n=vu(n),function(t,e,n,i){for(var o=-1,s=mn(hn((e-t)/(n||1)),0),u=r(s);s--;)u[i?s:++o]=t,t+=n;return u}(e,n,o=o===i?e<n?1:-1:vu(o),t)}}function zi(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=mu(e),n=mu(n)),t(e,n)}}function Vi(t,e,n,r,o,s,u,l,h,c){var f=8&e;e|=f?a:64,4&(e&=~(f?64:a))||(e&=-4);var p=[t,e,o,f?s:i,f?u:i,f?i:s,f?i:u,l,h,c],v=n.apply(i,p);return xo(t)&&So(v,p),v.placeholder=r,Mo(v,t,e)}function qi(t){var e=wt[t];return function(t,n){if(t=mu(t),(n=null==n?0:Pn(yu(n),292))&&vn(t)){var r=(gu(t)+"e").split("e");return+((r=(gu(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Ui=On&&1/nn(new On([,-0]))[1]==h?function(t){return new On(t)}:la;function Hi(t){return function(e){var n=fo(e);return n==b?Ke(e):n==E?rn(e):function(t,e){return Ie(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Gi(t,e,n,s,h,c,f,p){var v=2&e;if(!v&&"function"!=typeof t)throw new Et(o);var y=s?s.length:0;if(y||(e&=-97,s=h=i),f=f===i?f:mn(yu(f),0),p=p===i?p:yu(p),y-=h?h.length:0,64&e){var d=s,m=h;s=h=i}var P=v?i:ro(t),g=[t,e,n,s,h,d,m,c,f,p];if(P&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<131,s=r==l&&8==n||r==l&&256==n&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!o&&!s)return t;1&r&&(t[2]=e[2],i|=1&n?0:4);var a=e[3];if(a){var h=t[3];t[3]=h?Ii(h,a,e[4]):a,t[4]=h?en(t[3],u):e[4]}(a=e[5])&&(h=t[5],t[5]=h?Oi(h,a,e[6]):a,t[6]=h?en(t[5],u):e[6]),(a=e[7])&&(t[7]=a),r&l&&(t[8]=null==t[8]?e[8]:Pn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(g,P),t=g[0],e=g[1],n=g[2],s=g[3],h=g[4],!(p=g[9]=g[9]===i?v?0:t.length:mn(g[9]-y,0))&&24&e&&(e&=-25),e&&1!=e)x=8==e||16==e?function(t,e,n){var o=Yi(t);return function s(){for(var u=arguments.length,a=r(u),l=u,h=oo(s);l--;)a[l]=arguments[l];var c=u<3&&a[0]!==h&&a[u-1]!==h?[]:en(a,h);return(u-=c.length)<n?Vi(t,e,ki,s.placeholder,i,a,c,i,i,n-u):me(this&&this!==oe&&this instanceof s?o:t,this,a)}}(t,e,p):e!=a&&33!=e||h.length?ki.apply(i,g):function(t,e,n,i){var o=1&e,s=Yi(t);return function e(){for(var u=-1,a=arguments.length,l=-1,h=i.length,c=r(h+a),f=this&&this!==oe&&this instanceof e?s:t;++l<h;)c[l]=i[l];for(;a--;)c[l++]=arguments[++u];return me(f,o?n:this,c)}}(t,e,n,s);else var x=function(t,e,n){var r=1&e,i=Yi(t);return function e(){return(this&&this!==oe&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,n);return Mo((P?Qr:So)(x,g),t,e)}function Ji(t,e,n,r){return t===i||Zs(t,Lt[n])&&!Nt.call(r,n)?e:t}function $i(t,e,n,r,o,s){return eu(t)&&eu(e)&&(s.set(e,t),jr(t,e,i,$i,s),s.delete(e)),t}function Qi(t){return ou(t)?i:t}function Ki(t,e,n,r,o,s){var u=1&n,a=t.length,l=e.length;if(a!=l&&!(u&&l>a))return!1;var h=s.get(t),c=s.get(e);if(h&&c)return h==e&&c==t;var f=-1,p=!0,v=2&n?new Un:i;for(s.set(t,e),s.set(e,t);++f<a;){var y=t[f],d=e[f];if(r)var m=u?r(d,y,f,e,t,s):r(y,d,f,t,e,s);if(m!==i){if(m)continue;p=!1;break}if(v){if(!Se(e,(function(t,e){if(!Ve(v,e)&&(y===t||o(y,t,n,r,s)))return v.push(e)}))){p=!1;break}}else if(y!==d&&!o(y,d,n,r,s)){p=!1;break}}return s.delete(t),s.delete(e),p}function to(t){return Ao(Io(t,i,qo),t+"")}function eo(t){return wr(t,Mu,ho)}function no(t){return wr(t,Nu,co)}var ro=Sn?function(t){return Sn.get(t)}:la;function io(t){for(var e=t.name+"",n=Ln[e],r=Nt.call(Ln,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function oo(t){return(Nt.call(Bn,"placeholder")?Bn:t).placeholder}function so(){var t=Bn.iteratee||oa;return t=t===oa?Xr:t,arguments.length?t(arguments[0],arguments[1]):t}function uo(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function ao(t){for(var e=Mu(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,wo(i)]}return e}function lo(t,e){var n=function(t,e){return null==t?i:t[e]}(t,e);return Nr(n)?n:i}var ho=fn?function(t){return null==t?[]:(t=Ct(t),be(fn(t),(function(e){return te.call(t,e)})))}:da,co=fn?function(t){for(var e=[];t;)Oe(e,ho(t)),t=qt(t);return e}:da,fo=Cr;function po(t,e,n){for(var r=-1,i=(e=mi(e,t)).length,o=!1;++r<i;){var s=ko(e[r]);if(!(o=null!=t&&n(t,s)))break;t=t[s]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&tu(i)&&mo(s,i)&&(Vs(t)||zs(t))}function vo(t){return"function"!=typeof t.constructor||bo(t)?{}:jn(qt(t))}function yo(t){return Vs(t)||zs(t)||!!(ie&&t&&t[ie])}function mo(t,e){var n=typeof t;return!!(e=null==e?c:e)&&("number"==n||"symbol"!=n&&mt.test(t))&&t>-1&&t%1==0&&t<e}function Po(t,e,n){if(!eu(n))return!1;var r=typeof e;return!!("number"==r?Us(n)&&mo(e,n.length):"string"==r&&e in n)&&Zs(n[e],t)}function go(t,e){if(Vs(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!lu(t))||K.test(t)||!Q.test(t)||null!=e&&t in Ct(e)}function xo(t){var e=io(t),n=Bn[e];if("function"!=typeof n||!(e in Wn.prototype))return!1;if(t===n)return!0;var r=ro(n);return!!r&&t===r[0]}(wn&&fo(new wn(new ArrayBuffer(1)))!=M||Cn&&fo(new Cn)!=b||In&&fo(In.resolve())!=I||On&&fo(new On)!=E||En&&fo(new En)!=L)&&(fo=function(t){var e=Cr(t),n=e==C?t.constructor:i,r=n?Bo(n):"";if(r)switch(r){case An:return M;case Mn:return b;case Nn:return I;case Xn:return E;case Yn:return L}return e});var _o=At?Qs:ma;function bo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Lt)}function wo(t){return t==t&&!eu(t)}function Co(t,e){return function(n){return null!=n&&n[t]===e&&(e!==i||t in Ct(n))}}function Io(t,e,n){return e=mn(e===i?t.length-1:e,0),function(){for(var i=arguments,o=-1,s=mn(i.length-e,0),u=r(s);++o<s;)u[o]=i[e+o];o=-1;for(var a=r(e+1);++o<e;)a[o]=i[o];return a[e]=n(u),me(t,this,a)}}function Oo(t,e){return e.length<2?t:br(t,ei(e,0,-1))}function Eo(t,e){for(var n=t.length,r=Pn(e.length,n),o=Ei(t);r--;){var s=e[r];t[r]=mo(s,n)?o[s]:i}return t}function To(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var So=No(Qr),Lo=ke||function(t,e){return oe.setTimeout(t,e)},Ao=No(Kr);function Mo(t,e,n){var r=e+"";return Ao(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(ot,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return ge(v,(function(n){var r="_."+n[0];e&n[1]&&!we(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(st);return e?e[1].split(ut):[]}(r),n)))}function No(t){var e=0,n=0;return function(){var r=gn(),o=16-(r-n);if(n=r,o>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(i,arguments)}}function Xo(t,e){var n=-1,r=t.length,o=r-1;for(e=e===i?r:e;++n<e;){var s=qr(n,o),u=t[s];t[s]=t[n],t[n]=u}return t.length=e,t}var Yo,Ro,Do=(Yo=Ys((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(tt,(function(t,n,r,i){e.push(r?i.replace(ht,"$1"):n||t)})),e}),(function(t){return 500===Ro.size&&Ro.clear(),t})),Ro=Yo.cache,Yo);function ko(t){if("string"==typeof t||lu(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Bo(t){if(null!=t){try{return Mt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function jo(t){if(t instanceof Wn)return t.clone();var e=new Fn(t.__wrapped__,t.__chain__);return e.__actions__=Ei(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Zo=Hr((function(t,e){return Hs(t)?hr(t,dr(e,1,Hs,!0)):[]})),Fo=Hr((function(t,e){var n=$o(e);return Hs(n)&&(n=i),Hs(t)?hr(t,dr(e,1,Hs,!0),so(n,2)):[]})),Wo=Hr((function(t,e){var n=$o(e);return Hs(n)&&(n=i),Hs(t)?hr(t,dr(e,1,Hs,!0),i,n):[]}));function zo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:yu(n);return i<0&&(i=mn(r+i,0)),Me(t,so(e,3),i)}function Vo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=r-1;return n!==i&&(o=yu(n),o=n<0?mn(r+o,0):Pn(o,r-1)),Me(t,so(e,3),o,!0)}function qo(t){return null!=t&&t.length?dr(t,1):[]}function Uo(t){return t&&t.length?t[0]:i}var Ho=Hr((function(t){var e=Ie(t,yi);return e.length&&e[0]===t[0]?Tr(e):[]})),Go=Hr((function(t){var e=$o(t),n=Ie(t,yi);return e===$o(n)?e=i:n.pop(),n.length&&n[0]===t[0]?Tr(n,so(e,2)):[]})),Jo=Hr((function(t){var e=$o(t),n=Ie(t,yi);return(e="function"==typeof e?e:i)&&n.pop(),n.length&&n[0]===t[0]?Tr(n,i,e):[]}));function $o(t){var e=null==t?0:t.length;return e?t[e-1]:i}var Qo=Hr(Ko);function Ko(t,e){return t&&t.length&&e&&e.length?zr(t,e):t}var ts=to((function(t,e){var n=null==t?0:t.length,r=or(t,e);return Vr(t,Ie(e,(function(t){return mo(t,n)?+t:t})).sort(Ci)),r}));function es(t){return null==t?t:bn.call(t)}var ns=Hr((function(t){return ai(dr(t,1,Hs,!0))})),rs=Hr((function(t){var e=$o(t);return Hs(e)&&(e=i),ai(dr(t,1,Hs,!0),so(e,2))})),is=Hr((function(t){var e=$o(t);return e="function"==typeof e?e:i,ai(dr(t,1,Hs,!0),i,e)}));function os(t){if(!t||!t.length)return[];var e=0;return t=be(t,(function(t){if(Hs(t))return e=mn(t.length,e),!0})),Ze(e,(function(e){return Ie(t,De(e))}))}function ss(t,e){if(!t||!t.length)return[];var n=os(t);return null==e?n:Ie(n,(function(t){return me(e,i,t)}))}var us=Hr((function(t,e){return Hs(t)?hr(t,e):[]})),as=Hr((function(t){return pi(be(t,Hs))})),ls=Hr((function(t){var e=$o(t);return Hs(e)&&(e=i),pi(be(t,Hs),so(e,2))})),hs=Hr((function(t){var e=$o(t);return e="function"==typeof e?e:i,pi(be(t,Hs),i,e)})),cs=Hr(os),fs=Hr((function(t){var e=t.length,n=e>1?t[e-1]:i;return n="function"==typeof n?(t.pop(),n):i,ss(t,n)}));function ps(t){var e=Bn(t);return e.__chain__=!0,e}function vs(t,e){return e(t)}var ys=to((function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,o=function(e){return or(e,t)};return!(e>1||this.__actions__.length)&&r instanceof Wn&&mo(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:vs,args:[o],thisArg:i}),new Fn(r,this.__chain__).thru((function(t){return e&&!t.length&&t.push(i),t}))):this.thru(o)})),ds=Si((function(t,e,n){Nt.call(t,n)?++t[n]:ir(t,n,1)})),ms=Ri(zo),Ps=Ri(Vo);function gs(t,e){return(Vs(t)?ge:cr)(t,so(e,3))}function xs(t,e){return(Vs(t)?xe:fr)(t,so(e,3))}var _s=Si((function(t,e,n){Nt.call(t,n)?t[n].push(e):ir(t,n,[e])})),bs=Hr((function(t,e,n){var i=-1,o="function"==typeof e,s=Us(t)?r(t.length):[];return cr(t,(function(t){s[++i]=o?me(e,t,n):Sr(t,e,n)})),s})),ws=Si((function(t,e,n){ir(t,n,e)}));function Cs(t,e){return(Vs(t)?Ie:Dr)(t,so(e,3))}var Is=Si((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]})),Os=Hr((function(t,e){if(null==t)return[];var n=e.length;return n>1&&Po(t,e[0],e[1])?e=[]:n>2&&Po(e[0],e[1],e[2])&&(e=[e[0]]),Fr(t,dr(e,1),[])})),Es=Le||function(){return oe.Date.now()};function Ts(t,e,n){return e=n?i:e,e=t&&null==e?t.length:e,Gi(t,l,i,i,i,i,e)}function Ss(t,e){var n;if("function"!=typeof e)throw new Et(o);return t=yu(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=i),n}}var Ls=Hr((function(t,e,n){var r=1;if(n.length){var i=en(n,oo(Ls));r|=a}return Gi(t,r,e,n,i)})),As=Hr((function(t,e,n){var r=3;if(n.length){var i=en(n,oo(As));r|=a}return Gi(e,r,t,n,i)}));function Ms(t,e,n){var r,s,u,a,l,h,c=0,f=!1,p=!1,v=!0;if("function"!=typeof t)throw new Et(o);function y(e){var n=r,o=s;return r=s=i,c=e,a=t.apply(o,n)}function d(t){return c=t,l=Lo(P,e),f?y(t):a}function m(t){var n=t-h;return h===i||n>=e||n<0||p&&t-c>=u}function P(){var t=Es();if(m(t))return g(t);l=Lo(P,function(t){var n=e-(t-h);return p?Pn(n,u-(t-c)):n}(t))}function g(t){return l=i,v&&r?y(t):(r=s=i,a)}function x(){var t=Es(),n=m(t);if(r=arguments,s=this,h=t,n){if(l===i)return d(h);if(p)return xi(l),l=Lo(P,e),y(h)}return l===i&&(l=Lo(P,e)),a}return e=mu(e)||0,eu(n)&&(f=!!n.leading,u=(p="maxWait"in n)?mn(mu(n.maxWait)||0,e):u,v="trailing"in n?!!n.trailing:v),x.cancel=function(){l!==i&&xi(l),c=0,r=h=s=l=i},x.flush=function(){return l===i?a:g(Es())},x}var Ns=Hr((function(t,e){return lr(t,1,e)})),Xs=Hr((function(t,e,n){return lr(t,mu(e)||0,n)}));function Ys(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Et(o);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var s=t.apply(this,r);return n.cache=o.set(i,s)||o,s};return n.cache=new(Ys.Cache||qn),n}function Rs(t){if("function"!=typeof t)throw new Et(o);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Ys.Cache=qn;var Ds=Pi((function(t,e){var n=(e=1==e.length&&Vs(e[0])?Ie(e[0],We(so())):Ie(dr(e,1),We(so()))).length;return Hr((function(r){for(var i=-1,o=Pn(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return me(t,this,r)}))})),ks=Hr((function(t,e){var n=en(e,oo(ks));return Gi(t,a,i,e,n)})),Bs=Hr((function(t,e){var n=en(e,oo(Bs));return Gi(t,64,i,e,n)})),js=to((function(t,e){return Gi(t,256,i,i,i,e)}));function Zs(t,e){return t===e||t!=t&&e!=e}var Fs=zi(Ir),Ws=zi((function(t,e){return t>=e})),zs=Lr(function(){return arguments}())?Lr:function(t){return nu(t)&&Nt.call(t,"callee")&&!te.call(t,"callee")},Vs=r.isArray,qs=ce?We(ce):function(t){return nu(t)&&Cr(t)==A};function Us(t){return null!=t&&tu(t.length)&&!Qs(t)}function Hs(t){return nu(t)&&Us(t)}var Gs=pn||ma,Js=fe?We(fe):function(t){return nu(t)&&Cr(t)==P};function $s(t){if(!nu(t))return!1;var e=Cr(t);return e==g||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!ou(t)}function Qs(t){if(!eu(t))return!1;var e=Cr(t);return e==x||e==_||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Ks(t){return"number"==typeof t&&t==yu(t)}function tu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=c}function eu(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function nu(t){return null!=t&&"object"==typeof t}var ru=pe?We(pe):function(t){return nu(t)&&fo(t)==b};function iu(t){return"number"==typeof t||nu(t)&&Cr(t)==w}function ou(t){if(!nu(t)||Cr(t)!=C)return!1;var e=qt(t);if(null===e)return!0;var n=Nt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Mt.call(n)==Dt}var su=ve?We(ve):function(t){return nu(t)&&Cr(t)==O},uu=ye?We(ye):function(t){return nu(t)&&fo(t)==E};function au(t){return"string"==typeof t||!Vs(t)&&nu(t)&&Cr(t)==T}function lu(t){return"symbol"==typeof t||nu(t)&&Cr(t)==S}var hu=de?We(de):function(t){return nu(t)&&tu(t.length)&&!!Qt[Cr(t)]},cu=zi(Rr),fu=zi((function(t,e){return t<=e}));function pu(t){if(!t)return[];if(Us(t))return au(t)?sn(t):Ei(t);if(se&&t[se])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[se]());var e=fo(t);return(e==b?Ke:e==E?nn:Zu)(t)}function vu(t){return t?(t=mu(t))===h||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function yu(t){var e=vu(t),n=e%1;return e==e?n?e-n:e:0}function du(t){return t?sr(yu(t),0,p):0}function mu(t){if("number"==typeof t)return t;if(lu(t))return f;if(eu(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=eu(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Fe(t);var n=vt.test(t);return n||dt.test(t)?ne(t.slice(2),n?2:8):pt.test(t)?f:+t}function Pu(t){return Ti(t,Nu(t))}function gu(t){return null==t?"":ui(t)}var xu=Li((function(t,e){if(bo(e)||Us(e))Ti(e,Mu(e),t);else for(var n in e)Nt.call(e,n)&&tr(t,n,e[n])})),_u=Li((function(t,e){Ti(e,Nu(e),t)})),bu=Li((function(t,e,n,r){Ti(e,Nu(e),t,r)})),wu=Li((function(t,e,n,r){Ti(e,Mu(e),t,r)})),Cu=to(or),Iu=Hr((function(t,e){t=Ct(t);var n=-1,r=e.length,o=r>2?e[2]:i;for(o&&Po(e[0],e[1],o)&&(r=1);++n<r;)for(var s=e[n],u=Nu(s),a=-1,l=u.length;++a<l;){var h=u[a],c=t[h];(c===i||Zs(c,Lt[h])&&!Nt.call(t,h))&&(t[h]=s[h])}return t})),Ou=Hr((function(t){return t.push(i,$i),me(Yu,i,t)}));function Eu(t,e,n){var r=null==t?i:br(t,e);return r===i?n:r}function Tu(t,e){return null!=t&&po(t,e,Er)}var Su=Bi((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Rt.call(e)),t[e]=n}),ea(ia)),Lu=Bi((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Rt.call(e)),Nt.call(t,e)?t[e].push(n):t[e]=[n]}),so),Au=Hr(Sr);function Mu(t){return Us(t)?Gn(t):Yr(t)}function Nu(t){return Us(t)?Gn(t,!0):function(t){if(!eu(t))return function(t){var e=[];if(null!=t)for(var n in Ct(t))e.push(n);return e}(t);var e=bo(t),n=[];for(var r in t)("constructor"!=r||!e&&Nt.call(t,r))&&n.push(r);return n}(t)}var Xu=Li((function(t,e,n){jr(t,e,n)})),Yu=Li((function(t,e,n,r){jr(t,e,n,r)})),Ru=to((function(t,e){var n={};if(null==t)return n;var r=!1;e=Ie(e,(function(e){return e=mi(e,t),r||(r=e.length>1),e})),Ti(t,no(t),n),r&&(n=ur(n,7,Qi));for(var i=e.length;i--;)li(n,e[i]);return n})),Du=to((function(t,e){return null==t?{}:function(t,e){return Wr(t,e,(function(e,n){return Tu(t,n)}))}(t,e)}));function ku(t,e){if(null==t)return{};var n=Ie(no(t),(function(t){return[t]}));return e=so(e),Wr(t,n,(function(t,n){return e(t,n[0])}))}var Bu=Hi(Mu),ju=Hi(Nu);function Zu(t){return null==t?[]:ze(t,Mu(t))}var Fu=Xi((function(t,e,n){return e=e.toLowerCase(),t+(n?Wu(e):e)}));function Wu(t){return $u(gu(t).toLowerCase())}function zu(t){return(t=gu(t))&&t.replace(Pt,Ge).replace(Vt,"")}var Vu=Xi((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),qu=Xi((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Uu=Ni("toLowerCase"),Hu=Xi((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()})),Gu=Xi((function(t,e,n){return t+(n?" ":"")+$u(e)})),Ju=Xi((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),$u=Ni("toUpperCase");function Qu(t,e,n){return t=gu(t),(e=n?i:e)===i?function(t){return Gt.test(t)}(t)?function(t){return t.match(Ut)||[]}(t):function(t){return t.match(at)||[]}(t):t.match(e)||[]}var Ku=Hr((function(t,e){try{return me(t,i,e)}catch(t){return $s(t)?t:new _t(t)}})),ta=to((function(t,e){return ge(e,(function(e){e=ko(e),ir(t,e,Ls(t[e],t))})),t}));function ea(t){return function(){return t}}var na=Di(),ra=Di(!0);function ia(t){return t}function oa(t){return Xr("function"==typeof t?t:ur(t,1))}var sa=Hr((function(t,e){return function(n){return Sr(n,t,e)}})),ua=Hr((function(t,e){return function(n){return Sr(t,n,e)}}));function aa(t,e,n){var r=Mu(e),i=_r(e,r);null!=n||eu(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=_r(e,Mu(e)));var o=!(eu(n)&&"chain"in n&&!n.chain),s=Qs(t);return ge(i,(function(n){var r=e[n];t[n]=r,s&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__),i=n.__actions__=Ei(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,Oe([this.value()],arguments))})})),t}function la(){}var ha=Zi(Ie),ca=Zi(_e),fa=Zi(Se);function pa(t){return go(t)?De(ko(t)):function(t){return function(e){return br(e,t)}}(t)}var va=Wi(),ya=Wi(!0);function da(){return[]}function ma(){return!1}var Pa,ga=ji((function(t,e){return t+e}),0),xa=qi("ceil"),_a=ji((function(t,e){return t/e}),1),ba=qi("floor"),wa=ji((function(t,e){return t*e}),1),Ca=qi("round"),Ia=ji((function(t,e){return t-e}),0);return Bn.after=function(t,e){if("function"!=typeof e)throw new Et(o);return t=yu(t),function(){if(--t<1)return e.apply(this,arguments)}},Bn.ary=Ts,Bn.assign=xu,Bn.assignIn=_u,Bn.assignInWith=bu,Bn.assignWith=wu,Bn.at=Cu,Bn.before=Ss,Bn.bind=Ls,Bn.bindAll=ta,Bn.bindKey=As,Bn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Vs(t)?t:[t]},Bn.chain=ps,Bn.chunk=function(t,e,n){e=(n?Po(t,e,n):e===i)?1:mn(yu(e),0);var o=null==t?0:t.length;if(!o||e<1)return[];for(var s=0,u=0,a=r(hn(o/e));s<o;)a[u++]=ei(t,s,s+=e);return a},Bn.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},Bn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return Oe(Vs(n)?Ei(n):[n],dr(e,1))},Bn.cond=function(t){var e=null==t?0:t.length,n=so();return t=e?Ie(t,(function(t){if("function"!=typeof t[1])throw new Et(o);return[n(t[0]),t[1]]})):[],Hr((function(n){for(var r=-1;++r<e;){var i=t[r];if(me(i[0],this,n))return me(i[1],this,n)}}))},Bn.conforms=function(t){return function(t){var e=Mu(t);return function(n){return ar(n,t,e)}}(ur(t,1))},Bn.constant=ea,Bn.countBy=ds,Bn.create=function(t,e){var n=jn(t);return null==e?n:rr(n,e)},Bn.curry=function t(e,n,r){var o=Gi(e,8,i,i,i,i,i,n=r?i:n);return o.placeholder=t.placeholder,o},Bn.curryRight=function t(e,n,r){var o=Gi(e,16,i,i,i,i,i,n=r?i:n);return o.placeholder=t.placeholder,o},Bn.debounce=Ms,Bn.defaults=Iu,Bn.defaultsDeep=Ou,Bn.defer=Ns,Bn.delay=Xs,Bn.difference=Zo,Bn.differenceBy=Fo,Bn.differenceWith=Wo,Bn.drop=function(t,e,n){var r=null==t?0:t.length;return r?ei(t,(e=n||e===i?1:yu(e))<0?0:e,r):[]},Bn.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?ei(t,0,(e=r-(e=n||e===i?1:yu(e)))<0?0:e):[]},Bn.dropRightWhile=function(t,e){return t&&t.length?ci(t,so(e,3),!0,!0):[]},Bn.dropWhile=function(t,e){return t&&t.length?ci(t,so(e,3),!0):[]},Bn.fill=function(t,e,n,r){var o=null==t?0:t.length;return o?(n&&"number"!=typeof n&&Po(t,e,n)&&(n=0,r=o),function(t,e,n,r){var o=t.length;for((n=yu(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:yu(r))<0&&(r+=o),r=n>r?0:du(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},Bn.filter=function(t,e){return(Vs(t)?be:yr)(t,so(e,3))},Bn.flatMap=function(t,e){return dr(Cs(t,e),1)},Bn.flatMapDeep=function(t,e){return dr(Cs(t,e),h)},Bn.flatMapDepth=function(t,e,n){return n=n===i?1:yu(n),dr(Cs(t,e),n)},Bn.flatten=qo,Bn.flattenDeep=function(t){return null!=t&&t.length?dr(t,h):[]},Bn.flattenDepth=function(t,e){return null!=t&&t.length?dr(t,e=e===i?1:yu(e)):[]},Bn.flip=function(t){return Gi(t,512)},Bn.flow=na,Bn.flowRight=ra,Bn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},Bn.functions=function(t){return null==t?[]:_r(t,Mu(t))},Bn.functionsIn=function(t){return null==t?[]:_r(t,Nu(t))},Bn.groupBy=_s,Bn.initial=function(t){return null!=t&&t.length?ei(t,0,-1):[]},Bn.intersection=Ho,Bn.intersectionBy=Go,Bn.intersectionWith=Jo,Bn.invert=Su,Bn.invertBy=Lu,Bn.invokeMap=bs,Bn.iteratee=oa,Bn.keyBy=ws,Bn.keys=Mu,Bn.keysIn=Nu,Bn.map=Cs,Bn.mapKeys=function(t,e){var n={};return e=so(e,3),gr(t,(function(t,r,i){ir(n,e(t,r,i),t)})),n},Bn.mapValues=function(t,e){var n={};return e=so(e,3),gr(t,(function(t,r,i){ir(n,r,e(t,r,i))})),n},Bn.matches=function(t){return kr(ur(t,1))},Bn.matchesProperty=function(t,e){return Br(t,ur(e,1))},Bn.memoize=Ys,Bn.merge=Xu,Bn.mergeWith=Yu,Bn.method=sa,Bn.methodOf=ua,Bn.mixin=aa,Bn.negate=Rs,Bn.nthArg=function(t){return t=yu(t),Hr((function(e){return Zr(e,t)}))},Bn.omit=Ru,Bn.omitBy=function(t,e){return ku(t,Rs(so(e)))},Bn.once=function(t){return Ss(2,t)},Bn.orderBy=function(t,e,n,r){return null==t?[]:(Vs(e)||(e=null==e?[]:[e]),Vs(n=r?i:n)||(n=null==n?[]:[n]),Fr(t,e,n))},Bn.over=ha,Bn.overArgs=Ds,Bn.overEvery=ca,Bn.overSome=fa,Bn.partial=ks,Bn.partialRight=Bs,Bn.partition=Is,Bn.pick=Du,Bn.pickBy=ku,Bn.property=pa,Bn.propertyOf=function(t){return function(e){return null==t?i:br(t,e)}},Bn.pull=Qo,Bn.pullAll=Ko,Bn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?zr(t,e,so(n,2)):t},Bn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?zr(t,e,i,n):t},Bn.pullAt=ts,Bn.range=va,Bn.rangeRight=ya,Bn.rearg=js,Bn.reject=function(t,e){return(Vs(t)?be:yr)(t,Rs(so(e,3)))},Bn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=so(e,3);++r<o;){var s=t[r];e(s,r,t)&&(n.push(s),i.push(r))}return Vr(t,i),n},Bn.rest=function(t,e){if("function"!=typeof t)throw new Et(o);return Hr(t,e=e===i?e:yu(e))},Bn.reverse=es,Bn.sampleSize=function(t,e,n){return e=(n?Po(t,e,n):e===i)?1:yu(e),(Vs(t)?$n:Jr)(t,e)},Bn.set=function(t,e,n){return null==t?t:$r(t,e,n)},Bn.setWith=function(t,e,n,r){return r="function"==typeof r?r:i,null==t?t:$r(t,e,n,r)},Bn.shuffle=function(t){return(Vs(t)?Qn:ti)(t)},Bn.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&Po(t,e,n)?(e=0,n=r):(e=null==e?0:yu(e),n=n===i?r:yu(n)),ei(t,e,n)):[]},Bn.sortBy=Os,Bn.sortedUniq=function(t){return t&&t.length?oi(t):[]},Bn.sortedUniqBy=function(t,e){return t&&t.length?oi(t,so(e,2)):[]},Bn.split=function(t,e,n){return n&&"number"!=typeof n&&Po(t,e,n)&&(e=n=i),(n=n===i?p:n>>>0)?(t=gu(t))&&("string"==typeof e||null!=e&&!su(e))&&!(e=ui(e))&&Qe(t)?gi(sn(t),0,n):t.split(e,n):[]},Bn.spread=function(t,e){if("function"!=typeof t)throw new Et(o);return e=null==e?0:mn(yu(e),0),Hr((function(n){var r=n[e],i=gi(n,0,e);return r&&Oe(i,r),me(t,this,i)}))},Bn.tail=function(t){var e=null==t?0:t.length;return e?ei(t,1,e):[]},Bn.take=function(t,e,n){return t&&t.length?ei(t,0,(e=n||e===i?1:yu(e))<0?0:e):[]},Bn.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?ei(t,(e=r-(e=n||e===i?1:yu(e)))<0?0:e,r):[]},Bn.takeRightWhile=function(t,e){return t&&t.length?ci(t,so(e,3),!1,!0):[]},Bn.takeWhile=function(t,e){return t&&t.length?ci(t,so(e,3)):[]},Bn.tap=function(t,e){return e(t),t},Bn.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new Et(o);return eu(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Ms(t,e,{leading:r,maxWait:e,trailing:i})},Bn.thru=vs,Bn.toArray=pu,Bn.toPairs=Bu,Bn.toPairsIn=ju,Bn.toPath=function(t){return Vs(t)?Ie(t,ko):lu(t)?[t]:Ei(Do(gu(t)))},Bn.toPlainObject=Pu,Bn.transform=function(t,e,n){var r=Vs(t),i=r||Gs(t)||hu(t);if(e=so(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:eu(t)&&Qs(o)?jn(qt(t)):{}}return(i?ge:gr)(t,(function(t,r,i){return e(n,t,r,i)})),n},Bn.unary=function(t){return Ts(t,1)},Bn.union=ns,Bn.unionBy=rs,Bn.unionWith=is,Bn.uniq=function(t){return t&&t.length?ai(t):[]},Bn.uniqBy=function(t,e){return t&&t.length?ai(t,so(e,2)):[]},Bn.uniqWith=function(t,e){return e="function"==typeof e?e:i,t&&t.length?ai(t,i,e):[]},Bn.unset=function(t,e){return null==t||li(t,e)},Bn.unzip=os,Bn.unzipWith=ss,Bn.update=function(t,e,n){return null==t?t:hi(t,e,di(n))},Bn.updateWith=function(t,e,n,r){return r="function"==typeof r?r:i,null==t?t:hi(t,e,di(n),r)},Bn.values=Zu,Bn.valuesIn=function(t){return null==t?[]:ze(t,Nu(t))},Bn.without=us,Bn.words=Qu,Bn.wrap=function(t,e){return ks(di(e),t)},Bn.xor=as,Bn.xorBy=ls,Bn.xorWith=hs,Bn.zip=cs,Bn.zipObject=function(t,e){return vi(t||[],e||[],tr)},Bn.zipObjectDeep=function(t,e){return vi(t||[],e||[],$r)},Bn.zipWith=fs,Bn.entries=Bu,Bn.entriesIn=ju,Bn.extend=_u,Bn.extendWith=bu,aa(Bn,Bn),Bn.add=ga,Bn.attempt=Ku,Bn.camelCase=Fu,Bn.capitalize=Wu,Bn.ceil=xa,Bn.clamp=function(t,e,n){return n===i&&(n=e,e=i),n!==i&&(n=(n=mu(n))==n?n:0),e!==i&&(e=(e=mu(e))==e?e:0),sr(mu(t),e,n)},Bn.clone=function(t){return ur(t,4)},Bn.cloneDeep=function(t){return ur(t,5)},Bn.cloneDeepWith=function(t,e){return ur(t,5,e="function"==typeof e?e:i)},Bn.cloneWith=function(t,e){return ur(t,4,e="function"==typeof e?e:i)},Bn.conformsTo=function(t,e){return null==e||ar(t,e,Mu(e))},Bn.deburr=zu,Bn.defaultTo=function(t,e){return null==t||t!=t?e:t},Bn.divide=_a,Bn.endsWith=function(t,e,n){t=gu(t),e=ui(e);var r=t.length,o=n=n===i?r:sr(yu(n),0,r);return(n-=e.length)>=0&&t.slice(n,o)==e},Bn.eq=Zs,Bn.escape=function(t){return(t=gu(t))&&H.test(t)?t.replace(q,Je):t},Bn.escapeRegExp=function(t){return(t=gu(t))&&nt.test(t)?t.replace(et,"\\$&"):t},Bn.every=function(t,e,n){var r=Vs(t)?_e:pr;return n&&Po(t,e,n)&&(e=i),r(t,so(e,3))},Bn.find=ms,Bn.findIndex=zo,Bn.findKey=function(t,e){return Ae(t,so(e,3),gr)},Bn.findLast=Ps,Bn.findLastIndex=Vo,Bn.findLastKey=function(t,e){return Ae(t,so(e,3),xr)},Bn.floor=ba,Bn.forEach=gs,Bn.forEachRight=xs,Bn.forIn=function(t,e){return null==t?t:mr(t,so(e,3),Nu)},Bn.forInRight=function(t,e){return null==t?t:Pr(t,so(e,3),Nu)},Bn.forOwn=function(t,e){return t&&gr(t,so(e,3))},Bn.forOwnRight=function(t,e){return t&&xr(t,so(e,3))},Bn.get=Eu,Bn.gt=Fs,Bn.gte=Ws,Bn.has=function(t,e){return null!=t&&po(t,e,Or)},Bn.hasIn=Tu,Bn.head=Uo,Bn.identity=ia,Bn.includes=function(t,e,n,r){t=Us(t)?t:Zu(t),n=n&&!r?yu(n):0;var i=t.length;return n<0&&(n=mn(i+n,0)),au(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&Ne(t,e,n)>-1},Bn.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:yu(n);return i<0&&(i=mn(r+i,0)),Ne(t,e,i)},Bn.inRange=function(t,e,n){return e=vu(e),n===i?(n=e,e=0):n=vu(n),function(t,e,n){return t>=Pn(e,n)&&t<mn(e,n)}(t=mu(t),e,n)},Bn.invoke=Au,Bn.isArguments=zs,Bn.isArray=Vs,Bn.isArrayBuffer=qs,Bn.isArrayLike=Us,Bn.isArrayLikeObject=Hs,Bn.isBoolean=function(t){return!0===t||!1===t||nu(t)&&Cr(t)==m},Bn.isBuffer=Gs,Bn.isDate=Js,Bn.isElement=function(t){return nu(t)&&1===t.nodeType&&!ou(t)},Bn.isEmpty=function(t){if(null==t)return!0;if(Us(t)&&(Vs(t)||"string"==typeof t||"function"==typeof t.splice||Gs(t)||hu(t)||zs(t)))return!t.length;var e=fo(t);if(e==b||e==E)return!t.size;if(bo(t))return!Yr(t).length;for(var n in t)if(Nt.call(t,n))return!1;return!0},Bn.isEqual=function(t,e){return Ar(t,e)},Bn.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:i)?n(t,e):i;return r===i?Ar(t,e,i,n):!!r},Bn.isError=$s,Bn.isFinite=function(t){return"number"==typeof t&&vn(t)},Bn.isFunction=Qs,Bn.isInteger=Ks,Bn.isLength=tu,Bn.isMap=ru,Bn.isMatch=function(t,e){return t===e||Mr(t,e,ao(e))},Bn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:i,Mr(t,e,ao(e),n)},Bn.isNaN=function(t){return iu(t)&&t!=+t},Bn.isNative=function(t){if(_o(t))throw new _t("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Nr(t)},Bn.isNil=function(t){return null==t},Bn.isNull=function(t){return null===t},Bn.isNumber=iu,Bn.isObject=eu,Bn.isObjectLike=nu,Bn.isPlainObject=ou,Bn.isRegExp=su,Bn.isSafeInteger=function(t){return Ks(t)&&t>=-9007199254740991&&t<=c},Bn.isSet=uu,Bn.isString=au,Bn.isSymbol=lu,Bn.isTypedArray=hu,Bn.isUndefined=function(t){return t===i},Bn.isWeakMap=function(t){return nu(t)&&fo(t)==L},Bn.isWeakSet=function(t){return nu(t)&&"[object WeakSet]"==Cr(t)},Bn.join=function(t,e){return null==t?"":yn.call(t,e)},Bn.kebabCase=Vu,Bn.last=$o,Bn.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=yu(n))<0?mn(r+o,0):Pn(o,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,o):Me(t,Ye,o,!0)},Bn.lowerCase=qu,Bn.lowerFirst=Uu,Bn.lt=cu,Bn.lte=fu,Bn.max=function(t){return t&&t.length?vr(t,ia,Ir):i},Bn.maxBy=function(t,e){return t&&t.length?vr(t,so(e,2),Ir):i},Bn.mean=function(t){return Re(t,ia)},Bn.meanBy=function(t,e){return Re(t,so(e,2))},Bn.min=function(t){return t&&t.length?vr(t,ia,Rr):i},Bn.minBy=function(t,e){return t&&t.length?vr(t,so(e,2),Rr):i},Bn.stubArray=da,Bn.stubFalse=ma,Bn.stubObject=function(){return{}},Bn.stubString=function(){return""},Bn.stubTrue=function(){return!0},Bn.multiply=wa,Bn.nth=function(t,e){return t&&t.length?Zr(t,yu(e)):i},Bn.noConflict=function(){return oe._===this&&(oe._=kt),this},Bn.noop=la,Bn.now=Es,Bn.pad=function(t,e,n){t=gu(t);var r=(e=yu(e))?on(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return Fi(cn(i),n)+t+Fi(hn(i),n)},Bn.padEnd=function(t,e,n){t=gu(t);var r=(e=yu(e))?on(t):0;return e&&r<e?t+Fi(e-r,n):t},Bn.padStart=function(t,e,n){t=gu(t);var r=(e=yu(e))?on(t):0;return e&&r<e?Fi(e-r,n)+t:t},Bn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),xn(gu(t).replace(rt,""),e||0)},Bn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&Po(t,e,n)&&(e=n=i),n===i&&("boolean"==typeof e?(n=e,e=i):"boolean"==typeof t&&(n=t,t=i)),t===i&&e===i?(t=0,e=1):(t=vu(t),e===i?(e=t,t=0):e=vu(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var o=_n();return Pn(t+o*(e-t+ee("1e-"+((o+"").length-1))),e)}return qr(t,e)},Bn.reduce=function(t,e,n){var r=Vs(t)?Ee:Be,i=arguments.length<3;return r(t,so(e,4),n,i,cr)},Bn.reduceRight=function(t,e,n){var r=Vs(t)?Te:Be,i=arguments.length<3;return r(t,so(e,4),n,i,fr)},Bn.repeat=function(t,e,n){return e=(n?Po(t,e,n):e===i)?1:yu(e),Ur(gu(t),e)},Bn.replace=function(){var t=arguments,e=gu(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Bn.result=function(t,e,n){var r=-1,o=(e=mi(e,t)).length;for(o||(o=1,t=i);++r<o;){var s=null==t?i:t[ko(e[r])];s===i&&(r=o,s=n),t=Qs(s)?s.call(t):s}return t},Bn.round=Ca,Bn.runInContext=t,Bn.sample=function(t){return(Vs(t)?Jn:Gr)(t)},Bn.size=function(t){if(null==t)return 0;if(Us(t))return au(t)?on(t):t.length;var e=fo(t);return e==b||e==E?t.size:Yr(t).length},Bn.snakeCase=Hu,Bn.some=function(t,e,n){var r=Vs(t)?Se:ni;return n&&Po(t,e,n)&&(e=i),r(t,so(e,3))},Bn.sortedIndex=function(t,e){return ri(t,e)},Bn.sortedIndexBy=function(t,e,n){return ii(t,e,so(n,2))},Bn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=ri(t,e);if(r<n&&Zs(t[r],e))return r}return-1},Bn.sortedLastIndex=function(t,e){return ri(t,e,!0)},Bn.sortedLastIndexBy=function(t,e,n){return ii(t,e,so(n,2),!0)},Bn.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=ri(t,e,!0)-1;if(Zs(t[n],e))return n}return-1},Bn.startCase=Gu,Bn.startsWith=function(t,e,n){return t=gu(t),n=null==n?0:sr(yu(n),0,t.length),e=ui(e),t.slice(n,n+e.length)==e},Bn.subtract=Ia,Bn.sum=function(t){return t&&t.length?je(t,ia):0},Bn.sumBy=function(t,e){return t&&t.length?je(t,so(e,2)):0},Bn.template=function(t,e,n){var r=Bn.templateSettings;n&&Po(t,e,n)&&(e=i),t=gu(t),e=bu({},e,r,Ji);var o,s,u=bu({},e.imports,r.imports,Ji),a=Mu(u),l=ze(u,a),h=0,c=e.interpolate||gt,f="__p += '",p=It((e.escape||gt).source+"|"+c.source+"|"+(c===$?ct:gt).source+"|"+(e.evaluate||gt).source+"|$","g"),v="//# sourceURL="+(Nt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++$t+"]")+"\n";t.replace(p,(function(e,n,r,i,u,a){return r||(r=i),f+=t.slice(h,a).replace(xt,$e),n&&(o=!0,f+="' +\n__e("+n+") +\n'"),u&&(s=!0,f+="';\n"+u+";\n__p += '"),r&&(f+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),h=a+e.length,e})),f+="';\n";var y=Nt.call(e,"variable")&&e.variable;if(y){if(lt.test(y))throw new _t("Invalid `variable` option passed into `_.template`")}else f="with (obj) {\n"+f+"\n}\n";f=(s?f.replace(F,""):f).replace(W,"$1").replace(z,"$1;"),f="function("+(y||"obj")+") {\n"+(y?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var d=Ku((function(){return bt(a,v+"return "+f).apply(i,l)}));if(d.source=f,$s(d))throw d;return d},Bn.times=function(t,e){if((t=yu(t))<1||t>c)return[];var n=p,r=Pn(t,p);e=so(e),t-=p;for(var i=Ze(r,e);++n<t;)e(n);return i},Bn.toFinite=vu,Bn.toInteger=yu,Bn.toLength=du,Bn.toLower=function(t){return gu(t).toLowerCase()},Bn.toNumber=mu,Bn.toSafeInteger=function(t){return t?sr(yu(t),-9007199254740991,c):0===t?t:0},Bn.toString=gu,Bn.toUpper=function(t){return gu(t).toUpperCase()},Bn.trim=function(t,e,n){if((t=gu(t))&&(n||e===i))return Fe(t);if(!t||!(e=ui(e)))return t;var r=sn(t),o=sn(e);return gi(r,qe(r,o),Ue(r,o)+1).join("")},Bn.trimEnd=function(t,e,n){if((t=gu(t))&&(n||e===i))return t.slice(0,un(t)+1);if(!t||!(e=ui(e)))return t;var r=sn(t);return gi(r,0,Ue(r,sn(e))+1).join("")},Bn.trimStart=function(t,e,n){if((t=gu(t))&&(n||e===i))return t.replace(rt,"");if(!t||!(e=ui(e)))return t;var r=sn(t);return gi(r,qe(r,sn(e))).join("")},Bn.truncate=function(t,e){var n=30,r="...";if(eu(e)){var o="separator"in e?e.separator:o;n="length"in e?yu(e.length):n,r="omission"in e?ui(e.omission):r}var s=(t=gu(t)).length;if(Qe(t)){var u=sn(t);s=u.length}if(n>=s)return t;var a=n-on(r);if(a<1)return r;var l=u?gi(u,0,a).join(""):t.slice(0,a);if(o===i)return l+r;if(u&&(a+=l.length-a),su(o)){if(t.slice(a).search(o)){var h,c=l;for(o.global||(o=It(o.source,gu(ft.exec(o))+"g")),o.lastIndex=0;h=o.exec(c);)var f=h.index;l=l.slice(0,f===i?a:f)}}else if(t.indexOf(ui(o),a)!=a){var p=l.lastIndexOf(o);p>-1&&(l=l.slice(0,p))}return l+r},Bn.unescape=function(t){return(t=gu(t))&&U.test(t)?t.replace(V,an):t},Bn.uniqueId=function(t){var e=++Xt;return gu(t)+e},Bn.upperCase=Ju,Bn.upperFirst=$u,Bn.each=gs,Bn.eachRight=xs,Bn.first=Uo,aa(Bn,(Pa={},gr(Bn,(function(t,e){Nt.call(Bn.prototype,e)||(Pa[e]=t)})),Pa),{chain:!1}),Bn.VERSION="4.17.21",ge(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Bn[t].placeholder=Bn})),ge(["drop","take"],(function(t,e){Wn.prototype[t]=function(n){n=n===i?1:mn(yu(n),0);var r=this.__filtered__&&!e?new Wn(this):this.clone();return r.__filtered__?r.__takeCount__=Pn(n,r.__takeCount__):r.__views__.push({size:Pn(n,p),type:t+(r.__dir__<0?"Right":"")}),r},Wn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),ge(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;Wn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:so(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),ge(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Wn.prototype[t]=function(){return this[n](1).value()[0]}})),ge(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Wn.prototype[t]=function(){return this.__filtered__?new Wn(this):this[n](1)}})),Wn.prototype.compact=function(){return this.filter(ia)},Wn.prototype.find=function(t){return this.filter(t).head()},Wn.prototype.findLast=function(t){return this.reverse().find(t)},Wn.prototype.invokeMap=Hr((function(t,e){return"function"==typeof t?new Wn(this):this.map((function(n){return Sr(n,t,e)}))})),Wn.prototype.reject=function(t){return this.filter(Rs(so(t)))},Wn.prototype.slice=function(t,e){t=yu(t);var n=this;return n.__filtered__&&(t>0||e<0)?new Wn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==i&&(n=(e=yu(e))<0?n.dropRight(-e):n.take(e-t)),n)},Wn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Wn.prototype.toArray=function(){return this.take(p)},gr(Wn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),o=Bn[r?"take"+("last"==e?"Right":""):e],s=r||/^find/.test(e);o&&(Bn.prototype[e]=function(){var e=this.__wrapped__,u=r?[1]:arguments,a=e instanceof Wn,l=u[0],h=a||Vs(e),c=function(t){var e=o.apply(Bn,Oe([t],u));return r&&f?e[0]:e};h&&n&&"function"==typeof l&&1!=l.length&&(a=h=!1);var f=this.__chain__,p=!!this.__actions__.length,v=s&&!f,y=a&&!p;if(!s&&h){e=y?e:new Wn(this);var d=t.apply(e,u);return d.__actions__.push({func:vs,args:[c],thisArg:i}),new Fn(d,f)}return v&&y?t.apply(this,u):(d=this.thru(c),v?r?d.value()[0]:d.value():d)})})),ge(["pop","push","shift","sort","splice","unshift"],(function(t){var e=Tt[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Bn.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(Vs(i)?i:[],t)}return this[n]((function(n){return e.apply(Vs(n)?n:[],t)}))}})),gr(Wn.prototype,(function(t,e){var n=Bn[e];if(n){var r=n.name+"";Nt.call(Ln,r)||(Ln[r]=[]),Ln[r].push({name:e,func:n})}})),Ln[ki(i,2).name]=[{name:"wrapper",func:i}],Wn.prototype.clone=function(){var t=new Wn(this.__wrapped__);return t.__actions__=Ei(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Ei(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Ei(this.__views__),t},Wn.prototype.reverse=function(){if(this.__filtered__){var t=new Wn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Wn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=Vs(t),r=e<0,i=n?t.length:0,o=function(t,e,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],s=o.size;switch(o.type){case"drop":t+=s;break;case"dropRight":e-=s;break;case"take":e=Pn(e,t+s);break;case"takeRight":t=mn(t,e-s)}}return{start:t,end:e}}(0,i,this.__views__),s=o.start,u=o.end,a=u-s,l=r?u:s-1,h=this.__iteratees__,c=h.length,f=0,p=Pn(a,this.__takeCount__);if(!n||!r&&i==a&&p==a)return fi(t,this.__actions__);var v=[];t:for(;a--&&f<p;){for(var y=-1,d=t[l+=e];++y<c;){var m=h[y],P=m.iteratee,g=m.type,x=P(d);if(2==g)d=x;else if(!x){if(1==g)continue t;break t}}v[f++]=d}return v},Bn.prototype.at=ys,Bn.prototype.chain=function(){return ps(this)},Bn.prototype.commit=function(){return new Fn(this.value(),this.__chain__)},Bn.prototype.next=function(){this.__values__===i&&(this.__values__=pu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},Bn.prototype.plant=function(t){for(var e,n=this;n instanceof Zn;){var r=jo(n);r.__index__=0,r.__values__=i,e?o.__wrapped__=r:e=r;var o=r;n=n.__wrapped__}return o.__wrapped__=t,e},Bn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Wn){var e=t;return this.__actions__.length&&(e=new Wn(this)),(e=e.reverse()).__actions__.push({func:vs,args:[es],thisArg:i}),new Fn(e,this.__chain__)}return this.thru(es)},Bn.prototype.toJSON=Bn.prototype.valueOf=Bn.prototype.value=function(){return fi(this.__wrapped__,this.__actions__)},Bn.prototype.first=Bn.prototype.head,se&&(Bn.prototype[se]=function(){return this}),Bn}();oe._=ln,(r=function(){return ln}.call(e,n,e,t))===i||(t.exports=r)}.call(this)}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t=n(323);function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i=function(){function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;e(this,n),this.a=t,this.b=r,this.c=i,this.d=o,this.tx=s,this.ty=u}var i,o,s;return i=n,s=[{key:"translation",value:function(t,e){return new n(1,0,0,1,t,e)}},{key:"scale",value:function(t,e,r){void 0===e&&(e=t);var i=new n(t,0,0,e);return r&&(i=n.translation(r.x,r.y).concat(i).concat(n.translation(-r.x,-r.y))),i}},{key:"rotation",value:function(t,e){var r=new n(Math.cos(t),Math.sin(t),-Math.sin(t),Math.cos(t));return e&&(r=n.translation(e.x,e.y).concat(r).concat(n.translation(-e.x,-e.y))),r}}],(o=[{key:"clone",value:function(){return new n(this.a,this.b,this.c,this.d,this.tx,this.ty)}},{key:"concat",value:function(t){return new n(this.a*t.a+this.c*t.b,this.b*t.a+this.d*t.b,this.a*t.c+this.c*t.d,this.b*t.c+this.d*t.d,this.a*t.tx+this.c*t.ty+this.tx,this.b*t.tx+this.d*t.ty+this.ty)}},{key:"deltaTransformPoint",value:function(e){return new t.Z(this.a*e.x+this.c*e.y,this.b*e.x+this.d*e.y)}},{key:"inverse",value:function(){var t=this.a*this.d-this.b*this.c;return new n(this.d/t,-this.b/t,-this.c/t,this.a/t,(this.c*this.ty-this.d*this.tx)/t,(this.b*this.tx-this.a*this.ty)/t)}},{key:"rotate",value:function(t,e){return this.concat(n.rotation(t,e))}},{key:"scale",value:function(t,e,r){return this.concat(n.scale(t,e,r))}},{key:"translate",value:function(t,e){return this.concat(n.translation(t,e))}},{key:"transformPoint",value:function(e){return new t.Z(this.a*e.x+this.c*e.y+this.tx,this.b*e.x+this.d*e.y+this.ty)}}])&&r(i.prototype,o),s&&r(i,s),Object.defineProperty(i,"prototype",{writable:!1}),n}(),o=n(563),s=n(132),u=n(73);function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){c(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var f=function(){function e(n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),c(this,"position",new t.Z),this.ctx=n}var n,r;return n=e,r=[{key:"reset",value:function(){this.currentUnit=void 0,this.currentToolDiameter=void 0,this.currentSpeed=void 0,this.currentFeed=void 0,this.currentAtc=void 0,this.position=new t.Z}},{key:"retract",value:function(){this.rapid({z:this.ctx.retract})}},{key:"plunge",value:function(){this.rapid({z:-this.ctx.top})}},{key:"zero",value:function(t){this.ctx.driver.zero(t)}},{key:"rapid",value:function(t){var e=this.postProcess(t);e&&(this.ctx.driver.rapid(t),this.position=e)}},{key:"linear",value:function(t){var e=this.postProcess(t);e&&(this.ctx.driver.linear(t),this.position=e)}},{key:"arcCW",value:function(t){return this.arc(t,!1)}},{key:"arcCCW",value:function(t){return this.arc(t,!0)}},{key:"arc",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.postProcess(l(l({},e),{},{z:this.position.z||0})),i=this.position.x+(e.i||0),o=this.position.y+(e.j||0),u=(0,s.mb)(new t.Z(i,o),this.position,new t.Z(e.x,e.y)),a=u.radius*(u.end-u.start),h=a/(1/this.ctx.feed);(h=Math.round(1e6*h)/1e6)&&(e.f=Math.abs(h)),!n&&this.ctx.driver.arcCW?this.ctx.driver.arcCW(e):n&&this.ctx.driver.arcCCW?this.ctx.driver.arcCCW(e):this.interpolate("arc",[i,o,u.radius,u.start,u.end,n],e.z||0),r&&(this.position=r)}},{key:"postProcess",value:function(e){this.ctx.driver.unit&&this.ctx.unit!=this.currentUnit&&(this.ctx.driver.unit(this.ctx.unit),this.currentUnit=this.ctx.unit),this.ctx.driver.meta&&this.ctx.toolDiameter!=this.currentToolDiameter&&(this.ctx.driver.meta({tooldiameter:this.ctx.toolDiameter}),this.currentToolDiameter=this.ctx.toolDiameter),this.ctx.driver.speed&&this.ctx.speed!=this.currentSpeed&&(this.ctx.driver.speed(this.ctx.speed),this.currentSpeed=this.ctx.speed),this.ctx.driver.feed&&this.ctx.feed!=this.currentFeed&&(this.ctx.driver.send("G93"),this.currentFeed=this.ctx.feed);var n=new t.Z(void 0===e.x?this.position.x:e.x,void 0===e.y?this.position.y:e.y,void 0===e.z?this.position.z:e.z,void 0===e.a?this.position.a:e.a),r=this.position,i=Math.sqrt(Math.pow(r.x-n.x,2)+Math.pow(r.y-n.y,2)+Math.pow(r.z-n.z,2));if(!e.f){var o=i/(1/this.ctx.feed);(o=Math.round(1e6*o)/1e6)&&(e.f=Math.abs(o))}if((0,s.Bj)(this.position,n))return!1;for(var u in e){var a=u;"number"==typeof e[a]&&(e[a]=Math.round(1e5*e[a])/1e5)}return n}},{key:"interpolate",value:function(t,e,n){var r=new u.Z,i=r[t];"function"==typeof i&&i.apply(r,e);for(var o=0,s=r.getLength(),a=this.position.z,l=r.getPoints(40),h=0,c=l.length;h<c;++h){var f=l[h],p=f.x-this.position.x,v=f.y-this.position.y;o+=Math.sqrt(p*p+v*v),this.linear({x:f.x,y:f.y,z:a+o/s*(n-a)})}}},{key:"followPath",value:function(t,e){var n,r=this;if(!t)return!1;if("subPaths"in t)t.subPaths.forEach((function(t){r.followPath(t,e)}));else for(var i=this.position.z,o=t.getLength(),a=0,l=this,h=(this.ctx.driver,this.ctx),f=t.isClosed()&&0!=h.ramping,p=(c(n={},"MOVE_TO",(function(){for(var t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];var u=n[0],a=n[1],h=(0,s.S3)(u,r.position.x)&&(0,s.S3)(a,r.position.y);f&&h||(l.retract(),l.rapid({x:u,y:a}),l.plunge(),f||l.linear({z:e}),i=l.position.z)})),c(n,"LINE_TO",(function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e[0],i=e[1];l.linear({x:r,y:i,z:g()})})),c(n,"ELLIPSE",(function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e[0],i=e[1],o=e[2],u=e[3],a=e[4],h=e[5],c=e[6];if((0,s.S3)(o,u)){var f=(0,s.CS)(r,i,a,h,o),p={x:f.end.x,y:f.end.y,i:r-f.start.x,j:i-f.start.y,z:g()};l.arc(p,c)}else x("ellipse",e)})),c(n,"BEZIER_CURVE_TO",(function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];x("bezierCurveTo",e)})),c(n,"QUADRATIC_CURVE_TO",(function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];x("quadraticCurveTo",e)})),n),v=0,y=t.actions.length;v<y;++v){var d=t.actions[v];if(0!=v){var m=this.position.x,P=this.position.y;a+=t.getActionLength(m,P,v)}p[d.type].apply(this,d.args)}function g(){return f?0===o?0:i+a/o*(e-i):e}function x(t,e){var n=new u.Z;n.moveTo(l.position.x,l.position.y);var r=n[t];"function"==typeof r&&r.apply(n,e);for(var i=n.getPoints(40),o=0,s=i.length;o<s;++o){var a=i[o];l.linear({x:a.x,y:a.y,z:g()})}}}}],r&&h(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}();function p(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var v=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.stream=e||{write:function(t){return console.log(t)},reset:function(){}}}var e,n;return e=t,(n=[{key:"reset",value:function(){this.stream.reset()}},{key:"send",value:function(){}},{key:"init",value:function(){}},{key:"unit",value:function(t){}},{key:"speed",value:function(t){}},{key:"feed",value:function(t){}},{key:"coolant",value:function(t){}},{key:"zero",value:function(t){}},{key:"atc",value:function(t){}},{key:"rapid",value:function(t){}},{key:"linear",value:function(t){}},{key:"arcCW",value:function(t){}},{key:"arcCCW",value:function(t){}},{key:"comment",value:function(t){}},{key:"meta",value:function(t){}}])&&p(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function y(t){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},y(t)}function d(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function m(t,e){return m=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},m(t,e)}function P(t,e){if(e&&("object"===y(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function g(t){return g=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},g(t)}var x=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&m(t,e)}(o,t);var e,n,r,i=(n=o,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=g(n);if(r){var i=g(this).constructor;t=Reflect.construct(e,arguments,i)}else t=e.apply(this,arguments);return P(this,t)});function o(){return d(this,o),i.apply(this,arguments)}return e=o,Object.defineProperty(e,"prototype",{writable:!1}),e}(v);function _(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function b(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var w=function(){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),b(this,"precision",20),b(this,"align","center"),b(this,"ramping",!0),b(this,"depth",0),b(this,"depthOfCut",0),b(this,"retract",0),b(this,"speed",10),b(this,"feed",10),b(this,"act",0),b(this,"unit","mm"),b(this,"top",0),b(this,"toolDiameter",.25),b(this,"matrix",new i),b(this,"subPaths",[]),b(this,"filters",[]),b(this,"stack",[]),b(this,"_strokeStyle","#000000"),b(this,"_fillStyle","#000000"),b(this,"_font","7pt Helvetica"),b(this,"_background","#ffffff"),this.driver=t.driver||new x,this.motion=new f(this),this.canvasWidth=t.width,this.canvasHeight=t.height,t.canvas&&(this.canvasElement=t.canvas,this.ctx=this.canvasElement.getContext("2d")),t.output&&(this.outputElement=t.output),t.background&&(this._background=t.background),this.reset()}var n,r;return n=e,r=[{key:"reset",value:function(){console.clear(),this.driver.reset(),this.motion.reset(),this.path=void 0,this.clipRegion=void 0,this.subPaths=[],this.filters=[],this.stack=[],this.matrix=new i,this.ctx&&(this.ctx.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.ctx.resetTransform(),this.ctx.setTransform(window.devicePixelRatio,0,0,window.devicePixelRatio,0,0),this.ctx.fillStyle=this._background,this.ctx.fillRect(0,0,this.canvasWidth,this.canvasHeight),this.ctx.strokeStyle="#000000")}},{key:"strokeStyle",get:function(){return this._strokeStyle},set:function(t){this._strokeStyle=t,this.ctx&&(this.ctx.strokeStyle=t)}},{key:"fillStyle",get:function(){return this._fillStyle},set:function(t){this._fillStyle=t,this.ctx&&(this.ctx.fillStyle=t)}},{key:"font",get:function(){return this._fillStyle},set:function(t){this._font=t,this.ctx&&(this.ctx.font=t)}},{key:"save",value:function(){var t;this.stack.push({matrix:this.matrix,font:this.font,depth:this.depth,depthOfCut:this.depthOfCut,toolDiameter:this.toolDiameter,align:this.align,top:this.top,strokeStyle:this.strokeStyle,fillStyle:this.fillStyle,filters:this.filters.slice()}),null===(t=this.ctx)||void 0===t||t.save()}},{key:"restore",value:function(){var t,e=this,n=this.stack.pop();Object.keys(n).forEach((function(t){e[t]=n[t]})),null===(t=this.ctx)||void 0===t||t.restore()}},{key:"beginPath",value:function(){var t;this.path=new o.Z,null===(t=this.ctx)||void 0===t||t.beginPath()}},{key:"transform",value:function(t,e,n,r,o,s){var u;this.matrix=this.matrix.concat(new i(t,e,n,r,o,s)),null===(u=this.ctx)||void 0===u||u.transform(t,e,n,r,o,s)}},{key:"setTransform",value:function(t,e,n,r,o,s){var u;this.matrix=new i(t,e,n,r,o,s),null===(u=this.ctx)||void 0===u||u.setTransform(t,e,n,r,o,s)}},{key:"resetTransform",value:function(){var t;this.matrix=new i,null===(t=this.ctx)||void 0===t||t.resetTransform()}},{key:"rotate",value:function(t){var e;this.matrix=this.matrix.rotate(t),null===(e=this.ctx)||void 0===e||e.rotate(t)}},{key:"translate",value:function(t,e){var n;this.matrix=this.matrix.scale(t,e),null===(n=this.ctx)||void 0===n||n.translate(t,e)}},{key:"scale",value:function(t,e){var n;this.matrix=this.matrix.scale(t,e),null===(n=this.ctx)||void 0===n||n.scale(t,e)}},{key:"transformPoint",value:function(e){if(e instanceof Array){var n=this.matrix.transformPoint(new t.Z(e[0],e[1]));return new t.Z(n.x,n.y)}if(void 0!==e.x){var r=new t.Z(e.x,e.y);return r=this.matrix.transformPoint(r),e.x=r.x,e.y=r.y,r}}},{key:"ensurePath",value:function(t,e){this.path&&0===this.path.subPaths.length&&this.path.moveTo(t,e)}},{key:"moveTo",value:function(t,e){var n,r=this.transformPoint([t,e]),i=r.x,o=r.y;this.path.moveTo(i,o),null===(n=this.ctx)||void 0===n||n.moveTo(i,o)}},{key:"lineTo",value:function(t,e){var n,r=this.transformPoint([t,e]),i=r.x,o=r.y;this.ensurePath(i,o),this.path.lineTo(i,o),null===(n=this.ctx)||void 0===n||n.lineTo(i,o)}},{key:"arcTo",value:function(e,n,r,i,o){var u,a=this.transformPoint([e,n]),l=a.x,h=a.y,c=this.transformPoint([r,i]),f=c.x,p=c.y;this.ensurePath(l,h);var v=this.path.lastPoint()||new t.Z,y=new t.Z(l,h),d=new t.Z(f,p),m=v.subtract(y),P=d.subtract(y),g=m.x*P.y-m.y*P.x;if(Math.abs(g)<1e-10)this.lineTo(l,h);else{var x=m.magnitude(),_=P.magnitude(),b=(Math.PI-Math.abs(Math.asin(g/(x*_))))/2,w=o*Math.tan(b),C=w/x,I=new t.Z(y.x+m.x*C,y.y+m.y*C);C=w/_;var O=new t.Z(y.x+P.x*C,y.y+P.y*C),E=new t.Z((I.x+O.x)/2,(I.y+O.y)/2).subtract(y),T=E.magnitude(),S=Math.sqrt(o*o+w*w),L=new t.Z;C=S/T,L.x=y.x+E.x*C,L.y=y.y+E.y*C;var A=(0,s.mb)(L,I,O);this.path.lineTo(I.x,I.y),this.path.arc(L.x,L.y,A.radius,A.start,A.end,g>0),null===(u=this.ctx)||void 0===u||u.arcTo(l,h,f,p,o)}}},{key:"arc",value:function(){for(var e,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];var o=r[0],u=r[1],a=r[2],l=r[3],h=r[4],c=r[5];if(l-h!=0){h-l==2*-Math.PI&&(h=2*Math.PI);var f=new t.Z(o,u),p=(0,s.CS)(o,u,l,h,a);this.transformPoint(f),this.transformPoint(p.start),this.transformPoint(p.end);var v=(0,s.mb)(f,p.start,p.end);if(!this.path)throw"beginPath not called yet";this.path.arc(f.x,f.y,v.radius,v.start,v.end,c),null===(e=this.ctx)||void 0===e||e.arc(o,u,a,l,h,c)}}},{key:"circle",value:function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];this.arc(t,e,n,0,2*Math.PI,r)}},{key:"bezierCurveTo",value:function(){var t,e=this.transformPoint([arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1]]),n=e.x,r=e.y,i=this.transformPoint([arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3]]),o=i.x,s=i.y,u=this.transformPoint([arguments.length<=4?void 0:arguments[4],arguments.length<=5?void 0:arguments[5]]),a=u.x,l=u.y;this.path.bezierCurveTo(n,r,o,s,a,l),null===(t=this.ctx)||void 0===t||t.bezierCurveTo(n,r,o,s,a,l)}},{key:"quadraticCurveTo",value:function(){var t,e=this.transformPoint([arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1]]),n=e.x,r=e.y,i=this.transformPoint([arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3]]),o=i.x,s=i.y;this.path.quadraticCurveTo(n,r,o,s),null===(t=this.ctx)||void 0===t||t.quadraticCurveTo(n,r,o,s)}},{key:"clip",value:function(){var t;this.clipRegion=this.path,null===(t=this.ctx)||void 0===t||t.clip()}},{key:"rect",value:function(t,e,n,r){var i;this.moveTo(t,e),this.lineTo(t+n,e),this.lineTo(t+n,e+r),this.lineTo(t,e+r),this.closePath(),null===(i=this.ctx)||void 0===i||i.rect(t,e,n,r)}},{key:"fillRect",value:function(t,e,n,r,i){var o;this.save(),this.beginPath(),this.depth=i||this.depth,this.rect(t,e,n,r),this.fill(),this.restore(),null===(o=this.ctx)||void 0===o||o.fillRect(t,e,n,r)}},{key:"fillCircle",value:function(t,e,n,r){this.save(),this.beginPath(),this.depth=r||this.depth,this.circle(t,e,n),this.fill(),this.restore()}},{key:"clone",value:function(){}},{key:"measureText",value:function(t){return{top:0,left:0,right:0,bottom:0}}},{key:"isOpaque",value:function(t){return"transparent"!=t&&"none"!=t&&("string"!=typeof t||!t.match(/rgba\((?:.*,){3}[0\.]*\)/))}},{key:"stroke",value:function(){var t,e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.align;if(arguments.length>1&&void 0!==arguments[1]||this.depth,this.isOpaque(this.strokeStyle)){this.save();var r=0;"outer"===n&&(r=this.toolDiameter/2),"inner"===n&&(r=-this.toolDiameter/2);var i=this.path;"center"!=n&&(i=(i=i.simplify("evenodd",this.precision)).offset(r)||i),i.subPaths&&i.subPaths.forEach((function(t){"inner"==n&&(t=t.reverse()),e.layer(t,(function(n){e.motion.followPath(t,n)}))})),this.motion.retract(),this.restore(),null===(t=this.ctx)||void 0===t||t.stroke()}}},{key:"fill",value:function(t,e){var n,r=this;if(this.isOpaque(this.fillStyle)){if(this.save(),e&&(this.depth=e),!this.toolDiameter)throw"You must set context.toolDiameter to use fill()";var i=this.path;(i=(i=(i=i.simplify(t,this.precision)).clip(this.clipRegion,0,this.precision)).fillPath(this.toolDiameter,this.precision)).subPaths&&i.subPaths.forEach((function(t){r.layer(t,(function(e){r.motion.followPath(t,e)}))}),this),this.motion.retract(),this.restore(),null===(n=this.ctx)||void 0===n||n.fill()}}},{key:"clearRect",value:function(t,e,n,r){var i;null===(i=this.ctx)||void 0===i||i.clearRect(t,e,n,r)}},{key:"closePath",value:function(){var t;this.path.close(),null===(t=this.ctx)||void 0===t||t.closePath()}},{key:"layer",value:function(t,e){var n=this.depthOfCut||this.depth;if(0!==n){var r=this.depth<0;r&&n>0&&(n=-n);for(var i=Math.ceil(Math.abs(this.depth/n)),o=-this.top;i--;)o-=n,o=r?Math.max(o,this.top+this.depth):Math.max(o,-this.top-this.depth),e.call(this,o);this.ramping&&t.isClosed()&&e.call(this,o)}else e.call(this,-this.top)}}],r&&_(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}();function C(t){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},C(t)}function I(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function O(t,e){return O=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},O(t,e)}function E(t,e){if(e&&("object"===C(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function T(t){return T=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},T(t)}var S=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&O(t,e)}(s,t);var e,n,r,i,o=(r=s,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=T(r);if(i){var n=T(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return E(this,t)});function s(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,s),(e=o.call(this,t)).stream=t||{write:function(t){return console.log(t)},reset:function(){}},e}return e=s,(n=[{key:"reset",value:function(){this.stream.reset()}},{key:"send",value:function(t,e){var n="".concat(t);e&&"xyzabcijkft".split("").forEach((function(t){void 0===e[t]||null===e[t]||isNaN(e[t])||(n+=" ".concat(t.toUpperCase()).concat(e[t]))})),this.stream.write(n)}},{key:"init",value:function(){this.send("G90")}},{key:"unit",value:function(t){this.send({inch:"G20",mm:"G21"}[t])}},{key:"speed",value:function(t){this.send("S"+t)}},{key:"feed",value:function(t){this.send("F"+t)}},{key:"coolant",value:function(t){"mist"===t?this.send("M07"):t?this.send("M08"):this.send("M09")}},{key:"zero",value:function(t){this.send("G28.3",t)}},{key:"atc",value:function(t){this.send("M6",{t})}},{key:"rapid",value:function(t){this.send("G0",t)}},{key:"linear",value:function(t){this.send("G1",t)}},{key:"arcCW",value:function(t){this.send("G2",t)}},{key:"arcCCW",value:function(t){this.send("G3",t)}},{key:"comment",value:function(t){this.send("(".concat(t,")"))}},{key:"meta",value:function(t){var e="(";for(var n in t)e+="".concat(n,"=").concat(t[n]);e+=")",this.send(e)}}])&&I(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),s}(v);const L=[n(899).Z,n(715).Z,n(798).Z,n(613).Z,n(918).Z,n(511).Z,n(166).Z,n(703).Z,n(139).Z,n(97).Z,n(165).Z,n(52).Z];var A,M,N,X=function(t,e){var n=JSON.stringify(e);return localStorage.setItem(t,n),e},Y=n(486),R=1e3,D=1400,k=document.createElement("canvas"),B=(k.getContext("2d"),document.getElementById("canvas-area")),j=document.getElementById("sketch-buttons-area"),Z=document.getElementById("slider-area"),F=document.getElementById("reset"),W=document.getElementById("randomize"),z=document.getElementById("gcode"),V=(A="sketchIndex",0,null===(M=localStorage.getItem(A))?(X(A,0),0):JSON.parse(M)),q=0,U=0,H=(0,Y.throttle)((function(t){z.innerHTML=t}),1e3),G="",J=function(t){H(G=t)},$=function(t){console.clear(),console.log("Loading new sketch",t.name),U=0,q&&(window.cancelAnimationFrame(q),q=0),J(t.generateGCode?"":"(GCode disabled for this sketch)");var e=t.generateGCode?new S({reset:function(){J("")},write:function(t){H(G+=t+"\n")}}):void 0,n=new w({canvas:k,driver:e,width:R,height:D,background:"#fff"});(N=new t({ctx:n,width:R,height:D})).init(),N.initDraw(),Z.innerHTML="",Object.keys(N.vs).forEach((function(t){var e=N.vs[t],n=document.createElement("input");n.type="range",n.min=String(e.min),n.max=String(e.max),n.step=String(e.step),n.value=String(e.value);var r=function(){U=0;var e=n.value;N.vs[t].value=Number(e),N.reset(),N.initDraw()};n.addEventListener("input",(function(t){return r()})),n.addEventListener("change",(function(t){return r()}));var i=document.createElement("label"),o=document.createElement("span");o.innerText=t,i.appendChild(o),i.appendChild(n),Z.appendChild(i),e.inputElem=n})),Q()},Q=function t(){for(var e=0;e<100;e++)U++,N.draw(U);q=window.requestAnimationFrame(t)};window.addEventListener("load",(function(){k.width=R*window.devicePixelRatio,k.height=D*window.devicePixelRatio,k.style.width="".concat(R,"px"),k.style.height="".concat(D,"px"),B?B.appendChild(k):document.body.appendChild(k),L.forEach((function(t,e){var n=document.createElement("button");n.type="button",n.innerText="".concat(e+1," ").concat(t.name),V===e&&n.classList.add("active"),n.addEventListener("click",(function(){for(var r=j.getElementsByTagName("button"),i=0;i<r.length;i++)r.item(i).classList.remove("active");n.classList.add("active"),V=X("sketchIndex",e),$(t)})),j.appendChild(n)})),$(L[V]),F.addEventListener("click",(function(){N&&(U=0,N.reset(),N.initDraw())})),W.addEventListener("click",(function(){N&&(U=0,Object.keys(N.vs).forEach((function(t){N.vs[t].randomize()})),N.reset(),N.initDraw())}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,