/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={563:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(73),a=i(132),u=i(604),l=i(323);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var c=function(){function Path(){!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Path),_defineProperty(this,"subPaths",[])}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Path,[{key:"clone",value:function clone(){var t=new Path;return t.subPaths=this.subPaths.slice(0),t}},{key:"moveTo",value:function moveTo(t,r){var i=new o.Z;i.moveTo(t,r),this.subPaths.push(i),this.current=i}},{key:"ensure",value:function ensure(t,r){0===this.subPaths.length&&this.moveTo(t,r)}},{key:"close",value:function close(){if(!this.current)return!1;this.current.close()}},{key:"lineTo",value:function lineTo(){var t;this.ensure.apply(this,arguments),(t=this.current).lineTo.apply(t,arguments)}},{key:"arc",value:function arc(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var o=r[0],a=r[1],u=r[2],l=r[3],c=r[4],p=r[5];this.ellipse(o,a,u,u,l,c,p)}},{key:"ellipse",value:function ellipse(){for(var t,r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];var u=i[0],l=i[1],c=i[2],p=(i[3],i[4]),h=i[5],y=(i[6],(0,a.CS)(u,l,p,h,c));this.current&&(0,a.Bj)(this.current.lastPoint(),y.start)||this.moveTo(y.start.x,y.start.y),(t=this.current).ellipse.apply(t,i)}},{key:"quadraticCurveTo",value:function quadraticCurveTo(){var t;(t=this.current).quadraticCurveTo.apply(t,arguments)}},{key:"bezierCurveTo",value:function bezierCurveTo(){var t;(t=this.current).bezierCurveTo.apply(t,arguments)}},{key:"rect",value:function rect(t,r,i,o){this.moveTo(t,r),this.lineTo(t+i,r),this.lineTo(t+i,r+o),this.lineTo(t,r+o),this.lineTo(t,r)}},{key:"toPolys",value:function toPolys(t,r){if(!t)throw"NO SCALE!";return this.subPaths.map((function(i){return i.toPoly(t,r)}))}},{key:"fromPolys",value:function fromPolys(t,r){if(!r)throw"NO SCALE!";this.subPaths=[];for(var i=0,a=t.length;i<a;++i){var u=new o.Z;u.fromPolys(t[i],r),this.subPaths.push(u),this.current=u}return this}},{key:"clip",value:function clip(t,r,i){if(!t)return this;r=r||0;var o=1e3,a=this.toPolys(o,i),l=t.toPolys(o,i),c=new u.Clipper;c.AddPaths(a,u.PolyType.ptSubject,!0),c.AddPaths(l,u.PolyType.ptClip,!0);var p=[];c.Execute(r,p);var h=new Path;return h.fromPolys(p,o),h}},{key:"translate",value:function translate(t,r){var i=new Path;return this.subPaths.forEach((function(o){var a=o.getPoints();i.moveTo(a[0].x+t,a[0].y+r),a.slice(1).forEach((function(o){i.lineTo(o.x+t,o.y+r)}))})),i}},{key:"clipToBounds",value:function clipToBounds(t){var r,i=new Path,o=new l.Z,a=o.clone();return this.subPaths.forEach((function(u){u.getPoints().forEach((function(u,l){if(u=u.clone(),r=u.clone(),u.y<t.top){var c=(u.x-o.x)/(u.y-o.y);u.x+=c*(t.top-u.y)||0,u.y=t.top}else if(a.y<t.top){var p=(u.x-a.x)/(u.y-a.y)*(t.top-u.y)||0;i.moveTo(u.x+p,t.top)}if(u.x>t.right){var h=(u.y-o.y)/(u.x-o.x);u.y+=h*(t.right-u.x),u.x=t.right}else a.x,t.right;0===l?i.moveTo(u.x,u.y):i.lineTo(u.x,u.y),o=u,a=r}))})),i}},{key:"simplify",value:function simplify(t,r){var i=this.toPolys(1e3,r),o=u.PolyFillType.pftNonZero;"evenodd"===t&&(o=u.PolyFillType.pftEvenOdd),i=u.Clipper.SimplifyPolygons(i,o);var a=new Path;return a.fromPolys(i,1e3),a}},{key:"is",value:function is(t){return 1===this.subPaths.length&&2===this.subPaths[0].actions.length&&this.subPaths[0].actions[1].type===t}},{key:"offset",value:function offset(t,r){if(0===t)return this;if(this.is("ELLIPSE")){var i=new Path,o=this.subPaths[0].actions[1].args;return!(o[2]+t<0)&&(i.ellipse(o[0],o[1],o[2]+t,o[3]+t,o[4],o[5],o[6]),i)}var a=1e3,l=this.toPolys(a,r),c=new u.ClipperOffset;c.AddPaths(l,u.JoinType.jtMiter,u.EndType.etClosedPolygon);var p=[];try{c.Execute(p,t*a)}catch(t){return!1}if(!p||0===p.length||0===p[0].length)return!1;var h=new Path;return h.fromPolys(p,a),h.close(),h}},{key:"ramp",value:function ramp(t){}},{key:"addPath",value:function addPath(t){this.subPaths=this.subPaths.concat(t.subPaths)}},{key:"estimateMaxOffset",value:function estimateMaxOffset(t){for(var r=this.getBounds(),i=Math.abs(r.right-r.left),o=Math.abs(r.bottom-r.top),a=Math.min(i,o)/2,u=0,l=0;l<5;++l){var c=u+(a-u)/2;this.offset(-c,3)?u=c:a=c}return{lt:a,gt:u}}},{key:"fillPath",value:function fillPath(t,r){for(var i=new Path,o=Math.sin(Math.PI/4),a=this,u=a.estimateMaxOffset(5).lt,l=-(u-=t/2);l<-t/2;l+=t*o){var c=a.offset(l,r);if(!c)break;c=c.reverse(),i.addPath(c)}var p=a.offset(-t/2,r);return p&&i.addPath(p.reverse()),i}},{key:"connectEnds",value:function connectEnds(t){for(var r=this.subPaths.length-1;r>0;--r){var i=this.subPaths[r-1],o=this.subPaths[r],a=i.lastPoint(),u=o.nearestPoint(a),l=u.point;u.distance<2*t&&(o=o.shift(u.i),i.lineTo(l.x,l.y),o.actions[0].type="LINE_TO",i.actions=i.actions.concat(o.actions),this.subPaths.splice(r,1))}return this}},{key:"reverse",value:function reverse(){if(this.is("ELLIPSE")){var t=new Path,r=this.subPaths[0].actions[1].args;return t.ellipse(r[0],r[1],r[2],r[3],r[5],r[4],!r[6]),t}var i=new Path;return i.subPaths=this.subPaths.map((function(t){return t.reverse()})).reverse(),i}},{key:"sort",value:function sort(){if(0===this.subPaths.length)return this;var t=new Path,r=this.subPaths[0].lastPoint();return t.subPaths=this.subPaths.sort((function(t,i){var o=t.lastPoint(),a=i.firstPoint(),u=l.Z.distance(o,r),c=l.Z.distance(a,r);return r=i.lastPoint(),u<c?-1:u>c?1:0})),t}},{key:"firstPoint",value:function firstPoint(){return!!this.current&&this.subPaths[0].firstPoint()}},{key:"lastPoint",value:function lastPoint(){return!!this.current&&this.subPaths[this.subPaths.length-1].lastPoint()}},{key:"getPoints",value:function getPoints(t){var r=[];return this.subPaths.forEach((function(i){r.push.apply(r,_toConsumableArray(i.getPoints(t)))})),r}},{key:"getBounds",value:function getBounds(){var t=this.getPoints(),r=this.firstPoint()||new l.Z,i={left:r.x,top:r.y,right:r.x,bottom:r.y};return t.forEach((function(t){i.left=Math.min(i.left,t.x),i.top=Math.min(i.top,t.y),i.right=Math.max(i.right,t.x),i.bottom=Math.max(i.bottom,t.y)})),i}}]),Path}();_defineProperty(c,"actions",o.Z.actions)},323:(t,r,i)=>{"use strict";function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(a=o.key,u=void 0,u=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===_typeof(u)?u:String(u)),o)}var a,u}i.d(r,{Z:()=>o});var o=function(){function Point(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2?arguments[2]:void 0,o=arguments.length>3?arguments[3]:void 0;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Point),this.x=isNaN(t)?0:t,this.y=isNaN(r)?0:r,this.z=isNaN(i)?0:i,this.a=isNaN(o)?0:o}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Point,[{key:"clone",value:function clone(){return new Point(this.x,this.y)}},{key:"round",value:function round(){return new Point(Math.round(this.x),Math.round(this.y))}},{key:"equals",value:function equals(t){return this.x===t.x&&this.y===t.y}},{key:"add",value:function add(t){return new Point(this.x+t.x,this.y+t.y)}},{key:"midpoint",value:function midpoint(t){return new Point((this.x+t.x)/2,(this.y+t.y)/2)}},{key:"subtract",value:function subtract(t){return new Point(this.x-t.x,this.y-t.y)}},{key:"magnitude",value:function magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}},{key:"angle",value:function angle(){return Math.atan2(this.y,this.x)}},{key:"multiply",value:function multiply(t){return"number"==typeof t?new Point(this.x*t,this.y*t):new Point(this.x*t.x,this.y*t.y)}},{key:"scale",value:function scale(t){return this.multiply(t)}},{key:"divide",value:function divide(t){return"number"==typeof t?new Point(this.x/t,this.y/t):new Point(this.x/t.x,this.y/t.y)}},{key:"normalize",value:function normalize(){return this.multiply(1/this.magnitude())}},{key:"set",value:function set(t,r){this.x=t,this.y=r}},{key:"dot",value:function dot(t){return this.x*t.x+this.y*t.y}},{key:"translate",value:function translate(t,r){return new Point(this.x+t,this.y+r)}},{key:"moveAlongAngle",value:function moveAlongAngle(t,r){return this.translate(Math.cos(t)*r,Math.sin(t)*r)}},{key:"moveTowards",value:function moveTowards(t,r){var i=this.angleTo(t);return this.moveAlongAngle(i,r)}},{key:"rotate",value:function rotate(t){return new Point(this.x*Math.cos(t)-this.y*Math.sin(t),this.x*Math.sin(t)+this.y*Math.cos(t))}},{key:"angleTo",value:function angleTo(t){return Math.atan2(t.y-this.y,t.x-this.x)}},{key:"distanceTo",value:function distanceTo(t){return Math.sqrt(Math.pow(t.x-this.x,2)+Math.pow(t.y-this.y,2))}},{key:"angleBetween",value:function angleBetween(t){return Math.acos(this.dot(t)/(this.magnitude()*t.magnitude()))}},{key:"toUnit",value:function toUnit(){return this.multiply(1/this.magnitude())}}],[{key:"distance",value:function distance(t,r){return Math.sqrt(Math.pow(r.x-t.x,2)+Math.pow(r.y-t.y,2))}},{key:"angleBetween",value:function angleBetween(t,r){return Math.acos(t.dot(r)/(t.magnitude()*r.magnitude()))}}]),Point}()},204:(t,r,i)=>{"use strict";function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}i.d(r,{v:()=>o});var o=function(){function Sketch(t){!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Sketch),_defineProperty(this,"vs",{}),this.ctx=t.ctx,this.ctx.enableCutouts=Sketch.enableCutouts,this.canvasWidth=this.cw=t.width,this.canvasHeight=this.ch=t.height,this.cx=this.canvasWidth/2,this.cy=this.canvasHeight/2}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Sketch,[{key:"init",value:function init(){}},{key:"initDraw",value:function initDraw(){}},{key:"draw",value:function draw(t){}},{key:"reset",value:function reset(){this.ctx.reset()}}]),Sketch}();_defineProperty(o,"generateGCode",!0),_defineProperty(o,"enableCutouts",!0)},73:(t,r,i)=>{"use strict";i.d(r,{Z:()=>l});var o=i(563),a=i(323),u=i(132);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _slicedToArray(t,r){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,r){var i=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=i){var o,a,u,l,c=[],p=!0,h=!1;try{if(u=(i=i.call(t)).next,0===r){if(Object(i)!==i)return;p=!1}else for(;!(p=(o=u.call(i)).done)&&(c.push(o.value),c.length!==r);p=!0);}catch(t){h=!0,a=t}finally{try{if(!p&&null!=i.return&&(l=i.return(),Object(l)!==l))return}finally{if(h)throw a}}return c}}(t,r)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t,r)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var l=function(){function SubPath(t){!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,SubPath),_defineProperty(this,"actions",[]),_defineProperty(this,"pointsCache",[]),t&&this.fromPoints(t)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(SubPath,[{key:"clone",value:function clone(){var t=new SubPath;return t.actions=this.actions.slice(0),t}},{key:"isClosed",value:function isClosed(){return(0,u.Bj)(this.firstPoint(),this.lastPoint())}},{key:"closed",get:function get(){return this.isClosed()}},{key:"offset",value:function offset(t){var r=this.toPath().offset(t);return!!r&&r.subPaths[0]}},{key:"simplify",value:function simplify(){var t=this.toPath().simplify();return!!t&&t.subPaths[0]}},{key:"toPath",value:function toPath(){var t=this.clone(),r=new o.Z;return r.subPaths.push(t),r.current=r.subPaths[r.subPaths.length-1],r}},{key:"addAction",value:function addAction(t){this.actions.push(t),this.pointsCache=[]}},{key:"firstPoint",value:function firstPoint(){var t=new a.Z(0,0),r=this.actions[0];if("ELLIPSE"===r.type)t=(0,u.CS)(r.args[0],r.args[1],r.args[4],r.args[5],r.args[2]).start;else t.x=r.args[r.args.length-2],t.y=r.args[r.args.length-1];return t}},{key:"lastPoint",value:function lastPoint(){var t=new a.Z(0,0),r=this.actions[this.actions.length-1];if("ELLIPSE"===r.type)t=(0,u.CS)(r.args[0],r.args[1],r.args[4],r.args[5],r.args[2]).end;else t.x=r.args[r.args.length-2],t.y=r.args[r.args.length-1];return t}},{key:"fromPoints",value:function fromPoints(t){this.moveTo(t[0].x,t[0].y);for(var r=1,i=t.length;r<i;r++)this.lineTo(t[r].x,t[r].y)}},{key:"getActionLength",value:function getActionLength(t,r,i){var o=this.actions[i];if("ELLIPSE"===o.type){var a=_slicedToArray(o.args,7),u=(a[0],a[1],a[2],a[3]),l=a[4],c=a[5];a[6];return o.args,(c-l)*u}var p=o.args,h=p[p.length-2]-t,y=p[p.length-1]-r;return Math.sqrt(h*h+y*y)}},{key:"getLength",value:function getLength(){for(var t=0,r=this.firstPoint(),i=this.getPoints(1e4),o=1,a=i.length;o<a;++o){var u=i[o],l=r.x,c=r.y,p=u.x-l,h=u.y-c;t+=Math.sqrt(p*p+h*h)}return t}},{key:"nearestPoint",value:function nearestPoint(t){var r,i,o=new a.Z,u=1/0;return this.actions.forEach((function(l,c){if("ELLIPSE"===l.type){var p=_slicedToArray(l.args,7),h=p[0],y=p[1],d=p[2],v=p[3],m=p[4];p[5],p[6];o.x=h+d*Math.cos(m),o.y=y+v*Math.sin(m)}else o.x=l.args[l.args.length-2],o.y=l.args[l.args.length-1];var b=a.Z.distance(t,o);b<u&&(r=c,i=o.clone(),u=b)})),{i:r,distance:u,point:i}}},{key:"pointAt",value:function pointAt(t){var r=new a.Z,i=this.actions[t];if("LINE_TO"===i.type)r.x=i.args[i.args.length-2],r.y=i.args[i.args.length-1];return r}},{key:"shiftToNearest",value:function shiftToNearest(t,r){var i=this.nearestPoint(new a.Z(t,r));return this.shift(i.i)}},{key:"shift",value:function shift(t){if(0===t)return this;var r=new SubPath;return r.actions=this.actions.slice(t).concat(this.actions.slice(0,t)),r.actions.forEach((function(t){t.type="LINE_TO"})),r.lineTo(r.actions[0].args[0],r.actions[0].args[1]),r}},{key:"moveTo",value:function moveTo(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"MOVE_TO",args:r})}},{key:"lineTo",value:function lineTo(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"LINE_TO",args:r})}},{key:"quadraticCurveTo",value:function quadraticCurveTo(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"QUADRATIC_CURVE_TO",args:r})}},{key:"bezierCurveTo",value:function bezierCurveTo(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"BEZIER_CURVE_TO",args:r})}},{key:"arc",value:function arc(){this.ellipse.apply(this,arguments)}},{key:"ellipse",value:function ellipse(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"ELLIPSE",args:r})}},{key:"getPoints",value:function getPoints(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:40,r=[],i=0,o=this.actions.length;i<o;i++){var u=this.actions[i];switch(u.type){case"MOVE_TO":case"LINE_TO":r.push(new a.Z(u.args[0],u.args[1]));break;case"QUADRATIC_CURVE_TO":var l=void 0,h=void 0,y=_slicedToArray(u.args,4),d=y[0],v=y[1],m=y[2],b=y[3];if(r.length>0){var P=r[r.length-1];l=P.x,h=P.y}else{var _=this.actions[i-1];if("ELLIPSE"!==_.type){var g=_.args;l=g[g.length-2],h=g[g.length-1]}else l=_.args[0],h=_.args[1]}for(var x=1;x<=t;x++){var w=x/t,I=c(w,l,d,m),C=c(w,h,v,b);r.push(new a.Z(I,C))}break;case"BEZIER_CURVE_TO":var O=void 0,S=void 0,T=_slicedToArray(u.args,6),A=T[0],E=T[1],L=T[2],k=T[3],M=T[4],R=T[5];if(r.length>0){var j=r[r.length-1];O=j.x,S=j.y}else{var N=this.actions[i-1];if("ELLIPSE"!==N.type){var B=N.args;O=B[B.length-2],S=B[B.length-1]}else O=N.args[0],S=N.args[1]}for(var D=1;D<=t;D++){var X=D/t,Y=p(X,O,A,L,M),Z=p(X,S,E,k,R);r.push(new a.Z(Y,Z))}break;case"ELLIPSE":var z=void 0,W=void 0,V=_slicedToArray(u.args,7),q=V[0],G=V[1],U=V[2],H=V[3],K=V[4],J=V[5],$=V[6],Q=J-K,tt=void 0;for(z=0;z<=t;z++){W=z/t,Q===2*-Math.PI&&(Q=2*Math.PI),Q<0&&(Q+=2*Math.PI),Q>2*Math.PI&&(Q-=2*Math.PI),$?(Q===2*Math.PI&&(Q=0),tt=J+(1-W)*(2*Math.PI-Q)):tt=K+W*Q;var et=q+U*Math.cos(tt),rt=G+H*Math.sin(tt);r.push(new a.Z(et,rt))}}}return this.closed&&r.push(r[0]),r}},{key:"toPoly",value:function toPoly(t,r){return this.getPoints(r).map((function(r){return{X:r.x*t,Y:r.y*t}}))}},{key:"fromPolys",value:function fromPolys(t,r){r=1/r,this.moveTo(t[0].X*r,t[0].Y*r);for(var i=1,o=t.length;i<o;++i)this.lineTo(t[i].X*r,t[i].Y*r);return this.close(),this}},{key:"close",value:function close(){if(!this.isClosed()){var t=this.actions[0].args;this.lineTo.apply(this,t)}}},{key:"reverse",value:function reverse(){var t=new SubPath,r=this.getPoints().reverse();if(0==r.length)return t;t.moveTo(r[0].x,r[0].y);for(var i=1,o=r.length;i<o;++i)t.lineTo(r[i].x,r[i].y);return t}}]),SubPath}();_defineProperty(l,"actions",{MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",ELLIPSE:"ellipse"});var c=function b2(t,r,i,o){return function b2p0(t,r){var i=1-t;return i*i*r}(t,r)+function b2p1(t,r){return 2*(1-t)*t*r}(t,i)+function b2p2(t,r){return t*t*r}(t,o)},p=function b3(t,r,i,o,a){return function b3p0(t,r){var i=1-t;return i*i*i*r}(t,r)+function b3p1(t,r){var i=1-t;return 3*i*i*t*r}(t,i)+function b3p2(t,r){return 3*(1-t)*t*t*r}(t,o)+function b3p3(t,r){return t*t*t*r}(t,a)}},604:t=>{!function(){"use strict";var r,i={version:"6.4.2.2",use_lines:!0,use_xyz:!1},o=!1;if(t.exports?(t.exports=i,o=!0):"undefined"!=typeof document?window.ClipperLib=i:self.ClipperLib=i,o){a="chrome";r="Netscape"}else{var a=navigator.userAgent.toString().toLowerCase();r=navigator.appName}var u,l={};-1!=a.indexOf("chrome")&&-1==a.indexOf("chromium")?l.chrome=1:l.chrome=0,-1!=a.indexOf("chromium")?l.chromium=1:l.chromium=0,-1!=a.indexOf("safari")&&-1==a.indexOf("chrome")&&-1==a.indexOf("chromium")?l.safari=1:l.safari=0,-1!=a.indexOf("firefox")?l.firefox=1:l.firefox=0,-1!=a.indexOf("firefox/17")?l.firefox17=1:l.firefox17=0,-1!=a.indexOf("firefox/15")?l.firefox15=1:l.firefox15=0,-1!=a.indexOf("firefox/3")?l.firefox3=1:l.firefox3=0,-1!=a.indexOf("opera")?l.opera=1:l.opera=0,-1!=a.indexOf("msie 10")?l.msie10=1:l.msie10=0,-1!=a.indexOf("msie 9")?l.msie9=1:l.msie9=0,-1!=a.indexOf("msie 8")?l.msie8=1:l.msie8=0,-1!=a.indexOf("msie 7")?l.msie7=1:l.msie7=0,-1!=a.indexOf("msie ")?l.msie=1:l.msie=0,i.biginteger_used=null;function BigInteger(t,r,o){i.biginteger_used=1,null!=t&&("number"==typeof t&&void 0===r?this.fromInt(t):"number"==typeof t?this.fromNumber(t,r,o):null==r&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,r))}function nbi(){return new BigInteger(null,void 0,void 0)}"Microsoft Internet Explorer"==r?(BigInteger.prototype.am=function am2(t,r,i,o,a,u){for(var l=32767&r,c=r>>15;--u>=0;){var p=32767&this[t],h=this[t++]>>15,y=c*p+h*l;a=((p=l*p+((32767&y)<<15)+i[o]+(1073741823&a))>>>30)+(y>>>15)+c*h+(a>>>30),i[o++]=1073741823&p}return a},u=30):"Netscape"!=r?(BigInteger.prototype.am=function am1(t,r,i,o,a,u){for(;--u>=0;){var l=r*this[t++]+i[o]+a;a=Math.floor(l/67108864),i[o++]=67108863&l}return a},u=26):(BigInteger.prototype.am=function am3(t,r,i,o,a,u){for(var l=16383&r,c=r>>14;--u>=0;){var p=16383&this[t],h=this[t++]>>14,y=c*p+h*l;a=((p=l*p+((16383&y)<<14)+i[o]+a)>>28)+(y>>14)+c*h,i[o++]=268435455&p}return a},u=28),BigInteger.prototype.DB=u,BigInteger.prototype.DM=(1<<u)-1,BigInteger.prototype.DV=1<<u;BigInteger.prototype.FV=Math.pow(2,52),BigInteger.prototype.F1=52-u,BigInteger.prototype.F2=2*u-52;var c,p,h="0123456789abcdefghijklmnopqrstuvwxyz",y=new Array;for(c="0".charCodeAt(0),p=0;p<=9;++p)y[c++]=p;for(c="a".charCodeAt(0),p=10;p<36;++p)y[c++]=p;for(c="A".charCodeAt(0),p=10;p<36;++p)y[c++]=p;function int2char(t){return h.charAt(t)}function intAt(t,r){var i=y[t.charCodeAt(r)];return null==i?-1:i}function nbv(t){var r=nbi();return r.fromInt(t),r}function nbits(t){var r,i=1;return 0!=(r=t>>>16)&&(t=r,i+=16),0!=(r=t>>8)&&(t=r,i+=8),0!=(r=t>>4)&&(t=r,i+=4),0!=(r=t>>2)&&(t=r,i+=2),0!=(r=t>>1)&&(t=r,i+=1),i}function Classic(t){this.m=t}function Montgomery(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function op_and(t,r){return t&r}function op_or(t,r){return t|r}function op_xor(t,r){return t^r}function op_andnot(t,r){return t&~r}function lbit(t){if(0==t)return-1;var r=0;return 0==(65535&t)&&(t>>=16,r+=16),0==(255&t)&&(t>>=8,r+=8),0==(15&t)&&(t>>=4,r+=4),0==(3&t)&&(t>>=2,r+=2),0==(1&t)&&++r,r}function cbit(t){for(var r=0;0!=t;)t&=t-1,++r;return r}function NullExp(){}function nNop(t){return t}function Barrett(t){this.r2=nbi(),this.q3=nbi(),BigInteger.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}Classic.prototype.convert=function cConvert(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},Classic.prototype.revert=function cRevert(t){return t},Classic.prototype.reduce=function cReduce(t){t.divRemTo(this.m,null,t)},Classic.prototype.mulTo=function cMulTo(t,r,i){t.multiplyTo(r,i),this.reduce(i)},Classic.prototype.sqrTo=function cSqrTo(t,r){t.squareTo(r),this.reduce(r)},Montgomery.prototype.convert=function montConvert(t){var r=nbi();return t.abs().dlShiftTo(this.m.t,r),r.divRemTo(this.m,null,r),t.s<0&&r.compareTo(BigInteger.ZERO)>0&&this.m.subTo(r,r),r},Montgomery.prototype.revert=function montRevert(t){var r=nbi();return t.copyTo(r),this.reduce(r),r},Montgomery.prototype.reduce=function montReduce(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var r=0;r<this.m.t;++r){var i=32767&t[r],o=i*this.mpl+((i*this.mph+(t[r]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=r+this.m.t]+=this.m.am(0,o,t,r,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},Montgomery.prototype.mulTo=function montMulTo(t,r,i){t.multiplyTo(r,i),this.reduce(i)},Montgomery.prototype.sqrTo=function montSqrTo(t,r){t.squareTo(r),this.reduce(r)},BigInteger.prototype.copyTo=function bnpCopyTo(t){for(var r=this.t-1;r>=0;--r)t[r]=this[r];t.t=this.t,t.s=this.s},BigInteger.prototype.fromInt=function bnpFromInt(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},BigInteger.prototype.fromString=function bnpFromString(t,r){var i;if(16==r)i=4;else if(8==r)i=3;else if(256==r)i=8;else if(2==r)i=1;else if(32==r)i=5;else{if(4!=r)return void this.fromRadix(t,r);i=2}this.t=0,this.s=0;for(var o=t.length,a=!1,u=0;--o>=0;){var l=8==i?255&t[o]:intAt(t,o);l<0?"-"==t.charAt(o)&&(a=!0):(a=!1,0==u?this[this.t++]=l:u+i>this.DB?(this[this.t-1]|=(l&(1<<this.DB-u)-1)<<u,this[this.t++]=l>>this.DB-u):this[this.t-1]|=l<<u,(u+=i)>=this.DB&&(u-=this.DB))}8==i&&0!=(128&t[0])&&(this.s=-1,u>0&&(this[this.t-1]|=(1<<this.DB-u)-1<<u)),this.clamp(),a&&BigInteger.ZERO.subTo(this,this)},BigInteger.prototype.clamp=function bnpClamp(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},BigInteger.prototype.dlShiftTo=function bnpDLShiftTo(t,r){var i;for(i=this.t-1;i>=0;--i)r[i+t]=this[i];for(i=t-1;i>=0;--i)r[i]=0;r.t=this.t+t,r.s=this.s},BigInteger.prototype.drShiftTo=function bnpDRShiftTo(t,r){for(var i=t;i<this.t;++i)r[i-t]=this[i];r.t=Math.max(this.t-t,0),r.s=this.s},BigInteger.prototype.lShiftTo=function bnpLShiftTo(t,r){var i,o=t%this.DB,a=this.DB-o,u=(1<<a)-1,l=Math.floor(t/this.DB),c=this.s<<o&this.DM;for(i=this.t-1;i>=0;--i)r[i+l+1]=this[i]>>a|c,c=(this[i]&u)<<o;for(i=l-1;i>=0;--i)r[i]=0;r[l]=c,r.t=this.t+l+1,r.s=this.s,r.clamp()},BigInteger.prototype.rShiftTo=function bnpRShiftTo(t,r){r.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)r.t=0;else{var o=t%this.DB,a=this.DB-o,u=(1<<o)-1;r[0]=this[i]>>o;for(var l=i+1;l<this.t;++l)r[l-i-1]|=(this[l]&u)<<a,r[l-i]=this[l]>>o;o>0&&(r[this.t-i-1]|=(this.s&u)<<a),r.t=this.t-i,r.clamp()}},BigInteger.prototype.subTo=function bnpSubTo(t,r){for(var i=0,o=0,a=Math.min(t.t,this.t);i<a;)o+=this[i]-t[i],r[i++]=o&this.DM,o>>=this.DB;if(t.t<this.t){for(o-=t.s;i<this.t;)o+=this[i],r[i++]=o&this.DM,o>>=this.DB;o+=this.s}else{for(o+=this.s;i<t.t;)o-=t[i],r[i++]=o&this.DM,o>>=this.DB;o-=t.s}r.s=o<0?-1:0,o<-1?r[i++]=this.DV+o:o>0&&(r[i++]=o),r.t=i,r.clamp()},BigInteger.prototype.multiplyTo=function bnpMultiplyTo(t,r){var i=this.abs(),o=t.abs(),a=i.t;for(r.t=a+o.t;--a>=0;)r[a]=0;for(a=0;a<o.t;++a)r[a+i.t]=i.am(0,o[a],r,a,0,i.t);r.s=0,r.clamp(),this.s!=t.s&&BigInteger.ZERO.subTo(r,r)},BigInteger.prototype.squareTo=function bnpSquareTo(t){for(var r=this.abs(),i=t.t=2*r.t;--i>=0;)t[i]=0;for(i=0;i<r.t-1;++i){var o=r.am(i,r[i],t,2*i,0,1);(t[i+r.t]+=r.am(i+1,2*r[i],t,2*i+1,o,r.t-i-1))>=r.DV&&(t[i+r.t]-=r.DV,t[i+r.t+1]=1)}t.t>0&&(t[t.t-1]+=r.am(i,r[i],t,2*i,0,1)),t.s=0,t.clamp()},BigInteger.prototype.divRemTo=function bnpDivRemTo(t,r,i){var o=t.abs();if(!(o.t<=0)){var a=this.abs();if(a.t<o.t)return null!=r&&r.fromInt(0),void(null!=i&&this.copyTo(i));null==i&&(i=nbi());var u=nbi(),l=this.s,c=t.s,p=this.DB-nbits(o[o.t-1]);p>0?(o.lShiftTo(p,u),a.lShiftTo(p,i)):(o.copyTo(u),a.copyTo(i));var h=u.t,y=u[h-1];if(0!=y){var d=y*(1<<this.F1)+(h>1?u[h-2]>>this.F2:0),v=this.FV/d,m=(1<<this.F1)/d,b=1<<this.F2,P=i.t,_=P-h,g=null==r?nbi():r;for(u.dlShiftTo(_,g),i.compareTo(g)>=0&&(i[i.t++]=1,i.subTo(g,i)),BigInteger.ONE.dlShiftTo(h,g),g.subTo(u,u);u.t<h;)u[u.t++]=0;for(;--_>=0;){var x=i[--P]==y?this.DM:Math.floor(i[P]*v+(i[P-1]+b)*m);if((i[P]+=u.am(0,x,i,_,0,h))<x)for(u.dlShiftTo(_,g),i.subTo(g,i);i[P]<--x;)i.subTo(g,i)}null!=r&&(i.drShiftTo(h,r),l!=c&&BigInteger.ZERO.subTo(r,r)),i.t=h,i.clamp(),p>0&&i.rShiftTo(p,i),l<0&&BigInteger.ZERO.subTo(i,i)}}},BigInteger.prototype.invDigit=function bnpInvDigit(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var r=3&t;return(r=(r=(r=(r=r*(2-(15&t)*r)&15)*(2-(255&t)*r)&255)*(2-((65535&t)*r&65535))&65535)*(2-t*r%this.DV)%this.DV)>0?this.DV-r:-r},BigInteger.prototype.isEven=function bnpIsEven(){return 0==(this.t>0?1&this[0]:this.s)},BigInteger.prototype.exp=function bnpExp(t,r){if(t>4294967295||t<1)return BigInteger.ONE;var i=nbi(),o=nbi(),a=r.convert(this),u=nbits(t)-1;for(a.copyTo(i);--u>=0;)if(r.sqrTo(i,o),(t&1<<u)>0)r.mulTo(o,a,i);else{var l=i;i=o,o=l}return r.revert(i)},BigInteger.prototype.toString=function bnToString(t){if(this.s<0)return"-"+this.negate().toString(t);var r;if(16==t)r=4;else if(8==t)r=3;else if(2==t)r=1;else if(32==t)r=5;else{if(4!=t)return this.toRadix(t);r=2}var i,o=(1<<r)-1,a=!1,u="",l=this.t,c=this.DB-l*this.DB%r;if(l-- >0)for(c<this.DB&&(i=this[l]>>c)>0&&(a=!0,u=int2char(i));l>=0;)c<r?(i=(this[l]&(1<<c)-1)<<r-c,i|=this[--l]>>(c+=this.DB-r)):(i=this[l]>>(c-=r)&o,c<=0&&(c+=this.DB,--l)),i>0&&(a=!0),a&&(u+=int2char(i));return a?u:"0"},BigInteger.prototype.negate=function bnNegate(){var t=nbi();return BigInteger.ZERO.subTo(this,t),t},BigInteger.prototype.abs=function bnAbs(){return this.s<0?this.negate():this},BigInteger.prototype.compareTo=function bnCompareTo(t){var r=this.s-t.s;if(0!=r)return r;var i=this.t;if(0!=(r=i-t.t))return this.s<0?-r:r;for(;--i>=0;)if(0!=(r=this[i]-t[i]))return r;return 0},BigInteger.prototype.bitLength=function bnBitLength(){return this.t<=0?0:this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)},BigInteger.prototype.mod=function bnMod(t){var r=nbi();return this.abs().divRemTo(t,null,r),this.s<0&&r.compareTo(BigInteger.ZERO)>0&&t.subTo(r,r),r},BigInteger.prototype.modPowInt=function bnModPowInt(t,r){var i;return i=t<256||r.isEven()?new Classic(r):new Montgomery(r),this.exp(t,i)},BigInteger.ZERO=nbv(0),BigInteger.ONE=nbv(1),NullExp.prototype.convert=nNop,NullExp.prototype.revert=nNop,NullExp.prototype.mulTo=function nMulTo(t,r,i){t.multiplyTo(r,i)},NullExp.prototype.sqrTo=function nSqrTo(t,r){t.squareTo(r)},Barrett.prototype.convert=function barrettConvert(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var r=nbi();return t.copyTo(r),this.reduce(r),r},Barrett.prototype.revert=function barrettRevert(t){return t},Barrett.prototype.reduce=function barrettReduce(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},Barrett.prototype.mulTo=function barrettMulTo(t,r,i){t.multiplyTo(r,i),this.reduce(i)},Barrett.prototype.sqrTo=function barrettSqrTo(t,r){t.squareTo(r),this.reduce(r)};var d=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],v=(1<<26)/d[d.length-1];BigInteger.prototype.chunkSize=function bnpChunkSize(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},BigInteger.prototype.toRadix=function bnpToRadix(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var r=this.chunkSize(t),i=Math.pow(t,r),o=nbv(i),a=nbi(),u=nbi(),l="";for(this.divRemTo(o,a,u);a.signum()>0;)l=(i+u.intValue()).toString(t).substr(1)+l,a.divRemTo(o,a,u);return u.intValue().toString(t)+l},BigInteger.prototype.fromRadix=function bnpFromRadix(t,r){this.fromInt(0),null==r&&(r=10);for(var i=this.chunkSize(r),o=Math.pow(r,i),a=!1,u=0,l=0,c=0;c<t.length;++c){var p=intAt(t,c);p<0?"-"==t.charAt(c)&&0==this.signum()&&(a=!0):(l=r*l+p,++u>=i&&(this.dMultiply(o),this.dAddOffset(l,0),u=0,l=0))}u>0&&(this.dMultiply(Math.pow(r,u)),this.dAddOffset(l,0)),a&&BigInteger.ZERO.subTo(this,this)},BigInteger.prototype.fromNumber=function bnpFromNumber(t,r,i){if("number"==typeof r)if(t<2)this.fromInt(1);else for(this.fromNumber(t,i),this.testBit(t-1)||this.bitwiseTo(BigInteger.ONE.shiftLeft(t-1),op_or,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(r);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(BigInteger.ONE.shiftLeft(t-1),this);else{var o=new Array,a=7&t;o.length=1+(t>>3),r.nextBytes(o),a>0?o[0]&=(1<<a)-1:o[0]=0,this.fromString(o,256)}},BigInteger.prototype.bitwiseTo=function bnpBitwiseTo(t,r,i){var o,a,u=Math.min(t.t,this.t);for(o=0;o<u;++o)i[o]=r(this[o],t[o]);if(t.t<this.t){for(a=t.s&this.DM,o=u;o<this.t;++o)i[o]=r(this[o],a);i.t=this.t}else{for(a=this.s&this.DM,o=u;o<t.t;++o)i[o]=r(a,t[o]);i.t=t.t}i.s=r(this.s,t.s),i.clamp()},BigInteger.prototype.changeBit=function bnpChangeBit(t,r){var i=BigInteger.ONE.shiftLeft(t);return this.bitwiseTo(i,r,i),i},BigInteger.prototype.addTo=function bnpAddTo(t,r){for(var i=0,o=0,a=Math.min(t.t,this.t);i<a;)o+=this[i]+t[i],r[i++]=o&this.DM,o>>=this.DB;if(t.t<this.t){for(o+=t.s;i<this.t;)o+=this[i],r[i++]=o&this.DM,o>>=this.DB;o+=this.s}else{for(o+=this.s;i<t.t;)o+=t[i],r[i++]=o&this.DM,o>>=this.DB;o+=t.s}r.s=o<0?-1:0,o>0?r[i++]=o:o<-1&&(r[i++]=this.DV+o),r.t=i,r.clamp()},BigInteger.prototype.dMultiply=function bnpDMultiply(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},BigInteger.prototype.dAddOffset=function bnpDAddOffset(t,r){if(0!=t){for(;this.t<=r;)this[this.t++]=0;for(this[r]+=t;this[r]>=this.DV;)this[r]-=this.DV,++r>=this.t&&(this[this.t++]=0),++this[r]}},BigInteger.prototype.multiplyLowerTo=function bnpMultiplyLowerTo(t,r,i){var o,a=Math.min(this.t+t.t,r);for(i.s=0,i.t=a;a>0;)i[--a]=0;for(o=i.t-this.t;a<o;++a)i[a+this.t]=this.am(0,t[a],i,a,0,this.t);for(o=Math.min(t.t,r);a<o;++a)this.am(0,t[a],i,a,0,r-a);i.clamp()},BigInteger.prototype.multiplyUpperTo=function bnpMultiplyUpperTo(t,r,i){--r;var o=i.t=this.t+t.t-r;for(i.s=0;--o>=0;)i[o]=0;for(o=Math.max(r-this.t,0);o<t.t;++o)i[this.t+o-r]=this.am(r-o,t[o],i,0,0,this.t+o-r);i.clamp(),i.drShiftTo(1,i)},BigInteger.prototype.modInt=function bnpModInt(t){if(t<=0)return 0;var r=this.DV%t,i=this.s<0?t-1:0;if(this.t>0)if(0==r)i=this[0]%t;else for(var o=this.t-1;o>=0;--o)i=(r*i+this[o])%t;return i},BigInteger.prototype.millerRabin=function bnpMillerRabin(t){var r=this.subtract(BigInteger.ONE),i=r.getLowestSetBit();if(i<=0)return!1;var o=r.shiftRight(i);(t=t+1>>1)>d.length&&(t=d.length);for(var a=nbi(),u=0;u<t;++u){a.fromInt(d[Math.floor(Math.random()*d.length)]);var l=a.modPow(o,this);if(0!=l.compareTo(BigInteger.ONE)&&0!=l.compareTo(r)){for(var c=1;c++<i&&0!=l.compareTo(r);)if(0==(l=l.modPowInt(2,this)).compareTo(BigInteger.ONE))return!1;if(0!=l.compareTo(r))return!1}}return!0},BigInteger.prototype.clone=function bnClone(){var t=nbi();return this.copyTo(t),t},BigInteger.prototype.intValue=function bnIntValue(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},BigInteger.prototype.byteValue=function bnByteValue(){return 0==this.t?this.s:this[0]<<24>>24},BigInteger.prototype.shortValue=function bnShortValue(){return 0==this.t?this.s:this[0]<<16>>16},BigInteger.prototype.signum=function bnSigNum(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},BigInteger.prototype.toByteArray=function bnToByteArray(){var t=this.t,r=new Array;r[0]=this.s;var i,o=this.DB-t*this.DB%8,a=0;if(t-- >0)for(o<this.DB&&(i=this[t]>>o)!=(this.s&this.DM)>>o&&(r[a++]=i|this.s<<this.DB-o);t>=0;)o<8?(i=(this[t]&(1<<o)-1)<<8-o,i|=this[--t]>>(o+=this.DB-8)):(i=this[t]>>(o-=8)&255,o<=0&&(o+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==a&&(128&this.s)!=(128&i)&&++a,(a>0||i!=this.s)&&(r[a++]=i);return r},BigInteger.prototype.equals=function bnEquals(t){return 0==this.compareTo(t)},BigInteger.prototype.min=function bnMin(t){return this.compareTo(t)<0?this:t},BigInteger.prototype.max=function bnMax(t){return this.compareTo(t)>0?this:t},BigInteger.prototype.and=function bnAnd(t){var r=nbi();return this.bitwiseTo(t,op_and,r),r},BigInteger.prototype.or=function bnOr(t){var r=nbi();return this.bitwiseTo(t,op_or,r),r},BigInteger.prototype.xor=function bnXor(t){var r=nbi();return this.bitwiseTo(t,op_xor,r),r},BigInteger.prototype.andNot=function bnAndNot(t){var r=nbi();return this.bitwiseTo(t,op_andnot,r),r},BigInteger.prototype.not=function bnNot(){for(var t=nbi(),r=0;r<this.t;++r)t[r]=this.DM&~this[r];return t.t=this.t,t.s=~this.s,t},BigInteger.prototype.shiftLeft=function bnShiftLeft(t){var r=nbi();return t<0?this.rShiftTo(-t,r):this.lShiftTo(t,r),r},BigInteger.prototype.shiftRight=function bnShiftRight(t){var r=nbi();return t<0?this.lShiftTo(-t,r):this.rShiftTo(t,r),r},BigInteger.prototype.getLowestSetBit=function bnGetLowestSetBit(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+lbit(this[t]);return this.s<0?this.t*this.DB:-1},BigInteger.prototype.bitCount=function bnBitCount(){for(var t=0,r=this.s&this.DM,i=0;i<this.t;++i)t+=cbit(this[i]^r);return t},BigInteger.prototype.testBit=function bnTestBit(t){var r=Math.floor(t/this.DB);return r>=this.t?0!=this.s:0!=(this[r]&1<<t%this.DB)},BigInteger.prototype.setBit=function bnSetBit(t){return this.changeBit(t,op_or)},BigInteger.prototype.clearBit=function bnClearBit(t){return this.changeBit(t,op_andnot)},BigInteger.prototype.flipBit=function bnFlipBit(t){return this.changeBit(t,op_xor)},BigInteger.prototype.add=function bnAdd(t){var r=nbi();return this.addTo(t,r),r},BigInteger.prototype.subtract=function bnSubtract(t){var r=nbi();return this.subTo(t,r),r},BigInteger.prototype.multiply=function bnMultiply(t){var r=nbi();return this.multiplyTo(t,r),r},BigInteger.prototype.divide=function bnDivide(t){var r=nbi();return this.divRemTo(t,r,null),r},BigInteger.prototype.remainder=function bnRemainder(t){var r=nbi();return this.divRemTo(t,null,r),r},BigInteger.prototype.divideAndRemainder=function bnDivideAndRemainder(t){var r=nbi(),i=nbi();return this.divRemTo(t,r,i),new Array(r,i)},BigInteger.prototype.modPow=function bnModPow(t,r){var i,o,a=t.bitLength(),u=nbv(1);if(a<=0)return u;i=a<18?1:a<48?3:a<144?4:a<768?5:6,o=a<8?new Classic(r):r.isEven()?new Barrett(r):new Montgomery(r);var l=new Array,c=3,p=i-1,h=(1<<i)-1;if(l[1]=o.convert(this),i>1){var y=nbi();for(o.sqrTo(l[1],y);c<=h;)l[c]=nbi(),o.mulTo(y,l[c-2],l[c]),c+=2}var d,v,m=t.t-1,b=!0,P=nbi();for(a=nbits(t[m])-1;m>=0;){for(a>=p?d=t[m]>>a-p&h:(d=(t[m]&(1<<a+1)-1)<<p-a,m>0&&(d|=t[m-1]>>this.DB+a-p)),c=i;0==(1&d);)d>>=1,--c;if((a-=c)<0&&(a+=this.DB,--m),b)l[d].copyTo(u),b=!1;else{for(;c>1;)o.sqrTo(u,P),o.sqrTo(P,u),c-=2;c>0?o.sqrTo(u,P):(v=u,u=P,P=v),o.mulTo(P,l[d],u)}for(;m>=0&&0==(t[m]&1<<a);)o.sqrTo(u,P),v=u,u=P,P=v,--a<0&&(a=this.DB-1,--m)}return o.revert(u)},BigInteger.prototype.modInverse=function bnModInverse(t){var r=t.isEven();if(this.isEven()&&r||0==t.signum())return BigInteger.ZERO;for(var i=t.clone(),o=this.clone(),a=nbv(1),u=nbv(0),l=nbv(0),c=nbv(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),r?(a.isEven()&&u.isEven()||(a.addTo(this,a),u.subTo(t,u)),a.rShiftTo(1,a)):u.isEven()||u.subTo(t,u),u.rShiftTo(1,u);for(;o.isEven();)o.rShiftTo(1,o),r?(l.isEven()&&c.isEven()||(l.addTo(this,l),c.subTo(t,c)),l.rShiftTo(1,l)):c.isEven()||c.subTo(t,c),c.rShiftTo(1,c);i.compareTo(o)>=0?(i.subTo(o,i),r&&a.subTo(l,a),u.subTo(c,u)):(o.subTo(i,o),r&&l.subTo(a,l),c.subTo(u,c))}return 0!=o.compareTo(BigInteger.ONE)?BigInteger.ZERO:c.compareTo(t)>=0?c.subtract(t):c.signum()<0?(c.addTo(t,c),c.signum()<0?c.add(t):c):c},BigInteger.prototype.pow=function bnPow(t){return this.exp(t,new NullExp)},BigInteger.prototype.gcd=function bnGCD(t){var r=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(r.compareTo(i)<0){var o=r;r=i,i=o}var a=r.getLowestSetBit(),u=i.getLowestSetBit();if(u<0)return r;for(a<u&&(u=a),u>0&&(r.rShiftTo(u,r),i.rShiftTo(u,i));r.signum()>0;)(a=r.getLowestSetBit())>0&&r.rShiftTo(a,r),(a=i.getLowestSetBit())>0&&i.rShiftTo(a,i),r.compareTo(i)>=0?(r.subTo(i,r),r.rShiftTo(1,r)):(i.subTo(r,i),i.rShiftTo(1,i));return u>0&&i.lShiftTo(u,i),i},BigInteger.prototype.isProbablePrime=function bnIsProbablePrime(t){var r,i=this.abs();if(1==i.t&&i[0]<=d[d.length-1]){for(r=0;r<d.length;++r)if(i[0]==d[r])return!0;return!1}if(i.isEven())return!1;for(r=1;r<d.length;){for(var o=d[r],a=r+1;a<d.length&&o<v;)o*=d[a++];for(o=i.modInt(o);r<a;)if(o%d[r++]==0)return!1}return i.millerRabin(t)},BigInteger.prototype.square=function bnSquare(){var t=nbi();return this.squareTo(t),t};var m=BigInteger;m.prototype.IsNegative=function(){return-1==this.compareTo(m.ZERO)},m.op_Equality=function(t,r){return 0==t.compareTo(r)},m.op_Inequality=function(t,r){return 0!=t.compareTo(r)},m.op_GreaterThan=function(t,r){return t.compareTo(r)>0},m.op_LessThan=function(t,r){return t.compareTo(r)<0},m.op_Addition=function(t,r){return new m(t,void 0,void 0).add(new m(r,void 0,void 0))},m.op_Subtraction=function(t,r){return new m(t,void 0,void 0).subtract(new m(r,void 0,void 0))},m.Int128Mul=function(t,r){return new m(t,void 0,void 0).multiply(new m(r,void 0,void 0))},m.op_Division=function(t,r){return t.divide(r)},m.prototype.ToDouble=function(){return parseFloat(this.toString())};var b=function Inherit(t,r){var i;if(void 0===Object.getOwnPropertyNames){for(i in r.prototype)void 0!==t.prototype[i]&&t.prototype[i]!==Object.prototype[i]||(t.prototype[i]=r.prototype[i]);for(i in r)void 0===t[i]&&(t[i]=r[i]);t.$baseCtor=r}else{for(var o=Object.getOwnPropertyNames(r.prototype),a=0;a<o.length;a++)void 0===Object.getOwnPropertyDescriptor(t.prototype,o[a])&&Object.defineProperty(t.prototype,o[a],Object.getOwnPropertyDescriptor(r.prototype,o[a]));for(i in r)void 0===t[i]&&(t[i]=r[i]);t.$baseCtor=r}};i.Path=function(){return[]},i.Path.prototype.push=Array.prototype.push,i.Paths=function(){return[]},i.Paths.prototype.push=Array.prototype.push,i.DoublePoint=function(){var t=arguments;this.X=0,this.Y=0,1===t.length?(this.X=t[0].X,this.Y=t[0].Y):2===t.length&&(this.X=t[0],this.Y=t[1])},i.DoublePoint0=function(){this.X=0,this.Y=0},i.DoublePoint0.prototype=i.DoublePoint.prototype,i.DoublePoint1=function(t){this.X=t.X,this.Y=t.Y},i.DoublePoint1.prototype=i.DoublePoint.prototype,i.DoublePoint2=function(t,r){this.X=t,this.Y=r},i.DoublePoint2.prototype=i.DoublePoint.prototype,i.PolyNode=function(){this.m_Parent=null,this.m_polygon=new i.Path,this.m_Index=0,this.m_jointype=0,this.m_endtype=0,this.m_Childs=[],this.IsOpen=!1},i.PolyNode.prototype.IsHoleNode=function(){for(var t=!0,r=this.m_Parent;null!==r;)t=!t,r=r.m_Parent;return t},i.PolyNode.prototype.ChildCount=function(){return this.m_Childs.length},i.PolyNode.prototype.Contour=function(){return this.m_polygon},i.PolyNode.prototype.AddChild=function(t){var r=this.m_Childs.length;this.m_Childs.push(t),t.m_Parent=this,t.m_Index=r},i.PolyNode.prototype.GetNext=function(){return this.m_Childs.length>0?this.m_Childs[0]:this.GetNextSiblingUp()},i.PolyNode.prototype.GetNextSiblingUp=function(){return null===this.m_Parent?null:this.m_Index===this.m_Parent.m_Childs.length-1?this.m_Parent.GetNextSiblingUp():this.m_Parent.m_Childs[this.m_Index+1]},i.PolyNode.prototype.Childs=function(){return this.m_Childs},i.PolyNode.prototype.Parent=function(){return this.m_Parent},i.PolyNode.prototype.IsHole=function(){return this.IsHoleNode()},i.PolyTree=function(){this.m_AllPolys=[],i.PolyNode.call(this)},i.PolyTree.prototype.Clear=function(){for(var t=0,r=this.m_AllPolys.length;t<r;t++)this.m_AllPolys[t]=null;this.m_AllPolys.length=0,this.m_Childs.length=0},i.PolyTree.prototype.GetFirst=function(){return this.m_Childs.length>0?this.m_Childs[0]:null},i.PolyTree.prototype.Total=function(){var t=this.m_AllPolys.length;return t>0&&this.m_Childs[0]!==this.m_AllPolys[0]&&t--,t},b(i.PolyTree,i.PolyNode),i.Math_Abs_Int64=i.Math_Abs_Int32=i.Math_Abs_Double=function(t){return Math.abs(t)},i.Math_Max_Int32_Int32=function(t,r){return Math.max(t,r)},l.msie||l.opera||l.safari?i.Cast_Int32=function(t){return 0|t}:i.Cast_Int32=function(t){return~~t},void 0===Number.toInteger&&(Number.toInteger=null),l.chrome?i.Cast_Int64=function(t){return t<-2147483648||t>2147483647?t<0?Math.ceil(t):Math.floor(t):~~t}:l.firefox&&"function"==typeof Number.toInteger?i.Cast_Int64=function(t){return Number.toInteger(t)}:l.msie7||l.msie8?i.Cast_Int64=function(t){return parseInt(t,10)}:l.msie?i.Cast_Int64=function(t){return t<-2147483648||t>2147483647?t<0?Math.ceil(t):Math.floor(t):0|t}:i.Cast_Int64=function(t){return t<0?Math.ceil(t):Math.floor(t)},i.Clear=function(t){t.length=0},i.PI=3.141592653589793,i.PI2=6.283185307179586,i.IntPoint=function(){var t=arguments,r=t.length;if(this.X=0,this.Y=0,i.use_xyz)if(this.Z=0,3===r)this.X=t[0],this.Y=t[1],this.Z=t[2];else if(2===r)this.X=t[0],this.Y=t[1],this.Z=0;else if(1===r)if(t[0]instanceof i.DoublePoint){var o=t[0];this.X=i.Clipper.Round(o.X),this.Y=i.Clipper.Round(o.Y),this.Z=0}else{void 0===(a=t[0]).Z&&(a.Z=0),this.X=a.X,this.Y=a.Y,this.Z=a.Z}else this.X=0,this.Y=0,this.Z=0;else if(2===r)this.X=t[0],this.Y=t[1];else if(1===r)if(t[0]instanceof i.DoublePoint){o=t[0];this.X=i.Clipper.Round(o.X),this.Y=i.Clipper.Round(o.Y)}else{var a=t[0];this.X=a.X,this.Y=a.Y}else this.X=0,this.Y=0},i.IntPoint.op_Equality=function(t,r){return t.X===r.X&&t.Y===r.Y},i.IntPoint.op_Inequality=function(t,r){return t.X!==r.X||t.Y!==r.Y},i.IntPoint0=function(){this.X=0,this.Y=0,i.use_xyz&&(this.Z=0)},i.IntPoint0.prototype=i.IntPoint.prototype,i.IntPoint1=function(t){this.X=t.X,this.Y=t.Y,i.use_xyz&&(void 0===t.Z?this.Z=0:this.Z=t.Z)},i.IntPoint1.prototype=i.IntPoint.prototype,i.IntPoint1dp=function(t){this.X=i.Clipper.Round(t.X),this.Y=i.Clipper.Round(t.Y),i.use_xyz&&(this.Z=0)},i.IntPoint1dp.prototype=i.IntPoint.prototype,i.IntPoint2=function(t,r,o){this.X=t,this.Y=r,i.use_xyz&&(this.Z=void 0===o?0:o)},i.IntPoint2.prototype=i.IntPoint.prototype,i.IntRect=function(){var t=arguments,r=t.length;if(4===r)this.left=t[0],this.top=t[1],this.right=t[2],this.bottom=t[3];else if(1===r){var i=t[0];this.left=i.left,this.top=i.top,this.right=i.right,this.bottom=i.bottom}else this.left=0,this.top=0,this.right=0,this.bottom=0},i.IntRect0=function(){this.left=0,this.top=0,this.right=0,this.bottom=0},i.IntRect0.prototype=i.IntRect.prototype,i.IntRect1=function(t){this.left=t.left,this.top=t.top,this.right=t.right,this.bottom=t.bottom},i.IntRect1.prototype=i.IntRect.prototype,i.IntRect4=function(t,r,i,o){this.left=t,this.top=r,this.right=i,this.bottom=o},i.IntRect4.prototype=i.IntRect.prototype,i.ClipType={ctIntersection:0,ctUnion:1,ctDifference:2,ctXor:3},i.PolyType={ptSubject:0,ptClip:1},i.PolyFillType={pftEvenOdd:0,pftNonZero:1,pftPositive:2,pftNegative:3},i.JoinType={jtSquare:0,jtRound:1,jtMiter:2},i.EndType={etOpenSquare:0,etOpenRound:1,etOpenButt:2,etClosedLine:3,etClosedPolygon:4},i.EdgeSide={esLeft:0,esRight:1},i.Direction={dRightToLeft:0,dLeftToRight:1},i.TEdge=function(){this.Bot=new i.IntPoint0,this.Curr=new i.IntPoint0,this.Top=new i.IntPoint0,this.Delta=new i.IntPoint0,this.Dx=0,this.PolyTyp=i.PolyType.ptSubject,this.Side=i.EdgeSide.esLeft,this.WindDelta=0,this.WindCnt=0,this.WindCnt2=0,this.OutIdx=0,this.Next=null,this.Prev=null,this.NextInLML=null,this.NextInAEL=null,this.PrevInAEL=null,this.NextInSEL=null,this.PrevInSEL=null},i.IntersectNode=function(){this.Edge1=null,this.Edge2=null,this.Pt=new i.IntPoint0},i.MyIntersectNodeSort=function(){},i.MyIntersectNodeSort.Compare=function(t,r){var i=r.Pt.Y-t.Pt.Y;return i>0?1:i<0?-1:0},i.LocalMinima=function(){this.Y=0,this.LeftBound=null,this.RightBound=null,this.Next=null},i.Scanbeam=function(){this.Y=0,this.Next=null},i.Maxima=function(){this.X=0,this.Next=null,this.Prev=null},i.OutRec=function(){this.Idx=0,this.IsHole=!1,this.IsOpen=!1,this.FirstLeft=null,this.Pts=null,this.BottomPt=null,this.PolyNode=null},i.OutPt=function(){this.Idx=0,this.Pt=new i.IntPoint0,this.Next=null,this.Prev=null},i.Join=function(){this.OutPt1=null,this.OutPt2=null,this.OffPt=new i.IntPoint0},i.ClipperBase=function(){this.m_MinimaList=null,this.m_CurrentLM=null,this.m_edges=new Array,this.m_UseFullRange=!1,this.m_HasOpenPaths=!1,this.PreserveCollinear=!1,this.m_Scanbeam=null,this.m_PolyOuts=null,this.m_ActiveEdges=null},i.ClipperBase.horizontal=-9007199254740992,i.ClipperBase.Skip=-2,i.ClipperBase.Unassigned=-1,i.ClipperBase.tolerance=1e-20,i.ClipperBase.loRange=47453132,i.ClipperBase.hiRange=0xfffffffffffff,i.ClipperBase.near_zero=function(t){return t>-i.ClipperBase.tolerance&&t<i.ClipperBase.tolerance},i.ClipperBase.IsHorizontal=function(t){return 0===t.Delta.Y},i.ClipperBase.prototype.PointIsVertex=function(t,r){var o=r;do{if(i.IntPoint.op_Equality(o.Pt,t))return!0;o=o.Next}while(o!==r);return!1},i.ClipperBase.prototype.PointOnLineSegment=function(t,r,i,o){return o?t.X===r.X&&t.Y===r.Y||t.X===i.X&&t.Y===i.Y||t.X>r.X==t.X<i.X&&t.Y>r.Y==t.Y<i.Y&&m.op_Equality(m.Int128Mul(t.X-r.X,i.Y-r.Y),m.Int128Mul(i.X-r.X,t.Y-r.Y)):t.X===r.X&&t.Y===r.Y||t.X===i.X&&t.Y===i.Y||t.X>r.X==t.X<i.X&&t.Y>r.Y==t.Y<i.Y&&(t.X-r.X)*(i.Y-r.Y)==(i.X-r.X)*(t.Y-r.Y)},i.ClipperBase.prototype.PointOnPolygon=function(t,r,i){for(var o=r;;){if(this.PointOnLineSegment(t,o.Pt,o.Next.Pt,i))return!0;if((o=o.Next)===r)break}return!1},i.ClipperBase.prototype.SlopesEqual=i.ClipperBase.SlopesEqual=function(){var t,r,o,a,u,l,c=arguments,p=c.length;return 3===p?(t=c[0],r=c[1],c[2]?m.op_Equality(m.Int128Mul(t.Delta.Y,r.Delta.X),m.Int128Mul(t.Delta.X,r.Delta.Y)):i.Cast_Int64(t.Delta.Y*r.Delta.X)===i.Cast_Int64(t.Delta.X*r.Delta.Y)):4===p?(o=c[0],a=c[1],u=c[2],c[3]?m.op_Equality(m.Int128Mul(o.Y-a.Y,a.X-u.X),m.Int128Mul(o.X-a.X,a.Y-u.Y)):i.Cast_Int64((o.Y-a.Y)*(a.X-u.X))-i.Cast_Int64((o.X-a.X)*(a.Y-u.Y))==0):(o=c[0],a=c[1],u=c[2],l=c[3],c[4]?m.op_Equality(m.Int128Mul(o.Y-a.Y,u.X-l.X),m.Int128Mul(o.X-a.X,u.Y-l.Y)):i.Cast_Int64((o.Y-a.Y)*(u.X-l.X))-i.Cast_Int64((o.X-a.X)*(u.Y-l.Y))==0)},i.ClipperBase.SlopesEqual3=function(t,r,o){return o?m.op_Equality(m.Int128Mul(t.Delta.Y,r.Delta.X),m.Int128Mul(t.Delta.X,r.Delta.Y)):i.Cast_Int64(t.Delta.Y*r.Delta.X)===i.Cast_Int64(t.Delta.X*r.Delta.Y)},i.ClipperBase.SlopesEqual4=function(t,r,o,a){return a?m.op_Equality(m.Int128Mul(t.Y-r.Y,r.X-o.X),m.Int128Mul(t.X-r.X,r.Y-o.Y)):i.Cast_Int64((t.Y-r.Y)*(r.X-o.X))-i.Cast_Int64((t.X-r.X)*(r.Y-o.Y))==0},i.ClipperBase.SlopesEqual5=function(t,r,o,a,u){return u?m.op_Equality(m.Int128Mul(t.Y-r.Y,o.X-a.X),m.Int128Mul(t.X-r.X,o.Y-a.Y)):i.Cast_Int64((t.Y-r.Y)*(o.X-a.X))-i.Cast_Int64((t.X-r.X)*(o.Y-a.Y))==0},i.ClipperBase.prototype.Clear=function(){this.DisposeLocalMinimaList();for(var t=0,r=this.m_edges.length;t<r;++t){for(var o=0,a=this.m_edges[t].length;o<a;++o)this.m_edges[t][o]=null;i.Clear(this.m_edges[t])}i.Clear(this.m_edges),this.m_UseFullRange=!1,this.m_HasOpenPaths=!1},i.ClipperBase.prototype.DisposeLocalMinimaList=function(){for(;null!==this.m_MinimaList;){var t=this.m_MinimaList.Next;this.m_MinimaList=null,this.m_MinimaList=t}this.m_CurrentLM=null},i.ClipperBase.prototype.RangeTest=function(t,r){r.Value?(t.X>i.ClipperBase.hiRange||t.Y>i.ClipperBase.hiRange||-t.X>i.ClipperBase.hiRange||-t.Y>i.ClipperBase.hiRange)&&i.Error("Coordinate outside allowed range in RangeTest()."):(t.X>i.ClipperBase.loRange||t.Y>i.ClipperBase.loRange||-t.X>i.ClipperBase.loRange||-t.Y>i.ClipperBase.loRange)&&(r.Value=!0,this.RangeTest(t,r))},i.ClipperBase.prototype.InitEdge=function(t,r,o,a){t.Next=r,t.Prev=o,t.Curr.X=a.X,t.Curr.Y=a.Y,i.use_xyz&&(t.Curr.Z=a.Z),t.OutIdx=-1},i.ClipperBase.prototype.InitEdge2=function(t,r){t.Curr.Y>=t.Next.Curr.Y?(t.Bot.X=t.Curr.X,t.Bot.Y=t.Curr.Y,i.use_xyz&&(t.Bot.Z=t.Curr.Z),t.Top.X=t.Next.Curr.X,t.Top.Y=t.Next.Curr.Y,i.use_xyz&&(t.Top.Z=t.Next.Curr.Z)):(t.Top.X=t.Curr.X,t.Top.Y=t.Curr.Y,i.use_xyz&&(t.Top.Z=t.Curr.Z),t.Bot.X=t.Next.Curr.X,t.Bot.Y=t.Next.Curr.Y,i.use_xyz&&(t.Bot.Z=t.Next.Curr.Z)),this.SetDx(t),t.PolyTyp=r},i.ClipperBase.prototype.FindNextLocMin=function(t){for(var r;;){for(;i.IntPoint.op_Inequality(t.Bot,t.Prev.Bot)||i.IntPoint.op_Equality(t.Curr,t.Top);)t=t.Next;if(t.Dx!==i.ClipperBase.horizontal&&t.Prev.Dx!==i.ClipperBase.horizontal)break;for(;t.Prev.Dx===i.ClipperBase.horizontal;)t=t.Prev;for(r=t;t.Dx===i.ClipperBase.horizontal;)t=t.Next;if(t.Top.Y!==t.Prev.Bot.Y){r.Prev.Bot.X<t.Bot.X&&(t=r);break}}return t},i.ClipperBase.prototype.ProcessBound=function(t,r){var o,a,u=t;if(u.OutIdx===i.ClipperBase.Skip){if(t=u,r){for(;t.Top.Y===t.Next.Bot.Y;)t=t.Next;for(;t!==u&&t.Dx===i.ClipperBase.horizontal;)t=t.Prev}else{for(;t.Top.Y===t.Prev.Bot.Y;)t=t.Prev;for(;t!==u&&t.Dx===i.ClipperBase.horizontal;)t=t.Next}if(t===u)u=r?t.Next:t.Prev;else{t=r?u.Next:u.Prev;var l=new i.LocalMinima;l.Next=null,l.Y=t.Bot.Y,l.LeftBound=null,l.RightBound=t,t.WindDelta=0,u=this.ProcessBound(t,r),this.InsertLocalMinima(l)}return u}if(t.Dx===i.ClipperBase.horizontal&&((o=r?t.Prev:t.Next).Dx===i.ClipperBase.horizontal?o.Bot.X!==t.Bot.X&&o.Top.X!==t.Bot.X&&this.ReverseHorizontal(t):o.Bot.X!==t.Bot.X&&this.ReverseHorizontal(t)),o=t,r){for(;u.Top.Y===u.Next.Bot.Y&&u.Next.OutIdx!==i.ClipperBase.Skip;)u=u.Next;if(u.Dx===i.ClipperBase.horizontal&&u.Next.OutIdx!==i.ClipperBase.Skip){for(a=u;a.Prev.Dx===i.ClipperBase.horizontal;)a=a.Prev;a.Prev.Top.X>u.Next.Top.X&&(u=a.Prev)}for(;t!==u;)t.NextInLML=t.Next,t.Dx===i.ClipperBase.horizontal&&t!==o&&t.Bot.X!==t.Prev.Top.X&&this.ReverseHorizontal(t),t=t.Next;t.Dx===i.ClipperBase.horizontal&&t!==o&&t.Bot.X!==t.Prev.Top.X&&this.ReverseHorizontal(t),u=u.Next}else{for(;u.Top.Y===u.Prev.Bot.Y&&u.Prev.OutIdx!==i.ClipperBase.Skip;)u=u.Prev;if(u.Dx===i.ClipperBase.horizontal&&u.Prev.OutIdx!==i.ClipperBase.Skip){for(a=u;a.Next.Dx===i.ClipperBase.horizontal;)a=a.Next;(a.Next.Top.X===u.Prev.Top.X||a.Next.Top.X>u.Prev.Top.X)&&(u=a.Next)}for(;t!==u;)t.NextInLML=t.Prev,t.Dx===i.ClipperBase.horizontal&&t!==o&&t.Bot.X!==t.Next.Top.X&&this.ReverseHorizontal(t),t=t.Prev;t.Dx===i.ClipperBase.horizontal&&t!==o&&t.Bot.X!==t.Next.Top.X&&this.ReverseHorizontal(t),u=u.Prev}return u},i.ClipperBase.prototype.AddPath=function(t,r,o){i.use_lines?o||r!==i.PolyType.ptClip||i.Error("AddPath: Open paths must be subject."):o||i.Error("AddPath: Open paths have been disabled.");var a=t.length-1;if(o)for(;a>0&&i.IntPoint.op_Equality(t[a],t[0]);)--a;for(;a>0&&i.IntPoint.op_Equality(t[a],t[a-1]);)--a;if(o&&a<2||!o&&a<1)return!1;for(var u=new Array,l=0;l<=a;l++)u.push(new i.TEdge);var c=!0;u[1].Curr.X=t[1].X,u[1].Curr.Y=t[1].Y,i.use_xyz&&(u[1].Curr.Z=t[1].Z);var p={Value:this.m_UseFullRange};this.RangeTest(t[0],p),this.m_UseFullRange=p.Value,p.Value=this.m_UseFullRange,this.RangeTest(t[a],p),this.m_UseFullRange=p.Value,this.InitEdge(u[0],u[1],u[a],t[0]),this.InitEdge(u[a],u[0],u[a-1],t[a]);for(l=a-1;l>=1;--l)p.Value=this.m_UseFullRange,this.RangeTest(t[l],p),this.m_UseFullRange=p.Value,this.InitEdge(u[l],u[l+1],u[l-1],t[l]);for(var h,y=u[0],d=y,v=y;;)if(d.Curr!==d.Next.Curr||!o&&d.Next===y){if(d.Prev===d.Next)break;if(!o||!i.ClipperBase.SlopesEqual4(d.Prev.Curr,d.Curr,d.Next.Curr,this.m_UseFullRange)||this.PreserveCollinear&&this.Pt2IsBetweenPt1AndPt3(d.Prev.Curr,d.Curr,d.Next.Curr)){if((d=d.Next)===v||!o&&d.Next===y)break}else d===y&&(y=d.Next),v=d=(d=this.RemoveEdge(d)).Prev}else{if(d===d.Next)break;d===y&&(y=d.Next),v=d=this.RemoveEdge(d)}if(!o&&d===d.Next||o&&d.Prev===d.Next)return!1;o||(this.m_HasOpenPaths=!0,y.Prev.OutIdx=i.ClipperBase.Skip),d=y;do{this.InitEdge2(d,r),d=d.Next,c&&d.Curr.Y!==y.Curr.Y&&(c=!1)}while(d!==y);if(c){if(o)return!1;for(d.Prev.OutIdx=i.ClipperBase.Skip,(b=new i.LocalMinima).Next=null,b.Y=d.Bot.Y,b.LeftBound=null,b.RightBound=d,b.RightBound.Side=i.EdgeSide.esRight,b.RightBound.WindDelta=0;d.Bot.X!==d.Prev.Top.X&&this.ReverseHorizontal(d),d.Next.OutIdx!==i.ClipperBase.Skip;)d.NextInLML=d.Next,d=d.Next;return this.InsertLocalMinima(b),this.m_edges.push(u),!0}this.m_edges.push(u);var m=null;for(i.IntPoint.op_Equality(d.Prev.Bot,d.Prev.Top)&&(d=d.Next);(d=this.FindNextLocMin(d))!==m;){var b;null===m&&(m=d),(b=new i.LocalMinima).Next=null,b.Y=d.Bot.Y,d.Dx<d.Prev.Dx?(b.LeftBound=d.Prev,b.RightBound=d,h=!1):(b.LeftBound=d,b.RightBound=d.Prev,h=!0),b.LeftBound.Side=i.EdgeSide.esLeft,b.RightBound.Side=i.EdgeSide.esRight,o?b.LeftBound.Next===b.RightBound?b.LeftBound.WindDelta=-1:b.LeftBound.WindDelta=1:b.LeftBound.WindDelta=0,b.RightBound.WindDelta=-b.LeftBound.WindDelta,(d=this.ProcessBound(b.LeftBound,h)).OutIdx===i.ClipperBase.Skip&&(d=this.ProcessBound(d,h));var P=this.ProcessBound(b.RightBound,!h);P.OutIdx===i.ClipperBase.Skip&&(P=this.ProcessBound(P,!h)),b.LeftBound.OutIdx===i.ClipperBase.Skip?b.LeftBound=null:b.RightBound.OutIdx===i.ClipperBase.Skip&&(b.RightBound=null),this.InsertLocalMinima(b),h||(d=P)}return!0},i.ClipperBase.prototype.AddPaths=function(t,r,i){for(var o=!1,a=0,u=t.length;a<u;++a)this.AddPath(t[a],r,i)&&(o=!0);return o},i.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3=function(t,r,o){return!(i.IntPoint.op_Equality(t,o)||i.IntPoint.op_Equality(t,r)||i.IntPoint.op_Equality(o,r))&&(t.X!==o.X?r.X>t.X==r.X<o.X:r.Y>t.Y==r.Y<o.Y)},i.ClipperBase.prototype.RemoveEdge=function(t){t.Prev.Next=t.Next,t.Next.Prev=t.Prev;var r=t.Next;return t.Prev=null,r},i.ClipperBase.prototype.SetDx=function(t){t.Delta.X=t.Top.X-t.Bot.X,t.Delta.Y=t.Top.Y-t.Bot.Y,0===t.Delta.Y?t.Dx=i.ClipperBase.horizontal:t.Dx=t.Delta.X/t.Delta.Y},i.ClipperBase.prototype.InsertLocalMinima=function(t){if(null===this.m_MinimaList)this.m_MinimaList=t;else if(t.Y>=this.m_MinimaList.Y)t.Next=this.m_MinimaList,this.m_MinimaList=t;else{for(var r=this.m_MinimaList;null!==r.Next&&t.Y<r.Next.Y;)r=r.Next;t.Next=r.Next,r.Next=t}},i.ClipperBase.prototype.PopLocalMinima=function(t,r){return r.v=this.m_CurrentLM,null!==this.m_CurrentLM&&this.m_CurrentLM.Y===t&&(this.m_CurrentLM=this.m_CurrentLM.Next,!0)},i.ClipperBase.prototype.ReverseHorizontal=function(t){var r=t.Top.X;t.Top.X=t.Bot.X,t.Bot.X=r,i.use_xyz&&(r=t.Top.Z,t.Top.Z=t.Bot.Z,t.Bot.Z=r)},i.ClipperBase.prototype.Reset=function(){if(this.m_CurrentLM=this.m_MinimaList,null!==this.m_CurrentLM){this.m_Scanbeam=null;for(var t=this.m_MinimaList;null!==t;){this.InsertScanbeam(t.Y);var r=t.LeftBound;null!==r&&(r.Curr.X=r.Bot.X,r.Curr.Y=r.Bot.Y,i.use_xyz&&(r.Curr.Z=r.Bot.Z),r.OutIdx=i.ClipperBase.Unassigned),null!==(r=t.RightBound)&&(r.Curr.X=r.Bot.X,r.Curr.Y=r.Bot.Y,i.use_xyz&&(r.Curr.Z=r.Bot.Z),r.OutIdx=i.ClipperBase.Unassigned),t=t.Next}this.m_ActiveEdges=null}},i.ClipperBase.prototype.InsertScanbeam=function(t){if(null===this.m_Scanbeam)this.m_Scanbeam=new i.Scanbeam,this.m_Scanbeam.Next=null,this.m_Scanbeam.Y=t;else if(t>this.m_Scanbeam.Y){var r=new i.Scanbeam;r.Y=t,r.Next=this.m_Scanbeam,this.m_Scanbeam=r}else{for(var o=this.m_Scanbeam;null!==o.Next&&t<=o.Next.Y;)o=o.Next;if(t===o.Y)return;var a=new i.Scanbeam;a.Y=t,a.Next=o.Next,o.Next=a}},i.ClipperBase.prototype.PopScanbeam=function(t){return null===this.m_Scanbeam?(t.v=0,!1):(t.v=this.m_Scanbeam.Y,this.m_Scanbeam=this.m_Scanbeam.Next,!0)},i.ClipperBase.prototype.LocalMinimaPending=function(){return null!==this.m_CurrentLM},i.ClipperBase.prototype.CreateOutRec=function(){var t=new i.OutRec;return t.Idx=i.ClipperBase.Unassigned,t.IsHole=!1,t.IsOpen=!1,t.FirstLeft=null,t.Pts=null,t.BottomPt=null,t.PolyNode=null,this.m_PolyOuts.push(t),t.Idx=this.m_PolyOuts.length-1,t},i.ClipperBase.prototype.DisposeOutRec=function(t){var r=this.m_PolyOuts[t];r.Pts=null,r=null,this.m_PolyOuts[t]=null},i.ClipperBase.prototype.UpdateEdgeIntoAEL=function(t){null===t.NextInLML&&i.Error("UpdateEdgeIntoAEL: invalid call");var r=t.PrevInAEL,o=t.NextInAEL;return t.NextInLML.OutIdx=t.OutIdx,null!==r?r.NextInAEL=t.NextInLML:this.m_ActiveEdges=t.NextInLML,null!==o&&(o.PrevInAEL=t.NextInLML),t.NextInLML.Side=t.Side,t.NextInLML.WindDelta=t.WindDelta,t.NextInLML.WindCnt=t.WindCnt,t.NextInLML.WindCnt2=t.WindCnt2,(t=t.NextInLML).Curr.X=t.Bot.X,t.Curr.Y=t.Bot.Y,t.PrevInAEL=r,t.NextInAEL=o,i.ClipperBase.IsHorizontal(t)||this.InsertScanbeam(t.Top.Y),t},i.ClipperBase.prototype.SwapPositionsInAEL=function(t,r){if(t.NextInAEL!==t.PrevInAEL&&r.NextInAEL!==r.PrevInAEL){if(t.NextInAEL===r){var i=r.NextInAEL;null!==i&&(i.PrevInAEL=t);var o=t.PrevInAEL;null!==o&&(o.NextInAEL=r),r.PrevInAEL=o,r.NextInAEL=t,t.PrevInAEL=r,t.NextInAEL=i}else if(r.NextInAEL===t){var a=t.NextInAEL;null!==a&&(a.PrevInAEL=r);var u=r.PrevInAEL;null!==u&&(u.NextInAEL=t),t.PrevInAEL=u,t.NextInAEL=r,r.PrevInAEL=t,r.NextInAEL=a}else{var l=t.NextInAEL,c=t.PrevInAEL;t.NextInAEL=r.NextInAEL,null!==t.NextInAEL&&(t.NextInAEL.PrevInAEL=t),t.PrevInAEL=r.PrevInAEL,null!==t.PrevInAEL&&(t.PrevInAEL.NextInAEL=t),r.NextInAEL=l,null!==r.NextInAEL&&(r.NextInAEL.PrevInAEL=r),r.PrevInAEL=c,null!==r.PrevInAEL&&(r.PrevInAEL.NextInAEL=r)}null===t.PrevInAEL?this.m_ActiveEdges=t:null===r.PrevInAEL&&(this.m_ActiveEdges=r)}},i.ClipperBase.prototype.DeleteFromAEL=function(t){var r=t.PrevInAEL,i=t.NextInAEL;null===r&&null===i&&t!==this.m_ActiveEdges||(null!==r?r.NextInAEL=i:this.m_ActiveEdges=i,null!==i&&(i.PrevInAEL=r),t.NextInAEL=null,t.PrevInAEL=null)},i.Clipper=function(t){void 0===t&&(t=0),this.m_PolyOuts=null,this.m_ClipType=i.ClipType.ctIntersection,this.m_Scanbeam=null,this.m_Maxima=null,this.m_ActiveEdges=null,this.m_SortedEdges=null,this.m_IntersectList=null,this.m_IntersectNodeComparer=null,this.m_ExecuteLocked=!1,this.m_ClipFillType=i.PolyFillType.pftEvenOdd,this.m_SubjFillType=i.PolyFillType.pftEvenOdd,this.m_Joins=null,this.m_GhostJoins=null,this.m_UsingPolyTree=!1,this.ReverseSolution=!1,this.StrictlySimple=!1,i.ClipperBase.call(this),this.m_Scanbeam=null,this.m_Maxima=null,this.m_ActiveEdges=null,this.m_SortedEdges=null,this.m_IntersectList=new Array,this.m_IntersectNodeComparer=i.MyIntersectNodeSort.Compare,this.m_ExecuteLocked=!1,this.m_UsingPolyTree=!1,this.m_PolyOuts=new Array,this.m_Joins=new Array,this.m_GhostJoins=new Array,this.ReverseSolution=0!=(1&t),this.StrictlySimple=0!=(2&t),this.PreserveCollinear=0!=(4&t),i.use_xyz&&(this.ZFillFunction=null)},i.Clipper.ioReverseSolution=1,i.Clipper.ioStrictlySimple=2,i.Clipper.ioPreserveCollinear=4,i.Clipper.prototype.Clear=function(){0!==this.m_edges.length&&(this.DisposeAllPolyPts(),i.ClipperBase.prototype.Clear.call(this))},i.Clipper.prototype.InsertMaxima=function(t){var r=new i.Maxima;if(r.X=t,null===this.m_Maxima)this.m_Maxima=r,this.m_Maxima.Next=null,this.m_Maxima.Prev=null;else if(t<this.m_Maxima.X)r.Next=this.m_Maxima,r.Prev=null,this.m_Maxima=r;else{for(var o=this.m_Maxima;null!==o.Next&&t>=o.Next.X;)o=o.Next;if(t===o.X)return;r.Next=o.Next,r.Prev=o,null!==o.Next&&(o.Next.Prev=r),o.Next=r}},i.Clipper.prototype.Execute=function(){var t=arguments,r=t.length,o=t[1]instanceof i.PolyTree;if(4===r&&!o){var a=t[0],u=t[1],l=t[2],c=t[3];if(this.m_ExecuteLocked)return!1;this.m_HasOpenPaths&&i.Error("Error: PolyTree struct is needed for open path clipping."),this.m_ExecuteLocked=!0,i.Clear(u),this.m_SubjFillType=l,this.m_ClipFillType=c,this.m_ClipType=a,this.m_UsingPolyTree=!1;try{(h=this.ExecuteInternal())&&this.BuildResult(u)}finally{this.DisposeAllPolyPts(),this.m_ExecuteLocked=!1}return h}if(4===r&&o){a=t[0];var p=t[1];l=t[2],c=t[3];if(this.m_ExecuteLocked)return!1;this.m_ExecuteLocked=!0,this.m_SubjFillType=l,this.m_ClipFillType=c,this.m_ClipType=a,this.m_UsingPolyTree=!0;try{var h;(h=this.ExecuteInternal())&&this.BuildResult2(p)}finally{this.DisposeAllPolyPts(),this.m_ExecuteLocked=!1}return h}if(2===r&&!o){a=t[0],u=t[1];return this.Execute(a,u,i.PolyFillType.pftEvenOdd,i.PolyFillType.pftEvenOdd)}if(2===r&&o){a=t[0],p=t[1];return this.Execute(a,p,i.PolyFillType.pftEvenOdd,i.PolyFillType.pftEvenOdd)}},i.Clipper.prototype.FixHoleLinkage=function(t){if(null!==t.FirstLeft&&(t.IsHole===t.FirstLeft.IsHole||null===t.FirstLeft.Pts)){for(var r=t.FirstLeft;null!==r&&(r.IsHole===t.IsHole||null===r.Pts);)r=r.FirstLeft;t.FirstLeft=r}},i.Clipper.prototype.ExecuteInternal=function(){try{this.Reset(),this.m_SortedEdges=null,this.m_Maxima=null;var t,r,i,o={},a={};if(!this.PopScanbeam(o))return!1;for(this.InsertLocalMinimaIntoAEL(o.v);this.PopScanbeam(a)||this.LocalMinimaPending();){if(this.ProcessHorizontals(),this.m_GhostJoins.length=0,!this.ProcessIntersections(a.v))return!1;this.ProcessEdgesAtTopOfScanbeam(a.v),o.v=a.v,this.InsertLocalMinimaIntoAEL(o.v)}for(r=0,i=this.m_PolyOuts.length;r<i;r++)null===(t=this.m_PolyOuts[r]).Pts||t.IsOpen||(t.IsHole^this.ReverseSolution)==this.Area$1(t)>0&&this.ReversePolyPtLinks(t.Pts);for(this.JoinCommonEdges(),r=0,i=this.m_PolyOuts.length;r<i;r++)null!==(t=this.m_PolyOuts[r]).Pts&&(t.IsOpen?this.FixupOutPolyline(t):this.FixupOutPolygon(t));return this.StrictlySimple&&this.DoSimplePolygons(),!0}finally{this.m_Joins.length=0,this.m_GhostJoins.length=0}},i.Clipper.prototype.DisposeAllPolyPts=function(){for(var t=0,r=this.m_PolyOuts.length;t<r;++t)this.DisposeOutRec(t);i.Clear(this.m_PolyOuts)},i.Clipper.prototype.AddJoin=function(t,r,o){var a=new i.Join;a.OutPt1=t,a.OutPt2=r,a.OffPt.X=o.X,a.OffPt.Y=o.Y,i.use_xyz&&(a.OffPt.Z=o.Z),this.m_Joins.push(a)},i.Clipper.prototype.AddGhostJoin=function(t,r){var o=new i.Join;o.OutPt1=t,o.OffPt.X=r.X,o.OffPt.Y=r.Y,i.use_xyz&&(o.OffPt.Z=r.Z),this.m_GhostJoins.push(o)},i.Clipper.prototype.SetZ=function(t,r,o){if(null!==this.ZFillFunction){if(0!==t.Z||null===this.ZFillFunction)return;i.IntPoint.op_Equality(t,r.Bot)?t.Z=r.Bot.Z:i.IntPoint.op_Equality(t,r.Top)?t.Z=r.Top.Z:i.IntPoint.op_Equality(t,o.Bot)?t.Z=o.Bot.Z:i.IntPoint.op_Equality(t,o.Top)?t.Z=o.Top.Z:this.ZFillFunction(r.Bot,r.Top,o.Bot,o.Top,t)}},i.Clipper.prototype.InsertLocalMinimaIntoAEL=function(t){for(var r,o,a={};this.PopLocalMinima(t,a);){r=a.v.LeftBound,o=a.v.RightBound;var u=null;if(null===r?(this.InsertEdgeIntoAEL(o,null),this.SetWindingCount(o),this.IsContributing(o)&&(u=this.AddOutPt(o,o.Bot))):null===o?(this.InsertEdgeIntoAEL(r,null),this.SetWindingCount(r),this.IsContributing(r)&&(u=this.AddOutPt(r,r.Bot)),this.InsertScanbeam(r.Top.Y)):(this.InsertEdgeIntoAEL(r,null),this.InsertEdgeIntoAEL(o,r),this.SetWindingCount(r),o.WindCnt=r.WindCnt,o.WindCnt2=r.WindCnt2,this.IsContributing(r)&&(u=this.AddLocalMinPoly(r,o,r.Bot)),this.InsertScanbeam(r.Top.Y)),null!==o&&(i.ClipperBase.IsHorizontal(o)?(null!==o.NextInLML&&this.InsertScanbeam(o.NextInLML.Top.Y),this.AddEdgeToSEL(o)):this.InsertScanbeam(o.Top.Y)),null!==r&&null!==o){if(null!==u&&i.ClipperBase.IsHorizontal(o)&&this.m_GhostJoins.length>0&&0!==o.WindDelta)for(var l=0,c=this.m_GhostJoins.length;l<c;l++){var p=this.m_GhostJoins[l];this.HorzSegmentsOverlap(p.OutPt1.Pt.X,p.OffPt.X,o.Bot.X,o.Top.X)&&this.AddJoin(p.OutPt1,u,p.OffPt)}if(r.OutIdx>=0&&null!==r.PrevInAEL&&r.PrevInAEL.Curr.X===r.Bot.X&&r.PrevInAEL.OutIdx>=0&&i.ClipperBase.SlopesEqual5(r.PrevInAEL.Curr,r.PrevInAEL.Top,r.Curr,r.Top,this.m_UseFullRange)&&0!==r.WindDelta&&0!==r.PrevInAEL.WindDelta){var h=this.AddOutPt(r.PrevInAEL,r.Bot);this.AddJoin(u,h,r.Top)}if(r.NextInAEL!==o){if(o.OutIdx>=0&&o.PrevInAEL.OutIdx>=0&&i.ClipperBase.SlopesEqual5(o.PrevInAEL.Curr,o.PrevInAEL.Top,o.Curr,o.Top,this.m_UseFullRange)&&0!==o.WindDelta&&0!==o.PrevInAEL.WindDelta){h=this.AddOutPt(o.PrevInAEL,o.Bot);this.AddJoin(u,h,o.Top)}var y=r.NextInAEL;if(null!==y)for(;y!==o;)this.IntersectEdges(o,y,r.Curr),y=y.NextInAEL}}}},i.Clipper.prototype.InsertEdgeIntoAEL=function(t,r){if(null===this.m_ActiveEdges)t.PrevInAEL=null,t.NextInAEL=null,this.m_ActiveEdges=t;else if(null===r&&this.E2InsertsBeforeE1(this.m_ActiveEdges,t))t.PrevInAEL=null,t.NextInAEL=this.m_ActiveEdges,this.m_ActiveEdges.PrevInAEL=t,this.m_ActiveEdges=t;else{for(null===r&&(r=this.m_ActiveEdges);null!==r.NextInAEL&&!this.E2InsertsBeforeE1(r.NextInAEL,t);)r=r.NextInAEL;t.NextInAEL=r.NextInAEL,null!==r.NextInAEL&&(r.NextInAEL.PrevInAEL=t),t.PrevInAEL=r,r.NextInAEL=t}},i.Clipper.prototype.E2InsertsBeforeE1=function(t,r){return r.Curr.X===t.Curr.X?r.Top.Y>t.Top.Y?r.Top.X<i.Clipper.TopX(t,r.Top.Y):t.Top.X>i.Clipper.TopX(r,t.Top.Y):r.Curr.X<t.Curr.X},i.Clipper.prototype.IsEvenOddFillType=function(t){return t.PolyTyp===i.PolyType.ptSubject?this.m_SubjFillType===i.PolyFillType.pftEvenOdd:this.m_ClipFillType===i.PolyFillType.pftEvenOdd},i.Clipper.prototype.IsEvenOddAltFillType=function(t){return t.PolyTyp===i.PolyType.ptSubject?this.m_ClipFillType===i.PolyFillType.pftEvenOdd:this.m_SubjFillType===i.PolyFillType.pftEvenOdd},i.Clipper.prototype.IsContributing=function(t){var r,o;switch(t.PolyTyp===i.PolyType.ptSubject?(r=this.m_SubjFillType,o=this.m_ClipFillType):(r=this.m_ClipFillType,o=this.m_SubjFillType),r){case i.PolyFillType.pftEvenOdd:if(0===t.WindDelta&&1!==t.WindCnt)return!1;break;case i.PolyFillType.pftNonZero:if(1!==Math.abs(t.WindCnt))return!1;break;case i.PolyFillType.pftPositive:if(1!==t.WindCnt)return!1;break;default:if(-1!==t.WindCnt)return!1}switch(this.m_ClipType){case i.ClipType.ctIntersection:switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0!==t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2>0;default:return t.WindCnt2<0}case i.ClipType.ctUnion:switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0===t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}case i.ClipType.ctDifference:if(t.PolyTyp===i.PolyType.ptSubject)switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0===t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}else switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0!==t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2>0;default:return t.WindCnt2<0}case i.ClipType.ctXor:if(0!==t.WindDelta)return!0;switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0===t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}}return!0},i.Clipper.prototype.SetWindingCount=function(t){for(var r=t.PrevInAEL;null!==r&&(r.PolyTyp!==t.PolyTyp||0===r.WindDelta);)r=r.PrevInAEL;if(null===r){var o=t.PolyTyp===i.PolyType.ptSubject?this.m_SubjFillType:this.m_ClipFillType;0===t.WindDelta?t.WindCnt=o===i.PolyFillType.pftNegative?-1:1:t.WindCnt=t.WindDelta,t.WindCnt2=0,r=this.m_ActiveEdges}else if(0===t.WindDelta&&this.m_ClipType!==i.ClipType.ctUnion)t.WindCnt=1,t.WindCnt2=r.WindCnt2,r=r.NextInAEL;else if(this.IsEvenOddFillType(t)){if(0===t.WindDelta){for(var a=!0,u=r.PrevInAEL;null!==u;)u.PolyTyp===r.PolyTyp&&0!==u.WindDelta&&(a=!a),u=u.PrevInAEL;t.WindCnt=a?0:1}else t.WindCnt=t.WindDelta;t.WindCnt2=r.WindCnt2,r=r.NextInAEL}else r.WindCnt*r.WindDelta<0?Math.abs(r.WindCnt)>1?r.WindDelta*t.WindDelta<0?t.WindCnt=r.WindCnt:t.WindCnt=r.WindCnt+t.WindDelta:t.WindCnt=0===t.WindDelta?1:t.WindDelta:0===t.WindDelta?t.WindCnt=r.WindCnt<0?r.WindCnt-1:r.WindCnt+1:r.WindDelta*t.WindDelta<0?t.WindCnt=r.WindCnt:t.WindCnt=r.WindCnt+t.WindDelta,t.WindCnt2=r.WindCnt2,r=r.NextInAEL;if(this.IsEvenOddAltFillType(t))for(;r!==t;)0!==r.WindDelta&&(t.WindCnt2=0===t.WindCnt2?1:0),r=r.NextInAEL;else for(;r!==t;)t.WindCnt2+=r.WindDelta,r=r.NextInAEL},i.Clipper.prototype.AddEdgeToSEL=function(t){null===this.m_SortedEdges?(this.m_SortedEdges=t,t.PrevInSEL=null,t.NextInSEL=null):(t.NextInSEL=this.m_SortedEdges,t.PrevInSEL=null,this.m_SortedEdges.PrevInSEL=t,this.m_SortedEdges=t)},i.Clipper.prototype.PopEdgeFromSEL=function(t){if(t.v=this.m_SortedEdges,null===t.v)return!1;var r=t.v;return this.m_SortedEdges=t.v.NextInSEL,null!==this.m_SortedEdges&&(this.m_SortedEdges.PrevInSEL=null),r.NextInSEL=null,r.PrevInSEL=null,!0},i.Clipper.prototype.CopyAELToSEL=function(){var t=this.m_ActiveEdges;for(this.m_SortedEdges=t;null!==t;)t.PrevInSEL=t.PrevInAEL,t.NextInSEL=t.NextInAEL,t=t.NextInAEL},i.Clipper.prototype.SwapPositionsInSEL=function(t,r){if(!(null===t.NextInSEL&&null===t.PrevInSEL||null===r.NextInSEL&&null===r.PrevInSEL)){if(t.NextInSEL===r)null!==(i=r.NextInSEL)&&(i.PrevInSEL=t),null!==(o=t.PrevInSEL)&&(o.NextInSEL=r),r.PrevInSEL=o,r.NextInSEL=t,t.PrevInSEL=r,t.NextInSEL=i;else if(r.NextInSEL===t){null!==(i=t.NextInSEL)&&(i.PrevInSEL=r),null!==(o=r.PrevInSEL)&&(o.NextInSEL=t),t.PrevInSEL=o,t.NextInSEL=r,r.PrevInSEL=t,r.NextInSEL=i}else{var i=t.NextInSEL,o=t.PrevInSEL;t.NextInSEL=r.NextInSEL,null!==t.NextInSEL&&(t.NextInSEL.PrevInSEL=t),t.PrevInSEL=r.PrevInSEL,null!==t.PrevInSEL&&(t.PrevInSEL.NextInSEL=t),r.NextInSEL=i,null!==r.NextInSEL&&(r.NextInSEL.PrevInSEL=r),r.PrevInSEL=o,null!==r.PrevInSEL&&(r.PrevInSEL.NextInSEL=r)}null===t.PrevInSEL?this.m_SortedEdges=t:null===r.PrevInSEL&&(this.m_SortedEdges=r)}},i.Clipper.prototype.AddLocalMaxPoly=function(t,r,i){this.AddOutPt(t,i),0===r.WindDelta&&this.AddOutPt(r,i),t.OutIdx===r.OutIdx?(t.OutIdx=-1,r.OutIdx=-1):t.OutIdx<r.OutIdx?this.AppendPolygon(t,r):this.AppendPolygon(r,t)},i.Clipper.prototype.AddLocalMinPoly=function(t,r,o){var a,u,l;if(i.ClipperBase.IsHorizontal(r)||t.Dx>r.Dx?(a=this.AddOutPt(t,o),r.OutIdx=t.OutIdx,t.Side=i.EdgeSide.esLeft,r.Side=i.EdgeSide.esRight,l=(u=t).PrevInAEL===r?r.PrevInAEL:u.PrevInAEL):(a=this.AddOutPt(r,o),t.OutIdx=r.OutIdx,t.Side=i.EdgeSide.esRight,r.Side=i.EdgeSide.esLeft,l=(u=r).PrevInAEL===t?t.PrevInAEL:u.PrevInAEL),null!==l&&l.OutIdx>=0&&l.Top.Y<o.Y&&u.Top.Y<o.Y){var c=i.Clipper.TopX(l,o.Y),p=i.Clipper.TopX(u,o.Y);if(c===p&&0!==u.WindDelta&&0!==l.WindDelta&&i.ClipperBase.SlopesEqual5(new i.IntPoint2(c,o.Y),l.Top,new i.IntPoint2(p,o.Y),u.Top,this.m_UseFullRange)){var h=this.AddOutPt(l,o);this.AddJoin(a,h,u.Top)}}return a},i.Clipper.prototype.AddOutPt=function(t,r){if(t.OutIdx<0){(a=this.CreateOutRec()).IsOpen=0===t.WindDelta;var o=new i.OutPt;return a.Pts=o,o.Idx=a.Idx,o.Pt.X=r.X,o.Pt.Y=r.Y,i.use_xyz&&(o.Pt.Z=r.Z),o.Next=o,o.Prev=o,a.IsOpen||this.SetHoleState(t,a),t.OutIdx=a.Idx,o}var a,u=(a=this.m_PolyOuts[t.OutIdx]).Pts,l=t.Side===i.EdgeSide.esLeft;return l&&i.IntPoint.op_Equality(r,u.Pt)?u:!l&&i.IntPoint.op_Equality(r,u.Prev.Pt)?u.Prev:((o=new i.OutPt).Idx=a.Idx,o.Pt.X=r.X,o.Pt.Y=r.Y,i.use_xyz&&(o.Pt.Z=r.Z),o.Next=u,o.Prev=u.Prev,o.Prev.Next=o,u.Prev=o,l&&(a.Pts=o),o)},i.Clipper.prototype.GetLastOutPt=function(t){var r=this.m_PolyOuts[t.OutIdx];return t.Side===i.EdgeSide.esLeft?r.Pts:r.Pts.Prev},i.Clipper.prototype.SwapPoints=function(t,r){var o=new i.IntPoint1(t.Value);t.Value.X=r.Value.X,t.Value.Y=r.Value.Y,i.use_xyz&&(t.Value.Z=r.Value.Z),r.Value.X=o.X,r.Value.Y=o.Y,i.use_xyz&&(r.Value.Z=o.Z)},i.Clipper.prototype.HorzSegmentsOverlap=function(t,r,i,o){var a;return t>r&&(a=t,t=r,r=a),i>o&&(a=i,i=o,o=a),t<o&&i<r},i.Clipper.prototype.SetHoleState=function(t,r){for(var i=t.PrevInAEL,o=null;null!==i;)i.OutIdx>=0&&0!==i.WindDelta&&(null===o?o=i:o.OutIdx===i.OutIdx&&(o=null)),i=i.PrevInAEL;null===o?(r.FirstLeft=null,r.IsHole=!1):(r.FirstLeft=this.m_PolyOuts[o.OutIdx],r.IsHole=!r.FirstLeft.IsHole)},i.Clipper.prototype.GetDx=function(t,r){return t.Y===r.Y?i.ClipperBase.horizontal:(r.X-t.X)/(r.Y-t.Y)},i.Clipper.prototype.FirstIsBottomPt=function(t,r){for(var o=t.Prev;i.IntPoint.op_Equality(o.Pt,t.Pt)&&o!==t;)o=o.Prev;var a=Math.abs(this.GetDx(t.Pt,o.Pt));for(o=t.Next;i.IntPoint.op_Equality(o.Pt,t.Pt)&&o!==t;)o=o.Next;var u=Math.abs(this.GetDx(t.Pt,o.Pt));for(o=r.Prev;i.IntPoint.op_Equality(o.Pt,r.Pt)&&o!==r;)o=o.Prev;var l=Math.abs(this.GetDx(r.Pt,o.Pt));for(o=r.Next;i.IntPoint.op_Equality(o.Pt,r.Pt)&&o!==r;)o=o.Next;var c=Math.abs(this.GetDx(r.Pt,o.Pt));return Math.max(a,u)===Math.max(l,c)&&Math.min(a,u)===Math.min(l,c)?this.Area(t)>0:a>=l&&a>=c||u>=l&&u>=c},i.Clipper.prototype.GetBottomPt=function(t){for(var r=null,o=t.Next;o!==t;)o.Pt.Y>t.Pt.Y?(t=o,r=null):o.Pt.Y===t.Pt.Y&&o.Pt.X<=t.Pt.X&&(o.Pt.X<t.Pt.X?(r=null,t=o):o.Next!==t&&o.Prev!==t&&(r=o)),o=o.Next;if(null!==r)for(;r!==o;)for(this.FirstIsBottomPt(o,r)||(t=r),r=r.Next;i.IntPoint.op_Inequality(r.Pt,t.Pt);)r=r.Next;return t},i.Clipper.prototype.GetLowermostRec=function(t,r){null===t.BottomPt&&(t.BottomPt=this.GetBottomPt(t.Pts)),null===r.BottomPt&&(r.BottomPt=this.GetBottomPt(r.Pts));var i=t.BottomPt,o=r.BottomPt;return i.Pt.Y>o.Pt.Y?t:i.Pt.Y<o.Pt.Y?r:i.Pt.X<o.Pt.X?t:i.Pt.X>o.Pt.X||i.Next===i?r:o.Next===o||this.FirstIsBottomPt(i,o)?t:r},i.Clipper.prototype.OutRec1RightOfOutRec2=function(t,r){do{if((t=t.FirstLeft)===r)return!0}while(null!==t);return!1},i.Clipper.prototype.GetOutRec=function(t){for(var r=this.m_PolyOuts[t];r!==this.m_PolyOuts[r.Idx];)r=this.m_PolyOuts[r.Idx];return r},i.Clipper.prototype.AppendPolygon=function(t,r){var o,a=this.m_PolyOuts[t.OutIdx],u=this.m_PolyOuts[r.OutIdx];o=this.OutRec1RightOfOutRec2(a,u)?u:this.OutRec1RightOfOutRec2(u,a)?a:this.GetLowermostRec(a,u);var l=a.Pts,c=l.Prev,p=u.Pts,h=p.Prev;t.Side===i.EdgeSide.esLeft?r.Side===i.EdgeSide.esLeft?(this.ReversePolyPtLinks(p),p.Next=l,l.Prev=p,c.Next=h,h.Prev=c,a.Pts=h):(h.Next=l,l.Prev=h,p.Prev=c,c.Next=p,a.Pts=p):r.Side===i.EdgeSide.esRight?(this.ReversePolyPtLinks(p),c.Next=h,h.Prev=c,p.Next=l,l.Prev=p):(c.Next=p,p.Prev=c,l.Prev=h,h.Next=l),a.BottomPt=null,o===u&&(u.FirstLeft!==a&&(a.FirstLeft=u.FirstLeft),a.IsHole=u.IsHole),u.Pts=null,u.BottomPt=null,u.FirstLeft=a;var y=t.OutIdx,d=r.OutIdx;t.OutIdx=-1,r.OutIdx=-1;for(var v=this.m_ActiveEdges;null!==v;){if(v.OutIdx===d){v.OutIdx=y,v.Side=t.Side;break}v=v.NextInAEL}u.Idx=a.Idx},i.Clipper.prototype.ReversePolyPtLinks=function(t){if(null!==t){var r,i;r=t;do{i=r.Next,r.Next=r.Prev,r.Prev=i,r=i}while(r!==t)}},i.Clipper.SwapSides=function(t,r){var i=t.Side;t.Side=r.Side,r.Side=i},i.Clipper.SwapPolyIndexes=function(t,r){var i=t.OutIdx;t.OutIdx=r.OutIdx,r.OutIdx=i},i.Clipper.prototype.IntersectEdges=function(t,r,o){var a=t.OutIdx>=0,u=r.OutIdx>=0;if(i.use_xyz&&this.SetZ(o,t,r),!i.use_lines||0!==t.WindDelta&&0!==r.WindDelta){if(t.PolyTyp===r.PolyTyp)if(this.IsEvenOddFillType(t)){var l=t.WindCnt;t.WindCnt=r.WindCnt,r.WindCnt=l}else t.WindCnt+r.WindDelta===0?t.WindCnt=-t.WindCnt:t.WindCnt+=r.WindDelta,r.WindCnt-t.WindDelta==0?r.WindCnt=-r.WindCnt:r.WindCnt-=t.WindDelta;else this.IsEvenOddFillType(r)?t.WindCnt2=0===t.WindCnt2?1:0:t.WindCnt2+=r.WindDelta,this.IsEvenOddFillType(t)?r.WindCnt2=0===r.WindCnt2?1:0:r.WindCnt2-=t.WindDelta;var c,p,h,y,d,v;switch(t.PolyTyp===i.PolyType.ptSubject?(c=this.m_SubjFillType,h=this.m_ClipFillType):(c=this.m_ClipFillType,h=this.m_SubjFillType),r.PolyTyp===i.PolyType.ptSubject?(p=this.m_SubjFillType,y=this.m_ClipFillType):(p=this.m_ClipFillType,y=this.m_SubjFillType),c){case i.PolyFillType.pftPositive:d=t.WindCnt;break;case i.PolyFillType.pftNegative:d=-t.WindCnt;break;default:d=Math.abs(t.WindCnt)}switch(p){case i.PolyFillType.pftPositive:v=r.WindCnt;break;case i.PolyFillType.pftNegative:v=-r.WindCnt;break;default:v=Math.abs(r.WindCnt)}if(a&&u)0!==d&&1!==d||0!==v&&1!==v||t.PolyTyp!==r.PolyTyp&&this.m_ClipType!==i.ClipType.ctXor?this.AddLocalMaxPoly(t,r,o):(this.AddOutPt(t,o),this.AddOutPt(r,o),i.Clipper.SwapSides(t,r),i.Clipper.SwapPolyIndexes(t,r));else if(a)0!==v&&1!==v||(this.AddOutPt(t,o),i.Clipper.SwapSides(t,r),i.Clipper.SwapPolyIndexes(t,r));else if(u)0!==d&&1!==d||(this.AddOutPt(r,o),i.Clipper.SwapSides(t,r),i.Clipper.SwapPolyIndexes(t,r));else if(!(0!==d&&1!==d||0!==v&&1!==v)){var m,b;switch(h){case i.PolyFillType.pftPositive:m=t.WindCnt2;break;case i.PolyFillType.pftNegative:m=-t.WindCnt2;break;default:m=Math.abs(t.WindCnt2)}switch(y){case i.PolyFillType.pftPositive:b=r.WindCnt2;break;case i.PolyFillType.pftNegative:b=-r.WindCnt2;break;default:b=Math.abs(r.WindCnt2)}if(t.PolyTyp!==r.PolyTyp)this.AddLocalMinPoly(t,r,o);else if(1===d&&1===v)switch(this.m_ClipType){case i.ClipType.ctIntersection:m>0&&b>0&&this.AddLocalMinPoly(t,r,o);break;case i.ClipType.ctUnion:m<=0&&b<=0&&this.AddLocalMinPoly(t,r,o);break;case i.ClipType.ctDifference:(t.PolyTyp===i.PolyType.ptClip&&m>0&&b>0||t.PolyTyp===i.PolyType.ptSubject&&m<=0&&b<=0)&&this.AddLocalMinPoly(t,r,o);break;case i.ClipType.ctXor:this.AddLocalMinPoly(t,r,o)}else i.Clipper.SwapSides(t,r)}}else{if(0===t.WindDelta&&0===r.WindDelta)return;t.PolyTyp===r.PolyTyp&&t.WindDelta!==r.WindDelta&&this.m_ClipType===i.ClipType.ctUnion?0===t.WindDelta?u&&(this.AddOutPt(t,o),a&&(t.OutIdx=-1)):a&&(this.AddOutPt(r,o),u&&(r.OutIdx=-1)):t.PolyTyp!==r.PolyTyp&&(0!==t.WindDelta||1!==Math.abs(r.WindCnt)||this.m_ClipType===i.ClipType.ctUnion&&0!==r.WindCnt2?0!==r.WindDelta||1!==Math.abs(t.WindCnt)||this.m_ClipType===i.ClipType.ctUnion&&0!==t.WindCnt2||(this.AddOutPt(r,o),u&&(r.OutIdx=-1)):(this.AddOutPt(t,o),a&&(t.OutIdx=-1)))}},i.Clipper.prototype.DeleteFromSEL=function(t){var r=t.PrevInSEL,i=t.NextInSEL;null===r&&null===i&&t!==this.m_SortedEdges||(null!==r?r.NextInSEL=i:this.m_SortedEdges=i,null!==i&&(i.PrevInSEL=r),t.NextInSEL=null,t.PrevInSEL=null)},i.Clipper.prototype.ProcessHorizontals=function(){for(var t={};this.PopEdgeFromSEL(t);)this.ProcessHorizontal(t.v)},i.Clipper.prototype.GetHorzDirection=function(t,r){t.Bot.X<t.Top.X?(r.Left=t.Bot.X,r.Right=t.Top.X,r.Dir=i.Direction.dLeftToRight):(r.Left=t.Top.X,r.Right=t.Bot.X,r.Dir=i.Direction.dRightToLeft)},i.Clipper.prototype.ProcessHorizontal=function(t){var r={Dir:null,Left:null,Right:null};this.GetHorzDirection(t,r);for(var o=r.Dir,a=r.Left,u=r.Right,l=0===t.WindDelta,c=t,p=null;null!==c.NextInLML&&i.ClipperBase.IsHorizontal(c.NextInLML);)c=c.NextInLML;null===c.NextInLML&&(p=this.GetMaximaPair(c));var h=this.m_Maxima;if(null!==h)if(o===i.Direction.dLeftToRight){for(;null!==h&&h.X<=t.Bot.X;)h=h.Next;null!==h&&h.X>=c.Top.X&&(h=null)}else{for(;null!==h.Next&&h.Next.X<t.Bot.X;)h=h.Next;h.X<=c.Top.X&&(h=null)}for(var y=null;;){for(var d=t===c,v=this.GetNextInAEL(t,o);null!==v;){if(null!==h)if(o===i.Direction.dLeftToRight)for(;null!==h&&h.X<v.Curr.X;)t.OutIdx>=0&&!l&&this.AddOutPt(t,new i.IntPoint2(h.X,t.Bot.Y)),h=h.Next;else for(;null!==h&&h.X>v.Curr.X;)t.OutIdx>=0&&!l&&this.AddOutPt(t,new i.IntPoint2(h.X,t.Bot.Y)),h=h.Prev;if(o===i.Direction.dLeftToRight&&v.Curr.X>u||o===i.Direction.dRightToLeft&&v.Curr.X<a)break;if(v.Curr.X===t.Top.X&&null!==t.NextInLML&&v.Dx<t.NextInLML.Dx)break;if(t.OutIdx>=0&&!l){i.use_xyz&&(o===i.Direction.dLeftToRight?this.SetZ(v.Curr,t,v):this.SetZ(v.Curr,v,t)),y=this.AddOutPt(t,v.Curr);for(var m=this.m_SortedEdges;null!==m;){if(m.OutIdx>=0&&this.HorzSegmentsOverlap(t.Bot.X,t.Top.X,m.Bot.X,m.Top.X)){var b=this.GetLastOutPt(m);this.AddJoin(b,y,m.Top)}m=m.NextInSEL}this.AddGhostJoin(y,t.Bot)}if(v===p&&d)return t.OutIdx>=0&&this.AddLocalMaxPoly(t,p,t.Top),this.DeleteFromAEL(t),void this.DeleteFromAEL(p);if(o===i.Direction.dLeftToRight){var P=new i.IntPoint2(v.Curr.X,t.Curr.Y);this.IntersectEdges(t,v,P)}else{P=new i.IntPoint2(v.Curr.X,t.Curr.Y);this.IntersectEdges(v,t,P)}var _=this.GetNextInAEL(v,o);this.SwapPositionsInAEL(t,v),v=_}if(null===t.NextInLML||!i.ClipperBase.IsHorizontal(t.NextInLML))break;(t=this.UpdateEdgeIntoAEL(t)).OutIdx>=0&&this.AddOutPt(t,t.Bot),r={Dir:o,Left:a,Right:u},this.GetHorzDirection(t,r),o=r.Dir,a=r.Left,u=r.Right}if(t.OutIdx>=0&&null===y){y=this.GetLastOutPt(t);for(m=this.m_SortedEdges;null!==m;){if(m.OutIdx>=0&&this.HorzSegmentsOverlap(t.Bot.X,t.Top.X,m.Bot.X,m.Top.X)){b=this.GetLastOutPt(m);this.AddJoin(b,y,m.Top)}m=m.NextInSEL}this.AddGhostJoin(y,t.Top)}if(null!==t.NextInLML)if(t.OutIdx>=0){if(y=this.AddOutPt(t,t.Top),0===(t=this.UpdateEdgeIntoAEL(t)).WindDelta)return;var g=t.PrevInAEL;_=t.NextInAEL;if(null!==g&&g.Curr.X===t.Bot.X&&g.Curr.Y===t.Bot.Y&&0===g.WindDelta&&g.OutIdx>=0&&g.Curr.Y>g.Top.Y&&i.ClipperBase.SlopesEqual3(t,g,this.m_UseFullRange)){b=this.AddOutPt(g,t.Bot);this.AddJoin(y,b,t.Top)}else if(null!==_&&_.Curr.X===t.Bot.X&&_.Curr.Y===t.Bot.Y&&0!==_.WindDelta&&_.OutIdx>=0&&_.Curr.Y>_.Top.Y&&i.ClipperBase.SlopesEqual3(t,_,this.m_UseFullRange)){b=this.AddOutPt(_,t.Bot);this.AddJoin(y,b,t.Top)}}else t=this.UpdateEdgeIntoAEL(t);else t.OutIdx>=0&&this.AddOutPt(t,t.Top),this.DeleteFromAEL(t)},i.Clipper.prototype.GetNextInAEL=function(t,r){return r===i.Direction.dLeftToRight?t.NextInAEL:t.PrevInAEL},i.Clipper.prototype.IsMinima=function(t){return null!==t&&t.Prev.NextInLML!==t&&t.Next.NextInLML!==t},i.Clipper.prototype.IsMaxima=function(t,r){return null!==t&&t.Top.Y===r&&null===t.NextInLML},i.Clipper.prototype.IsIntermediate=function(t,r){return t.Top.Y===r&&null!==t.NextInLML},i.Clipper.prototype.GetMaximaPair=function(t){return i.IntPoint.op_Equality(t.Next.Top,t.Top)&&null===t.Next.NextInLML?t.Next:i.IntPoint.op_Equality(t.Prev.Top,t.Top)&&null===t.Prev.NextInLML?t.Prev:null},i.Clipper.prototype.GetMaximaPairEx=function(t){var r=this.GetMaximaPair(t);return null===r||r.OutIdx===i.ClipperBase.Skip||r.NextInAEL===r.PrevInAEL&&!i.ClipperBase.IsHorizontal(r)?null:r},i.Clipper.prototype.ProcessIntersections=function(t){if(null===this.m_ActiveEdges)return!0;try{if(this.BuildIntersectList(t),0===this.m_IntersectList.length)return!0;if(1!==this.m_IntersectList.length&&!this.FixupIntersectionOrder())return!1;this.ProcessIntersectList()}catch(t){this.m_SortedEdges=null,this.m_IntersectList.length=0,i.Error("ProcessIntersections error")}return this.m_SortedEdges=null,!0},i.Clipper.prototype.BuildIntersectList=function(t){if(null!==this.m_ActiveEdges){var r=this.m_ActiveEdges;for(this.m_SortedEdges=r;null!==r;)r.PrevInSEL=r.PrevInAEL,r.NextInSEL=r.NextInAEL,r.Curr.X=i.Clipper.TopX(r,t),r=r.NextInAEL;for(var o=!0;o&&null!==this.m_SortedEdges;){for(o=!1,r=this.m_SortedEdges;null!==r.NextInSEL;){var a=r.NextInSEL,u=new i.IntPoint0;if(r.Curr.X>a.Curr.X){this.IntersectPoint(r,a,u),u.Y<t&&(u=new i.IntPoint2(i.Clipper.TopX(r,t),t));var l=new i.IntersectNode;l.Edge1=r,l.Edge2=a,l.Pt.X=u.X,l.Pt.Y=u.Y,i.use_xyz&&(l.Pt.Z=u.Z),this.m_IntersectList.push(l),this.SwapPositionsInSEL(r,a),o=!0}else r=a}if(null===r.PrevInSEL)break;r.PrevInSEL.NextInSEL=null}this.m_SortedEdges=null}},i.Clipper.prototype.EdgesAdjacent=function(t){return t.Edge1.NextInSEL===t.Edge2||t.Edge1.PrevInSEL===t.Edge2},i.Clipper.IntersectNodeSort=function(t,r){return r.Pt.Y-t.Pt.Y},i.Clipper.prototype.FixupIntersectionOrder=function(){this.m_IntersectList.sort(this.m_IntersectNodeComparer),this.CopyAELToSEL();for(var t=this.m_IntersectList.length,r=0;r<t;r++){if(!this.EdgesAdjacent(this.m_IntersectList[r])){for(var i=r+1;i<t&&!this.EdgesAdjacent(this.m_IntersectList[i]);)i++;if(i===t)return!1;var o=this.m_IntersectList[r];this.m_IntersectList[r]=this.m_IntersectList[i],this.m_IntersectList[i]=o}this.SwapPositionsInSEL(this.m_IntersectList[r].Edge1,this.m_IntersectList[r].Edge2)}return!0},i.Clipper.prototype.ProcessIntersectList=function(){for(var t=0,r=this.m_IntersectList.length;t<r;t++){var i=this.m_IntersectList[t];this.IntersectEdges(i.Edge1,i.Edge2,i.Pt),this.SwapPositionsInAEL(i.Edge1,i.Edge2)}this.m_IntersectList.length=0};l.msie?i.Clipper.Round=function R1(t){return t<0?Math.ceil(t-.5):Math.round(t)}:l.chromium?i.Clipper.Round=function R3(t){return t<0?-Math.round(Math.abs(t)):Math.round(t)}:l.safari?i.Clipper.Round=function R4(t){return t<0?(t-=.5)<-2147483648?Math.ceil(t):0|t:(t+=.5)>2147483647?Math.floor(t):0|t}:i.Clipper.Round=function R2(t){return t<0?Math.ceil(t-.5):Math.floor(t+.5)},i.Clipper.TopX=function(t,r){return r===t.Top.Y?t.Top.X:t.Bot.X+i.Clipper.Round(t.Dx*(r-t.Bot.Y))},i.Clipper.prototype.IntersectPoint=function(t,r,o){var a,u;if(o.X=0,o.Y=0,t.Dx===r.Dx)return o.Y=t.Curr.Y,void(o.X=i.Clipper.TopX(t,o.Y));if(0===t.Delta.X)o.X=t.Bot.X,i.ClipperBase.IsHorizontal(r)?o.Y=r.Bot.Y:(u=r.Bot.Y-r.Bot.X/r.Dx,o.Y=i.Clipper.Round(o.X/r.Dx+u));else if(0===r.Delta.X)o.X=r.Bot.X,i.ClipperBase.IsHorizontal(t)?o.Y=t.Bot.Y:(a=t.Bot.Y-t.Bot.X/t.Dx,o.Y=i.Clipper.Round(o.X/t.Dx+a));else{a=t.Bot.X-t.Bot.Y*t.Dx;var l=((u=r.Bot.X-r.Bot.Y*r.Dx)-a)/(t.Dx-r.Dx);o.Y=i.Clipper.Round(l),Math.abs(t.Dx)<Math.abs(r.Dx)?o.X=i.Clipper.Round(t.Dx*l+a):o.X=i.Clipper.Round(r.Dx*l+u)}if(o.Y<t.Top.Y||o.Y<r.Top.Y){if(t.Top.Y>r.Top.Y)return o.Y=t.Top.Y,o.X=i.Clipper.TopX(r,t.Top.Y),o.X<t.Top.X;o.Y=r.Top.Y,Math.abs(t.Dx)<Math.abs(r.Dx)?o.X=i.Clipper.TopX(t,o.Y):o.X=i.Clipper.TopX(r,o.Y)}o.Y>t.Curr.Y&&(o.Y=t.Curr.Y,Math.abs(t.Dx)>Math.abs(r.Dx)?o.X=i.Clipper.TopX(r,o.Y):o.X=i.Clipper.TopX(t,o.Y))},i.Clipper.prototype.ProcessEdgesAtTopOfScanbeam=function(t){for(var r=this.m_ActiveEdges;null!==r;){var o=this.IsMaxima(r,t);if(o){var a=this.GetMaximaPairEx(r);o=null===a||!i.ClipperBase.IsHorizontal(a)}if(o){this.StrictlySimple&&this.InsertMaxima(r.Top.X);var u=r.PrevInAEL;this.DoMaxima(r),r=null===u?this.m_ActiveEdges:u.NextInAEL}else{if(this.IsIntermediate(r,t)&&i.ClipperBase.IsHorizontal(r.NextInLML)?((r=this.UpdateEdgeIntoAEL(r)).OutIdx>=0&&this.AddOutPt(r,r.Bot),this.AddEdgeToSEL(r)):(r.Curr.X=i.Clipper.TopX(r,t),r.Curr.Y=t),i.use_xyz&&(r.Top.Y===t?r.Curr.Z=r.Top.Z:r.Bot.Y===t?r.Curr.Z=r.Bot.Z:r.Curr.Z=0),this.StrictlySimple){u=r.PrevInAEL;if(r.OutIdx>=0&&0!==r.WindDelta&&null!==u&&u.OutIdx>=0&&u.Curr.X===r.Curr.X&&0!==u.WindDelta){var l=new i.IntPoint1(r.Curr);i.use_xyz&&this.SetZ(l,u,r);var c=this.AddOutPt(u,l),p=this.AddOutPt(r,l);this.AddJoin(c,p,l)}}r=r.NextInAEL}}for(this.ProcessHorizontals(),this.m_Maxima=null,r=this.m_ActiveEdges;null!==r;){if(this.IsIntermediate(r,t)){c=null;r.OutIdx>=0&&(c=this.AddOutPt(r,r.Top));u=(r=this.UpdateEdgeIntoAEL(r)).PrevInAEL;var h=r.NextInAEL;if(null!==u&&u.Curr.X===r.Bot.X&&u.Curr.Y===r.Bot.Y&&null!==c&&u.OutIdx>=0&&u.Curr.Y===u.Top.Y&&i.ClipperBase.SlopesEqual5(r.Curr,r.Top,u.Curr,u.Top,this.m_UseFullRange)&&0!==r.WindDelta&&0!==u.WindDelta){p=this.AddOutPt(ePrev2,r.Bot);this.AddJoin(c,p,r.Top)}else if(null!==h&&h.Curr.X===r.Bot.X&&h.Curr.Y===r.Bot.Y&&null!==c&&h.OutIdx>=0&&h.Curr.Y===h.Top.Y&&i.ClipperBase.SlopesEqual5(r.Curr,r.Top,h.Curr,h.Top,this.m_UseFullRange)&&0!==r.WindDelta&&0!==h.WindDelta){p=this.AddOutPt(h,r.Bot);this.AddJoin(c,p,r.Top)}}r=r.NextInAEL}},i.Clipper.prototype.DoMaxima=function(t){var r=this.GetMaximaPairEx(t);if(null===r)return t.OutIdx>=0&&this.AddOutPt(t,t.Top),void this.DeleteFromAEL(t);for(var o=t.NextInAEL;null!==o&&o!==r;)this.IntersectEdges(t,o,t.Top),this.SwapPositionsInAEL(t,o),o=t.NextInAEL;-1===t.OutIdx&&-1===r.OutIdx?(this.DeleteFromAEL(t),this.DeleteFromAEL(r)):t.OutIdx>=0&&r.OutIdx>=0?(t.OutIdx>=0&&this.AddLocalMaxPoly(t,r,t.Top),this.DeleteFromAEL(t),this.DeleteFromAEL(r)):i.use_lines&&0===t.WindDelta?(t.OutIdx>=0&&(this.AddOutPt(t,t.Top),t.OutIdx=i.ClipperBase.Unassigned),this.DeleteFromAEL(t),r.OutIdx>=0&&(this.AddOutPt(r,t.Top),r.OutIdx=i.ClipperBase.Unassigned),this.DeleteFromAEL(r)):i.Error("DoMaxima error")},i.Clipper.ReversePaths=function(t){for(var r=0,i=t.length;r<i;r++)t[r].reverse()},i.Clipper.Orientation=function(t){return i.Clipper.Area(t)>=0},i.Clipper.prototype.PointCount=function(t){if(null===t)return 0;var r=0,i=t;do{r++,i=i.Next}while(i!==t);return r},i.Clipper.prototype.BuildResult=function(t){i.Clear(t);for(var r=0,o=this.m_PolyOuts.length;r<o;r++){var a=this.m_PolyOuts[r];if(null!==a.Pts){var u=a.Pts.Prev,l=this.PointCount(u);if(!(l<2)){for(var c=new Array(l),p=0;p<l;p++)c[p]=u.Pt,u=u.Prev;t.push(c)}}}},i.Clipper.prototype.BuildResult2=function(t){t.Clear();for(var r=0,o=this.m_PolyOuts.length;r<o;r++){var a=this.m_PolyOuts[r],u=this.PointCount(a.Pts);if(!(a.IsOpen&&u<2||!a.IsOpen&&u<3)){this.FixHoleLinkage(a);var l=new i.PolyNode;t.m_AllPolys.push(l),a.PolyNode=l,l.m_polygon.length=u;for(var c=a.Pts.Prev,p=0;p<u;p++)l.m_polygon[p]=c.Pt,c=c.Prev}}for(r=0,o=this.m_PolyOuts.length;r<o;r++){null!==(a=this.m_PolyOuts[r]).PolyNode&&(a.IsOpen?(a.PolyNode.IsOpen=!0,t.AddChild(a.PolyNode)):null!==a.FirstLeft&&null!==a.FirstLeft.PolyNode?a.FirstLeft.PolyNode.AddChild(a.PolyNode):t.AddChild(a.PolyNode))}},i.Clipper.prototype.FixupOutPolyline=function(t){for(var r=t.Pts,o=r.Prev;r!==o;)if(r=r.Next,i.IntPoint.op_Equality(r.Pt,r.Prev.Pt)){r===o&&(o=r.Prev);var a=r.Prev;a.Next=r.Next,r.Next.Prev=a,r=a}r===r.Prev&&(t.Pts=null)},i.Clipper.prototype.FixupOutPolygon=function(t){var r=null;t.BottomPt=null;for(var o=t.Pts,a=this.PreserveCollinear||this.StrictlySimple;;){if(o.Prev===o||o.Prev===o.Next)return void(t.Pts=null);if(i.IntPoint.op_Equality(o.Pt,o.Next.Pt)||i.IntPoint.op_Equality(o.Pt,o.Prev.Pt)||i.ClipperBase.SlopesEqual4(o.Prev.Pt,o.Pt,o.Next.Pt,this.m_UseFullRange)&&(!a||!this.Pt2IsBetweenPt1AndPt3(o.Prev.Pt,o.Pt,o.Next.Pt)))r=null,o.Prev.Next=o.Next,o.Next.Prev=o.Prev,o=o.Prev;else{if(o===r)break;null===r&&(r=o),o=o.Next}}t.Pts=o},i.Clipper.prototype.DupOutPt=function(t,r){var o=new i.OutPt;return o.Pt.X=t.Pt.X,o.Pt.Y=t.Pt.Y,i.use_xyz&&(o.Pt.Z=t.Pt.Z),o.Idx=t.Idx,r?(o.Next=t.Next,o.Prev=t,t.Next.Prev=o,t.Next=o):(o.Prev=t.Prev,o.Next=t,t.Prev.Next=o,t.Prev=o),o},i.Clipper.prototype.GetOverlap=function(t,r,i,o,a){return t<r?i<o?(a.Left=Math.max(t,i),a.Right=Math.min(r,o)):(a.Left=Math.max(t,o),a.Right=Math.min(r,i)):i<o?(a.Left=Math.max(r,i),a.Right=Math.min(t,o)):(a.Left=Math.max(r,o),a.Right=Math.min(t,i)),a.Left<a.Right},i.Clipper.prototype.JoinHorz=function(t,r,o,a,u,l){var c=t.Pt.X>r.Pt.X?i.Direction.dRightToLeft:i.Direction.dLeftToRight,p=o.Pt.X>a.Pt.X?i.Direction.dRightToLeft:i.Direction.dLeftToRight;if(c===p)return!1;if(c===i.Direction.dLeftToRight){for(;t.Next.Pt.X<=u.X&&t.Next.Pt.X>=t.Pt.X&&t.Next.Pt.Y===u.Y;)t=t.Next;l&&t.Pt.X!==u.X&&(t=t.Next),r=this.DupOutPt(t,!l),i.IntPoint.op_Inequality(r.Pt,u)&&((t=r).Pt.X=u.X,t.Pt.Y=u.Y,i.use_xyz&&(t.Pt.Z=u.Z),r=this.DupOutPt(t,!l))}else{for(;t.Next.Pt.X>=u.X&&t.Next.Pt.X<=t.Pt.X&&t.Next.Pt.Y===u.Y;)t=t.Next;l||t.Pt.X===u.X||(t=t.Next),r=this.DupOutPt(t,l),i.IntPoint.op_Inequality(r.Pt,u)&&((t=r).Pt.X=u.X,t.Pt.Y=u.Y,i.use_xyz&&(t.Pt.Z=u.Z),r=this.DupOutPt(t,l))}if(p===i.Direction.dLeftToRight){for(;o.Next.Pt.X<=u.X&&o.Next.Pt.X>=o.Pt.X&&o.Next.Pt.Y===u.Y;)o=o.Next;l&&o.Pt.X!==u.X&&(o=o.Next),a=this.DupOutPt(o,!l),i.IntPoint.op_Inequality(a.Pt,u)&&((o=a).Pt.X=u.X,o.Pt.Y=u.Y,i.use_xyz&&(o.Pt.Z=u.Z),a=this.DupOutPt(o,!l))}else{for(;o.Next.Pt.X>=u.X&&o.Next.Pt.X<=o.Pt.X&&o.Next.Pt.Y===u.Y;)o=o.Next;l||o.Pt.X===u.X||(o=o.Next),a=this.DupOutPt(o,l),i.IntPoint.op_Inequality(a.Pt,u)&&((o=a).Pt.X=u.X,o.Pt.Y=u.Y,i.use_xyz&&(o.Pt.Z=u.Z),a=this.DupOutPt(o,l))}return c===i.Direction.dLeftToRight===l?(t.Prev=o,o.Next=t,r.Next=a,a.Prev=r):(t.Next=o,o.Prev=t,r.Prev=a,a.Next=r),!0},i.Clipper.prototype.JoinPoints=function(t,r,o){var a=t.OutPt1,u=new i.OutPt,l=t.OutPt2,c=new i.OutPt,p=t.OutPt1.Pt.Y===t.OffPt.Y;if(p&&i.IntPoint.op_Equality(t.OffPt,t.OutPt1.Pt)&&i.IntPoint.op_Equality(t.OffPt,t.OutPt2.Pt)){if(r!==o)return!1;for(u=t.OutPt1.Next;u!==a&&i.IntPoint.op_Equality(u.Pt,t.OffPt);)u=u.Next;var h=u.Pt.Y>t.OffPt.Y;for(c=t.OutPt2.Next;c!==l&&i.IntPoint.op_Equality(c.Pt,t.OffPt);)c=c.Next;return h!==c.Pt.Y>t.OffPt.Y&&(h?(u=this.DupOutPt(a,!1),c=this.DupOutPt(l,!0),a.Prev=l,l.Next=a,u.Next=c,c.Prev=u,t.OutPt1=a,t.OutPt2=u,!0):(u=this.DupOutPt(a,!0),c=this.DupOutPt(l,!1),a.Next=l,l.Prev=a,u.Prev=c,c.Next=u,t.OutPt1=a,t.OutPt2=u,!0))}if(p){for(u=a;a.Prev.Pt.Y===a.Pt.Y&&a.Prev!==u&&a.Prev!==l;)a=a.Prev;for(;u.Next.Pt.Y===u.Pt.Y&&u.Next!==a&&u.Next!==l;)u=u.Next;if(u.Next===a||u.Next===l)return!1;for(c=l;l.Prev.Pt.Y===l.Pt.Y&&l.Prev!==c&&l.Prev!==u;)l=l.Prev;for(;c.Next.Pt.Y===c.Pt.Y&&c.Next!==l&&c.Next!==a;)c=c.Next;if(c.Next===l||c.Next===a)return!1;var y={Left:null,Right:null};if(!this.GetOverlap(a.Pt.X,u.Pt.X,l.Pt.X,c.Pt.X,y))return!1;var d,v=y.Left,m=y.Right,b=new i.IntPoint0;return a.Pt.X>=v&&a.Pt.X<=m?(b.X=a.Pt.X,b.Y=a.Pt.Y,i.use_xyz&&(b.Z=a.Pt.Z),d=a.Pt.X>u.Pt.X):l.Pt.X>=v&&l.Pt.X<=m?(b.X=l.Pt.X,b.Y=l.Pt.Y,i.use_xyz&&(b.Z=l.Pt.Z),d=l.Pt.X>c.Pt.X):u.Pt.X>=v&&u.Pt.X<=m?(b.X=u.Pt.X,b.Y=u.Pt.Y,i.use_xyz&&(b.Z=u.Pt.Z),d=u.Pt.X>a.Pt.X):(b.X=c.Pt.X,b.Y=c.Pt.Y,i.use_xyz&&(b.Z=c.Pt.Z),d=c.Pt.X>l.Pt.X),t.OutPt1=a,t.OutPt2=l,this.JoinHorz(a,u,l,c,b,d)}for(u=a.Next;i.IntPoint.op_Equality(u.Pt,a.Pt)&&u!==a;)u=u.Next;var P=u.Pt.Y>a.Pt.Y||!i.ClipperBase.SlopesEqual4(a.Pt,u.Pt,t.OffPt,this.m_UseFullRange);if(P){for(u=a.Prev;i.IntPoint.op_Equality(u.Pt,a.Pt)&&u!==a;)u=u.Prev;if(u.Pt.Y>a.Pt.Y||!i.ClipperBase.SlopesEqual4(a.Pt,u.Pt,t.OffPt,this.m_UseFullRange))return!1}for(c=l.Next;i.IntPoint.op_Equality(c.Pt,l.Pt)&&c!==l;)c=c.Next;var _=c.Pt.Y>l.Pt.Y||!i.ClipperBase.SlopesEqual4(l.Pt,c.Pt,t.OffPt,this.m_UseFullRange);if(_){for(c=l.Prev;i.IntPoint.op_Equality(c.Pt,l.Pt)&&c!==l;)c=c.Prev;if(c.Pt.Y>l.Pt.Y||!i.ClipperBase.SlopesEqual4(l.Pt,c.Pt,t.OffPt,this.m_UseFullRange))return!1}return u!==a&&c!==l&&u!==c&&(r!==o||P!==_)&&(P?(u=this.DupOutPt(a,!1),c=this.DupOutPt(l,!0),a.Prev=l,l.Next=a,u.Next=c,c.Prev=u,t.OutPt1=a,t.OutPt2=u,!0):(u=this.DupOutPt(a,!0),c=this.DupOutPt(l,!1),a.Next=l,l.Prev=a,u.Prev=c,c.Next=u,t.OutPt1=a,t.OutPt2=u,!0))},i.Clipper.prototype.GetBounds=function(t){for(var r=0,o=t.length;r<o&&0===t[r].length;)r++;if(r===o)return new i.IntRect(0,0,0,0);var a=new i.IntRect;for(a.left=t[r][0].X,a.right=a.left,a.top=t[r][0].Y,a.bottom=a.top;r<o;r++)for(var u=0,l=t[r].length;u<l;u++)t[r][u].X<a.left?a.left=t[r][u].X:t[r][u].X>a.right&&(a.right=t[r][u].X),t[r][u].Y<a.top?a.top=t[r][u].Y:t[r][u].Y>a.bottom&&(a.bottom=t[r][u].Y);return a},i.Clipper.prototype.GetBounds2=function(t){var r=t,o=new i.IntRect;for(o.left=t.Pt.X,o.right=t.Pt.X,o.top=t.Pt.Y,o.bottom=t.Pt.Y,t=t.Next;t!==r;)t.Pt.X<o.left&&(o.left=t.Pt.X),t.Pt.X>o.right&&(o.right=t.Pt.X),t.Pt.Y<o.top&&(o.top=t.Pt.Y),t.Pt.Y>o.bottom&&(o.bottom=t.Pt.Y),t=t.Next;return o},i.Clipper.PointInPolygon=function(t,r){var i=0,o=r.length;if(o<3)return 0;for(var a=r[0],u=1;u<=o;++u){var l=u===o?r[0]:r[u];if(l.Y===t.Y&&(l.X===t.X||a.Y===t.Y&&l.X>t.X==a.X<t.X))return-1;if(a.Y<t.Y!=l.Y<t.Y)if(a.X>=t.X)if(l.X>t.X)i=1-i;else{if(0===(c=(a.X-t.X)*(l.Y-t.Y)-(l.X-t.X)*(a.Y-t.Y)))return-1;c>0==l.Y>a.Y&&(i=1-i)}else if(l.X>t.X){var c;if(0===(c=(a.X-t.X)*(l.Y-t.Y)-(l.X-t.X)*(a.Y-t.Y)))return-1;c>0==l.Y>a.Y&&(i=1-i)}a=l}return i},i.Clipper.prototype.PointInPolygon=function(t,r){var i=0,o=r,a=t.X,u=t.Y,l=r.Pt.X,c=r.Pt.Y;do{var p=(r=r.Next).Pt.X,h=r.Pt.Y;if(h===u&&(p===a||c===u&&p>a==l<a))return-1;if(c<u!=h<u)if(l>=a)if(p>a)i=1-i;else{if(0===(y=(l-a)*(h-u)-(p-a)*(c-u)))return-1;y>0==h>c&&(i=1-i)}else if(p>a){var y;if(0===(y=(l-a)*(h-u)-(p-a)*(c-u)))return-1;y>0==h>c&&(i=1-i)}l=p,c=h}while(o!==r);return i},i.Clipper.prototype.Poly2ContainsPoly1=function(t,r){var i=t;do{var o=this.PointInPolygon(i.Pt,r);if(o>=0)return o>0;i=i.Next}while(i!==t);return!0},i.Clipper.prototype.FixupFirstLefts1=function(t,r){for(var o,a,u=0,l=this.m_PolyOuts.length;u<l;u++)o=this.m_PolyOuts[u],a=i.Clipper.ParseFirstLeft(o.FirstLeft),null!==o.Pts&&a===t&&this.Poly2ContainsPoly1(o.Pts,r.Pts)&&(o.FirstLeft=r)},i.Clipper.prototype.FixupFirstLefts2=function(t,r){for(var o,a,u=r.FirstLeft,l=0,c=this.m_PolyOuts.length;l<c;l++)null!==(o=this.m_PolyOuts[l]).Pts&&o!==r&&o!==t&&((a=i.Clipper.ParseFirstLeft(o.FirstLeft))!==u&&a!==t&&a!==r||(this.Poly2ContainsPoly1(o.Pts,t.Pts)?o.FirstLeft=t:this.Poly2ContainsPoly1(o.Pts,r.Pts)?o.FirstLeft=r:o.FirstLeft!==t&&o.FirstLeft!==r||(o.FirstLeft=u)))},i.Clipper.prototype.FixupFirstLefts3=function(t,r){for(var o,a,u=0,l=this.m_PolyOuts.length;u<l;u++)o=this.m_PolyOuts[u],a=i.Clipper.ParseFirstLeft(o.FirstLeft),null!==o.Pts&&a===t&&(o.FirstLeft=r)},i.Clipper.ParseFirstLeft=function(t){for(;null!==t&&null===t.Pts;)t=t.FirstLeft;return t},i.Clipper.prototype.JoinCommonEdges=function(){for(var t=0,r=this.m_Joins.length;t<r;t++){var i,o=this.m_Joins[t],a=this.GetOutRec(o.OutPt1.Idx),u=this.GetOutRec(o.OutPt2.Idx);if(null!==a.Pts&&null!==u.Pts)if(!a.IsOpen&&!u.IsOpen)i=a===u?a:this.OutRec1RightOfOutRec2(a,u)?u:this.OutRec1RightOfOutRec2(u,a)?a:this.GetLowermostRec(a,u),this.JoinPoints(o,a,u)&&(a===u?(a.Pts=o.OutPt1,a.BottomPt=null,(u=this.CreateOutRec()).Pts=o.OutPt2,this.UpdateOutPtIdxs(u),this.Poly2ContainsPoly1(u.Pts,a.Pts)?(u.IsHole=!a.IsHole,u.FirstLeft=a,this.m_UsingPolyTree&&this.FixupFirstLefts2(u,a),(u.IsHole^this.ReverseSolution)==this.Area$1(u)>0&&this.ReversePolyPtLinks(u.Pts)):this.Poly2ContainsPoly1(a.Pts,u.Pts)?(u.IsHole=a.IsHole,a.IsHole=!u.IsHole,u.FirstLeft=a.FirstLeft,a.FirstLeft=u,this.m_UsingPolyTree&&this.FixupFirstLefts2(a,u),(a.IsHole^this.ReverseSolution)==this.Area$1(a)>0&&this.ReversePolyPtLinks(a.Pts)):(u.IsHole=a.IsHole,u.FirstLeft=a.FirstLeft,this.m_UsingPolyTree&&this.FixupFirstLefts1(a,u))):(u.Pts=null,u.BottomPt=null,u.Idx=a.Idx,a.IsHole=i.IsHole,i===u&&(a.FirstLeft=u.FirstLeft),u.FirstLeft=a,this.m_UsingPolyTree&&this.FixupFirstLefts3(u,a)))}},i.Clipper.prototype.UpdateOutPtIdxs=function(t){var r=t.Pts;do{r.Idx=t.Idx,r=r.Prev}while(r!==t.Pts)},i.Clipper.prototype.DoSimplePolygons=function(){for(var t=0;t<this.m_PolyOuts.length;){var r=this.m_PolyOuts[t++],o=r.Pts;if(null!==o&&!r.IsOpen)do{for(var a=o.Next;a!==r.Pts;){if(i.IntPoint.op_Equality(o.Pt,a.Pt)&&a.Next!==o&&a.Prev!==o){var u=o.Prev,l=a.Prev;o.Prev=l,l.Next=o,a.Prev=u,u.Next=a,r.Pts=o;var c=this.CreateOutRec();c.Pts=a,this.UpdateOutPtIdxs(c),this.Poly2ContainsPoly1(c.Pts,r.Pts)?(c.IsHole=!r.IsHole,c.FirstLeft=r,this.m_UsingPolyTree&&this.FixupFirstLefts2(c,r)):this.Poly2ContainsPoly1(r.Pts,c.Pts)?(c.IsHole=r.IsHole,r.IsHole=!c.IsHole,c.FirstLeft=r.FirstLeft,r.FirstLeft=c,this.m_UsingPolyTree&&this.FixupFirstLefts2(r,c)):(c.IsHole=r.IsHole,c.FirstLeft=r.FirstLeft,this.m_UsingPolyTree&&this.FixupFirstLefts1(r,c)),a=o}a=a.Next}o=o.Next}while(o!==r.Pts)}},i.Clipper.Area=function(t){if(!Array.isArray(t))return 0;var r=t.length;if(r<3)return 0;for(var i=0,o=0,a=r-1;o<r;++o)i+=(t[a].X+t[o].X)*(t[a].Y-t[o].Y),a=o;return.5*-i},i.Clipper.prototype.Area=function(t){var r=t;if(null===t)return 0;var i=0;do{i+=(t.Prev.Pt.X+t.Pt.X)*(t.Prev.Pt.Y-t.Pt.Y),t=t.Next}while(t!==r);return.5*i},i.Clipper.prototype.Area$1=function(t){return this.Area(t.Pts)},i.Clipper.SimplifyPolygon=function(t,r){var o=new Array,a=new i.Clipper(0);return a.StrictlySimple=!0,a.AddPath(t,i.PolyType.ptSubject,!0),a.Execute(i.ClipType.ctUnion,o,r,r),o},i.Clipper.SimplifyPolygons=function(t,r){void 0===r&&(r=i.PolyFillType.pftEvenOdd);var o=new Array,a=new i.Clipper(0);return a.StrictlySimple=!0,a.AddPaths(t,i.PolyType.ptSubject,!0),a.Execute(i.ClipType.ctUnion,o,r,r),o},i.Clipper.DistanceSqrd=function(t,r){var i=t.X-r.X,o=t.Y-r.Y;return i*i+o*o},i.Clipper.DistanceFromLineSqrd=function(t,r,i){var o=r.Y-i.Y,a=i.X-r.X,u=o*r.X+a*r.Y;return(u=o*t.X+a*t.Y-u)*u/(o*o+a*a)},i.Clipper.SlopesNearCollinear=function(t,r,o,a){return Math.abs(t.X-r.X)>Math.abs(t.Y-r.Y)?t.X>r.X==t.X<o.X?i.Clipper.DistanceFromLineSqrd(t,r,o)<a:r.X>t.X==r.X<o.X?i.Clipper.DistanceFromLineSqrd(r,t,o)<a:i.Clipper.DistanceFromLineSqrd(o,t,r)<a:t.Y>r.Y==t.Y<o.Y?i.Clipper.DistanceFromLineSqrd(t,r,o)<a:r.Y>t.Y==r.Y<o.Y?i.Clipper.DistanceFromLineSqrd(r,t,o)<a:i.Clipper.DistanceFromLineSqrd(o,t,r)<a},i.Clipper.PointsAreClose=function(t,r,i){var o=t.X-r.X,a=t.Y-r.Y;return o*o+a*a<=i},i.Clipper.ExcludeOp=function(t){var r=t.Prev;return r.Next=t.Next,t.Next.Prev=r,r.Idx=0,r},i.Clipper.CleanPolygon=function(t,r){void 0===r&&(r=1.415);var o=t.length;if(0===o)return new Array;for(var a=new Array(o),u=0;u<o;++u)a[u]=new i.OutPt;for(u=0;u<o;++u)a[u].Pt=t[u],a[u].Next=a[(u+1)%o],a[u].Next.Prev=a[u],a[u].Idx=0;for(var l=r*r,c=a[0];0===c.Idx&&c.Next!==c.Prev;)i.Clipper.PointsAreClose(c.Pt,c.Prev.Pt,l)?(c=i.Clipper.ExcludeOp(c),o--):i.Clipper.PointsAreClose(c.Prev.Pt,c.Next.Pt,l)?(i.Clipper.ExcludeOp(c.Next),c=i.Clipper.ExcludeOp(c),o-=2):i.Clipper.SlopesNearCollinear(c.Prev.Pt,c.Pt,c.Next.Pt,l)?(c=i.Clipper.ExcludeOp(c),o--):(c.Idx=1,c=c.Next);o<3&&(o=0);var p=new Array(o);for(u=0;u<o;++u)p[u]=new i.IntPoint1(c.Pt),c=c.Next;return a=null,p},i.Clipper.CleanPolygons=function(t,r){for(var o=new Array(t.length),a=0,u=t.length;a<u;a++)o[a]=i.Clipper.CleanPolygon(t[a],r);return o},i.Clipper.Minkowski=function(t,r,o,a){var u=a?1:0,l=t.length,c=r.length,p=new Array;if(o)for(var h=0;h<c;h++){for(var y=new Array(l),d=0,v=t.length,m=t[d];d<v;m=t[++d])y[d]=new i.IntPoint2(r[h].X+m.X,r[h].Y+m.Y);p.push(y)}else for(h=0;h<c;h++){for(y=new Array(l),d=0,v=t.length,m=t[d];d<v;m=t[++d])y[d]=new i.IntPoint2(r[h].X-m.X,r[h].Y-m.Y);p.push(y)}var b=new Array;for(h=0;h<c-1+u;h++)for(d=0;d<l;d++){var P=new Array;P.push(p[h%c][d%l]),P.push(p[(h+1)%c][d%l]),P.push(p[(h+1)%c][(d+1)%l]),P.push(p[h%c][(d+1)%l]),i.Clipper.Orientation(P)||P.reverse(),b.push(P)}return b},i.Clipper.MinkowskiSum=function(t,r,o){if(r[0]instanceof Array){h=r;for(var a=new i.Paths,u=(c=new i.Clipper,0);u<h.length;++u){var l=i.Clipper.Minkowski(t,h[u],!0,o);if(c.AddPaths(l,i.PolyType.ptSubject,!0),o){p=i.Clipper.TranslatePath(h[u],t[0]);c.AddPath(p,i.PolyType.ptClip,!0)}}return c.Execute(i.ClipType.ctUnion,a,i.PolyFillType.pftNonZero,i.PolyFillType.pftNonZero),a}var c,p=r,h=i.Clipper.Minkowski(t,p,!0,o);return(c=new i.Clipper).AddPaths(h,i.PolyType.ptSubject,!0),c.Execute(i.ClipType.ctUnion,h,i.PolyFillType.pftNonZero,i.PolyFillType.pftNonZero),h},i.Clipper.TranslatePath=function(t,r){for(var o=new i.Path,a=0;a<t.length;a++)o.push(new i.IntPoint2(t[a].X+r.X,t[a].Y+r.Y));return o},i.Clipper.MinkowskiDiff=function(t,r){var o=i.Clipper.Minkowski(t,r,!1,!0),a=new i.Clipper;return a.AddPaths(o,i.PolyType.ptSubject,!0),a.Execute(i.ClipType.ctUnion,o,i.PolyFillType.pftNonZero,i.PolyFillType.pftNonZero),o},i.Clipper.PolyTreeToPaths=function(t){var r=new Array;return i.Clipper.AddPolyNodeToPaths(t,i.Clipper.NodeType.ntAny,r),r},i.Clipper.AddPolyNodeToPaths=function(t,r,o){var a=!0;switch(r){case i.Clipper.NodeType.ntOpen:return;case i.Clipper.NodeType.ntClosed:a=!t.IsOpen}t.m_polygon.length>0&&a&&o.push(t.m_polygon);for(var u=0,l=t.Childs(),c=l.length,p=l[u];u<c;p=l[++u])i.Clipper.AddPolyNodeToPaths(p,r,o)},i.Clipper.OpenPathsFromPolyTree=function(t){for(var r=new i.Paths,o=0,a=t.ChildCount();o<a;o++)t.Childs()[o].IsOpen&&r.push(t.Childs()[o].m_polygon);return r},i.Clipper.ClosedPathsFromPolyTree=function(t){var r=new i.Paths;return i.Clipper.AddPolyNodeToPaths(t,i.Clipper.NodeType.ntClosed,r),r},b(i.Clipper,i.ClipperBase),i.Clipper.NodeType={ntAny:0,ntOpen:1,ntClosed:2},i.ClipperOffset=function(t,r){void 0===t&&(t=2),void 0===r&&(r=i.ClipperOffset.def_arc_tolerance),this.m_destPolys=new i.Paths,this.m_srcPoly=new i.Path,this.m_destPoly=new i.Path,this.m_normals=new Array,this.m_delta=0,this.m_sinA=0,this.m_sin=0,this.m_cos=0,this.m_miterLim=0,this.m_StepsPerRad=0,this.m_lowest=new i.IntPoint0,this.m_polyNodes=new i.PolyNode,this.MiterLimit=t,this.ArcTolerance=r,this.m_lowest.X=-1},i.ClipperOffset.two_pi=6.28318530717959,i.ClipperOffset.def_arc_tolerance=.25,i.ClipperOffset.prototype.Clear=function(){i.Clear(this.m_polyNodes.Childs()),this.m_lowest.X=-1},i.ClipperOffset.Round=i.Clipper.Round,i.ClipperOffset.prototype.AddPath=function(t,r,o){var a=t.length-1;if(!(a<0)){var u=new i.PolyNode;if(u.m_jointype=r,u.m_endtype=o,o===i.EndType.etClosedLine||o===i.EndType.etClosedPolygon)for(;a>0&&i.IntPoint.op_Equality(t[0],t[a]);)a--;u.m_polygon.push(t[0]);for(var l=0,c=0,p=1;p<=a;p++)i.IntPoint.op_Inequality(u.m_polygon[l],t[p])&&(l++,u.m_polygon.push(t[p]),(t[p].Y>u.m_polygon[c].Y||t[p].Y===u.m_polygon[c].Y&&t[p].X<u.m_polygon[c].X)&&(c=l));if(!(o===i.EndType.etClosedPolygon&&l<2)&&(this.m_polyNodes.AddChild(u),o===i.EndType.etClosedPolygon))if(this.m_lowest.X<0)this.m_lowest=new i.IntPoint2(this.m_polyNodes.ChildCount()-1,c);else{var h=this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];(u.m_polygon[c].Y>h.Y||u.m_polygon[c].Y===h.Y&&u.m_polygon[c].X<h.X)&&(this.m_lowest=new i.IntPoint2(this.m_polyNodes.ChildCount()-1,c))}}},i.ClipperOffset.prototype.AddPaths=function(t,r,i){for(var o=0,a=t.length;o<a;o++)this.AddPath(t[o],r,i)},i.ClipperOffset.prototype.FixOrientations=function(){if(this.m_lowest.X>=0&&!i.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))for(var t=0;t<this.m_polyNodes.ChildCount();t++){((r=this.m_polyNodes.Childs()[t]).m_endtype===i.EndType.etClosedPolygon||r.m_endtype===i.EndType.etClosedLine&&i.Clipper.Orientation(r.m_polygon))&&r.m_polygon.reverse()}else for(t=0;t<this.m_polyNodes.ChildCount();t++){var r;(r=this.m_polyNodes.Childs()[t]).m_endtype!==i.EndType.etClosedLine||i.Clipper.Orientation(r.m_polygon)||r.m_polygon.reverse()}},i.ClipperOffset.GetUnitNormal=function(t,r){var o=r.X-t.X,a=r.Y-t.Y;if(0===o&&0===a)return new i.DoublePoint2(0,0);var u=1/Math.sqrt(o*o+a*a);return o*=u,a*=u,new i.DoublePoint2(a,-o)},i.ClipperOffset.prototype.DoOffset=function(t){if(this.m_destPolys=new Array,this.m_delta=t,i.ClipperBase.near_zero(t))for(var r=0;r<this.m_polyNodes.ChildCount();r++){(u=this.m_polyNodes.Childs()[r]).m_endtype===i.EndType.etClosedPolygon&&this.m_destPolys.push(u.m_polygon)}else{var o;this.MiterLimit>2?this.m_miterLim=2/(this.MiterLimit*this.MiterLimit):this.m_miterLim=.5,o=this.ArcTolerance<=0?i.ClipperOffset.def_arc_tolerance:this.ArcTolerance>Math.abs(t)*i.ClipperOffset.def_arc_tolerance?Math.abs(t)*i.ClipperOffset.def_arc_tolerance:this.ArcTolerance;var a=3.14159265358979/Math.acos(1-o/Math.abs(t));this.m_sin=Math.sin(i.ClipperOffset.two_pi/a),this.m_cos=Math.cos(i.ClipperOffset.two_pi/a),this.m_StepsPerRad=a/i.ClipperOffset.two_pi,t<0&&(this.m_sin=-this.m_sin);for(r=0;r<this.m_polyNodes.ChildCount();r++){var u=this.m_polyNodes.Childs()[r];this.m_srcPoly=u.m_polygon;var l=this.m_srcPoly.length;if(!(0===l||t<=0&&(l<3||u.m_endtype!==i.EndType.etClosedPolygon)))if(this.m_destPoly=new Array,1!==l){this.m_normals.length=0;for(v=0;v<l-1;v++)this.m_normals.push(i.ClipperOffset.GetUnitNormal(this.m_srcPoly[v],this.m_srcPoly[v+1]));if(u.m_endtype===i.EndType.etClosedLine||u.m_endtype===i.EndType.etClosedPolygon?this.m_normals.push(i.ClipperOffset.GetUnitNormal(this.m_srcPoly[l-1],this.m_srcPoly[0])):this.m_normals.push(new i.DoublePoint1(this.m_normals[l-2])),u.m_endtype===i.EndType.etClosedPolygon){var c=l-1;for(v=0;v<l;v++)c=this.OffsetPoint(v,c,u.m_jointype);this.m_destPolys.push(this.m_destPoly)}else if(u.m_endtype===i.EndType.etClosedLine){for(c=l-1,v=0;v<l;v++)c=this.OffsetPoint(v,c,u.m_jointype);this.m_destPolys.push(this.m_destPoly),this.m_destPoly=new Array;var p=this.m_normals[l-1];for(v=l-1;v>0;v--)this.m_normals[v]=new i.DoublePoint2(-this.m_normals[v-1].X,-this.m_normals[v-1].Y);this.m_normals[0]=new i.DoublePoint2(-p.X,-p.Y),c=0;for(v=l-1;v>=0;v--)c=this.OffsetPoint(v,c,u.m_jointype);this.m_destPolys.push(this.m_destPoly)}else{var h;for(c=0,v=1;v<l-1;++v)c=this.OffsetPoint(v,c,u.m_jointype);if(u.m_endtype===i.EndType.etOpenButt){v=l-1;h=new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[v].X+this.m_normals[v].X*t),i.ClipperOffset.Round(this.m_srcPoly[v].Y+this.m_normals[v].Y*t)),this.m_destPoly.push(h),h=new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[v].X-this.m_normals[v].X*t),i.ClipperOffset.Round(this.m_srcPoly[v].Y-this.m_normals[v].Y*t)),this.m_destPoly.push(h)}else{v=l-1;c=l-2,this.m_sinA=0,this.m_normals[v]=new i.DoublePoint2(-this.m_normals[v].X,-this.m_normals[v].Y),u.m_endtype===i.EndType.etOpenSquare?this.DoSquare(v,c):this.DoRound(v,c)}for(v=l-1;v>0;v--)this.m_normals[v]=new i.DoublePoint2(-this.m_normals[v-1].X,-this.m_normals[v-1].Y);this.m_normals[0]=new i.DoublePoint2(-this.m_normals[1].X,-this.m_normals[1].Y);for(v=(c=l-1)-1;v>0;--v)c=this.OffsetPoint(v,c,u.m_jointype);u.m_endtype===i.EndType.etOpenButt?(h=new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[0].X-this.m_normals[0].X*t),i.ClipperOffset.Round(this.m_srcPoly[0].Y-this.m_normals[0].Y*t)),this.m_destPoly.push(h),h=new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[0].X+this.m_normals[0].X*t),i.ClipperOffset.Round(this.m_srcPoly[0].Y+this.m_normals[0].Y*t)),this.m_destPoly.push(h)):(c=1,this.m_sinA=0,u.m_endtype===i.EndType.etOpenSquare?this.DoSquare(0,1):this.DoRound(0,1)),this.m_destPolys.push(this.m_destPoly)}}else{if(u.m_jointype===i.JoinType.jtRound)for(var y=1,d=0,v=1;v<=a;v++){this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[0].X+y*t),i.ClipperOffset.Round(this.m_srcPoly[0].Y+d*t)));var m=y;y=y*this.m_cos-this.m_sin*d,d=m*this.m_sin+d*this.m_cos}else{y=-1,d=-1;for(var v=0;v<4;++v)this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[0].X+y*t),i.ClipperOffset.Round(this.m_srcPoly[0].Y+d*t))),y<0?y=1:d<0?d=1:y=-1}this.m_destPolys.push(this.m_destPoly)}}}},i.ClipperOffset.prototype.Execute=function(){var t=arguments;if(t[0]instanceof i.PolyTree){l=t[1];if((u=t[0]).Clear(),this.FixOrientations(),this.DoOffset(l),(a=new i.Clipper(0)).AddPaths(this.m_destPolys,i.PolyType.ptSubject,!0),l>0)a.Execute(i.ClipType.ctUnion,u,i.PolyFillType.pftPositive,i.PolyFillType.pftPositive);else{p=i.Clipper.GetBounds(this.m_destPolys);if((c=new i.Path).push(new i.IntPoint2(p.left-10,p.bottom+10)),c.push(new i.IntPoint2(p.right+10,p.bottom+10)),c.push(new i.IntPoint2(p.right+10,p.top-10)),c.push(new i.IntPoint2(p.left-10,p.top-10)),a.AddPath(c,i.PolyType.ptSubject,!0),a.ReverseSolution=!0,a.Execute(i.ClipType.ctUnion,u,i.PolyFillType.pftNegative,i.PolyFillType.pftNegative),1===u.ChildCount()&&u.Childs()[0].ChildCount()>0){var r=u.Childs()[0];u.Childs()[0]=r.Childs()[0],u.Childs()[0].m_Parent=u;for(var o=1;o<r.ChildCount();o++)u.AddChild(r.Childs()[o])}else u.Clear()}}else{var a,u=t[0],l=t[1];if(i.Clear(u),this.FixOrientations(),this.DoOffset(l),(a=new i.Clipper(0)).AddPaths(this.m_destPolys,i.PolyType.ptSubject,!0),l>0)a.Execute(i.ClipType.ctUnion,u,i.PolyFillType.pftPositive,i.PolyFillType.pftPositive);else{var c,p=i.Clipper.GetBounds(this.m_destPolys);(c=new i.Path).push(new i.IntPoint2(p.left-10,p.bottom+10)),c.push(new i.IntPoint2(p.right+10,p.bottom+10)),c.push(new i.IntPoint2(p.right+10,p.top-10)),c.push(new i.IntPoint2(p.left-10,p.top-10)),a.AddPath(c,i.PolyType.ptSubject,!0),a.ReverseSolution=!0,a.Execute(i.ClipType.ctUnion,u,i.PolyFillType.pftNegative,i.PolyFillType.pftNegative),u.length>0&&u.splice(0,1)}}},i.ClipperOffset.prototype.OffsetPoint=function(t,r,o){if(this.m_sinA=this.m_normals[r].X*this.m_normals[t].Y-this.m_normals[t].X*this.m_normals[r].Y,Math.abs(this.m_sinA*this.m_delta)<1){if(this.m_normals[r].X*this.m_normals[t].X+this.m_normals[t].Y*this.m_normals[r].Y>0)return this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[r].X*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[r].Y*this.m_delta))),r}else this.m_sinA>1?this.m_sinA=1:this.m_sinA<-1&&(this.m_sinA=-1);if(this.m_sinA*this.m_delta<0)this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[r].X*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[r].Y*this.m_delta))),this.m_destPoly.push(new i.IntPoint1(this.m_srcPoly[t])),this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[t].X*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[t].Y*this.m_delta)));else switch(o){case i.JoinType.jtMiter:var a=this.m_normals[t].X*this.m_normals[r].X+this.m_normals[t].Y*this.m_normals[r].Y+1;a>=this.m_miterLim?this.DoMiter(t,r,a):this.DoSquare(t,r);break;case i.JoinType.jtSquare:this.DoSquare(t,r);break;case i.JoinType.jtRound:this.DoRound(t,r)}return r=t},i.ClipperOffset.prototype.DoSquare=function(t,r){var o=Math.tan(Math.atan2(this.m_sinA,this.m_normals[r].X*this.m_normals[t].X+this.m_normals[r].Y*this.m_normals[t].Y)/4);this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_delta*(this.m_normals[r].X-this.m_normals[r].Y*o)),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_delta*(this.m_normals[r].Y+this.m_normals[r].X*o)))),this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_delta*(this.m_normals[t].X+this.m_normals[t].Y*o)),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_delta*(this.m_normals[t].Y-this.m_normals[t].X*o))))},i.ClipperOffset.prototype.DoMiter=function(t,r,o){var a=this.m_delta/o;this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+(this.m_normals[r].X+this.m_normals[t].X)*a),i.ClipperOffset.Round(this.m_srcPoly[t].Y+(this.m_normals[r].Y+this.m_normals[t].Y)*a)))},i.ClipperOffset.prototype.DoRound=function(t,r){for(var o,a=Math.atan2(this.m_sinA,this.m_normals[r].X*this.m_normals[t].X+this.m_normals[r].Y*this.m_normals[t].Y),u=Math.max(i.Cast_Int32(i.ClipperOffset.Round(this.m_StepsPerRad*Math.abs(a))),1),l=this.m_normals[r].X,c=this.m_normals[r].Y,p=0;p<u;++p)this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+l*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+c*this.m_delta))),o=l,l=l*this.m_cos-this.m_sin*c,c=o*this.m_sin+c*this.m_cos;this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[t].X*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[t].Y*this.m_delta)))},i.Error=function(t){try{throw new Error(t)}catch(t){alert(t.message)}},i.JS={},i.JS.AreaOfPolygon=function(t,r){return r||(r=1),i.Clipper.Area(t)/(r*r)},i.JS.AreaOfPolygons=function(t,r){r||(r=1);for(var o=0,a=0;a<t.length;a++)o+=i.Clipper.Area(t[a]);return o/(r*r)},i.JS.BoundsOfPath=function(t,r){return i.JS.BoundsOfPaths([t],r)},i.JS.BoundsOfPaths=function(t,r){r||(r=1);var o=i.Clipper.GetBounds(t);return o.left/=r,o.bottom/=r,o.right/=r,o.top/=r,o},i.JS.Clean=function(t,r){if(!(t instanceof Array))return[];var o=t[0]instanceof Array;t=i.JS.Clone(t);if("number"!=typeof r||null===r)return i.Error("Delta is not a number in Clean()."),t;if(0===t.length||1===t.length&&0===t[0].length||r<0)return t;o||(t=[t]);for(var a,u,l,c,p,h,y,d=t.length,v=[],m=0;m<d;m++)if(0!==(a=(u=t[m]).length))if(a<3)l=u,v.push(l);else{for(l=u,c=r*r,p=u[0],h=1,y=1;y<a;y++)(u[y].X-p.X)*(u[y].X-p.X)+(u[y].Y-p.Y)*(u[y].Y-p.Y)<=c||(l[h]=u[y],p=u[y],h++);p=u[h-1],(u[0].X-p.X)*(u[0].X-p.X)+(u[0].Y-p.Y)*(u[0].Y-p.Y)<=c&&h--,h<a&&l.splice(h,a-h),l.length&&v.push(l)}return!o&&v.length?v=v[0]:o||0!==v.length?o&&0===v.length&&(v=[[]]):v=[],v},i.JS.Clone=function(t){if(!(t instanceof Array))return[];if(0===t.length)return[];if(1===t.length&&0===t[0].length)return[[]];var r=t[0]instanceof Array;r||(t=[t]);var i,o,a,u,l=t.length,c=new Array(l);for(o=0;o<l;o++){for(i=t[o].length,u=new Array(i),a=0;a<i;a++)u[a]={X:t[o][a].X,Y:t[o][a].Y};c[o]=u}return r||(c=c[0]),c},i.JS.Lighten=function(t,r){if(!(t instanceof Array))return[];if("number"!=typeof r||null===r)return i.Error("Tolerance is not a number in Lighten()."),i.JS.Clone(t);if(0===t.length||1===t.length&&0===t[0].length||r<0)return i.JS.Clone(t);var o,a,u,l,c,p,h,y,d,v,m,b,P,_,g,x,w=t[0]instanceof Array;w||(t=[t]);var I=t.length,C=r*r,O=[];for(o=0;o<I;o++)if(0!==(p=(u=t[o]).length)){for(l=0;l<1e6;l++){for(c=[],u[(p=u.length)-1].X!==u[0].X||u[p-1].Y!==u[0].Y?(m=1,u.push({X:u[0].X,Y:u[0].Y}),p=u.length):m=0,v=[],a=0;a<p-2;a++)h=u[a],d=u[a+1],y=u[a+2],g=h.X,x=h.Y,b=y.X-g,P=y.Y-x,0===b&&0===P||((_=((d.X-g)*b+(d.Y-x)*P)/(b*b+P*P))>1?(g=y.X,x=y.Y):_>0&&(g+=b*_,x+=P*_)),(b=d.X-g)*b+(P=d.Y-x)*P<=C&&(v[a+1]=1,a++);for(c.push({X:u[0].X,Y:u[0].Y}),a=1;a<p-1;a++)v[a]||c.push({X:u[a].X,Y:u[a].Y});if(c.push({X:u[p-1].X,Y:u[p-1].Y}),m&&u.pop(),!v.length)break;u=c}c[(p=c.length)-1].X===c[0].X&&c[p-1].Y===c[0].Y&&c.pop(),c.length>2&&O.push(c)}return w||(O=O[0]),void 0===O&&(O=[]),O},i.JS.PerimeterOfPath=function(t,r,i){if(void 0===t)return 0;var o,a,u=Math.sqrt,l=0,c=0,p=0,h=0,y=0,d=t.length;if(d<2)return 0;for(r&&(t[d]=t[0],d++);--d;)c=(o=t[d]).X,p=o.Y,l+=u((c-(h=(a=t[d-1]).X))*(c-h)+(p-(y=a.Y))*(p-y));return r&&t.pop(),l/i},i.JS.PerimeterOfPaths=function(t,r,o){o||(o=1);for(var a=0,u=0;u<t.length;u++)a+=i.JS.PerimeterOfPath(t[u],r,o);return a},i.JS.ScaleDownPath=function(t,r){var i,o;for(r||(r=1),i=t.length;i--;)(o=t[i]).X=o.X/r,o.Y=o.Y/r},i.JS.ScaleDownPaths=function(t,r){var i,o,a;for(r||(r=1),i=t.length;i--;)for(o=t[i].length;o--;)(a=t[i][o]).X=a.X/r,a.Y=a.Y/r},i.JS.ScaleUpPath=function(t,r){var i,o,a=Math.round;for(r||(r=1),i=t.length;i--;)(o=t[i]).X=a(o.X*r),o.Y=a(o.Y*r)},i.JS.ScaleUpPaths=function(t,r){var i,o,a,u=Math.round;for(r||(r=1),i=t.length;i--;)for(o=t[i].length;o--;)(a=t[i][o]).X=u(a.X*r),a.Y=u(a.Y*r)},i.ExPolygons=function(){return[]},i.ExPolygon=function(){this.outer=null,this.holes=null},i.JS.AddOuterPolyNodeToExPolygons=function(t,r){var o=new i.ExPolygon;o.outer=t.Contour();var a,u,l,c,p,h,y=t.Childs(),d=y.length;for(o.holes=new Array(d),l=0;l<d;l++)for(a=y[l],o.holes[l]=a.Contour(),c=0,h=(p=a.Childs()).length;c<h;c++)u=p[c],i.JS.AddOuterPolyNodeToExPolygons(u,r);r.push(o)},i.JS.ExPolygonsToPaths=function(t){var r,o,a,u,l=new i.Paths;for(r=0,a=t.length;r<a;r++)for(l.push(t[r].outer),o=0,u=t[r].holes.length;o<u;o++)l.push(t[r].holes[o]);return l},i.JS.PolyTreeToExPolygons=function(t){var r,o,a,u,l=new i.ExPolygons;for(o=0,u=(a=t.Childs()).length;o<u;o++)r=a[o],i.JS.AddOuterPolyNodeToExPolygons(r,l);return l}}()},899:(t,r,i)=>{"use strict";i.d(r,{Z:()=>l});var o=i(204),a=i(561),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var l=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(InitialSketch,t);var r=_createSuper(InitialSketch);function InitialSketch(){return function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,InitialSketch),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(InitialSketch,[{key:"init",value:function init(){this.pos={x:this.canvasWidth/2,y:this.canvasHeight/2},this.vs.xDrift=new u.Z({name:"x Drift",min:0,max:20,initialValue:5}),this.vs.yDrift=new u.Z({name:"y Drift",min:0,max:20,initialValue:5}),this.vs.circleMinRadius=new u.Z({name:"Min rad",min:0,max:25,initialValue:3}),this.vs.circleMaxRadius=new u.Z({name:"Max rad",min:0,max:50,initialValue:12}),this.vs.circleDrift=new u.Z({name:"Circle Drift",min:0,max:100,initialValue:30}),this.vs.circleSpawnRate=new u.Z({name:"Spawn rate",min:1,max:300,step:1,initialValue:150}),this.vs.circleSpawnChance=new u.Z({name:"Spawn chance",min:0,max:1,initialValue:.5})}},{key:"initDraw",value:function initDraw(){this.vs.circleMaxRadius.value<this.vs.circleMinRadius.value&&this.vs.circleMaxRadius.setValue(this.vs.circleMinRadius.value,!0)}},{key:"draw",value:function draw(t){if(this.pos.x=(0,a.re)(this.pos.x,this.canvasWidth),this.pos.y=(0,a.re)(this.pos.y,this.canvasHeight),t%100==0&&(this.ctx.strokeStyle="#".concat((65793*(0,a.c4)(128)).toString(16))),this.ctx.beginPath(),this.ctx.moveTo(this.pos.x,this.pos.y),this.pos.x+=(0,a.Qy)(this.vs.xDrift.value),this.pos.y+=(0,a.Qy)(this.vs.yDrift.value),this.ctx.lineTo(this.pos.x,this.pos.y),this.ctx.stroke(),this.ctx.closePath(),t%this.vs.circleSpawnRate.value==0&&Math.random()<this.vs.circleSpawnChance.value){var r=this.ctx.fillStyle,i=this.ctx.strokeStyle;this.ctx.strokeStyle="#000",this.ctx.fillStyle="#".concat(Math.floor(8388607.5+(0,a.c4)(8388607.5)).toString(16)),this.ctx.beginPath(),this.ctx.circle(this.pos.x+(0,a.rO)(this.vs.circleDrift.value),this.pos.y+(0,a.rO)(this.vs.circleDrift.value),(0,a.c4)(this.vs.circleMaxRadius.value,this.vs.circleMinRadius.value)),this.ctx.fill(),this.ctx.stroke(),this.ctx.closePath(),this.ctx.strokeStyle=i,this.ctx.fillStyle=r}}}]),InitialSketch}(o.v);_defineProperty(l,"generateGCode",!1),_defineProperty(l,"enableCutouts",!1)},715:(t,r,i)=>{"use strict";function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(a=o.key,u=void 0,u=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===_typeof(u)?u:String(u)),o)}var a,u}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}i.d(r,{Z:()=>o});var o=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(GCodeTest,t);var r=_createSuper(GCodeTest);function GCodeTest(){return function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,GCodeTest),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(GCodeTest,[{key:"init",value:function init(){this.ctx.driver.comment("Drawing single line"),this.ctx.beginPath(),this.ctx.moveTo(10,10),this.ctx.lineTo(20,10),this.ctx.stroke(),this.ctx.closePath(),this.ctx.driver.comment("Drawing joined line"),this.ctx.beginPath(),this.ctx.moveTo(20,40),this.ctx.lineTo(25,40),this.ctx.lineTo(30,45),this.ctx.stroke(),this.ctx.closePath(),this.ctx.driver.comment("Drawing rect outline"),this.ctx.strokeRect(20,20,5,5),this.ctx.driver.comment("Drawing rect fill"),this.ctx.fillRect(30,20,5,5),this.ctx.driver.comment("Drawing circle"),this.ctx.beginPath(),"circle"in this.ctx&&this.ctx.circle(40,40,5),this.ctx.stroke(),this.ctx.closePath()}}]),GCodeTest}(i(204).v)},798:(t,r,i)=>{"use strict";i.d(r,{Z:()=>h});var o=i(563),a=i(323),u=i(204),l=i(132),c=i(286),p=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}(this,i)}}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var h=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Arcs,t);var r=_createSuper(Arcs);function Arcs(){var t;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Arcs);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"count",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Arcs,[{key:"init",value:function init(){var t=this;this.vs.precision=new p.Z({initialValue:180,min:2,max:1440,step:1}),this.vs.speedPow1=new p.Z({initialValue:.5,min:.001,max:10,step:.001}),this.vs.radiusMin=new p.Z({initialValue:.1,min:1,max:20,step:.1}),this.vs.radiusMax=new p.Z({initialValue:.5,min:1,max:20,step:.1}),this.vs.radiusThetaMulti=new p.Z({initialValue:1,min:.001,max:5,step:.001}),this.osc=new c.Z({speed:function speed(r){var i=Math.sqrt(r)/-Math.pow(Math.sqrt(r),t.vs.speedPow1.value);return isNaN(i)?0:i},radius:function radius(r){return new a.Z(t.vs.radiusMin.value+Math.cos(r*t.vs.radiusThetaMulti.value)*t.vs.radiusMax.value,t.vs.radiusMin.value+Math.sin(r*t.vs.radiusThetaMulti.value)*t.vs.radiusMax.value)}})}},{key:"initDraw",value:function initDraw(){this.vs.radiusMin.value>this.vs.radiusMax.value&&this.vs.radiusMax.setValue(this.vs.radiusMin.value,!0),console.log({precision:this.vs.precision.value,speedPow1:this.vs.speedPow1.value,radiusMin:this.vs.radiusMin.value,radiusMax:this.vs.radiusMax.value,radiusThetaMulti:this.vs.radiusThetaMulti.value}),this.count=0,this.lastPoint=void 0,this.osc.reset();var t=Math.min(this.cw,this.ch)/2-(this.vs.radiusMax.value+10),r=(0,l.CS)(this.cx,this.cy,0,2*Math.PI,t).start,i=new o.Z;i.moveTo(r.x,r.y),i.arc(this.cx,this.cy,t,0,2*Math.PI,!1),this.circlePoints=i.getPoints(this.vs.precision.value)}},{key:"draw",value:function draw(t){if(!(this.count>=this.circlePoints.length)){this.osc.step(this.count+1);var r=this.circlePoints[this.count],i=new a.Z(r.x+this.osc.x,r.y+this.osc.y);this.lastPoint&&r&&(this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.lineTo(i.x,i.y),this.ctx.stroke(),this.ctx.closePath()),this.lastPoint=i.clone(),this.count++}}}]),Arcs}(u.v)},613:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),u=i(561),l=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(BezierScribbles,t);var r=_createSuper(BezierScribbles);function BezierScribbles(){return function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,BezierScribbles),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(BezierScribbles,[{key:"init",value:function init(){this.vs.stopAfter=new l.Z({initialValue:5,min:1,max:200,step:1}),this.vs.driftMin=new l.Z({initialValue:20,min:0,max:100,step:1}),this.vs.driftMax=new l.Z({initialValue:50,min:0,max:100,step:1}),this.vs.midpointDrift=new l.Z({initialValue:30,min:0,max:100,step:1})}},{key:"initDraw",value:function initDraw(){var t=Math.random()*Math.PI*2;this.lastPoint=new o.Z(this.cx+100*Math.cos(t),this.cy+100*+Math.sin(t)),this.lastAnchorPoint=this.lastPoint.clone()}},{key:"draw",value:function draw(t){if(!(t>this.vs.stopAfter.value)){var r=new o.Z(this.lastPoint.x+Math.cos(Math.random()*Math.PI*2)*(this.vs.driftMin.value+Math.random()*(this.vs.driftMax.value-this.vs.driftMin.value)),this.lastPoint.y+Math.sin(Math.random()*Math.PI*2)*(this.vs.driftMin.value+Math.random()*(this.vs.driftMax.value-this.vs.driftMin.value)));r.x+=(this.cx-r.x)/15,r.y+=(this.cy-r.y)/15;var i=this.lastAnchorPoint.angleTo(this.lastPoint),a=this.lastAnchorPoint.distanceTo(this.lastPoint),l=this.lastAnchorPoint.add(new o.Z(Math.cos(i)*(2*a),Math.sin(i)*(2*a))).add(new o.Z((0,u.rO)(this.vs.midpointDrift.value),(0,u.rO)(this.vs.midpointDrift.value)));l.x+=(this.cx-l.x)/15,l.y+=(this.cy-l.y)/15,this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.bezierCurveTo(l.x,l.y,l.x,l.y,r.x,r.y),this.ctx.stroke(),this.ctx.closePath(),this.lastPoint=r.clone(),this.lastAnchorPoint=l.clone()}}}]),BezierScribbles}(a.v);_defineProperty(c,"generateGCode",!1),_defineProperty(c,"enableCutouts",!1)},918:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),u=i(286),l=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Spiraling,t);var r=_createSuper(Spiraling);function Spiraling(){return function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Spiraling),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Spiraling,[{key:"init",value:function init(){var t=this,r=15;this.vs.speedUp=new l.Z({initialValue:10,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new l.Z({initialValue:5e4,min:1,max:12e4,step:1,disableRandomize:!0}),this.vs.osc1speed=new l.Z({initialValue:.1,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.osc1dist=new l.Z({initialValue:Math.PI/4/r,min:Math.PI/8/r,max:16*Math.PI/r,step:Math.PI/32/r}),this.vs.osc1phase=new l.Z({initialValue:0,min:0,max:2*Math.PI,step:Math.PI/16}),this.vs.osc2speed=new l.Z({initialValue:.1,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.osc2dist=new l.Z({initialValue:Math.PI/4/r,min:Math.PI/8/r,max:16*Math.PI/r,step:Math.PI/32/r}),this.vs.osc2phase=new l.Z({initialValue:0,min:0,max:2*Math.PI,step:Math.PI/16}),this.vs.osc3speed=new l.Z({initialValue:.1,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.osc3dist=new l.Z({initialValue:Math.PI/4/r,min:Math.PI/8/r,max:16*Math.PI/r,step:Math.PI/32/r}),this.vs.osc3phase=new l.Z({initialValue:0,min:0,max:2*Math.PI,step:Math.PI/16}),this.osc1=new u.Z({speed:function speed(r){return t.vs.osc1speed.value},radius:function radius(r){return t.vs.osc1dist.value},phase:0}),this.osc2=new u.Z({speed:function speed(r){return t.vs.osc2speed.value},radius:function radius(r){return t.vs.osc2dist.value},phase:0}),this.osc3=new u.Z({speed:function speed(r){return t.vs.osc3speed.value},radius:function radius(r){return t.vs.osc3dist.value},phase:0})}},{key:"initDraw",value:function initDraw(){this.lastPoint=new o.Z(this.cx,this.cy),this.vs.stopAfter.step=this.vs.speedUp.value,this.osc1.phase=this.vs.osc1phase.value,this.osc2.phase=this.vs.osc2phase.value,this.osc3.phase=this.vs.osc3phase.value,this.osc1.reset(),this.osc2.reset(),this.osc3.reset()}},{key:"draw",value:function draw(t){var r=this.vs.speedUp.value;if(!(t*r>this.vs.stopAfter.value))for(var i=0;i<r;i++){this.osc1.step(t),this.osc2.step(t),this.osc3.step(t);var o=this.lastPoint.clone().add(this.osc1.value.add(this.osc2.value).add(this.osc3.value));this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.lineTo(o.x,o.y),this.ctx.stroke(),this.ctx.closePath(),this.lastPoint=o}}}]),Spiraling}(a.v);!function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}(c,"enableCutouts",!1)},511:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),u=i(286),l=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(SpiralingProportional,t);var r=_createSuper(SpiralingProportional);function SpiralingProportional(){return function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,SpiralingProportional),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(SpiralingProportional,[{key:"init",value:function init(){var t=this;this.vs.speedUp=new l.Z({initialValue:15,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new l.Z({initialValue:1e3,min:1,max:2e4,step:1,disableRandomize:!0}),this.vs.oscSpeed=new l.Z({initialValue:.1825,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.oscSpeedMulti=new l.Z({initialValue:2.994,min:.5,max:5,step:1e-5}),this.vs.oscDist=new l.Z({initialValue:50,min:1,max:20,step:.25}),this.vs.osc1phase=new l.Z({initialValue:5.9,min:0,max:2*Math.PI,step:Math.PI/32}),this.vs.osc2phase=new l.Z({initialValue:1.8,min:0,max:2*Math.PI,step:Math.PI/32}),this.vs.osc3phase=new l.Z({initialValue:2,min:0,max:2*Math.PI,step:Math.PI/32}),this.osc1=new u.Z({speed:function speed(r){return t.vs.oscSpeed.value*t.vs.oscSpeedMulti.value/2},radius:function radius(r){return t.vs.oscDist.value},phase:0}),this.osc2=new u.Z({speed:function speed(r){return t.vs.oscSpeed.value*Math.pow(t.vs.oscSpeedMulti.value,2)/2},radius:function radius(r){return t.vs.oscDist.value},phase:0}),this.osc3=new u.Z({speed:function speed(r){return t.vs.oscSpeed.value*Math.pow(t.vs.oscSpeedMulti.value,3)/3},radius:function radius(r){return t.vs.oscDist.value},phase:0})}},{key:"initDraw",value:function initDraw(){this.lastPoint=new o.Z(this.cx,this.cy),this.vs.stopAfter.step=this.vs.speedUp.value,this.osc1.phase=this.vs.osc1phase.value,this.osc2.phase=this.vs.osc2phase.value,this.osc3.phase=this.vs.osc3phase.value,this.osc1.reset(),this.osc2.reset(),this.osc3.reset()}},{key:"draw",value:function draw(t){var r=this.vs.speedUp.value;if(!(t*r>this.vs.stopAfter.value))for(var i=0;i<r;i++){this.osc1.step(t),this.osc2.step(t),this.osc3.step(t);var o=this.lastPoint.clone().add(this.osc1.value.add(this.osc2.value).add(this.osc3.value));this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.lineTo(o.x,o.y),this.ctx.stroke(),this.ctx.closePath(),this.lastPoint=o}}}]),SpiralingProportional}(a.v);!function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}(c,"enableCutouts",!1)},166:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),u=i(286),l=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(ConcentricCircles,t);var r=_createSuper(ConcentricCircles);function ConcentricCircles(){return function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,ConcentricCircles),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(ConcentricCircles,[{key:"init",value:function init(){var t=this;this.vs.speedUp=new l.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new l.Z({initialValue:100,min:1,max:1e3,step:1,disableRandomize:!0}),this.vs.shrinkAmount=new l.Z({initialValue:15,min:1,max:12,step:.1}),this.vs.shrinkDiv=new l.Z({initialValue:1,min:0,max:1.8,step:.01}),this.vs.shrinkFalloff=new l.Z({initialValue:1,min:.9,max:1.1,step:.005}),this.vs.shrinkVariance=new l.Z({initialValue:0,min:0,max:50,step:.01}),this.vs.shrinkVarOsc=new l.Z({initialValue:Math.PI/32,min:0,max:Math.PI/4,step:.001}),this.vs.rotateSpeed=new l.Z({initialValue:Math.PI/32,min:-Math.PI/4,max:Math.PI/4,step:.001}),this.osc1=new u.Z({radius:function radius(r){return t.vs.shrinkVariance.value},speed:function speed(r){return t.vs.shrinkVarOsc.value},phase:0})}},{key:"initDraw",value:function initDraw(){this.lastPoint=new o.Z(this.cx,this.cy),this.radius=.45*Math.min(this.cw,this.ch),this.theta=0,this.osc1.reset()}},{key:"draw",value:function draw(t){var r=this.vs.speedUp.value;if(!(t*r>this.vs.stopAfter.value))for(var i=0;i<r;i++){var o=t*r+i;this.osc1.step(o),this.radius>0&&(this.ctx.beginPath(),this.ctx.circle(this.lastPoint.x,this.lastPoint.y,this.radius),this.ctx.stroke(),this.ctx.closePath()),this.theta+=this.vs.rotateSpeed.value;var a=this.radius-(this.vs.shrinkAmount.value+this.osc1.x)*Math.pow(this.vs.shrinkFalloff.value,o),u=this.radius-a;this.lastPoint=this.lastPoint.moveAlongAngle(this.theta,u*this.vs.shrinkDiv.value),this.radius=a}}}]),ConcentricCircles}(a.v);!function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}(c,"enableCutouts",!1)},703:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),u=i(497),l=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _createForOfIteratorHelper(t,r){var i="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!i){if(Array.isArray(t)||(i=function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t))||r&&t&&"number"==typeof t.length){i&&(t=i);var o=0,a=function F(){};return{s:a,n:function n(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function e(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var u,l=!0,c=!1;return{s:function s(){i=i.call(t)},n:function n(){var t=i.next();return l=t.done,t},e:function e(t){c=!0,u=t},f:function f(){try{l||null==i.return||i.return()}finally{if(c)throw u}}}}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(BubblesInCircle,t);var r=_createSuper(BubblesInCircle);function BubblesInCircle(){return function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,BubblesInCircle),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(BubblesInCircle,[{key:"init",value:function init(){this.vs.seed=new l.Z({initialValue:1391,min:1e3,max:5e3,step:1}),this.vs.atLeast=new l.Z({initialValue:777,min:1,max:5e3,step:1,disableRandomize:!0}),this.vs.maxRadius=new l.Z({initialValue:300,min:.5,max:45,step:.5,disableRandomize:!0}),this.vs.minRadius=new l.Z({initialValue:.2,min:.1,max:5,step:.05,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){(0,u.b)(this.vs.seed.value),this.reordered=!1,this.redrawnCount=0,this.circles=[],this.radius=.45*Math.min(this.cw,this.ch),this.ctx.beginPath(),this.ctx.circle(this.cx,this.cy,this.radius),this.ctx.stroke(),this.ctx.closePath()}},{key:"draw",value:function draw(t){if(this.circles.length>this.vs.atLeast.value)if(this.reordered){if(this.redrawnCount<this.circles.length){var r=this.circles[this.redrawnCount];this.ctx.beginPath(),this.ctx.circle(r.position.x,r.position.y,r.radius),this.ctx.stroke(),this.ctx.closePath(),this.redrawnCount++}}else{var i=new o.Z(this.cx,this.cy);this.circles.sort((function(t,r){return o.Z.distance(i,r.position)-o.Z.distance(i,t.position)})),this.ctx.reset(),this.ctx.beginPath(),this.ctx.circle(this.cx,this.cy,this.radius),this.ctx.stroke(),this.ctx.closePath(),this.reordered=!0}else{var a=(0,u.M)()*Math.PI*2,l=(0,u.M)()*this.radius,c=new o.Z(this.cx+Math.cos(a)*l,this.cy+Math.sin(a)*l),p=0,h=!0,y=this.radius-o.Z.distance(new o.Z(this.cx,this.cy),c);if(this.circles.length){var d,v=[],m=_createForOfIteratorHelper(this.circles);try{for(m.s();!(d=m.n()).done;){var b=d.value,P=o.Z.distance(b.position,c);P<=b.radius?h=!1:v.push(P-b.radius)}}catch(t){m.e(t)}finally{m.f()}v.sort((function(t,r){return t-r})),p=v[0],h&&p>y&&(p=y)}else p=y;(p>this.vs.maxRadius.value||p<this.vs.minRadius.value)&&(h=!1),h&&p>0&&(this.circles.push({position:c,radius:p}),this.ctx.beginPath(),this.ctx.circle(c.x,c.y,p),this.ctx.stroke(),this.ctx.closePath())}}}]),BubblesInCircle}(a.v);_defineProperty(c,"generateGCode",!1),_defineProperty(c,"enableCutouts",!1)},139:(t,r,i)=>{"use strict";i.d(r,{Z:()=>u});var o=i(204),a=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var u=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(GridWaves,t);var r=_createSuper(GridWaves);function GridWaves(){return function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,GridWaves),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(GridWaves,[{key:"init",value:function init(){this.vs.cols=new a.Z({initialValue:3,min:1,max:10,step:1,disableRandomize:!0}),this.vs.rows=new a.Z({initialValue:4,min:1,max:10,step:1,disableRandomize:!0}),this.vs.gap=new a.Z({initialValue:2,min:0,max:25,step:1,disableRandomize:!0}),this.vs.outerGap=new a.Z({initialValue:5,min:0,max:25,step:1,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){var t=this.vs.cols.value,r=this.vs.rows.value,i=this.vs.gap.value,o=this.vs.outerGap.value;this.effectiveWidth=this.cw-2*o,this.effectiveHeight=this.ch-2*o;for(var a=(this.effectiveWidth-i*(t-1))/t,u=o,l=o,c=0;c<r;c++){u=o;for(var p=0;p<t;p++)this.ctx.beginPath(),this.ctx.rect(u,l,a,a),this.ctx.stroke(),this.ctx.closePath(),u+=a+i;l+=a+i}}},{key:"draw",value:function draw(t){}}]),GridWaves}(o.v);!function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}(u,"enableCutouts",!1)},97:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(204),a=i(393),u=i(497),l=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}(this,i)}}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(PerlinGrid,t);var r=_createSuper(PerlinGrid);function PerlinGrid(){var t;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,PerlinGrid);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"drawCount",0),_defineProperty(_assertThisInitialized(t),"maxDrawCount",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(PerlinGrid,[{key:"init",value:function init(){this.vs.speedUp=new l.Z({initialValue:10,min:1,max:100,step:1,disableRandomize:!0}),this.vs.seed=new l.Z({initialValue:1e3,min:1e3,max:5e3,step:1}),this.vs.cols=new l.Z({initialValue:90,min:1,max:200,step:1,disableRandomize:!0}),this.vs.rows=new l.Z({initialValue:90,min:1,max:200,step:1,disableRandomize:!0}),this.vs.shape=new l.Z({initialValue:1,min:0,max:1,step:1,disableRandomize:!0}),this.vs.size=new l.Z({initialValue:18,min:.1,max:64,step:.1}),this.vs.perlinDiv=new l.Z({initialValue:25,min:1,max:100,step:1,disableRandomize:!0}),this.vs.offsetX=new l.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.offsetY=new l.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.outerGap=new l.Z({initialValue:12,min:0,max:25,step:1,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){(0,u.b)(this.vs.seed.value),(0,a.ii)(this.vs.seed.value);var t=this.vs.cols.value,r=this.vs.rows.value,i=this.vs.outerGap.value;this.effectiveWidth=this.cw-2*i,this.effectiveHeight=this.ch-2*i,this.drawCount=0,this.maxDrawCount=r*t}},{key:"draw",value:function draw(t){if(!(this.drawCount>=this.maxDrawCount)){var r=this.vs.speedUp.value,i=this.vs.cols.value,o=this.vs.rows.value,u=this.vs.outerGap.value,l=this.vs.size.value,c=this.vs.shape.value,p=this.vs.perlinDiv.value,h=this.vs.offsetX.value,y=this.vs.offsetY.value,d=this.effectiveWidth/i,v=this.effectiveHeight/o;0===c&&(r=Math.max(1,Math.floor(r/4)));for(var m=0;m<this.vs.speedUp.value;m++){var b=this.drawCount+m;if(b>=this.maxDrawCount)break;var P=b%i,_=Math.floor(b/i),g=u+P*d,x=u+_*v,w=Math.abs((0,a.tv)((P+h)/p,(_+y)/p))*l;this.ctx.beginPath(),0===c?this.ctx.circle(g,x,w):1===c&&this.ctx.rect(g-w/2,x-w/2,w,w),this.ctx.stroke(),this.ctx.closePath()}this.drawCount+=this.vs.speedUp.value}}}]),PerlinGrid}(o.v);_defineProperty(c,"enableCutouts",!1)},165:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(204),a=i(393),u=i(497),l=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}(this,i)}}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(PerlinLines,t);var r=_createSuper(PerlinLines);function PerlinLines(){var t;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,PerlinLines);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"drawCount",0),_defineProperty(_assertThisInitialized(t),"maxDrawCount",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(PerlinLines,[{key:"init",value:function init(){this.vs.speedUp=new l.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.seed=new l.Z({initialValue:9275,min:1e3,max:5e3,step:1}),this.vs.cols=new l.Z({initialValue:150,min:1,max:300,step:1}),this.vs.rows=new l.Z({initialValue:120,min:1,max:300,step:1}),this.vs.size=new l.Z({initialValue:.5,min:.1,max:8,step:.1}),this.vs.perlinDivX=new l.Z({initialValue:75,min:1,max:100,step:1}),this.vs.perlinDivY=new l.Z({initialValue:75,min:1,max:100,step:1}),this.vs.perlinOffsetX=new l.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.perlinOffsetY=new l.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.drawOffsetStart=new l.Z({initialValue:1,min:-5,max:5,step:.1}),this.vs.drawOffsetEnd=new l.Z({initialValue:-4.5,min:-5,max:5,step:.1}),this.vs.outerGap=new l.Z({initialValue:18,min:0,max:25,step:1,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){(0,u.b)(this.vs.seed.value),(0,a.ii)(this.vs.seed.value);var t=this.vs.cols.value,r=this.vs.rows.value,i=this.vs.outerGap.value;this.effectiveWidth=this.cw-2*i,this.effectiveHeight=this.ch-2*i,this.drawCount=0,this.maxDrawCount=r*t}},{key:"draw",value:function draw(t){if(!(this.drawCount>=this.maxDrawCount)){for(var r=this.vs.cols.value,i=this.vs.rows.value,o=this.vs.outerGap.value,u=this.vs.size.value,l=this.vs.perlinDivX.value,c=this.vs.perlinDivY.value,p=this.vs.perlinOffsetX.value,h=this.vs.perlinOffsetY.value,y=this.vs.drawOffsetStart.value,d=this.vs.drawOffsetEnd.value,v=this.effectiveWidth/r,m=this.effectiveHeight/i,b=u/(1+(this.vs.size.max-(r+i)/2)/500),P=0;P<this.vs.speedUp.value;P++){var _=this.drawCount+P;if(_>=this.maxDrawCount)break;var g=_%r,x=Math.floor(_/r),w=o+g*v,I=o+x*m,C=(0,a.tv)((g+p)/l,(x+h)/c)*Math.PI*2,O={x:w+Math.cos(C)*(b+y),y:I+Math.sin(C)*(b+y)},S={x:w+Math.cos(C+Math.PI)*(b+d),y:I+Math.sin(C+Math.PI)*(b+d)};this.ctx.beginPath(),_%2==0?(this.ctx.moveTo(O.x,O.y),this.ctx.lineTo(S.x,S.y)):(this.ctx.moveTo(S.x,S.y),this.ctx.lineTo(O.x,O.y)),this.ctx.stroke(),this.ctx.closePath()}this.drawCount+=this.vs.speedUp.value}}}]),PerlinLines}(o.v);_defineProperty(c,"enableCutouts",!1)},52:(t,r,i)=>{"use strict";i.d(r,{Z:()=>p});var o=i(323),a=i(204),u=i(561),l=i(497),c=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}(this,i)}}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var p=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Tree,t);var r=_createSuper(Tree);function Tree(){var t;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Tree);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"branchLevel",0),_defineProperty(_assertThisInitialized(t),"drawnCurrentStems",0),_defineProperty(_assertThisInitialized(t),"currentStems",[]),_defineProperty(_assertThisInitialized(t),"nextStems",[]),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Tree,[{key:"init",value:function init(){this.vs.seed=new c.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.initBranchLength=new c.Z({initialValue:8,min:5,max:10,step:.1}),this.vs.branchLengthFalloff=new c.Z({initialValue:.83,min:.4,max:.9,step:.005}),this.vs.splitProbability=new c.Z({initialValue:.6,min:0,max:1,step:.005}),this.vs.pruneProbability=new c.Z({initialValue:.95,min:0,max:1,step:.05}),this.vs.bloomProbability=new c.Z({initialValue:.6,min:0,max:1,step:.05}),this.vs.bloomSize=new c.Z({initialValue:.3,min:.2,max:1.2,step:.1}),this.vs.splitAngleRange=new c.Z({initialValue:.44,min:0,max:Math.PI/2,step:Math.PI/256}),this.vs.splitAngleBranchLevelMulti=new c.Z({initialValue:.1,min:-1,max:1,step:.05}),this.vs.splitAngleMinPercent=new c.Z({initialValue:.5,min:0,max:1,step:.05}),this.vs.chaosFactor=new c.Z({initialValue:.85,min:0,max:2,step:.01}),this.vs.splitCount=new c.Z({initialValue:2,min:2,max:5,step:1,disableRandomize:!0}),this.vs.maxBranchLevels=new c.Z({initialValue:14,min:1,max:24,step:1,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){(0,l.b)(this.vs.seed.value),this.branchLevel=0,this.drawnCurrentStems=0,this.currentStems=[],this.nextStems=[];var t=this.vs.branchLengthFalloff.value,r=this.vs.initBranchLength.value/t,i=-Math.PI/2,a=this.drawBranch(new o.Z(this.cx,this.ch-10),i,r);this.currentStems.push({position:a,angle:i,length:r})}},{key:"draw",value:function draw(t){if(!(this.branchLevel>this.vs.maxBranchLevels.value))if(this.drawnCurrentStems>=this.currentStems.length)this.currentStems=_toConsumableArray(this.nextStems),this.nextStems=[],this.branchLevel++,this.drawnCurrentStems=0;else{var r=this.currentStems[this.drawnCurrentStems],i=this.vs.branchLengthFalloff.value,o=this.branchLevel<3?1:this.vs.splitProbability.value,a=this.vs.splitAngleRange.value,c=this.vs.splitAngleBranchLevelMulti.value,p=this.vs.splitAngleMinPercent.value,h=this.vs.pruneProbability.value,y=this.vs.bloomProbability.value,d=this.vs.chaosFactor.value;if((0,l.M)()<=o)for(var v=this.vs.splitCount.value,m=a*(1+c*this.branchLevel/4),b=m*p+(0,u.EA)(m*(1-p))+(0,u.Qy)(d)*Math.PI/8,P=2*b/v,_=0;_<v;_++){var g=r.length*i*(1+(0,u.Qy)(d/8)),x=r.angle-b/2+P*_+(0,u.Qy)(Math.PI*d/10),w=this.drawBranch(r.position,x,g);this.nextStems.push({position:w,angle:x,length:g})}else{var I=r.angle+(0,u.Qy)(Math.PI*d/10),C=r.length*i*(1+(0,u.Qy)(d/8)),O=this.drawBranch(r.position,I,C);this.branchLevel!==this.vs.maxBranchLevels.value&&(0,l.M)()>h?this.nextStems.push({position:O,angle:I,length:C}):(0,l.M)()<y&&this.drawBloom(O,I)}this.drawnCurrentStems++}}},{key:"drawBranch",value:function drawBranch(t,r,i){this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y);var a=t.clone().add(new o.Z(Math.cos(r)*i,Math.sin(r)*i));return this.ctx.lineTo(a.x,a.y),this.ctx.stroke(),this.ctx.closePath(),a}},{key:"drawBloom",value:function drawBloom(t,r){var i=this.vs.bloomSize.value;this.ctx.beginPath(),this.ctx.circle(t.x+Math.cos(r)*i,t.y+Math.sin(r)*i,i),this.ctx.stroke(),this.ctx.closePath()}}]),Tree}(a.v);_defineProperty(p,"enableCutouts",!1)},404:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(204),a=i(561),u=i(497),l=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(MondayMaze,t);var r=_createSuper(MondayMaze);function MondayMaze(){return function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,MondayMaze),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(MondayMaze,[{key:"init",value:function init(){this.vs.speedUp=new l.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.seed=new l.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.gridSize=new l.Z({initialValue:2,min:1,max:8,step:.25}),this.vs.radialDivs=new l.Z({initialValue:2,min:1,max:4,step:1}),this.vs.offsetAng=new l.Z({initialValue:0,min:0,max:360,step:15})}},{key:"initDraw",value:function initDraw(){(0,u.b)(this.vs.seed.value),this.i=0,this.rows=Math.ceil(this.cw/this.vs.gridSize.value)+1,this.cols=Math.ceil(this.ch/this.vs.gridSize.value)+1}},{key:"draw",value:function draw(t){if(!(this.i>=this.rows*this.cols))for(var r=0;r<this.vs.speedUp.value&&!(this.i>=this.rows*this.cols);r++){var i=this.i%this.rows,o=Math.floor(this.i/this.rows),u=i*this.vs.gridSize.value,l=o*this.vs.gridSize.value,c=(0,a.Cn)(this.vs.offsetAng.value,this.vs.offsetAng.max,2*Math.PI),p=(0,a.rO)(this.vs.radialDivs.value),h=Math.PI/this.vs.radialDivs.value*p;(h=(0,a.mb)(h))>Math.PI/2&&(h-=Math.PI),h<Math.PI/2&&(h+=Math.PI),h+=c,this.ctx.beginPath(),this.ctx.moveTo(u,l);var y=Math.min(Math.abs(this.vs.gridSize.value/Math.cos(h)),Math.abs(this.vs.gridSize.value/Math.sin(h)));this.ctx.lineTo(u+Math.cos(h)*y,l+Math.sin(h)*y),this.ctx.stroke(),this.ctx.closePath(),this.i++}}}]),MondayMaze}(o.v);!function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}(c,"enableCutouts",!1)},544:(t,r,i)=>{"use strict";i.d(r,{Z:()=>p});var o=i(323),a=i(204),u=i(561),l=i(497),c=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}(this,i)}}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var p=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Chaser,t);var r=_createSuper(Chaser);function Chaser(){var t;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Chaser);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"angleChangeCountdown",0),_defineProperty(_assertThisInitialized(t),"increment",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Chaser,[{key:"init",value:function init(){this.vs.downscaleDrawing=new c.Z({initialValue:5,min:1,max:200,step:.01,disableRandomize:!0}),this.vs.speedUp=new c.Z({initialValue:1,min:1,max:500,step:1,disableRandomize:!0}),this.vs.stopAfter=new c.Z({initialValue:7e4,min:1,max:1e5,step:100,disableRandomize:!0}),this.vs.seed=new c.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.angleDiff=new c.Z({initialValue:23,min:0,max:180,step:1}),this.vs.minAngleDiff=new c.Z({initialValue:7,min:0,max:180,step:1}),this.vs.angleChangeSpeed=new c.Z({initialValue:68,min:0,max:1200,step:1}),this.vs.easeToAngle=new c.Z({initialValue:25,min:1,max:60,step:.25}),this.vs.centerForce=new c.Z({initialValue:450,min:2,max:1200,step:1}),this.vs.travel=new c.Z({initialValue:.1,min:.001,max:1,step:.001}),this.vs.centerDistRatio=new c.Z({initialValue:40,min:-10,max:80,step:.01})}},{key:"initDraw",value:function initDraw(){this.vs.minAngleDiff.value>this.vs.angleDiff.value&&this.vs.minAngleDiff.setValue(this.vs.angleDiff.value,!0),(0,l.b)(this.vs.seed.value),this.point=new o.Z((0,u.EA)(this.cw),(0,u.EA)(this.ch)),this.pointAngle=(0,u.EA)(2*Math.PI),this.aimAngle=this.pointAngle,this.increment=0,this.angleChangeCountdown=0}},{key:"draw",value:function draw(t){if(!(this.increment>this.vs.stopAfter.value))for(var r=(0,u.Id)(this.vs.angleDiff.value),i=(0,u.Id)(this.vs.minAngleDiff.value),a=0;a<this.vs.speedUp.value&&(this.increment++,!(this.increment>this.vs.stopAfter.value));a++){if(this.angleChangeCountdown<=0){var l=(0,u.Qy)(r-i);l+=(l>0?1:-1)*i,this.aimAngle=this.pointAngle+l,this.aimAngle=(0,u.mb)(this.aimAngle),this.pointAngle=(0,u.mb)(this.pointAngle),this.angleChangeCountdown=this.vs.angleChangeSpeed.value}var c=Math.max(.5,o.Z.distance(this.point,new o.Z(this.cx,this.cy)));this.pointAngle+=(this.aimAngle-this.pointAngle)/this.vs.easeToAngle.value,this.ctx.beginPath(),this.ctx.moveTo((this.point.x-this.cx)/this.vs.downscaleDrawing.value+this.cx,(this.point.y-this.cy)/this.vs.downscaleDrawing.value+this.cy),this.point.x+=Math.cos(this.pointAngle)*this.vs.travel.value,this.point.y+=Math.sin(this.pointAngle)*this.vs.travel.value,this.point.x+=(this.cx-this.point.x)/(this.vs.centerForce.value*(c/this.vs.centerDistRatio.value)),this.point.y+=(this.cy-this.point.y)/(this.vs.centerForce.value*(c/this.vs.centerDistRatio.value)),this.ctx.lineTo((this.point.x-this.cx)/this.vs.downscaleDrawing.value+this.cx,(this.point.y-this.cy)/this.vs.downscaleDrawing.value+this.cy),this.ctx.stroke(),this.ctx.closePath(),this.angleChangeCountdown--}}}]),Chaser}(a.v);_defineProperty(p,"enableCutouts",!1)},230:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(204),a=i(561),u=i(497),l=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}(this,i)}}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Kaleido,t);var r=_createSuper(Kaleido);function Kaleido(){var t;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Kaleido);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"increment",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Kaleido,[{key:"init",value:function init(){this.vs.speedUp=new l.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new l.Z({initialValue:20,min:1,max:420,step:1,disableRandomize:!0}),this.vs.maxRadius=new l.Z({initialValue:.45*this.ch,min:1,max:.5*this.ch,step:.1,disableRandomize:!0}),this.vs.angleOffset=new l.Z({initialValue:0,min:0,max:90,step:1,disableRandomize:!0}),this.vs.seed=new l.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.segments=new l.Z({initialValue:8,min:2,max:24,step:2}),this.vs.maxHeightDiff=new l.Z({initialValue:120,min:0,max:this.vs.maxRadius.value,step:1})}},{key:"initDraw",value:function initDraw(){this.vs.maxHeightDiff.max=this.vs.maxRadius.value,this.vs.maxHeightDiff.value>this.vs.maxRadius.value&&this.vs.maxHeightDiff.setValue(this.vs.maxRadius.value,!0),(0,u.b)(this.vs.seed.value),this.increment=0}},{key:"draw",value:function draw(t){if(!(this.increment>this.vs.stopAfter.value))for(var r=(0,a.Id)(360/this.vs.segments.value),i=0;i<this.vs.speedUp.value&&(this.increment++,!(this.increment>this.vs.stopAfter.value));i++){var o=(0,a.EA)(this.vs.maxRadius.value),u=(0,a.re)(o+(0,a.Qy)(this.vs.maxHeightDiff.value/2),this.vs.maxRadius.value,0);if(o!==u)for(var l=0;l<this.vs.segments.value;l++){var c=r*l+(0,a.Id)(this.vs.angleOffset.value);this.ctx.beginPath(),this.ctx.moveTo(this.cx+Math.cos(c)*(l%2?o:u),this.cy+Math.sin(c)*(l%2?o:u)),this.ctx.lineTo(this.cx+Math.cos(c+r)*(l%2?u:o),this.cy+Math.sin(c+r)*(l%2?u:o)),this.ctx.stroke(),this.ctx.closePath()}}}}]),Kaleido}(o.v);_defineProperty(c,"enableCutouts",!1)},573:(t,r,i)=>{"use strict";i.d(r,{Z:()=>p});var o=i(204),a=i(393),u=i(561),l=i(497),c=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}(this,i)}}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var p=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(KaleidoCurve,t);var r=_createSuper(KaleidoCurve);function KaleidoCurve(){var t;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,KaleidoCurve);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"increment",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(KaleidoCurve,[{key:"init",value:function init(){this.vs.speedUp=new c.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new c.Z({initialValue:20,min:1,max:420,step:1,disableRandomize:!0}),this.vs.maxRadius=new c.Z({initialValue:.45*this.ch,min:1,max:.5*this.ch,step:.1,disableRandomize:!0}),this.vs.angleOffset=new c.Z({initialValue:0,min:0,max:90,step:1,disableRandomize:!0}),this.vs.perlinDivX=new c.Z({initialValue:75,min:1,max:100,step:1}),this.vs.perlinDivY=new c.Z({initialValue:75,min:1,max:100,step:1}),this.vs.perlinOffsetX=new c.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.perlinOffsetY=new c.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.seed=new c.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.segments=new c.Z({initialValue:8,min:2,max:24,step:2}),this.vs.maxHeightDiff=new c.Z({initialValue:120,min:0,max:this.vs.maxRadius.value,step:1}),this.vs.curveRange=new c.Z({initialValue:.5,min:0,max:5,step:.005}),this.vs.maxCurveStrength=new c.Z({initialValue:50,min:0,max:90,step:1})}},{key:"initDraw",value:function initDraw(){this.vs.maxHeightDiff.max=this.vs.maxRadius.value,this.vs.maxHeightDiff.value>this.vs.maxRadius.value&&this.vs.maxHeightDiff.setValue(this.vs.maxRadius.value,!0),(0,l.b)(this.vs.seed.value),this.increment=0}},{key:"draw",value:function draw(t){if(!(this.increment>this.vs.stopAfter.value))for(var r=(0,u.Id)(360/this.vs.segments.value),i=0;i<this.vs.speedUp.value&&(this.increment++,!(this.increment>this.vs.stopAfter.value));i++){var o=(0,u.EA)(this.vs.maxRadius.value),l=(0,u.re)(o+(0,u.Qy)(this.vs.maxHeightDiff.value/2),this.vs.maxRadius.value,0),c=(0,a.tv)((o+this.vs.perlinOffsetX.value)/this.vs.perlinDivX.value,(l+this.vs.perlinOffsetY.value)/this.vs.perlinDivY.value)*this.vs.curveRange.value*r*2+r/2,p=(0,u.EA)(this.vs.maxCurveStrength.value);if(o!==l)for(var h=0;h<this.vs.segments.value;h++){var y=r*h+(0,u.Id)(this.vs.angleOffset.value);this.ctx.beginPath(),this.ctx.moveTo(this.cx+Math.cos(y)*(h%2?o:l),this.cy+Math.sin(y)*(h%2?o:l)),this.ctx.quadraticCurveTo(this.cx+Math.cos(y+c)*p,this.cy+Math.sin(y+c)*p,this.cx+Math.cos(y+r)*(h%2?l:o),this.cy+Math.sin(y+r)*(h%2?l:o)),this.ctx.stroke(),this.ctx.closePath()}}}}]),KaleidoCurve}(o.v);_defineProperty(p,"enableCutouts",!1)},388:(t,r,i)=>{"use strict";i.d(r,{Z:()=>y});var o=i(323),a=i(204),u=i(289),l=i(561),c=i(132),p=i(497),h=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _slicedToArray(t,r){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,r){var i=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=i){var o,a,u,l,c=[],p=!0,h=!1;try{if(u=(i=i.call(t)).next,0===r){if(Object(i)!==i)return;p=!1}else for(;!(p=(o=u.call(i)).done)&&(c.push(o.value),c.length!==r);p=!0);}catch(t){h=!0,a=t}finally{try{if(!p&&null!=i.return&&(l=i.return(),Object(l)!==l))return}finally{if(h)throw a}}return c}}(t,r)||_unsupportedIterableToArray(t,r)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||_unsupportedIterableToArray(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(t,r){if(t){if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?_arrayLikeToArray(t,r):void 0}}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}(this,i)}}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var y=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Perpendicularity,t);var r=_createSuper(Perpendicularity);function Perpendicularity(){var t;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Perpendicularity);for(var i=arguments.length,a=new Array(i),u=0;u<i;u++)a[u]=arguments[u];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(a))),"cp",new o.Z(t.cx,t.cy)),_defineProperty(_assertThisInitialized(t),"increment",0),_defineProperty(_assertThisInitialized(t),"segmentAngles",[]),_defineProperty(_assertThisInitialized(t),"segmentsLines",[]),_defineProperty(_assertThisInitialized(t),"drawnLines",[]),_defineProperty(_assertThisInitialized(t),"nextSpawnPoints",[]),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Perpendicularity,[{key:"init",value:function init(){this.vs.stopAfter=new h.Z({initialValue:36,min:1,max:420,step:1,disableRandomize:!0}),this.vs.maxRadius=new h.Z({initialValue:.45*this.ch,min:1,max:.5*this.ch,step:.1,disableRandomize:!0}),this.vs.seed=new h.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.segments=new h.Z({initialValue:6,min:3,max:15,step:1}),this.vs.segmentAngleWonk=new h.Z({initialValue:0,min:0,max:1,step:.001}),this.vs.radialSpawnPoints=new h.Z({initialValue:1,min:0,max:10,step:1}),this.vs.offsetPerpAngle=new h.Z({initialValue:Math.PI/2-.1,min:0,max:Math.PI,step:.001}),this.vs.offsetPerpAngleWonk=new h.Z({initialValue:0,min:0,max:1,step:.001})}},{key:"drawLineFromPointAtAngle",value:function drawLineFromPointAtAngle(t,r){var i,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Math.PI/2,a=r[0].angleTo(r[1]),l=this.cp.angleTo(t),p=a+o;(0,c.S3)(l,a)&&(p+=Math.PI);var h=[t,t.clone().moveAlongAngle(p,1e3)],y=u.wk.apply(void 0,[h].concat(_toConsumableArray(this.drawnLines))).map((function(r){var i=_slicedToArray(r,2),o=i[0];return[o,i[1],t.distanceTo(o)]})).filter((function(t){return _slicedToArray(t,3)[2]>.001})).sort((function(t,r){return _slicedToArray(t,3)[2]-_slicedToArray(r,3)[2]}));if(y.length||(h[1]=h[0].clone().moveAlongAngle(p+Math.PI,1e3),y=u.wk.apply(void 0,[h].concat(_toConsumableArray(this.drawnLines))).map((function(r){var i=_slicedToArray(r,2),o=i[0];return[o,i[1],t.distanceTo(o)]})).filter((function(t){return _slicedToArray(t,3)[2]>.001})).sort((function(t,r){return _slicedToArray(t,3)[2]-_slicedToArray(r,3)[2]}))),y.length>0){var d=_slicedToArray(y[0],2),v=d[0],m=d[1];h[1]=v,this.nextSpawnPoints.push([v,m])}this.drawnLines.push(h),(i=this.ctx).strokeLine.apply(i,h)}},{key:"initDraw",value:function initDraw(){console.log("init draw called"),this.increment=0,this.segmentAngles=[],this.segmentsLines=[],this.drawnLines=[],this.nextSpawnPoints=[],(0,p.b)(this.vs.seed.value);for(var t=new o.Z(this.cx,this.cy),r=(0,l.Id)(360/this.vs.segments.value),i=0,a=0;a<this.vs.segments.value;a++){var u=(0,l.EA)(this.vs.segmentAngleWonk.value);i+=r+(0,l.EA)(-r*u,r*u),this.segmentAngles.push(i);var h=[t,new o.Z(this.cx+Math.cos(i)*this.vs.maxRadius.value,this.cy+Math.sin(i)*this.vs.maxRadius.value)];this.segmentsLines.push(h),this.drawnLines.push(h)}for(var y=0;y<this.vs.segments.value;y++){var d=[this.segmentsLines[y][1],this.segmentsLines[y===this.vs.segments.value-1?0:y+1][1]];this.drawnLines.push(d)}for(var v=0;v<this.vs.segments.value;v++)for(var m=this.segmentsLines[v],b=c.zs.apply(void 0,_toConsumableArray(m).concat([this.vs.radialSpawnPoints.value])),P=0;P<this.vs.radialSpawnPoints.value;P++)this.drawLineFromPointAtAngle(b[P],m,this.vs.offsetPerpAngle.value)}},{key:"draw",value:function draw(t){if(!(this.increment>this.vs.stopAfter.value)){var r=_toConsumableArray(this.nextSpawnPoints);this.nextSpawnPoints=[];var i,o=function _createForOfIteratorHelper(t,r){var i="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!i){if(Array.isArray(t)||(i=_unsupportedIterableToArray(t))||r&&t&&"number"==typeof t.length){i&&(t=i);var o=0,a=function F(){};return{s:a,n:function n(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function e(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var u,l=!0,c=!1;return{s:function s(){i=i.call(t)},n:function n(){var t=i.next();return l=t.done,t},e:function e(t){c=!0,u=t},f:function f(){try{l||null==i.return||i.return()}finally{if(c)throw u}}}}(r);try{for(o.s();!(i=o.n()).done;){var a=_slicedToArray(i.value,2),u=a[0],c=a[1],p=this.vs.offsetPerpAngle.value+(0,l.Qy)(this.vs.offsetPerpAngleWonk.value);this.drawLineFromPointAtAngle(u,c,p)}}catch(t){o.e(t)}finally{o.f()}this.increment++}}}]),Perpendicularity}(a.v)},494:(t,r,i)=>{"use strict";i.d(r,{Z:()=>h});var o=i(323),a=i(204),u=i(289),l=i(561),c=i(497),p=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _slicedToArray(t,r){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,r){var i=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=i){var o,a,u,l,c=[],p=!0,h=!1;try{if(u=(i=i.call(t)).next,0===r){if(Object(i)!==i)return;p=!1}else for(;!(p=(o=u.call(i)).done)&&(c.push(o.value),c.length!==r);p=!0);}catch(t){h=!0,a=t}finally{try{if(!p&&null!=i.return&&(l=i.return(),Object(l)!==l))return}finally{if(h)throw a}}return c}}(t,r)||_unsupportedIterableToArray(t,r)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _createForOfIteratorHelper(t,r){var i="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!i){if(Array.isArray(t)||(i=_unsupportedIterableToArray(t))||r&&t&&"number"==typeof t.length){i&&(t=i);var o=0,a=function F(){};return{s:a,n:function n(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function e(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var u,l=!0,c=!1;return{s:function s(){i=i.call(t)},n:function n(){var t=i.next();return l=t.done,t},e:function e(t){c=!0,u=t},f:function f(){try{l||null==i.return||i.return()}finally{if(c)throw u}}}}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||_unsupportedIterableToArray(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(t,r){if(t){if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?_arrayLikeToArray(t,r):void 0}}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}(this,i)}}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var h=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Rays,t);var r=_createSuper(Rays);function Rays(){var t;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Rays);for(var i=arguments.length,a=new Array(i),u=0;u<i;u++)a[u]=arguments[u];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(a))),"increment",0),_defineProperty(_assertThisInitialized(t),"reflectiveCircles",[]),_defineProperty(_assertThisInitialized(t),"drawingPoints",[]),_defineProperty(_assertThisInitialized(t),"cp",new o.Z(t.cx,t.cy)),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Rays,[{key:"init",value:function init(){this.vs.stopAfter=new p.Z({initialValue:3,min:1,max:256,step:1,disableRandomize:!0}),this.vs.maxRadius=new p.Z({initialValue:.45*this.ch,min:1,max:.5*this.ch,step:.1,disableRandomize:!0}),this.vs.seed=new p.Z({initialValue:3975,min:1e3,max:5e3,step:1}),this.vs.lines=new p.Z({initialValue:500,min:3,max:720,step:1,disableRandomize:!0}),this.vs.lineAngleWonk=new p.Z({initialValue:0,min:0,max:1,step:1e-4}),this.vs.circles=new p.Z({initialValue:3,min:1,max:10,step:1,disableRandomize:!0}),this.vs.refractionIndex=new p.Z({initialValue:1,min:1,max:2,step:1e-5,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){console.log("init draw called"),this.increment=0,this.reflectiveCircles=[],this.drawingPoints=[],(0,c.b)(this.vs.seed.value);for(var t=0;t<this.vs.circles.value;){var r=(0,l.EA)(5,20),i=new o.Z((0,l.EA)(this.cw-2*r,r),(0,l.EA)(this.ch-2*r,r));u.bU.apply(void 0,[[i,r]].concat(_toConsumableArray(this.reflectiveCircles)))||(this.reflectiveCircles.push([i,r]),t++)}for(var a=u.zj.apply(void 0,[this.cp].concat(_toConsumableArray(this.reflectiveCircles))),p=2*Math.PI/this.vs.lines.value,h=0;h<this.vs.lines.value;h++){var y=p*h+(0,l.Qy)(this.vs.lineAngleWonk.value)*p;this.drawingPoints.push([this.cp,y,a])}}},{key:"drawLines",value:function drawLines(t){var r,i=this,o=_createForOfIteratorHelper(t);try{var a=function _loop(){var t,o=_slicedToArray(r.value,3),a=o[0],c=o[1],p=o[2],h=[a,a.moveAlongAngle(c,1e3)],y=[],d=_createForOfIteratorHelper(i.reflectiveCircles);try{for(d.s();!(t=d.n()).done;){var v=_slicedToArray(t.value,2),m=v[0],b=v[1],P=(0,l.P4)(c,h[0].angleTo(m));if(!(P>(0,l.Id)(90)||P<(0,l.Id)(-90))){var _,g=_createForOfIteratorHelper((0,u.Bz)(h,m,b));try{for(g.s();!(_=g.n()).done;){var x=_.value;y.push([x,m,b])}}catch(t){g.e(t)}finally{g.f()}}}}catch(t){d.e(t)}finally{d.f()}if(y.length){var w,I=u.Ou.apply(void 0,[a].concat(_toConsumableArray(y.map((function(t){return _slicedToArray(t,1)[0]}))))),C=y.find((function(t){return _slicedToArray(t,1)[0]===I})),O=_slicedToArray(C,3),S=O[1];O[2];h[1]=I;var T=S.angleTo(I),A=(0,l.Vz)(T,c+Math.PI),E=(p&&Math.PI,T+Math.PI-Math.asin(Math.sin(A)/i.vs.refractionIndex.value));i.drawingPoints.push([I.clone(),E,!0]),(w=i.ctx).strokeLine.apply(w,h)}};for(o.s();!(r=o.n()).done;)a()}catch(t){o.e(t)}finally{o.f()}}},{key:"draw",value:function draw(t){if(!(this.increment>=this.vs.stopAfter.value)){var r=_toConsumableArray(this.drawingPoints);this.drawingPoints=[],this.drawLines(r),this.increment++}}}]),Rays}(a.v)},4:(t,r,i)=>{"use strict";i.d(r,{Z:()=>u});var o=i(204),a=i(561);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}(this,i)}}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var u=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(CutoutTest,t);var r=_createSuper(CutoutTest);function CutoutTest(){var t;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,CutoutTest);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"increment",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(CutoutTest,[{key:"init",value:function init(){}},{key:"initDraw",value:function initDraw(){var t,r,i,o,u,l,c,p,h;this.ctx.strokeRect(25,25,25,25);var y=null===(t=this.ctx.path)||void 0===t?void 0:t.getBounds();console.log("bounds",y),this.ctx.strokeRect(y.left,y.top,y.right-y.left,y.bottom-y.top,{debug:!0}),console.log("points",null===(r=this.ctx.path)||void 0===r?void 0:r.getPoints()),console.log("closed",null===(i=this.ctx.path)||void 0===i?void 0:i.current.isClosed()),this.ctx.save(),this.ctx.translate(20,20),this.ctx.strokeRect(0,0,15,15,{cutout:!0}),this.ctx.restore(),this.ctx.save(),this.ctx.translate(25,25),this.ctx.rotate((0,a.Id)(5)),this.ctx.strokeRect(0,0,25,25,{cutout:!0}),this.ctx.restore();y=null===(o=this.ctx.path)||void 0===o?void 0:o.getBounds();console.log("bounds",y),console.log("points",null===(u=this.ctx.path)||void 0===u?void 0:u.getPoints()),console.log("closed",null===(l=this.ctx.path)||void 0===l?void 0:l.current.isClosed()),this.ctx.strokeRect(y.left,y.top,y.right-y.left,y.bottom-y.top,{debug:!0}),this.ctx.beginPath(),this.ctx.moveTo(70,25),this.ctx.lineTo(75,20),this.ctx.lineTo(80,25),this.ctx.lineTo(80,40),this.ctx.lineTo(70,40),this.ctx.lineTo(70,25),this.ctx.stroke({cutout:!0}),this.ctx.closePath();y=null===(c=this.ctx.path)||void 0===c?void 0:c.getBounds();console.log("bounds",y),this.ctx.strokeRect(y.left,y.top,y.right-y.left,y.bottom-y.top,{debug:!0}),console.log("points",null===(p=this.ctx.path)||void 0===p?void 0:p.getPoints()),console.log("closed",null===(h=this.ctx.path)||void 0===h?void 0:h.current.isClosed())}},{key:"draw",value:function draw(t){}}]),CutoutTest}(o.v);_defineProperty(u,"enableCutouts",!0)},286:(t,r,i)=>{"use strict";i.d(r,{Z:()=>a});var o=i(323);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}var a=function(){function Osc(t){if(function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Osc),_defineProperty(this,"value",new o.Z),_defineProperty(this,"offsetPhase",-Math.PI/2),"function"==typeof t.speed?(this.speedFunc=t.speed,this.speed=this.speedFunc(0)):this.speed=t.speed||Math.PI/180,void 0===t.radius)this.radius=new o.Z(1,1);else if("function"==typeof t.radius){this.radiusFunc=t.radius;var r=this.radiusFunc(0);this.radius="number"==typeof r?new o.Z(r,r):r}else this.radius="number"==typeof t.radius?new o.Z(t.radius,t.radius):t.radius.clone();this.offset=t.offset?t.offset.clone():new o.Z(0,0),this.offsetPhase=t.offsetPhase||0,this.phase=t.phase||0,this.theta=new o.Z(this.phase,this.phase),this.process()}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Osc,[{key:"x",get:function get(){return this.value.x}},{key:"y",get:function get(){return this.value.y}},{key:"reset",value:function reset(){this.theta=new o.Z(this.phase,this.phase)}},{key:"step",value:function step(t){if(this.speedFunc){var r=this.speedFunc(t);"number"!=typeof r||isNaN(r)||(this.speed=r)}if(this.radiusFunc){var i=this.radiusFunc(t);this.radius="number"==typeof i?new o.Z(i,i):i}this.theta.x=this.theta.x+this.speed,this.theta.y=this.theta.y+this.speed,this.process()}},{key:"process",value:function process(){this.value.x=this.offset.x+Math.cos(this.offsetPhase+this.theta.x)*this.radius.x,this.value.y=this.offset.y+Math.sin(this.offsetPhase+this.theta.y)*this.radius.y,isNaN(this.value.x)}}]),Osc}()},109:(t,r,i)=>{"use strict";i.d(r,{Z:()=>u});var o=i(561);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(a=o.key,u=void 0,u=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===_typeof(u)?u:String(u)),o)}var a,u}var a=0,u=function(){function Range(t){!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Range),this.name=t.name||"Var-".concat(a++),this.min=t.min,this.max=t.max,this.step=t.step||.01,this._value=t.initialValue||t.min,this._disableRandomize=t.disableRandomize||!1}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Range,[{key:"value",get:function get(){return this._value},set:function set(t){this._value=(0,o.re)(t,this.max,this.min)}},{key:"setValue",value:function setValue(t){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.value=t,r&&this.inputElem&&(this.inputElem.value=String(this.value))}},{key:"randomize",value:function randomize(){if(!this._disableRandomize){var t=Math.round((this.max-this.min)/this.step),r=this.min+(0,o.c4)(t)*this.step;this.step>=1&&(r=Math.round(r)),this.setValue(r,!0)}}}]),Range}()},289:(t,r,i)=>{"use strict";i.d(r,{Bz:()=>h,Ou:()=>p,bU:()=>m,wk:()=>l,zj:()=>d});var o=i(323),a=i(561);function _slicedToArray(t,r){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,r){var i=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=i){var o,a,u,l,c=[],p=!0,h=!1;try{if(u=(i=i.call(t)).next,0===r){if(Object(i)!==i)return;p=!1}else for(;!(p=(o=u.call(i)).done)&&(c.push(o.value),c.length!==r);p=!0);}catch(t){h=!0,a=t}finally{try{if(!p&&null!=i.return&&(l=i.return(),Object(l)!==l))return}finally{if(h)throw a}}return c}}(t,r)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t,r)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}var u=function getLineIntersectionPoint(t,r){var i=_slicedToArray(t,2),a=i[0],u=i[1],l=_slicedToArray(r,2),c=l[0],p=l[1],h=(p.y-c.y)*(u.x-a.x)-(p.x-c.x)*(u.y-a.y);if(0===h)return null;var y=((p.x-c.x)*(a.y-c.y)-(p.y-c.y)*(a.x-c.x))/h,d=((u.x-a.x)*(a.y-c.y)-(u.y-a.y)*(a.x-c.x))/h;if(y>=0&&y<=1&&d>=0&&d<=1){var v=a.x+y*(u.x-a.x),m=a.y+y*(u.y-a.y);return new o.Z(v,m)}return null},l=function getLineIntersectionPoints(t){for(var r=[],i=arguments.length,o=new Array(i>1?i-1:0),a=1;a<i;a++)o[a-1]=arguments[a];for(var l=0,c=o;l<c.length;l++){var p=c[l],h=u(t,p);h&&r.push([h,p])}return r},c=function getDistancesToPoint(t){for(var r=arguments.length,i=new Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];return i.map((function(r){return[r,t.distanceTo(r)]}))},p=function getClosestButNotSamePoint(t){for(var r=arguments.length,i=new Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];return c.apply(void 0,[t].concat(i)).sort((function(t,r){return t[1]-r[1]})).filter((function(t){return t[1]>1e-4}))[0][0]},h=function getPointsWhereLineIntersectsCircle(t,r,i){var u=_slicedToArray(t,2),l=u[0],c=u[1],p=l.clone().subtract(r),h=c.clone().subtract(r),y=h.clone().subtract(p),d=y.magnitude(),v=p.x*h.y-h.x*p.y,m=i*i*d*d-v*v;if(m<0)return[];var b=Math.sqrt(m),P=[];return P.push(new o.Z(v*y.y+(0,a.Xx)(y.y)*y.x*b,-v*y.x+Math.abs(y.y)*b).divide(d*d).add(r)),m>0&&P.push(new o.Z(v*y.y-(0,a.Xx)(y.y)*y.x*b,-v*y.x-Math.abs(y.y)*b).divide(d*d).add(r)),P},y=function pointInCircle(t,r,i){return t.distanceTo(r)<i},d=function pointInCircles(t){for(var r=arguments.length,i=new Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];for(var a=0,u=i;a<u.length;a++){var l=_slicedToArray(u[a],2),c=l[0],p=l[1];if(y(t,c,p))return!0}return!1},v=function circleOverlapsCircle(t,r){var i=_slicedToArray(t,2),o=i[0],a=i[1],u=_slicedToArray(r,2),l=u[0],c=u[1];return o.distanceTo(l)<a+c},m=function circleOverlapsCircles(t){for(var r=_slicedToArray(t,2),i=r[0],o=r[1],a=arguments.length,u=new Array(a>1?a-1:0),l=1;l<a;l++)u[l-1]=arguments[l];for(var c=0,p=u;c<p.length;c++){var h=_slicedToArray(p[c],2),y=h[0],d=h[1];if(v([i,o],[y,d]))return!0}return!1}},393:(t,r,i)=>{"use strict";function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}function _defineProperty(t,r,i){return(r=_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function _toPropertyKey(t){var r=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===_typeof(r)?r:String(r)}i.d(r,{ii:()=>p,tv:()=>d});var o=_createClass((function Grad(t,r,i){var o=this;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Grad),_defineProperty(this,"dot2",(function(t,r){return o.x*t+o.y*r})),_defineProperty(this,"dot3",(function(t,r,i){return o.x*t+o.y*r+o.z*i})),this.x=t,this.y=r,this.z=i})),a=[new o(1,1,0),new o(-1,1,0),new o(1,-1,0),new o(-1,-1,0),new o(1,0,1),new o(-1,0,1),new o(1,0,-1),new o(-1,0,-1),new o(0,1,1),new o(0,-1,1),new o(0,1,-1),new o(0,-1,-1)],u=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],l=new Array(512),c=new Array(512),p=function seedNoise(t){t>0&&t<1&&(t*=65536),(t=Math.floor(t))<256&&(t|=t<<8);for(var r=0;r<256;r++){var i=1&r?u[r]^255&t:u[r]^t>>8&255;l[r]=l[r+256]=i,c[r]=c[r+256]=a[i%12]}};p(0);Math.sqrt(3),Math.sqrt(3);var h=function fade(t){return t*t*t*(t*(6*t-15)+10)},y=function lerp(t,r,i){return(1-i)*t+i*r},d=function perlin2(t,r){var i=Math.floor(t),o=Math.floor(r);t-=i,r-=o;var a=c[(i&=255)+l[o&=255]].dot2(t,r),u=c[i+l[o+1]].dot2(t,r-1),p=c[i+1+l[o]].dot2(t-1,r),d=c[i+1+l[o+1]].dot2(t-1,r-1),v=h(t);return y(y(a,p,v),y(u,d,v),h(r))}},561:(t,r,i)=>{"use strict";i.d(r,{Cn:()=>m,EA:()=>u,Id:()=>b,P4:()=>d,Qy:()=>c,Vz:()=>v,Xx:()=>P,c4:()=>a,iH:()=>h,mb:()=>y,rO:()=>l,re:()=>p});var o=i(497),a=function randIntRange(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Math.round((0,o.M)()*(t-r)+r)},u=function randFloatRange(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return(0,o.M)()*(t-r)+r},l=function randInt(t){return Math.round((0,o.M)()*(2*t)-t)},c=function randFloat(t){return(0,o.M)()*(2*t)-t},p=function wrap(t,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return t<i?r:t>r?i:t},h=function floatString(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;if(t%1==0)return String(t);var i=Math.min(function countDecimals(t){for(var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:8,i=1,o=0;o<r;o++,i/=10)if(t%i==0)return o;return r}(t,r),r);return 0===i?String(Math.round(t)):t.toFixed(i)},y=function normalizeRadian(t){return(t+Math.PI)%(2*Math.PI)-Math.PI},d=function angleDiff(t,r){return(r-t+3*Math.PI)%(2*Math.PI)-Math.PI},v=function smallestAngleDiff(t,r){return Math.PI-Math.abs(Math.abs(t-r)-Math.PI)},m=function segmentValue(t,r,i){return(i-(arguments.length>3&&void 0!==arguments[3]?arguments[3]:0))/r*t},b=function degToRad(t){return t*Math.PI/180},P=function sign(t){return t<0?-1:1}},132:(t,r,i)=>{"use strict";i.d(r,{Bj:()=>h,CS:()=>u,S3:()=>p,iV:()=>y,mb:()=>c,zs:()=>l});var o=i(323),a=1e-6,u=function arcToPoints(t,r,i,a,u){return i%=2*Math.PI,a%=2*Math.PI,{start:new o.Z(u*Math.cos(i)+t,u*Math.sin(i)+r),end:new o.Z(u*Math.cos(a)+t,u*Math.sin(a)+r)}},l=function lineToPoints(){for(var t=3===arguments.length?arguments.length<=0?void 0:arguments[0]:new o.Z(arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1]),r=3===arguments.length?arguments.length<=1?void 0:arguments[1]:new o.Z(arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3]),i=3===arguments.length?arguments.length<=2?void 0:arguments[2]:arguments.length<=4?void 0:arguments[4],a=t.angleTo(r),u=t.distanceTo(r),l=[],c=1;c<i+1;c++){var p=t.clone().moveAlongAngle(a,u/(i+1)*c);l.push(p)}return l},c=function pointsToArc(t,r,i){t=t.clone(),r=r.clone(),i=i.clone();var o=Math.atan2(r.y-t.y,r.x-t.x),a=Math.atan2(i.y-t.y,i.x-t.x),u=t.subtract(r).magnitude();return a===o&&(a+=2*Math.PI),{start:o,end:a,radius:u}},p=function sameFloat(t,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a;if(Math.abs(t-r)<a)return!0;var o=Math.abs(t),u=Math.abs(r),l=Math.abs(t-r);return t==r||(0===t||0===r||l<Number.MIN_VALUE?l<i*Number.MIN_VALUE:l/(o+u)<i)},h=function samePos(t,r){return p(t.x,r.x)&&p(t.y,r.y)},y=function convertPointsToEdges(t){if(!h(t[0],t[t.length-1]))throw new Error("convertPointsToEdges: provided points aren't self-closing!");for(var r=[],i=1;i<t.length-1;i++)r.push([t[i-1],t[i]]);return r}},497:(t,r,i)=>{"use strict";i.d(r,{M:()=>c,b:()=>l});var o=123456789,a=987654321,u=4294967295,l=function seedRandom(t){o=123456789+t&u,a=987654321-t&u},c=function random(){return(((a=36969*(65535&a)+(a>>16)&u)<<16)+(65535&(o=18e3*(65535&o)+(o>>16)&u))>>>0)/4294967296};l(0)},486:function(t,r,i){var o;t=i.nmd(t),function(){var a,u="Expected a function",l="__lodash_hash_undefined__",c="__lodash_placeholder__",p=16,h=32,y=64,d=128,v=256,m=1/0,b=9007199254740991,P=NaN,_=4294967295,g=[["ary",d],["bind",1],["bindKey",2],["curry",8],["curryRight",p],["flip",512],["partial",h],["partialRight",y],["rearg",v]],x="[object Arguments]",w="[object Array]",I="[object Boolean]",C="[object Date]",O="[object Error]",S="[object Function]",T="[object GeneratorFunction]",A="[object Map]",E="[object Number]",L="[object Object]",k="[object Promise]",M="[object RegExp]",R="[object Set]",j="[object String]",N="[object Symbol]",B="[object WeakMap]",D="[object ArrayBuffer]",X="[object DataView]",Y="[object Float32Array]",Z="[object Float64Array]",z="[object Int8Array]",W="[object Int16Array]",V="[object Int32Array]",q="[object Uint8Array]",G="[object Uint8ClampedArray]",U="[object Uint16Array]",H="[object Uint32Array]",K=/\b__p \+= '';/g,J=/\b(__p \+=) '' \+/g,$=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Q=/&(?:amp|lt|gt|quot|#39);/g,tt=/[&<>"']/g,et=RegExp(Q.source),rt=RegExp(tt.source),nt=/<%-([\s\S]+?)%>/g,it=/<%([\s\S]+?)%>/g,ot=/<%=([\s\S]+?)%>/g,st=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,at=/^\w*$/,ut=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,lt=/[\\^$.*+?()[\]{}|]/g,ct=RegExp(lt.source),ft=/^\s+/,pt=/\s/,ht=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,yt=/\{\n\/\* \[wrapped with (.+)\] \*/,dt=/,? & /,vt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,mt=/[()=,{}\[\]\/\s]/,bt=/\\(\\)?/g,Pt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,_t=/\w*$/,gt=/^[-+]0x[0-9a-f]+$/i,xt=/^0b[01]+$/i,wt=/^\[object .+?Constructor\]$/,It=/^0o[0-7]+$/i,Ct=/^(?:0|[1-9]\d*)$/,Ot=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,St=/($^)/,Tt=/['\n\r\u2028\u2029\\]/g,At="\\ud800-\\udfff",Et="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Lt="\\u2700-\\u27bf",kt="a-z\\xdf-\\xf6\\xf8-\\xff",Mt="A-Z\\xc0-\\xd6\\xd8-\\xde",Rt="\\ufe0e\\ufe0f",jt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Nt="['’]",Bt="["+At+"]",Dt="["+jt+"]",Xt="["+Et+"]",Yt="\\d+",Ft="["+Lt+"]",Zt="["+kt+"]",zt="[^"+At+jt+Yt+Lt+kt+Mt+"]",Wt="\\ud83c[\\udffb-\\udfff]",Vt="[^"+At+"]",qt="(?:\\ud83c[\\udde6-\\uddff]){2}",Gt="[\\ud800-\\udbff][\\udc00-\\udfff]",Ut="["+Mt+"]",Ht="\\u200d",Kt="(?:"+Zt+"|"+zt+")",Jt="(?:"+Ut+"|"+zt+")",$t="(?:['’](?:d|ll|m|re|s|t|ve))?",Qt="(?:['’](?:D|LL|M|RE|S|T|VE))?",te="(?:"+Xt+"|"+Wt+")"+"?",ee="["+Rt+"]?",re=ee+te+("(?:"+Ht+"(?:"+[Vt,qt,Gt].join("|")+")"+ee+te+")*"),ne="(?:"+[Ft,qt,Gt].join("|")+")"+re,ie="(?:"+[Vt+Xt+"?",Xt,qt,Gt,Bt].join("|")+")",oe=RegExp(Nt,"g"),se=RegExp(Xt,"g"),ae=RegExp(Wt+"(?="+Wt+")|"+ie+re,"g"),ue=RegExp([Ut+"?"+Zt+"+"+$t+"(?="+[Dt,Ut,"$"].join("|")+")",Jt+"+"+Qt+"(?="+[Dt,Ut+Kt,"$"].join("|")+")",Ut+"?"+Kt+"+"+$t,Ut+"+"+Qt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Yt,ne].join("|"),"g"),le=RegExp("["+Ht+At+Et+Rt+"]"),ce=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,fe=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],pe=-1,he={};he[Y]=he[Z]=he[z]=he[W]=he[V]=he[q]=he[G]=he[U]=he[H]=!0,he[x]=he[w]=he[D]=he[I]=he[X]=he[C]=he[O]=he[S]=he[A]=he[E]=he[L]=he[M]=he[R]=he[j]=he[B]=!1;var ye={};ye[x]=ye[w]=ye[D]=ye[X]=ye[I]=ye[C]=ye[Y]=ye[Z]=ye[z]=ye[W]=ye[V]=ye[A]=ye[E]=ye[L]=ye[M]=ye[R]=ye[j]=ye[N]=ye[q]=ye[G]=ye[U]=ye[H]=!0,ye[O]=ye[S]=ye[B]=!1;var de={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ve=parseFloat,me=parseInt,be="object"==typeof i.g&&i.g&&i.g.Object===Object&&i.g,Pe="object"==typeof self&&self&&self.Object===Object&&self,_e=be||Pe||Function("return this")(),ge=r&&!r.nodeType&&r,xe=ge&&t&&!t.nodeType&&t,we=xe&&xe.exports===ge,Ie=we&&be.process,Ce=function(){try{var t=xe&&xe.require&&xe.require("util").types;return t||Ie&&Ie.binding&&Ie.binding("util")}catch(t){}}(),Oe=Ce&&Ce.isArrayBuffer,Se=Ce&&Ce.isDate,Te=Ce&&Ce.isMap,Ae=Ce&&Ce.isRegExp,Ee=Ce&&Ce.isSet,Le=Ce&&Ce.isTypedArray;function apply(t,r,i){switch(i.length){case 0:return t.call(r);case 1:return t.call(r,i[0]);case 2:return t.call(r,i[0],i[1]);case 3:return t.call(r,i[0],i[1],i[2])}return t.apply(r,i)}function arrayAggregator(t,r,i,o){for(var a=-1,u=null==t?0:t.length;++a<u;){var l=t[a];r(o,l,i(l),t)}return o}function arrayEach(t,r){for(var i=-1,o=null==t?0:t.length;++i<o&&!1!==r(t[i],i,t););return t}function arrayEachRight(t,r){for(var i=null==t?0:t.length;i--&&!1!==r(t[i],i,t););return t}function arrayEvery(t,r){for(var i=-1,o=null==t?0:t.length;++i<o;)if(!r(t[i],i,t))return!1;return!0}function arrayFilter(t,r){for(var i=-1,o=null==t?0:t.length,a=0,u=[];++i<o;){var l=t[i];r(l,i,t)&&(u[a++]=l)}return u}function arrayIncludes(t,r){return!!(null==t?0:t.length)&&baseIndexOf(t,r,0)>-1}function arrayIncludesWith(t,r,i){for(var o=-1,a=null==t?0:t.length;++o<a;)if(i(r,t[o]))return!0;return!1}function arrayMap(t,r){for(var i=-1,o=null==t?0:t.length,a=Array(o);++i<o;)a[i]=r(t[i],i,t);return a}function arrayPush(t,r){for(var i=-1,o=r.length,a=t.length;++i<o;)t[a+i]=r[i];return t}function arrayReduce(t,r,i,o){var a=-1,u=null==t?0:t.length;for(o&&u&&(i=t[++a]);++a<u;)i=r(i,t[a],a,t);return i}function arrayReduceRight(t,r,i,o){var a=null==t?0:t.length;for(o&&a&&(i=t[--a]);a--;)i=r(i,t[a],a,t);return i}function arraySome(t,r){for(var i=-1,o=null==t?0:t.length;++i<o;)if(r(t[i],i,t))return!0;return!1}var ke=baseProperty("length");function baseFindKey(t,r,i){var o;return i(t,(function(t,i,a){if(r(t,i,a))return o=i,!1})),o}function baseFindIndex(t,r,i,o){for(var a=t.length,u=i+(o?1:-1);o?u--:++u<a;)if(r(t[u],u,t))return u;return-1}function baseIndexOf(t,r,i){return r==r?function strictIndexOf(t,r,i){var o=i-1,a=t.length;for(;++o<a;)if(t[o]===r)return o;return-1}(t,r,i):baseFindIndex(t,baseIsNaN,i)}function baseIndexOfWith(t,r,i,o){for(var a=i-1,u=t.length;++a<u;)if(o(t[a],r))return a;return-1}function baseIsNaN(t){return t!=t}function baseMean(t,r){var i=null==t?0:t.length;return i?baseSum(t,r)/i:P}function baseProperty(t){return function(r){return null==r?a:r[t]}}function basePropertyOf(t){return function(r){return null==t?a:t[r]}}function baseReduce(t,r,i,o,a){return a(t,(function(t,a,u){i=o?(o=!1,t):r(i,t,a,u)})),i}function baseSum(t,r){for(var i,o=-1,u=t.length;++o<u;){var l=r(t[o]);l!==a&&(i=i===a?l:i+l)}return i}function baseTimes(t,r){for(var i=-1,o=Array(t);++i<t;)o[i]=r(i);return o}function baseTrim(t){return t?t.slice(0,trimmedEndIndex(t)+1).replace(ft,""):t}function baseUnary(t){return function(r){return t(r)}}function baseValues(t,r){return arrayMap(r,(function(r){return t[r]}))}function cacheHas(t,r){return t.has(r)}function charsStartIndex(t,r){for(var i=-1,o=t.length;++i<o&&baseIndexOf(r,t[i],0)>-1;);return i}function charsEndIndex(t,r){for(var i=t.length;i--&&baseIndexOf(r,t[i],0)>-1;);return i}var Me=basePropertyOf({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Re=basePropertyOf({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function escapeStringChar(t){return"\\"+de[t]}function hasUnicode(t){return le.test(t)}function mapToArray(t){var r=-1,i=Array(t.size);return t.forEach((function(t,o){i[++r]=[o,t]})),i}function overArg(t,r){return function(i){return t(r(i))}}function replaceHolders(t,r){for(var i=-1,o=t.length,a=0,u=[];++i<o;){var l=t[i];l!==r&&l!==c||(t[i]=c,u[a++]=i)}return u}function setToArray(t){var r=-1,i=Array(t.size);return t.forEach((function(t){i[++r]=t})),i}function setToPairs(t){var r=-1,i=Array(t.size);return t.forEach((function(t){i[++r]=[t,t]})),i}function stringSize(t){return hasUnicode(t)?function unicodeSize(t){var r=ae.lastIndex=0;for(;ae.test(t);)++r;return r}(t):ke(t)}function stringToArray(t){return hasUnicode(t)?function unicodeToArray(t){return t.match(ae)||[]}(t):function asciiToArray(t){return t.split("")}(t)}function trimmedEndIndex(t){for(var r=t.length;r--&&pt.test(t.charAt(r)););return r}var je=basePropertyOf({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Ne=function runInContext(t){var r,i=(t=null==t?_e:Ne.defaults(_e.Object(),t,Ne.pick(_e,fe))).Array,o=t.Date,pt=t.Error,At=t.Function,Et=t.Math,Lt=t.Object,kt=t.RegExp,Mt=t.String,Rt=t.TypeError,jt=i.prototype,Nt=At.prototype,Bt=Lt.prototype,Dt=t["__core-js_shared__"],Xt=Nt.toString,Yt=Bt.hasOwnProperty,Ft=0,Zt=(r=/[^.]+$/.exec(Dt&&Dt.keys&&Dt.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"",zt=Bt.toString,Wt=Xt.call(Lt),Vt=_e._,qt=kt("^"+Xt.call(Yt).replace(lt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Gt=we?t.Buffer:a,Ut=t.Symbol,Ht=t.Uint8Array,Kt=Gt?Gt.allocUnsafe:a,Jt=overArg(Lt.getPrototypeOf,Lt),$t=Lt.create,Qt=Bt.propertyIsEnumerable,te=jt.splice,ee=Ut?Ut.isConcatSpreadable:a,re=Ut?Ut.iterator:a,ne=Ut?Ut.toStringTag:a,ie=function(){try{var t=getNative(Lt,"defineProperty");return t({},"",{}),t}catch(t){}}(),ae=t.clearTimeout!==_e.clearTimeout&&t.clearTimeout,le=o&&o.now!==_e.Date.now&&o.now,de=t.setTimeout!==_e.setTimeout&&t.setTimeout,be=Et.ceil,Pe=Et.floor,ge=Lt.getOwnPropertySymbols,xe=Gt?Gt.isBuffer:a,Ie=t.isFinite,Ce=jt.join,ke=overArg(Lt.keys,Lt),Be=Et.max,De=Et.min,Xe=o.now,Ye=t.parseInt,Fe=Et.random,Ze=jt.reverse,ze=getNative(t,"DataView"),We=getNative(t,"Map"),Ve=getNative(t,"Promise"),qe=getNative(t,"Set"),Ge=getNative(t,"WeakMap"),Ue=getNative(Lt,"create"),He=Ge&&new Ge,Ke={},Je=toSource(ze),$e=toSource(We),Qe=toSource(Ve),tr=toSource(qe),er=toSource(Ge),rr=Ut?Ut.prototype:a,nr=rr?rr.valueOf:a,ir=rr?rr.toString:a;function lodash(t){if(isObjectLike(t)&&!ln(t)&&!(t instanceof LazyWrapper)){if(t instanceof LodashWrapper)return t;if(Yt.call(t,"__wrapped__"))return wrapperClone(t)}return new LodashWrapper(t)}var or=function(){function object(){}return function(t){if(!isObject(t))return{};if($t)return $t(t);object.prototype=t;var r=new object;return object.prototype=a,r}}();function baseLodash(){}function LodashWrapper(t,r){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!r,this.__index__=0,this.__values__=a}function LazyWrapper(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=_,this.__views__=[]}function Hash(t){var r=-1,i=null==t?0:t.length;for(this.clear();++r<i;){var o=t[r];this.set(o[0],o[1])}}function ListCache(t){var r=-1,i=null==t?0:t.length;for(this.clear();++r<i;){var o=t[r];this.set(o[0],o[1])}}function MapCache(t){var r=-1,i=null==t?0:t.length;for(this.clear();++r<i;){var o=t[r];this.set(o[0],o[1])}}function SetCache(t){var r=-1,i=null==t?0:t.length;for(this.__data__=new MapCache;++r<i;)this.add(t[r])}function Stack(t){var r=this.__data__=new ListCache(t);this.size=r.size}function arrayLikeKeys(t,r){var i=ln(t),o=!i&&un(t),a=!i&&!o&&fn(t),u=!i&&!o&&!a&&vn(t),l=i||o||a||u,c=l?baseTimes(t.length,Mt):[],p=c.length;for(var h in t)!r&&!Yt.call(t,h)||l&&("length"==h||a&&("offset"==h||"parent"==h)||u&&("buffer"==h||"byteLength"==h||"byteOffset"==h)||isIndex(h,p))||c.push(h);return c}function arraySample(t){var r=t.length;return r?t[baseRandom(0,r-1)]:a}function arraySampleSize(t,r){return shuffleSelf(copyArray(t),baseClamp(r,0,t.length))}function arrayShuffle(t){return shuffleSelf(copyArray(t))}function assignMergeValue(t,r,i){(i!==a&&!eq(t[r],i)||i===a&&!(r in t))&&baseAssignValue(t,r,i)}function assignValue(t,r,i){var o=t[r];Yt.call(t,r)&&eq(o,i)&&(i!==a||r in t)||baseAssignValue(t,r,i)}function assocIndexOf(t,r){for(var i=t.length;i--;)if(eq(t[i][0],r))return i;return-1}function baseAggregator(t,r,i,o){return sr(t,(function(t,a,u){r(o,t,i(t),u)})),o}function baseAssign(t,r){return t&&copyObject(r,keys(r),t)}function baseAssignValue(t,r,i){"__proto__"==r&&ie?ie(t,r,{configurable:!0,enumerable:!0,value:i,writable:!0}):t[r]=i}function baseAt(t,r){for(var o=-1,u=r.length,l=i(u),c=null==t;++o<u;)l[o]=c?a:get(t,r[o]);return l}function baseClamp(t,r,i){return t==t&&(i!==a&&(t=t<=i?t:i),r!==a&&(t=t>=r?t:r)),t}function baseClone(t,r,i,o,u,l){var c,p=1&r,h=2&r,y=4&r;if(i&&(c=u?i(t,o,u,l):i(t)),c!==a)return c;if(!isObject(t))return t;var d=ln(t);if(d){if(c=function initCloneArray(t){var r=t.length,i=new t.constructor(r);r&&"string"==typeof t[0]&&Yt.call(t,"index")&&(i.index=t.index,i.input=t.input);return i}(t),!p)return copyArray(t,c)}else{var v=br(t),m=v==S||v==T;if(fn(t))return cloneBuffer(t,p);if(v==L||v==x||m&&!u){if(c=h||m?{}:initCloneObject(t),!p)return h?function copySymbolsIn(t,r){return copyObject(t,mr(t),r)}(t,function baseAssignIn(t,r){return t&&copyObject(r,keysIn(r),t)}(c,t)):function copySymbols(t,r){return copyObject(t,vr(t),r)}(t,baseAssign(c,t))}else{if(!ye[v])return u?t:{};c=function initCloneByTag(t,r,i){var o=t.constructor;switch(r){case D:return cloneArrayBuffer(t);case I:case C:return new o(+t);case X:return function cloneDataView(t,r){var i=r?cloneArrayBuffer(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.byteLength)}(t,i);case Y:case Z:case z:case W:case V:case q:case G:case U:case H:return cloneTypedArray(t,i);case A:return new o;case E:case j:return new o(t);case M:return function cloneRegExp(t){var r=new t.constructor(t.source,_t.exec(t));return r.lastIndex=t.lastIndex,r}(t);case R:return new o;case N:return function cloneSymbol(t){return nr?Lt(nr.call(t)):{}}(t)}}(t,v,p)}}l||(l=new Stack);var b=l.get(t);if(b)return b;l.set(t,c),dn(t)?t.forEach((function(o){c.add(baseClone(o,r,i,o,t,l))})):hn(t)&&t.forEach((function(o,a){c.set(a,baseClone(o,r,i,a,t,l))}));var P=d?a:(y?h?getAllKeysIn:getAllKeys:h?keysIn:keys)(t);return arrayEach(P||t,(function(o,a){P&&(o=t[a=o]),assignValue(c,a,baseClone(o,r,i,a,t,l))})),c}function baseConformsTo(t,r,i){var o=i.length;if(null==t)return!o;for(t=Lt(t);o--;){var u=i[o],l=r[u],c=t[u];if(c===a&&!(u in t)||!l(c))return!1}return!0}function baseDelay(t,r,i){if("function"!=typeof t)throw new Rt(u);return gr((function(){t.apply(a,i)}),r)}function baseDifference(t,r,i,o){var a=-1,u=arrayIncludes,l=!0,c=t.length,p=[],h=r.length;if(!c)return p;i&&(r=arrayMap(r,baseUnary(i))),o?(u=arrayIncludesWith,l=!1):r.length>=200&&(u=cacheHas,l=!1,r=new SetCache(r));t:for(;++a<c;){var y=t[a],d=null==i?y:i(y);if(y=o||0!==y?y:0,l&&d==d){for(var v=h;v--;)if(r[v]===d)continue t;p.push(y)}else u(r,d,o)||p.push(y)}return p}lodash.templateSettings={escape:nt,evaluate:it,interpolate:ot,variable:"",imports:{_:lodash}},lodash.prototype=baseLodash.prototype,lodash.prototype.constructor=lodash,LodashWrapper.prototype=or(baseLodash.prototype),LodashWrapper.prototype.constructor=LodashWrapper,LazyWrapper.prototype=or(baseLodash.prototype),LazyWrapper.prototype.constructor=LazyWrapper,Hash.prototype.clear=function hashClear(){this.__data__=Ue?Ue(null):{},this.size=0},Hash.prototype.delete=function hashDelete(t){var r=this.has(t)&&delete this.__data__[t];return this.size-=r?1:0,r},Hash.prototype.get=function hashGet(t){var r=this.__data__;if(Ue){var i=r[t];return i===l?a:i}return Yt.call(r,t)?r[t]:a},Hash.prototype.has=function hashHas(t){var r=this.__data__;return Ue?r[t]!==a:Yt.call(r,t)},Hash.prototype.set=function hashSet(t,r){var i=this.__data__;return this.size+=this.has(t)?0:1,i[t]=Ue&&r===a?l:r,this},ListCache.prototype.clear=function listCacheClear(){this.__data__=[],this.size=0},ListCache.prototype.delete=function listCacheDelete(t){var r=this.__data__,i=assocIndexOf(r,t);return!(i<0)&&(i==r.length-1?r.pop():te.call(r,i,1),--this.size,!0)},ListCache.prototype.get=function listCacheGet(t){var r=this.__data__,i=assocIndexOf(r,t);return i<0?a:r[i][1]},ListCache.prototype.has=function listCacheHas(t){return assocIndexOf(this.__data__,t)>-1},ListCache.prototype.set=function listCacheSet(t,r){var i=this.__data__,o=assocIndexOf(i,t);return o<0?(++this.size,i.push([t,r])):i[o][1]=r,this},MapCache.prototype.clear=function mapCacheClear(){this.size=0,this.__data__={hash:new Hash,map:new(We||ListCache),string:new Hash}},MapCache.prototype.delete=function mapCacheDelete(t){var r=getMapData(this,t).delete(t);return this.size-=r?1:0,r},MapCache.prototype.get=function mapCacheGet(t){return getMapData(this,t).get(t)},MapCache.prototype.has=function mapCacheHas(t){return getMapData(this,t).has(t)},MapCache.prototype.set=function mapCacheSet(t,r){var i=getMapData(this,t),o=i.size;return i.set(t,r),this.size+=i.size==o?0:1,this},SetCache.prototype.add=SetCache.prototype.push=function setCacheAdd(t){return this.__data__.set(t,l),this},SetCache.prototype.has=function setCacheHas(t){return this.__data__.has(t)},Stack.prototype.clear=function stackClear(){this.__data__=new ListCache,this.size=0},Stack.prototype.delete=function stackDelete(t){var r=this.__data__,i=r.delete(t);return this.size=r.size,i},Stack.prototype.get=function stackGet(t){return this.__data__.get(t)},Stack.prototype.has=function stackHas(t){return this.__data__.has(t)},Stack.prototype.set=function stackSet(t,r){var i=this.__data__;if(i instanceof ListCache){var o=i.__data__;if(!We||o.length<199)return o.push([t,r]),this.size=++i.size,this;i=this.__data__=new MapCache(o)}return i.set(t,r),this.size=i.size,this};var sr=createBaseEach(baseForOwn),ar=createBaseEach(baseForOwnRight,!0);function baseEvery(t,r){var i=!0;return sr(t,(function(t,o,a){return i=!!r(t,o,a)})),i}function baseExtremum(t,r,i){for(var o=-1,u=t.length;++o<u;){var l=t[o],c=r(l);if(null!=c&&(p===a?c==c&&!isSymbol(c):i(c,p)))var p=c,h=l}return h}function baseFilter(t,r){var i=[];return sr(t,(function(t,o,a){r(t,o,a)&&i.push(t)})),i}function baseFlatten(t,r,i,o,a){var u=-1,l=t.length;for(i||(i=isFlattenable),a||(a=[]);++u<l;){var c=t[u];r>0&&i(c)?r>1?baseFlatten(c,r-1,i,o,a):arrayPush(a,c):o||(a[a.length]=c)}return a}var ur=createBaseFor(),lr=createBaseFor(!0);function baseForOwn(t,r){return t&&ur(t,r,keys)}function baseForOwnRight(t,r){return t&&lr(t,r,keys)}function baseFunctions(t,r){return arrayFilter(r,(function(r){return isFunction(t[r])}))}function baseGet(t,r){for(var i=0,o=(r=castPath(r,t)).length;null!=t&&i<o;)t=t[toKey(r[i++])];return i&&i==o?t:a}function baseGetAllKeys(t,r,i){var o=r(t);return ln(t)?o:arrayPush(o,i(t))}function baseGetTag(t){return null==t?t===a?"[object Undefined]":"[object Null]":ne&&ne in Lt(t)?function getRawTag(t){var r=Yt.call(t,ne),i=t[ne];try{t[ne]=a;var o=!0}catch(t){}var u=zt.call(t);o&&(r?t[ne]=i:delete t[ne]);return u}(t):function objectToString(t){return zt.call(t)}(t)}function baseGt(t,r){return t>r}function baseHas(t,r){return null!=t&&Yt.call(t,r)}function baseHasIn(t,r){return null!=t&&r in Lt(t)}function baseIntersection(t,r,o){for(var u=o?arrayIncludesWith:arrayIncludes,l=t[0].length,c=t.length,p=c,h=i(c),y=1/0,d=[];p--;){var v=t[p];p&&r&&(v=arrayMap(v,baseUnary(r))),y=De(v.length,y),h[p]=!o&&(r||l>=120&&v.length>=120)?new SetCache(p&&v):a}v=t[0];var m=-1,b=h[0];t:for(;++m<l&&d.length<y;){var P=v[m],_=r?r(P):P;if(P=o||0!==P?P:0,!(b?cacheHas(b,_):u(d,_,o))){for(p=c;--p;){var g=h[p];if(!(g?cacheHas(g,_):u(t[p],_,o)))continue t}b&&b.push(_),d.push(P)}}return d}function baseInvoke(t,r,i){var o=null==(t=parent(t,r=castPath(r,t)))?t:t[toKey(last(r))];return null==o?a:apply(o,t,i)}function baseIsArguments(t){return isObjectLike(t)&&baseGetTag(t)==x}function baseIsEqual(t,r,i,o,u){return t===r||(null==t||null==r||!isObjectLike(t)&&!isObjectLike(r)?t!=t&&r!=r:function baseIsEqualDeep(t,r,i,o,u,l){var c=ln(t),p=ln(r),h=c?w:br(t),y=p?w:br(r),d=(h=h==x?L:h)==L,v=(y=y==x?L:y)==L,m=h==y;if(m&&fn(t)){if(!fn(r))return!1;c=!0,d=!1}if(m&&!d)return l||(l=new Stack),c||vn(t)?equalArrays(t,r,i,o,u,l):function equalByTag(t,r,i,o,a,u,l){switch(i){case X:if(t.byteLength!=r.byteLength||t.byteOffset!=r.byteOffset)return!1;t=t.buffer,r=r.buffer;case D:return!(t.byteLength!=r.byteLength||!u(new Ht(t),new Ht(r)));case I:case C:case E:return eq(+t,+r);case O:return t.name==r.name&&t.message==r.message;case M:case j:return t==r+"";case A:var c=mapToArray;case R:var p=1&o;if(c||(c=setToArray),t.size!=r.size&&!p)return!1;var h=l.get(t);if(h)return h==r;o|=2,l.set(t,r);var y=equalArrays(c(t),c(r),o,a,u,l);return l.delete(t),y;case N:if(nr)return nr.call(t)==nr.call(r)}return!1}(t,r,h,i,o,u,l);if(!(1&i)){var b=d&&Yt.call(t,"__wrapped__"),P=v&&Yt.call(r,"__wrapped__");if(b||P){var _=b?t.value():t,g=P?r.value():r;return l||(l=new Stack),u(_,g,i,o,l)}}if(!m)return!1;return l||(l=new Stack),function equalObjects(t,r,i,o,u,l){var c=1&i,p=getAllKeys(t),h=p.length,y=getAllKeys(r),d=y.length;if(h!=d&&!c)return!1;var v=h;for(;v--;){var m=p[v];if(!(c?m in r:Yt.call(r,m)))return!1}var b=l.get(t),P=l.get(r);if(b&&P)return b==r&&P==t;var _=!0;l.set(t,r),l.set(r,t);var g=c;for(;++v<h;){var x=t[m=p[v]],w=r[m];if(o)var I=c?o(w,x,m,r,t,l):o(x,w,m,t,r,l);if(!(I===a?x===w||u(x,w,i,o,l):I)){_=!1;break}g||(g="constructor"==m)}if(_&&!g){var C=t.constructor,O=r.constructor;C==O||!("constructor"in t)||!("constructor"in r)||"function"==typeof C&&C instanceof C&&"function"==typeof O&&O instanceof O||(_=!1)}return l.delete(t),l.delete(r),_}(t,r,i,o,u,l)}(t,r,i,o,baseIsEqual,u))}function baseIsMatch(t,r,i,o){var u=i.length,l=u,c=!o;if(null==t)return!l;for(t=Lt(t);u--;){var p=i[u];if(c&&p[2]?p[1]!==t[p[0]]:!(p[0]in t))return!1}for(;++u<l;){var h=(p=i[u])[0],y=t[h],d=p[1];if(c&&p[2]){if(y===a&&!(h in t))return!1}else{var v=new Stack;if(o)var m=o(y,d,h,t,r,v);if(!(m===a?baseIsEqual(d,y,3,o,v):m))return!1}}return!0}function baseIsNative(t){return!(!isObject(t)||function isMasked(t){return!!Zt&&Zt in t}(t))&&(isFunction(t)?qt:wt).test(toSource(t))}function baseIteratee(t){return"function"==typeof t?t:null==t?identity:"object"==typeof t?ln(t)?baseMatchesProperty(t[0],t[1]):baseMatches(t):property(t)}function baseKeys(t){if(!isPrototype(t))return ke(t);var r=[];for(var i in Lt(t))Yt.call(t,i)&&"constructor"!=i&&r.push(i);return r}function baseKeysIn(t){if(!isObject(t))return function nativeKeysIn(t){var r=[];if(null!=t)for(var i in Lt(t))r.push(i);return r}(t);var r=isPrototype(t),i=[];for(var o in t)("constructor"!=o||!r&&Yt.call(t,o))&&i.push(o);return i}function baseLt(t,r){return t<r}function baseMap(t,r){var o=-1,a=isArrayLike(t)?i(t.length):[];return sr(t,(function(t,i,u){a[++o]=r(t,i,u)})),a}function baseMatches(t){var r=getMatchData(t);return 1==r.length&&r[0][2]?matchesStrictComparable(r[0][0],r[0][1]):function(i){return i===t||baseIsMatch(i,t,r)}}function baseMatchesProperty(t,r){return isKey(t)&&isStrictComparable(r)?matchesStrictComparable(toKey(t),r):function(i){var o=get(i,t);return o===a&&o===r?hasIn(i,t):baseIsEqual(r,o,3)}}function baseMerge(t,r,i,o,u){t!==r&&ur(r,(function(l,c){if(u||(u=new Stack),isObject(l))!function baseMergeDeep(t,r,i,o,u,l,c){var p=safeGet(t,i),h=safeGet(r,i),y=c.get(h);if(y)return void assignMergeValue(t,i,y);var d=l?l(p,h,i+"",t,r,c):a,v=d===a;if(v){var m=ln(h),b=!m&&fn(h),P=!m&&!b&&vn(h);d=h,m||b||P?ln(p)?d=p:isArrayLikeObject(p)?d=copyArray(p):b?(v=!1,d=cloneBuffer(h,!0)):P?(v=!1,d=cloneTypedArray(h,!0)):d=[]:isPlainObject(h)||un(h)?(d=p,un(p)?d=toPlainObject(p):isObject(p)&&!isFunction(p)||(d=initCloneObject(h))):v=!1}v&&(c.set(h,d),u(d,h,o,l,c),c.delete(h));assignMergeValue(t,i,d)}(t,r,c,i,baseMerge,o,u);else{var p=o?o(safeGet(t,c),l,c+"",t,r,u):a;p===a&&(p=l),assignMergeValue(t,c,p)}}),keysIn)}function baseNth(t,r){var i=t.length;if(i)return isIndex(r+=r<0?i:0,i)?t[r]:a}function baseOrderBy(t,r,i){r=r.length?arrayMap(r,(function(t){return ln(t)?function(r){return baseGet(r,1===t.length?t[0]:t)}:t})):[identity];var o=-1;r=arrayMap(r,baseUnary(getIteratee()));var a=baseMap(t,(function(t,i,a){var u=arrayMap(r,(function(r){return r(t)}));return{criteria:u,index:++o,value:t}}));return function baseSortBy(t,r){var i=t.length;for(t.sort(r);i--;)t[i]=t[i].value;return t}(a,(function(t,r){return function compareMultiple(t,r,i){var o=-1,a=t.criteria,u=r.criteria,l=a.length,c=i.length;for(;++o<l;){var p=compareAscending(a[o],u[o]);if(p)return o>=c?p:p*("desc"==i[o]?-1:1)}return t.index-r.index}(t,r,i)}))}function basePickBy(t,r,i){for(var o=-1,a=r.length,u={};++o<a;){var l=r[o],c=baseGet(t,l);i(c,l)&&baseSet(u,castPath(l,t),c)}return u}function basePullAll(t,r,i,o){var a=o?baseIndexOfWith:baseIndexOf,u=-1,l=r.length,c=t;for(t===r&&(r=copyArray(r)),i&&(c=arrayMap(t,baseUnary(i)));++u<l;)for(var p=0,h=r[u],y=i?i(h):h;(p=a(c,y,p,o))>-1;)c!==t&&te.call(c,p,1),te.call(t,p,1);return t}function basePullAt(t,r){for(var i=t?r.length:0,o=i-1;i--;){var a=r[i];if(i==o||a!==u){var u=a;isIndex(a)?te.call(t,a,1):baseUnset(t,a)}}return t}function baseRandom(t,r){return t+Pe(Fe()*(r-t+1))}function baseRepeat(t,r){var i="";if(!t||r<1||r>b)return i;do{r%2&&(i+=t),(r=Pe(r/2))&&(t+=t)}while(r);return i}function baseRest(t,r){return xr(overRest(t,r,identity),t+"")}function baseSample(t){return arraySample(values(t))}function baseSampleSize(t,r){var i=values(t);return shuffleSelf(i,baseClamp(r,0,i.length))}function baseSet(t,r,i,o){if(!isObject(t))return t;for(var u=-1,l=(r=castPath(r,t)).length,c=l-1,p=t;null!=p&&++u<l;){var h=toKey(r[u]),y=i;if("__proto__"===h||"constructor"===h||"prototype"===h)return t;if(u!=c){var d=p[h];(y=o?o(d,h,p):a)===a&&(y=isObject(d)?d:isIndex(r[u+1])?[]:{})}assignValue(p,h,y),p=p[h]}return t}var cr=He?function(t,r){return He.set(t,r),t}:identity,fr=ie?function(t,r){return ie(t,"toString",{configurable:!0,enumerable:!1,value:constant(r),writable:!0})}:identity;function baseShuffle(t){return shuffleSelf(values(t))}function baseSlice(t,r,o){var a=-1,u=t.length;r<0&&(r=-r>u?0:u+r),(o=o>u?u:o)<0&&(o+=u),u=r>o?0:o-r>>>0,r>>>=0;for(var l=i(u);++a<u;)l[a]=t[a+r];return l}function baseSome(t,r){var i;return sr(t,(function(t,o,a){return!(i=r(t,o,a))})),!!i}function baseSortedIndex(t,r,i){var o=0,a=null==t?o:t.length;if("number"==typeof r&&r==r&&a<=2147483647){for(;o<a;){var u=o+a>>>1,l=t[u];null!==l&&!isSymbol(l)&&(i?l<=r:l<r)?o=u+1:a=u}return a}return baseSortedIndexBy(t,r,identity,i)}function baseSortedIndexBy(t,r,i,o){var u=0,l=null==t?0:t.length;if(0===l)return 0;for(var c=(r=i(r))!=r,p=null===r,h=isSymbol(r),y=r===a;u<l;){var d=Pe((u+l)/2),v=i(t[d]),m=v!==a,b=null===v,P=v==v,_=isSymbol(v);if(c)var g=o||P;else g=y?P&&(o||m):p?P&&m&&(o||!b):h?P&&m&&!b&&(o||!_):!b&&!_&&(o?v<=r:v<r);g?u=d+1:l=d}return De(l,4294967294)}function baseSortedUniq(t,r){for(var i=-1,o=t.length,a=0,u=[];++i<o;){var l=t[i],c=r?r(l):l;if(!i||!eq(c,p)){var p=c;u[a++]=0===l?0:l}}return u}function baseToNumber(t){return"number"==typeof t?t:isSymbol(t)?P:+t}function baseToString(t){if("string"==typeof t)return t;if(ln(t))return arrayMap(t,baseToString)+"";if(isSymbol(t))return ir?ir.call(t):"";var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}function baseUniq(t,r,i){var o=-1,a=arrayIncludes,u=t.length,l=!0,c=[],p=c;if(i)l=!1,a=arrayIncludesWith;else if(u>=200){var h=r?null:yr(t);if(h)return setToArray(h);l=!1,a=cacheHas,p=new SetCache}else p=r?[]:c;t:for(;++o<u;){var y=t[o],d=r?r(y):y;if(y=i||0!==y?y:0,l&&d==d){for(var v=p.length;v--;)if(p[v]===d)continue t;r&&p.push(d),c.push(y)}else a(p,d,i)||(p!==c&&p.push(d),c.push(y))}return c}function baseUnset(t,r){return null==(t=parent(t,r=castPath(r,t)))||delete t[toKey(last(r))]}function baseUpdate(t,r,i,o){return baseSet(t,r,i(baseGet(t,r)),o)}function baseWhile(t,r,i,o){for(var a=t.length,u=o?a:-1;(o?u--:++u<a)&&r(t[u],u,t););return i?baseSlice(t,o?0:u,o?u+1:a):baseSlice(t,o?u+1:0,o?a:u)}function baseWrapperValue(t,r){var i=t;return i instanceof LazyWrapper&&(i=i.value()),arrayReduce(r,(function(t,r){return r.func.apply(r.thisArg,arrayPush([t],r.args))}),i)}function baseXor(t,r,o){var a=t.length;if(a<2)return a?baseUniq(t[0]):[];for(var u=-1,l=i(a);++u<a;)for(var c=t[u],p=-1;++p<a;)p!=u&&(l[u]=baseDifference(l[u]||c,t[p],r,o));return baseUniq(baseFlatten(l,1),r,o)}function baseZipObject(t,r,i){for(var o=-1,u=t.length,l=r.length,c={};++o<u;){var p=o<l?r[o]:a;i(c,t[o],p)}return c}function castArrayLikeObject(t){return isArrayLikeObject(t)?t:[]}function castFunction(t){return"function"==typeof t?t:identity}function castPath(t,r){return ln(t)?t:isKey(t,r)?[t]:wr(toString(t))}var pr=baseRest;function castSlice(t,r,i){var o=t.length;return i=i===a?o:i,!r&&i>=o?t:baseSlice(t,r,i)}var hr=ae||function(t){return _e.clearTimeout(t)};function cloneBuffer(t,r){if(r)return t.slice();var i=t.length,o=Kt?Kt(i):new t.constructor(i);return t.copy(o),o}function cloneArrayBuffer(t){var r=new t.constructor(t.byteLength);return new Ht(r).set(new Ht(t)),r}function cloneTypedArray(t,r){var i=r?cloneArrayBuffer(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}function compareAscending(t,r){if(t!==r){var i=t!==a,o=null===t,u=t==t,l=isSymbol(t),c=r!==a,p=null===r,h=r==r,y=isSymbol(r);if(!p&&!y&&!l&&t>r||l&&c&&h&&!p&&!y||o&&c&&h||!i&&h||!u)return 1;if(!o&&!l&&!y&&t<r||y&&i&&u&&!o&&!l||p&&i&&u||!c&&u||!h)return-1}return 0}function composeArgs(t,r,o,a){for(var u=-1,l=t.length,c=o.length,p=-1,h=r.length,y=Be(l-c,0),d=i(h+y),v=!a;++p<h;)d[p]=r[p];for(;++u<c;)(v||u<l)&&(d[o[u]]=t[u]);for(;y--;)d[p++]=t[u++];return d}function composeArgsRight(t,r,o,a){for(var u=-1,l=t.length,c=-1,p=o.length,h=-1,y=r.length,d=Be(l-p,0),v=i(d+y),m=!a;++u<d;)v[u]=t[u];for(var b=u;++h<y;)v[b+h]=r[h];for(;++c<p;)(m||u<l)&&(v[b+o[c]]=t[u++]);return v}function copyArray(t,r){var o=-1,a=t.length;for(r||(r=i(a));++o<a;)r[o]=t[o];return r}function copyObject(t,r,i,o){var u=!i;i||(i={});for(var l=-1,c=r.length;++l<c;){var p=r[l],h=o?o(i[p],t[p],p,i,t):a;h===a&&(h=t[p]),u?baseAssignValue(i,p,h):assignValue(i,p,h)}return i}function createAggregator(t,r){return function(i,o){var a=ln(i)?arrayAggregator:baseAggregator,u=r?r():{};return a(i,t,getIteratee(o,2),u)}}function createAssigner(t){return baseRest((function(r,i){var o=-1,u=i.length,l=u>1?i[u-1]:a,c=u>2?i[2]:a;for(l=t.length>3&&"function"==typeof l?(u--,l):a,c&&isIterateeCall(i[0],i[1],c)&&(l=u<3?a:l,u=1),r=Lt(r);++o<u;){var p=i[o];p&&t(r,p,o,l)}return r}))}function createBaseEach(t,r){return function(i,o){if(null==i)return i;if(!isArrayLike(i))return t(i,o);for(var a=i.length,u=r?a:-1,l=Lt(i);(r?u--:++u<a)&&!1!==o(l[u],u,l););return i}}function createBaseFor(t){return function(r,i,o){for(var a=-1,u=Lt(r),l=o(r),c=l.length;c--;){var p=l[t?c:++a];if(!1===i(u[p],p,u))break}return r}}function createCaseFirst(t){return function(r){var i=hasUnicode(r=toString(r))?stringToArray(r):a,o=i?i[0]:r.charAt(0),u=i?castSlice(i,1).join(""):r.slice(1);return o[t]()+u}}function createCompounder(t){return function(r){return arrayReduce(words(deburr(r).replace(oe,"")),t,"")}}function createCtor(t){return function(){var r=arguments;switch(r.length){case 0:return new t;case 1:return new t(r[0]);case 2:return new t(r[0],r[1]);case 3:return new t(r[0],r[1],r[2]);case 4:return new t(r[0],r[1],r[2],r[3]);case 5:return new t(r[0],r[1],r[2],r[3],r[4]);case 6:return new t(r[0],r[1],r[2],r[3],r[4],r[5]);case 7:return new t(r[0],r[1],r[2],r[3],r[4],r[5],r[6])}var i=or(t.prototype),o=t.apply(i,r);return isObject(o)?o:i}}function createFind(t){return function(r,i,o){var u=Lt(r);if(!isArrayLike(r)){var l=getIteratee(i,3);r=keys(r),i=function(t){return l(u[t],t,u)}}var c=t(r,i,o);return c>-1?u[l?r[c]:c]:a}}function createFlow(t){return flatRest((function(r){var i=r.length,o=i,l=LodashWrapper.prototype.thru;for(t&&r.reverse();o--;){var c=r[o];if("function"!=typeof c)throw new Rt(u);if(l&&!p&&"wrapper"==getFuncName(c))var p=new LodashWrapper([],!0)}for(o=p?o:i;++o<i;){var h=getFuncName(c=r[o]),y="wrapper"==h?dr(c):a;p=y&&isLaziable(y[0])&&424==y[1]&&!y[4].length&&1==y[9]?p[getFuncName(y[0])].apply(p,y[3]):1==c.length&&isLaziable(c)?p[h]():p.thru(c)}return function(){var t=arguments,o=t[0];if(p&&1==t.length&&ln(o))return p.plant(o).value();for(var a=0,u=i?r[a].apply(this,t):o;++a<i;)u=r[a].call(this,u);return u}}))}function createHybrid(t,r,o,u,l,c,p,h,y,v){var m=r&d,b=1&r,P=2&r,_=24&r,g=512&r,x=P?a:createCtor(t);return function wrapper(){for(var d=arguments.length,w=i(d),I=d;I--;)w[I]=arguments[I];if(_)var C=getHolder(wrapper),O=function countHolders(t,r){for(var i=t.length,o=0;i--;)t[i]===r&&++o;return o}(w,C);if(u&&(w=composeArgs(w,u,l,_)),c&&(w=composeArgsRight(w,c,p,_)),d-=O,_&&d<v){var S=replaceHolders(w,C);return createRecurry(t,r,createHybrid,wrapper.placeholder,o,w,S,h,y,v-d)}var T=b?o:this,A=P?T[t]:t;return d=w.length,h?w=function reorder(t,r){var i=t.length,o=De(r.length,i),u=copyArray(t);for(;o--;){var l=r[o];t[o]=isIndex(l,i)?u[l]:a}return t}(w,h):g&&d>1&&w.reverse(),m&&y<d&&(w.length=y),this&&this!==_e&&this instanceof wrapper&&(A=x||createCtor(A)),A.apply(T,w)}}function createInverter(t,r){return function(i,o){return function baseInverter(t,r,i,o){return baseForOwn(t,(function(t,a,u){r(o,i(t),a,u)})),o}(i,t,r(o),{})}}function createMathOperation(t,r){return function(i,o){var u;if(i===a&&o===a)return r;if(i!==a&&(u=i),o!==a){if(u===a)return o;"string"==typeof i||"string"==typeof o?(i=baseToString(i),o=baseToString(o)):(i=baseToNumber(i),o=baseToNumber(o)),u=t(i,o)}return u}}function createOver(t){return flatRest((function(r){return r=arrayMap(r,baseUnary(getIteratee())),baseRest((function(i){var o=this;return t(r,(function(t){return apply(t,o,i)}))}))}))}function createPadding(t,r){var i=(r=r===a?" ":baseToString(r)).length;if(i<2)return i?baseRepeat(r,t):r;var o=baseRepeat(r,be(t/stringSize(r)));return hasUnicode(r)?castSlice(stringToArray(o),0,t).join(""):o.slice(0,t)}function createRange(t){return function(r,o,u){return u&&"number"!=typeof u&&isIterateeCall(r,o,u)&&(o=u=a),r=toFinite(r),o===a?(o=r,r=0):o=toFinite(o),function baseRange(t,r,o,a){for(var u=-1,l=Be(be((r-t)/(o||1)),0),c=i(l);l--;)c[a?l:++u]=t,t+=o;return c}(r,o,u=u===a?r<o?1:-1:toFinite(u),t)}}function createRelationalOperation(t){return function(r,i){return"string"==typeof r&&"string"==typeof i||(r=toNumber(r),i=toNumber(i)),t(r,i)}}function createRecurry(t,r,i,o,u,l,c,p,d,v){var m=8&r;r|=m?h:y,4&(r&=~(m?y:h))||(r&=-4);var b=[t,r,u,m?l:a,m?c:a,m?a:l,m?a:c,p,d,v],P=i.apply(a,b);return isLaziable(t)&&_r(P,b),P.placeholder=o,setWrapToString(P,t,r)}function createRound(t){var r=Et[t];return function(t,i){if(t=toNumber(t),(i=null==i?0:De(toInteger(i),292))&&Ie(t)){var o=(toString(t)+"e").split("e");return+((o=(toString(r(o[0]+"e"+(+o[1]+i)))+"e").split("e"))[0]+"e"+(+o[1]-i))}return r(t)}}var yr=qe&&1/setToArray(new qe([,-0]))[1]==m?function(t){return new qe(t)}:noop;function createToPairs(t){return function(r){var i=br(r);return i==A?mapToArray(r):i==R?setToPairs(r):function baseToPairs(t,r){return arrayMap(r,(function(r){return[r,t[r]]}))}(r,t(r))}}function createWrap(t,r,o,l,m,b,P,_){var g=2&r;if(!g&&"function"!=typeof t)throw new Rt(u);var x=l?l.length:0;if(x||(r&=-97,l=m=a),P=P===a?P:Be(toInteger(P),0),_=_===a?_:toInteger(_),x-=m?m.length:0,r&y){var w=l,I=m;l=m=a}var C=g?a:dr(t),O=[t,r,o,l,m,w,I,b,P,_];if(C&&function mergeData(t,r){var i=t[1],o=r[1],a=i|o,u=a<131,l=o==d&&8==i||o==d&&i==v&&t[7].length<=r[8]||384==o&&r[7].length<=r[8]&&8==i;if(!u&&!l)return t;1&o&&(t[2]=r[2],a|=1&i?0:4);var p=r[3];if(p){var h=t[3];t[3]=h?composeArgs(h,p,r[4]):p,t[4]=h?replaceHolders(t[3],c):r[4]}(p=r[5])&&(h=t[5],t[5]=h?composeArgsRight(h,p,r[6]):p,t[6]=h?replaceHolders(t[5],c):r[6]);(p=r[7])&&(t[7]=p);o&d&&(t[8]=null==t[8]?r[8]:De(t[8],r[8]));null==t[9]&&(t[9]=r[9]);return t[0]=r[0],t[1]=a,t}(O,C),t=O[0],r=O[1],o=O[2],l=O[3],m=O[4],!(_=O[9]=O[9]===a?g?0:t.length:Be(O[9]-x,0))&&24&r&&(r&=-25),r&&1!=r)S=8==r||r==p?function createCurry(t,r,o){var u=createCtor(t);return function wrapper(){for(var l=arguments.length,c=i(l),p=l,h=getHolder(wrapper);p--;)c[p]=arguments[p];var y=l<3&&c[0]!==h&&c[l-1]!==h?[]:replaceHolders(c,h);return(l-=y.length)<o?createRecurry(t,r,createHybrid,wrapper.placeholder,a,c,y,a,a,o-l):apply(this&&this!==_e&&this instanceof wrapper?u:t,this,c)}}(t,r,_):r!=h&&33!=r||m.length?createHybrid.apply(a,O):function createPartial(t,r,o,a){var u=1&r,l=createCtor(t);return function wrapper(){for(var r=-1,c=arguments.length,p=-1,h=a.length,y=i(h+c),d=this&&this!==_e&&this instanceof wrapper?l:t;++p<h;)y[p]=a[p];for(;c--;)y[p++]=arguments[++r];return apply(d,u?o:this,y)}}(t,r,o,l);else var S=function createBind(t,r,i){var o=1&r,a=createCtor(t);return function wrapper(){return(this&&this!==_e&&this instanceof wrapper?a:t).apply(o?i:this,arguments)}}(t,r,o);return setWrapToString((C?cr:_r)(S,O),t,r)}function customDefaultsAssignIn(t,r,i,o){return t===a||eq(t,Bt[i])&&!Yt.call(o,i)?r:t}function customDefaultsMerge(t,r,i,o,u,l){return isObject(t)&&isObject(r)&&(l.set(r,t),baseMerge(t,r,a,customDefaultsMerge,l),l.delete(r)),t}function customOmitClone(t){return isPlainObject(t)?a:t}function equalArrays(t,r,i,o,u,l){var c=1&i,p=t.length,h=r.length;if(p!=h&&!(c&&h>p))return!1;var y=l.get(t),d=l.get(r);if(y&&d)return y==r&&d==t;var v=-1,m=!0,b=2&i?new SetCache:a;for(l.set(t,r),l.set(r,t);++v<p;){var P=t[v],_=r[v];if(o)var g=c?o(_,P,v,r,t,l):o(P,_,v,t,r,l);if(g!==a){if(g)continue;m=!1;break}if(b){if(!arraySome(r,(function(t,r){if(!cacheHas(b,r)&&(P===t||u(P,t,i,o,l)))return b.push(r)}))){m=!1;break}}else if(P!==_&&!u(P,_,i,o,l)){m=!1;break}}return l.delete(t),l.delete(r),m}function flatRest(t){return xr(overRest(t,a,flatten),t+"")}function getAllKeys(t){return baseGetAllKeys(t,keys,vr)}function getAllKeysIn(t){return baseGetAllKeys(t,keysIn,mr)}var dr=He?function(t){return He.get(t)}:noop;function getFuncName(t){for(var r=t.name+"",i=Ke[r],o=Yt.call(Ke,r)?i.length:0;o--;){var a=i[o],u=a.func;if(null==u||u==t)return a.name}return r}function getHolder(t){return(Yt.call(lodash,"placeholder")?lodash:t).placeholder}function getIteratee(){var t=lodash.iteratee||iteratee;return t=t===iteratee?baseIteratee:t,arguments.length?t(arguments[0],arguments[1]):t}function getMapData(t,r){var i=t.__data__;return function isKeyable(t){var r=typeof t;return"string"==r||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==t:null===t}(r)?i["string"==typeof r?"string":"hash"]:i.map}function getMatchData(t){for(var r=keys(t),i=r.length;i--;){var o=r[i],a=t[o];r[i]=[o,a,isStrictComparable(a)]}return r}function getNative(t,r){var i=function getValue(t,r){return null==t?a:t[r]}(t,r);return baseIsNative(i)?i:a}var vr=ge?function(t){return null==t?[]:(t=Lt(t),arrayFilter(ge(t),(function(r){return Qt.call(t,r)})))}:stubArray,mr=ge?function(t){for(var r=[];t;)arrayPush(r,vr(t)),t=Jt(t);return r}:stubArray,br=baseGetTag;function hasPath(t,r,i){for(var o=-1,a=(r=castPath(r,t)).length,u=!1;++o<a;){var l=toKey(r[o]);if(!(u=null!=t&&i(t,l)))break;t=t[l]}return u||++o!=a?u:!!(a=null==t?0:t.length)&&isLength(a)&&isIndex(l,a)&&(ln(t)||un(t))}function initCloneObject(t){return"function"!=typeof t.constructor||isPrototype(t)?{}:or(Jt(t))}function isFlattenable(t){return ln(t)||un(t)||!!(ee&&t&&t[ee])}function isIndex(t,r){var i=typeof t;return!!(r=null==r?b:r)&&("number"==i||"symbol"!=i&&Ct.test(t))&&t>-1&&t%1==0&&t<r}function isIterateeCall(t,r,i){if(!isObject(i))return!1;var o=typeof r;return!!("number"==o?isArrayLike(i)&&isIndex(r,i.length):"string"==o&&r in i)&&eq(i[r],t)}function isKey(t,r){if(ln(t))return!1;var i=typeof t;return!("number"!=i&&"symbol"!=i&&"boolean"!=i&&null!=t&&!isSymbol(t))||(at.test(t)||!st.test(t)||null!=r&&t in Lt(r))}function isLaziable(t){var r=getFuncName(t),i=lodash[r];if("function"!=typeof i||!(r in LazyWrapper.prototype))return!1;if(t===i)return!0;var o=dr(i);return!!o&&t===o[0]}(ze&&br(new ze(new ArrayBuffer(1)))!=X||We&&br(new We)!=A||Ve&&br(Ve.resolve())!=k||qe&&br(new qe)!=R||Ge&&br(new Ge)!=B)&&(br=function(t){var r=baseGetTag(t),i=r==L?t.constructor:a,o=i?toSource(i):"";if(o)switch(o){case Je:return X;case $e:return A;case Qe:return k;case tr:return R;case er:return B}return r});var Pr=Dt?isFunction:stubFalse;function isPrototype(t){var r=t&&t.constructor;return t===("function"==typeof r&&r.prototype||Bt)}function isStrictComparable(t){return t==t&&!isObject(t)}function matchesStrictComparable(t,r){return function(i){return null!=i&&(i[t]===r&&(r!==a||t in Lt(i)))}}function overRest(t,r,o){return r=Be(r===a?t.length-1:r,0),function(){for(var a=arguments,u=-1,l=Be(a.length-r,0),c=i(l);++u<l;)c[u]=a[r+u];u=-1;for(var p=i(r+1);++u<r;)p[u]=a[u];return p[r]=o(c),apply(t,this,p)}}function parent(t,r){return r.length<2?t:baseGet(t,baseSlice(r,0,-1))}function safeGet(t,r){if(("constructor"!==r||"function"!=typeof t[r])&&"__proto__"!=r)return t[r]}var _r=shortOut(cr),gr=de||function(t,r){return _e.setTimeout(t,r)},xr=shortOut(fr);function setWrapToString(t,r,i){var o=r+"";return xr(t,function insertWrapDetails(t,r){var i=r.length;if(!i)return t;var o=i-1;return r[o]=(i>1?"& ":"")+r[o],r=r.join(i>2?", ":" "),t.replace(ht,"{\n/* [wrapped with "+r+"] */\n")}(o,function updateWrapDetails(t,r){return arrayEach(g,(function(i){var o="_."+i[0];r&i[1]&&!arrayIncludes(t,o)&&t.push(o)})),t.sort()}(function getWrapDetails(t){var r=t.match(yt);return r?r[1].split(dt):[]}(o),i)))}function shortOut(t){var r=0,i=0;return function(){var o=Xe(),u=16-(o-i);if(i=o,u>0){if(++r>=800)return arguments[0]}else r=0;return t.apply(a,arguments)}}function shuffleSelf(t,r){var i=-1,o=t.length,u=o-1;for(r=r===a?o:r;++i<r;){var l=baseRandom(i,u),c=t[l];t[l]=t[i],t[i]=c}return t.length=r,t}var wr=function memoizeCapped(t){var r=memoize(t,(function(t){return 500===i.size&&i.clear(),t})),i=r.cache;return r}((function(t){var r=[];return 46===t.charCodeAt(0)&&r.push(""),t.replace(ut,(function(t,i,o,a){r.push(o?a.replace(bt,"$1"):i||t)})),r}));function toKey(t){if("string"==typeof t||isSymbol(t))return t;var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}function toSource(t){if(null!=t){try{return Xt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function wrapperClone(t){if(t instanceof LazyWrapper)return t.clone();var r=new LodashWrapper(t.__wrapped__,t.__chain__);return r.__actions__=copyArray(t.__actions__),r.__index__=t.__index__,r.__values__=t.__values__,r}var Ir=baseRest((function(t,r){return isArrayLikeObject(t)?baseDifference(t,baseFlatten(r,1,isArrayLikeObject,!0)):[]})),Cr=baseRest((function(t,r){var i=last(r);return isArrayLikeObject(i)&&(i=a),isArrayLikeObject(t)?baseDifference(t,baseFlatten(r,1,isArrayLikeObject,!0),getIteratee(i,2)):[]})),Or=baseRest((function(t,r){var i=last(r);return isArrayLikeObject(i)&&(i=a),isArrayLikeObject(t)?baseDifference(t,baseFlatten(r,1,isArrayLikeObject,!0),a,i):[]}));function findIndex(t,r,i){var o=null==t?0:t.length;if(!o)return-1;var a=null==i?0:toInteger(i);return a<0&&(a=Be(o+a,0)),baseFindIndex(t,getIteratee(r,3),a)}function findLastIndex(t,r,i){var o=null==t?0:t.length;if(!o)return-1;var u=o-1;return i!==a&&(u=toInteger(i),u=i<0?Be(o+u,0):De(u,o-1)),baseFindIndex(t,getIteratee(r,3),u,!0)}function flatten(t){return(null==t?0:t.length)?baseFlatten(t,1):[]}function head(t){return t&&t.length?t[0]:a}var Sr=baseRest((function(t){var r=arrayMap(t,castArrayLikeObject);return r.length&&r[0]===t[0]?baseIntersection(r):[]})),Tr=baseRest((function(t){var r=last(t),i=arrayMap(t,castArrayLikeObject);return r===last(i)?r=a:i.pop(),i.length&&i[0]===t[0]?baseIntersection(i,getIteratee(r,2)):[]})),Ar=baseRest((function(t){var r=last(t),i=arrayMap(t,castArrayLikeObject);return(r="function"==typeof r?r:a)&&i.pop(),i.length&&i[0]===t[0]?baseIntersection(i,a,r):[]}));function last(t){var r=null==t?0:t.length;return r?t[r-1]:a}var Er=baseRest(pullAll);function pullAll(t,r){return t&&t.length&&r&&r.length?basePullAll(t,r):t}var Lr=flatRest((function(t,r){var i=null==t?0:t.length,o=baseAt(t,r);return basePullAt(t,arrayMap(r,(function(t){return isIndex(t,i)?+t:t})).sort(compareAscending)),o}));function reverse(t){return null==t?t:Ze.call(t)}var kr=baseRest((function(t){return baseUniq(baseFlatten(t,1,isArrayLikeObject,!0))})),Mr=baseRest((function(t){var r=last(t);return isArrayLikeObject(r)&&(r=a),baseUniq(baseFlatten(t,1,isArrayLikeObject,!0),getIteratee(r,2))})),Rr=baseRest((function(t){var r=last(t);return r="function"==typeof r?r:a,baseUniq(baseFlatten(t,1,isArrayLikeObject,!0),a,r)}));function unzip(t){if(!t||!t.length)return[];var r=0;return t=arrayFilter(t,(function(t){if(isArrayLikeObject(t))return r=Be(t.length,r),!0})),baseTimes(r,(function(r){return arrayMap(t,baseProperty(r))}))}function unzipWith(t,r){if(!t||!t.length)return[];var i=unzip(t);return null==r?i:arrayMap(i,(function(t){return apply(r,a,t)}))}var jr=baseRest((function(t,r){return isArrayLikeObject(t)?baseDifference(t,r):[]})),Nr=baseRest((function(t){return baseXor(arrayFilter(t,isArrayLikeObject))})),Br=baseRest((function(t){var r=last(t);return isArrayLikeObject(r)&&(r=a),baseXor(arrayFilter(t,isArrayLikeObject),getIteratee(r,2))})),Dr=baseRest((function(t){var r=last(t);return r="function"==typeof r?r:a,baseXor(arrayFilter(t,isArrayLikeObject),a,r)})),Xr=baseRest(unzip);var Yr=baseRest((function(t){var r=t.length,i=r>1?t[r-1]:a;return i="function"==typeof i?(t.pop(),i):a,unzipWith(t,i)}));function chain(t){var r=lodash(t);return r.__chain__=!0,r}function thru(t,r){return r(t)}var Fr=flatRest((function(t){var r=t.length,i=r?t[0]:0,o=this.__wrapped__,interceptor=function(r){return baseAt(r,t)};return!(r>1||this.__actions__.length)&&o instanceof LazyWrapper&&isIndex(i)?((o=o.slice(i,+i+(r?1:0))).__actions__.push({func:thru,args:[interceptor],thisArg:a}),new LodashWrapper(o,this.__chain__).thru((function(t){return r&&!t.length&&t.push(a),t}))):this.thru(interceptor)}));var Zr=createAggregator((function(t,r,i){Yt.call(t,i)?++t[i]:baseAssignValue(t,i,1)}));var zr=createFind(findIndex),Wr=createFind(findLastIndex);function forEach(t,r){return(ln(t)?arrayEach:sr)(t,getIteratee(r,3))}function forEachRight(t,r){return(ln(t)?arrayEachRight:ar)(t,getIteratee(r,3))}var Vr=createAggregator((function(t,r,i){Yt.call(t,i)?t[i].push(r):baseAssignValue(t,i,[r])}));var qr=baseRest((function(t,r,o){var a=-1,u="function"==typeof r,l=isArrayLike(t)?i(t.length):[];return sr(t,(function(t){l[++a]=u?apply(r,t,o):baseInvoke(t,r,o)})),l})),Gr=createAggregator((function(t,r,i){baseAssignValue(t,i,r)}));function map(t,r){return(ln(t)?arrayMap:baseMap)(t,getIteratee(r,3))}var Ur=createAggregator((function(t,r,i){t[i?0:1].push(r)}),(function(){return[[],[]]}));var Hr=baseRest((function(t,r){if(null==t)return[];var i=r.length;return i>1&&isIterateeCall(t,r[0],r[1])?r=[]:i>2&&isIterateeCall(r[0],r[1],r[2])&&(r=[r[0]]),baseOrderBy(t,baseFlatten(r,1),[])})),Kr=le||function(){return _e.Date.now()};function ary(t,r,i){return r=i?a:r,r=t&&null==r?t.length:r,createWrap(t,d,a,a,a,a,r)}function before(t,r){var i;if("function"!=typeof r)throw new Rt(u);return t=toInteger(t),function(){return--t>0&&(i=r.apply(this,arguments)),t<=1&&(r=a),i}}var Jr=baseRest((function(t,r,i){var o=1;if(i.length){var a=replaceHolders(i,getHolder(Jr));o|=h}return createWrap(t,o,r,i,a)})),$r=baseRest((function(t,r,i){var o=3;if(i.length){var a=replaceHolders(i,getHolder($r));o|=h}return createWrap(r,o,t,i,a)}));function debounce(t,r,i){var o,l,c,p,h,y,d=0,v=!1,m=!1,b=!0;if("function"!=typeof t)throw new Rt(u);function invokeFunc(r){var i=o,u=l;return o=l=a,d=r,p=t.apply(u,i)}function shouldInvoke(t){var i=t-y;return y===a||i>=r||i<0||m&&t-d>=c}function timerExpired(){var t=Kr();if(shouldInvoke(t))return trailingEdge(t);h=gr(timerExpired,function remainingWait(t){var i=r-(t-y);return m?De(i,c-(t-d)):i}(t))}function trailingEdge(t){return h=a,b&&o?invokeFunc(t):(o=l=a,p)}function debounced(){var t=Kr(),i=shouldInvoke(t);if(o=arguments,l=this,y=t,i){if(h===a)return function leadingEdge(t){return d=t,h=gr(timerExpired,r),v?invokeFunc(t):p}(y);if(m)return hr(h),h=gr(timerExpired,r),invokeFunc(y)}return h===a&&(h=gr(timerExpired,r)),p}return r=toNumber(r)||0,isObject(i)&&(v=!!i.leading,c=(m="maxWait"in i)?Be(toNumber(i.maxWait)||0,r):c,b="trailing"in i?!!i.trailing:b),debounced.cancel=function cancel(){h!==a&&hr(h),d=0,o=y=l=h=a},debounced.flush=function flush(){return h===a?p:trailingEdge(Kr())},debounced}var Qr=baseRest((function(t,r){return baseDelay(t,1,r)})),tn=baseRest((function(t,r,i){return baseDelay(t,toNumber(r)||0,i)}));function memoize(t,r){if("function"!=typeof t||null!=r&&"function"!=typeof r)throw new Rt(u);var memoized=function(){var i=arguments,o=r?r.apply(this,i):i[0],a=memoized.cache;if(a.has(o))return a.get(o);var u=t.apply(this,i);return memoized.cache=a.set(o,u)||a,u};return memoized.cache=new(memoize.Cache||MapCache),memoized}function negate(t){if("function"!=typeof t)throw new Rt(u);return function(){var r=arguments;switch(r.length){case 0:return!t.call(this);case 1:return!t.call(this,r[0]);case 2:return!t.call(this,r[0],r[1]);case 3:return!t.call(this,r[0],r[1],r[2])}return!t.apply(this,r)}}memoize.Cache=MapCache;var en=pr((function(t,r){var i=(r=1==r.length&&ln(r[0])?arrayMap(r[0],baseUnary(getIteratee())):arrayMap(baseFlatten(r,1),baseUnary(getIteratee()))).length;return baseRest((function(o){for(var a=-1,u=De(o.length,i);++a<u;)o[a]=r[a].call(this,o[a]);return apply(t,this,o)}))})),rn=baseRest((function(t,r){var i=replaceHolders(r,getHolder(rn));return createWrap(t,h,a,r,i)})),nn=baseRest((function(t,r){var i=replaceHolders(r,getHolder(nn));return createWrap(t,y,a,r,i)})),on=flatRest((function(t,r){return createWrap(t,v,a,a,a,r)}));function eq(t,r){return t===r||t!=t&&r!=r}var sn=createRelationalOperation(baseGt),an=createRelationalOperation((function(t,r){return t>=r})),un=baseIsArguments(function(){return arguments}())?baseIsArguments:function(t){return isObjectLike(t)&&Yt.call(t,"callee")&&!Qt.call(t,"callee")},ln=i.isArray,cn=Oe?baseUnary(Oe):function baseIsArrayBuffer(t){return isObjectLike(t)&&baseGetTag(t)==D};function isArrayLike(t){return null!=t&&isLength(t.length)&&!isFunction(t)}function isArrayLikeObject(t){return isObjectLike(t)&&isArrayLike(t)}var fn=xe||stubFalse,pn=Se?baseUnary(Se):function baseIsDate(t){return isObjectLike(t)&&baseGetTag(t)==C};function isError(t){if(!isObjectLike(t))return!1;var r=baseGetTag(t);return r==O||"[object DOMException]"==r||"string"==typeof t.message&&"string"==typeof t.name&&!isPlainObject(t)}function isFunction(t){if(!isObject(t))return!1;var r=baseGetTag(t);return r==S||r==T||"[object AsyncFunction]"==r||"[object Proxy]"==r}function isInteger(t){return"number"==typeof t&&t==toInteger(t)}function isLength(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=b}function isObject(t){var r=typeof t;return null!=t&&("object"==r||"function"==r)}function isObjectLike(t){return null!=t&&"object"==typeof t}var hn=Te?baseUnary(Te):function baseIsMap(t){return isObjectLike(t)&&br(t)==A};function isNumber(t){return"number"==typeof t||isObjectLike(t)&&baseGetTag(t)==E}function isPlainObject(t){if(!isObjectLike(t)||baseGetTag(t)!=L)return!1;var r=Jt(t);if(null===r)return!0;var i=Yt.call(r,"constructor")&&r.constructor;return"function"==typeof i&&i instanceof i&&Xt.call(i)==Wt}var yn=Ae?baseUnary(Ae):function baseIsRegExp(t){return isObjectLike(t)&&baseGetTag(t)==M};var dn=Ee?baseUnary(Ee):function baseIsSet(t){return isObjectLike(t)&&br(t)==R};function isString(t){return"string"==typeof t||!ln(t)&&isObjectLike(t)&&baseGetTag(t)==j}function isSymbol(t){return"symbol"==typeof t||isObjectLike(t)&&baseGetTag(t)==N}var vn=Le?baseUnary(Le):function baseIsTypedArray(t){return isObjectLike(t)&&isLength(t.length)&&!!he[baseGetTag(t)]};var mn=createRelationalOperation(baseLt),bn=createRelationalOperation((function(t,r){return t<=r}));function toArray(t){if(!t)return[];if(isArrayLike(t))return isString(t)?stringToArray(t):copyArray(t);if(re&&t[re])return function iteratorToArray(t){for(var r,i=[];!(r=t.next()).done;)i.push(r.value);return i}(t[re]());var r=br(t);return(r==A?mapToArray:r==R?setToArray:values)(t)}function toFinite(t){return t?(t=toNumber(t))===m||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function toInteger(t){var r=toFinite(t),i=r%1;return r==r?i?r-i:r:0}function toLength(t){return t?baseClamp(toInteger(t),0,_):0}function toNumber(t){if("number"==typeof t)return t;if(isSymbol(t))return P;if(isObject(t)){var r="function"==typeof t.valueOf?t.valueOf():t;t=isObject(r)?r+"":r}if("string"!=typeof t)return 0===t?t:+t;t=baseTrim(t);var i=xt.test(t);return i||It.test(t)?me(t.slice(2),i?2:8):gt.test(t)?P:+t}function toPlainObject(t){return copyObject(t,keysIn(t))}function toString(t){return null==t?"":baseToString(t)}var Pn=createAssigner((function(t,r){if(isPrototype(r)||isArrayLike(r))copyObject(r,keys(r),t);else for(var i in r)Yt.call(r,i)&&assignValue(t,i,r[i])})),_n=createAssigner((function(t,r){copyObject(r,keysIn(r),t)})),gn=createAssigner((function(t,r,i,o){copyObject(r,keysIn(r),t,o)})),xn=createAssigner((function(t,r,i,o){copyObject(r,keys(r),t,o)})),wn=flatRest(baseAt);var In=baseRest((function(t,r){t=Lt(t);var i=-1,o=r.length,u=o>2?r[2]:a;for(u&&isIterateeCall(r[0],r[1],u)&&(o=1);++i<o;)for(var l=r[i],c=keysIn(l),p=-1,h=c.length;++p<h;){var y=c[p],d=t[y];(d===a||eq(d,Bt[y])&&!Yt.call(t,y))&&(t[y]=l[y])}return t})),Cn=baseRest((function(t){return t.push(a,customDefaultsMerge),apply(En,a,t)}));function get(t,r,i){var o=null==t?a:baseGet(t,r);return o===a?i:o}function hasIn(t,r){return null!=t&&hasPath(t,r,baseHasIn)}var On=createInverter((function(t,r,i){null!=r&&"function"!=typeof r.toString&&(r=zt.call(r)),t[r]=i}),constant(identity)),Sn=createInverter((function(t,r,i){null!=r&&"function"!=typeof r.toString&&(r=zt.call(r)),Yt.call(t,r)?t[r].push(i):t[r]=[i]}),getIteratee),Tn=baseRest(baseInvoke);function keys(t){return isArrayLike(t)?arrayLikeKeys(t):baseKeys(t)}function keysIn(t){return isArrayLike(t)?arrayLikeKeys(t,!0):baseKeysIn(t)}var An=createAssigner((function(t,r,i){baseMerge(t,r,i)})),En=createAssigner((function(t,r,i,o){baseMerge(t,r,i,o)})),Ln=flatRest((function(t,r){var i={};if(null==t)return i;var o=!1;r=arrayMap(r,(function(r){return r=castPath(r,t),o||(o=r.length>1),r})),copyObject(t,getAllKeysIn(t),i),o&&(i=baseClone(i,7,customOmitClone));for(var a=r.length;a--;)baseUnset(i,r[a]);return i}));var kn=flatRest((function(t,r){return null==t?{}:function basePick(t,r){return basePickBy(t,r,(function(r,i){return hasIn(t,i)}))}(t,r)}));function pickBy(t,r){if(null==t)return{};var i=arrayMap(getAllKeysIn(t),(function(t){return[t]}));return r=getIteratee(r),basePickBy(t,i,(function(t,i){return r(t,i[0])}))}var Mn=createToPairs(keys),Rn=createToPairs(keysIn);function values(t){return null==t?[]:baseValues(t,keys(t))}var jn=createCompounder((function(t,r,i){return r=r.toLowerCase(),t+(i?capitalize(r):r)}));function capitalize(t){return Zn(toString(t).toLowerCase())}function deburr(t){return(t=toString(t))&&t.replace(Ot,Me).replace(se,"")}var Nn=createCompounder((function(t,r,i){return t+(i?"-":"")+r.toLowerCase()})),Bn=createCompounder((function(t,r,i){return t+(i?" ":"")+r.toLowerCase()})),Dn=createCaseFirst("toLowerCase");var Xn=createCompounder((function(t,r,i){return t+(i?"_":"")+r.toLowerCase()}));var Yn=createCompounder((function(t,r,i){return t+(i?" ":"")+Zn(r)}));var Fn=createCompounder((function(t,r,i){return t+(i?" ":"")+r.toUpperCase()})),Zn=createCaseFirst("toUpperCase");function words(t,r,i){return t=toString(t),(r=i?a:r)===a?function hasUnicodeWord(t){return ce.test(t)}(t)?function unicodeWords(t){return t.match(ue)||[]}(t):function asciiWords(t){return t.match(vt)||[]}(t):t.match(r)||[]}var zn=baseRest((function(t,r){try{return apply(t,a,r)}catch(t){return isError(t)?t:new pt(t)}})),Wn=flatRest((function(t,r){return arrayEach(r,(function(r){r=toKey(r),baseAssignValue(t,r,Jr(t[r],t))})),t}));function constant(t){return function(){return t}}var Vn=createFlow(),qn=createFlow(!0);function identity(t){return t}function iteratee(t){return baseIteratee("function"==typeof t?t:baseClone(t,1))}var Gn=baseRest((function(t,r){return function(i){return baseInvoke(i,t,r)}})),Un=baseRest((function(t,r){return function(i){return baseInvoke(t,i,r)}}));function mixin(t,r,i){var o=keys(r),a=baseFunctions(r,o);null!=i||isObject(r)&&(a.length||!o.length)||(i=r,r=t,t=this,a=baseFunctions(r,keys(r)));var u=!(isObject(i)&&"chain"in i&&!i.chain),l=isFunction(t);return arrayEach(a,(function(i){var o=r[i];t[i]=o,l&&(t.prototype[i]=function(){var r=this.__chain__;if(u||r){var i=t(this.__wrapped__);return(i.__actions__=copyArray(this.__actions__)).push({func:o,args:arguments,thisArg:t}),i.__chain__=r,i}return o.apply(t,arrayPush([this.value()],arguments))})})),t}function noop(){}var Hn=createOver(arrayMap),Kn=createOver(arrayEvery),Jn=createOver(arraySome);function property(t){return isKey(t)?baseProperty(toKey(t)):function basePropertyDeep(t){return function(r){return baseGet(r,t)}}(t)}var $n=createRange(),Qn=createRange(!0);function stubArray(){return[]}function stubFalse(){return!1}var ti=createMathOperation((function(t,r){return t+r}),0),ei=createRound("ceil"),ri=createMathOperation((function(t,r){return t/r}),1),ni=createRound("floor");var ii,oi=createMathOperation((function(t,r){return t*r}),1),si=createRound("round"),ai=createMathOperation((function(t,r){return t-r}),0);return lodash.after=function after(t,r){if("function"!=typeof r)throw new Rt(u);return t=toInteger(t),function(){if(--t<1)return r.apply(this,arguments)}},lodash.ary=ary,lodash.assign=Pn,lodash.assignIn=_n,lodash.assignInWith=gn,lodash.assignWith=xn,lodash.at=wn,lodash.before=before,lodash.bind=Jr,lodash.bindAll=Wn,lodash.bindKey=$r,lodash.castArray=function castArray(){if(!arguments.length)return[];var t=arguments[0];return ln(t)?t:[t]},lodash.chain=chain,lodash.chunk=function chunk(t,r,o){r=(o?isIterateeCall(t,r,o):r===a)?1:Be(toInteger(r),0);var u=null==t?0:t.length;if(!u||r<1)return[];for(var l=0,c=0,p=i(be(u/r));l<u;)p[c++]=baseSlice(t,l,l+=r);return p},lodash.compact=function compact(t){for(var r=-1,i=null==t?0:t.length,o=0,a=[];++r<i;){var u=t[r];u&&(a[o++]=u)}return a},lodash.concat=function concat(){var t=arguments.length;if(!t)return[];for(var r=i(t-1),o=arguments[0],a=t;a--;)r[a-1]=arguments[a];return arrayPush(ln(o)?copyArray(o):[o],baseFlatten(r,1))},lodash.cond=function cond(t){var r=null==t?0:t.length,i=getIteratee();return t=r?arrayMap(t,(function(t){if("function"!=typeof t[1])throw new Rt(u);return[i(t[0]),t[1]]})):[],baseRest((function(i){for(var o=-1;++o<r;){var a=t[o];if(apply(a[0],this,i))return apply(a[1],this,i)}}))},lodash.conforms=function conforms(t){return function baseConforms(t){var r=keys(t);return function(i){return baseConformsTo(i,t,r)}}(baseClone(t,1))},lodash.constant=constant,lodash.countBy=Zr,lodash.create=function create(t,r){var i=or(t);return null==r?i:baseAssign(i,r)},lodash.curry=function curry(t,r,i){var o=createWrap(t,8,a,a,a,a,a,r=i?a:r);return o.placeholder=curry.placeholder,o},lodash.curryRight=function curryRight(t,r,i){var o=createWrap(t,p,a,a,a,a,a,r=i?a:r);return o.placeholder=curryRight.placeholder,o},lodash.debounce=debounce,lodash.defaults=In,lodash.defaultsDeep=Cn,lodash.defer=Qr,lodash.delay=tn,lodash.difference=Ir,lodash.differenceBy=Cr,lodash.differenceWith=Or,lodash.drop=function drop(t,r,i){var o=null==t?0:t.length;return o?baseSlice(t,(r=i||r===a?1:toInteger(r))<0?0:r,o):[]},lodash.dropRight=function dropRight(t,r,i){var o=null==t?0:t.length;return o?baseSlice(t,0,(r=o-(r=i||r===a?1:toInteger(r)))<0?0:r):[]},lodash.dropRightWhile=function dropRightWhile(t,r){return t&&t.length?baseWhile(t,getIteratee(r,3),!0,!0):[]},lodash.dropWhile=function dropWhile(t,r){return t&&t.length?baseWhile(t,getIteratee(r,3),!0):[]},lodash.fill=function fill(t,r,i,o){var u=null==t?0:t.length;return u?(i&&"number"!=typeof i&&isIterateeCall(t,r,i)&&(i=0,o=u),function baseFill(t,r,i,o){var u=t.length;for((i=toInteger(i))<0&&(i=-i>u?0:u+i),(o=o===a||o>u?u:toInteger(o))<0&&(o+=u),o=i>o?0:toLength(o);i<o;)t[i++]=r;return t}(t,r,i,o)):[]},lodash.filter=function filter(t,r){return(ln(t)?arrayFilter:baseFilter)(t,getIteratee(r,3))},lodash.flatMap=function flatMap(t,r){return baseFlatten(map(t,r),1)},lodash.flatMapDeep=function flatMapDeep(t,r){return baseFlatten(map(t,r),m)},lodash.flatMapDepth=function flatMapDepth(t,r,i){return i=i===a?1:toInteger(i),baseFlatten(map(t,r),i)},lodash.flatten=flatten,lodash.flattenDeep=function flattenDeep(t){return(null==t?0:t.length)?baseFlatten(t,m):[]},lodash.flattenDepth=function flattenDepth(t,r){return(null==t?0:t.length)?baseFlatten(t,r=r===a?1:toInteger(r)):[]},lodash.flip=function flip(t){return createWrap(t,512)},lodash.flow=Vn,lodash.flowRight=qn,lodash.fromPairs=function fromPairs(t){for(var r=-1,i=null==t?0:t.length,o={};++r<i;){var a=t[r];o[a[0]]=a[1]}return o},lodash.functions=function functions(t){return null==t?[]:baseFunctions(t,keys(t))},lodash.functionsIn=function functionsIn(t){return null==t?[]:baseFunctions(t,keysIn(t))},lodash.groupBy=Vr,lodash.initial=function initial(t){return(null==t?0:t.length)?baseSlice(t,0,-1):[]},lodash.intersection=Sr,lodash.intersectionBy=Tr,lodash.intersectionWith=Ar,lodash.invert=On,lodash.invertBy=Sn,lodash.invokeMap=qr,lodash.iteratee=iteratee,lodash.keyBy=Gr,lodash.keys=keys,lodash.keysIn=keysIn,lodash.map=map,lodash.mapKeys=function mapKeys(t,r){var i={};return r=getIteratee(r,3),baseForOwn(t,(function(t,o,a){baseAssignValue(i,r(t,o,a),t)})),i},lodash.mapValues=function mapValues(t,r){var i={};return r=getIteratee(r,3),baseForOwn(t,(function(t,o,a){baseAssignValue(i,o,r(t,o,a))})),i},lodash.matches=function matches(t){return baseMatches(baseClone(t,1))},lodash.matchesProperty=function matchesProperty(t,r){return baseMatchesProperty(t,baseClone(r,1))},lodash.memoize=memoize,lodash.merge=An,lodash.mergeWith=En,lodash.method=Gn,lodash.methodOf=Un,lodash.mixin=mixin,lodash.negate=negate,lodash.nthArg=function nthArg(t){return t=toInteger(t),baseRest((function(r){return baseNth(r,t)}))},lodash.omit=Ln,lodash.omitBy=function omitBy(t,r){return pickBy(t,negate(getIteratee(r)))},lodash.once=function once(t){return before(2,t)},lodash.orderBy=function orderBy(t,r,i,o){return null==t?[]:(ln(r)||(r=null==r?[]:[r]),ln(i=o?a:i)||(i=null==i?[]:[i]),baseOrderBy(t,r,i))},lodash.over=Hn,lodash.overArgs=en,lodash.overEvery=Kn,lodash.overSome=Jn,lodash.partial=rn,lodash.partialRight=nn,lodash.partition=Ur,lodash.pick=kn,lodash.pickBy=pickBy,lodash.property=property,lodash.propertyOf=function propertyOf(t){return function(r){return null==t?a:baseGet(t,r)}},lodash.pull=Er,lodash.pullAll=pullAll,lodash.pullAllBy=function pullAllBy(t,r,i){return t&&t.length&&r&&r.length?basePullAll(t,r,getIteratee(i,2)):t},lodash.pullAllWith=function pullAllWith(t,r,i){return t&&t.length&&r&&r.length?basePullAll(t,r,a,i):t},lodash.pullAt=Lr,lodash.range=$n,lodash.rangeRight=Qn,lodash.rearg=on,lodash.reject=function reject(t,r){return(ln(t)?arrayFilter:baseFilter)(t,negate(getIteratee(r,3)))},lodash.remove=function remove(t,r){var i=[];if(!t||!t.length)return i;var o=-1,a=[],u=t.length;for(r=getIteratee(r,3);++o<u;){var l=t[o];r(l,o,t)&&(i.push(l),a.push(o))}return basePullAt(t,a),i},lodash.rest=function rest(t,r){if("function"!=typeof t)throw new Rt(u);return baseRest(t,r=r===a?r:toInteger(r))},lodash.reverse=reverse,lodash.sampleSize=function sampleSize(t,r,i){return r=(i?isIterateeCall(t,r,i):r===a)?1:toInteger(r),(ln(t)?arraySampleSize:baseSampleSize)(t,r)},lodash.set=function set(t,r,i){return null==t?t:baseSet(t,r,i)},lodash.setWith=function setWith(t,r,i,o){return o="function"==typeof o?o:a,null==t?t:baseSet(t,r,i,o)},lodash.shuffle=function shuffle(t){return(ln(t)?arrayShuffle:baseShuffle)(t)},lodash.slice=function slice(t,r,i){var o=null==t?0:t.length;return o?(i&&"number"!=typeof i&&isIterateeCall(t,r,i)?(r=0,i=o):(r=null==r?0:toInteger(r),i=i===a?o:toInteger(i)),baseSlice(t,r,i)):[]},lodash.sortBy=Hr,lodash.sortedUniq=function sortedUniq(t){return t&&t.length?baseSortedUniq(t):[]},lodash.sortedUniqBy=function sortedUniqBy(t,r){return t&&t.length?baseSortedUniq(t,getIteratee(r,2)):[]},lodash.split=function split(t,r,i){return i&&"number"!=typeof i&&isIterateeCall(t,r,i)&&(r=i=a),(i=i===a?_:i>>>0)?(t=toString(t))&&("string"==typeof r||null!=r&&!yn(r))&&!(r=baseToString(r))&&hasUnicode(t)?castSlice(stringToArray(t),0,i):t.split(r,i):[]},lodash.spread=function spread(t,r){if("function"!=typeof t)throw new Rt(u);return r=null==r?0:Be(toInteger(r),0),baseRest((function(i){var o=i[r],a=castSlice(i,0,r);return o&&arrayPush(a,o),apply(t,this,a)}))},lodash.tail=function tail(t){var r=null==t?0:t.length;return r?baseSlice(t,1,r):[]},lodash.take=function take(t,r,i){return t&&t.length?baseSlice(t,0,(r=i||r===a?1:toInteger(r))<0?0:r):[]},lodash.takeRight=function takeRight(t,r,i){var o=null==t?0:t.length;return o?baseSlice(t,(r=o-(r=i||r===a?1:toInteger(r)))<0?0:r,o):[]},lodash.takeRightWhile=function takeRightWhile(t,r){return t&&t.length?baseWhile(t,getIteratee(r,3),!1,!0):[]},lodash.takeWhile=function takeWhile(t,r){return t&&t.length?baseWhile(t,getIteratee(r,3)):[]},lodash.tap=function tap(t,r){return r(t),t},lodash.throttle=function throttle(t,r,i){var o=!0,a=!0;if("function"!=typeof t)throw new Rt(u);return isObject(i)&&(o="leading"in i?!!i.leading:o,a="trailing"in i?!!i.trailing:a),debounce(t,r,{leading:o,maxWait:r,trailing:a})},lodash.thru=thru,lodash.toArray=toArray,lodash.toPairs=Mn,lodash.toPairsIn=Rn,lodash.toPath=function toPath(t){return ln(t)?arrayMap(t,toKey):isSymbol(t)?[t]:copyArray(wr(toString(t)))},lodash.toPlainObject=toPlainObject,lodash.transform=function transform(t,r,i){var o=ln(t),a=o||fn(t)||vn(t);if(r=getIteratee(r,4),null==i){var u=t&&t.constructor;i=a?o?new u:[]:isObject(t)&&isFunction(u)?or(Jt(t)):{}}return(a?arrayEach:baseForOwn)(t,(function(t,o,a){return r(i,t,o,a)})),i},lodash.unary=function unary(t){return ary(t,1)},lodash.union=kr,lodash.unionBy=Mr,lodash.unionWith=Rr,lodash.uniq=function uniq(t){return t&&t.length?baseUniq(t):[]},lodash.uniqBy=function uniqBy(t,r){return t&&t.length?baseUniq(t,getIteratee(r,2)):[]},lodash.uniqWith=function uniqWith(t,r){return r="function"==typeof r?r:a,t&&t.length?baseUniq(t,a,r):[]},lodash.unset=function unset(t,r){return null==t||baseUnset(t,r)},lodash.unzip=unzip,lodash.unzipWith=unzipWith,lodash.update=function update(t,r,i){return null==t?t:baseUpdate(t,r,castFunction(i))},lodash.updateWith=function updateWith(t,r,i,o){return o="function"==typeof o?o:a,null==t?t:baseUpdate(t,r,castFunction(i),o)},lodash.values=values,lodash.valuesIn=function valuesIn(t){return null==t?[]:baseValues(t,keysIn(t))},lodash.without=jr,lodash.words=words,lodash.wrap=function wrap(t,r){return rn(castFunction(r),t)},lodash.xor=Nr,lodash.xorBy=Br,lodash.xorWith=Dr,lodash.zip=Xr,lodash.zipObject=function zipObject(t,r){return baseZipObject(t||[],r||[],assignValue)},lodash.zipObjectDeep=function zipObjectDeep(t,r){return baseZipObject(t||[],r||[],baseSet)},lodash.zipWith=Yr,lodash.entries=Mn,lodash.entriesIn=Rn,lodash.extend=_n,lodash.extendWith=gn,mixin(lodash,lodash),lodash.add=ti,lodash.attempt=zn,lodash.camelCase=jn,lodash.capitalize=capitalize,lodash.ceil=ei,lodash.clamp=function clamp(t,r,i){return i===a&&(i=r,r=a),i!==a&&(i=(i=toNumber(i))==i?i:0),r!==a&&(r=(r=toNumber(r))==r?r:0),baseClamp(toNumber(t),r,i)},lodash.clone=function clone(t){return baseClone(t,4)},lodash.cloneDeep=function cloneDeep(t){return baseClone(t,5)},lodash.cloneDeepWith=function cloneDeepWith(t,r){return baseClone(t,5,r="function"==typeof r?r:a)},lodash.cloneWith=function cloneWith(t,r){return baseClone(t,4,r="function"==typeof r?r:a)},lodash.conformsTo=function conformsTo(t,r){return null==r||baseConformsTo(t,r,keys(r))},lodash.deburr=deburr,lodash.defaultTo=function defaultTo(t,r){return null==t||t!=t?r:t},lodash.divide=ri,lodash.endsWith=function endsWith(t,r,i){t=toString(t),r=baseToString(r);var o=t.length,u=i=i===a?o:baseClamp(toInteger(i),0,o);return(i-=r.length)>=0&&t.slice(i,u)==r},lodash.eq=eq,lodash.escape=function escape(t){return(t=toString(t))&&rt.test(t)?t.replace(tt,Re):t},lodash.escapeRegExp=function escapeRegExp(t){return(t=toString(t))&&ct.test(t)?t.replace(lt,"\\$&"):t},lodash.every=function every(t,r,i){var o=ln(t)?arrayEvery:baseEvery;return i&&isIterateeCall(t,r,i)&&(r=a),o(t,getIteratee(r,3))},lodash.find=zr,lodash.findIndex=findIndex,lodash.findKey=function findKey(t,r){return baseFindKey(t,getIteratee(r,3),baseForOwn)},lodash.findLast=Wr,lodash.findLastIndex=findLastIndex,lodash.findLastKey=function findLastKey(t,r){return baseFindKey(t,getIteratee(r,3),baseForOwnRight)},lodash.floor=ni,lodash.forEach=forEach,lodash.forEachRight=forEachRight,lodash.forIn=function forIn(t,r){return null==t?t:ur(t,getIteratee(r,3),keysIn)},lodash.forInRight=function forInRight(t,r){return null==t?t:lr(t,getIteratee(r,3),keysIn)},lodash.forOwn=function forOwn(t,r){return t&&baseForOwn(t,getIteratee(r,3))},lodash.forOwnRight=function forOwnRight(t,r){return t&&baseForOwnRight(t,getIteratee(r,3))},lodash.get=get,lodash.gt=sn,lodash.gte=an,lodash.has=function has(t,r){return null!=t&&hasPath(t,r,baseHas)},lodash.hasIn=hasIn,lodash.head=head,lodash.identity=identity,lodash.includes=function includes(t,r,i,o){t=isArrayLike(t)?t:values(t),i=i&&!o?toInteger(i):0;var a=t.length;return i<0&&(i=Be(a+i,0)),isString(t)?i<=a&&t.indexOf(r,i)>-1:!!a&&baseIndexOf(t,r,i)>-1},lodash.indexOf=function indexOf(t,r,i){var o=null==t?0:t.length;if(!o)return-1;var a=null==i?0:toInteger(i);return a<0&&(a=Be(o+a,0)),baseIndexOf(t,r,a)},lodash.inRange=function inRange(t,r,i){return r=toFinite(r),i===a?(i=r,r=0):i=toFinite(i),function baseInRange(t,r,i){return t>=De(r,i)&&t<Be(r,i)}(t=toNumber(t),r,i)},lodash.invoke=Tn,lodash.isArguments=un,lodash.isArray=ln,lodash.isArrayBuffer=cn,lodash.isArrayLike=isArrayLike,lodash.isArrayLikeObject=isArrayLikeObject,lodash.isBoolean=function isBoolean(t){return!0===t||!1===t||isObjectLike(t)&&baseGetTag(t)==I},lodash.isBuffer=fn,lodash.isDate=pn,lodash.isElement=function isElement(t){return isObjectLike(t)&&1===t.nodeType&&!isPlainObject(t)},lodash.isEmpty=function isEmpty(t){if(null==t)return!0;if(isArrayLike(t)&&(ln(t)||"string"==typeof t||"function"==typeof t.splice||fn(t)||vn(t)||un(t)))return!t.length;var r=br(t);if(r==A||r==R)return!t.size;if(isPrototype(t))return!baseKeys(t).length;for(var i in t)if(Yt.call(t,i))return!1;return!0},lodash.isEqual=function isEqual(t,r){return baseIsEqual(t,r)},lodash.isEqualWith=function isEqualWith(t,r,i){var o=(i="function"==typeof i?i:a)?i(t,r):a;return o===a?baseIsEqual(t,r,a,i):!!o},lodash.isError=isError,lodash.isFinite=function isFinite(t){return"number"==typeof t&&Ie(t)},lodash.isFunction=isFunction,lodash.isInteger=isInteger,lodash.isLength=isLength,lodash.isMap=hn,lodash.isMatch=function isMatch(t,r){return t===r||baseIsMatch(t,r,getMatchData(r))},lodash.isMatchWith=function isMatchWith(t,r,i){return i="function"==typeof i?i:a,baseIsMatch(t,r,getMatchData(r),i)},lodash.isNaN=function isNaN(t){return isNumber(t)&&t!=+t},lodash.isNative=function isNative(t){if(Pr(t))throw new pt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return baseIsNative(t)},lodash.isNil=function isNil(t){return null==t},lodash.isNull=function isNull(t){return null===t},lodash.isNumber=isNumber,lodash.isObject=isObject,lodash.isObjectLike=isObjectLike,lodash.isPlainObject=isPlainObject,lodash.isRegExp=yn,lodash.isSafeInteger=function isSafeInteger(t){return isInteger(t)&&t>=-9007199254740991&&t<=b},lodash.isSet=dn,lodash.isString=isString,lodash.isSymbol=isSymbol,lodash.isTypedArray=vn,lodash.isUndefined=function isUndefined(t){return t===a},lodash.isWeakMap=function isWeakMap(t){return isObjectLike(t)&&br(t)==B},lodash.isWeakSet=function isWeakSet(t){return isObjectLike(t)&&"[object WeakSet]"==baseGetTag(t)},lodash.join=function join(t,r){return null==t?"":Ce.call(t,r)},lodash.kebabCase=Nn,lodash.last=last,lodash.lastIndexOf=function lastIndexOf(t,r,i){var o=null==t?0:t.length;if(!o)return-1;var u=o;return i!==a&&(u=(u=toInteger(i))<0?Be(o+u,0):De(u,o-1)),r==r?function strictLastIndexOf(t,r,i){for(var o=i+1;o--;)if(t[o]===r)return o;return o}(t,r,u):baseFindIndex(t,baseIsNaN,u,!0)},lodash.lowerCase=Bn,lodash.lowerFirst=Dn,lodash.lt=mn,lodash.lte=bn,lodash.max=function max(t){return t&&t.length?baseExtremum(t,identity,baseGt):a},lodash.maxBy=function maxBy(t,r){return t&&t.length?baseExtremum(t,getIteratee(r,2),baseGt):a},lodash.mean=function mean(t){return baseMean(t,identity)},lodash.meanBy=function meanBy(t,r){return baseMean(t,getIteratee(r,2))},lodash.min=function min(t){return t&&t.length?baseExtremum(t,identity,baseLt):a},lodash.minBy=function minBy(t,r){return t&&t.length?baseExtremum(t,getIteratee(r,2),baseLt):a},lodash.stubArray=stubArray,lodash.stubFalse=stubFalse,lodash.stubObject=function stubObject(){return{}},lodash.stubString=function stubString(){return""},lodash.stubTrue=function stubTrue(){return!0},lodash.multiply=oi,lodash.nth=function nth(t,r){return t&&t.length?baseNth(t,toInteger(r)):a},lodash.noConflict=function noConflict(){return _e._===this&&(_e._=Vt),this},lodash.noop=noop,lodash.now=Kr,lodash.pad=function pad(t,r,i){t=toString(t);var o=(r=toInteger(r))?stringSize(t):0;if(!r||o>=r)return t;var a=(r-o)/2;return createPadding(Pe(a),i)+t+createPadding(be(a),i)},lodash.padEnd=function padEnd(t,r,i){t=toString(t);var o=(r=toInteger(r))?stringSize(t):0;return r&&o<r?t+createPadding(r-o,i):t},lodash.padStart=function padStart(t,r,i){t=toString(t);var o=(r=toInteger(r))?stringSize(t):0;return r&&o<r?createPadding(r-o,i)+t:t},lodash.parseInt=function parseInt(t,r,i){return i||null==r?r=0:r&&(r=+r),Ye(toString(t).replace(ft,""),r||0)},lodash.random=function random(t,r,i){if(i&&"boolean"!=typeof i&&isIterateeCall(t,r,i)&&(r=i=a),i===a&&("boolean"==typeof r?(i=r,r=a):"boolean"==typeof t&&(i=t,t=a)),t===a&&r===a?(t=0,r=1):(t=toFinite(t),r===a?(r=t,t=0):r=toFinite(r)),t>r){var o=t;t=r,r=o}if(i||t%1||r%1){var u=Fe();return De(t+u*(r-t+ve("1e-"+((u+"").length-1))),r)}return baseRandom(t,r)},lodash.reduce=function reduce(t,r,i){var o=ln(t)?arrayReduce:baseReduce,a=arguments.length<3;return o(t,getIteratee(r,4),i,a,sr)},lodash.reduceRight=function reduceRight(t,r,i){var o=ln(t)?arrayReduceRight:baseReduce,a=arguments.length<3;return o(t,getIteratee(r,4),i,a,ar)},lodash.repeat=function repeat(t,r,i){return r=(i?isIterateeCall(t,r,i):r===a)?1:toInteger(r),baseRepeat(toString(t),r)},lodash.replace=function replace(){var t=arguments,r=toString(t[0]);return t.length<3?r:r.replace(t[1],t[2])},lodash.result=function result(t,r,i){var o=-1,u=(r=castPath(r,t)).length;for(u||(u=1,t=a);++o<u;){var l=null==t?a:t[toKey(r[o])];l===a&&(o=u,l=i),t=isFunction(l)?l.call(t):l}return t},lodash.round=si,lodash.runInContext=runInContext,lodash.sample=function sample(t){return(ln(t)?arraySample:baseSample)(t)},lodash.size=function size(t){if(null==t)return 0;if(isArrayLike(t))return isString(t)?stringSize(t):t.length;var r=br(t);return r==A||r==R?t.size:baseKeys(t).length},lodash.snakeCase=Xn,lodash.some=function some(t,r,i){var o=ln(t)?arraySome:baseSome;return i&&isIterateeCall(t,r,i)&&(r=a),o(t,getIteratee(r,3))},lodash.sortedIndex=function sortedIndex(t,r){return baseSortedIndex(t,r)},lodash.sortedIndexBy=function sortedIndexBy(t,r,i){return baseSortedIndexBy(t,r,getIteratee(i,2))},lodash.sortedIndexOf=function sortedIndexOf(t,r){var i=null==t?0:t.length;if(i){var o=baseSortedIndex(t,r);if(o<i&&eq(t[o],r))return o}return-1},lodash.sortedLastIndex=function sortedLastIndex(t,r){return baseSortedIndex(t,r,!0)},lodash.sortedLastIndexBy=function sortedLastIndexBy(t,r,i){return baseSortedIndexBy(t,r,getIteratee(i,2),!0)},lodash.sortedLastIndexOf=function sortedLastIndexOf(t,r){if(null==t?0:t.length){var i=baseSortedIndex(t,r,!0)-1;if(eq(t[i],r))return i}return-1},lodash.startCase=Yn,lodash.startsWith=function startsWith(t,r,i){return t=toString(t),i=null==i?0:baseClamp(toInteger(i),0,t.length),r=baseToString(r),t.slice(i,i+r.length)==r},lodash.subtract=ai,lodash.sum=function sum(t){return t&&t.length?baseSum(t,identity):0},lodash.sumBy=function sumBy(t,r){return t&&t.length?baseSum(t,getIteratee(r,2)):0},lodash.template=function template(t,r,i){var o=lodash.templateSettings;i&&isIterateeCall(t,r,i)&&(r=a),t=toString(t),r=gn({},r,o,customDefaultsAssignIn);var u,l,c=gn({},r.imports,o.imports,customDefaultsAssignIn),p=keys(c),h=baseValues(c,p),y=0,d=r.interpolate||St,v="__p += '",m=kt((r.escape||St).source+"|"+d.source+"|"+(d===ot?Pt:St).source+"|"+(r.evaluate||St).source+"|$","g"),b="//# sourceURL="+(Yt.call(r,"sourceURL")?(r.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++pe+"]")+"\n";t.replace(m,(function(r,i,o,a,c,p){return o||(o=a),v+=t.slice(y,p).replace(Tt,escapeStringChar),i&&(u=!0,v+="' +\n__e("+i+") +\n'"),c&&(l=!0,v+="';\n"+c+";\n__p += '"),o&&(v+="' +\n((__t = ("+o+")) == null ? '' : __t) +\n'"),y=p+r.length,r})),v+="';\n";var P=Yt.call(r,"variable")&&r.variable;if(P){if(mt.test(P))throw new pt("Invalid `variable` option passed into `_.template`")}else v="with (obj) {\n"+v+"\n}\n";v=(l?v.replace(K,""):v).replace(J,"$1").replace($,"$1;"),v="function("+(P||"obj")+") {\n"+(P?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(u?", __e = _.escape":"")+(l?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+v+"return __p\n}";var _=zn((function(){return At(p,b+"return "+v).apply(a,h)}));if(_.source=v,isError(_))throw _;return _},lodash.times=function times(t,r){if((t=toInteger(t))<1||t>b)return[];var i=_,o=De(t,_);r=getIteratee(r),t-=_;for(var a=baseTimes(o,r);++i<t;)r(i);return a},lodash.toFinite=toFinite,lodash.toInteger=toInteger,lodash.toLength=toLength,lodash.toLower=function toLower(t){return toString(t).toLowerCase()},lodash.toNumber=toNumber,lodash.toSafeInteger=function toSafeInteger(t){return t?baseClamp(toInteger(t),-9007199254740991,b):0===t?t:0},lodash.toString=toString,lodash.toUpper=function toUpper(t){return toString(t).toUpperCase()},lodash.trim=function trim(t,r,i){if((t=toString(t))&&(i||r===a))return baseTrim(t);if(!t||!(r=baseToString(r)))return t;var o=stringToArray(t),u=stringToArray(r);return castSlice(o,charsStartIndex(o,u),charsEndIndex(o,u)+1).join("")},lodash.trimEnd=function trimEnd(t,r,i){if((t=toString(t))&&(i||r===a))return t.slice(0,trimmedEndIndex(t)+1);if(!t||!(r=baseToString(r)))return t;var o=stringToArray(t);return castSlice(o,0,charsEndIndex(o,stringToArray(r))+1).join("")},lodash.trimStart=function trimStart(t,r,i){if((t=toString(t))&&(i||r===a))return t.replace(ft,"");if(!t||!(r=baseToString(r)))return t;var o=stringToArray(t);return castSlice(o,charsStartIndex(o,stringToArray(r))).join("")},lodash.truncate=function truncate(t,r){var i=30,o="...";if(isObject(r)){var u="separator"in r?r.separator:u;i="length"in r?toInteger(r.length):i,o="omission"in r?baseToString(r.omission):o}var l=(t=toString(t)).length;if(hasUnicode(t)){var c=stringToArray(t);l=c.length}if(i>=l)return t;var p=i-stringSize(o);if(p<1)return o;var h=c?castSlice(c,0,p).join(""):t.slice(0,p);if(u===a)return h+o;if(c&&(p+=h.length-p),yn(u)){if(t.slice(p).search(u)){var y,d=h;for(u.global||(u=kt(u.source,toString(_t.exec(u))+"g")),u.lastIndex=0;y=u.exec(d);)var v=y.index;h=h.slice(0,v===a?p:v)}}else if(t.indexOf(baseToString(u),p)!=p){var m=h.lastIndexOf(u);m>-1&&(h=h.slice(0,m))}return h+o},lodash.unescape=function unescape(t){return(t=toString(t))&&et.test(t)?t.replace(Q,je):t},lodash.uniqueId=function uniqueId(t){var r=++Ft;return toString(t)+r},lodash.upperCase=Fn,lodash.upperFirst=Zn,lodash.each=forEach,lodash.eachRight=forEachRight,lodash.first=head,mixin(lodash,(ii={},baseForOwn(lodash,(function(t,r){Yt.call(lodash.prototype,r)||(ii[r]=t)})),ii),{chain:!1}),lodash.VERSION="4.17.21",arrayEach(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){lodash[t].placeholder=lodash})),arrayEach(["drop","take"],(function(t,r){LazyWrapper.prototype[t]=function(i){i=i===a?1:Be(toInteger(i),0);var o=this.__filtered__&&!r?new LazyWrapper(this):this.clone();return o.__filtered__?o.__takeCount__=De(i,o.__takeCount__):o.__views__.push({size:De(i,_),type:t+(o.__dir__<0?"Right":"")}),o},LazyWrapper.prototype[t+"Right"]=function(r){return this.reverse()[t](r).reverse()}})),arrayEach(["filter","map","takeWhile"],(function(t,r){var i=r+1,o=1==i||3==i;LazyWrapper.prototype[t]=function(t){var r=this.clone();return r.__iteratees__.push({iteratee:getIteratee(t,3),type:i}),r.__filtered__=r.__filtered__||o,r}})),arrayEach(["head","last"],(function(t,r){var i="take"+(r?"Right":"");LazyWrapper.prototype[t]=function(){return this[i](1).value()[0]}})),arrayEach(["initial","tail"],(function(t,r){var i="drop"+(r?"":"Right");LazyWrapper.prototype[t]=function(){return this.__filtered__?new LazyWrapper(this):this[i](1)}})),LazyWrapper.prototype.compact=function(){return this.filter(identity)},LazyWrapper.prototype.find=function(t){return this.filter(t).head()},LazyWrapper.prototype.findLast=function(t){return this.reverse().find(t)},LazyWrapper.prototype.invokeMap=baseRest((function(t,r){return"function"==typeof t?new LazyWrapper(this):this.map((function(i){return baseInvoke(i,t,r)}))})),LazyWrapper.prototype.reject=function(t){return this.filter(negate(getIteratee(t)))},LazyWrapper.prototype.slice=function(t,r){t=toInteger(t);var i=this;return i.__filtered__&&(t>0||r<0)?new LazyWrapper(i):(t<0?i=i.takeRight(-t):t&&(i=i.drop(t)),r!==a&&(i=(r=toInteger(r))<0?i.dropRight(-r):i.take(r-t)),i)},LazyWrapper.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},LazyWrapper.prototype.toArray=function(){return this.take(_)},baseForOwn(LazyWrapper.prototype,(function(t,r){var i=/^(?:filter|find|map|reject)|While$/.test(r),o=/^(?:head|last)$/.test(r),u=lodash[o?"take"+("last"==r?"Right":""):r],l=o||/^find/.test(r);u&&(lodash.prototype[r]=function(){var r=this.__wrapped__,c=o?[1]:arguments,p=r instanceof LazyWrapper,h=c[0],y=p||ln(r),interceptor=function(t){var r=u.apply(lodash,arrayPush([t],c));return o&&d?r[0]:r};y&&i&&"function"==typeof h&&1!=h.length&&(p=y=!1);var d=this.__chain__,v=!!this.__actions__.length,m=l&&!d,b=p&&!v;if(!l&&y){r=b?r:new LazyWrapper(this);var P=t.apply(r,c);return P.__actions__.push({func:thru,args:[interceptor],thisArg:a}),new LodashWrapper(P,d)}return m&&b?t.apply(this,c):(P=this.thru(interceptor),m?o?P.value()[0]:P.value():P)})})),arrayEach(["pop","push","shift","sort","splice","unshift"],(function(t){var r=jt[t],i=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",o=/^(?:pop|shift)$/.test(t);lodash.prototype[t]=function(){var t=arguments;if(o&&!this.__chain__){var a=this.value();return r.apply(ln(a)?a:[],t)}return this[i]((function(i){return r.apply(ln(i)?i:[],t)}))}})),baseForOwn(LazyWrapper.prototype,(function(t,r){var i=lodash[r];if(i){var o=i.name+"";Yt.call(Ke,o)||(Ke[o]=[]),Ke[o].push({name:r,func:i})}})),Ke[createHybrid(a,2).name]=[{name:"wrapper",func:a}],LazyWrapper.prototype.clone=function lazyClone(){var t=new LazyWrapper(this.__wrapped__);return t.__actions__=copyArray(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=copyArray(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=copyArray(this.__views__),t},LazyWrapper.prototype.reverse=function lazyReverse(){if(this.__filtered__){var t=new LazyWrapper(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},LazyWrapper.prototype.value=function lazyValue(){var t=this.__wrapped__.value(),r=this.__dir__,i=ln(t),o=r<0,a=i?t.length:0,u=function getView(t,r,i){var o=-1,a=i.length;for(;++o<a;){var u=i[o],l=u.size;switch(u.type){case"drop":t+=l;break;case"dropRight":r-=l;break;case"take":r=De(r,t+l);break;case"takeRight":t=Be(t,r-l)}}return{start:t,end:r}}(0,a,this.__views__),l=u.start,c=u.end,p=c-l,h=o?c:l-1,y=this.__iteratees__,d=y.length,v=0,m=De(p,this.__takeCount__);if(!i||!o&&a==p&&m==p)return baseWrapperValue(t,this.__actions__);var b=[];t:for(;p--&&v<m;){for(var P=-1,_=t[h+=r];++P<d;){var g=y[P],x=g.iteratee,w=g.type,I=x(_);if(2==w)_=I;else if(!I){if(1==w)continue t;break t}}b[v++]=_}return b},lodash.prototype.at=Fr,lodash.prototype.chain=function wrapperChain(){return chain(this)},lodash.prototype.commit=function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__)},lodash.prototype.next=function wrapperNext(){this.__values__===a&&(this.__values__=toArray(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?a:this.__values__[this.__index__++]}},lodash.prototype.plant=function wrapperPlant(t){for(var r,i=this;i instanceof baseLodash;){var o=wrapperClone(i);o.__index__=0,o.__values__=a,r?u.__wrapped__=o:r=o;var u=o;i=i.__wrapped__}return u.__wrapped__=t,r},lodash.prototype.reverse=function wrapperReverse(){var t=this.__wrapped__;if(t instanceof LazyWrapper){var r=t;return this.__actions__.length&&(r=new LazyWrapper(this)),(r=r.reverse()).__actions__.push({func:thru,args:[reverse],thisArg:a}),new LodashWrapper(r,this.__chain__)}return this.thru(reverse)},lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__)},lodash.prototype.first=lodash.prototype.head,re&&(lodash.prototype[re]=function wrapperToIterator(){return this}),lodash}();_e._=Ne,(o=function(){return Ne}.call(r,i,r,t))===a||(t.exports=o)}.call(this)}},r={};function __webpack_require__(i){var o=r[i];if(void 0!==o)return o.exports;var a=r[i]={id:i,loaded:!1,exports:{}};return t[i].call(a.exports,a,a.exports,__webpack_require__),a.loaded=!0,a.exports}__webpack_require__.n=t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(r,{a:r}),r},__webpack_require__.d=(t,r)=>{for(var i in r)__webpack_require__.o(r,i)&&!__webpack_require__.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),__webpack_require__.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t=__webpack_require__(323);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(a=o.key,u=void 0,u=function _toPrimitive(t,r){if("object"!==_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===_typeof(u)?u:String(u)),o)}var a,u}var r=function(){function Matrix(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Matrix),this.a=t,this.b=r,this.c=i,this.d=o,this.tx=a,this.ty=u}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Matrix,[{key:"clone",value:function clone(){return new Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty)}},{key:"concat",value:function concat(t){return new Matrix(this.a*t.a+this.c*t.b,this.b*t.a+this.d*t.b,this.a*t.c+this.c*t.d,this.b*t.c+this.d*t.d,this.a*t.tx+this.c*t.ty+this.tx,this.b*t.tx+this.d*t.ty+this.ty)}},{key:"deltaTransformPoint",value:function deltaTransformPoint(r){return new t.Z(this.a*r.x+this.c*r.y,this.b*r.x+this.d*r.y)}},{key:"inverse",value:function inverse(){var t=this.a*this.d-this.b*this.c;return new Matrix(this.d/t,-this.b/t,-this.c/t,this.a/t,(this.c*this.ty-this.d*this.tx)/t,(this.b*this.tx-this.a*this.ty)/t)}},{key:"rotate",value:function rotate(t,r){return this.concat(Matrix.rotation(t,r))}},{key:"scale",value:function scale(t,r,i){return this.concat(Matrix.scale(t,r,i))}},{key:"translate",value:function translate(t,r){return this.concat(Matrix.translation(t,r))}},{key:"transformPoint",value:function transformPoint(r){return new t.Z(this.a*r.x+this.c*r.y+this.tx,this.b*r.x+this.d*r.y+this.ty)}}],[{key:"translation",value:function translation(t,r){return new Matrix(1,0,0,1,t,r)}},{key:"scale",value:function scale(t,r,i){void 0===r&&(r=t);var o=new Matrix(t,0,0,r);return i&&(o=Matrix.translation(i.x,i.y).concat(o).concat(Matrix.translation(-i.x,-i.y))),o}},{key:"rotation",value:function rotation(t,r){var i=new Matrix(Math.cos(t),Math.sin(t),-Math.sin(t),Math.cos(t));return r&&(i=Matrix.translation(r.x,r.y).concat(i).concat(Matrix.translation(-r.x,-r.y))),i}}]),Matrix}(),i=__webpack_require__(563),o=__webpack_require__(132),a=__webpack_require__(73);function Motion_typeof(t){return Motion_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Motion_typeof(t)}function ownKeys(t,r){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),i.push.apply(i,o)}return i}function _objectSpread(t){for(var r=1;r<arguments.length;r++){var i=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(i),!0).forEach((function(r){_defineProperty(t,r,i[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):ownKeys(Object(i)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(i,r))}))}return t}function Motion_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,Motion_toPropertyKey(o.key),o)}}function _defineProperty(t,r,i){return(r=Motion_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function Motion_toPropertyKey(t){var r=function Motion_toPrimitive(t,r){if("object"!==Motion_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==Motion_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===Motion_typeof(r)?r:String(r)}var u=function(){function Motion(r){!function Motion_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Motion),_defineProperty(this,"position",new t.Z),this.ctx=r}return function Motion_createClass(t,r,i){return r&&Motion_defineProperties(t.prototype,r),i&&Motion_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Motion,[{key:"reset",value:function reset(){this.currentUnit=void 0,this.currentToolDiameter=void 0,this.currentSpeed=void 0,this.currentFeed=void 0,this.currentAtc=void 0,this.position=new t.Z}},{key:"retract",value:function retract(){this.ctx.driver.send("M03 S090")}},{key:"plunge",value:function plunge(){this.ctx.driver.send("M03 S070")}},{key:"zero",value:function zero(t){this.ctx.driver.zero(t)}},{key:"rapid",value:function rapid(t){var r=this.postProcess(t);r&&(this.ctx.driver.rapid(t),this.position=r)}},{key:"linear",value:function linear(t){var r=this.postProcess(t);r&&(this.ctx.driver.linear(t),this.position=r)}},{key:"arcCW",value:function arcCW(t){return this.arc(t,!1)}},{key:"arcCCW",value:function arcCCW(t){return this.arc(t,!0)}},{key:"arc",value:function arc(r){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=this.postProcess(_objectSpread(_objectSpread({},r),{},{z:this.position.z||0})),u=this.position.x+(r.i||0),l=this.position.y+(r.j||0),arc=(0,o.mb)(new t.Z(u,l),this.position,new t.Z(r.x,r.y)),c=arc.radius*(arc.end-arc.start)/(1/this.ctx.feed);(c=Math.round(1e6*c)/1e6)&&(r.f=Math.abs(c)),!i&&this.ctx.driver.arcCW?this.ctx.driver.arcCW(r):i&&this.ctx.driver.arcCCW?this.ctx.driver.arcCCW(r):this.interpolate("arc",[u,l,arc.radius,arc.start,arc.end,i],r.z||0),a&&(this.position=a)}},{key:"postProcess",value:function postProcess(r){this.ctx.driver.unit&&this.ctx.unit!=this.currentUnit&&(this.ctx.driver.unit(this.ctx.unit),this.currentUnit=this.ctx.unit),this.ctx.driver.meta&&this.ctx.toolDiameter!=this.currentToolDiameter&&(this.ctx.driver.meta({toolDiameter:this.ctx.toolDiameter}),this.currentToolDiameter=this.ctx.toolDiameter),this.ctx.driver.speed&&this.ctx.speed!=this.currentSpeed&&(this.ctx.driver.speed(this.ctx.speed),this.currentSpeed=this.ctx.speed),this.ctx.driver.feed&&this.ctx.feed!=this.currentFeed&&(this.ctx.driver.send("G93 (inverse time mode)"),this.currentFeed=this.ctx.feed);var i=new t.Z("x"in r?r.x:this.position.x,"y"in r?r.y:this.position.y,"z"in r?r.z:this.position.z,"a"in r?r.a:this.position.a),a=this.position,u=Math.sqrt(Math.pow(a.x-i.x,2)+Math.pow(a.y-i.y,2));if(!r.f){var l=u/(1/this.ctx.feed);(l=Math.round(1e6*l)/1e6)&&(r.f=Math.abs(l))}if((0,o.Bj)(this.position,i))return!1;for(var c in r){var p=c;"number"==typeof r[p]&&(r[p]=Math.round(1e5*r[p])/1e5)}return i}},{key:"interpolate",value:function interpolate(t,r,i){var o=new a.Z,u=o[t];"function"==typeof u&&u.apply(o,r);var l=0,c=o.getLength(),p=this.position.z;for(var h=o.getPoints(40),y=0,d=h.length;y<d;++y){var v=h[y],m=v.x-this.position.x,b=v.y-this.position.y;l+=Math.sqrt(m*m+b*b),this.linear({x:v.x,y:v.y,z:p+l/c*(i-p)})}}},{key:"followPath",value:function followPath(t,r){var i,u=this;if(!t)return!1;if("subPaths"in t)t.subPaths.forEach((function(t){u.followPath(t,r)}));else for(var l=this.position.z,c=t.getLength(),p=0,h=this,y=this.ctx,d=t.isClosed()&&0!=y.ramping,v=(_defineProperty(i={},"MOVE_TO",(function(){for(var t=arguments.length,i=new Array(t),a=0;a<t;a++)i[a]=arguments[a];var c=i[0],p=i[1],y=(0,o.S3)(c,u.position.x)&&(0,o.S3)(p,u.position.y);d&&y||(y||h.retract(),h.rapid({x:c,y:p}),y||h.plunge(),d||h.linear({z:r}),l=h.position.z)})),_defineProperty(i,"LINE_TO",(function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var o=r[0],a=r[1];h.linear({x:o,y:a,z:helix()})})),_defineProperty(i,"ELLIPSE",(function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var a=r[0],u=r[1],l=r[2],c=r[3],p=r[4],y=r[5],d=r[6];if((0,o.S3)(l,c)){var v=(0,o.CS)(a,u,p,y,l),m={x:v.end.x,y:v.end.y,i:a-v.start.x,j:u-v.start.y,z:helix()};h.arc(m,d)}else interpolate("ellipse",r)})),_defineProperty(i,"BEZIER_CURVE_TO",(function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];interpolate("bezierCurveTo",r)})),_defineProperty(i,"QUADRATIC_CURVE_TO",(function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];interpolate("quadraticCurveTo",r)})),i),m=0,b=t.actions.length;m<b;++m){var P=t.actions[m];if(0!=m){var _=this.position.x,g=this.position.y;p+=t.getActionLength(_,g,m)}v[P.type].apply(this,P.args)}function helix(){return d?0===c?0:l+(r-l)*(p/c):r}function interpolate(t,r){var i=new a.Z;i.moveTo(h.position.x,h.position.y);var o=i[t];"function"==typeof o&&o.apply(i,r);for(var u=i.getPoints(40),l=0,c=u.length;l<c;++l){var p=u[l];h.linear({x:p.x,y:p.y,z:helix()})}}}}]),Motion}();function Driver_typeof(t){return Driver_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Driver_typeof(t)}function Driver_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(a=o.key,u=void 0,u=function Driver_toPrimitive(t,r){if("object"!==Driver_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==Driver_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===Driver_typeof(u)?u:String(u)),o)}var a,u}var l=function(){function Driver(t){!function Driver_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Driver),this.stream=t||{write:function write(t){return console.log(t)},reset:function reset(){}}}return function Driver_createClass(t,r,i){return r&&Driver_defineProperties(t.prototype,r),i&&Driver_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Driver,[{key:"reset",value:function reset(){this.stream.reset()}},{key:"send",value:function send(){}},{key:"init",value:function init(){}},{key:"unit",value:function unit(t){}},{key:"speed",value:function speed(t){}},{key:"feed",value:function feed(t){}},{key:"coolant",value:function coolant(t){}},{key:"zero",value:function zero(t){}},{key:"atc",value:function atc(t){}},{key:"rapid",value:function rapid(t){}},{key:"linear",value:function linear(t){}},{key:"arcCW",value:function arcCW(t){}},{key:"arcCCW",value:function arcCCW(t){}},{key:"comment",value:function comment(t){}},{key:"meta",value:function meta(t){}}]),Driver}();function NullDriver_typeof(t){return NullDriver_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},NullDriver_typeof(t)}function NullDriver_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(a=o.key,u=void 0,u=function NullDriver_toPrimitive(t,r){if("object"!==NullDriver_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==NullDriver_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===NullDriver_typeof(u)?u:String(u)),o)}var a,u}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function _possibleConstructorReturn(t,r){if(r&&("object"===NullDriver_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(NullDriver,t);var r=_createSuper(NullDriver);function NullDriver(){return function NullDriver_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,NullDriver),r.apply(this,arguments)}return function NullDriver_createClass(t,r,i){return r&&NullDriver_defineProperties(t.prototype,r),i&&NullDriver_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(NullDriver)}(l);function GCanvas_typeof(t){return GCanvas_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},GCanvas_typeof(t)}function GCanvas_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,GCanvas_toPropertyKey(o.key),o)}}function GCanvas_defineProperty(t,r,i){return(r=GCanvas_toPropertyKey(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}function GCanvas_toPropertyKey(t){var r=function GCanvas_toPrimitive(t,r){if("object"!==GCanvas_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==GCanvas_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===GCanvas_typeof(r)?r:String(r)}var p=function(){function GCanvas(t){var i=this;!function GCanvas_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,GCanvas),GCanvas_defineProperty(this,"enableCutouts",!0),GCanvas_defineProperty(this,"precision",20),GCanvas_defineProperty(this,"align","center"),GCanvas_defineProperty(this,"ramping",!0),GCanvas_defineProperty(this,"depth",0),GCanvas_defineProperty(this,"depthOfCut",0),GCanvas_defineProperty(this,"retract",0),GCanvas_defineProperty(this,"speed",500),GCanvas_defineProperty(this,"feed",1e3),GCanvas_defineProperty(this,"act",0),GCanvas_defineProperty(this,"unit","mm"),GCanvas_defineProperty(this,"top",0),GCanvas_defineProperty(this,"toolDiameter",.15),GCanvas_defineProperty(this,"matrix",new r),GCanvas_defineProperty(this,"subPaths",[]),GCanvas_defineProperty(this,"filters",[]),GCanvas_defineProperty(this,"stack",[]),GCanvas_defineProperty(this,"pathHistory",[]),GCanvas_defineProperty(this,"_strokeStyle","#000000"),GCanvas_defineProperty(this,"_fillStyle","#000000"),GCanvas_defineProperty(this,"_font","7pt Helvetica"),GCanvas_defineProperty(this,"_background","#ffffff"),GCanvas_defineProperty(this,"rect",(function(){for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];var a=4===r.length&&!0===r[3]||5===r.length||!1,u=3===r.length||4===r.length&&!0===r[3]?r[0].x:r[0],l=3===r.length||4===r.length&&!0===r[3]?r[0].y:r[1],c=3===r.length||4===r.length&&!0===r[3]?r[1]:r[2],p=3===r.length||4===r.length&&!0===r[3]?r[2]:r[3];a&&i.cutoutRect(u,l,c,p),i.moveTo(u,l),i.lineTo(u+c,l),i.lineTo(u+c,l+p),i.lineTo(u,l+p),i.lineTo(u,l)})),GCanvas_defineProperty(this,"strokeRect",(function(){for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];var a=3===r.length||4===r.length&&"number"!=typeof r[3]?r[0].x:r[0],u=3===r.length||4===r.length&&"number"!=typeof r[3]?r[0].y:r[1],l=3===r.length||4===r.length&&"number"!=typeof r[3]?r[1]:r[2],c=3===r.length||4===r.length&&"number"!=typeof r[3]?r[2]:r[3],p=5===r.length?r[4]:4===r.length&&"number"!=typeof r[3]?r[3]:void 0;i.beginPath(),i.rect(a,u,l,c),i.stroke(p),i.closePath()})),GCanvas_defineProperty(this,"circle",(function(){for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];var a=2===r.length||3===r.length&&!0===r[2]?r[0].x:r[0],u=2===r.length||3===r.length&&!0===r[2]?r[0].y:r[1],l=2===r.length||3===r.length&&!0===r[2]?r[1]:r[2],c=3===r.length&&!0===r[2]||4===r.length||!1;i.arc(a,u,l,0,2*Math.PI,c)})),this.driver=t.driver||new c,this.motion=new u(this),this.canvasWidth=t.width,this.canvasHeight=t.height,this.virtualScale=t.virtualScale||1,t.canvas&&(this.canvasElement=t.canvas,this.ctx=this.canvasElement.getContext("2d")),t.output&&(this.outputElement=t.output),t.background&&(this._background=t.background),this.reset()}return function GCanvas_createClass(t,r,i){return r&&GCanvas_defineProperties(t.prototype,r),i&&GCanvas_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(GCanvas,[{key:"reset",value:function reset(){console.clear(),this.driver.reset(),this.motion.reset(),this.path=void 0,this.clipRegion=void 0,this.subPaths=[],this.filters=[],this.stack=[],this.matrix=new r,this.ctx&&(this.ctx.resetTransform(),this.setCtxTransform(this.matrix),this.ctx.fillStyle=this._background,this.ctx.fillRect(0,0,this.canvasWidth,this.canvasHeight),this.ctx.lineWidth=1/this.virtualScale)}},{key:"strokeStyle",get:function get(){return this._strokeStyle},set:function set(t){this._strokeStyle=t,this.ctx&&(this.ctx.strokeStyle=t)}},{key:"fillStyle",get:function get(){return this._fillStyle},set:function set(t){this._fillStyle=t,this.ctx&&(this.ctx.fillStyle=t)}},{key:"font",get:function get(){return this._fillStyle},set:function set(t){this._font=t,this.ctx&&(this.ctx.font=t)}},{key:"setCtxTransform",value:function setCtxTransform(t){this.ctx.setTransform(t.a,t.b,t.c,t.d,t.tx,t.ty),this.ctx.scale(window.devicePixelRatio,window.devicePixelRatio),this.ctx.scale(this.virtualScale,this.virtualScale)}},{key:"save",value:function save(){this.stack.push({matrix:this.matrix,font:this.font,depth:this.depth,depthOfCut:this.depthOfCut,toolDiameter:this.toolDiameter,align:this.align,top:this.top,strokeStyle:this.strokeStyle,fillStyle:this.fillStyle,filters:this.filters.slice()})}},{key:"restore",value:function restore(){var t=this;if(this.stack.length){var r=this.stack.pop();Object.keys(r).forEach((function(i){t[i]=r[i]})),this.setCtxTransform(r.matrix),this.ctx.lineWidth=1/this.virtualScale}else console.warn("Cannot restore: GCanvas stack empty!")}},{key:"beginPath",value:function beginPath(){var t;this.path=new i.Z,null===(t=this.ctx)||void 0===t||t.beginPath()}},{key:"transform",value:function transform(t,i,o,a,u,l){var c;this.matrix=this.matrix.concat(new r(t,i,o,a,u,l)),null===(c=this.ctx)||void 0===c||c.transform(t,i,o,a,u,l)}},{key:"setTransform",value:function setTransform(t,i,o,a,u,l){var c;this.matrix=new r(t,i,o,a,u,l),null===(c=this.ctx)||void 0===c||c.setTransform(t,i,o,a,u,l)}},{key:"resetTransform",value:function resetTransform(){var t;this.matrix=new r,null===(t=this.ctx)||void 0===t||t.resetTransform()}},{key:"rotate",value:function rotate(t){var r;this.matrix=this.matrix.rotate(t),null===(r=this.ctx)||void 0===r||r.rotate(t/180*Math.PI)}},{key:"translate",value:function translate(t,r){var i,o,a;this.matrix=this.matrix.translate(t,r),this.ctx.resetTransform(),null===(i=this.ctx)||void 0===i||i.translate(t,r),null===(o=this.ctx)||void 0===o||o.scale(this.virtualScale,this.virtualScale),null===(a=this.ctx)||void 0===a||a.scale(window.devicePixelRatio,window.devicePixelRatio)}},{key:"scale",value:function scale(t,r){var i;this.matrix=this.matrix.scale(t,r),null===(i=this.ctx)||void 0===i||i.scale(t,r||t)}},{key:"transformPoint",value:function transformPoint(r){if(r instanceof Array){var i=this.matrix.transformPoint(new t.Z(r[0],r[1]));return new t.Z(i.x,i.y)}if(void 0!==r.x){var o=new t.Z(r.x,r.y);return o=this.matrix.transformPoint(o),r.x=o.x,r.y=o.y,o}}},{key:"ensurePath",value:function ensurePath(t,r){this.path&&0===this.path.subPaths.length&&this.path.moveTo(t,r)}},{key:"moveTo",value:function moveTo(t,r){var i,o=this.transformPoint([t,r]),a=o.x,u=o.y;this.path.moveTo(a,u),null===(i=this.ctx)||void 0===i||i.moveTo(a,u)}},{key:"lineTo",value:function lineTo(t,r){var i,o=this.transformPoint([t,r]),a=o.x,u=o.y;this.ensurePath(a,u),this.path.lineTo(a,u),null===(i=this.ctx)||void 0===i||i.lineTo(a,u)}},{key:"arcTo",value:function arcTo(r,i,a,u,l){var c,p=this.transformPoint([r,i]),h=p.x,y=p.y,d=this.transformPoint([a,u]),v=d.x,m=d.y;this.ensurePath(h,y);var b=this.path.lastPoint()||new t.Z,P=new t.Z(h,y),_=new t.Z(v,m),g=b.subtract(P),x=_.subtract(P),w=g.x*x.y-g.y*x.x;if(Math.abs(w)<1e-10)this.lineTo(h,y);else{var I=g.magnitude(),C=x.magnitude(),O=(Math.PI-Math.abs(Math.asin(w/(I*C))))/2,S=l*Math.tan(O),T=S/I,A=new t.Z(P.x+g.x*T,P.y+g.y*T);T=S/C;var E=new t.Z(P.x+x.x*T,P.y+x.y*T),L=new t.Z((A.x+E.x)/2,(A.y+E.y)/2).subtract(P),k=L.magnitude(),M=Math.sqrt(l*l+S*S),R=new t.Z;T=M/k,R.x=P.x+L.x*T,R.y=P.y+L.y*T;var j=(0,o.mb)(R,A,E);this.path.lineTo(A.x,A.y),this.path.arc(R.x,R.y,j.radius,j.start,j.end,w>0),null===(c=this.ctx)||void 0===c||c.arcTo(h,y,v,m,l)}}},{key:"arc",value:function arc(){for(var r,i=arguments.length,a=new Array(i),u=0;u<i;u++)a[u]=arguments[u];var l=a[0],c=a[1],p=a[2],h=a[3],y=a[4],d=a[5];if(h-y!=0){y-h==2*-Math.PI&&(y=2*Math.PI);var v=new t.Z(l,c),m=(0,o.CS)(l,c,h,y,p);this.transformPoint(v),this.transformPoint(m.start),this.transformPoint(m.end);var b=(0,o.mb)(v,m.start,m.end);if(!this.path)throw"beginPath not called yet";this.path.arc(v.x,v.y,b.radius,b.start,b.end,d),null===(r=this.ctx)||void 0===r||r.arc(l,c,p,h,y,d)}}},{key:"bezierCurveTo",value:function bezierCurveTo(){var t,r=this.transformPoint([arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1]]),i=r.x,o=r.y,a=this.transformPoint([arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3]]),u=a.x,l=a.y,c=this.transformPoint([arguments.length<=4?void 0:arguments[4],arguments.length<=5?void 0:arguments[5]]),p=c.x,h=c.y;this.path.bezierCurveTo(i,o,u,l,p,h),null===(t=this.ctx)||void 0===t||t.bezierCurveTo(i,o,u,l,p,h)}},{key:"quadraticCurveTo",value:function quadraticCurveTo(){var t,r=this.transformPoint([arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1]]),i=r.x,o=r.y,a=this.transformPoint([arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3]]),u=a.x,l=a.y;this.path.quadraticCurveTo(i,o,u,l),null===(t=this.ctx)||void 0===t||t.quadraticCurveTo(i,o,u,l)}},{key:"clip",value:function clip(){var t;this.clipRegion=this.path,null===(t=this.ctx)||void 0===t||t.clip()}},{key:"fillRect",value:function fillRect(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var o=3===r.length?r[0].x:r[0],a=3===r.length?r[0].y:r[1],u=3===r.length?r[1]:r[2],l=3===r.length?r[2]:r[3];this.beginPath(),this.rect(o,a,u,l),this.fill(),this.closePath()}},{key:"cutoutRect",value:function cutoutRect(t,r,i,o){}},{key:"strokeCircle",value:function strokeCircle(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var o=2===r.length?r[0].x:r[0],a=2===r.length?r[0].y:r[1],u=2===r.length?r[1]:r[2];this.beginPath(),this.circle(o,a,u),this.stroke(),this.closePath()}},{key:"fillCircle",value:function fillCircle(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var o=2===r.length?r[0].x:r[0],a=2===r.length?r[0].y:r[1],u=2===r.length?r[1]:r[2];this.beginPath(),this.circle(o,a,u),this.fill(),this.closePath()}},{key:"strokeLine",value:function strokeLine(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var o=2===r.length?r[0].x:r[0],a=2===r.length?r[0].y:r[1],u=2===r.length?r[1].x:r[2],l=2===r.length?r[1].y:r[3];this.beginPath(),this.moveTo(o,a),this.lineTo(u,l),this.stroke(),this.closePath()}},{key:"clone",value:function clone(){}},{key:"measureText",value:function measureText(t){return{top:0,left:0,right:0,bottom:0}}},{key:"isOpaque",value:function isOpaque(t){return"transparent"!=t&&("none"!=t&&("string"!=typeof t||!t.match(/rgba\((?:.*,){3}[0\.]*\)/)))}},{key:"stroke",value:function stroke(){var t,r=this,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},a=i.align,u=void 0===a?this.align:a,l=i.depth,c=(void 0===l&&this.depth,i.cutout),p=i.debug;if(this.isOpaque(this.strokeStyle)){var h=this.ctx.strokeStyle;if(p)this.ctx.strokeStyle="rgba(255,0,0,0.5)";else{var y=this.path;if(c&&this.pathHistory.length>0){var d=(0,o.iV)(y.getPoints());console.log("lines making up current shape:",d),console.log("previously stored shapes: ",this.pathHistory.length);for(var v=this.pathHistory.length-1;v>=0;v--){var m=(0,o.iV)(this.pathHistory[v].getPoints());console.log("history item ".concat(v," lines:"),m)}}this.save();var b=0;"outer"===u&&(b=this.toolDiameter/2),"inner"===u&&(b=-this.toolDiameter/2),"center"!==u&&(y=(y=y.simplify("evenodd",this.precision)).offset(b)||y),y.subPaths?y.subPaths.forEach((function(t){"inner"==u&&(t=t.reverse()),r.layer(t,(function(i){r.motion.followPath(t,i)}))})):console.warn("stroke has no subpaths?"),this.restore()}null===(t=this.ctx)||void 0===t||t.stroke(),p&&(this.ctx.strokeStyle=h)}}},{key:"fill",value:function fill(t){var r,i=this;if(this.isOpaque(this.fillStyle)){if(this.save(),!this.toolDiameter)throw"You must set context.toolDiameter to use fill()";var o=this.path;(o=(o=(o=o.simplify(t,this.precision)).clip(this.clipRegion,0,this.precision)).fillPath(this.toolDiameter,this.precision)).subPaths&&o.subPaths.forEach((function(t){i.layer(t,(function(r){i.motion.followPath(t,r)}))}),this),this.restore(),null===(r=this.ctx)||void 0===r||r.fill()}}},{key:"clearRect",value:function clearRect(t,r,i,o){var a;null===(a=this.ctx)||void 0===a||a.clearRect(t,r,i,o)}},{key:"closePath",value:function closePath(){var t;this.path.close(),this.enableCutouts&&this.pathHistory.push(this.path.current.clone()),null===(t=this.ctx)||void 0===t||t.closePath()}},{key:"layer",value:function layer(t,r){var i=this.depthOfCut||this.depth;if(0!==i){var o=this.depth<0;o&&i>0&&(i=-i);for(var a=Math.ceil(Math.abs(this.depth/i)),u=-this.top;a--;)u-=i,u=o?Math.max(u,this.top+this.depth):Math.max(u,-this.top-this.depth),r.call(this,u);this.ramping&&t.isClosed()&&r.call(this,u)}else r.call(this,-this.top)}}]),GCanvas}();function GCodeDriver_typeof(t){return GCodeDriver_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},GCodeDriver_typeof(t)}function GCodeDriver_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(a=o.key,u=void 0,u=function GCodeDriver_toPrimitive(t,r){if("object"!==GCodeDriver_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==GCodeDriver_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(a,"string"),"symbol"===GCodeDriver_typeof(u)?u:String(u)),o)}var a,u}function GCodeDriver_setPrototypeOf(t,r){return GCodeDriver_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function _setPrototypeOf(t,r){return t.__proto__=r,t},GCodeDriver_setPrototypeOf(t,r)}function GCodeDriver_createSuper(t){var r=function GCodeDriver_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=GCodeDriver_getPrototypeOf(t);if(r){var a=GCodeDriver_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return function GCodeDriver_possibleConstructorReturn(t,r){if(r&&("object"===GCodeDriver_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function GCodeDriver_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,i)}}function GCodeDriver_getPrototypeOf(t){return GCodeDriver_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},GCodeDriver_getPrototypeOf(t)}var h=function(t){!function GCodeDriver_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&GCodeDriver_setPrototypeOf(t,r)}(GCode,t);var r=GCodeDriver_createSuper(GCode);function GCode(t){var i;return function GCodeDriver_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,GCode),(i=r.call(this,t)).stream=t||{write:function write(t){return console.log(t)},reset:function reset(){}},i}return function GCodeDriver_createClass(t,r,i){return r&&GCodeDriver_defineProperties(t.prototype,r),i&&GCodeDriver_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(GCode,[{key:"reset",value:function reset(){this.stream.reset(),this.init()}},{key:"send",value:function send(t,r){var i="".concat(t);r&&"xyzabcijkft".split("").forEach((function(t){void 0===r[t]||null===r[t]||isNaN(r[t])||(i+=" ".concat(t.toUpperCase()).concat(r[t]))}));this.stream.write(i)}},{key:"init",value:function init(){this.send("G17 (select the xy plane)"),this.send("M3 S0 (activate servo)")}},{key:"unit",value:function unit(t){this.send({inch:"G20",mm:"G21"}[t]+" (select ".concat(t," unit)"))}},{key:"speed",value:function speed(t){this.send("S".concat(t," (set speed to ").concat(t,")"))}},{key:"feed",value:function feed(t){this.send("F"+t)}},{key:"coolant",value:function coolant(t){"mist"===t?this.send("M07"):t?this.send("M08"):this.send("M09")}},{key:"zero",value:function zero(t){this.send("G28.3",t)}},{key:"atc",value:function atc(t){this.send("M6",{t})}},{key:"rapid",value:function rapid(t){this.send("G0",t)}},{key:"linear",value:function linear(t){this.send("G1",t)}},{key:"arcCW",value:function arcCW(t){this.send("G2",t)}},{key:"arcCCW",value:function arcCCW(t){this.send("G3",t)}},{key:"comment",value:function comment(t){this.send("(".concat(t,")"))}},{key:"meta",value:function meta(t){var r="(";for(var i in t)r+="".concat(i,"=").concat(t[i]);r+=")",this.send(r)}}]),GCode}(l);const y=[__webpack_require__(899).Z,__webpack_require__(715).Z,__webpack_require__(798).Z,__webpack_require__(613).Z,__webpack_require__(918).Z,__webpack_require__(511).Z,__webpack_require__(166).Z,__webpack_require__(703).Z,__webpack_require__(139).Z,__webpack_require__(97).Z,__webpack_require__(165).Z,__webpack_require__(52).Z,__webpack_require__(404).Z,__webpack_require__(544).Z,__webpack_require__(230).Z,__webpack_require__(573).Z,__webpack_require__(388).Z,__webpack_require__(494).Z,__webpack_require__(4).Z];var d=function loadValue(t,r){var i=localStorage.getItem(t);return null===i?void 0!==r?(v(t,r),r):null:JSON.parse(i)},v=function saveValue(t,r){var i=JSON.stringify(r);return localStorage.setItem(t,i),r},m=__webpack_require__(486);function saveSlots_typeof(t){return saveSlots_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},saveSlots_typeof(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function saveSlots_ownKeys(t,r){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),i.push.apply(i,o)}return i}function saveSlots_objectSpread(t){for(var r=1;r<arguments.length;r++){var i=null!=arguments[r]?arguments[r]:{};r%2?saveSlots_ownKeys(Object(i),!0).forEach((function(r){saveSlots_defineProperty(t,r,i[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):saveSlots_ownKeys(Object(i)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(i,r))}))}return t}function saveSlots_defineProperty(t,r,i){return(r=function saveSlots_toPropertyKey(t){var r=function saveSlots_toPrimitive(t,r){if("object"!==saveSlots_typeof(t)||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var o=i.call(t,r||"default");if("object"!==saveSlots_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"===saveSlots_typeof(r)?r:String(r)}(r))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var b,P=document.getElementById("save-slots"),_=function renderSketchSaveSlots(t,r){P.innerHTML="",d(t.constructor.name,[]).forEach((function(i,o){var a=document.createElement("button");a.type="button",a.innerText="".concat(o+1),a.addEventListener("click",(function(){null==r||r(),t.reset(),console.log("Loading:",i),Object.keys(i).forEach((function(r){t.vs[r].setValue(i[r],!0)})),t.initDraw()})),P.appendChild(a)}))},g=__webpack_require__(561),x=document.getElementById("slider-area"),w={},I=140,C=100,O=document.createElement("canvas"),S=document.getElementById("canvas-area"),T=document.getElementById("sketch-buttons-area"),A=document.getElementById("save-button"),E=document.getElementById("reset"),L=document.getElementById("randomize"),k=document.getElementById("gcode"),M=d("sketchIndex",0),R=0,j=0,N=(0,m.throttle)((function _setGCodeHTML(t){return k.innerHTML=t}),1e3),B="",D=function setGCode(t){N(B=t)},X=function initSketch(t){console.clear(),console.log("Loading new sketch",t.name),j=0,R&&(window.cancelAnimationFrame(R),R=0),D(t.generateGCode?"":"(GCode disabled for this sketch)");var r=t.generateGCode?new h({reset:function reset(){D("")},write:function write(t){!function appendGCode(t){N(B+=t+"\n")}(t)}}):void 0,i=new p({canvas:O,driver:r,width:I,height:C,virtualScale:8,background:"#fff"});(b=new t({ctx:i,width:I,height:C})).init(),b.initDraw(),function renderSketchSliders(t,r){w={},x.innerHTML="",Object.keys(t.vs).forEach((function(i){var o=t.vs[i],a=document.createElement("input");a.type="range",a.min=String(o.min),a.max=String(o.max),a.step=String(o.step),a.value=String(o.value),a.setAttribute("data-slider",i);var u=document.createElement("label"),l=document.createElement("span"),c=document.createElement("small"),p=function handleUpdate(o){var u=void 0===o?Number(a.value):o;c.innerText=(0,g.iH)(u,6),t.vs[i].value=u,t.reset(),t.initDraw(),null==r||r()};a.addEventListener("input",(function(t){return p()})),a.addEventListener("change",(function(t){return p()})),c.addEventListener("click",(function(){var t=window.prompt("".concat(i,": "),String(a.value));if(null!==t){var r=parseFloat(t);isNaN(r)||p(r)}})),c.innerText=(0,g.iH)(Number(a.value)),l.innerText=i,l.appendChild(c),u.appendChild(l),u.appendChild(a),x.appendChild(u),o.inputElem=a,w[i]={slider:a,labelSpan:l,valueSpan:c}}))}(b,(function(){j=0})),_(b,(function(){j=0})),Y()},Y=function animate(){for(var t=0;t<100;t++)j++,b.draw(j);R=window.requestAnimationFrame(animate)};window.addEventListener("load",(function init(){O.width=1120*window.devicePixelRatio,O.height=800*window.devicePixelRatio,O.style.width="".concat(1120,"px"),O.style.height="".concat(800,"px"),S?S.appendChild(O):document.body.appendChild(O),y.forEach((function(t,r){var i=document.createElement("button");i.type="button",i.innerText="".concat(r+1," ").concat(t.name),M===r&&i.classList.add("active"),i.addEventListener("click",(function(){for(var o=T.getElementsByTagName("button"),a=0;a<o.length;a++)o.item(a).classList.remove("active");i.classList.add("active"),M=v("sketchIndex",r),X(t)})),T.appendChild(i)})),X(y[M]),E.addEventListener("click",(function(){b&&(j=0,b.reset(),b.initDraw())})),L.addEventListener("click",(function(){b&&(j=0,Object.keys(b.vs).forEach((function(t){b.vs[t].randomize()})),function updateSliderValues(t){Object.keys(w).forEach((function(r){var i=w[r],o=i.slider,a=i.valueSpan;o.value=String(t.vs[r].value),a.innerText=(0,g.iH)(t.vs[r].value)}))}(b),b.reset(),b.initDraw())})),A.addEventListener("click",(function(){b&&function saveNewPreset(t){var r=Object.keys(t.vs).reduce((function(r,i){return saveSlots_objectSpread(saveSlots_objectSpread({},r),{},saveSlots_defineProperty({},i,t.vs[i].value))}),{}),i=t.constructor.name,o=d(i,[]);v(i,[].concat(_toConsumableArray(o),[r])),_(t)}(b)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEtBQ256QkMsR0FBUyxHQUFLLElBQU1ELEVBQVVBLEVBQVU5YSxPQUFTLEdBcURyRG1TLFdBQVdNLFVBQVV1SSxVQS95QnJCLFNBQVNDLGFBQWFoSCxHQUVyQixPQUFPOU4sS0FB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QUFLLElBQUssR0FBSSxHQUFJLEdBQUksR0FBSSxJQUFLLEdBQUksR0FBSSxJQUFLLElBQ2xILEdBQUksR0FBSSxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxJQUFLLEdBQUksR0FBSSxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLElBQzlHLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssR0FBSSxHQUFJLEdBQUksR0FBSSxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxHQUFJLEdBQUksR0FBSSxJQUFLLEVBQUcsSUFBSyxHQUFJLEdBQUksSUFDL0csR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssRUFBRyxHQUFJLEdBQUksSUFDaEgsSUFBSyxJQUFLLElBQUssSUFBSyxFQUFHLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxJQUFLLEdBQUksR0FBSSxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssR0FBSSxHQUFJLEdBQUksR0FBSSxJQUFLLElBQUssR0FBSSxHQUNsSCxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEVBQUcsR0FBSSxJQUFLLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLEVBQUcsSUFBSyxHQUFJLEdBQUksSUFBSyxHQUFJLEdBQ25ILElBQUssSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUMvRyxJQUFLLElBQUssR0FBSSxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxHQUNsSCxHQUFJLElBQUssRUFBRyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLElBQUssR0FBSSxHQUFJLEdBQUksR0FBSSxJQUFLLElBQUssSUFBSyxJQUFLLEdBQUksR0FBSSxJQUFLLEdBQUksSUFBSyxLQUl6R3k1QyxFQUFPLElBQUkvOEMsTUFBTSxLQUNqQmc5QyxFQUFRLElBQUloOUMsTUFBTSxLQUlYK3VDLEVBQVksU0FBWkEsVUFBYWhDLEdBQ3BCQSxFQUFPLEdBQUtBLEVBQU8sSUFFckJBLEdBQVEsUUFHVkEsRUFBT3JuQyxLQUFLNE0sTUFBTXk2QixJQUNQLE1BQ1RBLEdBQVFBLEdBQVEsR0FHbEIsSUFBSyxJQUFJN3FDLEVBQUksRUFBR0EsRUFBSSxJQUFLQSxJQUFLLENBQzVCLElBQU1rSixFQUFRLEVBQUpsSixFQUFRb0IsRUFBRXBCLEdBQWEsSUFBUDZxQyxFQUFjenBDLEVBQUVwQixHQUFPNnFDLEdBQVEsRUFBSyxJQUM5RGdRLEVBQUs3NkMsR0FBSzY2QyxFQUFLNzZDLEVBQUksS0FBT2tKLEVBQzFCNHhDLEVBQU05NkMsR0FBSzg2QyxFQUFNOTZDLEVBQUksS0FBTzQ2QyxFQUFNMXhDLEVBQUksR0FDeEMsQ0FDRixFQUVBMmpDLEVBQVUsR0FHUXJwQyxLQUFLOEMsS0FBSyxHQUNaOUMsS0FBSzhDLEtBQUssR0FEMUIsSUF3S015MEMsRUFBTyxTQUFQQSxLQUFRcHZDLEdBQVMsT0FBS0EsRUFBSUEsRUFBSUEsR0FBS0EsR0FBUyxFQUFKQSxFQUFRLElBQU0sR0FBRyxFQUN6RHF2QyxFQUFPLFNBQVBBLEtBQVExMUMsRUFBV0MsRUFBV29HLEdBQVMsT0FBTSxFQUFJQSxHQUFLckcsRUFBSXFHLEVBQUlwRyxDQUFDLEVBR3hEOG5DLEVBQVUsU0FBVkEsUUFBV3Z3QyxFQUFXQyxHQUVqQyxJQUFJeVAsRUFBSWhKLEtBQUs0TSxNQUFNdFQsR0FDZjJQLEVBQUlqSixLQUFLNE0sTUFBTXJULEdBR25CRCxHQUFRMFAsRUFDUnpQLEdBQVEwUCxFQU9SLElBQU13dUMsRUFBTUgsR0FKWnR1QyxHQUFRLEtBSWNxdUMsRUFIdEJwdUMsR0FBUSxNQUd1Qnl1QyxLQUFLcCtDLEVBQUdDLEdBQ2pDbytDLEVBQU1MLEVBQU10dUMsRUFBSXF1QyxFQUFLcHVDLEVBQUksSUFBSXl1QyxLQUFLcCtDLEVBQUdDLEVBQUksR0FDekNxK0MsRUFBTU4sRUFBTXR1QyxFQUFJLEVBQUlxdUMsRUFBS3B1QyxJQUFJeXVDLEtBQUtwK0MsRUFBSSxFQUFHQyxHQUN6Q3MrQyxFQUFNUCxFQUFNdHVDLEVBQUksRUFBSXF1QyxFQUFLcHVDLEVBQUksSUFBSXl1QyxLQUFLcCtDLEVBQUksRUFBR0MsRUFBSSxHQUdqRDRnQixFQUFJbzlCLEVBQUtqK0MsR0FHZixPQUFPaytDLEVBQUtBLEVBQUtDLEVBQUtHLEVBQUt6OUIsR0FBSXE5QixFQUFLRyxFQUFLRSxFQUFLMTlCLEdBQUlvOUIsRUFBS2grQyxHQUN6RCxnS0N4UmFtcEMsRUFBZSxTQUFmQSxhQUFnQjVoQyxHQUFXLElBQUVSLEVBQVdwRyxVQUFBTCxPQUFBLFFBQUF3SSxJQUFBbkksVUFBQSxHQUFBQSxVQUFBLEdBQUcsRUFBQyxPQUFhOEYsS0FBS3dDLE9BQU13VSxFQUFBQSxFQUFBQSxNQUFZbFcsRUFBTVIsR0FBT0EsRUFBSSxFQUNqR3dyQyxFQUFpQixTQUFqQkEsZUFBa0JockMsR0FBVyxJQUFFUixFQUFXcEcsVUFBQUwsT0FBQSxRQUFBd0ksSUFBQW5JLFVBQUEsR0FBQUEsVUFBQSxHQUFHLEVBQUMsT0FBYThjLEVBQUFBLEVBQUFBLE1BQVlsVyxFQUFNUixHQUFPQSxDQUFHLEVBQ3ZGNmlDLEVBQVUsU0FBVkEsUUFBVzJVLEdBQWEsT0FBYTkzQyxLQUFLd0MsT0FBTXdVLEVBQUFBLEVBQUFBLE1BQW9CLEVBQVI4Z0MsR0FBYUEsRUFBTSxFQUMvRWxWLEVBQVksU0FBWkEsVUFBYWtWLEdBQWEsT0FBYTlnQyxFQUFBQSxFQUFBQSxNQUFvQixFQUFSOGdDLEdBQWFBLENBQUssRUFDckV0VixFQUFPLFNBQVBBLEtBQVF6cEMsRUFBZStILEdBQVcsSUFBRVIsRUFBV3BHLFVBQUFMLE9BQUEsUUFBQXdJLElBQUFuSSxVQUFBLEdBQUFBLFVBQUEsR0FBRyxFQUFDLE9BQzlEbkIsRUFBUXVILEVBQU1RLEVBQU0vSCxFQUFRK0gsRUFBTVIsRUFBTXZILENBQUssRUFTbENnL0MsRUFBYyxTQUFkQSxZQUFlQyxHQUFpRCxJQUFqQ0MsRUFBZ0IvOUMsVUFBQUwsT0FBQSxRQUFBd0ksSUFBQW5JLFVBQUEsR0FBQUEsVUFBQSxHQUFHLEVBQzdELEdBQUk4OUMsRUFBUyxHQUFNLEVBQUcsT0FBT3ZELE9BQU91RCxHQUNwQyxJQUFNRSxFQUFnQmw0QyxLQUFLTSxJQVRBLFNBQWhCNjNDLGNBQWlCSCxHQUM1QixJQUR5RSxJQUE3QkksRUFBWWwrQyxVQUFBTCxPQUFBLFFBQUF3SSxJQUFBbkksVUFBQSxHQUFBQSxVQUFBLEdBQUcsRUFDbEQyTSxFQUFJLEVBQUcwOUIsRUFBUSxFQUFHQSxFQUFRNlQsRUFBTTdULElBQVMxOUIsR0FBSyxHQUNyRCxHQUFJbXhDLEVBQVNueEMsR0FBTSxFQUFHLE9BQU8wOUIsRUFFL0IsT0FBTzZULENBQ1QsQ0FJaUNELENBQWNILEVBQVFDLEdBQVdBLEdBQ2hFLE9BQXlCLElBQWxCQyxFQUFzQnpELE9BQU96MEMsS0FBS3dDLE1BQU13MUMsSUFBV0EsRUFBT0ssUUFBUUgsRUFDM0UsRUFHYXhMLEVBQWtCLFNBQWxCQSxnQkFBbUI0TCxHQUFjLE9BQWVBLEVBQVN0NEMsS0FBS2EsS0FBaUIsRUFBVmIsS0FBS2EsSUFBV2IsS0FBS2EsRUFBRSxFQUU1RmdzQyxFQUFZLFNBQVpBLFVBQWFweUMsRUFBb0JDLEdBQWdCLE9BQzFEQSxFQUFXRCxFQUF1QixFQUFWdUYsS0FBS2EsS0FBcUIsRUFBVmIsS0FBS2EsSUFBV2IsS0FBS2EsRUFBRSxFQUV0RGl5QyxFQUFvQixTQUFwQkEsa0JBQXFCMWMsRUFBWUMsR0FBVSxPQUFhcjJCLEtBQUthLEdBQUtiLEtBQUtDLElBQUlELEtBQUtDLElBQUltMkIsRUFBS0MsR0FBTXIyQixLQUFLYSxHQUFHLEVBRXZHMnJDLEVBQWUsU0FBZkEsYUFBZ0JvQixFQUFrQjJLLEVBQXVCejNDLEdBQTRCLE9BQzlGQSxHQUQwRjVHLFVBQUFMLE9BQUEsUUFBQXdJLElBQUFuSSxVQUFBLEdBQUFBLFVBQUEsR0FBRyxJQUNoRnErQyxFQUFpQjNLLENBQVEsRUFFN0JMLEVBQVcsU0FBWEEsU0FBWWlMLEdBQVcsT0FBY0EsRUFBTXg0QyxLQUFLYSxHQUFNLEdBQUcsRUFNekRvMUMsRUFBTyxTQUFQQSxLQUFRMzhDLEdBQVMsT0FBTUEsRUFBSSxHQUFPLEVBQUksQ0FBQywwR0NwQ3ZDbS9DLEVBQVUsS0FHVm45QyxFQUFjLFNBQWRBLFlBQWVoQyxFQUFXQyxFQUFXbS9DLEVBQWdCQyxFQUFjbitDLEdBRzlFLE9BRkFrK0MsR0FBNkIsRUFBVjE0QyxLQUFLYSxHQUN4QjgzQyxHQUF5QixFQUFWMzRDLEtBQUthLEdBQ2IsQ0FDTHBGLE1BQU8sSUFBSXdDLEVBQUFBLEVBQU16RCxFQUFTd0YsS0FBS3VELElBQUltMUMsR0FBVXAvQyxFQUFHa0IsRUFBU3dGLEtBQUtZLElBQUk4M0MsR0FBVW4vQyxHQUM1RWtNLElBQUssSUFBSXhILEVBQUFBLEVBQU16RCxFQUFTd0YsS0FBS3VELElBQUlvMUMsR0FBUXIvQyxFQUFHa0IsRUFBU3dGLEtBQUtZLElBQUkrM0MsR0FBUXAvQyxHQUUxRSxFQUVhczNDLEVBQWUsU0FBZkEsZUFjWCxJQVRBLElBQU1ockIsRUFBc0IsSUFBaEIzckIsVUFBS0wsT0FBWUssVUFBQUwsUUFBQSxPQUFBd0ksRUFBQW5JLFVBQUEsR0FBYSxJQUFJK0QsRUFBQUEsRUFBSy9ELFVBQUFMLFFBQUEsT0FBQXdJLEVBQUFuSSxVQUFBLEdBQUFBLFVBQUFMLFFBQUEsT0FBQXdJLEVBQUFuSSxVQUFBLElBQzdDNHJCLEVBQXNCLElBQWhCNXJCLFVBQUtMLE9BQVlLLFVBQUFMLFFBQUEsT0FBQXdJLEVBQUFuSSxVQUFBLEdBQWEsSUFBSStELEVBQUFBLEVBQUsvRCxVQUFBTCxRQUFBLE9BQUF3SSxFQUFBbkksVUFBQSxHQUFBQSxVQUFBTCxRQUFBLE9BQUF3SSxFQUFBbkksVUFBQSxJQUM3Q2lDLEVBQTRCLElBQWhCakMsVUFBS0wsT0FBWUssVUFBQUwsUUFBQSxPQUFBd0ksRUFBQW5JLFVBQUEsR0FBQUEsVUFBQUwsUUFBQSxPQUFBd0ksRUFBQW5JLFVBQUEsR0FFN0I2SSxFQUFROGlCLEVBQUlwaUIsUUFBUXFpQixHQUNwQm1mLEVBQU9wZixFQUFJbGlCLFdBQVdtaUIsR0FFdEJ6cUIsRUFBUyxHQUVObUIsRUFBSSxFQUFHQSxFQUFJTCxFQUFZLEVBQUdLLElBQUssQ0FDdEMsSUFBTStWLEVBQUtzVCxFQUFJN3NCLFFBQVFzSyxlQUFlUCxFQUFRa2lDLEdBQVE5b0MsRUFBWSxHQUFNSyxHQUN4RW5CLEVBQU8zQixLQUFLNlksRUFDZCxDQUVBLE9BQU9sWCxDQUNULEVBR2F1OUMsRUFBYyxTQUFkQSxZQUFlOVEsRUFBZXJzQyxFQUFjZ0ssR0FDdkRxaUMsRUFBU0EsRUFBTzl1QyxRQUNoQnlDLEVBQVFBLEVBQU16QyxRQUNkeU0sRUFBTUEsRUFBSXpNLFFBRVYsSUFBTTAvQyxFQUFTMTRDLEtBQUtnRCxNQUFNdkgsRUFBTWxDLEVBQUl1dUMsRUFBT3Z1QyxFQUFHa0MsRUFBTW5DLEVBQUl3dUMsRUFBT3h1QyxHQUMzRHEvQyxFQUFPMzRDLEtBQUtnRCxNQUFNeUMsRUFBSWxNLEVBQUl1dUMsRUFBT3Z1QyxFQUFHa00sRUFBSW5NLEVBQUl3dUMsRUFBT3h1QyxHQUNqRGtCLEVBQVNzdEMsRUFBT2xsQyxTQUFTbkgsR0FBT29ILFlBTXRDLE9BRkk4MUMsSUFBU0QsSUFBUUMsR0FBa0IsRUFBVjM0QyxLQUFLYSxJQUUzQixDQUFFcEYsTUFBT2k5QyxFQUFRanpDLElBQUtrekMsRUFBTW4rQyxPQUFBQSxFQUNyQyxFQVVheTBDLEVBQVksU0FBWkEsVUFBYW50QyxFQUFXQyxHQUEwQyxJQUEvQjgyQyxFQUFPMytDLFVBQUFMLE9BQUEsUUFBQXdJLElBQUFuSSxVQUFBLEdBQUFBLFVBQUEsR0FBR3UrQyxFQUN4RCxHQUFJejRDLEtBQUtDLElBQUk2QixFQUFJQyxHQUFLMDJDLEVBQVMsT0FBTyxFQUV0QyxJQUFNSyxFQUFPOTRDLEtBQUtDLElBQUk2QixHQUNoQmkzQyxFQUFPLzRDLEtBQUtDLElBQUk4QixHQUNoQmkzQyxFQUFPaDVDLEtBQUtDLElBQUk2QixFQUFJQyxHQUcxQixPQUFJRCxHQUFLQyxJQUlDLElBQU5ELEdBQWlCLElBQU5DLEdBQVdpM0MsRUFBT3Y2QixPQUFPdzZCLFVBQWtCRCxFQUFPSCxFQUFVcDZCLE9BQU93NkIsVUFHM0VELEdBQVFGLEVBQU9DLEdBQVFGLEVBQ2hDLEVBRWF0OUMsRUFBVSxTQUFWQSxRQUFXdUcsRUFBVUMsR0FDaEMsT0FBT2t0QyxFQUFVbnRDLEVBQUV4SSxFQUFHeUksRUFBRXpJLElBQU0yMUMsRUFBVW50QyxFQUFFdkksRUFBR3dJLEVBQUV4SSxFQUNqRCxFQUVhMi9DLEVBQXVCLFNBQXZCQSxxQkFBd0J4N0MsR0FDbkMsSUFBS25DLEVBQVFtQyxFQUFJLEdBQUlBLEVBQUlBLEVBQUk3RCxPQUFTLElBQ3BDLE1BQU0sSUFBSTZzQixNQUFNLDhEQUdsQixJQURBLElBQU11QixFQUFnQixHQUNienJCLEVBQUksRUFBR0EsRUFBSWtCLEVBQUk3RCxPQUFTLEVBQUcyQyxJQUNsQ3lyQixFQUFNdnVCLEtBQUssQ0FBQ2dFLEVBQUlsQixFQUFJLEdBQUlrQixFQUFJbEIsS0FFOUIsT0FBT3lyQixDQUNULHVEQzNGQSxJQUFJa3hCLEVBQU0sVUFDTkMsRUFBTSxVQUNKQyxFQUFPLFdBR0E1UixFQUFhLFNBQWJBLFdBQWM2UixHQUN6QkgsRUFBTyxVQUFZRyxFQUFXRCxFQUM5QkQsRUFBTyxVQUFZRSxFQUFXRCxDQUNoQyxFQUlhcmlDLEVBQVMsU0FBVEEsU0FJWCxTQUhBb2lDLEVBQU8sT0FBZSxNQUFOQSxJQUFnQkEsR0FBTyxJQUFPQyxJQUV0QixLQUFhLE9BRHJDRixFQUFPLE1BQWUsTUFBTkEsSUFBZ0JBLEdBQU8sSUFBT0UsTUFDRyxHQUNqQyxVQUNsQixFQUVBNVIsRUFBVyx3QkNyQlgsaUJBUUUsV0FHQSxJQUFJcGxDLEVBVUFrM0MsRUFBa0Isc0JBSWxCQyxFQUFpQiw0QkFNakJDLEVBQWMseUJBZ0JkQyxFQUF3QixHQUN4QkMsRUFBb0IsR0FDcEJDLEVBQTBCLEdBQzFCQyxFQUFnQixJQUNoQkMsRUFBa0IsSUFpQmxCQyxFQUFXLElBQ1hDLEVBQW1CLGlCQUVuQkMsRUFBTSxJQUdOQyxFQUFtQixXQUtuQkMsRUFBWSxDQUNkLENBQUMsTUFBT04sR0FDUixDQUFDLE9BdENrQixHQXVDbkIsQ0FBQyxVQXRDc0IsR0F1Q3ZCLENBQUMsUUFyQ21CLEdBc0NwQixDQUFDLGFBQWNILEdBQ2YsQ0FBQyxPQWpDa0IsS0FrQ25CLENBQUMsVUFBV0MsR0FDWixDQUFDLGVBQWdCQyxHQUNqQixDQUFDLFFBQVNFLElBSVJNLEVBQVUscUJBQ1ZDLEVBQVcsaUJBRVhDLEVBQVUsbUJBQ1ZDLEVBQVUsZ0JBRVZDLEVBQVcsaUJBQ1hDLEVBQVUsb0JBQ1ZDLEVBQVMsNkJBQ1RDLEVBQVMsZUFDVEMsRUFBWSxrQkFFWkMsRUFBWSxrQkFDWkMsRUFBYSxtQkFFYkMsRUFBWSxrQkFDWkMsRUFBUyxlQUNUQyxFQUFZLGtCQUNaQyxFQUFZLGtCQUVaQyxFQUFhLG1CQUdiQyxFQUFpQix1QkFDakJDLEVBQWMsb0JBQ2RDLEVBQWEsd0JBQ2JDLEVBQWEsd0JBQ2JDLEVBQVUscUJBQ1ZDLEVBQVcsc0JBQ1hDLEVBQVcsc0JBQ1hDLEVBQVcsc0JBQ1hDLEVBQWtCLDZCQUNsQkMsRUFBWSx1QkFDWkMsRUFBWSx1QkFHWkMsRUFBdUIsaUJBQ3ZCQyxFQUFzQixxQkFDdEJDLEVBQXdCLGdDQUd4QkMsRUFBZ0IsNEJBQ2hCQyxHQUFrQixXQUNsQkMsR0FBbUJDLE9BQU9ILEVBQWNJLFFBQ3hDQyxHQUFxQkYsT0FBT0YsR0FBZ0JHLFFBRzVDRSxHQUFXLG1CQUNYQyxHQUFhLGtCQUNiQyxHQUFnQixtQkFHaEJDLEdBQWUsbURBQ2ZDLEdBQWdCLFFBQ2hCQyxHQUFhLG1HQU1iQyxHQUFlLHNCQUNmQyxHQUFrQlYsT0FBT1MsR0FBYVIsUUFHdENVLEdBQWMsT0FHZEMsR0FBZSxLQUdmQyxHQUFnQiw0Q0FDaEJDLEdBQWdCLG9DQUNoQkMsR0FBaUIsUUFHakJDLEdBQWMsNENBWWRDLEdBQTZCLG1CQUc3QkMsR0FBZSxXQU1mQyxHQUFlLGtDQUdmQyxHQUFVLE9BR1ZDLEdBQWEscUJBR2JDLEdBQWEsYUFHYkMsR0FBZSw4QkFHZkMsR0FBWSxjQUdaQyxHQUFXLG1CQUdYQyxHQUFVLDhDQUdWQyxHQUFZLE9BR1pDLEdBQW9CLHlCQUdwQkMsR0FBZ0Isa0JBSWhCQyxHQUFlQyxnREFDZkMsR0FBaUIsa0JBQ2pCQyxHQUFlLDRCQUtmQyxHQUFlLDRCQUNmQyxHQUFhLGlCQUNiQyxHQUFlQyw4T0FHZkMsR0FBUyxPQUNUQyxHQUFXLElBQU1WLEdBQWdCLElBQ2pDVyxHQUFVLElBQU1KLEdBQWUsSUFDL0JLLEdBQVUsSUFBTVgsR0FBZSxJQUMvQlksR0FBVyxPQUNYQyxHQUFZLElBQU1YLEdBQWlCLElBQ25DWSxHQUFVLElBQU1YLEdBQWUsSUFDL0JZLEdBQVMsS0FBT2hCLEdBQWdCTyxHQUFlTSxHQUFXVixHQUFpQkMsR0FBZUMsR0FBZSxJQUN6R1ksR0FBUywyQkFFVEMsR0FBYyxLQUFPbEIsR0FBZ0IsSUFDckNtQixHQUFhLGtDQUNiQyxHQUFhLHFDQUNiQyxHQUFVLElBQU1oQixHQUFlLElBQy9CaUIsR0FBUSxVQUdSQyxHQUFjLE1BQVFSLEdBQVUsSUFBTUMsR0FBUyxJQUMvQ1EsR0FBYyxNQUFRSCxHQUFVLElBQU1MLEdBQVMsSUFDL0NTLEdBQWtCLGdDQUNsQkMsR0FBa0IsZ0NBQ2xCQyxHQVphLE1BQVFmLEdBQVUsSUFBTUssR0FBUyxJQVl0QixJQUN4QlcsR0FBVyxJQUFNdEIsR0FBYSxLQUk5QnVCLEdBQVFELEdBQVdELElBSFAsTUFBUUwsR0FBUSxNQUFRLENBQUNKLEdBQWFDLEdBQVlDLElBQVl6bUIsS0FBSyxLQUFPLElBQU1pbkIsR0FBV0QsR0FBVyxNQUlsSEcsR0FBVSxNQUFRLENBQUNoQixHQUFXSyxHQUFZQyxJQUFZem1CLEtBQUssS0FBTyxJQUFNa25CLEdBQ3hFRSxHQUFXLE1BQVEsQ0FBQ2IsR0FBY04sR0FBVSxJQUFLQSxHQUFTTyxHQUFZQyxHQUFZVixJQUFVL2xCLEtBQUssS0FBTyxJQUd4R3FuQixHQUFTN0QsT0FBT3NDLEdBQVEsS0FNeEJ3QixHQUFjOUQsT0FBT3lDLEdBQVMsS0FHOUJzQixHQUFZL0QsT0FBTzhDLEdBQVMsTUFBUUEsR0FBUyxLQUFPYyxHQUFXRixHQUFPLEtBR3RFTSxHQUFnQmhFLE9BQU8sQ0FDekJrRCxHQUFVLElBQU1OLEdBQVUsSUFBTVUsR0FBa0IsTUFBUSxDQUFDZCxHQUFTVSxHQUFTLEtBQUsxbUIsS0FBSyxLQUFPLElBQzlGNm1CLEdBQWMsSUFBTUUsR0FBa0IsTUFBUSxDQUFDZixHQUFTVSxHQUFVRSxHQUFhLEtBQUs1bUIsS0FBSyxLQUFPLElBQ2hHMG1CLEdBQVUsSUFBTUUsR0FBYyxJQUFNRSxHQUNwQ0osR0FBVSxJQUFNSyxHQXRCRCxtREFEQSxtREEwQmZiLEdBQ0FpQixJQUNBbm5CLEtBQUssS0FBTSxLQUdUeW5CLEdBQWVqRSxPQUFPLElBQU1tRCxHQUFRdEIsR0FBaUJDLEdBQWVLLEdBQWEsS0FHakYrQixHQUFtQixxRUFHbkJDLEdBQWUsQ0FDakIsUUFBUyxTQUFVLFdBQVksT0FBUSxRQUFTLGVBQWdCLGVBQ2hFLFdBQVksWUFBYSxhQUFjLGFBQWMsTUFBTyxPQUFRLFNBQ3BFLFVBQVcsU0FBVSxNQUFPLFNBQVUsU0FBVSxZQUFhLGFBQzdELG9CQUFxQixjQUFlLGNBQWUsVUFDbkQsSUFBSyxlQUFnQixXQUFZLFdBQVksY0FJM0NDLElBQW1CLEVBR25CQyxHQUFpQixDQUFDLEVBQ3RCQSxHQUFlcEYsR0FBY29GLEdBQWVuRixHQUM1Q21GLEdBQWVsRixHQUFXa0YsR0FBZWpGLEdBQ3pDaUYsR0FBZWhGLEdBQVlnRixHQUFlL0UsR0FDMUMrRSxHQUFlOUUsR0FBbUI4RSxHQUFlN0UsR0FDakQ2RSxHQUFlNUUsSUFBYSxFQUM1QjRFLEdBQWV0RyxHQUFXc0csR0FBZXJHLEdBQ3pDcUcsR0FBZXRGLEdBQWtCc0YsR0FBZXBHLEdBQ2hEb0csR0FBZXJGLEdBQWVxRixHQUFlbkcsR0FDN0NtRyxHQUFlbEcsR0FBWWtHLEdBQWVqRyxHQUMxQ2lHLEdBQWUvRixHQUFVK0YsR0FBZTlGLEdBQ3hDOEYsR0FBZTdGLEdBQWE2RixHQUFlM0YsR0FDM0MyRixHQUFlMUYsR0FBVTBGLEdBQWV6RixHQUN4Q3lGLEdBQWV2RixJQUFjLEVBRzdCLElBQUl3RixHQUFnQixDQUFDLEVBQ3JCQSxHQUFjdkcsR0FBV3VHLEdBQWN0RyxHQUN2Q3NHLEdBQWN2RixHQUFrQnVGLEdBQWN0RixHQUM5Q3NGLEdBQWNyRyxHQUFXcUcsR0FBY3BHLEdBQ3ZDb0csR0FBY3JGLEdBQWNxRixHQUFjcEYsR0FDMUNvRixHQUFjbkYsR0FBV21GLEdBQWNsRixHQUN2Q2tGLEdBQWNqRixHQUFZaUYsR0FBY2hHLEdBQ3hDZ0csR0FBYy9GLEdBQWErRixHQUFjOUYsR0FDekM4RixHQUFjNUYsR0FBYTRGLEdBQWMzRixHQUN6QzJGLEdBQWMxRixHQUFhMEYsR0FBY3pGLEdBQ3pDeUYsR0FBY2hGLEdBQVlnRixHQUFjL0UsR0FDeEMrRSxHQUFjOUUsR0FBYThFLEdBQWM3RSxJQUFhLEVBQ3RENkUsR0FBY25HLEdBQVltRyxHQUFjbEcsR0FDeENrRyxHQUFjeEYsSUFBYyxFQUc1QixJQTRFSXlGLEdBQWdCLENBQ2xCLEtBQU0sS0FDTixJQUFLLElBQ0wsS0FBTSxJQUNOLEtBQU0sSUFDTixTQUFVLFFBQ1YsU0FBVSxTQUlSQyxHQUFpQnBsQyxXQUNqQnFsQyxHQUFlamlDLFNBR2ZraUMsR0FBOEIsaUJBQVYsRUFBQTN0QyxHQUFzQixFQUFBQSxHQUFVLEVBQUFBLEVBQU95SSxTQUFXQSxRQUFVLEVBQUF6SSxFQUdoRjR0QyxHQUEwQixpQkFBUngyQyxNQUFvQkEsTUFBUUEsS0FBS3FSLFNBQVdBLFFBQVVyUixLQUd4RXkyQyxHQUFPRixJQUFjQyxJQUFZRSxTQUFTLGNBQVRBLEdBR2pDQyxHQUE0QzkyQyxJQUFZQSxFQUFRKzJDLFVBQVkvMkMsRUFHNUVnM0MsR0FBYUYsSUFBNEMvMkMsSUFBV0EsRUFBT2czQyxVQUFZaDNDLEVBR3ZGazNDLEdBQWdCRCxJQUFjQSxHQUFXaDNDLFVBQVk4MkMsR0FHckRJLEdBQWNELElBQWlCUCxHQUFXNU0sUUFHMUNxTixHQUFZLFdBQ2QsSUFFRSxJQUFJQyxFQUFRSixJQUFjQSxHQUFXSyxTQUFXTCxHQUFXSyxRQUFRLFFBQVFELE1BRTNFLE9BQUlBLEdBS0dGLElBQWVBLEdBQVlJLFNBQVdKLEdBQVlJLFFBQVEsT0FDbkUsQ0FBRSxNQUFPOXVDLEdBQUksQ0FDZixDQVplLEdBZVgrdUMsR0FBb0JKLElBQVlBLEdBQVNLLGNBQ3pDQyxHQUFhTixJQUFZQSxHQUFTTyxPQUNsQ0MsR0FBWVIsSUFBWUEsR0FBU1MsTUFDakNDLEdBQWVWLElBQVlBLEdBQVNXLFNBQ3BDQyxHQUFZWixJQUFZQSxHQUFTYSxNQUNqQ0MsR0FBbUJkLElBQVlBLEdBQVNlLGFBYzVDLFNBQVN0b0QsTUFBTXVvRCxFQUFNQyxFQUFTcG9ELEdBQzVCLE9BQVFBLEVBQUtSLFFBQ1gsS0FBSyxFQUFHLE9BQU8yb0QsRUFBS3prQyxLQUFLMGtDLEdBQ3pCLEtBQUssRUFBRyxPQUFPRCxFQUFLemtDLEtBQUswa0MsRUFBU3BvRCxFQUFLLElBQ3ZDLEtBQUssRUFBRyxPQUFPbW9ELEVBQUt6a0MsS0FBSzBrQyxFQUFTcG9ELEVBQUssR0FBSUEsRUFBSyxJQUNoRCxLQUFLLEVBQUcsT0FBT21vRCxFQUFLemtDLEtBQUswa0MsRUFBU3BvRCxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxJQUUzRCxPQUFPbW9ELEVBQUt2b0QsTUFBTXdvRCxFQUFTcG9ELEVBQzdCLENBWUEsU0FBU3FvRCxnQkFBZ0JDLEVBQU9DLEVBQVFDLEVBQVVDLEdBSWhELElBSEEsSUFBSTc3QyxHQUFTLEVBQ1RwTixFQUFrQixNQUFUOG9ELEVBQWdCLEVBQUlBLEVBQU05b0QsU0FFOUJvTixFQUFRcE4sR0FBUSxDQUN2QixJQUFJZCxFQUFRNHBELEVBQU0xN0MsR0FDbEIyN0MsRUFBT0UsRUFBYS9wRCxFQUFPOHBELEVBQVM5cEQsR0FBUTRwRCxFQUM5QyxDQUNBLE9BQU9HLENBQ1QsQ0FXQSxTQUFTQyxVQUFVSixFQUFPRSxHQUl4QixJQUhBLElBQUk1N0MsR0FBUyxFQUNUcE4sRUFBa0IsTUFBVDhvRCxFQUFnQixFQUFJQSxFQUFNOW9ELFNBRTlCb04sRUFBUXBOLElBQzhCLElBQXpDZ3BELEVBQVNGLEVBQU0xN0MsR0FBUUEsRUFBTzA3QyxLQUlwQyxPQUFPQSxDQUNULENBV0EsU0FBU0ssZUFBZUwsRUFBT0UsR0FHN0IsSUFGQSxJQUFJaHBELEVBQWtCLE1BQVQ4b0QsRUFBZ0IsRUFBSUEsRUFBTTlvRCxPQUVoQ0EsTUFDMEMsSUFBM0NncEQsRUFBU0YsRUFBTTlvRCxHQUFTQSxFQUFROG9ELEtBSXRDLE9BQU9BLENBQ1QsQ0FZQSxTQUFTTSxXQUFXTixFQUFPTyxHQUl6QixJQUhBLElBQUlqOEMsR0FBUyxFQUNUcE4sRUFBa0IsTUFBVDhvRCxFQUFnQixFQUFJQSxFQUFNOW9ELFNBRTlCb04sRUFBUXBOLEdBQ2YsSUFBS3FwRCxFQUFVUCxFQUFNMTdDLEdBQVFBLEVBQU8wN0MsR0FDbEMsT0FBTyxFQUdYLE9BQU8sQ0FDVCxDQVdBLFNBQVNRLFlBQVlSLEVBQU9PLEdBTTFCLElBTEEsSUFBSWo4QyxHQUFTLEVBQ1RwTixFQUFrQixNQUFUOG9ELEVBQWdCLEVBQUlBLEVBQU05b0QsT0FDbkN1cEQsRUFBVyxFQUNYNWxELEVBQVMsS0FFSnlKLEVBQVFwTixHQUFRLENBQ3ZCLElBQUlkLEVBQVE0cEQsRUFBTTE3QyxHQUNkaThDLEVBQVVucUQsRUFBT2tPLEVBQU8wN0MsS0FDMUJubEQsRUFBTzRsRCxLQUFjcnFELEVBRXpCLENBQ0EsT0FBT3lFLENBQ1QsQ0FXQSxTQUFTNmxELGNBQWNWLEVBQU81cEQsR0FFNUIsU0FEc0IsTUFBVDRwRCxFQUFnQixFQUFJQSxFQUFNOW9ELFNBQ3BCeXBELFlBQVlYLEVBQU81cEQsRUFBTyxJQUFNLENBQ3JELENBV0EsU0FBU3dxRCxrQkFBa0JaLEVBQU81cEQsRUFBT3lxRCxHQUl2QyxJQUhBLElBQUl2OEMsR0FBUyxFQUNUcE4sRUFBa0IsTUFBVDhvRCxFQUFnQixFQUFJQSxFQUFNOW9ELFNBRTlCb04sRUFBUXBOLEdBQ2YsR0FBSTJwRCxFQUFXenFELEVBQU80cEQsRUFBTTE3QyxJQUMxQixPQUFPLEVBR1gsT0FBTyxDQUNULENBV0EsU0FBU3c4QyxTQUFTZCxFQUFPRSxHQUt2QixJQUpBLElBQUk1N0MsR0FBUyxFQUNUcE4sRUFBa0IsTUFBVDhvRCxFQUFnQixFQUFJQSxFQUFNOW9ELE9BQ25DMkQsRUFBU2xELE1BQU1ULEtBRVZvTixFQUFRcE4sR0FDZjJELEVBQU95SixHQUFTNDdDLEVBQVNGLEVBQU0xN0MsR0FBUUEsRUFBTzA3QyxHQUVoRCxPQUFPbmxELENBQ1QsQ0FVQSxTQUFTa21ELFVBQVVmLEVBQU9nQixHQUt4QixJQUpBLElBQUkxOEMsR0FBUyxFQUNUcE4sRUFBUzhwRCxFQUFPOXBELE9BQ2hCb0YsRUFBUzBqRCxFQUFNOW9ELFNBRVZvTixFQUFRcE4sR0FDZjhvRCxFQUFNMWpELEVBQVNnSSxHQUFTMDhDLEVBQU8xOEMsR0FFakMsT0FBTzA3QyxDQUNULENBY0EsU0FBU2lCLFlBQVlqQixFQUFPRSxFQUFVQyxFQUFhZSxHQUNqRCxJQUFJNThDLEdBQVMsRUFDVHBOLEVBQWtCLE1BQVQ4b0QsRUFBZ0IsRUFBSUEsRUFBTTlvRCxPQUt2QyxJQUhJZ3FELEdBQWFocUQsSUFDZmlwRCxFQUFjSCxJQUFRMTdDLE1BRWZBLEVBQVFwTixHQUNmaXBELEVBQWNELEVBQVNDLEVBQWFILEVBQU0xN0MsR0FBUUEsRUFBTzA3QyxHQUUzRCxPQUFPRyxDQUNULENBY0EsU0FBU2dCLGlCQUFpQm5CLEVBQU9FLEVBQVVDLEVBQWFlLEdBQ3RELElBQUlocUQsRUFBa0IsTUFBVDhvRCxFQUFnQixFQUFJQSxFQUFNOW9ELE9BSXZDLElBSElncUQsR0FBYWhxRCxJQUNmaXBELEVBQWNILElBQVE5b0QsSUFFakJBLEtBQ0xpcEQsRUFBY0QsRUFBU0MsRUFBYUgsRUFBTTlvRCxHQUFTQSxFQUFROG9ELEdBRTdELE9BQU9HLENBQ1QsQ0FZQSxTQUFTaUIsVUFBVXBCLEVBQU9PLEdBSXhCLElBSEEsSUFBSWo4QyxHQUFTLEVBQ1RwTixFQUFrQixNQUFUOG9ELEVBQWdCLEVBQUlBLEVBQU05b0QsU0FFOUJvTixFQUFRcE4sR0FDZixHQUFJcXBELEVBQVVQLEVBQU0xN0MsR0FBUUEsRUFBTzA3QyxHQUNqQyxPQUFPLEVBR1gsT0FBTyxDQUNULENBU0EsSUFBSXFCLEdBQVlDLGFBQWEsVUFtQzdCLFNBQVNDLFlBQVlDLEVBQVlqQixFQUFXa0IsR0FDMUMsSUFBSTVtRCxFQU9KLE9BTkE0bUQsRUFBU0QsR0FBWSxTQUFTcHJELEVBQU9ELEVBQUtxckQsR0FDeEMsR0FBSWpCLEVBQVVucUQsRUFBT0QsRUFBS3FyRCxHQUV4QixPQURBM21ELEVBQVMxRSxHQUNGLENBRVgsSUFDTzBFLENBQ1QsQ0FhQSxTQUFTNm1ELGNBQWMxQixFQUFPTyxFQUFXb0IsRUFBV0MsR0FJbEQsSUFIQSxJQUFJMXFELEVBQVM4b0QsRUFBTTlvRCxPQUNmb04sRUFBUXE5QyxHQUFhQyxFQUFZLEdBQUssR0FFbENBLEVBQVl0OUMsTUFBWUEsRUFBUXBOLEdBQ3RDLEdBQUlxcEQsRUFBVVAsRUFBTTE3QyxHQUFRQSxFQUFPMDdDLEdBQ2pDLE9BQU8xN0MsRUFHWCxPQUFRLENBQ1YsQ0FXQSxTQUFTcThDLFlBQVlYLEVBQU81cEQsRUFBT3VyRCxHQUNqQyxPQUFPdnJELEdBQVVBLEVBaWRuQixTQUFTeXJELGNBQWM3QixFQUFPNXBELEVBQU91ckQsR0FDbkMsSUFBSXI5QyxFQUFRcTlDLEVBQVksRUFDcEJ6cUQsRUFBUzhvRCxFQUFNOW9ELE9BRW5CLE9BQVNvTixFQUFRcE4sR0FDZixHQUFJOG9ELEVBQU0xN0MsS0FBV2xPLEVBQ25CLE9BQU9rTyxFQUdYLE9BQVEsQ0FDVixDQTFkTXU5QyxDQUFjN0IsRUFBTzVwRCxFQUFPdXJELEdBQzVCRCxjQUFjMUIsRUFBTzhCLFVBQVdILEVBQ3RDLENBWUEsU0FBU0ksZ0JBQWdCL0IsRUFBTzVwRCxFQUFPdXJELEVBQVdkLEdBSWhELElBSEEsSUFBSXY4QyxFQUFRcTlDLEVBQVksRUFDcEJ6cUQsRUFBUzhvRCxFQUFNOW9ELFNBRVZvTixFQUFRcE4sR0FDZixHQUFJMnBELEVBQVdiLEVBQU0xN0MsR0FBUWxPLEdBQzNCLE9BQU9rTyxFQUdYLE9BQVEsQ0FDVixDQVNBLFNBQVN3OUMsVUFBVTFyRCxHQUNqQixPQUFPQSxHQUFVQSxDQUNuQixDQVdBLFNBQVM0ckQsU0FBU2hDLEVBQU9FLEdBQ3ZCLElBQUlocEQsRUFBa0IsTUFBVDhvRCxFQUFnQixFQUFJQSxFQUFNOW9ELE9BQ3ZDLE9BQU9BLEVBQVUrcUQsUUFBUWpDLEVBQU9FLEdBQVlocEQsRUFBVW9nRCxDQUN4RCxDQVNBLFNBQVNnSyxhQUFhbnJELEdBQ3BCLE9BQU8sU0FBUytyRCxHQUNkLE9BQWlCLE1BQVZBLEVBQWlCeGlELEVBQVl3aUQsRUFBTy9yRCxFQUM3QyxDQUNGLENBU0EsU0FBU2dzRCxlQUFlRCxHQUN0QixPQUFPLFNBQVMvckQsR0FDZCxPQUFpQixNQUFWK3JELEVBQWlCeGlELEVBQVl3aUQsRUFBTy9yRCxFQUM3QyxDQUNGLENBZUEsU0FBU2lzRCxXQUFXWixFQUFZdEIsRUFBVUMsRUFBYWUsRUFBV08sR0FNaEUsT0FMQUEsRUFBU0QsR0FBWSxTQUFTcHJELEVBQU9rTyxFQUFPazlDLEdBQzFDckIsRUFBY2UsR0FDVEEsR0FBWSxFQUFPOXFELEdBQ3BCOHBELEVBQVNDLEVBQWEvcEQsRUFBT2tPLEVBQU9rOUMsRUFDMUMsSUFDT3JCLENBQ1QsQ0ErQkEsU0FBUzhCLFFBQVFqQyxFQUFPRSxHQUt0QixJQUpBLElBQUlybEQsRUFDQXlKLEdBQVMsRUFDVHBOLEVBQVM4b0QsRUFBTTlvRCxTQUVWb04sRUFBUXBOLEdBQVEsQ0FDdkIsSUFBSUYsRUFBVWtwRCxFQUFTRixFQUFNMTdDLElBQ3pCdE4sSUFBWTBJLElBQ2Q3RSxFQUFTQSxJQUFXNkUsRUFBWTFJLEVBQVc2RCxFQUFTN0QsRUFFeEQsQ0FDQSxPQUFPNkQsQ0FDVCxDQVdBLFNBQVN3bkQsVUFBVW4rQyxFQUFHZzhDLEdBSXBCLElBSEEsSUFBSTU3QyxHQUFTLEVBQ1R6SixFQUFTbEQsTUFBTXVNLEtBRVZJLEVBQVFKLEdBQ2ZySixFQUFPeUosR0FBUzQ3QyxFQUFTNTdDLEdBRTNCLE9BQU96SixDQUNULENBd0JBLFNBQVN5bkQsU0FBU0MsR0FDaEIsT0FBT0EsRUFDSEEsRUFBTzlyRCxNQUFNLEVBQUcrckQsZ0JBQWdCRCxHQUFVLEdBQUdFLFFBQVFwSSxHQUFhLElBQ2xFa0ksQ0FDTixDQVNBLFNBQVNHLFVBQVU3QyxHQUNqQixPQUFPLFNBQVN6cEQsR0FDZCxPQUFPeXBELEVBQUt6cEQsRUFDZCxDQUNGLENBWUEsU0FBU3VzRCxXQUFXVCxFQUFRN29DLEdBQzFCLE9BQU95bkMsU0FBU3puQyxHQUFPLFNBQVNsakIsR0FDOUIsT0FBTytyRCxFQUFPL3JELEVBQ2hCLEdBQ0YsQ0FVQSxTQUFTeXNELFNBQVNDLEVBQU8xc0QsR0FDdkIsT0FBTzBzRCxFQUFNQyxJQUFJM3NELEVBQ25CLENBV0EsU0FBUzRzRCxnQkFBZ0JDLEVBQVlDLEdBSW5DLElBSEEsSUFBSTMrQyxHQUFTLEVBQ1RwTixFQUFTOHJELEVBQVc5ckQsU0FFZm9OLEVBQVFwTixHQUFVeXBELFlBQVlzQyxFQUFZRCxFQUFXMStDLEdBQVEsSUFBTSxJQUM1RSxPQUFPQSxDQUNULENBV0EsU0FBUzQrQyxjQUFjRixFQUFZQyxHQUdqQyxJQUZBLElBQUkzK0MsRUFBUTArQyxFQUFXOXJELE9BRWhCb04sS0FBV3E4QyxZQUFZc0MsRUFBWUQsRUFBVzErQyxHQUFRLElBQU0sSUFDbkUsT0FBT0EsQ0FDVCxDQThCQSxJQUFJNitDLEdBQWVoQixlQWp4QkcsQ0FFcEIsRUFBUSxJQUFNLEVBQVEsSUFBSyxFQUFRLElBQUssRUFBUSxJQUFLLEVBQVEsSUFBSyxFQUFRLElBQzFFLEVBQVEsSUFBTSxFQUFRLElBQUssRUFBUSxJQUFLLEVBQVEsSUFBSyxFQUFRLElBQUssRUFBUSxJQUMxRSxFQUFRLElBQU0sRUFBUSxJQUN0QixFQUFRLElBQU0sRUFBUSxJQUN0QixFQUFRLElBQU0sRUFBUSxJQUFLLEVBQVEsSUFBSyxFQUFRLElBQ2hELEVBQVEsSUFBTSxFQUFRLElBQUssRUFBUSxJQUFLLEVBQVEsSUFDaEQsRUFBUSxJQUFNLEVBQVEsSUFBSyxFQUFRLElBQUssRUFBUSxJQUNoRCxFQUFRLElBQU0sRUFBUSxJQUFLLEVBQVEsSUFBSyxFQUFRLElBQ2hELEVBQVEsSUFBTSxFQUFRLElBQ3RCLEVBQVEsSUFBTSxFQUFRLElBQUssRUFBUSxJQUFLLEVBQVEsSUFBSyxFQUFRLElBQUssRUFBUSxJQUMxRSxFQUFRLElBQU0sRUFBUSxJQUFLLEVBQVEsSUFBSyxFQUFRLElBQUssRUFBUSxJQUFLLEVBQVEsSUFDMUUsRUFBUSxJQUFNLEVBQVEsSUFBSyxFQUFRLElBQUssRUFBUSxJQUNoRCxFQUFRLElBQU0sRUFBUSxJQUFLLEVBQVEsSUFBSyxFQUFRLElBQ2hELEVBQVEsSUFBTSxFQUFRLElBQUssRUFBUSxJQUNuQyxFQUFRLEtBQU0sRUFBUSxLQUN0QixFQUFRLEtBQU0sRUFBUSxLQUN0QixFQUFRLEtBRVIsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUMxQixFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdEYsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3RGLEVBQVUsSUFBTSxFQUFVLElBQzFCLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElB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bUJ4RCxHQUNuQkEsRUFBY3JqRixRQUNkcWpGLEVBQWN4akYsV0FDaEIsSUFDQTJrRixFQUFXUixpQkFBaUIsU0FBUyxXQUM5QlgsR0R4RW9CLFNBQWhCMEQsY0FBaUJ0RCxHQUM1QixJQUFNdUQsRUFBV253RSxPQUFPdXNDLEtBQUtxZ0MsRUFBTzltRCxJQUFJL3hCLFFBQ3RDLFNBQUNxOEUsRUFBS256RixHQUFHLE9BQUFrbkYsdUJBQUFBLHVCQUFBLEdBQVdpTSxHQUFHLEdBQUFyekYseUJBQUEsR0FBR0UsRUFBTTJ2RixFQUFPOW1ELEdBQUc3b0MsR0FBS0MsT0FBSyxHQUNwRCxDQUFDLEdBRUdtekYsRUFBYXpELEVBQU9uNEIsWUFBWXh1QixLQUNoQ3FxRCxFQUFpQnhFLEVBQVV1RSxFQUFZLElBQzdDbEUsRUFBVWtFLEVBQVksR0FBRnRzRixPQUFBdUMsbUJBQU1ncUYsR0FBYyxDQUFFSCxLQUMxQ3hELEVBQXNCQyxFQUN4QixDQ2dFSXNELENBQWMxRCxFQUNoQixHQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL1BhdGgudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL1BvaW50LnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9Ta2V0Y2gudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL1N1YlBhdGgudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL2NsaXBwZXJfdW5taW5pZmllZC5qcyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMDFfSW5pdGlhbFNrZXRjaC50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMDJfR0NvZGVUZXN0LnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy8wM19BcmNzLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy8wNF9CZXppZXJTY3JpYmJsZXMudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3NrZXRjaGVzLzA1X1NwaXJhbGluZy50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMDZfU3BpcmFsaW5nUHJvcG9ydGlvbmFsLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy8wN19Db25jZW50cmljQ2lyY2xlcy50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMDhfQnViYmxlc0luQ2lyY2xlLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy8wOV9HcmlkV2F2ZXMudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3NrZXRjaGVzLzEwX1BlcmxpbkdyaWQudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3NrZXRjaGVzLzExX1BlcmxpbkxpbmVzLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy8xMl9UcmVlLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy8xM19Nb25kYXlNYXplLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy8xNF9DaGFzZXIudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3NrZXRjaGVzLzE1X0thbGVpZG8udHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3NrZXRjaGVzLzE2X0thbGVpZG9DdXJ2ZS50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMTdfUGVycGVuZGljdWxhcml0eS50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMThfUmF5cy50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMTlfQ3V0b3V0VGVzdC50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvdG9vbHMvT3NjLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy90b29scy9SYW5nZS50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvdXRpbHMvZ2VvbVV0aWxzLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy91dGlscy9ub2lzZS50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvdXRpbHMvbnVtYmVyVXRpbHMudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3V0aWxzL3BhdGhVdGlscy50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvdXRpbHMvcmFuZG9tLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbG9kYXNoLmpzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvTWF0cml4LnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9Nb3Rpb24udHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL2RyaXZlcnMvRHJpdmVyLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9kcml2ZXJzL051bGxEcml2ZXIudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL0dDYW52YXMudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL2RyaXZlcnMvR0NvZGVEcml2ZXIudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3NrZXRjaGVzL2luZGV4LnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy91dGlscy9sb2NhbFN0b3JhZ2VVdGlscy50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2F2ZVNsb3RzLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2xpZGVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3ViUGF0aCwge1xuICBBY3Rpb24sXG4gIEFyY0FjdGlvbixcbiAgQmV6aWVyQ3VydmVUb0FjdGlvbixcbiAgRWxsaXBzZUFjdGlvbixcbiAgTGluZVRvQWN0aW9uLFxuICBRdWFkcmF0aWNDdXJ2ZVRvQWN0aW9uLFxufSBmcm9tICcuL1N1YlBhdGgnXG5pbXBvcnQgeyBhcmNUb1BvaW50cywgc2FtZVBvcyB9IGZyb20gJy4vdXRpbHMvcGF0aFV0aWxzJ1xuXG5pbXBvcnQgKiBhcyBDbGlwcGVyTGliIGZyb20gJy4vY2xpcHBlcl91bm1pbmlmaWVkJ1xuaW1wb3J0IFBvaW50IGZyb20gJy4vUG9pbnQnXG5cbmV4cG9ydCB0eXBlIEJvdW5kcyA9IHtcbiAgbGVmdDogbnVtYmVyXG4gIHRvcDogbnVtYmVyXG4gIHJpZ2h0OiBudW1iZXJcbiAgYm90dG9tOiBudW1iZXJcbn1cblxuZXhwb3J0IHR5cGUgV2luZGluZ1J1bGUgPSAnZXZlbm9kZCcgfCAnbm9uemVybycgfCAncG9zaXRpdmUnIHwgJ25lZ2F0aXZlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXRoIHtcbiAgcHVibGljIHN1YlBhdGhzOiBTdWJQYXRoW10gPSBbXVxuICBzdGF0aWMgYWN0aW9ucyA9IFN1YlBhdGguYWN0aW9uc1xuXG4gIHB1YmxpYyBjdXJyZW50OiBTdWJQYXRoXG5cbiAgcHVibGljIGNsb25lKCkge1xuICAgIGNvbnN0IGNvcHkgPSBuZXcgUGF0aCgpXG4gICAgY29weS5zdWJQYXRocyA9IHRoaXMuc3ViUGF0aHMuc2xpY2UoMClcbiAgICByZXR1cm4gY29weVxuICB9XG5cbiAgcHVibGljIG1vdmVUbyh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIGNvbnN0IHN1YlBhdGggPSBuZXcgU3ViUGF0aCgpXG4gICAgc3ViUGF0aC5tb3ZlVG8oeCwgeSlcbiAgICB0aGlzLnN1YlBhdGhzLnB1c2goc3ViUGF0aClcbiAgICB0aGlzLmN1cnJlbnQgPSBzdWJQYXRoXG4gIH1cblxuICBwcml2YXRlIGVuc3VyZSh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIGlmICh0aGlzLnN1YlBhdGhzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5tb3ZlVG8oeCwgeSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY2xvc2UoKSB7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnQpIHJldHVybiBmYWxzZVxuICAgIHRoaXMuY3VycmVudC5jbG9zZSgpXG4gIH1cblxuICAvKipcbiAgICogUGFzcyBhbGwgY3VydmVzIHN0cmFpZ2h0IHRocm91Z2hcbiAgICogKi9cbiAgcHVibGljIGxpbmVUbyguLi5hcmdzOiBMaW5lVG9BY3Rpb25bJ2FyZ3MnXSkge1xuICAgIHRoaXMuZW5zdXJlKC4uLmFyZ3MpXG4gICAgdGhpcy5jdXJyZW50LmxpbmVUbyguLi5hcmdzKVxuICB9XG4gIHB1YmxpYyBhcmMoLi4uYXJnczogQXJjQWN0aW9uWydhcmdzJ10pIHtcbiAgICBjb25zdCBbeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aUNsb2Nrd2lzZV0gPSBhcmdzXG4gICAgdGhpcy5lbGxpcHNlKHgsIHksIHJhZGl1cywgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aUNsb2Nrd2lzZSlcbiAgfVxuICBwdWJsaWMgZWxsaXBzZSguLi5hcmdzOiBFbGxpcHNlQWN0aW9uWydhcmdzJ10pIHtcbiAgICBjb25zdCBbYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhbnRpQ2xvY2t3aXNlXSA9IGFyZ3NcbiAgICBjb25zdCBwb2ludHMgPSBhcmNUb1BvaW50cyhhWCwgYVksIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIHhSYWRpdXMpXG5cbiAgICAvLyB0aGlzLmVuc3VyZShwb2ludHMuc3RhcnQueCwgcG9pbnRzLnN0YXJ0LnkpO1xuXG4gICAgaWYgKCF0aGlzLmN1cnJlbnQgfHwgIXNhbWVQb3ModGhpcy5jdXJyZW50Lmxhc3RQb2ludCgpLCBwb2ludHMuc3RhcnQpKSB7XG4gICAgICB0aGlzLm1vdmVUbyhwb2ludHMuc3RhcnQueCwgcG9pbnRzLnN0YXJ0LnkpXG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50LmVsbGlwc2UoLi4uYXJncylcbiAgfVxuICBwdWJsaWMgcXVhZHJhdGljQ3VydmVUbyguLi5hcmdzOiBRdWFkcmF0aWNDdXJ2ZVRvQWN0aW9uWydhcmdzJ10pIHtcbiAgICB0aGlzLmN1cnJlbnQucXVhZHJhdGljQ3VydmVUbyguLi5hcmdzKVxuICB9XG4gIHB1YmxpYyBiZXppZXJDdXJ2ZVRvKC4uLmFyZ3M6IEJlemllckN1cnZlVG9BY3Rpb25bJ2FyZ3MnXSkge1xuICAgIHRoaXMuY3VycmVudC5iZXppZXJDdXJ2ZVRvKC4uLmFyZ3MpXG4gIH1cbiAgcHVibGljIHJlY3QoeDogbnVtYmVyLCB5OiBudW1iZXIsIHc6IG51bWJlciwgaDogbnVtYmVyKSB7XG4gICAgdGhpcy5tb3ZlVG8oeCwgeSlcbiAgICB0aGlzLmxpbmVUbyh4ICsgdywgeSlcbiAgICB0aGlzLmxpbmVUbyh4ICsgdywgeSArIGgpXG4gICAgdGhpcy5saW5lVG8oeCwgeSArIGgpXG4gICAgdGhpcy5saW5lVG8oeCwgeSlcbiAgfVxuXG4gIHB1YmxpYyB0b1BvbHlzKHNjYWxlOiBudW1iZXIsIGRpdmlzaW9ucz86IG51bWJlcikge1xuICAgIGlmICghc2NhbGUpIHRocm93ICdOTyBTQ0FMRSEnXG4gICAgcmV0dXJuIHRoaXMuc3ViUGF0aHMubWFwKChzdWJQYXRoKSA9PiBzdWJQYXRoLnRvUG9seShzY2FsZSwgZGl2aXNpb25zKSlcbiAgfVxuICBwdWJsaWMgZnJvbVBvbHlzKHBvbHlnb25zOiB7IFg6IG51bWJlcjsgWTogbnVtYmVyIH1bXVtdLCBzY2FsZTogbnVtYmVyKSB7XG4gICAgaWYgKCFzY2FsZSkgdGhyb3cgJ05PIFNDQUxFISdcblxuICAgIHRoaXMuc3ViUGF0aHMgPSBbXVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwb2x5Z29ucy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIGNvbnN0IHN1YlBhdGggPSBuZXcgU3ViUGF0aCgpXG4gICAgICBzdWJQYXRoLmZyb21Qb2x5cyhwb2x5Z29uc1tpXSwgc2NhbGUpXG4gICAgICB0aGlzLnN1YlBhdGhzLnB1c2goc3ViUGF0aClcbiAgICAgIHRoaXMuY3VycmVudCA9IHN1YlBhdGhcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG4gIHB1YmxpYyBjbGlwKGNsaXBSZWdpb246IFBhdGgsIGNsaXBUeXBlPzogQ2xpcHBlckxpYi5DbGlwVHlwZSwgZGl2aXNpb25zPzogbnVtYmVyKSB7XG4gICAgaWYgKCFjbGlwUmVnaW9uKSByZXR1cm4gdGhpc1xuXG4gICAgY2xpcFR5cGUgPSBjbGlwVHlwZSB8fCAwXG5cbiAgICBjb25zdCBzY2FsZSA9IDEwMDBcbiAgICBjb25zdCBzdWJqUG9seXMgPSB0aGlzLnRvUG9seXMoc2NhbGUsIGRpdmlzaW9ucylcbiAgICBjb25zdCBjbGlwUG9seXMgPSBjbGlwUmVnaW9uLnRvUG9seXMoc2NhbGUsIGRpdmlzaW9ucylcblxuICAgIC8vIENsZWFuIGJvdGhcbiAgICAvLyBjb25zdCBzdWJqUG9seXMgPSBDbGlwcGVyTGliLkNsaXBwZXIuQ2xlYW5Qb2x5Z29ucyhzdWJqUG9seXMsIDEpO1xuICAgIC8vIGNvbnN0IGNsaXBQb2x5cyA9IENsaXBwZXJMaWIuQ2xpcHBlci5DbGVhblBvbHlnb25zKGNsaXBQb2x5cywgMSk7XG4gICAgLy8gY29uc3Qgc3VialBvbHlzID0gQ2xpcHBlckxpYi5DbGlwcGVyLlNpbXBsaWZ5UG9seWdvbnMoc3VialBvbHlzLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvKTtcbiAgICAvLyBjb25zdCBjbGlwUG9seXMgPSBDbGlwcGVyTGliLkNsaXBwZXIuU2ltcGxpZnlQb2x5Z29ucyhjbGlwUG9seXMsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm8pO1xuXG4gICAgY29uc3QgY3ByID0gbmV3IENsaXBwZXJMaWIuQ2xpcHBlcigpXG4gICAgLy8gY29uc3QgY3ByID0gbmV3IENsaXBwZXIoKVxuICAgIC8vIGNwci5QcmVzZXJ2ZUNvbGxpbmVhciA9IHRydWU7XG4gICAgLy8gY3ByLlJldmVyc2VTb2x1dGlvbiA9IHRydWU7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY3ByLkFkZFBhdGhzKHN1YmpQb2x5cywgQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QsIHRydWUpXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNwci5BZGRQYXRocyhjbGlwUG9seXMsIENsaXBwZXJMaWIuUG9seVR5cGUucHRDbGlwLCB0cnVlKVxuXG4gICAgY29uc3QgY2xpcHBlZDogYW55W10gPSBbXVxuICAgIGNwci5FeGVjdXRlKGNsaXBUeXBlLCBjbGlwcGVkKVxuXG4gICAgY29uc3QgcGF0aCA9IG5ldyBQYXRoKClcbiAgICBwYXRoLmZyb21Qb2x5cyhjbGlwcGVkLCBzY2FsZSlcbiAgICByZXR1cm4gcGF0aFxuICB9XG5cbiAgcHVibGljIHRyYW5zbGF0ZSh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBQYXRoKClcbiAgICB0aGlzLnN1YlBhdGhzLmZvckVhY2goZnVuY3Rpb24gKHN1YlBhdGgpIHtcbiAgICAgIGNvbnN0IHB0cyA9IHN1YlBhdGguZ2V0UG9pbnRzKClcbiAgICAgIHJlc3VsdC5tb3ZlVG8ocHRzWzBdLnggKyB4LCBwdHNbMF0ueSArIHkpXG4gICAgICBwdHMuc2xpY2UoMSkuZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICByZXN1bHQubGluZVRvKHAueCArIHgsIHAueSArIHkpXG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgcHVibGljIGNsaXBUb0JvdW5kcyhib3VuZHM6IEJvdW5kcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBQYXRoKClcbiAgICBsZXQgcDAgPSBuZXcgUG9pbnQoKVxuICAgIGxldCBwMHUgPSBwMC5jbG9uZSgpXG4gICAgbGV0IHAxdTogUG9pbnRcblxuICAgIHRoaXMuc3ViUGF0aHMuZm9yRWFjaCgoc3ViUGF0aCkgPT4ge1xuICAgICAgY29uc3QgcHRzID0gc3ViUGF0aC5nZXRQb2ludHMoKVxuXG4gICAgICBwdHMuZm9yRWFjaChmdW5jdGlvbiAocDEsIGkpIHtcbiAgICAgICAgcDEgPSBwMS5jbG9uZSgpXG4gICAgICAgIHAxdSA9IHAxLmNsb25lKClcblxuICAgICAgICAvLyBpZihwMS55IDwgYm91bmRzLnRvcCAmJiBwMC55IDwgYm91bmRzLnRvcCkge1xuICAgICAgICAvLyAgIHJldHVybjtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyBpZihwMS54ID4gYm91bmRzLnJpZ2h0ICYmIHAwLnggPiBib3VuZHMucmlnaHQpIHtcbiAgICAgICAgLy8gICByZXR1cm47XG4gICAgICAgIC8vIH1cblxuICAgICAgICBpZiAocDEueSA8IGJvdW5kcy50b3ApIHtcbiAgICAgICAgICBjb25zdCBtID0gKHAxLnggLSBwMC54KSAvIChwMS55IC0gcDAueSlcbiAgICAgICAgICBwMS54ICs9IG0gKiAoYm91bmRzLnRvcCAtIHAxLnkpIHx8IDBcbiAgICAgICAgICBwMS55ID0gYm91bmRzLnRvcFxuICAgICAgICB9IGVsc2UgaWYgKHAwdS55IDwgYm91bmRzLnRvcCkge1xuICAgICAgICAgIGNvbnN0IG0gPSAocDEueCAtIHAwdS54KSAvIChwMS55IC0gcDB1LnkpXG4gICAgICAgICAgY29uc3QgeCA9IG0gKiAoYm91bmRzLnRvcCAtIHAxLnkpIHx8IDBcblxuICAgICAgICAgIHJlc3VsdC5tb3ZlVG8ocDEueCArIHgsIGJvdW5kcy50b3ApXG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZihwMS54IDwgYm91bmRzLmxlZnQpIHtcbiAgICAgICAgLy8gICBjb25zdCBtID0gKHAxLnkgLSBwMC55KSAvIChwMS54IC0gcDAueCk7XG4gICAgICAgIC8vICAgcDEueSArPSBtICogKGJvdW5kcy5sZWZ0IC0gcDEueCk7XG4gICAgICAgIC8vICAgcDEueCA9IGJvdW5kcy5sZWZ0O1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGVsc2UgaWYocDB1LnggPCBib3VuZHMubGVmdCkge1xuICAgICAgICAvLyAgIGNvbnN0IG0gPSAocDEueSAtIHAwdS55KSAvIChwMS54IC0gcDB1LngpO1xuICAgICAgICAvLyAgIGNvbnN0IHkgPSBtICogKGJvdW5kcy5sZWZ0IC0gcDEueCk7XG4gICAgICAgIC8vICAgLy8gcmVzdWx0Lm1vdmVUbyhib3VuZHMubGVmdCwgYm91bmRzLnRvcCk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICBpZiAocDEueCA+IGJvdW5kcy5yaWdodCkge1xuICAgICAgICAgIGNvbnN0IG0gPSAocDEueSAtIHAwLnkpIC8gKHAxLnggLSBwMC54KVxuICAgICAgICAgIHAxLnkgKz0gbSAqIChib3VuZHMucmlnaHQgLSBwMS54KVxuICAgICAgICAgIHAxLnggPSBib3VuZHMucmlnaHRcbiAgICAgICAgfSBlbHNlIGlmIChwMHUueCA+IGJvdW5kcy5yaWdodCkge1xuICAgICAgICAgIC8vIGNvbnN0IG0gPSAocDEueSAtIHAwdS55KSAvIChwMS54IC0gcDB1LngpXG4gICAgICAgICAgLy8gY29uc3QgeSA9IG0gKiAoYm91bmRzLnJpZ2h0IC0gcDEueClcbiAgICAgICAgICAvLyByZXN1bHQubW92ZVRvKGJvdW5kcy5yaWdodCwgcDEueS15KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpID09PSAwKSByZXN1bHQubW92ZVRvKHAxLngsIHAxLnkpXG4gICAgICAgIGVsc2UgcmVzdWx0LmxpbmVUbyhwMS54LCBwMS55KVxuXG4gICAgICAgIHAwID0gcDFcbiAgICAgICAgcDB1ID0gcDF1XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBwdWJsaWMgc2ltcGxpZnkod2luZGluZ1J1bGU/OiBXaW5kaW5nUnVsZSwgZGl2aXNpb25zPzogbnVtYmVyKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBzaW5nbGUgZWxsaXBzZSBqdXN0IGNoYW5nZSB0aGUgcmFkaXVzLlxuICAgIC8vIGlmKHRoaXMuaXMoJ2VsbGlwc2UnKSkge1xuICAgIC8vICAgICBjb25zdCByZXN1bHQgPSBuZXcgUGF0aCgpO1xuICAgIC8vICAgICBjb25zdCBhcmdzID0gdGhpcy5zdWJQYXRoc1swXS5hY3Rpb25zWzFdLmFyZ3M7XG4gICAgLy8gICAgIHJlc3VsdC5lbGxpcHNlKFxuICAgIC8vICAgICAgIGFyZ3NbMF0sXG4gICAgLy8gICAgICAgYXJnc1sxXSxcbiAgICAvLyAgICAgICBhcmdzWzJdLFxuICAgIC8vICAgICAgIGFyZ3NbM10sXG4gICAgLy8gICAgICAgYXJnc1s0XSxcbiAgICAvLyAgICAgICBhcmdzWzVdLFxuICAgIC8vICAgICAgIGFyZ3NbNl1cbiAgICAvLyAgICAgKTtcbiAgICAvLyAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAvLyB9XG5cbiAgICBjb25zdCBzY2FsZSA9IDEwMDBcbiAgICBsZXQgcG9seXMgPSB0aGlzLnRvUG9seXMoc2NhbGUsIGRpdmlzaW9ucylcbiAgICBsZXQgdHlwZSA9IENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm9cblxuICAgIGlmICh3aW5kaW5nUnVsZSA9PT0gJ2V2ZW5vZGQnKSB7XG4gICAgICB0eXBlID0gQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZFxuICAgIH1cblxuICAgIHBvbHlzID0gQ2xpcHBlckxpYi5DbGlwcGVyLlNpbXBsaWZ5UG9seWdvbnMocG9seXMsIHR5cGUpXG5cbiAgICBjb25zdCByZXN1bHQgPSBuZXcgUGF0aCgpXG4gICAgcmVzdWx0LmZyb21Qb2x5cyhwb2x5cywgc2NhbGUpXG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBwdWJsaWMgaXMoYWN0aW9uVHlwZTogQWN0aW9uWyd0eXBlJ10pIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLnN1YlBhdGhzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgdGhpcy5zdWJQYXRoc1swXS5hY3Rpb25zLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgdGhpcy5zdWJQYXRoc1swXS5hY3Rpb25zWzFdLnR5cGUgPT09IGFjdGlvblR5cGVcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBwdWJsaWMgb2Zmc2V0KGRlbHRhOiBudW1iZXIsIGRpdmlzaW9ucz86IG51bWJlcikge1xuICAgIGlmIChkZWx0YSA9PT0gMCkgcmV0dXJuIHRoaXNcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3Igc2luZ2xlIGVsbGlwc2VcbiAgICAvLyBqdXN0IGNoYW5nZSB0aGUgcmFkaXVzLlxuICAgIGlmICh0aGlzLmlzKCdFTExJUFNFJykpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBQYXRoKClcbiAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMuc3ViUGF0aHNbMF0uYWN0aW9uc1sxXSBhcyBFbGxpcHNlQWN0aW9uXG4gICAgICBjb25zdCBhcmdzID0gYWN0aW9uLmFyZ3NcbiAgICAgIGlmIChhcmdzWzJdICsgZGVsdGEgPCAwKSByZXR1cm4gZmFsc2VcbiAgICAgIHJlc3VsdC5lbGxpcHNlKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0gKyBkZWx0YSwgYXJnc1szXSArIGRlbHRhLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKVxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cblxuICAgIGNvbnN0IHNjYWxlID0gMTAwMFxuXG4gICAgY29uc3QgcG9seWdvbnMgPSB0aGlzLnRvUG9seXMoc2NhbGUsIGRpdmlzaW9ucylcblxuICAgIC8vIG9mZnNldFxuICAgIC8vIGNvbnN0IG1pdGVyTGltaXQgPSAxMDAwICogc2NhbGVcblxuICAgIGNvbnN0IGNvID0gbmV3IENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldCgpXG4gICAgLy8gY28uUHJlc2VydmVDb2xsaW5lYXIgPSB0cnVlO1xuICAgIC8vIGNvLlJldmVyc2VTb2x1dGlvbiA9IHRydWU7XG5cbiAgICBjby5BZGRQYXRocyhwb2x5Z29ucywgQ2xpcHBlckxpYi5Kb2luVHlwZS5qdE1pdGVyLCBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRQb2x5Z29uKVxuXG4gICAgLy8gVE9ETzpcbiAgICBjb25zdCBzb2x1dGlvbjogYW55W10gPSBbXVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvLkV4ZWN1dGUoc29sdXRpb24sIGRlbHRhICogc2NhbGUpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoIXNvbHV0aW9uIHx8IHNvbHV0aW9uLmxlbmd0aCA9PT0gMCB8fCBzb2x1dGlvblswXS5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZVxuXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFBhdGgoKVxuICAgIHJlc3VsdC5mcm9tUG9seXMoc29sdXRpb24sIHNjYWxlKVxuXG4gICAgcmVzdWx0LmNsb3NlKCkgLy8gTm90IHN1cmUgd2h5IEkgbmVlZCB0byBkbyB0aGlzIG5vd1xuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHB1YmxpYyByYW1wKGRlcHRoOiBudW1iZXIpIHt9XG5cbiAgcHVibGljIGFkZFBhdGgocGF0aDI6IFBhdGgpIHtcbiAgICB0aGlzLnN1YlBhdGhzID0gdGhpcy5zdWJQYXRocy5jb25jYXQocGF0aDIuc3ViUGF0aHMpXG4gIH1cblxuICBwdWJsaWMgZXN0aW1hdGVNYXhPZmZzZXQoZGl2aXNpb25zOiBudW1iZXIpIHtcbiAgICBjb25zdCBib3VuZHMgPSB0aGlzLmdldEJvdW5kcygpXG4gICAgY29uc3Qgd2lkdGggPSBNYXRoLmFicyhib3VuZHMucmlnaHQgLSBib3VuZHMubGVmdClcbiAgICBjb25zdCBoZWlnaHQgPSBNYXRoLmFicyhib3VuZHMuYm90dG9tIC0gYm91bmRzLnRvcClcbiAgICBsZXQgbHQgPSBNYXRoLm1pbih3aWR0aCwgaGVpZ2h0KSAvIDJcbiAgICBsZXQgZ3QgPSAwXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDU7ICsraSkge1xuICAgICAgY29uc3QgdGVzdCA9IGd0ICsgKGx0IC0gZ3QpIC8gMlxuICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5vZmZzZXQoLXRlc3QsIDMpXG5cbiAgICAgIGlmIChvZmZzZXQpIGd0ID0gdGVzdFxuICAgICAgZWxzZSBsdCA9IHRlc3RcbiAgICB9XG5cbiAgICByZXR1cm4geyBsdDogbHQsIGd0OiBndCB9XG4gIH1cblxuICBwdWJsaWMgZmlsbFBhdGgoZGlhbWV0ZXI6IG51bWJlciwgZGl2aXNpb25zOiBudW1iZXIpIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgUGF0aCgpXG4gICAgY29uc3Qgb3ZlcmxhcCA9IE1hdGguc2luKE1hdGguUEkgLyA0KVxuICAgIGNvbnN0IHBhdGggPSB0aGlzXG5cbiAgICBsZXQgbWF4ID0gcGF0aC5lc3RpbWF0ZU1heE9mZnNldCg1KS5sdFxuICAgIG1heCAtPSBkaWFtZXRlciAvIDJcblxuICAgIGZvciAobGV0IGkgPSAtbWF4OyBpIDwgLWRpYW1ldGVyIC8gMjsgaSArPSBkaWFtZXRlciAqIG92ZXJsYXApIHtcbiAgICAgIGxldCBvZmZzZXRQYXRoID0gcGF0aC5vZmZzZXQoaSwgZGl2aXNpb25zKVxuICAgICAgaWYgKCFvZmZzZXRQYXRoKSBicmVha1xuICAgICAgb2Zmc2V0UGF0aCA9IG9mZnNldFBhdGgucmV2ZXJzZSgpXG4gICAgICByZXN1bHQuYWRkUGF0aChvZmZzZXRQYXRoKVxuICAgIH1cblxuICAgIC8vIEZpbmlzaGluZyBwYXNzXG4gICAgY29uc3QgZmluaXNoID0gcGF0aC5vZmZzZXQoLWRpYW1ldGVyIC8gMiwgZGl2aXNpb25zKVxuICAgIGlmIChmaW5pc2gpIHJlc3VsdC5hZGRQYXRoKGZpbmlzaC5yZXZlcnNlKCkpXG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBwdWJsaWMgY29ubmVjdEVuZHMoZGlhbWV0ZXI6IG51bWJlcikge1xuICAgIGZvciAobGV0IGkgPSB0aGlzLnN1YlBhdGhzLmxlbmd0aCAtIDE7IGkgPiAwOyAtLWkpIHtcbiAgICAgIGxldCBzcDEgPSB0aGlzLnN1YlBhdGhzW2kgLSAxXVxuICAgICAgbGV0IHNwMiA9IHRoaXMuc3ViUGF0aHNbaV1cblxuICAgICAgY29uc3QgcDEgPSBzcDEubGFzdFBvaW50KClcbiAgICAgIGNvbnN0IG5lYXJlc3QgPSBzcDIubmVhcmVzdFBvaW50KHAxKVxuICAgICAgY29uc3QgcDIgPSBuZWFyZXN0LnBvaW50XG5cbiAgICAgIGlmIChuZWFyZXN0LmRpc3RhbmNlIDwgZGlhbWV0ZXIgKiAyKSB7XG4gICAgICAgIHNwMiA9IHNwMi5zaGlmdChuZWFyZXN0LmkpXG4gICAgICAgIHNwMS5saW5lVG8ocDIueCwgcDIueSlcbiAgICAgICAgc3AyLmFjdGlvbnNbMF0udHlwZSA9ICdMSU5FX1RPJ1xuICAgICAgICBzcDEuYWN0aW9ucyA9IHNwMS5hY3Rpb25zLmNvbmNhdChzcDIuYWN0aW9ucylcbiAgICAgICAgdGhpcy5zdWJQYXRocy5zcGxpY2UoaSwgMSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcHVibGljIHJldmVyc2UoKSB7XG4gICAgaWYgKHRoaXMuaXMoJ0VMTElQU0UnKSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFBhdGgoKVxuICAgICAgY29uc3QgYWN0aW9uID0gdGhpcy5zdWJQYXRoc1swXS5hY3Rpb25zWzFdIGFzIEVsbGlwc2VBY3Rpb25cbiAgICAgIGNvbnN0IGFyZ3MgPSBhY3Rpb24uYXJnc1xuXG4gICAgICByZXN1bHQuZWxsaXBzZShcbiAgICAgICAgYXJnc1swXSxcbiAgICAgICAgYXJnc1sxXSxcbiAgICAgICAgYXJnc1syXSxcbiAgICAgICAgYXJnc1szXSxcbiAgICAgICAgYXJnc1s1XSwgLy8gZW5kIGFzIHN0YXJ0XG4gICAgICAgIGFyZ3NbNF0sIC8vIHN0YXJ0IGFzIGVuZFxuICAgICAgICAhYXJnc1s2XSAvLyBpbnZlcnQgY2N3XG4gICAgICApXG5cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBuZXcgUGF0aCgpXG5cbiAgICByZXN1bHQuc3ViUGF0aHMgPSB0aGlzLnN1YlBhdGhzLm1hcCgoc3ApID0+IHNwLnJldmVyc2UoKSkucmV2ZXJzZSgpXG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBwdWJsaWMgc29ydCgpIHtcbiAgICBpZiAodGhpcy5zdWJQYXRocy5sZW5ndGggPT09IDApIHJldHVybiB0aGlzXG5cbiAgICBjb25zdCBjb3B5ID0gbmV3IFBhdGgoKVxuXG4gICAgbGV0IHAwID0gdGhpcy5zdWJQYXRoc1swXS5sYXN0UG9pbnQoKVxuXG4gICAgY29weS5zdWJQYXRocyA9IHRoaXMuc3ViUGF0aHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgcDEgPSBhLmxhc3RQb2ludCgpXG4gICAgICBjb25zdCBwMiA9IGIuZmlyc3RQb2ludCgpXG4gICAgICBjb25zdCBkMSA9IFBvaW50LmRpc3RhbmNlKHAxLCBwMClcbiAgICAgIGNvbnN0IGQyID0gUG9pbnQuZGlzdGFuY2UocDIsIHAwKVxuXG4gICAgICAvLyBNb3ZpbmcgdGFyZ2V0XG4gICAgICBwMCA9IGIubGFzdFBvaW50KClcblxuICAgICAgaWYgKGQxIDwgZDIpIHJldHVybiAtMVxuICAgICAgaWYgKGQxID4gZDIpIHJldHVybiAxXG5cbiAgICAgIHJldHVybiAwXG4gICAgfSlcblxuICAgIHJldHVybiBjb3B5XG4gIH1cblxuICBwdWJsaWMgZmlyc3RQb2ludCgpIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudCkgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRoaXMuc3ViUGF0aHNbMF0uZmlyc3RQb2ludCgpXG4gIH1cblxuICBwdWJsaWMgbGFzdFBvaW50KCkge1xuICAgIGlmICghdGhpcy5jdXJyZW50KSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gdGhpcy5zdWJQYXRoc1t0aGlzLnN1YlBhdGhzLmxlbmd0aCAtIDFdLmxhc3RQb2ludCgpXG4gIH1cblxuICBwdWJsaWMgZ2V0UG9pbnRzKGRpdmlzaW9ucz86IG51bWJlcik6IFBvaW50W10ge1xuICAgIGNvbnN0IHB0czogUG9pbnRbXSA9IFtdXG4gICAgdGhpcy5zdWJQYXRocy5mb3JFYWNoKChzcCkgPT4ge1xuICAgICAgcHRzLnB1c2goLi4uc3AuZ2V0UG9pbnRzKGRpdmlzaW9ucykpXG4gICAgfSlcbiAgICByZXR1cm4gcHRzXG4gIH1cblxuICBwdWJsaWMgZ2V0Qm91bmRzKCk6IEJvdW5kcyB7XG4gICAgY29uc3QgcHRzID0gdGhpcy5nZXRQb2ludHMoKVxuICAgIGNvbnN0IHAwID0gdGhpcy5maXJzdFBvaW50KCkgfHwgbmV3IFBvaW50KClcbiAgICBjb25zdCByZXM6IEJvdW5kcyA9IHtcbiAgICAgIGxlZnQ6IHAwLngsXG4gICAgICB0b3A6IHAwLnksXG4gICAgICByaWdodDogcDAueCxcbiAgICAgIGJvdHRvbTogcDAueSxcbiAgICB9XG5cbiAgICBwdHMuZm9yRWFjaCgocCkgPT4ge1xuICAgICAgcmVzLmxlZnQgPSBNYXRoLm1pbihyZXMubGVmdCwgcC54KVxuICAgICAgcmVzLnRvcCA9IE1hdGgubWluKHJlcy50b3AsIHAueSlcbiAgICAgIHJlcy5yaWdodCA9IE1hdGgubWF4KHJlcy5yaWdodCwgcC54KVxuICAgICAgcmVzLmJvdHRvbSA9IE1hdGgubWF4KHJlcy5ib3R0b20sIHAueSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb2ludCB7XG4gIHB1YmxpYyB4OiBudW1iZXJcbiAgcHVibGljIHk6IG51bWJlclxuICBwdWJsaWMgejogbnVtYmVyXG4gIHB1YmxpYyBhOiBudW1iZXJcbiAgY29uc3RydWN0b3IoeDogbnVtYmVyID0gMCwgeTogbnVtYmVyID0gMCwgej86IG51bWJlciwgYT86IG51bWJlcikge1xuICAgIHRoaXMueCA9IGlzTmFOKHgpID8gMCA6IHhcbiAgICB0aGlzLnkgPSBpc05hTih5KSA/IDAgOiB5XG4gICAgdGhpcy56ID0gaXNOYU4oeikgPyAwIDogelxuICAgIHRoaXMuYSA9IGlzTmFOKGEpID8gMCA6IGFcbiAgfVxuICBzdGF0aWMgZGlzdGFuY2UocG9pbnQxOiBQb2ludCwgcG9pbnQyOiBQb2ludCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocG9pbnQyLnggLSBwb2ludDEueCwgMikgKyBNYXRoLnBvdyhwb2ludDIueSAtIHBvaW50MS55LCAyKSlcbiAgfVxuICBzdGF0aWMgYW5nbGVCZXR3ZWVuKHBvaW50MTogUG9pbnQsIHBvaW50MjogUG9pbnQpIHtcbiAgICByZXR1cm4gTWF0aC5hY29zKHBvaW50MS5kb3QocG9pbnQyKSAvIChwb2ludDEubWFnbml0dWRlKCkgKiBwb2ludDIubWFnbml0dWRlKCkpKVxuICB9XG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54LCB0aGlzLnkpXG4gIH1cbiAgcm91bmQoKSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludChNYXRoLnJvdW5kKHRoaXMueCksIE1hdGgucm91bmQodGhpcy55KSlcbiAgfVxuICBlcXVhbHMocG9pbnQ6IFBvaW50KSB7XG4gICAgcmV0dXJuIHRoaXMueCA9PT0gcG9pbnQueCAmJiB0aGlzLnkgPT09IHBvaW50LnlcbiAgfVxuICBhZGQocG9pbnQ6IFBvaW50KSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggKyBwb2ludC54LCB0aGlzLnkgKyBwb2ludC55KVxuICB9XG4gIG1pZHBvaW50KHBvaW50OiBQb2ludCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQoKHRoaXMueCArIHBvaW50LngpIC8gMiwgKHRoaXMueSArIHBvaW50LnkpIC8gMilcbiAgfVxuICBzdWJ0cmFjdChwb2ludDogUG9pbnQpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAtIHBvaW50LngsIHRoaXMueSAtIHBvaW50LnkpXG4gIH1cbiAgbWFnbml0dWRlKCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55KVxuICB9XG4gIGFuZ2xlKCkge1xuICAgIHJldHVybiBNYXRoLmF0YW4yKHRoaXMueSwgdGhpcy54KVxuICB9XG4gIG11bHRpcGx5KHBvaW50OiBQb2ludCB8IG51bWJlcikge1xuICAgIHJldHVybiB0eXBlb2YgcG9pbnQgPT09ICdudW1iZXInXG4gICAgICA/IG5ldyBQb2ludCh0aGlzLnggKiBwb2ludCwgdGhpcy55ICogcG9pbnQpXG4gICAgICA6IG5ldyBQb2ludCh0aGlzLnggKiBwb2ludC54LCB0aGlzLnkgKiBwb2ludC55KVxuICB9XG4gIHNjYWxlKHNjYWxlOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5tdWx0aXBseShzY2FsZSlcbiAgfVxuICBkaXZpZGUocG9pbnQ6IFBvaW50IHwgbnVtYmVyKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBwb2ludCA9PT0gJ251bWJlcidcbiAgICAgID8gbmV3IFBvaW50KHRoaXMueCAvIHBvaW50LCB0aGlzLnkgLyBwb2ludClcbiAgICAgIDogbmV3IFBvaW50KHRoaXMueCAvIHBvaW50LngsIHRoaXMueSAvIHBvaW50LnkpXG4gIH1cbiAgbm9ybWFsaXplKCkge1xuICAgIHJldHVybiB0aGlzLm11bHRpcGx5KDEgLyB0aGlzLm1hZ25pdHVkZSgpKVxuICB9XG4gIHNldCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMueCA9IHhcbiAgICB0aGlzLnkgPSB5XG4gIH1cbiAgZG90KHBvaW50OiBQb2ludCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMueCAqIHBvaW50LnggKyB0aGlzLnkgKiBwb2ludC55XG4gIH1cbiAgdHJhbnNsYXRlKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggKyB4LCB0aGlzLnkgKyB5KVxuICB9XG4gIG1vdmVBbG9uZ0FuZ2xlKGFuZ2xlOiBudW1iZXIsIGRpc3RhbmNlOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2xhdGUoTWF0aC5jb3MoYW5nbGUpICogZGlzdGFuY2UsIE1hdGguc2luKGFuZ2xlKSAqIGRpc3RhbmNlKVxuICB9XG4gIG1vdmVUb3dhcmRzKHBvaW50OiBQb2ludCwgZGlzdGFuY2U6IG51bWJlcikge1xuICAgIGNvbnN0IGFuZ2xlID0gdGhpcy5hbmdsZVRvKHBvaW50KVxuICAgIHJldHVybiB0aGlzLm1vdmVBbG9uZ0FuZ2xlKGFuZ2xlLCBkaXN0YW5jZSlcbiAgfVxuICByb3RhdGUoYW5nbGU6IG51bWJlcikge1xuICAgIGNvbnN0IHggPSB0aGlzLnggKiBNYXRoLmNvcyhhbmdsZSkgLSB0aGlzLnkgKiBNYXRoLnNpbihhbmdsZSlcbiAgICBjb25zdCB5ID0gdGhpcy54ICogTWF0aC5zaW4oYW5nbGUpICsgdGhpcy55ICogTWF0aC5jb3MoYW5nbGUpXG4gICAgcmV0dXJuIG5ldyBQb2ludCh4LCB5KVxuICB9XG4gIGFuZ2xlVG8ocG9pbnQ6IFBvaW50KSB7XG4gICAgcmV0dXJuIE1hdGguYXRhbjIocG9pbnQueSAtIHRoaXMueSwgcG9pbnQueCAtIHRoaXMueClcbiAgfVxuICBkaXN0YW5jZVRvKHBvaW50OiBQb2ludCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocG9pbnQueCAtIHRoaXMueCwgMikgKyBNYXRoLnBvdyhwb2ludC55IC0gdGhpcy55LCAyKSlcbiAgfVxuICBhbmdsZUJldHdlZW4ocG9pbnQ6IFBvaW50KSB7XG4gICAgcmV0dXJuIE1hdGguYWNvcyh0aGlzLmRvdChwb2ludCkgLyAodGhpcy5tYWduaXR1ZGUoKSAqIHBvaW50Lm1hZ25pdHVkZSgpKSlcbiAgfVxuICB0b1VuaXQoKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsdGlwbHkoMSAvIHRoaXMubWFnbml0dWRlKCkpXG4gIH1cbn1cbiIsImltcG9ydCBHQ2FudmFzIGZyb20gJy4vR0NhbnZhcydcbmltcG9ydCBSYW5nZSBmcm9tICcuL3NrZXRjaGVzL3Rvb2xzL1JhbmdlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFNrZXRjaENvbmZpZyB7XG4gIGN0eDogR0NhbnZhc1xuICB3aWR0aDogbnVtYmVyXG4gIGhlaWdodDogbnVtYmVyXG59XG5cbmV4cG9ydCBjbGFzcyBTa2V0Y2gge1xuICBwdWJsaWMgY3R4OiBHQ2FudmFzXG4gIHB1YmxpYyBjYW52YXNXaWR0aDogbnVtYmVyXG4gIHB1YmxpYyBjYW52YXNIZWlnaHQ6IG51bWJlclxuICAvKiogY2FudmFzIHdpZHRoICovXG4gIHB1YmxpYyBjdzogbnVtYmVyXG4gIC8qKiBjYW52YXMgaGVpZ2h0ICovXG4gIHB1YmxpYyBjaDogbnVtYmVyXG4gIC8qKiBjYW52YXMgY2VudGVyIHggKi9cbiAgcHVibGljIGN4OiBudW1iZXJcbiAgLyoqIGNhbnZhcyBjZW50ZXIgeSAqL1xuICBwdWJsaWMgY3k6IG51bWJlclxuICAvKiogZWRpdGFibGUgdmFsdWVzIG9iamVjdCAqL1xuICBwdWJsaWMgdnM6IHsgW2tleTogc3RyaW5nXTogUmFuZ2UgfSA9IHt9XG4gIHN0YXRpYyBnZW5lcmF0ZUdDb2RlOiBib29sZWFuID0gdHJ1ZVxuICBzdGF0aWMgZW5hYmxlQ3V0b3V0czogYm9vbGVhbiA9IHRydWVcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFNrZXRjaENvbmZpZykge1xuICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eFxuICAgIHRoaXMuY3R4LmVuYWJsZUN1dG91dHMgPSBTa2V0Y2guZW5hYmxlQ3V0b3V0c1xuICAgIHRoaXMuY2FudmFzV2lkdGggPSB0aGlzLmN3ID0gY29uZmlnLndpZHRoXG4gICAgdGhpcy5jYW52YXNIZWlnaHQgPSB0aGlzLmNoID0gY29uZmlnLmhlaWdodFxuICAgIHRoaXMuY3ggPSB0aGlzLmNhbnZhc1dpZHRoIC8gMlxuICAgIHRoaXMuY3kgPSB0aGlzLmNhbnZhc0hlaWdodCAvIDJcbiAgfVxuXG4gIGluaXQoKTogdm9pZCB7fVxuICBpbml0RHJhdygpOiB2b2lkIHt9XG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHt9XG4gIHJlc2V0KCk6IHZvaWQge1xuICAgIC8vIE9iamVjdC5rZXlzKHRoaXMudnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIC8vICAgdGhpcy52c1trZXldLnJhbmRvbWl6ZSgpXG4gICAgLy8gfSlcbiAgICB0aGlzLmN0eC5yZXNldCgpXG4gIH1cbn1cbiIsIi8qKlxuICogRGVyaXZlZCBmcm9tIGNvZGUgb3JpZ2luYWxseSB3cml0dGVuIGJ5IHp6ODUgZm9yIHRocmVlLmpzXG4gKiBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBUaGFua3Mgeno4NSFcbiAqKi9cblxuaW1wb3J0IFBhdGggZnJvbSAnLi9QYXRoJ1xuaW1wb3J0IFBvaW50IGZyb20gJy4vUG9pbnQnXG5pbXBvcnQgeyBhcmNUb1BvaW50cywgc2FtZVBvcyB9IGZyb20gJy4vdXRpbHMvcGF0aFV0aWxzJ1xuXG5leHBvcnQgdHlwZSBNb3ZlVG9BY3Rpb24gPSB7XG4gIHR5cGU6ICdNT1ZFX1RPJ1xuICBhcmdzOiBbeDogbnVtYmVyLCB5OiBudW1iZXJdXG59XG5cbmV4cG9ydCB0eXBlIExpbmVUb0FjdGlvbiA9IHtcbiAgdHlwZTogJ0xJTkVfVE8nXG4gIGFyZ3M6IFt4OiBudW1iZXIsIHk6IG51bWJlcl1cbn1cblxuZXhwb3J0IHR5cGUgUXVhZHJhdGljQ3VydmVUb0FjdGlvbiA9IHtcbiAgdHlwZTogJ1FVQURSQVRJQ19DVVJWRV9UTydcbiAgYXJnczogW2FDUHg6IG51bWJlciwgYUNQeTogbnVtYmVyLCBhWDogbnVtYmVyLCBhWTogbnVtYmVyXVxufVxuXG5leHBvcnQgdHlwZSBCZXppZXJDdXJ2ZVRvQWN0aW9uID0ge1xuICB0eXBlOiAnQkVaSUVSX0NVUlZFX1RPJ1xuICBhcmdzOiBbYUNQMXg6IG51bWJlciwgYUNQMXk6IG51bWJlciwgYUNQMng6IG51bWJlciwgYUNQMnk6IG51bWJlciwgYVg6IG51bWJlciwgYVk6IG51bWJlcl1cbn1cblxuZXhwb3J0IHR5cGUgQXJjQWN0aW9uID0ge1xuICB0eXBlOiAnQVJDJ1xuICBhcmdzOiBbYVg6IG51bWJlciwgYVk6IG51bWJlciwgYVJhZGl1czogbnVtYmVyLCBhU3RhcnRBbmdsZTogbnVtYmVyLCBhRW5kQW5nbGU6IG51bWJlciwgYW50aUNsb2Nrd2lzZTogYm9vbGVhbl1cbn1cblxuZXhwb3J0IHR5cGUgRWxsaXBzZUFjdGlvbiA9IHtcbiAgdHlwZTogJ0VMTElQU0UnXG4gIGFyZ3M6IFtcbiAgICBhWDogbnVtYmVyLFxuICAgIGFZOiBudW1iZXIsXG4gICAgeFJhZGl1czogbnVtYmVyLFxuICAgIHlSYWRpdXM6IG51bWJlcixcbiAgICBhU3RhcnRBbmdsZTogbnVtYmVyLFxuICAgIGFFbmRBbmdsZTogbnVtYmVyLFxuICAgIGFudGlDbG9ja3dpc2U6IGJvb2xlYW5cbiAgXVxufVxuXG5leHBvcnQgdHlwZSBBY3Rpb24gPVxuICB8IE1vdmVUb0FjdGlvblxuICB8IExpbmVUb0FjdGlvblxuICB8IFF1YWRyYXRpY0N1cnZlVG9BY3Rpb25cbiAgfCBCZXppZXJDdXJ2ZVRvQWN0aW9uXG4gIC8vIHwgQXJjQWN0aW9uXG4gIHwgRWxsaXBzZUFjdGlvblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdWJQYXRoIHtcbiAgcHVibGljIGFjdGlvbnM6IEFjdGlvbltdID0gW11cbiAgcHVibGljIHBvaW50c0NhY2hlOiBQb2ludFtdID0gW11cblxuICBzdGF0aWMgYWN0aW9ucyA9IHtcbiAgICBNT1ZFX1RPOiAnbW92ZVRvJyxcbiAgICBMSU5FX1RPOiAnbGluZVRvJyxcbiAgICBRVUFEUkFUSUNfQ1VSVkVfVE86ICdxdWFkcmF0aWNDdXJ2ZVRvJyxcbiAgICBCRVpJRVJfQ1VSVkVfVE86ICdiZXppZXJDdXJ2ZVRvJyxcbiAgICBFTExJUFNFOiAnZWxsaXBzZScsXG4gIH0gYXMgY29uc3RcblxuICBjb25zdHJ1Y3Rvcihwb2ludHM/OiBQb2ludFtdKSB7XG4gICAgaWYgKHBvaW50cykgdGhpcy5mcm9tUG9pbnRzKHBvaW50cylcbiAgfVxuXG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICBjb25zdCBwYXRoID0gbmV3IFN1YlBhdGgoKVxuICAgIHBhdGguYWN0aW9ucyA9IHRoaXMuYWN0aW9ucy5zbGljZSgwKVxuICAgIHJldHVybiBwYXRoXG4gIH1cblxuICBwdWJsaWMgaXNDbG9zZWQoKSB7XG4gICAgcmV0dXJuIHNhbWVQb3ModGhpcy5maXJzdFBvaW50KCksIHRoaXMubGFzdFBvaW50KCkpXG4gIH1cblxuICBwdWJsaWMgZ2V0IGNsb3NlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0Nsb3NlZCgpXG4gIH1cblxuICBwdWJsaWMgb2Zmc2V0KGRlbHRhOiBudW1iZXIpIHtcbiAgICBjb25zdCB0bXAgPSB0aGlzLnRvUGF0aCgpLm9mZnNldChkZWx0YSlcbiAgICBpZiAoIXRtcCkgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRtcC5zdWJQYXRoc1swXVxuICB9XG5cbiAgcHVibGljIHNpbXBsaWZ5KCkge1xuICAgIGNvbnN0IHRtcCA9IHRoaXMudG9QYXRoKCkuc2ltcGxpZnkoKVxuICAgIGlmICghdG1wKSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gdG1wLnN1YlBhdGhzWzBdXG4gIH1cblxuICBwdWJsaWMgdG9QYXRoKCkge1xuICAgIGNvbnN0IGNsb25lID0gdGhpcy5jbG9uZSgpXG4gICAgY29uc3QgcGF0aCA9IG5ldyBQYXRoKClcbiAgICBwYXRoLnN1YlBhdGhzLnB1c2goY2xvbmUpXG4gICAgcGF0aC5jdXJyZW50ID0gcGF0aC5zdWJQYXRoc1twYXRoLnN1YlBhdGhzLmxlbmd0aCAtIDFdXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxuXG4gIHB1YmxpYyBhZGRBY3Rpb24oYWN0aW9uOiBBY3Rpb24pIHtcbiAgICB0aGlzLmFjdGlvbnMucHVzaChhY3Rpb24pXG4gICAgdGhpcy5wb2ludHNDYWNoZSA9IFtdXG4gIH1cblxuICBwdWJsaWMgZmlyc3RQb2ludCgpIHtcbiAgICBsZXQgcCA9IG5ldyBQb2ludCgwLCAwKVxuICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMuYWN0aW9uc1swXVxuXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSAnRUxMSVBTRSc6XG4gICAgICAgIHAgPSBhcmNUb1BvaW50cyhhY3Rpb24uYXJnc1swXSwgYWN0aW9uLmFyZ3NbMV0sIGFjdGlvbi5hcmdzWzRdLCBhY3Rpb24uYXJnc1s1XSwgYWN0aW9uLmFyZ3NbMl0pLnN0YXJ0XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHAueCA9IGFjdGlvbi5hcmdzW2FjdGlvbi5hcmdzLmxlbmd0aCAtIDJdXG4gICAgICAgIHAueSA9IGFjdGlvbi5hcmdzW2FjdGlvbi5hcmdzLmxlbmd0aCAtIDFdXG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgcmV0dXJuIHBcbiAgfVxuXG4gIHB1YmxpYyBsYXN0UG9pbnQoKSB7XG4gICAgbGV0IHAgPSBuZXcgUG9pbnQoMCwgMClcbiAgICBjb25zdCBhY3Rpb24gPSB0aGlzLmFjdGlvbnNbdGhpcy5hY3Rpb25zLmxlbmd0aCAtIDFdXG5cbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICBjYXNlICdFTExJUFNFJzpcbiAgICAgICAgcCA9IGFyY1RvUG9pbnRzKGFjdGlvbi5hcmdzWzBdLCBhY3Rpb24uYXJnc1sxXSwgYWN0aW9uLmFyZ3NbNF0sIGFjdGlvbi5hcmdzWzVdLCBhY3Rpb24uYXJnc1syXSkuZW5kXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHAueCA9IGFjdGlvbi5hcmdzW2FjdGlvbi5hcmdzLmxlbmd0aCAtIDJdXG4gICAgICAgIHAueSA9IGFjdGlvbi5hcmdzW2FjdGlvbi5hcmdzLmxlbmd0aCAtIDFdXG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgcmV0dXJuIHBcbiAgfVxuXG4gIHB1YmxpYyBmcm9tUG9pbnRzKHBvaW50czogUG9pbnRbXSkge1xuICAgIHRoaXMubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSlcblxuICAgIGZvciAobGV0IHYgPSAxLCB2TGVuID0gcG9pbnRzLmxlbmd0aDsgdiA8IHZMZW47IHYrKykge1xuICAgICAgdGhpcy5saW5lVG8ocG9pbnRzW3ZdLngsIHBvaW50c1t2XS55KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRBY3Rpb25MZW5ndGgoeDA6IG51bWJlciwgeTA6IG51bWJlciwgaTogbnVtYmVyKSB7XG4gICAgY29uc3QgYWN0aW9uID0gdGhpcy5hY3Rpb25zW2ldXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSAnRUxMSVBTRSc6IHtcbiAgICAgICAgY29uc3QgW2FYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYW50aUNsb2Nrd2lzZV0gPSBhY3Rpb24uYXJnc1xuICAgICAgICBhY3Rpb24uYXJnc1xuICAgICAgICAvLyBUT0RPOiB0aGlzIHNlZW1zIGEgYml0IHRvbyBzaW1wbGlzdGljIHRvIGJlIHJlYWxcbiAgICAgICAgcmV0dXJuIChhRW5kQW5nbGUgLSBhU3RhcnRBbmdsZSkgKiB5UmFkaXVzXG4gICAgICB9XG4gICAgICAvLyBjYXNlICdBUkMnOiB7XG4gICAgICAvLyAgIGNvbnN0IFthWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFudGlDbG9ja3dpc2VdID0gYWN0aW9uLmFyZ3NcbiAgICAgIC8vICAgLy8gVE9ETzogdGhpcyBzZWVtcyBhIGJpdCB0b28gc2ltcGxpc3RpYyB0byBiZSByZWFsXG4gICAgICAvLyAgIHJldHVybiAoYUVuZEFuZ2xlIC0gYVN0YXJ0QW5nbGUpICogYVJhZGl1c1xuICAgICAgLy8gfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBjb25zdCBhcmdzID0gYWN0aW9uLmFyZ3NcbiAgICAgICAgY29uc3QgeCA9IGFyZ3NbYXJncy5sZW5ndGggLSAyXVxuICAgICAgICBjb25zdCB5ID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdXG4gICAgICAgIGNvbnN0IHhvID0geCAtIHgwXG4gICAgICAgIGNvbnN0IHlvID0geSAtIHkwXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoeG8gKiB4byArIHlvICogeW8pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldExlbmd0aCgpIHtcbiAgICBsZXQgbGVuID0gMFxuICAgIGNvbnN0IGZpcnN0ID0gdGhpcy5maXJzdFBvaW50KClcbiAgICBjb25zdCBwdHMgPSB0aGlzLmdldFBvaW50cygxMDAwMClcbiAgICBmb3IgKGxldCBpID0gMSwgbCA9IHB0cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIGNvbnN0IHAgPSBwdHNbaV1cbiAgICAgIGNvbnN0IHgxID0gZmlyc3QueFxuICAgICAgY29uc3QgeTEgPSBmaXJzdC55XG4gICAgICBjb25zdCB4MiA9IHAueFxuICAgICAgY29uc3QgeTIgPSBwLnlcbiAgICAgIGNvbnN0IHhvID0geDIgLSB4MVxuICAgICAgY29uc3QgeW8gPSB5MiAtIHkxXG4gICAgICBsZW4gKz0gTWF0aC5zcXJ0KHhvICogeG8gKyB5byAqIHlvKVxuICAgIH1cbiAgICByZXR1cm4gbGVuXG4gIH1cblxuICBwdWJsaWMgbmVhcmVzdFBvaW50KHAxOiBQb2ludCkge1xuICAgIGxldCBwMiA9IG5ldyBQb2ludCgpXG4gICAgbGV0IHJuOiBudW1iZXJcbiAgICBsZXQgcnA6IFBvaW50XG4gICAgbGV0IHJkOiBudW1iZXIgPSBJbmZpbml0eVxuXG4gICAgdGhpcy5hY3Rpb25zLmZvckVhY2goKGFjdGlvbiwgbikgPT4ge1xuICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdFTExJUFNFJzoge1xuICAgICAgICAgIGNvbnN0IFthWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFudGlDbG9ja3dpc2VdID0gYWN0aW9uLmFyZ3NcbiAgICAgICAgICBwMi54ID0gYVggKyB4UmFkaXVzICogTWF0aC5jb3MoYVN0YXJ0QW5nbGUpIC8vIGNvcGlsb3Qgc3VnZ2VzdGVkIHRoZSByYWQqY29zXG4gICAgICAgICAgcDIueSA9IGFZICsgeVJhZGl1cyAqIE1hdGguc2luKGFTdGFydEFuZ2xlKSAvLyBjb3BpbG90IHN1Z2dlc3RlZCB0aGUgcmFkKnNpblxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FzZSAnQVJDJzoge1xuICAgICAgICAvLyAgIGNvbnN0IFthWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFudGlDbG9ja3dpc2VdID0gYWN0aW9uLmFyZ3NcbiAgICAgICAgLy8gICBwMi54ID0gYVggKyBhUmFkaXVzICogTWF0aC5jb3MoYVN0YXJ0QW5nbGUpIC8vIGNvcGlsb3Qgc3VnZ2VzdGVkIHRoZSByYWQqY29zXG4gICAgICAgIC8vICAgcDIueSA9IGFZICsgYVJhZGl1cyAqIE1hdGguc2luKGFTdGFydEFuZ2xlKSAvLyBjb3BpbG90IHN1Z2dlc3RlZCB0aGUgcmFkKnNpblxuICAgICAgICAvLyAgIGJyZWFrXG4gICAgICAgIC8vIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIHAyLnggPSBhY3Rpb24uYXJnc1thY3Rpb24uYXJncy5sZW5ndGggLSAyXVxuICAgICAgICAgIHAyLnkgPSBhY3Rpb24uYXJnc1thY3Rpb24uYXJncy5sZW5ndGggLSAxXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGQgPSBQb2ludC5kaXN0YW5jZShwMSwgcDIpXG4gICAgICBpZiAoZCA8IHJkKSB7XG4gICAgICAgIHJuID0gblxuICAgICAgICBycCA9IHAyLmNsb25lKClcbiAgICAgICAgcmQgPSBkXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiB7XG4gICAgICBpOiBybixcbiAgICAgIGRpc3RhbmNlOiByZCxcbiAgICAgIHBvaW50OiBycCxcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcG9pbnRBdChpbmRleDogbnVtYmVyKSB7XG4gICAgY29uc3QgcCA9IG5ldyBQb2ludCgpXG4gICAgY29uc3QgYWN0aW9uID0gdGhpcy5hY3Rpb25zW2luZGV4XVxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgJ0xJTkVfVE8nOlxuICAgICAgICBwLnggPSBhY3Rpb24uYXJnc1thY3Rpb24uYXJncy5sZW5ndGggLSAyXVxuICAgICAgICBwLnkgPSBhY3Rpb24uYXJnc1thY3Rpb24uYXJncy5sZW5ndGggLSAxXVxuICAgICAgICBicmVha1xuICAgICAgLy9UT0RPOiBUSEVSRSBzaG91bGQgYmUgbW9yZSBjYXNlcyBubz8/XG4gICAgfVxuICAgIHJldHVybiBwXG4gIH1cblxuICBwdWJsaWMgc2hpZnRUb05lYXJlc3QoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICBjb25zdCBuZWFyZXN0ID0gdGhpcy5uZWFyZXN0UG9pbnQobmV3IFBvaW50KHgsIHkpKVxuICAgIHJldHVybiB0aGlzLnNoaWZ0KG5lYXJlc3QuaSlcbiAgfVxuXG4gIHB1YmxpYyBzaGlmdChhbjogbnVtYmVyKSB7XG4gICAgaWYgKGFuID09PSAwKSByZXR1cm4gdGhpc1xuXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFN1YlBhdGgoKVxuXG4gICAgcmVzdWx0LmFjdGlvbnMgPSB0aGlzLmFjdGlvbnMuc2xpY2UoYW4pLmNvbmNhdCh0aGlzLmFjdGlvbnMuc2xpY2UoMCwgYW4pKVxuXG4gICAgcmVzdWx0LmFjdGlvbnMuZm9yRWFjaCgoYWN0aW9uKSA9PiB7XG4gICAgICBhY3Rpb24udHlwZSA9ICdMSU5FX1RPJ1xuICAgIH0pXG5cbiAgICByZXN1bHQubGluZVRvKHJlc3VsdC5hY3Rpb25zWzBdLmFyZ3NbMF0sIHJlc3VsdC5hY3Rpb25zWzBdLmFyZ3NbMV0pXG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBwdWJsaWMgbW92ZVRvKC4uLmFyZ3M6IE1vdmVUb0FjdGlvblsnYXJncyddKSB7XG4gICAgdGhpcy5hZGRBY3Rpb24oeyB0eXBlOiAnTU9WRV9UTycsIGFyZ3MgfSlcbiAgfVxuXG4gIHB1YmxpYyBsaW5lVG8oLi4uYXJnczogTGluZVRvQWN0aW9uWydhcmdzJ10pIHtcbiAgICB0aGlzLmFkZEFjdGlvbih7IHR5cGU6ICdMSU5FX1RPJywgYXJncyB9KVxuICB9XG5cbiAgcHVibGljIHF1YWRyYXRpY0N1cnZlVG8oLi4uYXJnczogUXVhZHJhdGljQ3VydmVUb0FjdGlvblsnYXJncyddKSB7XG4gICAgdGhpcy5hZGRBY3Rpb24oeyB0eXBlOiAnUVVBRFJBVElDX0NVUlZFX1RPJywgYXJncyB9KVxuICB9XG5cbiAgcHVibGljIGJlemllckN1cnZlVG8oLi4uYXJnczogQmV6aWVyQ3VydmVUb0FjdGlvblsnYXJncyddKSB7XG4gICAgdGhpcy5hZGRBY3Rpb24oeyB0eXBlOiAnQkVaSUVSX0NVUlZFX1RPJywgYXJncyB9KVxuICB9XG5cbiAgcHVibGljIGFyYyguLi5hcmdzOiBFbGxpcHNlQWN0aW9uWydhcmdzJ10pIHtcbiAgICB0aGlzLmVsbGlwc2UoLi4uYXJncylcbiAgfVxuXG4gIHB1YmxpYyBlbGxpcHNlKC4uLmFyZ3M6IEVsbGlwc2VBY3Rpb25bJ2FyZ3MnXSkge1xuICAgIHRoaXMuYWRkQWN0aW9uKHsgdHlwZTogJ0VMTElQU0UnLCBhcmdzIH0pXG4gIH1cblxuICBwdWJsaWMgZ2V0UG9pbnRzKGRpdmlzaW9uczogbnVtYmVyID0gNDApOiBQb2ludFtdIHtcbiAgICAvLyBUT0RPOiBJIGRvbid0IHVuZGVyc3RhbmQgd2hhdCB0aGlzIGRvZXNcbiAgICAvLyBpZiAodGhpcy5wb2ludHNDYWNoZVtkaXZpc2lvbnNdKSByZXR1cm4gdGhpcy5wb2ludHNDYWNoZVtkaXZpc2lvbnNdXG5cbiAgICBjb25zdCBwb2ludHM6IFBvaW50W10gPSBbXVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGlsID0gdGhpcy5hY3Rpb25zLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMuYWN0aW9uc1tpXVxuXG4gICAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ01PVkVfVE8nOlxuICAgICAgICAgIHBvaW50cy5wdXNoKG5ldyBQb2ludChhY3Rpb24uYXJnc1swXSwgYWN0aW9uLmFyZ3NbMV0pKVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSAnTElORV9UTyc6XG4gICAgICAgICAgcG9pbnRzLnB1c2gobmV3IFBvaW50KGFjdGlvbi5hcmdzWzBdLCBhY3Rpb24uYXJnc1sxXSkpXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICdRVUFEUkFUSUNfQ1VSVkVfVE8nOiB7XG4gICAgICAgICAgbGV0IGNweDA6IG51bWJlciwgY3B5MDogbnVtYmVyXG4gICAgICAgICAgY29uc3QgW2FDUHgsIGFDUHksIGFYLCBhWV0gPSBhY3Rpb24uYXJnc1xuXG4gICAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0RSA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1cblxuICAgICAgICAgICAgY3B4MCA9IGxhc3RFLnhcbiAgICAgICAgICAgIGNweTAgPSBsYXN0RS55XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHRoaXMgZG9lc24ndCBtYWtlIG11Y2ggc2Vuc2UgLi4uLlxuICAgICAgICAgICAgY29uc3QgbGFzdEFjdGlvbiA9IHRoaXMuYWN0aW9uc1tpIC0gMV1cblxuICAgICAgICAgICAgaWYgKC8qbGFzdEFjdGlvbi50eXBlICE9PSAnQVJDJyAmJiAqLyBsYXN0QWN0aW9uLnR5cGUgIT09ICdFTExJUFNFJykge1xuICAgICAgICAgICAgICBjb25zdCBsYXN0RSA9IGxhc3RBY3Rpb24uYXJnc1xuXG4gICAgICAgICAgICAgIGNweDAgPSBsYXN0RVtsYXN0RS5sZW5ndGggLSAyXVxuICAgICAgICAgICAgICBjcHkwID0gbGFzdEVbbGFzdEUubGVuZ3RoIC0gMV1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFRPRE86IEkgR1VFU1NFRCBUSEVTRVxuICAgICAgICAgICAgICBjcHgwID0gbGFzdEFjdGlvbi5hcmdzWzBdXG4gICAgICAgICAgICAgIGNweTAgPSBsYXN0QWN0aW9uLmFyZ3NbMV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKGxldCBqID0gMTsgaiA8PSBkaXZpc2lvbnM7IGorKykge1xuICAgICAgICAgICAgY29uc3QgdCA9IGogLyBkaXZpc2lvbnNcblxuICAgICAgICAgICAgY29uc3QgdHggPSBiMih0LCBjcHgwLCBhQ1B4LCBhWClcbiAgICAgICAgICAgIGNvbnN0IHR5ID0gYjIodCwgY3B5MCwgYUNQeSwgYVkpXG5cbiAgICAgICAgICAgIHBvaW50cy5wdXNoKG5ldyBQb2ludCh0eCwgdHkpKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cblxuICAgICAgICBjYXNlICdCRVpJRVJfQ1VSVkVfVE8nOiB7XG4gICAgICAgICAgbGV0IGNweDA6IG51bWJlciwgY3B5MDogbnVtYmVyXG4gICAgICAgICAgLy8gICBsZXQgY3B4LCBjcHksIGNweDIsIGNweTIsIGNweDEsIGNweTEsICwgbGFzdEUsIGosIHQsIHR4LCB0eVxuICAgICAgICAgIGNvbnN0IFthQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZXSA9IGFjdGlvbi5hcmdzXG5cbiAgICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RFID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXVxuXG4gICAgICAgICAgICBjcHgwID0gbGFzdEUueFxuICAgICAgICAgICAgY3B5MCA9IGxhc3RFLnlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbGFzdEFjdGlvbiA9IHRoaXMuYWN0aW9uc1tpIC0gMV1cbiAgICAgICAgICAgIGlmICgvKmxhc3RBY3Rpb24udHlwZSAhPT0gJ0FSQycgJiYgKi8gbGFzdEFjdGlvbi50eXBlICE9PSAnRUxMSVBTRScpIHtcbiAgICAgICAgICAgICAgY29uc3QgbGFzdEUgPSBsYXN0QWN0aW9uLmFyZ3NcblxuICAgICAgICAgICAgICBjcHgwID0gbGFzdEVbbGFzdEUubGVuZ3RoIC0gMl1cbiAgICAgICAgICAgICAgY3B5MCA9IGxhc3RFW2xhc3RFLmxlbmd0aCAtIDFdXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBUT0RPOiBJIEdVRVNTRUQgVEhFU0VcbiAgICAgICAgICAgICAgY3B4MCA9IGxhc3RBY3Rpb24uYXJnc1swXVxuICAgICAgICAgICAgICBjcHkwID0gbGFzdEFjdGlvbi5hcmdzWzFdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDE7IGogPD0gZGl2aXNpb25zOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBqIC8gZGl2aXNpb25zXG5cbiAgICAgICAgICAgIGNvbnN0IHR4ID0gYjModCwgY3B4MCwgYUNQMXgsIGFDUDJ4LCBhWClcbiAgICAgICAgICAgIGNvbnN0IHR5ID0gYjModCwgY3B5MCwgYUNQMXksIGFDUDJ5LCBhWSlcblxuICAgICAgICAgICAgcG9pbnRzLnB1c2gobmV3IFBvaW50KHR4LCB0eSkpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgJ0VMTElQU0UnOiB7XG4gICAgICAgICAgbGV0IGosIHRcbiAgICAgICAgICBjb25zdCBbYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhbnRpQ2xvY2t3aXNlXSA9IGFjdGlvbi5hcmdzXG5cbiAgICAgICAgICBsZXQgZGVsdGFBbmdsZSA9IGFFbmRBbmdsZSAtIGFTdGFydEFuZ2xlXG4gICAgICAgICAgbGV0IGFuZ2xlXG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDw9IGRpdmlzaW9uczsgaisrKSB7XG4gICAgICAgICAgICB0ID0gaiAvIGRpdmlzaW9uc1xuXG4gICAgICAgICAgICBpZiAoZGVsdGFBbmdsZSA9PT0gLU1hdGguUEkgKiAyKSBkZWx0YUFuZ2xlID0gTWF0aC5QSSAqIDJcbiAgICAgICAgICAgIGlmIChkZWx0YUFuZ2xlIDwgMCkgZGVsdGFBbmdsZSArPSBNYXRoLlBJICogMlxuICAgICAgICAgICAgaWYgKGRlbHRhQW5nbGUgPiBNYXRoLlBJICogMikgZGVsdGFBbmdsZSAtPSBNYXRoLlBJICogMlxuXG4gICAgICAgICAgICBpZiAoYW50aUNsb2Nrd2lzZSkge1xuICAgICAgICAgICAgICAvLyBzaW4ocGkpIGFuZCBzaW4oMCkgYXJlIHRoZSBzYW1lXG4gICAgICAgICAgICAgIC8vIFNvIHdlIGhhdmUgdG8gc3BlY2lhbCBjYXNlIGZvciBmdWxsIGNpcmNsZXNcbiAgICAgICAgICAgICAgaWYgKGRlbHRhQW5nbGUgPT09IE1hdGguUEkgKiAyKSBkZWx0YUFuZ2xlID0gMFxuICAgICAgICAgICAgICBhbmdsZSA9IGFFbmRBbmdsZSArICgxIC0gdCkgKiAoTWF0aC5QSSAqIDIgLSBkZWx0YUFuZ2xlKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYW5nbGUgPSBhU3RhcnRBbmdsZSArIHQgKiBkZWx0YUFuZ2xlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHR4ID0gYVggKyB4UmFkaXVzICogTWF0aC5jb3MoYW5nbGUpXG4gICAgICAgICAgICBjb25zdCB0eSA9IGFZICsgeVJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKVxuXG4gICAgICAgICAgICBwb2ludHMucHVzaChuZXcgUG9pbnQodHgsIHR5KSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2xvc2VkKSBwb2ludHMucHVzaChwb2ludHNbMF0pXG5cbiAgICAvLyB0aGlzLnBvaW50c0NhY2hlW2RpdmlzaW9uc10gPSBwb2ludHM7XG4gICAgcmV0dXJuIHBvaW50c1xuICB9XG5cbiAgcHVibGljIHRvUG9seShzY2FsZTogbnVtYmVyLCBkaXZpc2lvbnM/OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQb2ludHMoZGl2aXNpb25zKS5tYXAoKHApID0+IHtcbiAgICAgIHJldHVybiB7IFg6IHAueCAqIHNjYWxlLCBZOiBwLnkgKiBzY2FsZSB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIHB1YmxpYyBmcm9tUG9seShwb2x5OiB7WDogbnVtYmVyOyBZOiBudW1iZXJ9LCBzY2FsZTogbnVtYmVyKSB7XG4gIC8vICAgc2NhbGUgPSAxL3NjYWxlXG4gIC8vIH1cblxuICBwdWJsaWMgZnJvbVBvbHlzKHBvbHk6IHsgWDogbnVtYmVyOyBZOiBudW1iZXIgfVtdLCBzY2FsZTogbnVtYmVyKSB7XG4gICAgc2NhbGUgPSAxIC8gc2NhbGVcblxuICAgIHRoaXMubW92ZVRvKHBvbHlbMF0uWCAqIHNjYWxlLCBwb2x5WzBdLlkgKiBzY2FsZSlcblxuICAgIGZvciAobGV0IGkgPSAxLCBsID0gcG9seS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIHRoaXMubGluZVRvKHBvbHlbaV0uWCAqIHNjYWxlLCBwb2x5W2ldLlkgKiBzY2FsZSlcbiAgICB9XG5cbiAgICB0aGlzLmNsb3NlKClcbiAgICAvLyB0b2RvOiBjbG9zZSBwcm9wZXJseSAoY2xvc2VQYXRoKCkpXG4gICAgLy8gdGhpcy5saW5lVG8ocG9seVswXS5YKnNjYWxlLCBwb2x5WzBdLlkqc2NhbGUpO1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgcHVibGljIGNsb3NlKCkge1xuICAgIGlmICh0aGlzLmlzQ2xvc2VkKCkpIHJldHVyblxuXG4gICAgY29uc3QgY3VyU3RhcnQgPSB0aGlzLmFjdGlvbnNbMF0uYXJnc1xuICAgIHRoaXMubGluZVRvLmFwcGx5KHRoaXMsIGN1clN0YXJ0KVxuICB9XG4gIHB1YmxpYyByZXZlcnNlKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTdWJQYXRoKClcbiAgICBjb25zdCBwdHMgPSB0aGlzLmdldFBvaW50cygpLnJldmVyc2UoKVxuICAgIGlmIChwdHMubGVuZ3RoID09IDApIHJldHVybiByZXN1bHRcbiAgICByZXN1bHQubW92ZVRvKHB0c1swXS54LCBwdHNbMF0ueSlcbiAgICBmb3IgKGxldCBpID0gMSwgbCA9IHB0cy5sZW5ndGg7IGkgPCBsOyArK2kpIHJlc3VsdC5saW5lVG8ocHRzW2ldLngsIHB0c1tpXS55KVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vLyBCZXppZXIgQ3VydmVzIGZvcm11bGFzIG9idGFpbmVkIGZyb21cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQiVDMyVBOXppZXJfY3VydmVcblxuLy8gUXVhZCBCZXppZXIgRnVuY3Rpb25zXG5jb25zdCBiMnAwID0gKHQ6IG51bWJlciwgcDogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IGsgPSAxIC0gdFxuICByZXR1cm4gayAqIGsgKiBwXG59XG5jb25zdCBiMnAxID0gKHQ6IG51bWJlciwgcDogbnVtYmVyKSA9PiAyICogKDEgLSB0KSAqIHQgKiBwXG5jb25zdCBiMnAyID0gKHQ6IG51bWJlciwgcDogbnVtYmVyKSA9PiB0ICogdCAqIHBcbmNvbnN0IGIyID0gKHQ6IG51bWJlciwgcDA6IG51bWJlciwgcDE6IG51bWJlciwgcDI6IG51bWJlcikgPT4gYjJwMCh0LCBwMCkgKyBiMnAxKHQsIHAxKSArIGIycDIodCwgcDIpXG5cbi8vIEN1YmljIEJlemllciBGdW5jdGlvbnNcbmNvbnN0IGIzcDAgPSAodDogbnVtYmVyLCBwOiBudW1iZXIpID0+IHtcbiAgY29uc3QgayA9IDEgLSB0XG4gIHJldHVybiBrICogayAqIGsgKiBwXG59XG5jb25zdCBiM3AxID0gKHQ6IG51bWJlciwgcDogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IGsgPSAxIC0gdFxuICByZXR1cm4gMyAqIGsgKiBrICogdCAqIHBcbn1cbmNvbnN0IGIzcDIgPSAodDogbnVtYmVyLCBwOiBudW1iZXIpID0+IHtcbiAgY29uc3QgayA9IDEgLSB0XG4gIHJldHVybiAzICogayAqIHQgKiB0ICogcFxufVxuY29uc3QgYjNwMyA9ICh0OiBudW1iZXIsIHA6IG51bWJlcikgPT4gdCAqIHQgKiB0ICogcFxuY29uc3QgYjMgPSAodDogbnVtYmVyLCBwMDogbnVtYmVyLCBwMTogbnVtYmVyLCBwMjogbnVtYmVyLCBwMzogbnVtYmVyKSA9PlxuICBiM3AwKHQsIHAwKSArIGIzcDEodCwgcDEpICsgYjNwMih0LCBwMikgKyBiM3AzKHQsIHAzKVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogQXV0aG9yICAgIDogIEFuZ3VzIEpvaG5zb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBWZXJzaW9uICAgOiAgNi40LjIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIERhdGUgICAgICA6ICAyNyBGZWJydWFyeSAyMDE3ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogV2Vic2l0ZSAgIDogIGh0dHA6Ly93d3cuYW5ndXNqLmNvbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBDb3B5cmlnaHQgOiAgQW5ndXMgSm9obnNvbiAyMDEwLTIwMTcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogTGljZW5zZTogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBVc2UsIG1vZGlmaWNhdGlvbiAmIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UgVmVyIDEuICpcbiAqIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBBdHRyaWJ1dGlvbnM6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFRoZSBjb2RlIGluIHRoaXMgbGlicmFyeSBpcyBhbiBleHRlbnNpb24gb2YgQmFsYSBWYXR0aSdzIGNsaXBwaW5nIGFsZ29yaXRobTogKlxuICogXCJBIGdlbmVyaWMgc29sdXRpb24gdG8gcG9seWdvbiBjbGlwcGluZ1wiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIENvbW11bmljYXRpb25zIG9mIHRoZSBBQ00sIFZvbCAzNSwgSXNzdWUgNyAoSnVseSAxOTkyKSBwcCA1Ni02My4gICAgICAgICAgICAgKlxuICogaHR0cDovL3BvcnRhbC5hY20ub3JnL2NpdGF0aW9uLmNmbT9pZD0xMjk5MDYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIENvbXB1dGVyIGdyYXBoaWNzIGFuZCBnZW9tZXRyaWMgbW9kZWxpbmc6IGltcGxlbWVudGF0aW9uIGFuZCBhbGdvcml0aG1zICAgICAgKlxuICogQnkgTWF4IEsuIEFnb3N0b24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBTcHJpbmdlcjsgMSBlZGl0aW9uIChKYW51YXJ5IDQsIDIwMDUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIGh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP3E9dmF0dGkrY2xpcHBpbmcrYWdvc3RvbiAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBTZWUgYWxzbzogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFwiUG9seWdvbiBPZmZzZXR0aW5nIGJ5IENvbXB1dGluZyBXaW5kaW5nIE51bWJlcnNcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBQYXBlciBuby4gREVUQzIwMDUtODU1MTMgcHAuIDU2NS01NzUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIEFTTUUgMjAwNSBJbnRlcm5hdGlvbmFsIERlc2lnbiBFbmdpbmVlcmluZyBUZWNobmljYWwgQ29uZmVyZW5jZXMgICAgICAgICAgICAgKlxuICogYW5kIENvbXB1dGVycyBhbmQgSW5mb3JtYXRpb24gaW4gRW5naW5lZXJpbmcgQ29uZmVyZW5jZSAoSURFVEMvQ0lFMjAwNSkgICAgICAqXG4gKiBTZXB0ZW1iZXIgMjQtMjgsIDIwMDUgLCBMb25nIEJlYWNoLCBDYWxpZm9ybmlhLCBVU0EgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIGh0dHA6Ly93d3cubWUuYmVya2VsZXkuZWR1L35tY21haW5zL3B1YnMvREFDMDVPZmZzZXRQb2x5Z29uLnBkZiAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIEF1dGhvciAgICA6ICBUaW1vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogVmVyc2lvbiAgIDogIDYuNC4yLjIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBEYXRlICAgICAgOiAgOCBTZXB0ZW1iZXIgMjAxNyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFRoaXMgaXMgYSB0cmFuc2xhdGlvbiBvZiB0aGUgQyMgQ2xpcHBlciBsaWJyYXJ5IHRvIEphdmFzY3JpcHQuICAgICAgICAgICAgICAgKlxuICogSW50MTI4IHN0cnVjdCBvZiBDIyBpcyBpbXBsZW1lbnRlZCB1c2luZyBKU0JOIG9mIFRvbSBXdS4gICAgICAgICAgICAgICAgICAgICAqXG4gKiBCZWNhdXNlIEphdmFzY3JpcHQgbGFja3Mgc3VwcG9ydCBmb3IgNjQtYml0IGludGVnZXJzLCB0aGUgc3BhY2UgICAgICAgICAgICAgICpcbiAqIGlzIGEgbGl0dGxlIG1vcmUgcmVzdHJpY3RlZCB0aGFuIGluIEMjIHZlcnNpb24uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBDIyB2ZXJzaW9uIGhhcyBzdXBwb3J0IGZvciBjb29yZGluYXRlIHNwYWNlOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICstNDYxMTY4NjAxODQyNzM4NzkwMyAoIHNxcnQoMl4xMjcgLTEpLzIgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogd2hpbGUgSmF2YXNjcmlwdCB2ZXJzaW9uIGhhcyBzdXBwb3J0IGZvciBzcGFjZTogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiArLTQ1MDM1OTk2MjczNzA0OTUgKCBzcXJ0KDJeMTA2IC0xKS8yICkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogVG9tIFd1J3MgSlNCTiBwcm92ZWQgdG8gYmUgdGhlIGZhc3Rlc3QgYmlnIGludGVnZXIgbGlicmFyeTogICAgICAgICAgICAgICAgICAqXG4gKiBodHRwOi8vanNwZXJmLmNvbS9iaWctaW50ZWdlci1saWJyYXJ5LXRlc3QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogVGhpcyBjbGFzcyBjYW4gYmUgbWFkZSBzaW1wbGVyIHdoZW4gKGlmIGV2ZXIpIDY0LWJpdCBpbnRlZ2VyIHN1cHBvcnQgY29tZXMgICAqXG4gKiBvciBmbG9hdGluZyBwb2ludCBDbGlwcGVyIGlzIHJlbGVhc2VkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBCYXNpYyBKYXZhU2NyaXB0IEJOIGxpYnJhcnkgLSBzdWJzZXQgdXNlZnVsIGZvciBSU0EgZW5jcnlwdGlvbi4gICAgICAgICAgICAgICpcbiAqIGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogQ29weXJpZ2h0IChjKSAyMDA1ICBUb20gV3UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFNlZSBcIkxJQ0VOU0VcIiBmb3IgZGV0YWlsczogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vTElDRU5TRSAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4oZnVuY3Rpb24gKClcbntcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBDbGlwcGVyTGliID0ge307XG5cdENsaXBwZXJMaWIudmVyc2lvbiA9ICc2LjQuMi4yJztcblxuXHQvL1VzZUxpbmVzOiBFbmFibGVzIG9wZW4gcGF0aCBjbGlwcGluZy4gQWRkcyBhIHZlcnkgbWlub3IgY29zdCB0byBwZXJmb3JtYW5jZS5cblx0Q2xpcHBlckxpYi51c2VfbGluZXMgPSB0cnVlO1xuXG5cdC8vQ2xpcHBlckxpYi51c2VfeHl6OiBhZGRzIGEgWiBtZW1iZXIgdG8gSW50UG9pbnQuIEFkZHMgYSBtaW5vciBjb3N0IHRvIHBlcmZvcm1hbmNlLlxuXHRDbGlwcGVyTGliLnVzZV94eXogPSBmYWxzZTtcblxuXHR2YXIgaXNOb2RlID0gZmFsc2U7XG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cylcblx0e1xuXHRcdG1vZHVsZS5leHBvcnRzID0gQ2xpcHBlckxpYjtcblx0XHRpc05vZGUgPSB0cnVlO1xuXHR9XG5cdGVsc2Vcblx0e1xuXHRcdGlmICh0eXBlb2YgKGRvY3VtZW50KSAhPT0gXCJ1bmRlZmluZWRcIikgd2luZG93LkNsaXBwZXJMaWIgPSBDbGlwcGVyTGliO1xuXHRcdGVsc2Ugc2VsZlsnQ2xpcHBlckxpYiddID0gQ2xpcHBlckxpYjtcblx0fVxuXHR2YXIgbmF2aWdhdG9yX2FwcE5hbWU7XG5cdGlmICghaXNOb2RlKVxuXHR7XG5cdFx0dmFyIG5hdiA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xuXHRcdG5hdmlnYXRvcl9hcHBOYW1lID0gbmF2aWdhdG9yLmFwcE5hbWU7XG5cdH1cblx0ZWxzZVxuXHR7XG5cdFx0dmFyIG5hdiA9IFwiY2hyb21lXCI7IC8vIE5vZGUuanMgdXNlcyBDaHJvbWUncyBWOCBlbmdpbmVcblx0XHRuYXZpZ2F0b3JfYXBwTmFtZSA9IFwiTmV0c2NhcGVcIjsgLy8gRmlyZWZveCwgQ2hyb21lIGFuZCBTYWZhcmkgcmV0dXJucyBcIk5ldHNjYXBlXCIsIHNvIE5vZGUuanMgc2hvdWxkIGFsc29cblx0fVxuXHQvLyBCcm93c2VyIHRlc3QgdG8gc3BlZWR1cCBwZXJmb3JtYW5jZSBjcml0aWNhbCBmdW5jdGlvbnNcblx0dmFyIGJyb3dzZXIgPSB7fTtcblxuXHRpZiAobmF2LmluZGV4T2YoXCJjaHJvbWVcIikgIT0gLTEgJiYgbmF2LmluZGV4T2YoXCJjaHJvbWl1bVwiKSA9PSAtMSkgYnJvd3Nlci5jaHJvbWUgPSAxO1xuXHRlbHNlIGJyb3dzZXIuY2hyb21lID0gMDtcblx0aWYgKG5hdi5pbmRleE9mKFwiY2hyb21pdW1cIikgIT0gLTEpIGJyb3dzZXIuY2hyb21pdW0gPSAxO1xuXHRlbHNlIGJyb3dzZXIuY2hyb21pdW0gPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJzYWZhcmlcIikgIT0gLTEgJiYgbmF2LmluZGV4T2YoXCJjaHJvbWVcIikgPT0gLTEgJiYgbmF2LmluZGV4T2YoXCJjaHJvbWl1bVwiKSA9PSAtMSkgYnJvd3Nlci5zYWZhcmkgPSAxO1xuXHRlbHNlIGJyb3dzZXIuc2FmYXJpID0gMDtcblx0aWYgKG5hdi5pbmRleE9mKFwiZmlyZWZveFwiKSAhPSAtMSkgYnJvd3Nlci5maXJlZm94ID0gMTtcblx0ZWxzZSBicm93c2VyLmZpcmVmb3ggPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJmaXJlZm94LzE3XCIpICE9IC0xKSBicm93c2VyLmZpcmVmb3gxNyA9IDE7XG5cdGVsc2UgYnJvd3Nlci5maXJlZm94MTcgPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJmaXJlZm94LzE1XCIpICE9IC0xKSBicm93c2VyLmZpcmVmb3gxNSA9IDE7XG5cdGVsc2UgYnJvd3Nlci5maXJlZm94MTUgPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJmaXJlZm94LzNcIikgIT0gLTEpIGJyb3dzZXIuZmlyZWZveDMgPSAxO1xuXHRlbHNlIGJyb3dzZXIuZmlyZWZveDMgPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJvcGVyYVwiKSAhPSAtMSkgYnJvd3Nlci5vcGVyYSA9IDE7XG5cdGVsc2UgYnJvd3Nlci5vcGVyYSA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgMTBcIikgIT0gLTEpIGJyb3dzZXIubXNpZTEwID0gMTtcblx0ZWxzZSBicm93c2VyLm1zaWUxMCA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgOVwiKSAhPSAtMSkgYnJvd3Nlci5tc2llOSA9IDE7XG5cdGVsc2UgYnJvd3Nlci5tc2llOSA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgOFwiKSAhPSAtMSkgYnJvd3Nlci5tc2llOCA9IDE7XG5cdGVsc2UgYnJvd3Nlci5tc2llOCA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgN1wiKSAhPSAtMSkgYnJvd3Nlci5tc2llNyA9IDE7XG5cdGVsc2UgYnJvd3Nlci5tc2llNyA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgXCIpICE9IC0xKSBicm93c2VyLm1zaWUgPSAxO1xuXHRlbHNlIGJyb3dzZXIubXNpZSA9IDA7XG5cdENsaXBwZXJMaWIuYmlnaW50ZWdlcl91c2VkID0gbnVsbDtcblxuXHQvLyBDb3B5cmlnaHQgKGMpIDIwMDUgIFRvbSBXdVxuXHQvLyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXHQvLyBTZWUgXCJMSUNFTlNFXCIgZm9yIGRldGFpbHMuXG5cdC8vIEJhc2ljIEphdmFTY3JpcHQgQk4gbGlicmFyeSAtIHN1YnNldCB1c2VmdWwgZm9yIFJTQSBlbmNyeXB0aW9uLlxuXHQvLyBCaXRzIHBlciBkaWdpdFxuXHR2YXIgZGJpdHM7XG5cdC8vIEphdmFTY3JpcHQgZW5naW5lIGFuYWx5c2lzXG5cdHZhciBjYW5hcnkgPSAweGRlYWRiZWVmY2FmZTtcblx0dmFyIGpfbG0gPSAoKGNhbmFyeSAmIDB4ZmZmZmZmKSA9PSAweGVmY2FmZSk7XG5cdC8vIChwdWJsaWMpIENvbnN0cnVjdG9yXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRmdW5jdGlvbiBCaWdJbnRlZ2VyKGEsIGIsIGMpXG5cdHtcblx0XHQvLyBUaGlzIHRlc3QgdmFyaWFibGUgY2FuIGJlIHJlbW92ZWQsXG5cdFx0Ly8gYnV0IGF0IGxlYXN0IGZvciBwZXJmb3JtYW5jZSB0ZXN0cyBpdCBpcyB1c2VmdWwgcGllY2Ugb2Yga25vd2xlZGdlXG5cdFx0Ly8gVGhpcyBpcyB0aGUgb25seSBDbGlwcGVyTGliIHJlbGF0ZWQgdmFyaWFibGUgaW4gQmlnSW50ZWdlciBsaWJyYXJ5XG5cdFx0Q2xpcHBlckxpYi5iaWdpbnRlZ2VyX3VzZWQgPSAxO1xuXHRcdGlmIChhICE9IG51bGwpXG5cdFx0XHRpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYSAmJiBcInVuZGVmaW5lZFwiID09IHR5cGVvZiAoYikpIHRoaXMuZnJvbUludChhKTsgLy8gZmFzdGVyIGNvbnZlcnNpb25cblx0XHRcdGVsc2UgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIGEpIHRoaXMuZnJvbU51bWJlcihhLCBiLCBjKTtcblx0XHRlbHNlIGlmIChiID09IG51bGwgJiYgXCJzdHJpbmdcIiAhPSB0eXBlb2YgYSkgdGhpcy5mcm9tU3RyaW5nKGEsIDI1Nik7XG5cdFx0ZWxzZSB0aGlzLmZyb21TdHJpbmcoYSwgYik7XG5cdH1cblx0Ly8gcmV0dXJuIG5ldywgdW5zZXQgQmlnSW50ZWdlclxuXHRmdW5jdGlvbiBuYmkoKVxuXHR7XG5cdFx0cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKG51bGwsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcblx0fVxuXHQvLyBhbTogQ29tcHV0ZSB3X2ogKz0gKHgqdGhpc19pKSwgcHJvcGFnYXRlIGNhcnJpZXMsXG5cdC8vIGMgaXMgaW5pdGlhbCBjYXJyeSwgcmV0dXJucyBmaW5hbCBjYXJyeS5cblx0Ly8gYyA8IDMqZHZhbHVlLCB4IDwgMipkdmFsdWUsIHRoaXNfaSA8IGR2YWx1ZVxuXHQvLyBXZSBuZWVkIHRvIHNlbGVjdCB0aGUgZmFzdGVzdCBvbmUgdGhhdCB3b3JrcyBpbiB0aGlzIGVudmlyb25tZW50LlxuXHQvLyBhbTE6IHVzZSBhIHNpbmdsZSBtdWx0IGFuZCBkaXZpZGUgdG8gZ2V0IHRoZSBoaWdoIGJpdHMsXG5cdC8vIG1heCBkaWdpdCBiaXRzIHNob3VsZCBiZSAyNiBiZWNhdXNlXG5cdC8vIG1heCBpbnRlcm5hbCB2YWx1ZSA9IDIqZHZhbHVlXjItMipkdmFsdWUgKDwgMl41Mylcblx0ZnVuY3Rpb24gYW0xKGksIHgsIHcsIGosIGMsIG4pXG5cdHtcblx0XHR3aGlsZSAoLS1uID49IDApXG5cdFx0e1xuXHRcdFx0dmFyIHYgPSB4ICogdGhpc1tpKytdICsgd1tqXSArIGM7XG5cdFx0XHRjID0gTWF0aC5mbG9vcih2IC8gMHg0MDAwMDAwKTtcblx0XHRcdHdbaisrXSA9IHYgJiAweDNmZmZmZmY7XG5cdFx0fVxuXHRcdHJldHVybiBjO1xuXHR9XG5cdC8vIGFtMiBhdm9pZHMgYSBiaWcgbXVsdC1hbmQtZXh0cmFjdCBjb21wbGV0ZWx5LlxuXHQvLyBNYXggZGlnaXQgYml0cyBzaG91bGQgYmUgPD0gMzAgYmVjYXVzZSB3ZSBkbyBiaXR3aXNlIG9wc1xuXHQvLyBvbiB2YWx1ZXMgdXAgdG8gMipoZHZhbHVlXjItaGR2YWx1ZS0xICg8IDJeMzEpXG5cdGZ1bmN0aW9uIGFtMihpLCB4LCB3LCBqLCBjLCBuKVxuXHR7XG5cdFx0dmFyIHhsID0geCAmIDB4N2ZmZixcblx0XHRcdHhoID0geCA+PiAxNTtcblx0XHR3aGlsZSAoLS1uID49IDApXG5cdFx0e1xuXHRcdFx0dmFyIGwgPSB0aGlzW2ldICYgMHg3ZmZmO1xuXHRcdFx0dmFyIGggPSB0aGlzW2krK10gPj4gMTU7XG5cdFx0XHR2YXIgbSA9IHhoICogbCArIGggKiB4bDtcblx0XHRcdGwgPSB4bCAqIGwgKyAoKG0gJiAweDdmZmYpIDw8IDE1KSArIHdbal0gKyAoYyAmIDB4M2ZmZmZmZmYpO1xuXHRcdFx0YyA9IChsID4+PiAzMCkgKyAobSA+Pj4gMTUpICsgeGggKiBoICsgKGMgPj4+IDMwKTtcblx0XHRcdHdbaisrXSA9IGwgJiAweDNmZmZmZmZmO1xuXHRcdH1cblx0XHRyZXR1cm4gYztcblx0fVxuXHQvLyBBbHRlcm5hdGVseSwgc2V0IG1heCBkaWdpdCBiaXRzIHRvIDI4IHNpbmNlIHNvbWVcblx0Ly8gYnJvd3NlcnMgc2xvdyBkb3duIHdoZW4gZGVhbGluZyB3aXRoIDMyLWJpdCBudW1iZXJzLlxuXHRmdW5jdGlvbiBhbTMoaSwgeCwgdywgaiwgYywgbilcblx0e1xuXHRcdHZhciB4bCA9IHggJiAweDNmZmYsXG5cdFx0XHR4aCA9IHggPj4gMTQ7XG5cdFx0d2hpbGUgKC0tbiA+PSAwKVxuXHRcdHtcblx0XHRcdHZhciBsID0gdGhpc1tpXSAmIDB4M2ZmZjtcblx0XHRcdHZhciBoID0gdGhpc1tpKytdID4+IDE0O1xuXHRcdFx0dmFyIG0gPSB4aCAqIGwgKyBoICogeGw7XG5cdFx0XHRsID0geGwgKiBsICsgKChtICYgMHgzZmZmKSA8PCAxNCkgKyB3W2pdICsgYztcblx0XHRcdGMgPSAobCA+PiAyOCkgKyAobSA+PiAxNCkgKyB4aCAqIGg7XG5cdFx0XHR3W2orK10gPSBsICYgMHhmZmZmZmZmO1xuXHRcdH1cblx0XHRyZXR1cm4gYztcblx0fVxuXHRpZiAoal9sbSAmJiAobmF2aWdhdG9yX2FwcE5hbWUgPT0gXCJNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXJcIikpXG5cdHtcblx0XHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGFtMjtcblx0XHRkYml0cyA9IDMwO1xuXHR9XG5cdGVsc2UgaWYgKGpfbG0gJiYgKG5hdmlnYXRvcl9hcHBOYW1lICE9IFwiTmV0c2NhcGVcIikpXG5cdHtcblx0XHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGFtMTtcblx0XHRkYml0cyA9IDI2O1xuXHR9XG5cdGVsc2Vcblx0eyAvLyBNb3ppbGxhL05ldHNjYXBlIHNlZW1zIHRvIHByZWZlciBhbTNcblx0XHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGFtMztcblx0XHRkYml0cyA9IDI4O1xuXHR9XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLkRCID0gZGJpdHM7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLkRNID0gKCgxIDw8IGRiaXRzKSAtIDEpO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5EViA9ICgxIDw8IGRiaXRzKTtcblx0dmFyIEJJX0ZQID0gNTI7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLkZWID0gTWF0aC5wb3coMiwgQklfRlApO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5GMSA9IEJJX0ZQIC0gZGJpdHM7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLkYyID0gMiAqIGRiaXRzIC0gQklfRlA7XG5cdC8vIERpZ2l0IGNvbnZlcnNpb25zXG5cdHZhciBCSV9STSA9IFwiMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XG5cdHZhciBCSV9SQyA9IG5ldyBBcnJheSgpO1xuXHR2YXIgcnIsIHZ2O1xuXHRyciA9IFwiMFwiLmNoYXJDb2RlQXQoMCk7XG5cdGZvciAodnYgPSAwOyB2diA8PSA5OyArK3Z2KSBCSV9SQ1tycisrXSA9IHZ2O1xuXHRyciA9IFwiYVwiLmNoYXJDb2RlQXQoMCk7XG5cdGZvciAodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikgQklfUkNbcnIrK10gPSB2djtcblx0cnIgPSBcIkFcIi5jaGFyQ29kZUF0KDApO1xuXHRmb3IgKHZ2ID0gMTA7IHZ2IDwgMzY7ICsrdnYpIEJJX1JDW3JyKytdID0gdnY7XG5cblx0ZnVuY3Rpb24gaW50MmNoYXIobilcblx0e1xuXHRcdHJldHVybiBCSV9STS5jaGFyQXQobik7XG5cdH1cblxuXHRmdW5jdGlvbiBpbnRBdChzLCBpKVxuXHR7XG5cdFx0dmFyIGMgPSBCSV9SQ1tzLmNoYXJDb2RlQXQoaSldO1xuXHRcdHJldHVybiAoYyA9PSBudWxsKSA/IC0xIDogYztcblx0fVxuXHQvLyAocHJvdGVjdGVkKSBjb3B5IHRoaXMgdG8gclxuXHRmdW5jdGlvbiBibnBDb3B5VG8ocilcblx0e1xuXHRcdGZvciAodmFyIGkgPSB0aGlzLnQgLSAxOyBpID49IDA7IC0taSkgcltpXSA9IHRoaXNbaV07XG5cdFx0ci50ID0gdGhpcy50O1xuXHRcdHIucyA9IHRoaXMucztcblx0fVxuXHQvLyAocHJvdGVjdGVkKSBzZXQgZnJvbSBpbnRlZ2VyIHZhbHVlIHgsIC1EViA8PSB4IDwgRFZcblx0ZnVuY3Rpb24gYm5wRnJvbUludCh4KVxuXHR7XG5cdFx0dGhpcy50ID0gMTtcblx0XHR0aGlzLnMgPSAoeCA8IDApID8gLTEgOiAwO1xuXHRcdGlmICh4ID4gMCkgdGhpc1swXSA9IHg7XG5cdFx0ZWxzZSBpZiAoeCA8IC0xKSB0aGlzWzBdID0geCArIHRoaXMuRFY7XG5cdFx0ZWxzZSB0aGlzLnQgPSAwO1xuXHR9XG5cdC8vIHJldHVybiBiaWdpbnQgaW5pdGlhbGl6ZWQgdG8gdmFsdWVcblx0ZnVuY3Rpb24gbmJ2KGkpXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdHIuZnJvbUludChpKTtcblx0XHRyZXR1cm4gcjtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSBzZXQgZnJvbSBzdHJpbmcgYW5kIHJhZGl4XG5cdGZ1bmN0aW9uIGJucEZyb21TdHJpbmcocywgYilcblx0e1xuXHRcdHZhciBrO1xuXHRcdGlmIChiID09IDE2KSBrID0gNDtcblx0XHRlbHNlIGlmIChiID09IDgpIGsgPSAzO1xuXHRcdGVsc2UgaWYgKGIgPT0gMjU2KSBrID0gODsgLy8gYnl0ZSBhcnJheVxuXHRcdGVsc2UgaWYgKGIgPT0gMikgayA9IDE7XG5cdFx0ZWxzZSBpZiAoYiA9PSAzMikgayA9IDU7XG5cdFx0ZWxzZSBpZiAoYiA9PSA0KSBrID0gMjtcblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dGhpcy5mcm9tUmFkaXgocywgYik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMudCA9IDA7XG5cdFx0dGhpcy5zID0gMDtcblx0XHR2YXIgaSA9IHMubGVuZ3RoLFxuXHRcdFx0bWkgPSBmYWxzZSxcblx0XHRcdHNoID0gMDtcblx0XHR3aGlsZSAoLS1pID49IDApXG5cdFx0e1xuXHRcdFx0dmFyIHggPSAoayA9PSA4KSA/IHNbaV0gJiAweGZmIDogaW50QXQocywgaSk7XG5cdFx0XHRpZiAoeCA8IDApXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChzLmNoYXJBdChpKSA9PSBcIi1cIikgbWkgPSB0cnVlO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdG1pID0gZmFsc2U7XG5cdFx0XHRpZiAoc2ggPT0gMClcblx0XHRcdFx0dGhpc1t0aGlzLnQrK10gPSB4O1xuXHRcdFx0ZWxzZSBpZiAoc2ggKyBrID4gdGhpcy5EQilcblx0XHRcdHtcblx0XHRcdFx0dGhpc1t0aGlzLnQgLSAxXSB8PSAoeCAmICgoMSA8PCAodGhpcy5EQiAtIHNoKSkgLSAxKSkgPDwgc2g7XG5cdFx0XHRcdHRoaXNbdGhpcy50KytdID0gKHggPj4gKHRoaXMuREIgLSBzaCkpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHR0aGlzW3RoaXMudCAtIDFdIHw9IHggPDwgc2g7XG5cdFx0XHRzaCArPSBrO1xuXHRcdFx0aWYgKHNoID49IHRoaXMuREIpIHNoIC09IHRoaXMuREI7XG5cdFx0fVxuXHRcdGlmIChrID09IDggJiYgKHNbMF0gJiAweDgwKSAhPSAwKVxuXHRcdHtcblx0XHRcdHRoaXMucyA9IC0xO1xuXHRcdFx0aWYgKHNoID4gMCkgdGhpc1t0aGlzLnQgLSAxXSB8PSAoKDEgPDwgKHRoaXMuREIgLSBzaCkpIC0gMSkgPDwgc2g7XG5cdFx0fVxuXHRcdHRoaXMuY2xhbXAoKTtcblx0XHRpZiAobWkpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyh0aGlzLCB0aGlzKTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSBjbGFtcCBvZmYgZXhjZXNzIGhpZ2ggd29yZHNcblx0ZnVuY3Rpb24gYm5wQ2xhbXAoKVxuXHR7XG5cdFx0dmFyIGMgPSB0aGlzLnMgJiB0aGlzLkRNO1xuXHRcdHdoaWxlICh0aGlzLnQgPiAwICYmIHRoaXNbdGhpcy50IC0gMV0gPT0gYykgLS10aGlzLnQ7XG5cdH1cblx0Ly8gKHB1YmxpYykgcmV0dXJuIHN0cmluZyByZXByZXNlbnRhdGlvbiBpbiBnaXZlbiByYWRpeFxuXHRmdW5jdGlvbiBiblRvU3RyaW5nKGIpXG5cdHtcblx0XHRpZiAodGhpcy5zIDwgMCkgcmV0dXJuIFwiLVwiICsgdGhpcy5uZWdhdGUoKS50b1N0cmluZyhiKTtcblx0XHR2YXIgaztcblx0XHRpZiAoYiA9PSAxNikgayA9IDQ7XG5cdFx0ZWxzZSBpZiAoYiA9PSA4KSBrID0gMztcblx0XHRlbHNlIGlmIChiID09IDIpIGsgPSAxO1xuXHRcdGVsc2UgaWYgKGIgPT0gMzIpIGsgPSA1O1xuXHRcdGVsc2UgaWYgKGIgPT0gNCkgayA9IDI7XG5cdFx0ZWxzZSByZXR1cm4gdGhpcy50b1JhZGl4KGIpO1xuXHRcdHZhciBrbSA9ICgxIDw8IGspIC0gMSxcblx0XHRcdGQsIG0gPSBmYWxzZSxcblx0XHRcdHIgPSBcIlwiLFxuXHRcdFx0aSA9IHRoaXMudDtcblx0XHR2YXIgcCA9IHRoaXMuREIgLSAoaSAqIHRoaXMuREIpICUgaztcblx0XHRpZiAoaS0tID4gMClcblx0XHR7XG5cdFx0XHRpZiAocCA8IHRoaXMuREIgJiYgKGQgPSB0aGlzW2ldID4+IHApID4gMClcblx0XHRcdHtcblx0XHRcdFx0bSA9IHRydWU7XG5cdFx0XHRcdHIgPSBpbnQyY2hhcihkKTtcblx0XHRcdH1cblx0XHRcdHdoaWxlIChpID49IDApXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChwIDwgaylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGQgPSAodGhpc1tpXSAmICgoMSA8PCBwKSAtIDEpKSA8PCAoayAtIHApO1xuXHRcdFx0XHRcdGQgfD0gdGhpc1stLWldID4+IChwICs9IHRoaXMuREIgLSBrKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRkID0gKHRoaXNbaV0gPj4gKHAgLT0gaykpICYga207XG5cdFx0XHRcdFx0aWYgKHAgPD0gMClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRwICs9IHRoaXMuREI7XG5cdFx0XHRcdFx0XHQtLWk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChkID4gMCkgbSA9IHRydWU7XG5cdFx0XHRcdGlmIChtKSByICs9IGludDJjaGFyKGQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbSA/IHIgOiBcIjBcIjtcblx0fVxuXHQvLyAocHVibGljKSAtdGhpc1xuXHRmdW5jdGlvbiBibk5lZ2F0ZSgpXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdEJpZ0ludGVnZXIuWkVSTy5zdWJUbyh0aGlzLCByKTtcblx0XHRyZXR1cm4gcjtcblx0fVxuXHQvLyAocHVibGljKSB8dGhpc3xcblx0ZnVuY3Rpb24gYm5BYnMoKVxuXHR7XG5cdFx0cmV0dXJuICh0aGlzLnMgPCAwKSA/IHRoaXMubmVnYXRlKCkgOiB0aGlzO1xuXHR9XG5cdC8vIChwdWJsaWMpIHJldHVybiArIGlmIHRoaXMgPiBhLCAtIGlmIHRoaXMgPCBhLCAwIGlmIGVxdWFsXG5cdGZ1bmN0aW9uIGJuQ29tcGFyZVRvKGEpXG5cdHtcblx0XHR2YXIgciA9IHRoaXMucyAtIGEucztcblx0XHRpZiAociAhPSAwKSByZXR1cm4gcjtcblx0XHR2YXIgaSA9IHRoaXMudDtcblx0XHRyID0gaSAtIGEudDtcblx0XHRpZiAociAhPSAwKSByZXR1cm4gKHRoaXMucyA8IDApID8gLXIgOiByO1xuXHRcdHdoaWxlICgtLWkgPj0gMClcblx0XHRcdGlmICgociA9IHRoaXNbaV0gLSBhW2ldKSAhPSAwKSByZXR1cm4gcjtcblx0XHRyZXR1cm4gMDtcblx0fVxuXHQvLyByZXR1cm5zIGJpdCBsZW5ndGggb2YgdGhlIGludGVnZXIgeFxuXHRmdW5jdGlvbiBuYml0cyh4KVxuXHR7XG5cdFx0dmFyIHIgPSAxLFxuXHRcdFx0dDtcblx0XHRpZiAoKHQgPSB4ID4+PiAxNikgIT0gMClcblx0XHR7XG5cdFx0XHR4ID0gdDtcblx0XHRcdHIgKz0gMTY7XG5cdFx0fVxuXHRcdGlmICgodCA9IHggPj4gOCkgIT0gMClcblx0XHR7XG5cdFx0XHR4ID0gdDtcblx0XHRcdHIgKz0gODtcblx0XHR9XG5cdFx0aWYgKCh0ID0geCA+PiA0KSAhPSAwKVxuXHRcdHtcblx0XHRcdHggPSB0O1xuXHRcdFx0ciArPSA0O1xuXHRcdH1cblx0XHRpZiAoKHQgPSB4ID4+IDIpICE9IDApXG5cdFx0e1xuXHRcdFx0eCA9IHQ7XG5cdFx0XHRyICs9IDI7XG5cdFx0fVxuXHRcdGlmICgodCA9IHggPj4gMSkgIT0gMClcblx0XHR7XG5cdFx0XHR4ID0gdDtcblx0XHRcdHIgKz0gMTtcblx0XHR9XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgcmV0dXJuIHRoZSBudW1iZXIgb2YgYml0cyBpbiBcInRoaXNcIlxuXHRmdW5jdGlvbiBibkJpdExlbmd0aCgpXG5cdHtcblx0XHRpZiAodGhpcy50IDw9IDApIHJldHVybiAwO1xuXHRcdHJldHVybiB0aGlzLkRCICogKHRoaXMudCAtIDEpICsgbmJpdHModGhpc1t0aGlzLnQgLSAxXSBeICh0aGlzLnMgJiB0aGlzLkRNKSk7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgciA9IHRoaXMgPDwgbipEQlxuXHRmdW5jdGlvbiBibnBETFNoaWZ0VG8obiwgcilcblx0e1xuXHRcdHZhciBpO1xuXHRcdGZvciAoaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSByW2kgKyBuXSA9IHRoaXNbaV07XG5cdFx0Zm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSByW2ldID0gMDtcblx0XHRyLnQgPSB0aGlzLnQgKyBuO1xuXHRcdHIucyA9IHRoaXMucztcblx0fVxuXHQvLyAocHJvdGVjdGVkKSByID0gdGhpcyA+PiBuKkRCXG5cdGZ1bmN0aW9uIGJucERSU2hpZnRUbyhuLCByKVxuXHR7XG5cdFx0Zm9yICh2YXIgaSA9IG47IGkgPCB0aGlzLnQ7ICsraSkgcltpIC0gbl0gPSB0aGlzW2ldO1xuXHRcdHIudCA9IE1hdGgubWF4KHRoaXMudCAtIG4sIDApO1xuXHRcdHIucyA9IHRoaXMucztcblx0fVxuXHQvLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuXG5cdGZ1bmN0aW9uIGJucExTaGlmdFRvKG4sIHIpXG5cdHtcblx0XHR2YXIgYnMgPSBuICUgdGhpcy5EQjtcblx0XHR2YXIgY2JzID0gdGhpcy5EQiAtIGJzO1xuXHRcdHZhciBibSA9ICgxIDw8IGNicykgLSAxO1xuXHRcdHZhciBkcyA9IE1hdGguZmxvb3IobiAvIHRoaXMuREIpLFxuXHRcdFx0YyA9ICh0aGlzLnMgPDwgYnMpICYgdGhpcy5ETSxcblx0XHRcdGk7XG5cdFx0Zm9yIChpID0gdGhpcy50IC0gMTsgaSA+PSAwOyAtLWkpXG5cdFx0e1xuXHRcdFx0cltpICsgZHMgKyAxXSA9ICh0aGlzW2ldID4+IGNicykgfCBjO1xuXHRcdFx0YyA9ICh0aGlzW2ldICYgYm0pIDw8IGJzO1xuXHRcdH1cblx0XHRmb3IgKGkgPSBkcyAtIDE7IGkgPj0gMDsgLS1pKSByW2ldID0gMDtcblx0XHRyW2RzXSA9IGM7XG5cdFx0ci50ID0gdGhpcy50ICsgZHMgKyAxO1xuXHRcdHIucyA9IHRoaXMucztcblx0XHRyLmNsYW1wKCk7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgciA9IHRoaXMgPj4gblxuXHRmdW5jdGlvbiBibnBSU2hpZnRUbyhuLCByKVxuXHR7XG5cdFx0ci5zID0gdGhpcy5zO1xuXHRcdHZhciBkcyA9IE1hdGguZmxvb3IobiAvIHRoaXMuREIpO1xuXHRcdGlmIChkcyA+PSB0aGlzLnQpXG5cdFx0e1xuXHRcdFx0ci50ID0gMDtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dmFyIGJzID0gbiAlIHRoaXMuREI7XG5cdFx0dmFyIGNicyA9IHRoaXMuREIgLSBicztcblx0XHR2YXIgYm0gPSAoMSA8PCBicykgLSAxO1xuXHRcdHJbMF0gPSB0aGlzW2RzXSA+PiBicztcblx0XHRmb3IgKHZhciBpID0gZHMgKyAxOyBpIDwgdGhpcy50OyArK2kpXG5cdFx0e1xuXHRcdFx0cltpIC0gZHMgLSAxXSB8PSAodGhpc1tpXSAmIGJtKSA8PCBjYnM7XG5cdFx0XHRyW2kgLSBkc10gPSB0aGlzW2ldID4+IGJzO1xuXHRcdH1cblx0XHRpZiAoYnMgPiAwKSByW3RoaXMudCAtIGRzIC0gMV0gfD0gKHRoaXMucyAmIGJtKSA8PCBjYnM7XG5cdFx0ci50ID0gdGhpcy50IC0gZHM7XG5cdFx0ci5jbGFtcCgpO1xuXHR9XG5cdC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIC0gYVxuXHRmdW5jdGlvbiBibnBTdWJUbyhhLCByKVxuXHR7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0YyA9IDAsXG5cdFx0XHRtID0gTWF0aC5taW4oYS50LCB0aGlzLnQpO1xuXHRcdHdoaWxlIChpIDwgbSlcblx0XHR7XG5cdFx0XHRjICs9IHRoaXNbaV0gLSBhW2ldO1xuXHRcdFx0cltpKytdID0gYyAmIHRoaXMuRE07XG5cdFx0XHRjID4+PSB0aGlzLkRCO1xuXHRcdH1cblx0XHRpZiAoYS50IDwgdGhpcy50KVxuXHRcdHtcblx0XHRcdGMgLT0gYS5zO1xuXHRcdFx0d2hpbGUgKGkgPCB0aGlzLnQpXG5cdFx0XHR7XG5cdFx0XHRcdGMgKz0gdGhpc1tpXTtcblx0XHRcdFx0cltpKytdID0gYyAmIHRoaXMuRE07XG5cdFx0XHRcdGMgPj49IHRoaXMuREI7XG5cdFx0XHR9XG5cdFx0XHRjICs9IHRoaXMucztcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGMgKz0gdGhpcy5zO1xuXHRcdFx0d2hpbGUgKGkgPCBhLnQpXG5cdFx0XHR7XG5cdFx0XHRcdGMgLT0gYVtpXTtcblx0XHRcdFx0cltpKytdID0gYyAmIHRoaXMuRE07XG5cdFx0XHRcdGMgPj49IHRoaXMuREI7XG5cdFx0XHR9XG5cdFx0XHRjIC09IGEucztcblx0XHR9XG5cdFx0ci5zID0gKGMgPCAwKSA/IC0xIDogMDtcblx0XHRpZiAoYyA8IC0xKSByW2krK10gPSB0aGlzLkRWICsgYztcblx0XHRlbHNlIGlmIChjID4gMCkgcltpKytdID0gYztcblx0XHRyLnQgPSBpO1xuXHRcdHIuY2xhbXAoKTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSByID0gdGhpcyAqIGEsIHIgIT0gdGhpcyxhIChIQUMgMTQuMTIpXG5cdC8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cblx0ZnVuY3Rpb24gYm5wTXVsdGlwbHlUbyhhLCByKVxuXHR7XG5cdFx0dmFyIHggPSB0aGlzLmFicygpLFxuXHRcdFx0eSA9IGEuYWJzKCk7XG5cdFx0dmFyIGkgPSB4LnQ7XG5cdFx0ci50ID0gaSArIHkudDtcblx0XHR3aGlsZSAoLS1pID49IDApIHJbaV0gPSAwO1xuXHRcdGZvciAoaSA9IDA7IGkgPCB5LnQ7ICsraSkgcltpICsgeC50XSA9IHguYW0oMCwgeVtpXSwgciwgaSwgMCwgeC50KTtcblx0XHRyLnMgPSAwO1xuXHRcdHIuY2xhbXAoKTtcblx0XHRpZiAodGhpcy5zICE9IGEucykgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHIsIHIpO1xuXHR9XG5cdC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzXjIsIHIgIT0gdGhpcyAoSEFDIDE0LjE2KVxuXHRmdW5jdGlvbiBibnBTcXVhcmVUbyhyKVxuXHR7XG5cdFx0dmFyIHggPSB0aGlzLmFicygpO1xuXHRcdHZhciBpID0gci50ID0gMiAqIHgudDtcblx0XHR3aGlsZSAoLS1pID49IDApIHJbaV0gPSAwO1xuXHRcdGZvciAoaSA9IDA7IGkgPCB4LnQgLSAxOyArK2kpXG5cdFx0e1xuXHRcdFx0dmFyIGMgPSB4LmFtKGksIHhbaV0sIHIsIDIgKiBpLCAwLCAxKTtcblx0XHRcdGlmICgocltpICsgeC50XSArPSB4LmFtKGkgKyAxLCAyICogeFtpXSwgciwgMiAqIGkgKyAxLCBjLCB4LnQgLSBpIC0gMSkpID49IHguRFYpXG5cdFx0XHR7XG5cdFx0XHRcdHJbaSArIHgudF0gLT0geC5EVjtcblx0XHRcdFx0cltpICsgeC50ICsgMV0gPSAxO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoci50ID4gMCkgcltyLnQgLSAxXSArPSB4LmFtKGksIHhbaV0sIHIsIDIgKiBpLCAwLCAxKTtcblx0XHRyLnMgPSAwO1xuXHRcdHIuY2xhbXAoKTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSBkaXZpZGUgdGhpcyBieSBtLCBxdW90aWVudCBhbmQgcmVtYWluZGVyIHRvIHEsIHIgKEhBQyAxNC4yMClcblx0Ly8gciAhPSBxLCB0aGlzICE9IG0uICBxIG9yIHIgbWF5IGJlIG51bGwuXG5cdGZ1bmN0aW9uIGJucERpdlJlbVRvKG0sIHEsIHIpXG5cdHtcblx0XHR2YXIgcG0gPSBtLmFicygpO1xuXHRcdGlmIChwbS50IDw9IDApIHJldHVybjtcblx0XHR2YXIgcHQgPSB0aGlzLmFicygpO1xuXHRcdGlmIChwdC50IDwgcG0udClcblx0XHR7XG5cdFx0XHRpZiAocSAhPSBudWxsKSBxLmZyb21JbnQoMCk7XG5cdFx0XHRpZiAociAhPSBudWxsKSB0aGlzLmNvcHlUbyhyKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKHIgPT0gbnVsbCkgciA9IG5iaSgpO1xuXHRcdHZhciB5ID0gbmJpKCksXG5cdFx0XHR0cyA9IHRoaXMucyxcblx0XHRcdG1zID0gbS5zO1xuXHRcdHZhciBuc2ggPSB0aGlzLkRCIC0gbmJpdHMocG1bcG0udCAtIDFdKTsgLy8gbm9ybWFsaXplIG1vZHVsdXNcblx0XHRpZiAobnNoID4gMClcblx0XHR7XG5cdFx0XHRwbS5sU2hpZnRUbyhuc2gsIHkpO1xuXHRcdFx0cHQubFNoaWZ0VG8obnNoLCByKTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHBtLmNvcHlUbyh5KTtcblx0XHRcdHB0LmNvcHlUbyhyKTtcblx0XHR9XG5cdFx0dmFyIHlzID0geS50O1xuXHRcdHZhciB5MCA9IHlbeXMgLSAxXTtcblx0XHRpZiAoeTAgPT0gMCkgcmV0dXJuO1xuXHRcdHZhciB5dCA9IHkwICogKDEgPDwgdGhpcy5GMSkgKyAoKHlzID4gMSkgPyB5W3lzIC0gMl0gPj4gdGhpcy5GMiA6IDApO1xuXHRcdHZhciBkMSA9IHRoaXMuRlYgLyB5dCxcblx0XHRcdGQyID0gKDEgPDwgdGhpcy5GMSkgLyB5dCxcblx0XHRcdGUgPSAxIDw8IHRoaXMuRjI7XG5cdFx0dmFyIGkgPSByLnQsXG5cdFx0XHRqID0gaSAtIHlzLFxuXHRcdFx0dCA9IChxID09IG51bGwpID8gbmJpKCkgOiBxO1xuXHRcdHkuZGxTaGlmdFRvKGosIHQpO1xuXHRcdGlmIChyLmNvbXBhcmVUbyh0KSA+PSAwKVxuXHRcdHtcblx0XHRcdHJbci50KytdID0gMTtcblx0XHRcdHIuc3ViVG8odCwgcik7XG5cdFx0fVxuXHRcdEJpZ0ludGVnZXIuT05FLmRsU2hpZnRUbyh5cywgdCk7XG5cdFx0dC5zdWJUbyh5LCB5KTsgLy8gXCJuZWdhdGl2ZVwiIHkgc28gd2UgY2FuIHJlcGxhY2Ugc3ViIHdpdGggYW0gbGF0ZXJcblx0XHR3aGlsZSAoeS50IDwgeXMpIHlbeS50KytdID0gMDtcblx0XHR3aGlsZSAoLS1qID49IDApXG5cdFx0e1xuXHRcdFx0Ly8gRXN0aW1hdGUgcXVvdGllbnQgZGlnaXRcblx0XHRcdHZhciBxZCA9IChyWy0taV0gPT0geTApID8gdGhpcy5ETSA6IE1hdGguZmxvb3IocltpXSAqIGQxICsgKHJbaSAtIDFdICsgZSkgKiBkMik7XG5cdFx0XHRpZiAoKHJbaV0gKz0geS5hbSgwLCBxZCwgciwgaiwgMCwgeXMpKSA8IHFkKVxuXHRcdFx0eyAvLyBUcnkgaXQgb3V0XG5cdFx0XHRcdHkuZGxTaGlmdFRvKGosIHQpO1xuXHRcdFx0XHRyLnN1YlRvKHQsIHIpO1xuXHRcdFx0XHR3aGlsZSAocltpXSA8IC0tcWQpIHIuc3ViVG8odCwgcik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChxICE9IG51bGwpXG5cdFx0e1xuXHRcdFx0ci5kclNoaWZ0VG8oeXMsIHEpO1xuXHRcdFx0aWYgKHRzICE9IG1zKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8ocSwgcSk7XG5cdFx0fVxuXHRcdHIudCA9IHlzO1xuXHRcdHIuY2xhbXAoKTtcblx0XHRpZiAobnNoID4gMCkgci5yU2hpZnRUbyhuc2gsIHIpOyAvLyBEZW5vcm1hbGl6ZSByZW1haW5kZXJcblx0XHRpZiAodHMgPCAwKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8ociwgcik7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpcyBtb2QgYVxuXHRmdW5jdGlvbiBibk1vZChhKVxuXHR7XG5cdFx0dmFyIHIgPSBuYmkoKTtcblx0XHR0aGlzLmFicygpLmRpdlJlbVRvKGEsIG51bGwsIHIpO1xuXHRcdGlmICh0aGlzLnMgPCAwICYmIHIuY29tcGFyZVRvKEJpZ0ludGVnZXIuWkVSTykgPiAwKSBhLnN1YlRvKHIsIHIpO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIE1vZHVsYXIgcmVkdWN0aW9uIHVzaW5nIFwiY2xhc3NpY1wiIGFsZ29yaXRobVxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0ZnVuY3Rpb24gQ2xhc3NpYyhtKVxuXHR7XG5cdFx0dGhpcy5tID0gbTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNDb252ZXJ0KHgpXG5cdHtcblx0XHRpZiAoeC5zIDwgMCB8fCB4LmNvbXBhcmVUbyh0aGlzLm0pID49IDApIHJldHVybiB4Lm1vZCh0aGlzLm0pO1xuXHRcdGVsc2UgcmV0dXJuIHg7XG5cdH1cblxuXHRmdW5jdGlvbiBjUmV2ZXJ0KHgpXG5cdHtcblx0XHRyZXR1cm4geDtcblx0fVxuXG5cdGZ1bmN0aW9uIGNSZWR1Y2UoeClcblx0e1xuXHRcdHguZGl2UmVtVG8odGhpcy5tLCBudWxsLCB4KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNNdWxUbyh4LCB5LCByKVxuXHR7XG5cdFx0eC5tdWx0aXBseVRvKHksIHIpO1xuXHRcdHRoaXMucmVkdWNlKHIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY1NxclRvKHgsIHIpXG5cdHtcblx0XHR4LnNxdWFyZVRvKHIpO1xuXHRcdHRoaXMucmVkdWNlKHIpO1xuXHR9XG5cdENsYXNzaWMucHJvdG90eXBlLmNvbnZlcnQgPSBjQ29udmVydDtcblx0Q2xhc3NpYy5wcm90b3R5cGUucmV2ZXJ0ID0gY1JldmVydDtcblx0Q2xhc3NpYy5wcm90b3R5cGUucmVkdWNlID0gY1JlZHVjZTtcblx0Q2xhc3NpYy5wcm90b3R5cGUubXVsVG8gPSBjTXVsVG87XG5cdENsYXNzaWMucHJvdG90eXBlLnNxclRvID0gY1NxclRvO1xuXHQvLyAocHJvdGVjdGVkKSByZXR1cm4gXCItMS90aGlzICUgMl5EQlwiOyB1c2VmdWwgZm9yIE1vbnQuIHJlZHVjdGlvblxuXHQvLyBqdXN0aWZpY2F0aW9uOlxuXHQvLyAgICAgICAgIHh5ID09IDEgKG1vZCBtKVxuXHQvLyAgICAgICAgIHh5ID0gIDEra21cblx0Ly8gICB4eSgyLXh5KSA9ICgxK2ttKSgxLWttKVxuXHQvLyB4W3koMi14eSldID0gMS1rXjJtXjJcblx0Ly8geFt5KDIteHkpXSA9PSAxIChtb2QgbV4yKVxuXHQvLyBpZiB5IGlzIDEveCBtb2QgbSwgdGhlbiB5KDIteHkpIGlzIDEveCBtb2QgbV4yXG5cdC8vIHNob3VsZCByZWR1Y2UgeCBhbmQgeSgyLXh5KSBieSBtXjIgYXQgZWFjaCBzdGVwIHRvIGtlZXAgc2l6ZSBib3VuZGVkLlxuXHQvLyBKUyBtdWx0aXBseSBcIm92ZXJmbG93c1wiIGRpZmZlcmVudGx5IGZyb20gQy9DKyssIHNvIGNhcmUgaXMgbmVlZGVkIGhlcmUuXG5cdGZ1bmN0aW9uIGJucEludkRpZ2l0KClcblx0e1xuXHRcdGlmICh0aGlzLnQgPCAxKSByZXR1cm4gMDtcblx0XHR2YXIgeCA9IHRoaXNbMF07XG5cdFx0aWYgKCh4ICYgMSkgPT0gMCkgcmV0dXJuIDA7XG5cdFx0dmFyIHkgPSB4ICYgMzsgLy8geSA9PSAxL3ggbW9kIDJeMlxuXHRcdHkgPSAoeSAqICgyIC0gKHggJiAweGYpICogeSkpICYgMHhmOyAvLyB5ID09IDEveCBtb2QgMl40XG5cdFx0eSA9ICh5ICogKDIgLSAoeCAmIDB4ZmYpICogeSkpICYgMHhmZjsgLy8geSA9PSAxL3ggbW9kIDJeOFxuXHRcdHkgPSAoeSAqICgyIC0gKCgoeCAmIDB4ZmZmZikgKiB5KSAmIDB4ZmZmZikpKSAmIDB4ZmZmZjsgLy8geSA9PSAxL3ggbW9kIDJeMTZcblx0XHQvLyBsYXN0IHN0ZXAgLSBjYWxjdWxhdGUgaW52ZXJzZSBtb2QgRFYgZGlyZWN0bHk7XG5cdFx0Ly8gYXNzdW1lcyAxNiA8IERCIDw9IDMyIGFuZCBhc3N1bWVzIGFiaWxpdHkgdG8gaGFuZGxlIDQ4LWJpdCBpbnRzXG5cdFx0eSA9ICh5ICogKDIgLSB4ICogeSAlIHRoaXMuRFYpKSAlIHRoaXMuRFY7IC8vIHkgPT0gMS94IG1vZCAyXmRiaXRzXG5cdFx0Ly8gd2UgcmVhbGx5IHdhbnQgdGhlIG5lZ2F0aXZlIGludmVyc2UsIGFuZCAtRFYgPCB5IDwgRFZcblx0XHRyZXR1cm4gKHkgPiAwKSA/IHRoaXMuRFYgLSB5IDogLXk7XG5cdH1cblx0Ly8gTW9udGdvbWVyeSByZWR1Y3Rpb25cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdGZ1bmN0aW9uIE1vbnRnb21lcnkobSlcblx0e1xuXHRcdHRoaXMubSA9IG07XG5cdFx0dGhpcy5tcCA9IG0uaW52RGlnaXQoKTtcblx0XHR0aGlzLm1wbCA9IHRoaXMubXAgJiAweDdmZmY7XG5cdFx0dGhpcy5tcGggPSB0aGlzLm1wID4+IDE1O1xuXHRcdHRoaXMudW0gPSAoMSA8PCAobS5EQiAtIDE1KSkgLSAxO1xuXHRcdHRoaXMubXQyID0gMiAqIG0udDtcblx0fVxuXHQvLyB4UiBtb2QgbVxuXHRmdW5jdGlvbiBtb250Q29udmVydCh4KVxuXHR7XG5cdFx0dmFyIHIgPSBuYmkoKTtcblx0XHR4LmFicygpLmRsU2hpZnRUbyh0aGlzLm0udCwgcik7XG5cdFx0ci5kaXZSZW1Ubyh0aGlzLm0sIG51bGwsIHIpO1xuXHRcdGlmICh4LnMgPCAwICYmIHIuY29tcGFyZVRvKEJpZ0ludGVnZXIuWkVSTykgPiAwKSB0aGlzLm0uc3ViVG8ociwgcik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8geC9SIG1vZCBtXG5cdGZ1bmN0aW9uIG1vbnRSZXZlcnQoeClcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0eC5jb3B5VG8ocik7XG5cdFx0dGhpcy5yZWR1Y2Uocik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8geCA9IHgvUiBtb2QgbSAoSEFDIDE0LjMyKVxuXHRmdW5jdGlvbiBtb250UmVkdWNlKHgpXG5cdHtcblx0XHR3aGlsZSAoeC50IDw9IHRoaXMubXQyKSAvLyBwYWQgeCBzbyBhbSBoYXMgZW5vdWdoIHJvb20gbGF0ZXJcblx0XHRcdHhbeC50KytdID0gMDtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubS50OyArK2kpXG5cdFx0e1xuXHRcdFx0Ly8gZmFzdGVyIHdheSBvZiBjYWxjdWxhdGluZyB1MCA9IHhbaV0qbXAgbW9kIERWXG5cdFx0XHR2YXIgaiA9IHhbaV0gJiAweDdmZmY7XG5cdFx0XHR2YXIgdTAgPSAoaiAqIHRoaXMubXBsICsgKCgoaiAqIHRoaXMubXBoICsgKHhbaV0gPj4gMTUpICogdGhpcy5tcGwpICYgdGhpcy51bSkgPDwgMTUpKSAmIHguRE07XG5cdFx0XHQvLyB1c2UgYW0gdG8gY29tYmluZSB0aGUgbXVsdGlwbHktc2hpZnQtYWRkIGludG8gb25lIGNhbGxcblx0XHRcdGogPSBpICsgdGhpcy5tLnQ7XG5cdFx0XHR4W2pdICs9IHRoaXMubS5hbSgwLCB1MCwgeCwgaSwgMCwgdGhpcy5tLnQpO1xuXHRcdFx0Ly8gcHJvcGFnYXRlIGNhcnJ5XG5cdFx0XHR3aGlsZSAoeFtqXSA+PSB4LkRWKVxuXHRcdFx0e1xuXHRcdFx0XHR4W2pdIC09IHguRFY7XG5cdFx0XHRcdHhbKytqXSsrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR4LmNsYW1wKCk7XG5cdFx0eC5kclNoaWZ0VG8odGhpcy5tLnQsIHgpO1xuXHRcdGlmICh4LmNvbXBhcmVUbyh0aGlzLm0pID49IDApIHguc3ViVG8odGhpcy5tLCB4KTtcblx0fVxuXHQvLyByID0gXCJ4XjIvUiBtb2QgbVwiOyB4ICE9IHJcblx0ZnVuY3Rpb24gbW9udFNxclRvKHgsIHIpXG5cdHtcblx0XHR4LnNxdWFyZVRvKHIpO1xuXHRcdHRoaXMucmVkdWNlKHIpO1xuXHR9XG5cdC8vIHIgPSBcInh5L1IgbW9kIG1cIjsgeCx5ICE9IHJcblx0ZnVuY3Rpb24gbW9udE11bFRvKHgsIHksIHIpXG5cdHtcblx0XHR4Lm11bHRpcGx5VG8oeSwgcik7XG5cdFx0dGhpcy5yZWR1Y2Uocik7XG5cdH1cblx0TW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydCA9IG1vbnRDb252ZXJ0O1xuXHRNb250Z29tZXJ5LnByb3RvdHlwZS5yZXZlcnQgPSBtb250UmV2ZXJ0O1xuXHRNb250Z29tZXJ5LnByb3RvdHlwZS5yZWR1Y2UgPSBtb250UmVkdWNlO1xuXHRNb250Z29tZXJ5LnByb3RvdHlwZS5tdWxUbyA9IG1vbnRNdWxUbztcblx0TW9udGdvbWVyeS5wcm90b3R5cGUuc3FyVG8gPSBtb250U3FyVG87XG5cdC8vIChwcm90ZWN0ZWQpIHRydWUgaWZmIHRoaXMgaXMgZXZlblxuXHRmdW5jdGlvbiBibnBJc0V2ZW4oKVxuXHR7XG5cdFx0cmV0dXJuICgodGhpcy50ID4gMCkgPyAodGhpc1swXSAmIDEpIDogdGhpcy5zKSA9PSAwO1xuXHR9XG5cdC8vIChwcm90ZWN0ZWQpIHRoaXNeZSwgZSA8IDJeMzIsIGRvaW5nIHNxciBhbmQgbXVsIHdpdGggXCJyXCIgKEhBQyAxNC43OSlcblx0ZnVuY3Rpb24gYm5wRXhwKGUsIHopXG5cdHtcblx0XHRpZiAoZSA+IDB4ZmZmZmZmZmYgfHwgZSA8IDEpIHJldHVybiBCaWdJbnRlZ2VyLk9ORTtcblx0XHR2YXIgciA9IG5iaSgpLFxuXHRcdFx0cjIgPSBuYmkoKSxcblx0XHRcdGcgPSB6LmNvbnZlcnQodGhpcyksXG5cdFx0XHRpID0gbmJpdHMoZSkgLSAxO1xuXHRcdGcuY29weVRvKHIpO1xuXHRcdHdoaWxlICgtLWkgPj0gMClcblx0XHR7XG5cdFx0XHR6LnNxclRvKHIsIHIyKTtcblx0XHRcdGlmICgoZSAmICgxIDw8IGkpKSA+IDApIHoubXVsVG8ocjIsIGcsIHIpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgdCA9IHI7XG5cdFx0XHRcdHIgPSByMjtcblx0XHRcdFx0cjIgPSB0O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gei5yZXZlcnQocik7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpc15lICUgbSwgMCA8PSBlIDwgMl4zMlxuXHRmdW5jdGlvbiBibk1vZFBvd0ludChlLCBtKVxuXHR7XG5cdFx0dmFyIHo7XG5cdFx0aWYgKGUgPCAyNTYgfHwgbS5pc0V2ZW4oKSkgeiA9IG5ldyBDbGFzc2ljKG0pO1xuXHRcdGVsc2UgeiA9IG5ldyBNb250Z29tZXJ5KG0pO1xuXHRcdHJldHVybiB0aGlzLmV4cChlLCB6KTtcblx0fVxuXHQvLyBwcm90ZWN0ZWRcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuY29weVRvID0gYm5wQ29weVRvO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tSW50ID0gYm5wRnJvbUludDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVN0cmluZyA9IGJucEZyb21TdHJpbmc7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmNsYW1wID0gYm5wQ2xhbXA7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmRsU2hpZnRUbyA9IGJucERMU2hpZnRUbztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuZHJTaGlmdFRvID0gYm5wRFJTaGlmdFRvO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5sU2hpZnRUbyA9IGJucExTaGlmdFRvO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5yU2hpZnRUbyA9IGJucFJTaGlmdFRvO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5zdWJUbyA9IGJucFN1YlRvO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVRvID0gYm5wTXVsdGlwbHlUbztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlVG8gPSBibnBTcXVhcmVUbztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuZGl2UmVtVG8gPSBibnBEaXZSZW1Ubztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuaW52RGlnaXQgPSBibnBJbnZEaWdpdDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuaXNFdmVuID0gYm5wSXNFdmVuO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5leHAgPSBibnBFeHA7XG5cdC8vIHB1YmxpY1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS50b1N0cmluZyA9IGJuVG9TdHJpbmc7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLm5lZ2F0ZSA9IGJuTmVnYXRlO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5hYnMgPSBibkFicztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuY29tcGFyZVRvID0gYm5Db21wYXJlVG87XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdExlbmd0aCA9IGJuQml0TGVuZ3RoO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2QgPSBibk1vZDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUubW9kUG93SW50ID0gYm5Nb2RQb3dJbnQ7XG5cdC8vIFwiY29uc3RhbnRzXCJcblx0QmlnSW50ZWdlci5aRVJPID0gbmJ2KDApO1xuXHRCaWdJbnRlZ2VyLk9ORSA9IG5idigxKTtcblx0Ly8gQ29weXJpZ2h0IChjKSAyMDA1LTIwMDkgIFRvbSBXdVxuXHQvLyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXHQvLyBTZWUgXCJMSUNFTlNFXCIgZm9yIGRldGFpbHMuXG5cdC8vIEV4dGVuZGVkIEphdmFTY3JpcHQgQk4gZnVuY3Rpb25zLCByZXF1aXJlZCBmb3IgUlNBIHByaXZhdGUgb3BzLlxuXHQvLyBWZXJzaW9uIDEuMTogbmV3IEJpZ0ludGVnZXIoXCIwXCIsIDEwKSByZXR1cm5zIFwicHJvcGVyXCIgemVyb1xuXHQvLyBWZXJzaW9uIDEuMjogc3F1YXJlKCkgQVBJLCBpc1Byb2JhYmxlUHJpbWUgZml4XG5cdC8vIChwdWJsaWMpXG5cdGZ1bmN0aW9uIGJuQ2xvbmUoKVxuXHR7XG5cdFx0dmFyIHIgPSBuYmkoKTtcblx0XHR0aGlzLmNvcHlUbyhyKTtcblx0XHRyZXR1cm4gcjtcblx0fVxuXHQvLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgaW50ZWdlclxuXHRmdW5jdGlvbiBibkludFZhbHVlKClcblx0e1xuXHRcdGlmICh0aGlzLnMgPCAwKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLnQgPT0gMSkgcmV0dXJuIHRoaXNbMF0gLSB0aGlzLkRWO1xuXHRcdFx0ZWxzZSBpZiAodGhpcy50ID09IDApIHJldHVybiAtMTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAodGhpcy50ID09IDEpIHJldHVybiB0aGlzWzBdO1xuXHRcdGVsc2UgaWYgKHRoaXMudCA9PSAwKSByZXR1cm4gMDtcblx0XHQvLyBhc3N1bWVzIDE2IDwgREIgPCAzMlxuXHRcdHJldHVybiAoKHRoaXNbMV0gJiAoKDEgPDwgKDMyIC0gdGhpcy5EQikpIC0gMSkpIDw8IHRoaXMuREIpIHwgdGhpc1swXTtcblx0fVxuXHQvLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgYnl0ZVxuXHRmdW5jdGlvbiBibkJ5dGVWYWx1ZSgpXG5cdHtcblx0XHRyZXR1cm4gKHRoaXMudCA9PSAwKSA/IHRoaXMucyA6ICh0aGlzWzBdIDw8IDI0KSA+PiAyNDtcblx0fVxuXHQvLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgc2hvcnQgKGFzc3VtZXMgREI+PTE2KVxuXHRmdW5jdGlvbiBiblNob3J0VmFsdWUoKVxuXHR7XG5cdFx0cmV0dXJuICh0aGlzLnQgPT0gMCkgPyB0aGlzLnMgOiAodGhpc1swXSA8PCAxNikgPj4gMTY7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgcmV0dXJuIHggcy50LiByXnggPCBEVlxuXHRmdW5jdGlvbiBibnBDaHVua1NpemUocilcblx0e1xuXHRcdHJldHVybiBNYXRoLmZsb29yKE1hdGguTE4yICogdGhpcy5EQiAvIE1hdGgubG9nKHIpKTtcblx0fVxuXHQvLyAocHVibGljKSAwIGlmIHRoaXMgPT0gMCwgMSBpZiB0aGlzID4gMFxuXHRmdW5jdGlvbiBiblNpZ051bSgpXG5cdHtcblx0XHRpZiAodGhpcy5zIDwgMCkgcmV0dXJuIC0xO1xuXHRcdGVsc2UgaWYgKHRoaXMudCA8PSAwIHx8ICh0aGlzLnQgPT0gMSAmJiB0aGlzWzBdIDw9IDApKSByZXR1cm4gMDtcblx0XHRlbHNlIHJldHVybiAxO1xuXHR9XG5cdC8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgdG8gcmFkaXggc3RyaW5nXG5cdGZ1bmN0aW9uIGJucFRvUmFkaXgoYilcblx0e1xuXHRcdGlmIChiID09IG51bGwpIGIgPSAxMDtcblx0XHRpZiAodGhpcy5zaWdudW0oKSA9PSAwIHx8IGIgPCAyIHx8IGIgPiAzNikgcmV0dXJuIFwiMFwiO1xuXHRcdHZhciBjcyA9IHRoaXMuY2h1bmtTaXplKGIpO1xuXHRcdHZhciBhID0gTWF0aC5wb3coYiwgY3MpO1xuXHRcdHZhciBkID0gbmJ2KGEpLFxuXHRcdFx0eSA9IG5iaSgpLFxuXHRcdFx0eiA9IG5iaSgpLFxuXHRcdFx0ciA9IFwiXCI7XG5cdFx0dGhpcy5kaXZSZW1UbyhkLCB5LCB6KTtcblx0XHR3aGlsZSAoeS5zaWdudW0oKSA+IDApXG5cdFx0e1xuXHRcdFx0ciA9IChhICsgei5pbnRWYWx1ZSgpKS50b1N0cmluZyhiKS5zdWJzdHIoMSkgKyByO1xuXHRcdFx0eS5kaXZSZW1UbyhkLCB5LCB6KTtcblx0XHR9XG5cdFx0cmV0dXJuIHouaW50VmFsdWUoKS50b1N0cmluZyhiKSArIHI7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgY29udmVydCBmcm9tIHJhZGl4IHN0cmluZ1xuXHRmdW5jdGlvbiBibnBGcm9tUmFkaXgocywgYilcblx0e1xuXHRcdHRoaXMuZnJvbUludCgwKTtcblx0XHRpZiAoYiA9PSBudWxsKSBiID0gMTA7XG5cdFx0dmFyIGNzID0gdGhpcy5jaHVua1NpemUoYik7XG5cdFx0dmFyIGQgPSBNYXRoLnBvdyhiLCBjcyksXG5cdFx0XHRtaSA9IGZhbHNlLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHR3ID0gMDtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHMubGVuZ3RoOyArK2kpXG5cdFx0e1xuXHRcdFx0dmFyIHggPSBpbnRBdChzLCBpKTtcblx0XHRcdGlmICh4IDwgMClcblx0XHRcdHtcblx0XHRcdFx0aWYgKHMuY2hhckF0KGkpID09IFwiLVwiICYmIHRoaXMuc2lnbnVtKCkgPT0gMCkgbWkgPSB0cnVlO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdHcgPSBiICogdyArIHg7XG5cdFx0XHRpZiAoKytqID49IGNzKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLmRNdWx0aXBseShkKTtcblx0XHRcdFx0dGhpcy5kQWRkT2Zmc2V0KHcsIDApO1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0dyA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChqID4gMClcblx0XHR7XG5cdFx0XHR0aGlzLmRNdWx0aXBseShNYXRoLnBvdyhiLCBqKSk7XG5cdFx0XHR0aGlzLmRBZGRPZmZzZXQodywgMCk7XG5cdFx0fVxuXHRcdGlmIChtaSkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsIHRoaXMpO1xuXHR9XG5cdC8vIChwcm90ZWN0ZWQpIGFsdGVybmF0ZSBjb25zdHJ1Y3RvclxuXHRmdW5jdGlvbiBibnBGcm9tTnVtYmVyKGEsIGIsIGMpXG5cdHtcblx0XHRpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYilcblx0XHR7XG5cdFx0XHQvLyBuZXcgQmlnSW50ZWdlcihpbnQsaW50LFJORylcblx0XHRcdGlmIChhIDwgMikgdGhpcy5mcm9tSW50KDEpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLmZyb21OdW1iZXIoYSwgYyk7XG5cdFx0XHRcdGlmICghdGhpcy50ZXN0Qml0KGEgLSAxKSkgLy8gZm9yY2UgTVNCIHNldFxuXHRcdFx0XHRcdHRoaXMuYml0d2lzZVRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhIC0gMSksIG9wX29yLCB0aGlzKTtcblx0XHRcdFx0aWYgKHRoaXMuaXNFdmVuKCkpIHRoaXMuZEFkZE9mZnNldCgxLCAwKTsgLy8gZm9yY2Ugb2RkXG5cdFx0XHRcdHdoaWxlICghdGhpcy5pc1Byb2JhYmxlUHJpbWUoYikpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0aGlzLmRBZGRPZmZzZXQoMiwgMCk7XG5cdFx0XHRcdFx0aWYgKHRoaXMuYml0TGVuZ3RoKCkgPiBhKSB0aGlzLnN1YlRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhIC0gMSksIHRoaXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHQvLyBuZXcgQmlnSW50ZWdlcihpbnQsUk5HKVxuXHRcdFx0dmFyIHggPSBuZXcgQXJyYXkoKSxcblx0XHRcdFx0dCA9IGEgJiA3O1xuXHRcdFx0eC5sZW5ndGggPSAoYSA+PiAzKSArIDE7XG5cdFx0XHRiLm5leHRCeXRlcyh4KTtcblx0XHRcdGlmICh0ID4gMCkgeFswXSAmPSAoKDEgPDwgdCkgLSAxKTtcblx0XHRcdGVsc2UgeFswXSA9IDA7XG5cdFx0XHR0aGlzLmZyb21TdHJpbmcoeCwgMjU2KTtcblx0XHR9XG5cdH1cblx0Ly8gKHB1YmxpYykgY29udmVydCB0byBiaWdlbmRpYW4gYnl0ZSBhcnJheVxuXHRmdW5jdGlvbiBiblRvQnl0ZUFycmF5KClcblx0e1xuXHRcdHZhciBpID0gdGhpcy50LFxuXHRcdFx0ciA9IG5ldyBBcnJheSgpO1xuXHRcdHJbMF0gPSB0aGlzLnM7XG5cdFx0dmFyIHAgPSB0aGlzLkRCIC0gKGkgKiB0aGlzLkRCKSAlIDgsXG5cdFx0XHRkLCBrID0gMDtcblx0XHRpZiAoaS0tID4gMClcblx0XHR7XG5cdFx0XHRpZiAocCA8IHRoaXMuREIgJiYgKGQgPSB0aGlzW2ldID4+IHApICE9ICh0aGlzLnMgJiB0aGlzLkRNKSA+PiBwKVxuXHRcdFx0XHRyW2srK10gPSBkIHwgKHRoaXMucyA8PCAodGhpcy5EQiAtIHApKTtcblx0XHRcdHdoaWxlIChpID49IDApXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChwIDwgOClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGQgPSAodGhpc1tpXSAmICgoMSA8PCBwKSAtIDEpKSA8PCAoOCAtIHApO1xuXHRcdFx0XHRcdGQgfD0gdGhpc1stLWldID4+IChwICs9IHRoaXMuREIgLSA4KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRkID0gKHRoaXNbaV0gPj4gKHAgLT0gOCkpICYgMHhmZjtcblx0XHRcdFx0XHRpZiAocCA8PSAwKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHAgKz0gdGhpcy5EQjtcblx0XHRcdFx0XHRcdC0taTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKChkICYgMHg4MCkgIT0gMCkgZCB8PSAtMjU2O1xuXHRcdFx0XHRpZiAoayA9PSAwICYmICh0aGlzLnMgJiAweDgwKSAhPSAoZCAmIDB4ODApKSArK2s7XG5cdFx0XHRcdGlmIChrID4gMCB8fCBkICE9IHRoaXMucykgcltrKytdID0gZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHI7XG5cdH1cblxuXHRmdW5jdGlvbiBibkVxdWFscyhhKVxuXHR7XG5cdFx0cmV0dXJuICh0aGlzLmNvbXBhcmVUbyhhKSA9PSAwKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJuTWluKGEpXG5cdHtcblx0XHRyZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpIDwgMCkgPyB0aGlzIDogYTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJuTWF4KGEpXG5cdHtcblx0XHRyZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpID4gMCkgPyB0aGlzIDogYTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSByID0gdGhpcyBvcCBhIChiaXR3aXNlKVxuXHRmdW5jdGlvbiBibnBCaXR3aXNlVG8oYSwgb3AsIHIpXG5cdHtcblx0XHR2YXIgaSwgZiwgbSA9IE1hdGgubWluKGEudCwgdGhpcy50KTtcblx0XHRmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSByW2ldID0gb3AodGhpc1tpXSwgYVtpXSk7XG5cdFx0aWYgKGEudCA8IHRoaXMudClcblx0XHR7XG5cdFx0XHRmID0gYS5zICYgdGhpcy5ETTtcblx0XHRcdGZvciAoaSA9IG07IGkgPCB0aGlzLnQ7ICsraSkgcltpXSA9IG9wKHRoaXNbaV0sIGYpO1xuXHRcdFx0ci50ID0gdGhpcy50O1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0ZiA9IHRoaXMucyAmIHRoaXMuRE07XG5cdFx0XHRmb3IgKGkgPSBtOyBpIDwgYS50OyArK2kpIHJbaV0gPSBvcChmLCBhW2ldKTtcblx0XHRcdHIudCA9IGEudDtcblx0XHR9XG5cdFx0ci5zID0gb3AodGhpcy5zLCBhLnMpO1xuXHRcdHIuY2xhbXAoKTtcblx0fVxuXHQvLyAocHVibGljKSB0aGlzICYgYVxuXHRmdW5jdGlvbiBvcF9hbmQoeCwgeSlcblx0e1xuXHRcdHJldHVybiB4ICYgeTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJuQW5kKGEpXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdHRoaXMuYml0d2lzZVRvKGEsIG9wX2FuZCwgcik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpcyB8IGFcblx0ZnVuY3Rpb24gb3Bfb3IoeCwgeSlcblx0e1xuXHRcdHJldHVybiB4IHwgeTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJuT3IoYSlcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0dGhpcy5iaXR3aXNlVG8oYSwgb3Bfb3IsIHIpO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIHRoaXMgXiBhXG5cdGZ1bmN0aW9uIG9wX3hvcih4LCB5KVxuXHR7XG5cdFx0cmV0dXJuIHggXiB5O1xuXHR9XG5cblx0ZnVuY3Rpb24gYm5Yb3IoYSlcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0dGhpcy5iaXR3aXNlVG8oYSwgb3BfeG9yLCByKTtcblx0XHRyZXR1cm4gcjtcblx0fVxuXHQvLyAocHVibGljKSB0aGlzICYgfmFcblx0ZnVuY3Rpb24gb3BfYW5kbm90KHgsIHkpXG5cdHtcblx0XHRyZXR1cm4geCAmIH55O1xuXHR9XG5cblx0ZnVuY3Rpb24gYm5BbmROb3QoYSlcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0dGhpcy5iaXR3aXNlVG8oYSwgb3BfYW5kbm90LCByKTtcblx0XHRyZXR1cm4gcjtcblx0fVxuXHQvLyAocHVibGljKSB+dGhpc1xuXHRmdW5jdGlvbiBibk5vdCgpXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50OyArK2kpIHJbaV0gPSB0aGlzLkRNICYgfnRoaXNbaV07XG5cdFx0ci50ID0gdGhpcy50O1xuXHRcdHIucyA9IH50aGlzLnM7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpcyA8PCBuXG5cdGZ1bmN0aW9uIGJuU2hpZnRMZWZ0KG4pXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdGlmIChuIDwgMCkgdGhpcy5yU2hpZnRUbygtbiwgcik7XG5cdFx0ZWxzZSB0aGlzLmxTaGlmdFRvKG4sIHIpO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIHRoaXMgPj4gblxuXHRmdW5jdGlvbiBiblNoaWZ0UmlnaHQobilcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0aWYgKG4gPCAwKSB0aGlzLmxTaGlmdFRvKC1uLCByKTtcblx0XHRlbHNlIHRoaXMuclNoaWZ0VG8obiwgcik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gcmV0dXJuIGluZGV4IG9mIGxvd2VzdCAxLWJpdCBpbiB4LCB4IDwgMl4zMVxuXHRmdW5jdGlvbiBsYml0KHgpXG5cdHtcblx0XHRpZiAoeCA9PSAwKSByZXR1cm4gLTE7XG5cdFx0dmFyIHIgPSAwO1xuXHRcdGlmICgoeCAmIDB4ZmZmZikgPT0gMClcblx0XHR7XG5cdFx0XHR4ID4+PSAxNjtcblx0XHRcdHIgKz0gMTY7XG5cdFx0fVxuXHRcdGlmICgoeCAmIDB4ZmYpID09IDApXG5cdFx0e1xuXHRcdFx0eCA+Pj0gODtcblx0XHRcdHIgKz0gODtcblx0XHR9XG5cdFx0aWYgKCh4ICYgMHhmKSA9PSAwKVxuXHRcdHtcblx0XHRcdHggPj49IDQ7XG5cdFx0XHRyICs9IDQ7XG5cdFx0fVxuXHRcdGlmICgoeCAmIDMpID09IDApXG5cdFx0e1xuXHRcdFx0eCA+Pj0gMjtcblx0XHRcdHIgKz0gMjtcblx0XHR9XG5cdFx0aWYgKCh4ICYgMSkgPT0gMCkgKytyO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIHJldHVybnMgaW5kZXggb2YgbG93ZXN0IDEtYml0IChvciAtMSBpZiBub25lKVxuXHRmdW5jdGlvbiBibkdldExvd2VzdFNldEJpdCgpXG5cdHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKVxuXHRcdFx0aWYgKHRoaXNbaV0gIT0gMCkgcmV0dXJuIGkgKiB0aGlzLkRCICsgbGJpdCh0aGlzW2ldKTtcblx0XHRpZiAodGhpcy5zIDwgMCkgcmV0dXJuIHRoaXMudCAqIHRoaXMuREI7XG5cdFx0cmV0dXJuIC0xO1xuXHR9XG5cdC8vIHJldHVybiBudW1iZXIgb2YgMSBiaXRzIGluIHhcblx0ZnVuY3Rpb24gY2JpdCh4KVxuXHR7XG5cdFx0dmFyIHIgPSAwO1xuXHRcdHdoaWxlICh4ICE9IDApXG5cdFx0e1xuXHRcdFx0eCAmPSB4IC0gMTtcblx0XHRcdCsrcjtcblx0XHR9XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgcmV0dXJuIG51bWJlciBvZiBzZXQgYml0c1xuXHRmdW5jdGlvbiBibkJpdENvdW50KClcblx0e1xuXHRcdHZhciByID0gMCxcblx0XHRcdHggPSB0aGlzLnMgJiB0aGlzLkRNO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50OyArK2kpIHIgKz0gY2JpdCh0aGlzW2ldIF4geCk7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgdHJ1ZSBpZmYgbnRoIGJpdCBpcyBzZXRcblx0ZnVuY3Rpb24gYm5UZXN0Qml0KG4pXG5cdHtcblx0XHR2YXIgaiA9IE1hdGguZmxvb3IobiAvIHRoaXMuREIpO1xuXHRcdGlmIChqID49IHRoaXMudCkgcmV0dXJuICh0aGlzLnMgIT0gMCk7XG5cdFx0cmV0dXJuICgodGhpc1tqXSAmICgxIDw8IChuICUgdGhpcy5EQikpKSAhPSAwKTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSB0aGlzIG9wICgxPDxuKVxuXHRmdW5jdGlvbiBibnBDaGFuZ2VCaXQobiwgb3ApXG5cdHtcblx0XHR2YXIgciA9IEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChuKTtcblx0XHR0aGlzLmJpdHdpc2VUbyhyLCBvcCwgcik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpcyB8ICgxPDxuKVxuXHRmdW5jdGlvbiBiblNldEJpdChuKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX29yKTtcblx0fVxuXHQvLyAocHVibGljKSB0aGlzICYgfigxPDxuKVxuXHRmdW5jdGlvbiBibkNsZWFyQml0KG4pXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5jaGFuZ2VCaXQobiwgb3BfYW5kbm90KTtcblx0fVxuXHQvLyAocHVibGljKSB0aGlzIF4gKDE8PG4pXG5cdGZ1bmN0aW9uIGJuRmxpcEJpdChuKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX3hvcik7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgciA9IHRoaXMgKyBhXG5cdGZ1bmN0aW9uIGJucEFkZFRvKGEsIHIpXG5cdHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRjID0gMCxcblx0XHRcdG0gPSBNYXRoLm1pbihhLnQsIHRoaXMudCk7XG5cdFx0d2hpbGUgKGkgPCBtKVxuXHRcdHtcblx0XHRcdGMgKz0gdGhpc1tpXSArIGFbaV07XG5cdFx0XHRyW2krK10gPSBjICYgdGhpcy5ETTtcblx0XHRcdGMgPj49IHRoaXMuREI7XG5cdFx0fVxuXHRcdGlmIChhLnQgPCB0aGlzLnQpXG5cdFx0e1xuXHRcdFx0YyArPSBhLnM7XG5cdFx0XHR3aGlsZSAoaSA8IHRoaXMudClcblx0XHRcdHtcblx0XHRcdFx0YyArPSB0aGlzW2ldO1xuXHRcdFx0XHRyW2krK10gPSBjICYgdGhpcy5ETTtcblx0XHRcdFx0YyA+Pj0gdGhpcy5EQjtcblx0XHRcdH1cblx0XHRcdGMgKz0gdGhpcy5zO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0YyArPSB0aGlzLnM7XG5cdFx0XHR3aGlsZSAoaSA8IGEudClcblx0XHRcdHtcblx0XHRcdFx0YyArPSBhW2ldO1xuXHRcdFx0XHRyW2krK10gPSBjICYgdGhpcy5ETTtcblx0XHRcdFx0YyA+Pj0gdGhpcy5EQjtcblx0XHRcdH1cblx0XHRcdGMgKz0gYS5zO1xuXHRcdH1cblx0XHRyLnMgPSAoYyA8IDApID8gLTEgOiAwO1xuXHRcdGlmIChjID4gMCkgcltpKytdID0gYztcblx0XHRlbHNlIGlmIChjIDwgLTEpIHJbaSsrXSA9IHRoaXMuRFYgKyBjO1xuXHRcdHIudCA9IGk7XG5cdFx0ci5jbGFtcCgpO1xuXHR9XG5cdC8vIChwdWJsaWMpIHRoaXMgKyBhXG5cdGZ1bmN0aW9uIGJuQWRkKGEpXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdHRoaXMuYWRkVG8oYSwgcik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpcyAtIGFcblx0ZnVuY3Rpb24gYm5TdWJ0cmFjdChhKVxuXHR7XG5cdFx0dmFyIHIgPSBuYmkoKTtcblx0XHR0aGlzLnN1YlRvKGEsIHIpO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIHRoaXMgKiBhXG5cdGZ1bmN0aW9uIGJuTXVsdGlwbHkoYSlcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0dGhpcy5tdWx0aXBseVRvKGEsIHIpO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIHRoaXNeMlxuXHRmdW5jdGlvbiBiblNxdWFyZSgpXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdHRoaXMuc3F1YXJlVG8ocik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpcyAvIGFcblx0ZnVuY3Rpb24gYm5EaXZpZGUoYSlcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0dGhpcy5kaXZSZW1UbyhhLCByLCBudWxsKTtcblx0XHRyZXR1cm4gcjtcblx0fVxuXHQvLyAocHVibGljKSB0aGlzICUgYVxuXHRmdW5jdGlvbiBiblJlbWFpbmRlcihhKVxuXHR7XG5cdFx0dmFyIHIgPSBuYmkoKTtcblx0XHR0aGlzLmRpdlJlbVRvKGEsIG51bGwsIHIpO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIFt0aGlzL2EsdGhpcyVhXVxuXHRmdW5jdGlvbiBibkRpdmlkZUFuZFJlbWFpbmRlcihhKVxuXHR7XG5cdFx0dmFyIHEgPSBuYmkoKSxcblx0XHRcdHIgPSBuYmkoKTtcblx0XHR0aGlzLmRpdlJlbVRvKGEsIHEsIHIpO1xuXHRcdHJldHVybiBuZXcgQXJyYXkocSwgcik7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgdGhpcyAqPSBuLCB0aGlzID49IDAsIDEgPCBuIDwgRFZcblx0ZnVuY3Rpb24gYm5wRE11bHRpcGx5KG4pXG5cdHtcblx0XHR0aGlzW3RoaXMudF0gPSB0aGlzLmFtKDAsIG4gLSAxLCB0aGlzLCAwLCAwLCB0aGlzLnQpO1xuXHRcdCsrdGhpcy50O1xuXHRcdHRoaXMuY2xhbXAoKTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSB0aGlzICs9IG4gPDwgdyB3b3JkcywgdGhpcyA+PSAwXG5cdGZ1bmN0aW9uIGJucERBZGRPZmZzZXQobiwgdylcblx0e1xuXHRcdGlmIChuID09IDApIHJldHVybjtcblx0XHR3aGlsZSAodGhpcy50IDw9IHcpIHRoaXNbdGhpcy50KytdID0gMDtcblx0XHR0aGlzW3ddICs9IG47XG5cdFx0d2hpbGUgKHRoaXNbd10gPj0gdGhpcy5EVilcblx0XHR7XG5cdFx0XHR0aGlzW3ddIC09IHRoaXMuRFY7XG5cdFx0XHRpZiAoKyt3ID49IHRoaXMudCkgdGhpc1t0aGlzLnQrK10gPSAwO1xuXHRcdFx0Kyt0aGlzW3ddO1xuXHRcdH1cblx0fVxuXHQvLyBBIFwibnVsbFwiIHJlZHVjZXJcblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdGZ1bmN0aW9uIE51bGxFeHAoKVxuXHR7fVxuXG5cdGZ1bmN0aW9uIG5Ob3AoeClcblx0e1xuXHRcdHJldHVybiB4O1xuXHR9XG5cblx0ZnVuY3Rpb24gbk11bFRvKHgsIHksIHIpXG5cdHtcblx0XHR4Lm11bHRpcGx5VG8oeSwgcik7XG5cdH1cblxuXHRmdW5jdGlvbiBuU3FyVG8oeCwgcilcblx0e1xuXHRcdHguc3F1YXJlVG8ocik7XG5cdH1cblx0TnVsbEV4cC5wcm90b3R5cGUuY29udmVydCA9IG5Ob3A7XG5cdE51bGxFeHAucHJvdG90eXBlLnJldmVydCA9IG5Ob3A7XG5cdE51bGxFeHAucHJvdG90eXBlLm11bFRvID0gbk11bFRvO1xuXHROdWxsRXhwLnByb3RvdHlwZS5zcXJUbyA9IG5TcXJUbztcblx0Ly8gKHB1YmxpYykgdGhpc15lXG5cdGZ1bmN0aW9uIGJuUG93KGUpXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5leHAoZSwgbmV3IE51bGxFeHAoKSk7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgciA9IGxvd2VyIG4gd29yZHMgb2YgXCJ0aGlzICogYVwiLCBhLnQgPD0gblxuXHQvLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG5cdGZ1bmN0aW9uIGJucE11bHRpcGx5TG93ZXJUbyhhLCBuLCByKVxuXHR7XG5cdFx0dmFyIGkgPSBNYXRoLm1pbih0aGlzLnQgKyBhLnQsIG4pO1xuXHRcdHIucyA9IDA7IC8vIGFzc3VtZXMgYSx0aGlzID49IDBcblx0XHRyLnQgPSBpO1xuXHRcdHdoaWxlIChpID4gMCkgclstLWldID0gMDtcblx0XHR2YXIgajtcblx0XHRmb3IgKGogPSByLnQgLSB0aGlzLnQ7IGkgPCBqOyArK2kpIHJbaSArIHRoaXMudF0gPSB0aGlzLmFtKDAsIGFbaV0sIHIsIGksIDAsIHRoaXMudCk7XG5cdFx0Zm9yIChqID0gTWF0aC5taW4oYS50LCBuKTsgaSA8IGo7ICsraSkgdGhpcy5hbSgwLCBhW2ldLCByLCBpLCAwLCBuIC0gaSk7XG5cdFx0ci5jbGFtcCgpO1xuXHR9XG5cdC8vIChwcm90ZWN0ZWQpIHIgPSBcInRoaXMgKiBhXCIgd2l0aG91dCBsb3dlciBuIHdvcmRzLCBuID4gMFxuXHQvLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG5cdGZ1bmN0aW9uIGJucE11bHRpcGx5VXBwZXJUbyhhLCBuLCByKVxuXHR7XG5cdFx0LS1uO1xuXHRcdHZhciBpID0gci50ID0gdGhpcy50ICsgYS50IC0gbjtcblx0XHRyLnMgPSAwOyAvLyBhc3N1bWVzIGEsdGhpcyA+PSAwXG5cdFx0d2hpbGUgKC0taSA+PSAwKSByW2ldID0gMDtcblx0XHRmb3IgKGkgPSBNYXRoLm1heChuIC0gdGhpcy50LCAwKTsgaSA8IGEudDsgKytpKVxuXHRcdFx0clt0aGlzLnQgKyBpIC0gbl0gPSB0aGlzLmFtKG4gLSBpLCBhW2ldLCByLCAwLCAwLCB0aGlzLnQgKyBpIC0gbik7XG5cdFx0ci5jbGFtcCgpO1xuXHRcdHIuZHJTaGlmdFRvKDEsIHIpO1xuXHR9XG5cdC8vIEJhcnJldHQgbW9kdWxhciByZWR1Y3Rpb25cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdGZ1bmN0aW9uIEJhcnJldHQobSlcblx0e1xuXHRcdC8vIHNldHVwIEJhcnJldHRcblx0XHR0aGlzLnIyID0gbmJpKCk7XG5cdFx0dGhpcy5xMyA9IG5iaSgpO1xuXHRcdEJpZ0ludGVnZXIuT05FLmRsU2hpZnRUbygyICogbS50LCB0aGlzLnIyKTtcblx0XHR0aGlzLm11ID0gdGhpcy5yMi5kaXZpZGUobSk7XG5cdFx0dGhpcy5tID0gbTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJhcnJldHRDb252ZXJ0KHgpXG5cdHtcblx0XHRpZiAoeC5zIDwgMCB8fCB4LnQgPiAyICogdGhpcy5tLnQpIHJldHVybiB4Lm1vZCh0aGlzLm0pO1xuXHRcdGVsc2UgaWYgKHguY29tcGFyZVRvKHRoaXMubSkgPCAwKSByZXR1cm4geDtcblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIHIgPSBuYmkoKTtcblx0XHRcdHguY29weVRvKHIpO1xuXHRcdFx0dGhpcy5yZWR1Y2Uocik7XG5cdFx0XHRyZXR1cm4gcjtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBiYXJyZXR0UmV2ZXJ0KHgpXG5cdHtcblx0XHRyZXR1cm4geDtcblx0fVxuXHQvLyB4ID0geCBtb2QgbSAoSEFDIDE0LjQyKVxuXHRmdW5jdGlvbiBiYXJyZXR0UmVkdWNlKHgpXG5cdHtcblx0XHR4LmRyU2hpZnRUbyh0aGlzLm0udCAtIDEsIHRoaXMucjIpO1xuXHRcdGlmICh4LnQgPiB0aGlzLm0udCArIDEpXG5cdFx0e1xuXHRcdFx0eC50ID0gdGhpcy5tLnQgKyAxO1xuXHRcdFx0eC5jbGFtcCgpO1xuXHRcdH1cblx0XHR0aGlzLm11Lm11bHRpcGx5VXBwZXJUbyh0aGlzLnIyLCB0aGlzLm0udCArIDEsIHRoaXMucTMpO1xuXHRcdHRoaXMubS5tdWx0aXBseUxvd2VyVG8odGhpcy5xMywgdGhpcy5tLnQgKyAxLCB0aGlzLnIyKTtcblx0XHR3aGlsZSAoeC5jb21wYXJlVG8odGhpcy5yMikgPCAwKSB4LmRBZGRPZmZzZXQoMSwgdGhpcy5tLnQgKyAxKTtcblx0XHR4LnN1YlRvKHRoaXMucjIsIHgpO1xuXHRcdHdoaWxlICh4LmNvbXBhcmVUbyh0aGlzLm0pID49IDApIHguc3ViVG8odGhpcy5tLCB4KTtcblx0fVxuXHQvLyByID0geF4yIG1vZCBtOyB4ICE9IHJcblx0ZnVuY3Rpb24gYmFycmV0dFNxclRvKHgsIHIpXG5cdHtcblx0XHR4LnNxdWFyZVRvKHIpO1xuXHRcdHRoaXMucmVkdWNlKHIpO1xuXHR9XG5cdC8vIHIgPSB4KnkgbW9kIG07IHgseSAhPSByXG5cdGZ1bmN0aW9uIGJhcnJldHRNdWxUbyh4LCB5LCByKVxuXHR7XG5cdFx0eC5tdWx0aXBseVRvKHksIHIpO1xuXHRcdHRoaXMucmVkdWNlKHIpO1xuXHR9XG5cdEJhcnJldHQucHJvdG90eXBlLmNvbnZlcnQgPSBiYXJyZXR0Q29udmVydDtcblx0QmFycmV0dC5wcm90b3R5cGUucmV2ZXJ0ID0gYmFycmV0dFJldmVydDtcblx0QmFycmV0dC5wcm90b3R5cGUucmVkdWNlID0gYmFycmV0dFJlZHVjZTtcblx0QmFycmV0dC5wcm90b3R5cGUubXVsVG8gPSBiYXJyZXR0TXVsVG87XG5cdEJhcnJldHQucHJvdG90eXBlLnNxclRvID0gYmFycmV0dFNxclRvO1xuXHQvLyAocHVibGljKSB0aGlzXmUgJSBtIChIQUMgMTQuODUpXG5cdGZ1bmN0aW9uIGJuTW9kUG93KGUsIG0pXG5cdHtcblx0XHR2YXIgaSA9IGUuYml0TGVuZ3RoKCksXG5cdFx0XHRrLCByID0gbmJ2KDEpLFxuXHRcdFx0ejtcblx0XHRpZiAoaSA8PSAwKSByZXR1cm4gcjtcblx0XHRlbHNlIGlmIChpIDwgMTgpIGsgPSAxO1xuXHRcdGVsc2UgaWYgKGkgPCA0OCkgayA9IDM7XG5cdFx0ZWxzZSBpZiAoaSA8IDE0NCkgayA9IDQ7XG5cdFx0ZWxzZSBpZiAoaSA8IDc2OCkgayA9IDU7XG5cdFx0ZWxzZSBrID0gNjtcblx0XHRpZiAoaSA8IDgpXG5cdFx0XHR6ID0gbmV3IENsYXNzaWMobSk7XG5cdFx0ZWxzZSBpZiAobS5pc0V2ZW4oKSlcblx0XHRcdHogPSBuZXcgQmFycmV0dChtKTtcblx0XHRlbHNlXG5cdFx0XHR6ID0gbmV3IE1vbnRnb21lcnkobSk7XG5cdFx0Ly8gcHJlY29tcHV0YXRpb25cblx0XHR2YXIgZyA9IG5ldyBBcnJheSgpLFxuXHRcdFx0biA9IDMsXG5cdFx0XHRrMSA9IGsgLSAxLFxuXHRcdFx0a20gPSAoMSA8PCBrKSAtIDE7XG5cdFx0Z1sxXSA9IHouY29udmVydCh0aGlzKTtcblx0XHRpZiAoayA+IDEpXG5cdFx0e1xuXHRcdFx0dmFyIGcyID0gbmJpKCk7XG5cdFx0XHR6LnNxclRvKGdbMV0sIGcyKTtcblx0XHRcdHdoaWxlIChuIDw9IGttKVxuXHRcdFx0e1xuXHRcdFx0XHRnW25dID0gbmJpKCk7XG5cdFx0XHRcdHoubXVsVG8oZzIsIGdbbiAtIDJdLCBnW25dKTtcblx0XHRcdFx0biArPSAyO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgaiA9IGUudCAtIDEsXG5cdFx0XHR3LCBpczEgPSB0cnVlLFxuXHRcdFx0cjIgPSBuYmkoKSxcblx0XHRcdHQ7XG5cdFx0aSA9IG5iaXRzKGVbal0pIC0gMTtcblx0XHR3aGlsZSAoaiA+PSAwKVxuXHRcdHtcblx0XHRcdGlmIChpID49IGsxKSB3ID0gKGVbal0gPj4gKGkgLSBrMSkpICYga207XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHcgPSAoZVtqXSAmICgoMSA8PCAoaSArIDEpKSAtIDEpKSA8PCAoazEgLSBpKTtcblx0XHRcdFx0aWYgKGogPiAwKSB3IHw9IGVbaiAtIDFdID4+ICh0aGlzLkRCICsgaSAtIGsxKTtcblx0XHRcdH1cblx0XHRcdG4gPSBrO1xuXHRcdFx0d2hpbGUgKCh3ICYgMSkgPT0gMClcblx0XHRcdHtcblx0XHRcdFx0dyA+Pj0gMTtcblx0XHRcdFx0LS1uO1xuXHRcdFx0fVxuXHRcdFx0aWYgKChpIC09IG4pIDwgMClcblx0XHRcdHtcblx0XHRcdFx0aSArPSB0aGlzLkRCO1xuXHRcdFx0XHQtLWo7XG5cdFx0XHR9XG5cdFx0XHRpZiAoaXMxKVxuXHRcdFx0eyAvLyByZXQgPT0gMSwgZG9uJ3QgYm90aGVyIHNxdWFyaW5nIG9yIG11bHRpcGx5aW5nIGl0XG5cdFx0XHRcdGdbd10uY29weVRvKHIpO1xuXHRcdFx0XHRpczEgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0d2hpbGUgKG4gPiAxKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ei5zcXJUbyhyLCByMik7XG5cdFx0XHRcdFx0ei5zcXJUbyhyMiwgcik7XG5cdFx0XHRcdFx0biAtPSAyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChuID4gMCkgei5zcXJUbyhyLCByMik7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHQgPSByO1xuXHRcdFx0XHRcdHIgPSByMjtcblx0XHRcdFx0XHRyMiA9IHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0ei5tdWxUbyhyMiwgZ1t3XSwgcik7XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAoaiA+PSAwICYmIChlW2pdICYgKDEgPDwgaSkpID09IDApXG5cdFx0XHR7XG5cdFx0XHRcdHouc3FyVG8ociwgcjIpO1xuXHRcdFx0XHR0ID0gcjtcblx0XHRcdFx0ciA9IHIyO1xuXHRcdFx0XHRyMiA9IHQ7XG5cdFx0XHRcdGlmICgtLWkgPCAwKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aSA9IHRoaXMuREIgLSAxO1xuXHRcdFx0XHRcdC0tajtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gei5yZXZlcnQocik7XG5cdH1cblx0Ly8gKHB1YmxpYykgZ2NkKHRoaXMsYSkgKEhBQyAxNC41NClcblx0ZnVuY3Rpb24gYm5HQ0QoYSlcblx0e1xuXHRcdHZhciB4ID0gKHRoaXMucyA8IDApID8gdGhpcy5uZWdhdGUoKSA6IHRoaXMuY2xvbmUoKTtcblx0XHR2YXIgeSA9IChhLnMgPCAwKSA/IGEubmVnYXRlKCkgOiBhLmNsb25lKCk7XG5cdFx0aWYgKHguY29tcGFyZVRvKHkpIDwgMClcblx0XHR7XG5cdFx0XHR2YXIgdCA9IHg7XG5cdFx0XHR4ID0geTtcblx0XHRcdHkgPSB0O1xuXHRcdH1cblx0XHR2YXIgaSA9IHguZ2V0TG93ZXN0U2V0Qml0KCksXG5cdFx0XHRnID0geS5nZXRMb3dlc3RTZXRCaXQoKTtcblx0XHRpZiAoZyA8IDApIHJldHVybiB4O1xuXHRcdGlmIChpIDwgZykgZyA9IGk7XG5cdFx0aWYgKGcgPiAwKVxuXHRcdHtcblx0XHRcdHguclNoaWZ0VG8oZywgeCk7XG5cdFx0XHR5LnJTaGlmdFRvKGcsIHkpO1xuXHRcdH1cblx0XHR3aGlsZSAoeC5zaWdudW0oKSA+IDApXG5cdFx0e1xuXHRcdFx0aWYgKChpID0geC5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB4LnJTaGlmdFRvKGksIHgpO1xuXHRcdFx0aWYgKChpID0geS5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB5LnJTaGlmdFRvKGksIHkpO1xuXHRcdFx0aWYgKHguY29tcGFyZVRvKHkpID49IDApXG5cdFx0XHR7XG5cdFx0XHRcdHguc3ViVG8oeSwgeCk7XG5cdFx0XHRcdHguclNoaWZ0VG8oMSwgeCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHkuc3ViVG8oeCwgeSk7XG5cdFx0XHRcdHkuclNoaWZ0VG8oMSwgeSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChnID4gMCkgeS5sU2hpZnRUbyhnLCB5KTtcblx0XHRyZXR1cm4geTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSB0aGlzICUgbiwgbiA8IDJeMjZcblx0ZnVuY3Rpb24gYm5wTW9kSW50KG4pXG5cdHtcblx0XHRpZiAobiA8PSAwKSByZXR1cm4gMDtcblx0XHR2YXIgZCA9IHRoaXMuRFYgJSBuLFxuXHRcdFx0ciA9ICh0aGlzLnMgPCAwKSA/IG4gLSAxIDogMDtcblx0XHRpZiAodGhpcy50ID4gMClcblx0XHRcdGlmIChkID09IDApIHIgPSB0aGlzWzBdICUgbjtcblx0XHRcdGVsc2Vcblx0XHRcdFx0Zm9yICh2YXIgaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSByID0gKGQgKiByICsgdGhpc1tpXSkgJSBuO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIDEvdGhpcyAlIG0gKEhBQyAxNC42MSlcblx0ZnVuY3Rpb24gYm5Nb2RJbnZlcnNlKG0pXG5cdHtcblx0XHR2YXIgYWMgPSBtLmlzRXZlbigpO1xuXHRcdGlmICgodGhpcy5pc0V2ZW4oKSAmJiBhYykgfHwgbS5zaWdudW0oKSA9PSAwKSByZXR1cm4gQmlnSW50ZWdlci5aRVJPO1xuXHRcdHZhciB1ID0gbS5jbG9uZSgpLFxuXHRcdFx0diA9IHRoaXMuY2xvbmUoKTtcblx0XHR2YXIgYSA9IG5idigxKSxcblx0XHRcdGIgPSBuYnYoMCksXG5cdFx0XHRjID0gbmJ2KDApLFxuXHRcdFx0ZCA9IG5idigxKTtcblx0XHR3aGlsZSAodS5zaWdudW0oKSAhPSAwKVxuXHRcdHtcblx0XHRcdHdoaWxlICh1LmlzRXZlbigpKVxuXHRcdFx0e1xuXHRcdFx0XHR1LnJTaGlmdFRvKDEsIHUpO1xuXHRcdFx0XHRpZiAoYWMpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoIWEuaXNFdmVuKCkgfHwgIWIuaXNFdmVuKCkpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YS5hZGRUbyh0aGlzLCBhKTtcblx0XHRcdFx0XHRcdGIuc3ViVG8obSwgYik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGEuclNoaWZ0VG8oMSwgYSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAoIWIuaXNFdmVuKCkpIGIuc3ViVG8obSwgYik7XG5cdFx0XHRcdGIuclNoaWZ0VG8oMSwgYik7XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAodi5pc0V2ZW4oKSlcblx0XHRcdHtcblx0XHRcdFx0di5yU2hpZnRUbygxLCB2KTtcblx0XHRcdFx0aWYgKGFjKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKCFjLmlzRXZlbigpIHx8ICFkLmlzRXZlbigpKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGMuYWRkVG8odGhpcywgYyk7XG5cdFx0XHRcdFx0XHRkLnN1YlRvKG0sIGQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjLnJTaGlmdFRvKDEsIGMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKCFkLmlzRXZlbigpKSBkLnN1YlRvKG0sIGQpO1xuXHRcdFx0XHRkLnJTaGlmdFRvKDEsIGQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHUuY29tcGFyZVRvKHYpID49IDApXG5cdFx0XHR7XG5cdFx0XHRcdHUuc3ViVG8odiwgdSk7XG5cdFx0XHRcdGlmIChhYykgYS5zdWJUbyhjLCBhKTtcblx0XHRcdFx0Yi5zdWJUbyhkLCBiKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0di5zdWJUbyh1LCB2KTtcblx0XHRcdFx0aWYgKGFjKSBjLnN1YlRvKGEsIGMpO1xuXHRcdFx0XHRkLnN1YlRvKGIsIGQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAodi5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDApIHJldHVybiBCaWdJbnRlZ2VyLlpFUk87XG5cdFx0aWYgKGQuY29tcGFyZVRvKG0pID49IDApIHJldHVybiBkLnN1YnRyYWN0KG0pO1xuXHRcdGlmIChkLnNpZ251bSgpIDwgMCkgZC5hZGRUbyhtLCBkKTtcblx0XHRlbHNlIHJldHVybiBkO1xuXHRcdGlmIChkLnNpZ251bSgpIDwgMCkgcmV0dXJuIGQuYWRkKG0pO1xuXHRcdGVsc2UgcmV0dXJuIGQ7XG5cdH1cblx0dmFyIGxvd3ByaW1lcyA9IFsyLCAzLCA1LCA3LCAxMSwgMTMsIDE3LCAxOSwgMjMsIDI5LCAzMSwgMzcsIDQxLCA0MywgNDcsIDUzLCA1OSwgNjEsIDY3LCA3MSwgNzMsIDc5LCA4MywgODksIDk3LCAxMDEsIDEwMywgMTA3LCAxMDksIDExMywgMTI3LCAxMzEsIDEzNywgMTM5LCAxNDksIDE1MSwgMTU3LCAxNjMsIDE2NywgMTczLCAxNzksIDE4MSwgMTkxLCAxOTMsIDE5NywgMTk5LCAyMTEsIDIyMywgMjI3LCAyMjksIDIzMywgMjM5LCAyNDEsIDI1MSwgMjU3LCAyNjMsIDI2OSwgMjcxLCAyNzcsIDI4MSwgMjgzLCAyOTMsIDMwNywgMzExLCAzMTMsIDMxNywgMzMxLCAzMzcsIDM0NywgMzQ5LCAzNTMsIDM1OSwgMzY3LCAzNzMsIDM3OSwgMzgzLCAzODksIDM5NywgNDAxLCA0MDksIDQxOSwgNDIxLCA0MzEsIDQzMywgNDM5LCA0NDMsIDQ0OSwgNDU3LCA0NjEsIDQ2MywgNDY3LCA0NzksIDQ4NywgNDkxLCA0OTksIDUwMywgNTA5LCA1MjEsIDUyMywgNTQxLCA1NDcsIDU1NywgNTYzLCA1NjksIDU3MSwgNTc3LCA1ODcsIDU5MywgNTk5LCA2MDEsIDYwNywgNjEzLCA2MTcsIDYxOSwgNjMxLCA2NDEsIDY0MywgNjQ3LCA2NTMsIDY1OSwgNjYxLCA2NzMsIDY3NywgNjgzLCA2OTEsIDcwMSwgNzA5LCA3MTksIDcyNywgNzMzLCA3MzksIDc0MywgNzUxLCA3NTcsIDc2MSwgNzY5LCA3NzMsIDc4NywgNzk3LCA4MDksIDgxMSwgODIxLCA4MjMsIDgyNywgODI5LCA4MzksIDg1MywgODU3LCA4NTksIDg2MywgODc3LCA4ODEsIDg4MywgODg3LCA5MDcsIDkxMSwgOTE5LCA5MjksIDkzNywgOTQxLCA5NDcsIDk1MywgOTY3LCA5NzEsIDk3NywgOTgzLCA5OTEsIDk5N107XG5cdHZhciBscGxpbSA9ICgxIDw8IDI2KSAvIGxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoIC0gMV07XG5cdC8vIChwdWJsaWMpIHRlc3QgcHJpbWFsaXR5IHdpdGggY2VydGFpbnR5ID49IDEtLjVedFxuXHRmdW5jdGlvbiBibklzUHJvYmFibGVQcmltZSh0KVxuXHR7XG5cdFx0dmFyIGksIHggPSB0aGlzLmFicygpO1xuXHRcdGlmICh4LnQgPT0gMSAmJiB4WzBdIDw9IGxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoIC0gMV0pXG5cdFx0e1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGxvd3ByaW1lcy5sZW5ndGg7ICsraSlcblx0XHRcdFx0aWYgKHhbMF0gPT0gbG93cHJpbWVzW2ldKSByZXR1cm4gdHJ1ZTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKHguaXNFdmVuKCkpIHJldHVybiBmYWxzZTtcblx0XHRpID0gMTtcblx0XHR3aGlsZSAoaSA8IGxvd3ByaW1lcy5sZW5ndGgpXG5cdFx0e1xuXHRcdFx0dmFyIG0gPSBsb3dwcmltZXNbaV0sXG5cdFx0XHRcdGogPSBpICsgMTtcblx0XHRcdHdoaWxlIChqIDwgbG93cHJpbWVzLmxlbmd0aCAmJiBtIDwgbHBsaW0pIG0gKj0gbG93cHJpbWVzW2orK107XG5cdFx0XHRtID0geC5tb2RJbnQobSk7XG5cdFx0XHR3aGlsZSAoaSA8IGopXG5cdFx0XHRcdGlmIChtICUgbG93cHJpbWVzW2krK10gPT0gMCkgcmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4geC5taWxsZXJSYWJpbih0KTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSB0cnVlIGlmIHByb2JhYmx5IHByaW1lIChIQUMgNC4yNCwgTWlsbGVyLVJhYmluKVxuXHRmdW5jdGlvbiBibnBNaWxsZXJSYWJpbih0KVxuXHR7XG5cdFx0dmFyIG4xID0gdGhpcy5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7XG5cdFx0dmFyIGsgPSBuMS5nZXRMb3dlc3RTZXRCaXQoKTtcblx0XHRpZiAoayA8PSAwKSByZXR1cm4gZmFsc2U7XG5cdFx0dmFyIHIgPSBuMS5zaGlmdFJpZ2h0KGspO1xuXHRcdHQgPSAodCArIDEpID4+IDE7XG5cdFx0aWYgKHQgPiBsb3dwcmltZXMubGVuZ3RoKSB0ID0gbG93cHJpbWVzLmxlbmd0aDtcblx0XHR2YXIgYSA9IG5iaSgpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdDsgKytpKVxuXHRcdHtcblx0XHRcdC8vUGljayBiYXNlcyBhdCByYW5kb20sIGluc3RlYWQgb2Ygc3RhcnRpbmcgYXQgMlxuXHRcdFx0YS5mcm9tSW50KGxvd3ByaW1lc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBsb3dwcmltZXMubGVuZ3RoKV0pO1xuXHRcdFx0dmFyIHkgPSBhLm1vZFBvdyhyLCB0aGlzKTtcblx0XHRcdGlmICh5LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgIT0gMCAmJiB5LmNvbXBhcmVUbyhuMSkgIT0gMClcblx0XHRcdHtcblx0XHRcdFx0dmFyIGogPSAxO1xuXHRcdFx0XHR3aGlsZSAoaisrIDwgayAmJiB5LmNvbXBhcmVUbyhuMSkgIT0gMClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHkgPSB5Lm1vZFBvd0ludCgyLCB0aGlzKTtcblx0XHRcdFx0XHRpZiAoeS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpID09IDApIHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoeS5jb21wYXJlVG8objEpICE9IDApIHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0Ly8gcHJvdGVjdGVkXG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmNodW5rU2l6ZSA9IGJucENodW5rU2l6ZTtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUudG9SYWRpeCA9IGJucFRvUmFkaXg7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21SYWRpeCA9IGJucEZyb21SYWRpeDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbU51bWJlciA9IGJucEZyb21OdW1iZXI7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdHdpc2VUbyA9IGJucEJpdHdpc2VUbztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuY2hhbmdlQml0ID0gYm5wQ2hhbmdlQml0O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5hZGRUbyA9IGJucEFkZFRvO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5kTXVsdGlwbHkgPSBibnBETXVsdGlwbHk7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmRBZGRPZmZzZXQgPSBibnBEQWRkT2Zmc2V0O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseUxvd2VyVG8gPSBibnBNdWx0aXBseUxvd2VyVG87XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5VXBwZXJUbyA9IGJucE11bHRpcGx5VXBwZXJUbztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUubW9kSW50ID0gYm5wTW9kSW50O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5taWxsZXJSYWJpbiA9IGJucE1pbGxlclJhYmluO1xuXHQvLyBwdWJsaWNcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuY2xvbmUgPSBibkNsb25lO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5pbnRWYWx1ZSA9IGJuSW50VmFsdWU7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmJ5dGVWYWx1ZSA9IGJuQnl0ZVZhbHVlO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaG9ydFZhbHVlID0gYm5TaG9ydFZhbHVlO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaWdudW0gPSBiblNpZ051bTtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUudG9CeXRlQXJyYXkgPSBiblRvQnl0ZUFycmF5O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5lcXVhbHMgPSBibkVxdWFscztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUubWluID0gYm5NaW47XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLm1heCA9IGJuTWF4O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbmQgPSBibkFuZDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUub3IgPSBibk9yO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS54b3IgPSBiblhvcjtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuYW5kTm90ID0gYm5BbmROb3Q7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLm5vdCA9IGJuTm90O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaGlmdExlZnQgPSBiblNoaWZ0TGVmdDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuc2hpZnRSaWdodCA9IGJuU2hpZnRSaWdodDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuZ2V0TG93ZXN0U2V0Qml0ID0gYm5HZXRMb3dlc3RTZXRCaXQ7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdENvdW50ID0gYm5CaXRDb3VudDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUudGVzdEJpdCA9IGJuVGVzdEJpdDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuc2V0Qml0ID0gYm5TZXRCaXQ7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmNsZWFyQml0ID0gYm5DbGVhckJpdDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuZmxpcEJpdCA9IGJuRmxpcEJpdDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuYWRkID0gYm5BZGQ7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLnN1YnRyYWN0ID0gYm5TdWJ0cmFjdDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHkgPSBibk11bHRpcGx5O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZpZGUgPSBibkRpdmlkZTtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUucmVtYWluZGVyID0gYm5SZW1haW5kZXI7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmRpdmlkZUFuZFJlbWFpbmRlciA9IGJuRGl2aWRlQW5kUmVtYWluZGVyO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3cgPSBibk1vZFBvdztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUubW9kSW52ZXJzZSA9IGJuTW9kSW52ZXJzZTtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUucG93ID0gYm5Qb3c7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmdjZCA9IGJuR0NEO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc1Byb2JhYmxlUHJpbWUgPSBibklzUHJvYmFibGVQcmltZTtcblx0Ly8gSlNCTi1zcGVjaWZpYyBleHRlbnNpb25cblx0QmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlID0gYm5TcXVhcmU7XG5cdHZhciBJbnQxMjggPSBCaWdJbnRlZ2VyO1xuXHQvLyBCaWdJbnRlZ2VyIGludGVyZmFjZXMgbm90IGltcGxlbWVudGVkIGluIGpzYm46XG5cdC8vIEJpZ0ludGVnZXIoaW50IHNpZ251bSwgYnl0ZVtdIG1hZ25pdHVkZSlcblx0Ly8gZG91YmxlIGRvdWJsZVZhbHVlKClcblx0Ly8gZmxvYXQgZmxvYXRWYWx1ZSgpXG5cdC8vIGludCBoYXNoQ29kZSgpXG5cdC8vIGxvbmcgbG9uZ1ZhbHVlKClcblx0Ly8gc3RhdGljIEJpZ0ludGVnZXIgdmFsdWVPZihsb25nIHZhbClcblx0Ly8gSGVscGVyIGZ1bmN0aW9ucyB0byBtYWtlIEJpZ0ludGVnZXIgZnVuY3Rpb25zIGNhbGxhYmxlIHdpdGggdHdvIHBhcmFtZXRlcnNcblx0Ly8gYXMgaW4gb3JpZ2luYWwgQyMgQ2xpcHBlclxuXHRJbnQxMjgucHJvdG90eXBlLklzTmVnYXRpdmUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0aWYgKHRoaXMuY29tcGFyZVRvKEludDEyOC5aRVJPKSA9PSAtMSkgcmV0dXJuIHRydWU7XG5cdFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0SW50MTI4Lm9wX0VxdWFsaXR5ID0gZnVuY3Rpb24gKHZhbDEsIHZhbDIpXG5cdHtcblx0XHRpZiAodmFsMS5jb21wYXJlVG8odmFsMikgPT0gMCkgcmV0dXJuIHRydWU7XG5cdFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0SW50MTI4Lm9wX0luZXF1YWxpdHkgPSBmdW5jdGlvbiAodmFsMSwgdmFsMilcblx0e1xuXHRcdGlmICh2YWwxLmNvbXBhcmVUbyh2YWwyKSAhPSAwKSByZXR1cm4gdHJ1ZTtcblx0XHRlbHNlIHJldHVybiBmYWxzZTtcblx0fTtcblxuXHRJbnQxMjgub3BfR3JlYXRlclRoYW4gPSBmdW5jdGlvbiAodmFsMSwgdmFsMilcblx0e1xuXHRcdGlmICh2YWwxLmNvbXBhcmVUbyh2YWwyKSA+IDApIHJldHVybiB0cnVlO1xuXHRcdGVsc2UgcmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdEludDEyOC5vcF9MZXNzVGhhbiA9IGZ1bmN0aW9uICh2YWwxLCB2YWwyKVxuXHR7XG5cdFx0aWYgKHZhbDEuY29tcGFyZVRvKHZhbDIpIDwgMCkgcmV0dXJuIHRydWU7XG5cdFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0SW50MTI4Lm9wX0FkZGl0aW9uID0gZnVuY3Rpb24gKGxocywgcmhzKVxuXHR7XG5cdFx0cmV0dXJuIG5ldyBJbnQxMjgobGhzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkuYWRkKG5ldyBJbnQxMjgocmhzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkpO1xuXHR9O1xuXG5cdEludDEyOC5vcF9TdWJ0cmFjdGlvbiA9IGZ1bmN0aW9uIChsaHMsIHJocylcblx0e1xuXHRcdHJldHVybiBuZXcgSW50MTI4KGxocywgdW5kZWZpbmVkLCB1bmRlZmluZWQpLnN1YnRyYWN0KG5ldyBJbnQxMjgocmhzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkpO1xuXHR9O1xuXG5cdEludDEyOC5JbnQxMjhNdWwgPSBmdW5jdGlvbiAobGhzLCByaHMpXG5cdHtcblx0XHRyZXR1cm4gbmV3IEludDEyOChsaHMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKS5tdWx0aXBseShuZXcgSW50MTI4KHJocywgdW5kZWZpbmVkLCB1bmRlZmluZWQpKTtcblx0fTtcblxuXHRJbnQxMjgub3BfRGl2aXNpb24gPSBmdW5jdGlvbiAobGhzLCByaHMpXG5cdHtcblx0XHRyZXR1cm4gbGhzLmRpdmlkZShyaHMpO1xuXHR9O1xuXG5cdEludDEyOC5wcm90b3R5cGUuVG9Eb3VibGUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0cmV0dXJuIHBhcnNlRmxvYXQodGhpcy50b1N0cmluZygpKTsgLy8gVGhpcyBjb3VsZCBiZSBzb21ldGhpbmcgZmFzdGVyXG5cdH07XG5cblx0Ly8gZW5kIG9mIEludDEyOCBzZWN0aW9uXG5cdC8qXG5cdC8vIFVuY29tbWVudCB0aGUgZm9sbG93aW5nIHR3byBsaW5lcyBpZiB5b3Ugd2FudCB0byB1c2UgSW50MTI4IG91dHNpZGUgQ2xpcHBlckxpYlxuXHRpZiAodHlwZW9mKGRvY3VtZW50KSAhPT0gXCJ1bmRlZmluZWRcIikgd2luZG93LkludDEyOCA9IEludDEyODtcblx0ZWxzZSBzZWxmLkludDEyOCA9IEludDEyODtcblx0Ki9cblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHQvLyBIZXJlIHN0YXJ0cyB0aGUgYWN0dWFsIENsaXBwZXIgbGlicmFyeTpcblx0Ly8gSGVscGVyIGZ1bmN0aW9uIHRvIHN1cHBvcnQgSW5oZXJpdGFuY2UgaW4gSmF2YXNjcmlwdFxuXHR2YXIgSW5oZXJpdCA9IGZ1bmN0aW9uIChjZSwgY2UyKVxuXHR7XG5cdFx0dmFyIHA7XG5cdFx0aWYgKHR5cGVvZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpID09PSAndW5kZWZpbmVkJylcblx0XHR7XG5cdFx0XHRmb3IgKHAgaW4gY2UyLnByb3RvdHlwZSlcblx0XHRcdFx0aWYgKHR5cGVvZiAoY2UucHJvdG90eXBlW3BdKSA9PT0gJ3VuZGVmaW5lZCcgfHwgY2UucHJvdG90eXBlW3BdID09PSBPYmplY3QucHJvdG90eXBlW3BdKSBjZS5wcm90b3R5cGVbcF0gPSBjZTIucHJvdG90eXBlW3BdO1xuXHRcdFx0Zm9yIChwIGluIGNlMilcblx0XHRcdFx0aWYgKHR5cGVvZiAoY2VbcF0pID09PSAndW5kZWZpbmVkJykgY2VbcF0gPSBjZTJbcF07XG5cdFx0XHRjZS4kYmFzZUN0b3IgPSBjZTI7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR2YXIgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjZTIucHJvdG90eXBlKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspXG5cdFx0XHRcdGlmICh0eXBlb2YgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY2UucHJvdG90eXBlLCBwcm9wc1tpXSkpID09PSAndW5kZWZpbmVkJykgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNlLnByb3RvdHlwZSwgcHJvcHNbaV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY2UyLnByb3RvdHlwZSwgcHJvcHNbaV0pKTtcblx0XHRcdGZvciAocCBpbiBjZTIpXG5cdFx0XHRcdGlmICh0eXBlb2YgKGNlW3BdKSA9PT0gJ3VuZGVmaW5lZCcpIGNlW3BdID0gY2UyW3BdO1xuXHRcdFx0Y2UuJGJhc2VDdG9yID0gY2UyO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5QYXRoID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiBbXTtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBhdGgucHJvdG90eXBlLnB1c2ggPSBBcnJheS5wcm90b3R5cGUucHVzaDtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5QYXRocyA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHRyZXR1cm4gW107IC8vIFdhcyBwcmV2aW91c2x5IFtbXV0sIGJ1dCBjYXVzZWQgcHJvYmxlbXMgd2hlbiBwdXNoZWRcblx0fTtcblxuXHRDbGlwcGVyTGliLlBhdGhzLnByb3RvdHlwZS5wdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG5cblx0Ly8gUHJlc2VydmVzIHRoZSBjYWxsaW5nIHdheSBvZiBvcmlnaW5hbCBDIyBDbGlwcGVyXG5cdC8vIElzIGVzc2VudGlhbCBkdWUgdG8gY29tcGF0aWJpbGl0eSwgYmVjYXVzZSBEb3VibGVQb2ludCBpcyBwdWJsaWMgY2xhc3MgaW4gb3JpZ2luYWwgQyMgdmVyc2lvblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5Eb3VibGVQb2ludCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR2YXIgYSA9IGFyZ3VtZW50cztcblx0XHR0aGlzLlggPSAwO1xuXHRcdHRoaXMuWSA9IDA7XG5cdFx0Ly8gcHVibGljIERvdWJsZVBvaW50KERvdWJsZVBvaW50IGRwKVxuXHRcdC8vIHB1YmxpYyBEb3VibGVQb2ludChJbnRQb2ludCBpcClcblx0XHRpZiAoYS5sZW5ndGggPT09IDEpXG5cdFx0e1xuXHRcdFx0dGhpcy5YID0gYVswXS5YO1xuXHRcdFx0dGhpcy5ZID0gYVswXS5ZO1xuXHRcdH1cblx0XHRlbHNlIGlmIChhLmxlbmd0aCA9PT0gMilcblx0XHR7XG5cdFx0XHR0aGlzLlggPSBhWzBdO1xuXHRcdFx0dGhpcy5ZID0gYVsxXTtcblx0XHR9XG5cdH07IC8vIFRoaXMgaXMgaW50ZXJuYWwgZmFzdGVyIGZ1bmN0aW9uIHdoZW4gY2FsbGVkIHdpdGhvdXQgYXJndW1lbnRzXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkRvdWJsZVBvaW50MCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLlggPSAwO1xuXHRcdHRoaXMuWSA9IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5Eb3VibGVQb2ludDAucHJvdG90eXBlID0gQ2xpcHBlckxpYi5Eb3VibGVQb2ludC5wcm90b3R5cGU7XG5cblx0Ly8gVGhpcyBpcyBpbnRlcm5hbCBmYXN0ZXIgZnVuY3Rpb24gd2hlbiBjYWxsZWQgd2l0aCAxIGFyZ3VtZW50IChkcCBvciBpcClcblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuRG91YmxlUG9pbnQxID0gZnVuY3Rpb24gKGRwKVxuXHR7XG5cdFx0dGhpcy5YID0gZHAuWDtcblx0XHR0aGlzLlkgPSBkcC5ZO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuRG91YmxlUG9pbnQxLnByb3RvdHlwZSA9IENsaXBwZXJMaWIuRG91YmxlUG9pbnQucHJvdG90eXBlO1xuXG5cdC8vIFRoaXMgaXMgaW50ZXJuYWwgZmFzdGVyIGZ1bmN0aW9uIHdoZW4gY2FsbGVkIHdpdGggMiBhcmd1bWVudHMgKHggYW5kIHkpXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkRvdWJsZVBvaW50MiA9IGZ1bmN0aW9uICh4LCB5KVxuXHR7XG5cdFx0dGhpcy5YID0geDtcblx0XHR0aGlzLlkgPSB5O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuRG91YmxlUG9pbnQyLnByb3RvdHlwZSA9IENsaXBwZXJMaWIuRG91YmxlUG9pbnQucHJvdG90eXBlO1xuXG5cdC8vIFBvbHlUcmVlICYgUG9seU5vZGUgc3RhcnRcblx0LyoqXG5cdCogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc31cblx0Ki9cblx0Q2xpcHBlckxpYi5Qb2x5Tm9kZSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLm1fUGFyZW50ID0gbnVsbDtcblx0XHR0aGlzLm1fcG9seWdvbiA9IG5ldyBDbGlwcGVyTGliLlBhdGgoKTtcblx0XHR0aGlzLm1fSW5kZXggPSAwO1xuXHRcdHRoaXMubV9qb2ludHlwZSA9IDA7XG5cdFx0dGhpcy5tX2VuZHR5cGUgPSAwO1xuXHRcdHRoaXMubV9DaGlsZHMgPSBbXTtcblx0XHR0aGlzLklzT3BlbiA9IGZhbHNlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuUG9seU5vZGUucHJvdG90eXBlLklzSG9sZU5vZGUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IHRydWU7XG5cdFx0dmFyIG5vZGUgPSB0aGlzLm1fUGFyZW50O1xuXHRcdHdoaWxlIChub2RlICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdHJlc3VsdCA9ICFyZXN1bHQ7XG5cdFx0XHRub2RlID0gbm9kZS5tX1BhcmVudDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5DaGlsZENvdW50ID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiB0aGlzLm1fQ2hpbGRzLmxlbmd0aDtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5Db250b3VyID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiB0aGlzLm1fcG9seWdvbjtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5BZGRDaGlsZCA9IGZ1bmN0aW9uIChDaGlsZClcblx0e1xuXHRcdHZhciBjbnQgPSB0aGlzLm1fQ2hpbGRzLmxlbmd0aDtcblx0XHR0aGlzLm1fQ2hpbGRzLnB1c2goQ2hpbGQpO1xuXHRcdENoaWxkLm1fUGFyZW50ID0gdGhpcztcblx0XHRDaGlsZC5tX0luZGV4ID0gY250O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuUG9seU5vZGUucHJvdG90eXBlLkdldE5leHQgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0aWYgKHRoaXMubV9DaGlsZHMubGVuZ3RoID4gMClcblx0XHRcdHJldHVybiB0aGlzLm1fQ2hpbGRzWzBdO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiB0aGlzLkdldE5leHRTaWJsaW5nVXAoKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5HZXROZXh0U2libGluZ1VwID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdGlmICh0aGlzLm1fUGFyZW50ID09PSBudWxsKVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0ZWxzZSBpZiAodGhpcy5tX0luZGV4ID09PSB0aGlzLm1fUGFyZW50Lm1fQ2hpbGRzLmxlbmd0aCAtIDEpXG5cdFx0XHRyZXR1cm4gdGhpcy5tX1BhcmVudC5HZXROZXh0U2libGluZ1VwKCk7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHRoaXMubV9QYXJlbnQubV9DaGlsZHNbdGhpcy5tX0luZGV4ICsgMV07XG5cdH07XG5cblx0Q2xpcHBlckxpYi5Qb2x5Tm9kZS5wcm90b3R5cGUuQ2hpbGRzID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiB0aGlzLm1fQ2hpbGRzO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuUG9seU5vZGUucHJvdG90eXBlLlBhcmVudCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5tX1BhcmVudDtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5Jc0hvbGUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuSXNIb2xlTm9kZSgpO1xuXHR9O1xuXG5cdC8vIFBvbHlUcmVlIDogUG9seU5vZGVcblx0LyoqXG5cdCAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9XG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0Q2xpcHBlckxpYi5Qb2x5VHJlZSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLm1fQWxsUG9seXMgPSBbXTtcblx0XHRDbGlwcGVyTGliLlBvbHlOb2RlLmNhbGwodGhpcyk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5Qb2x5VHJlZS5wcm90b3R5cGUuQ2xlYXIgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fQWxsUG9seXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdFx0dGhpcy5tX0FsbFBvbHlzW2ldID0gbnVsbDtcblx0XHR0aGlzLm1fQWxsUG9seXMubGVuZ3RoID0gMDtcblx0XHR0aGlzLm1fQ2hpbGRzLmxlbmd0aCA9IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5Qb2x5VHJlZS5wcm90b3R5cGUuR2V0Rmlyc3QgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0aWYgKHRoaXMubV9DaGlsZHMubGVuZ3RoID4gMClcblx0XHRcdHJldHVybiB0aGlzLm1fQ2hpbGRzWzBdO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBudWxsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuUG9seVRyZWUucHJvdG90eXBlLlRvdGFsID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHZhciByZXN1bHQgPSB0aGlzLm1fQWxsUG9seXMubGVuZ3RoO1xuXHRcdC8vd2l0aCBuZWdhdGl2ZSBvZmZzZXRzLCBpZ25vcmUgdGhlIGhpZGRlbiBvdXRlciBwb2x5Z29uIC4uLlxuXHRcdGlmIChyZXN1bHQgPiAwICYmIHRoaXMubV9DaGlsZHNbMF0gIT09IHRoaXMubV9BbGxQb2x5c1swXSkgcmVzdWx0LS07XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRJbmhlcml0KENsaXBwZXJMaWIuUG9seVRyZWUsIENsaXBwZXJMaWIuUG9seU5vZGUpO1xuXG5cdC8vIFBvbHlUcmVlICYgUG9seU5vZGUgZW5kXG5cblx0Q2xpcHBlckxpYi5NYXRoX0Fic19JbnQ2NCA9IENsaXBwZXJMaWIuTWF0aF9BYnNfSW50MzIgPSBDbGlwcGVyTGliLk1hdGhfQWJzX0RvdWJsZSA9IGZ1bmN0aW9uIChhKVxuXHR7XG5cdFx0cmV0dXJuIE1hdGguYWJzKGEpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuTWF0aF9NYXhfSW50MzJfSW50MzIgPSBmdW5jdGlvbiAoYSwgYilcblx0e1xuXHRcdHJldHVybiBNYXRoLm1heChhLCBiKTtcblx0fTtcblxuXHQvKlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRjYXN0XzMyIHNwZWVkdGVzdDogaHR0cDovL2pzcGVyZi5jb20vdHJ1bmNhdGUtZmxvYXQtdG8taW50ZWdlci8yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCovXG5cdGlmIChicm93c2VyLm1zaWUgfHwgYnJvd3Nlci5vcGVyYSB8fCBicm93c2VyLnNhZmFyaSkgQ2xpcHBlckxpYi5DYXN0X0ludDMyID0gZnVuY3Rpb24gKGEpXG5cdHtcblx0XHRyZXR1cm4gYSB8IDA7XG5cdH07XG5cblx0ZWxzZSBDbGlwcGVyTGliLkNhc3RfSW50MzIgPSBmdW5jdGlvbiAoYSlcblx0eyAvLyBlZy4gYnJvd3Nlci5jaHJvbWUgfHwgYnJvd3Nlci5jaHJvbWl1bSB8fCBicm93c2VyLmZpcmVmb3hcblx0XHRyZXR1cm4gfn5hO1xuXHR9O1xuXG5cdC8qXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdGNhc3RfNjQgc3BlZWR0ZXN0czogaHR0cDovL2pzcGVyZi5jb20vdHJ1bmNhdGUtZmxvYXQtdG8taW50ZWdlclxuXHRDaHJvbWU6IGJpdHdpc2Vfbm90X2Zsb29yXG5cdEZpcmVmb3gxNzogdG9JbnRlZ2VyICh0eXBlb2YgdGVzdClcblx0SUU5OiBiaXR3aXNlX29yX2Zsb29yXG5cdElFNyBhbmQgSUU4OiB0b19wYXJzZWludFxuXHRDaHJvbWl1bTogdG9fZmxvb3Jfb3JfY2VpbFxuXHRGaXJlZm94MzogdG9fZmxvb3Jfb3JfY2VpbFxuXHRGaXJlZm94MTU6IHRvX2Zsb29yX29yX2NlaWxcblx0T3BlcmE6IHRvX2Zsb29yX29yX2NlaWxcblx0U2FmYXJpOiB0b19mbG9vcl9vcl9jZWlsXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCovXG5cdGlmICh0eXBlb2YgTnVtYmVyLnRvSW50ZWdlciA9PT0gXCJ1bmRlZmluZWRcIilcblx0XHROdW1iZXIudG9JbnRlZ2VyID0gbnVsbDtcblxuXHRpZiAoYnJvd3Nlci5jaHJvbWUpIENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCA9IGZ1bmN0aW9uIChhKVxuXHR7XG5cdFx0aWYgKGEgPCAtMjE0NzQ4MzY0OCB8fCBhID4gMjE0NzQ4MzY0Nylcblx0XHRcdHJldHVybiBhIDwgMCA/IE1hdGguY2VpbChhKSA6IE1hdGguZmxvb3IoYSk7XG5cdFx0ZWxzZSByZXR1cm4gfn5hO1xuXHR9O1xuXG5cdGVsc2UgaWYgKGJyb3dzZXIuZmlyZWZveCAmJiB0eXBlb2YgKE51bWJlci50b0ludGVnZXIpID09PSBcImZ1bmN0aW9uXCIpIENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCA9IGZ1bmN0aW9uIChhKVxuXHR7XG5cdFx0cmV0dXJuIE51bWJlci50b0ludGVnZXIoYSk7XG5cdH07XG5cblx0ZWxzZSBpZiAoYnJvd3Nlci5tc2llNyB8fCBicm93c2VyLm1zaWU4KSBDbGlwcGVyTGliLkNhc3RfSW50NjQgPSBmdW5jdGlvbiAoYSlcblx0e1xuXHRcdHJldHVybiBwYXJzZUludChhLCAxMCk7XG5cdH07XG5cblx0ZWxzZSBpZiAoYnJvd3Nlci5tc2llKSBDbGlwcGVyTGliLkNhc3RfSW50NjQgPSBmdW5jdGlvbiAoYSlcblx0e1xuXHRcdGlmIChhIDwgLTIxNDc0ODM2NDggfHwgYSA+IDIxNDc0ODM2NDcpXG5cdFx0XHRyZXR1cm4gYSA8IDAgPyBNYXRoLmNlaWwoYSkgOiBNYXRoLmZsb29yKGEpO1xuXHRcdHJldHVybiBhIHwgMDtcblx0fTtcblxuXHQvLyBlZy4gYnJvd3Nlci5jaHJvbWl1bSB8fCBicm93c2VyLmZpcmVmb3ggfHwgYnJvd3Nlci5vcGVyYSB8fCBicm93c2VyLnNhZmFyaVxuXHRlbHNlIENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCA9IGZ1bmN0aW9uIChhKVxuXHR7XG5cdFx0cmV0dXJuIGEgPCAwID8gTWF0aC5jZWlsKGEpIDogTWF0aC5mbG9vcihhKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsZWFyID0gZnVuY3Rpb24gKGEpXG5cdHtcblx0XHRhLmxlbmd0aCA9IDA7XG5cdH07XG5cblx0Ly9DbGlwcGVyTGliLk1heFN0ZXBzID0gNjQ7IC8vIEhvdyBtYW55IHN0ZXBzIGF0IG1heGltdW0gaW4gYXJjIGluIEJ1aWxkQXJjKCkgZnVuY3Rpb25cblx0Q2xpcHBlckxpYi5QSSA9IDMuMTQxNTkyNjUzNTg5NzkzO1xuXHRDbGlwcGVyTGliLlBJMiA9IDIgKiAzLjE0MTU5MjY1MzU4OTc5Mztcblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuSW50UG9pbnQgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIGEgPSBhcmd1bWVudHMsXG5cdFx0XHRhbGVuID0gYS5sZW5ndGg7XG5cdFx0dGhpcy5YID0gMDtcblx0XHR0aGlzLlkgPSAwO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopXG5cdFx0e1xuXHRcdFx0dGhpcy5aID0gMDtcblx0XHRcdGlmIChhbGVuID09PSAzKSAvLyBwdWJsaWMgSW50UG9pbnQoY0ludCB4LCBjSW50IHksIGNJbnQgeiA9IDApXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuWCA9IGFbMF07XG5cdFx0XHRcdHRoaXMuWSA9IGFbMV07XG5cdFx0XHRcdHRoaXMuWiA9IGFbMl07XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChhbGVuID09PSAyKSAvLyBwdWJsaWMgSW50UG9pbnQoY0ludCB4LCBjSW50IHkpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuWCA9IGFbMF07XG5cdFx0XHRcdHRoaXMuWSA9IGFbMV07XG5cdFx0XHRcdHRoaXMuWiA9IDA7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChhbGVuID09PSAxKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoYVswXSBpbnN0YW5jZW9mIENsaXBwZXJMaWIuRG91YmxlUG9pbnQpIC8vIHB1YmxpYyBJbnRQb2ludChEb3VibGVQb2ludCBkcClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBkcCA9IGFbMF07XG5cdFx0XHRcdFx0dGhpcy5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlJvdW5kKGRwLlgpO1xuXHRcdFx0XHRcdHRoaXMuWSA9IENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZChkcC5ZKTtcblx0XHRcdFx0XHR0aGlzLlogPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgLy8gcHVibGljIEludFBvaW50KEludFBvaW50IHB0KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIHB0ID0gYVswXTtcblx0XHRcdFx0XHRpZiAodHlwZW9mIChwdC5aKSA9PT0gXCJ1bmRlZmluZWRcIikgcHQuWiA9IDA7XG5cdFx0XHRcdFx0dGhpcy5YID0gcHQuWDtcblx0XHRcdFx0XHR0aGlzLlkgPSBwdC5ZO1xuXHRcdFx0XHRcdHRoaXMuWiA9IHB0Llo7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2UgLy8gcHVibGljIEludFBvaW50KClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5YID0gMDtcblx0XHRcdFx0dGhpcy5ZID0gMDtcblx0XHRcdFx0dGhpcy5aID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSAvLyBpZiAoIUNsaXBwZXJMaWIudXNlX3h5eilcblx0XHR7XG5cdFx0XHRpZiAoYWxlbiA9PT0gMikgLy8gcHVibGljIEludFBvaW50KGNJbnQgWCwgY0ludCBZKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLlggPSBhWzBdO1xuXHRcdFx0XHR0aGlzLlkgPSBhWzFdO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoYWxlbiA9PT0gMSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKGFbMF0gaW5zdGFuY2VvZiBDbGlwcGVyTGliLkRvdWJsZVBvaW50KSAvLyBwdWJsaWMgSW50UG9pbnQoRG91YmxlUG9pbnQgZHApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgZHAgPSBhWzBdO1xuXHRcdFx0XHRcdHRoaXMuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZChkcC5YKTtcblx0XHRcdFx0XHR0aGlzLlkgPSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQoZHAuWSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSAvLyBwdWJsaWMgSW50UG9pbnQoSW50UG9pbnQgcHQpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgcHQgPSBhWzBdO1xuXHRcdFx0XHRcdHRoaXMuWCA9IHB0Llg7XG5cdFx0XHRcdFx0dGhpcy5ZID0gcHQuWTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSAvLyBwdWJsaWMgSW50UG9pbnQoSW50UG9pbnQgcHQpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuWCA9IDA7XG5cdFx0XHRcdHRoaXMuWSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkgPSBmdW5jdGlvbiAoYSwgYilcblx0e1xuXHRcdC8vcmV0dXJuIGEgPT0gYjtcblx0XHRyZXR1cm4gYS5YID09PSBiLlggJiYgYS5ZID09PSBiLlk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRQb2ludC5vcF9JbmVxdWFsaXR5ID0gZnVuY3Rpb24gKGEsIGIpXG5cdHtcblx0XHQvL3JldHVybiBhICE9PSBiO1xuXHRcdHJldHVybiBhLlggIT09IGIuWCB8fCBhLlkgIT09IGIuWTtcblx0fTtcblxuXHQvKlxuICBDbGlwcGVyTGliLkludFBvaW50LnByb3RvdHlwZS5FcXVhbHMgPSBmdW5jdGlvbiAob2JqKVxuICB7XG4gICAgaWYgKG9iaiA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBDbGlwcGVyTGliLkludFBvaW50KVxuICAgIHtcbiAgICAgICAgdmFyIGEgPSBDYXN0KG9iaiwgQ2xpcHBlckxpYi5JbnRQb2ludCk7XG4gICAgICAgIHJldHVybiAodGhpcy5YID09IGEuWCkgJiYgKHRoaXMuWSA9PSBhLlkpO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuXHQqL1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkludFBvaW50MCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLlggPSAwO1xuXHRcdHRoaXMuWSA9IDA7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eilcblx0XHRcdHRoaXMuWiA9IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRQb2ludDAucHJvdG90eXBlID0gQ2xpcHBlckxpYi5JbnRQb2ludC5wcm90b3R5cGU7XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuSW50UG9pbnQxID0gZnVuY3Rpb24gKHB0KVxuXHR7XG5cdFx0dGhpcy5YID0gcHQuWDtcblx0XHR0aGlzLlkgPSBwdC5ZO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopXG5cdFx0e1xuXHRcdFx0aWYgKHR5cGVvZiBwdC5aID09PSBcInVuZGVmaW5lZFwiKSB0aGlzLlogPSAwO1xuXHRcdFx0ZWxzZSB0aGlzLlogPSBwdC5aO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkludFBvaW50MS5wcm90b3R5cGUgPSBDbGlwcGVyTGliLkludFBvaW50LnByb3RvdHlwZTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5JbnRQb2ludDFkcCA9IGZ1bmN0aW9uIChkcClcblx0e1xuXHRcdHRoaXMuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZChkcC5YKTtcblx0XHR0aGlzLlkgPSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQoZHAuWSk7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eilcblx0XHRcdHRoaXMuWiA9IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRQb2ludDFkcC5wcm90b3R5cGUgPSBDbGlwcGVyTGliLkludFBvaW50LnByb3RvdHlwZTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5JbnRQb2ludDIgPSBmdW5jdGlvbiAoeCwgeSwgeilcblx0e1xuXHRcdHRoaXMuWCA9IHg7XG5cdFx0dGhpcy5ZID0geTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdHtcblx0XHRcdGlmICh0eXBlb2YgeiA9PT0gXCJ1bmRlZmluZWRcIikgdGhpcy5aID0gMDtcblx0XHRcdGVsc2UgdGhpcy5aID0gejtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRQb2ludDIucHJvdG90eXBlID0gQ2xpcHBlckxpYi5JbnRQb2ludC5wcm90b3R5cGU7XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuSW50UmVjdCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR2YXIgYSA9IGFyZ3VtZW50cyxcblx0XHRcdGFsZW4gPSBhLmxlbmd0aDtcblx0XHRpZiAoYWxlbiA9PT0gNCkgLy8gZnVuY3Rpb24gKGwsIHQsIHIsIGIpXG5cdFx0e1xuXHRcdFx0dGhpcy5sZWZ0ID0gYVswXTtcblx0XHRcdHRoaXMudG9wID0gYVsxXTtcblx0XHRcdHRoaXMucmlnaHQgPSBhWzJdO1xuXHRcdFx0dGhpcy5ib3R0b20gPSBhWzNdO1xuXHRcdH1cblx0XHRlbHNlIGlmIChhbGVuID09PSAxKSAvLyBmdW5jdGlvbiAoaXIpXG5cdFx0e1xuXHRcdFx0dmFyIGlyID0gYVswXTtcblx0XHRcdHRoaXMubGVmdCA9IGlyLmxlZnQ7XG5cdFx0XHR0aGlzLnRvcCA9IGlyLnRvcDtcblx0XHRcdHRoaXMucmlnaHQgPSBpci5yaWdodDtcblx0XHRcdHRoaXMuYm90dG9tID0gaXIuYm90dG9tO1xuXHRcdH1cblx0XHRlbHNlIC8vIGZ1bmN0aW9uICgpXG5cdFx0e1xuXHRcdFx0dGhpcy5sZWZ0ID0gMDtcblx0XHRcdHRoaXMudG9wID0gMDtcblx0XHRcdHRoaXMucmlnaHQgPSAwO1xuXHRcdFx0dGhpcy5ib3R0b20gPSAwO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5JbnRSZWN0MCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLmxlZnQgPSAwO1xuXHRcdHRoaXMudG9wID0gMDtcblx0XHR0aGlzLnJpZ2h0ID0gMDtcblx0XHR0aGlzLmJvdHRvbSA9IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRSZWN0MC5wcm90b3R5cGUgPSBDbGlwcGVyTGliLkludFJlY3QucHJvdG90eXBlO1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkludFJlY3QxID0gZnVuY3Rpb24gKGlyKVxuXHR7XG5cdFx0dGhpcy5sZWZ0ID0gaXIubGVmdDtcblx0XHR0aGlzLnRvcCA9IGlyLnRvcDtcblx0XHR0aGlzLnJpZ2h0ID0gaXIucmlnaHQ7XG5cdFx0dGhpcy5ib3R0b20gPSBpci5ib3R0b207XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRSZWN0MS5wcm90b3R5cGUgPSBDbGlwcGVyTGliLkludFJlY3QucHJvdG90eXBlO1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkludFJlY3Q0ID0gZnVuY3Rpb24gKGwsIHQsIHIsIGIpXG5cdHtcblx0XHR0aGlzLmxlZnQgPSBsO1xuXHRcdHRoaXMudG9wID0gdDtcblx0XHR0aGlzLnJpZ2h0ID0gcjtcblx0XHR0aGlzLmJvdHRvbSA9IGI7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRSZWN0NC5wcm90b3R5cGUgPSBDbGlwcGVyTGliLkludFJlY3QucHJvdG90eXBlO1xuXG5cdENsaXBwZXJMaWIuQ2xpcFR5cGUgPSB7XG5cdFx0Y3RJbnRlcnNlY3Rpb246IDAsXG5cdFx0Y3RVbmlvbjogMSxcblx0XHRjdERpZmZlcmVuY2U6IDIsXG5cdFx0Y3RYb3I6IDNcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlUeXBlID0ge1xuXHRcdHB0U3ViamVjdDogMCxcblx0XHRwdENsaXA6IDFcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlGaWxsVHlwZSA9IHtcblx0XHRwZnRFdmVuT2RkOiAwLFxuXHRcdHBmdE5vblplcm86IDEsXG5cdFx0cGZ0UG9zaXRpdmU6IDIsXG5cdFx0cGZ0TmVnYXRpdmU6IDNcblx0fTtcblxuXHRDbGlwcGVyTGliLkpvaW5UeXBlID0ge1xuXHRcdGp0U3F1YXJlOiAwLFxuXHRcdGp0Um91bmQ6IDEsXG5cdFx0anRNaXRlcjogMlxuXHR9O1xuXG5cdENsaXBwZXJMaWIuRW5kVHlwZSA9IHtcblx0XHRldE9wZW5TcXVhcmU6IDAsXG5cdFx0ZXRPcGVuUm91bmQ6IDEsXG5cdFx0ZXRPcGVuQnV0dDogMixcblx0XHRldENsb3NlZExpbmU6IDMsXG5cdFx0ZXRDbG9zZWRQb2x5Z29uOiA0XG5cdH07XG5cblx0Q2xpcHBlckxpYi5FZGdlU2lkZSA9IHtcblx0XHRlc0xlZnQ6IDAsXG5cdFx0ZXNSaWdodDogMVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuRGlyZWN0aW9uID0ge1xuXHRcdGRSaWdodFRvTGVmdDogMCxcblx0XHRkTGVmdFRvUmlnaHQ6IDFcblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5URWRnZSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLkJvdCA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MCgpO1xuXHRcdHRoaXMuQ3VyciA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MCgpOyAvL2N1cnJlbnQgKHVwZGF0ZWQgZm9yIGV2ZXJ5IG5ldyBzY2FuYmVhbSlcblx0XHR0aGlzLlRvcCA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MCgpO1xuXHRcdHRoaXMuRGVsdGEgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDAoKTtcblx0XHR0aGlzLkR4ID0gMDtcblx0XHR0aGlzLlBvbHlUeXAgPSBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdDtcblx0XHR0aGlzLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzTGVmdDsgLy9zaWRlIG9ubHkgcmVmZXJzIHRvIGN1cnJlbnQgc2lkZSBvZiBzb2x1dGlvbiBwb2x5XG5cdFx0dGhpcy5XaW5kRGVsdGEgPSAwOyAvLzEgb3IgLTEgZGVwZW5kaW5nIG9uIHdpbmRpbmcgZGlyZWN0aW9uXG5cdFx0dGhpcy5XaW5kQ250ID0gMDtcblx0XHR0aGlzLldpbmRDbnQyID0gMDsgLy93aW5kaW5nIGNvdW50IG9mIHRoZSBvcHBvc2l0ZSBwb2x5dHlwZVxuXHRcdHRoaXMuT3V0SWR4ID0gMDtcblx0XHR0aGlzLk5leHQgPSBudWxsO1xuXHRcdHRoaXMuUHJldiA9IG51bGw7XG5cdFx0dGhpcy5OZXh0SW5MTUwgPSBudWxsO1xuXHRcdHRoaXMuTmV4dEluQUVMID0gbnVsbDtcblx0XHR0aGlzLlByZXZJbkFFTCA9IG51bGw7XG5cdFx0dGhpcy5OZXh0SW5TRUwgPSBudWxsO1xuXHRcdHRoaXMuUHJldkluU0VMID0gbnVsbDtcblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5JbnRlcnNlY3ROb2RlID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRoaXMuRWRnZTEgPSBudWxsO1xuXHRcdHRoaXMuRWRnZTIgPSBudWxsO1xuXHRcdHRoaXMuUHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDAoKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLk15SW50ZXJzZWN0Tm9kZVNvcnQgPSBmdW5jdGlvbiAoKSB7fTtcblxuXHRDbGlwcGVyTGliLk15SW50ZXJzZWN0Tm9kZVNvcnQuQ29tcGFyZSA9IGZ1bmN0aW9uIChub2RlMSwgbm9kZTIpXG5cdHtcblx0XHR2YXIgaSA9IG5vZGUyLlB0LlkgLSBub2RlMS5QdC5ZO1xuXHRcdGlmIChpID4gMCkgcmV0dXJuIDE7XG5cdFx0ZWxzZSBpZiAoaSA8IDApIHJldHVybiAtMTtcblx0XHRlbHNlIHJldHVybiAwO1xuXHR9O1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkxvY2FsTWluaW1hID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRoaXMuWSA9IDA7XG5cdFx0dGhpcy5MZWZ0Qm91bmQgPSBudWxsO1xuXHRcdHRoaXMuUmlnaHRCb3VuZCA9IG51bGw7XG5cdFx0dGhpcy5OZXh0ID0gbnVsbDtcblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5TY2FuYmVhbSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLlkgPSAwO1xuXHRcdHRoaXMuTmV4dCA9IG51bGw7XG5cdH07XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuTWF4aW1hID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRoaXMuWCA9IDA7XG5cdFx0dGhpcy5OZXh0ID0gbnVsbDtcblx0XHR0aGlzLlByZXYgPSBudWxsO1xuXHR9O1xuXG5cdC8vT3V0UmVjOiBjb250YWlucyBhIHBhdGggaW4gdGhlIGNsaXBwaW5nIHNvbHV0aW9uLiBFZGdlcyBpbiB0aGUgQUVMIHdpbGxcblx0Ly9jYXJyeSBhIHBvaW50ZXIgdG8gYW4gT3V0UmVjIHdoZW4gdGhleSBhcmUgcGFydCBvZiB0aGUgY2xpcHBpbmcgc29sdXRpb24uXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLk91dFJlYyA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLklkeCA9IDA7XG5cdFx0dGhpcy5Jc0hvbGUgPSBmYWxzZTtcblx0XHR0aGlzLklzT3BlbiA9IGZhbHNlO1xuXHRcdHRoaXMuRmlyc3RMZWZ0ID0gbnVsbDsgLy9zZWUgY29tbWVudHMgaW4gY2xpcHBlci5wYXNcblx0XHR0aGlzLlB0cyA9IG51bGw7XG5cdFx0dGhpcy5Cb3R0b21QdCA9IG51bGw7XG5cdFx0dGhpcy5Qb2x5Tm9kZSA9IG51bGw7XG5cdH07XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuT3V0UHQgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dGhpcy5JZHggPSAwO1xuXHRcdHRoaXMuUHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDAoKTtcblx0XHR0aGlzLk5leHQgPSBudWxsO1xuXHRcdHRoaXMuUHJldiA9IG51bGw7XG5cdH07XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuSm9pbiA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLk91dFB0MSA9IG51bGw7XG5cdFx0dGhpcy5PdXRQdDIgPSBudWxsO1xuXHRcdHRoaXMuT2ZmUHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDAoKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRoaXMubV9NaW5pbWFMaXN0ID0gbnVsbDtcblx0XHR0aGlzLm1fQ3VycmVudExNID0gbnVsbDtcblx0XHR0aGlzLm1fZWRnZXMgPSBuZXcgQXJyYXkoKTtcblx0XHR0aGlzLm1fVXNlRnVsbFJhbmdlID0gZmFsc2U7XG5cdFx0dGhpcy5tX0hhc09wZW5QYXRocyA9IGZhbHNlO1xuXHRcdHRoaXMuUHJlc2VydmVDb2xsaW5lYXIgPSBmYWxzZTtcblx0XHR0aGlzLm1fU2NhbmJlYW0gPSBudWxsO1xuXHRcdHRoaXMubV9Qb2x5T3V0cyA9IG51bGw7XG5cdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gbnVsbDtcblx0fTtcblxuXHQvLyBSYW5nZXMgYXJlIGluIG9yaWdpbmFsIEMjIHRvbyBoaWdoIGZvciBKYXZhc2NyaXB0IChpbiBjdXJyZW50IHN0YXRlIDIwMTMgc2VwdGVtYmVyKTpcblx0Ly8gcHJvdGVjdGVkIGNvbnN0IGRvdWJsZSBob3Jpem9udGFsID0gLTMuNEUrMzg7XG5cdC8vIGludGVybmFsIGNvbnN0IGNJbnQgbG9SYW5nZSA9IDB4M0ZGRkZGRkY7IC8vID0gMTA3Mzc0MTgyMyA9IHNxcnQoMl42MyAtMSkvMlxuXHQvLyBpbnRlcm5hbCBjb25zdCBjSW50IGhpUmFuZ2UgPSAweDNGRkZGRkZGRkZGRkZGRkZMOyAvLyA9IDQ2MTE2ODYwMTg0MjczODc5MDMgPSBzcXJ0KDJeMTI3IC0xKS8yXG5cdC8vIFNvIGhhZCB0byBhZGp1c3QgdGhlbSB0byBtb3JlIHN1aXRhYmxlIGZvciBKYXZhc2NyaXB0LlxuXHQvLyBJZiBKUyBzb21lIGRheSBzdXBwb3J0cyB0cnVseSA2NC1iaXQgaW50ZWdlcnMsIHRoZW4gdGhlc2UgcmFuZ2VzIGNhbiBiZSBhcyBpbiBDI1xuXHQvLyBhbmQgYmlnaW50ZWdlciBsaWJyYXJ5IGNhbiBiZSBtb3JlIHNpbXBsZXIgKGFzIHRoZW4gMTI4Yml0IGNhbiBiZSByZXByZXNlbnRlZCBhcyB0d28gNjRiaXQgbnVtYmVycylcblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsID0gLTkwMDcxOTkyNTQ3NDA5OTI7IC8vLTJeNTNcblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwID0gLTI7XG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuVW5hc3NpZ25lZCA9IC0xO1xuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnRvbGVyYW5jZSA9IDFFLTIwO1xuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmxvUmFuZ2UgPSA0NzQ1MzEzMjsgLy8gc3FydCgyXjUzIC0xKS8yXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaGlSYW5nZSA9IDQ1MDM1OTk2MjczNzA0OTU7IC8vIHNxcnQoMl4xMDYgLTEpLzJcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLm5lYXJfemVybyA9IGZ1bmN0aW9uICh2YWwpXG5cdHtcblx0XHRyZXR1cm4gKHZhbCA+IC1DbGlwcGVyTGliLkNsaXBwZXJCYXNlLnRvbGVyYW5jZSkgJiYgKHZhbCA8IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UudG9sZXJhbmNlKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbCA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0cmV0dXJuIGUuRGVsdGEuWSA9PT0gMDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Qb2ludElzVmVydGV4ID0gZnVuY3Rpb24gKHB0LCBwcClcblx0e1xuXHRcdHZhciBwcDIgPSBwcDtcblx0XHRkbyB7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShwcDIuUHQsIHB0KSlcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRwcDIgPSBwcDIuTmV4dDtcblx0XHR9XG5cdFx0d2hpbGUgKHBwMiAhPT0gcHApXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlBvaW50T25MaW5lU2VnbWVudCA9IGZ1bmN0aW9uIChwdCwgbGluZVB0MSwgbGluZVB0MiwgVXNlRnVsbFJhbmdlKVxuXHR7XG5cdFx0aWYgKFVzZUZ1bGxSYW5nZSlcblx0XHRcdHJldHVybiAoKHB0LlggPT09IGxpbmVQdDEuWCkgJiYgKHB0LlkgPT09IGxpbmVQdDEuWSkpIHx8XG5cdFx0XHRcdCgocHQuWCA9PT0gbGluZVB0Mi5YKSAmJiAocHQuWSA9PT0gbGluZVB0Mi5ZKSkgfHxcblx0XHRcdFx0KCgocHQuWCA+IGxpbmVQdDEuWCkgPT09IChwdC5YIDwgbGluZVB0Mi5YKSkgJiZcblx0XHRcdFx0XHQoKHB0LlkgPiBsaW5lUHQxLlkpID09PSAocHQuWSA8IGxpbmVQdDIuWSkpICYmXG5cdFx0XHRcdFx0KEludDEyOC5vcF9FcXVhbGl0eShJbnQxMjguSW50MTI4TXVsKChwdC5YIC0gbGluZVB0MS5YKSwgKGxpbmVQdDIuWSAtIGxpbmVQdDEuWSkpLFxuXHRcdFx0XHRcdFx0SW50MTI4LkludDEyOE11bCgobGluZVB0Mi5YIC0gbGluZVB0MS5YKSwgKHB0LlkgLSBsaW5lUHQxLlkpKSkpKTtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gKChwdC5YID09PSBsaW5lUHQxLlgpICYmIChwdC5ZID09PSBsaW5lUHQxLlkpKSB8fCAoKHB0LlggPT09IGxpbmVQdDIuWCkgJiYgKHB0LlkgPT09IGxpbmVQdDIuWSkpIHx8ICgoKHB0LlggPiBsaW5lUHQxLlgpID09PSAocHQuWCA8IGxpbmVQdDIuWCkpICYmICgocHQuWSA+IGxpbmVQdDEuWSkgPT09IChwdC5ZIDwgbGluZVB0Mi5ZKSkgJiYgKChwdC5YIC0gbGluZVB0MS5YKSAqIChsaW5lUHQyLlkgLSBsaW5lUHQxLlkpID09PSAobGluZVB0Mi5YIC0gbGluZVB0MS5YKSAqIChwdC5ZIC0gbGluZVB0MS5ZKSkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlBvaW50T25Qb2x5Z29uID0gZnVuY3Rpb24gKHB0LCBwcCwgVXNlRnVsbFJhbmdlKVxuXHR7XG5cdFx0dmFyIHBwMiA9IHBwO1xuXHRcdHdoaWxlICh0cnVlKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLlBvaW50T25MaW5lU2VnbWVudChwdCwgcHAyLlB0LCBwcDIuTmV4dC5QdCwgVXNlRnVsbFJhbmdlKSlcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRwcDIgPSBwcDIuTmV4dDtcblx0XHRcdGlmIChwcDIgPT09IHBwKVxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlNsb3Blc0VxdWFsID0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR2YXIgYSA9IGFyZ3VtZW50cyxcblx0XHRcdGFsZW4gPSBhLmxlbmd0aDtcblx0XHR2YXIgZTEsIGUyLCBwdDEsIHB0MiwgcHQzLCBwdDQsIFVzZUZ1bGxSYW5nZTtcblx0XHRpZiAoYWxlbiA9PT0gMykgLy8gZnVuY3Rpb24gKGUxLCBlMiwgVXNlRnVsbFJhbmdlKVxuXHRcdHtcblx0XHRcdGUxID0gYVswXTtcblx0XHRcdGUyID0gYVsxXTtcblx0XHRcdFVzZUZ1bGxSYW5nZSA9IGFbMl07XG5cdFx0XHRpZiAoVXNlRnVsbFJhbmdlKVxuXHRcdFx0XHRyZXR1cm4gSW50MTI4Lm9wX0VxdWFsaXR5KEludDEyOC5JbnQxMjhNdWwoZTEuRGVsdGEuWSwgZTIuRGVsdGEuWCksIEludDEyOC5JbnQxMjhNdWwoZTEuRGVsdGEuWCwgZTIuRGVsdGEuWSkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DYXN0X0ludDY0KChlMS5EZWx0YS5ZKSAqIChlMi5EZWx0YS5YKSkgPT09IENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCgoZTEuRGVsdGEuWCkgKiAoZTIuRGVsdGEuWSkpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChhbGVuID09PSA0KSAvLyBmdW5jdGlvbiAocHQxLCBwdDIsIHB0MywgVXNlRnVsbFJhbmdlKVxuXHRcdHtcblx0XHRcdHB0MSA9IGFbMF07XG5cdFx0XHRwdDIgPSBhWzFdO1xuXHRcdFx0cHQzID0gYVsyXTtcblx0XHRcdFVzZUZ1bGxSYW5nZSA9IGFbM107XG5cdFx0XHRpZiAoVXNlRnVsbFJhbmdlKVxuXHRcdFx0XHRyZXR1cm4gSW50MTI4Lm9wX0VxdWFsaXR5KEludDEyOC5JbnQxMjhNdWwocHQxLlkgLSBwdDIuWSwgcHQyLlggLSBwdDMuWCksIEludDEyOC5JbnQxMjhNdWwocHQxLlggLSBwdDIuWCwgcHQyLlkgLSBwdDMuWSkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DYXN0X0ludDY0KChwdDEuWSAtIHB0Mi5ZKSAqIChwdDIuWCAtIHB0My5YKSkgLSBDbGlwcGVyTGliLkNhc3RfSW50NjQoKHB0MS5YIC0gcHQyLlgpICogKHB0Mi5ZIC0gcHQzLlkpKSA9PT0gMDtcblx0XHR9XG5cdFx0ZWxzZSAvLyBmdW5jdGlvbiAocHQxLCBwdDIsIHB0MywgcHQ0LCBVc2VGdWxsUmFuZ2UpXG5cdFx0e1xuXHRcdFx0cHQxID0gYVswXTtcblx0XHRcdHB0MiA9IGFbMV07XG5cdFx0XHRwdDMgPSBhWzJdO1xuXHRcdFx0cHQ0ID0gYVszXTtcblx0XHRcdFVzZUZ1bGxSYW5nZSA9IGFbNF07XG5cdFx0XHRpZiAoVXNlRnVsbFJhbmdlKVxuXHRcdFx0XHRyZXR1cm4gSW50MTI4Lm9wX0VxdWFsaXR5KEludDEyOC5JbnQxMjhNdWwocHQxLlkgLSBwdDIuWSwgcHQzLlggLSBwdDQuWCksIEludDEyOC5JbnQxMjhNdWwocHQxLlggLSBwdDIuWCwgcHQzLlkgLSBwdDQuWSkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DYXN0X0ludDY0KChwdDEuWSAtIHB0Mi5ZKSAqIChwdDMuWCAtIHB0NC5YKSkgLSBDbGlwcGVyTGliLkNhc3RfSW50NjQoKHB0MS5YIC0gcHQyLlgpICogKHB0My5ZIC0gcHQ0LlkpKSA9PT0gMDtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbDMgPSBmdW5jdGlvbiAoZTEsIGUyLCBVc2VGdWxsUmFuZ2UpXG5cdHtcblx0XHRpZiAoVXNlRnVsbFJhbmdlKVxuXHRcdFx0cmV0dXJuIEludDEyOC5vcF9FcXVhbGl0eShJbnQxMjguSW50MTI4TXVsKGUxLkRlbHRhLlksIGUyLkRlbHRhLlgpLCBJbnQxMjguSW50MTI4TXVsKGUxLkRlbHRhLlgsIGUyLkRlbHRhLlkpKTtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DYXN0X0ludDY0KChlMS5EZWx0YS5ZKSAqIChlMi5EZWx0YS5YKSkgPT09IENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCgoZTEuRGVsdGEuWCkgKiAoZTIuRGVsdGEuWSkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw0ID0gZnVuY3Rpb24gKHB0MSwgcHQyLCBwdDMsIFVzZUZ1bGxSYW5nZSlcblx0e1xuXHRcdGlmIChVc2VGdWxsUmFuZ2UpXG5cdFx0XHRyZXR1cm4gSW50MTI4Lm9wX0VxdWFsaXR5KEludDEyOC5JbnQxMjhNdWwocHQxLlkgLSBwdDIuWSwgcHQyLlggLSBwdDMuWCksIEludDEyOC5JbnQxMjhNdWwocHQxLlggLSBwdDIuWCwgcHQyLlkgLSBwdDMuWSkpO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBDbGlwcGVyTGliLkNhc3RfSW50NjQoKHB0MS5ZIC0gcHQyLlkpICogKHB0Mi5YIC0gcHQzLlgpKSAtIENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCgocHQxLlggLSBwdDIuWCkgKiAocHQyLlkgLSBwdDMuWSkpID09PSAwO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw1ID0gZnVuY3Rpb24gKHB0MSwgcHQyLCBwdDMsIHB0NCwgVXNlRnVsbFJhbmdlKVxuXHR7XG5cdFx0aWYgKFVzZUZ1bGxSYW5nZSlcblx0XHRcdHJldHVybiBJbnQxMjgub3BfRXF1YWxpdHkoSW50MTI4LkludDEyOE11bChwdDEuWSAtIHB0Mi5ZLCBwdDMuWCAtIHB0NC5YKSwgSW50MTI4LkludDEyOE11bChwdDEuWCAtIHB0Mi5YLCBwdDMuWSAtIHB0NC5ZKSk7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCgocHQxLlkgLSBwdDIuWSkgKiAocHQzLlggLSBwdDQuWCkpIC0gQ2xpcHBlckxpYi5DYXN0X0ludDY0KChwdDEuWCAtIHB0Mi5YKSAqIChwdDMuWSAtIHB0NC5ZKSkgPT09IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuQ2xlYXIgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dGhpcy5EaXNwb3NlTG9jYWxNaW5pbWFMaXN0KCk7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fZWRnZXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKVxuXHRcdHtcblx0XHRcdGZvciAodmFyIGogPSAwLCBqbGVuID0gdGhpcy5tX2VkZ2VzW2ldLmxlbmd0aDsgaiA8IGpsZW47ICsrailcblx0XHRcdFx0dGhpcy5tX2VkZ2VzW2ldW2pdID0gbnVsbDtcblx0XHRcdENsaXBwZXJMaWIuQ2xlYXIodGhpcy5tX2VkZ2VzW2ldKTtcblx0XHR9XG5cdFx0Q2xpcHBlckxpYi5DbGVhcih0aGlzLm1fZWRnZXMpO1xuXHRcdHRoaXMubV9Vc2VGdWxsUmFuZ2UgPSBmYWxzZTtcblx0XHR0aGlzLm1fSGFzT3BlblBhdGhzID0gZmFsc2U7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuRGlzcG9zZUxvY2FsTWluaW1hTGlzdCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR3aGlsZSAodGhpcy5tX01pbmltYUxpc3QgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dmFyIHRtcExtID0gdGhpcy5tX01pbmltYUxpc3QuTmV4dDtcblx0XHRcdHRoaXMubV9NaW5pbWFMaXN0ID0gbnVsbDtcblx0XHRcdHRoaXMubV9NaW5pbWFMaXN0ID0gdG1wTG07XG5cdFx0fVxuXHRcdHRoaXMubV9DdXJyZW50TE0gPSBudWxsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlJhbmdlVGVzdCA9IGZ1bmN0aW9uIChQdCwgdXNlRnVsbFJhbmdlKVxuXHR7XG5cdFx0aWYgKHVzZUZ1bGxSYW5nZS5WYWx1ZSlcblx0XHR7XG5cdFx0XHRpZiAoUHQuWCA+IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaGlSYW5nZSB8fCBQdC5ZID4gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5oaVJhbmdlIHx8IC1QdC5YID4gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5oaVJhbmdlIHx8IC1QdC5ZID4gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5oaVJhbmdlKVxuXHRcdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiQ29vcmRpbmF0ZSBvdXRzaWRlIGFsbG93ZWQgcmFuZ2UgaW4gUmFuZ2VUZXN0KCkuXCIpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChQdC5YID4gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5sb1JhbmdlIHx8IFB0LlkgPiBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmxvUmFuZ2UgfHwgLVB0LlggPiBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmxvUmFuZ2UgfHwgLVB0LlkgPiBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmxvUmFuZ2UpXG5cdFx0e1xuXHRcdFx0dXNlRnVsbFJhbmdlLlZhbHVlID0gdHJ1ZTtcblx0XHRcdHRoaXMuUmFuZ2VUZXN0KFB0LCB1c2VGdWxsUmFuZ2UpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Jbml0RWRnZSA9IGZ1bmN0aW9uIChlLCBlTmV4dCwgZVByZXYsIHB0KVxuXHR7XG5cdFx0ZS5OZXh0ID0gZU5leHQ7XG5cdFx0ZS5QcmV2ID0gZVByZXY7XG5cdFx0Ly9lLkN1cnIgPSBwdDtcblx0XHRlLkN1cnIuWCA9IHB0Llg7XG5cdFx0ZS5DdXJyLlkgPSBwdC5ZO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIGUuQ3Vyci5aID0gcHQuWjtcblx0XHRlLk91dElkeCA9IC0xO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkluaXRFZGdlMiA9IGZ1bmN0aW9uIChlLCBwb2x5VHlwZSlcblx0e1xuXHRcdGlmIChlLkN1cnIuWSA+PSBlLk5leHQuQ3Vyci5ZKVxuXHRcdHtcblx0XHRcdC8vZS5Cb3QgPSBlLkN1cnI7XG5cdFx0XHRlLkJvdC5YID0gZS5DdXJyLlg7XG5cdFx0XHRlLkJvdC5ZID0gZS5DdXJyLlk7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBlLkJvdC5aID0gZS5DdXJyLlo7XG5cdFx0XHQvL2UuVG9wID0gZS5OZXh0LkN1cnI7XG5cdFx0XHRlLlRvcC5YID0gZS5OZXh0LkN1cnIuWDtcblx0XHRcdGUuVG9wLlkgPSBlLk5leHQuQ3Vyci5ZO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgZS5Ub3AuWiA9IGUuTmV4dC5DdXJyLlo7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHQvL2UuVG9wID0gZS5DdXJyO1xuXHRcdFx0ZS5Ub3AuWCA9IGUuQ3Vyci5YO1xuXHRcdFx0ZS5Ub3AuWSA9IGUuQ3Vyci5ZO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgZS5Ub3AuWiA9IGUuQ3Vyci5aO1xuXHRcdFx0Ly9lLkJvdCA9IGUuTmV4dC5DdXJyO1xuXHRcdFx0ZS5Cb3QuWCA9IGUuTmV4dC5DdXJyLlg7XG5cdFx0XHRlLkJvdC5ZID0gZS5OZXh0LkN1cnIuWTtcblx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIGUuQm90LlogPSBlLk5leHQuQ3Vyci5aO1xuXHRcdH1cblx0XHR0aGlzLlNldER4KGUpO1xuXHRcdGUuUG9seVR5cCA9IHBvbHlUeXBlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkZpbmROZXh0TG9jTWluID0gZnVuY3Rpb24gKEUpXG5cdHtcblx0XHR2YXIgRTI7XG5cdFx0Zm9yICg7Oylcblx0XHR7XG5cdFx0XHR3aGlsZSAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9JbmVxdWFsaXR5KEUuQm90LCBFLlByZXYuQm90KSB8fCBDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KEUuQ3VyciwgRS5Ub3ApKVxuXHRcdFx0XHRFID0gRS5OZXh0O1xuXHRcdFx0aWYgKEUuRHggIT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbCAmJiBFLlByZXYuRHggIT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbClcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR3aGlsZSAoRS5QcmV2LkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwpXG5cdFx0XHRcdEUgPSBFLlByZXY7XG5cdFx0XHRFMiA9IEU7XG5cdFx0XHR3aGlsZSAoRS5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsKVxuXHRcdFx0XHRFID0gRS5OZXh0O1xuXHRcdFx0aWYgKEUuVG9wLlkgPT09IEUuUHJldi5Cb3QuWSlcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHQvL2llIGp1c3QgYW4gaW50ZXJtZWRpYXRlIGhvcnouXG5cdFx0XHRpZiAoRTIuUHJldi5Cb3QuWCA8IEUuQm90LlgpXG5cdFx0XHRcdEUgPSBFMjtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRyZXR1cm4gRTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Qcm9jZXNzQm91bmQgPSBmdW5jdGlvbiAoRSwgTGVmdEJvdW5kSXNGb3J3YXJkKVxuXHR7XG5cdFx0dmFyIEVTdGFydDtcblx0XHR2YXIgUmVzdWx0ID0gRTtcblx0XHR2YXIgSG9yejtcblxuXHRcdGlmIChSZXN1bHQuT3V0SWR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNraXApXG5cdFx0e1xuXHRcdFx0Ly9jaGVjayBpZiB0aGVyZSBhcmUgZWRnZXMgYmV5b25kIHRoZSBza2lwIGVkZ2UgaW4gdGhlIGJvdW5kIGFuZCBpZiBzb1xuXHRcdFx0Ly9jcmVhdGUgYW5vdGhlciBMb2NNaW4gYW5kIGNhbGxpbmcgUHJvY2Vzc0JvdW5kIG9uY2UgbW9yZSAuLi5cblx0XHRcdEUgPSBSZXN1bHQ7XG5cdFx0XHRpZiAoTGVmdEJvdW5kSXNGb3J3YXJkKVxuXHRcdFx0e1xuXHRcdFx0XHR3aGlsZSAoRS5Ub3AuWSA9PT0gRS5OZXh0LkJvdC5ZKSBFID0gRS5OZXh0O1xuXHRcdFx0XHR3aGlsZSAoRSAhPT0gUmVzdWx0ICYmIEUuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbCkgRSA9IEUuUHJldjtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0d2hpbGUgKEUuVG9wLlkgPT09IEUuUHJldi5Cb3QuWSkgRSA9IEUuUHJldjtcblx0XHRcdFx0d2hpbGUgKEUgIT09IFJlc3VsdCAmJiBFLkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwpIEUgPSBFLk5leHQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoRSA9PT0gUmVzdWx0KVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoTGVmdEJvdW5kSXNGb3J3YXJkKSBSZXN1bHQgPSBFLk5leHQ7XG5cdFx0XHRcdGVsc2UgUmVzdWx0ID0gRS5QcmV2O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQvL3RoZXJlIGFyZSBtb3JlIGVkZ2VzIGluIHRoZSBib3VuZCBiZXlvbmQgcmVzdWx0IHN0YXJ0aW5nIHdpdGggRVxuXHRcdFx0XHRpZiAoTGVmdEJvdW5kSXNGb3J3YXJkKVxuXHRcdFx0XHRcdEUgPSBSZXN1bHQuTmV4dDtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdEUgPSBSZXN1bHQuUHJldjtcblx0XHRcdFx0dmFyIGxvY01pbiA9IG5ldyBDbGlwcGVyTGliLkxvY2FsTWluaW1hKCk7XG5cdFx0XHRcdGxvY01pbi5OZXh0ID0gbnVsbDtcblx0XHRcdFx0bG9jTWluLlkgPSBFLkJvdC5ZO1xuXHRcdFx0XHRsb2NNaW4uTGVmdEJvdW5kID0gbnVsbDtcblx0XHRcdFx0bG9jTWluLlJpZ2h0Qm91bmQgPSBFO1xuXHRcdFx0XHRFLldpbmREZWx0YSA9IDA7XG5cdFx0XHRcdFJlc3VsdCA9IHRoaXMuUHJvY2Vzc0JvdW5kKEUsIExlZnRCb3VuZElzRm9yd2FyZCk7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0TG9jYWxNaW5pbWEobG9jTWluKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBSZXN1bHQ7XG5cdFx0fVxuXG5cdFx0aWYgKEUuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbClcblx0XHR7XG5cdFx0XHQvL1dlIG5lZWQgdG8gYmUgY2FyZWZ1bCB3aXRoIG9wZW4gcGF0aHMgYmVjYXVzZSB0aGlzIG1heSBub3QgYmUgYVxuXHRcdFx0Ly90cnVlIGxvY2FsIG1pbmltYSAoaWUgRSBtYXkgYmUgZm9sbG93aW5nIGEgc2tpcCBlZGdlKS5cblx0XHRcdC8vQWxzbywgY29uc2VjdXRpdmUgaG9yei4gZWRnZXMgbWF5IHN0YXJ0IGhlYWRpbmcgbGVmdCBiZWZvcmUgZ29pbmcgcmlnaHQuXG5cdFx0XHRpZiAoTGVmdEJvdW5kSXNGb3J3YXJkKSBFU3RhcnQgPSBFLlByZXY7XG5cdFx0XHRlbHNlIEVTdGFydCA9IEUuTmV4dDtcblxuXHRcdFx0aWYgKEVTdGFydC5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsKSAvL2llIGFuIGFkam9pbmluZyBob3Jpem9udGFsIHNraXAgZWRnZVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoRVN0YXJ0LkJvdC5YICE9PSBFLkJvdC5YICYmIEVTdGFydC5Ub3AuWCAhPT0gRS5Cb3QuWClcblx0XHRcdFx0XHR0aGlzLlJldmVyc2VIb3Jpem9udGFsKEUpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoRVN0YXJ0LkJvdC5YICE9PSBFLkJvdC5YKVxuXHRcdFx0XHR0aGlzLlJldmVyc2VIb3Jpem9udGFsKEUpO1xuXHRcdH1cblxuXHRcdEVTdGFydCA9IEU7XG5cdFx0aWYgKExlZnRCb3VuZElzRm9yd2FyZClcblx0XHR7XG5cdFx0XHR3aGlsZSAoUmVzdWx0LlRvcC5ZID09PSBSZXN1bHQuTmV4dC5Cb3QuWSAmJiBSZXN1bHQuTmV4dC5PdXRJZHggIT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcClcblx0XHRcdFx0UmVzdWx0ID0gUmVzdWx0Lk5leHQ7XG5cdFx0XHRpZiAoUmVzdWx0LkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwgJiYgUmVzdWx0Lk5leHQuT3V0SWR4ICE9PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNraXApXG5cdFx0XHR7XG5cdFx0XHRcdC8vbmI6IGF0IHRoZSB0b3Agb2YgYSBib3VuZCwgaG9yaXpvbnRhbHMgYXJlIGFkZGVkIHRvIHRoZSBib3VuZFxuXHRcdFx0XHQvL29ubHkgd2hlbiB0aGUgcHJlY2VkaW5nIGVkZ2UgYXR0YWNoZXMgdG8gdGhlIGhvcml6b250YWwncyBsZWZ0IHZlcnRleFxuXHRcdFx0XHQvL3VubGVzcyBhIFNraXAgZWRnZSBpcyBlbmNvdW50ZXJlZCB3aGVuIHRoYXQgYmVjb21lcyB0aGUgdG9wIGRpdmlkZVxuXHRcdFx0XHRIb3J6ID0gUmVzdWx0O1xuXHRcdFx0XHR3aGlsZSAoSG9yei5QcmV2LkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwpXG5cdFx0XHRcdFx0SG9yeiA9IEhvcnouUHJldjtcblx0XHRcdFx0aWYgKEhvcnouUHJldi5Ub3AuWCA+IFJlc3VsdC5OZXh0LlRvcC5YKVxuXHRcdFx0XHRcdFJlc3VsdCA9IEhvcnouUHJldjtcblx0XHRcdH1cblx0XHRcdHdoaWxlIChFICE9PSBSZXN1bHQpXG5cdFx0XHR7XG5cdFx0XHRcdEUuTmV4dEluTE1MID0gRS5OZXh0O1xuXHRcdFx0XHRpZiAoRS5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsICYmIEUgIT09IEVTdGFydCAmJiBFLkJvdC5YICE9PSBFLlByZXYuVG9wLlgpXG5cdFx0XHRcdFx0dGhpcy5SZXZlcnNlSG9yaXpvbnRhbChFKTtcblx0XHRcdFx0RSA9IEUuTmV4dDtcblx0XHRcdH1cblx0XHRcdGlmIChFLkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwgJiYgRSAhPT0gRVN0YXJ0ICYmIEUuQm90LlggIT09IEUuUHJldi5Ub3AuWClcblx0XHRcdFx0dGhpcy5SZXZlcnNlSG9yaXpvbnRhbChFKTtcblx0XHRcdFJlc3VsdCA9IFJlc3VsdC5OZXh0O1xuXHRcdFx0Ly9tb3ZlIHRvIHRoZSBlZGdlIGp1c3QgYmV5b25kIGN1cnJlbnQgYm91bmRcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHdoaWxlIChSZXN1bHQuVG9wLlkgPT09IFJlc3VsdC5QcmV2LkJvdC5ZICYmIFJlc3VsdC5QcmV2Lk91dElkeCAhPT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwKVxuXHRcdFx0XHRSZXN1bHQgPSBSZXN1bHQuUHJldjtcblx0XHRcdGlmIChSZXN1bHQuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbCAmJiBSZXN1bHQuUHJldi5PdXRJZHggIT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcClcblx0XHRcdHtcblx0XHRcdFx0SG9yeiA9IFJlc3VsdDtcblx0XHRcdFx0d2hpbGUgKEhvcnouTmV4dC5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsKVxuXHRcdFx0XHRcdEhvcnogPSBIb3J6Lk5leHQ7XG5cdFx0XHRcdGlmIChIb3J6Lk5leHQuVG9wLlggPT09IFJlc3VsdC5QcmV2LlRvcC5YIHx8IEhvcnouTmV4dC5Ub3AuWCA+IFJlc3VsdC5QcmV2LlRvcC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0UmVzdWx0ID0gSG9yei5OZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAoRSAhPT0gUmVzdWx0KVxuXHRcdFx0e1xuXHRcdFx0XHRFLk5leHRJbkxNTCA9IEUuUHJldjtcblx0XHRcdFx0aWYgKEUuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbCAmJiBFICE9PSBFU3RhcnQgJiYgRS5Cb3QuWCAhPT0gRS5OZXh0LlRvcC5YKVxuXHRcdFx0XHRcdHRoaXMuUmV2ZXJzZUhvcml6b250YWwoRSk7XG5cdFx0XHRcdEUgPSBFLlByZXY7XG5cdFx0XHR9XG5cdFx0XHRpZiAoRS5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsICYmIEUgIT09IEVTdGFydCAmJiBFLkJvdC5YICE9PSBFLk5leHQuVG9wLlgpXG5cdFx0XHRcdHRoaXMuUmV2ZXJzZUhvcml6b250YWwoRSk7XG5cdFx0XHRSZXN1bHQgPSBSZXN1bHQuUHJldjtcblx0XHRcdC8vbW92ZSB0byB0aGUgZWRnZSBqdXN0IGJleW9uZCBjdXJyZW50IGJvdW5kXG5cdFx0fVxuXG5cdFx0cmV0dXJuIFJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5BZGRQYXRoID0gZnVuY3Rpb24gKHBnLCBwb2x5VHlwZSwgQ2xvc2VkKVxuXHR7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX2xpbmVzKVxuXHRcdHtcblx0XHRcdGlmICghQ2xvc2VkICYmIHBvbHlUeXBlID09PSBDbGlwcGVyTGliLlBvbHlUeXBlLnB0Q2xpcClcblx0XHRcdFx0Q2xpcHBlckxpYi5FcnJvcihcIkFkZFBhdGg6IE9wZW4gcGF0aHMgbXVzdCBiZSBzdWJqZWN0LlwiKTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmICghQ2xvc2VkKVxuXHRcdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiQWRkUGF0aDogT3BlbiBwYXRocyBoYXZlIGJlZW4gZGlzYWJsZWQuXCIpO1xuXHRcdH1cblx0XHR2YXIgaGlnaEkgPSBwZy5sZW5ndGggLSAxO1xuXHRcdGlmIChDbG9zZWQpXG5cdFx0XHR3aGlsZSAoaGlnaEkgPiAwICYmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHBnW2hpZ2hJXSwgcGdbMF0pKSlcblx0XHRcdFx0LS1oaWdoSTtcblx0XHR3aGlsZSAoaGlnaEkgPiAwICYmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHBnW2hpZ2hJXSwgcGdbaGlnaEkgLSAxXSkpKVxuXHRcdFx0LS1oaWdoSTtcblx0XHRpZiAoKENsb3NlZCAmJiBoaWdoSSA8IDIpIHx8ICghQ2xvc2VkICYmIGhpZ2hJIDwgMSkpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0Ly9jcmVhdGUgYSBuZXcgZWRnZSBhcnJheSAuLi5cblx0XHR2YXIgZWRnZXMgPSBuZXcgQXJyYXkoKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBoaWdoSTsgaSsrKVxuXHRcdFx0ZWRnZXMucHVzaChuZXcgQ2xpcHBlckxpYi5URWRnZSgpKTtcblx0XHR2YXIgSXNGbGF0ID0gdHJ1ZTtcblx0XHQvLzEuIEJhc2ljIChmaXJzdCkgZWRnZSBpbml0aWFsaXphdGlvbiAuLi5cblxuXHRcdC8vZWRnZXNbMV0uQ3VyciA9IHBnWzFdO1xuXHRcdGVkZ2VzWzFdLkN1cnIuWCA9IHBnWzFdLlg7XG5cdFx0ZWRnZXNbMV0uQ3Vyci5ZID0gcGdbMV0uWTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBlZGdlc1sxXS5DdXJyLlogPSBwZ1sxXS5aO1xuXG5cdFx0dmFyICQxID0ge1xuXHRcdFx0VmFsdWU6IHRoaXMubV9Vc2VGdWxsUmFuZ2Vcblx0XHR9O1xuXG5cdFx0dGhpcy5SYW5nZVRlc3QocGdbMF0sICQxKTtcblx0XHR0aGlzLm1fVXNlRnVsbFJhbmdlID0gJDEuVmFsdWU7XG5cblx0XHQkMS5WYWx1ZSA9IHRoaXMubV9Vc2VGdWxsUmFuZ2U7XG5cdFx0dGhpcy5SYW5nZVRlc3QocGdbaGlnaEldLCAkMSk7XG5cdFx0dGhpcy5tX1VzZUZ1bGxSYW5nZSA9ICQxLlZhbHVlO1xuXG5cdFx0dGhpcy5Jbml0RWRnZShlZGdlc1swXSwgZWRnZXNbMV0sIGVkZ2VzW2hpZ2hJXSwgcGdbMF0pO1xuXHRcdHRoaXMuSW5pdEVkZ2UoZWRnZXNbaGlnaEldLCBlZGdlc1swXSwgZWRnZXNbaGlnaEkgLSAxXSwgcGdbaGlnaEldKTtcblx0XHRmb3IgKHZhciBpID0gaGlnaEkgLSAxOyBpID49IDE7IC0taSlcblx0XHR7XG5cdFx0XHQkMS5WYWx1ZSA9IHRoaXMubV9Vc2VGdWxsUmFuZ2U7XG5cdFx0XHR0aGlzLlJhbmdlVGVzdChwZ1tpXSwgJDEpO1xuXHRcdFx0dGhpcy5tX1VzZUZ1bGxSYW5nZSA9ICQxLlZhbHVlO1xuXG5cdFx0XHR0aGlzLkluaXRFZGdlKGVkZ2VzW2ldLCBlZGdlc1tpICsgMV0sIGVkZ2VzW2kgLSAxXSwgcGdbaV0pO1xuXHRcdH1cblxuXHRcdHZhciBlU3RhcnQgPSBlZGdlc1swXTtcblx0XHQvLzIuIFJlbW92ZSBkdXBsaWNhdGUgdmVydGljZXMsIGFuZCAod2hlbiBjbG9zZWQpIGNvbGxpbmVhciBlZGdlcyAuLi5cblx0XHR2YXIgRSA9IGVTdGFydCxcblx0XHRcdGVMb29wU3RvcCA9IGVTdGFydDtcblx0XHRmb3IgKDs7KVxuXHRcdHtcblx0XHRcdC8vY29uc29sZS5sb2coRS5OZXh0LCBlU3RhcnQpO1xuXHRcdFx0Ly9uYjogYWxsb3dzIG1hdGNoaW5nIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIHdoZW4gbm90IENsb3NlZCAuLi5cblx0XHRcdGlmIChFLkN1cnIgPT09IEUuTmV4dC5DdXJyICYmIChDbG9zZWQgfHwgRS5OZXh0ICE9PSBlU3RhcnQpKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoRSA9PT0gRS5OZXh0KVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRpZiAoRSA9PT0gZVN0YXJ0KVxuXHRcdFx0XHRcdGVTdGFydCA9IEUuTmV4dDtcblx0XHRcdFx0RSA9IHRoaXMuUmVtb3ZlRWRnZShFKTtcblx0XHRcdFx0ZUxvb3BTdG9wID0gRTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoRS5QcmV2ID09PSBFLk5leHQpXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZWxzZSBpZiAoQ2xvc2VkICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw0KEUuUHJldi5DdXJyLCBFLkN1cnIsIEUuTmV4dC5DdXJyLCB0aGlzLm1fVXNlRnVsbFJhbmdlKSAmJiAoIXRoaXMuUHJlc2VydmVDb2xsaW5lYXIgfHwgIXRoaXMuUHQySXNCZXR3ZWVuUHQxQW5kUHQzKEUuUHJldi5DdXJyLCBFLkN1cnIsIEUuTmV4dC5DdXJyKSkpXG5cdFx0XHR7XG5cdFx0XHRcdC8vQ29sbGluZWFyIGVkZ2VzIGFyZSBhbGxvd2VkIGZvciBvcGVuIHBhdGhzIGJ1dCBpbiBjbG9zZWQgcGF0aHNcblx0XHRcdFx0Ly90aGUgZGVmYXVsdCBpcyB0byBtZXJnZSBhZGphY2VudCBjb2xsaW5lYXIgZWRnZXMgaW50byBhIHNpbmdsZSBlZGdlLlxuXHRcdFx0XHQvL0hvd2V2ZXIsIGlmIHRoZSBQcmVzZXJ2ZUNvbGxpbmVhciBwcm9wZXJ0eSBpcyBlbmFibGVkLCBvbmx5IG92ZXJsYXBwaW5nXG5cdFx0XHRcdC8vY29sbGluZWFyIGVkZ2VzIChpZSBzcGlrZXMpIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIGNsb3NlZCBwYXRocy5cblx0XHRcdFx0aWYgKEUgPT09IGVTdGFydClcblx0XHRcdFx0XHRlU3RhcnQgPSBFLk5leHQ7XG5cdFx0XHRcdEUgPSB0aGlzLlJlbW92ZUVkZ2UoRSk7XG5cdFx0XHRcdEUgPSBFLlByZXY7XG5cdFx0XHRcdGVMb29wU3RvcCA9IEU7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0RSA9IEUuTmV4dDtcblx0XHRcdGlmICgoRSA9PT0gZUxvb3BTdG9wKSB8fCAoIUNsb3NlZCAmJiBFLk5leHQgPT09IGVTdGFydCkpIGJyZWFrO1xuXHRcdH1cblx0XHRpZiAoKCFDbG9zZWQgJiYgKEUgPT09IEUuTmV4dCkpIHx8IChDbG9zZWQgJiYgKEUuUHJldiA9PT0gRS5OZXh0KSkpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0aWYgKCFDbG9zZWQpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX0hhc09wZW5QYXRocyA9IHRydWU7XG5cdFx0XHRlU3RhcnQuUHJldi5PdXRJZHggPSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNraXA7XG5cdFx0fVxuXHRcdC8vMy4gRG8gc2Vjb25kIHN0YWdlIG9mIGVkZ2UgaW5pdGlhbGl6YXRpb24gLi4uXG5cdFx0RSA9IGVTdGFydDtcblx0XHRkbyB7XG5cdFx0XHR0aGlzLkluaXRFZGdlMihFLCBwb2x5VHlwZSk7XG5cdFx0XHRFID0gRS5OZXh0O1xuXHRcdFx0aWYgKElzRmxhdCAmJiBFLkN1cnIuWSAhPT0gZVN0YXJ0LkN1cnIuWSlcblx0XHRcdFx0SXNGbGF0ID0gZmFsc2U7XG5cdFx0fVxuXHRcdHdoaWxlIChFICE9PSBlU3RhcnQpXG5cdFx0Ly80LiBGaW5hbGx5LCBhZGQgZWRnZSBib3VuZHMgdG8gTG9jYWxNaW5pbWEgbGlzdCAuLi5cblx0XHQvL1RvdGFsbHkgZmxhdCBwYXRocyBtdXN0IGJlIGhhbmRsZWQgZGlmZmVyZW50bHkgd2hlbiBhZGRpbmcgdGhlbVxuXHRcdC8vdG8gTG9jYWxNaW5pbWEgbGlzdCB0byBhdm9pZCBlbmRsZXNzIGxvb3BzIGV0YyAuLi5cblx0XHRpZiAoSXNGbGF0KVxuXHRcdHtcblx0XHRcdGlmIChDbG9zZWQpXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0RS5QcmV2Lk91dElkeCA9IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcDtcblxuXHRcdFx0dmFyIGxvY01pbiA9IG5ldyBDbGlwcGVyTGliLkxvY2FsTWluaW1hKCk7XG5cdFx0XHRsb2NNaW4uTmV4dCA9IG51bGw7XG5cdFx0XHRsb2NNaW4uWSA9IEUuQm90Llk7XG5cdFx0XHRsb2NNaW4uTGVmdEJvdW5kID0gbnVsbDtcblx0XHRcdGxvY01pbi5SaWdodEJvdW5kID0gRTtcblx0XHRcdGxvY01pbi5SaWdodEJvdW5kLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzUmlnaHQ7XG5cdFx0XHRsb2NNaW4uUmlnaHRCb3VuZC5XaW5kRGVsdGEgPSAwO1xuXG5cdFx0XHRmb3IgKDs7KVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoRS5Cb3QuWCAhPT0gRS5QcmV2LlRvcC5YKSB0aGlzLlJldmVyc2VIb3Jpem9udGFsKEUpO1xuXHRcdFx0XHRpZiAoRS5OZXh0Lk91dElkeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwKSBicmVhaztcblx0XHRcdFx0RS5OZXh0SW5MTUwgPSBFLk5leHQ7XG5cdFx0XHRcdEUgPSBFLk5leHQ7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLkluc2VydExvY2FsTWluaW1hKGxvY01pbik7XG5cdFx0XHR0aGlzLm1fZWRnZXMucHVzaChlZGdlcyk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0dGhpcy5tX2VkZ2VzLnB1c2goZWRnZXMpO1xuXHRcdHZhciBsZWZ0Qm91bmRJc0ZvcndhcmQ7XG5cdFx0dmFyIEVNaW4gPSBudWxsO1xuXG5cdFx0Ly93b3JrYXJvdW5kIHRvIGF2b2lkIGFuIGVuZGxlc3MgbG9vcCBpbiB0aGUgd2hpbGUgbG9vcCBiZWxvdyB3aGVuXG5cdFx0Ly9vcGVuIHBhdGhzIGhhdmUgbWF0Y2hpbmcgc3RhcnQgYW5kIGVuZCBwb2ludHMgLi4uXG5cdFx0aWYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkoRS5QcmV2LkJvdCwgRS5QcmV2LlRvcCkpXG5cdFx0XHRFID0gRS5OZXh0O1xuXG5cdFx0Zm9yICg7Oylcblx0XHR7XG5cdFx0XHRFID0gdGhpcy5GaW5kTmV4dExvY01pbihFKTtcblx0XHRcdGlmIChFID09PSBFTWluKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGVsc2UgaWYgKEVNaW4gPT09IG51bGwpXG5cdFx0XHRcdEVNaW4gPSBFO1xuXHRcdFx0Ly9FIGFuZCBFLlByZXYgbm93IHNoYXJlIGEgbG9jYWwgbWluaW1hIChsZWZ0IGFsaWduZWQgaWYgaG9yaXpvbnRhbCkuXG5cdFx0XHQvL0NvbXBhcmUgdGhlaXIgc2xvcGVzIHRvIGZpbmQgd2hpY2ggc3RhcnRzIHdoaWNoIGJvdW5kIC4uLlxuXHRcdFx0dmFyIGxvY01pbiA9IG5ldyBDbGlwcGVyTGliLkxvY2FsTWluaW1hKCk7XG5cdFx0XHRsb2NNaW4uTmV4dCA9IG51bGw7XG5cdFx0XHRsb2NNaW4uWSA9IEUuQm90Llk7XG5cdFx0XHRpZiAoRS5EeCA8IEUuUHJldi5EeClcblx0XHRcdHtcblx0XHRcdFx0bG9jTWluLkxlZnRCb3VuZCA9IEUuUHJldjtcblx0XHRcdFx0bG9jTWluLlJpZ2h0Qm91bmQgPSBFO1xuXHRcdFx0XHRsZWZ0Qm91bmRJc0ZvcndhcmQgPSBmYWxzZTtcblx0XHRcdFx0Ly9RLm5leHRJbkxNTCA9IFEucHJldlxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRsb2NNaW4uTGVmdEJvdW5kID0gRTtcblx0XHRcdFx0bG9jTWluLlJpZ2h0Qm91bmQgPSBFLlByZXY7XG5cdFx0XHRcdGxlZnRCb3VuZElzRm9yd2FyZCA9IHRydWU7XG5cdFx0XHRcdC8vUS5uZXh0SW5MTUwgPSBRLm5leHRcblx0XHRcdH1cblx0XHRcdGxvY01pbi5MZWZ0Qm91bmQuU2lkZSA9IENsaXBwZXJMaWIuRWRnZVNpZGUuZXNMZWZ0O1xuXHRcdFx0bG9jTWluLlJpZ2h0Qm91bmQuU2lkZSA9IENsaXBwZXJMaWIuRWRnZVNpZGUuZXNSaWdodDtcblx0XHRcdGlmICghQ2xvc2VkKVxuXHRcdFx0XHRsb2NNaW4uTGVmdEJvdW5kLldpbmREZWx0YSA9IDA7XG5cdFx0XHRlbHNlIGlmIChsb2NNaW4uTGVmdEJvdW5kLk5leHQgPT09IGxvY01pbi5SaWdodEJvdW5kKVxuXHRcdFx0XHRsb2NNaW4uTGVmdEJvdW5kLldpbmREZWx0YSA9IC0xO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRsb2NNaW4uTGVmdEJvdW5kLldpbmREZWx0YSA9IDE7XG5cdFx0XHRsb2NNaW4uUmlnaHRCb3VuZC5XaW5kRGVsdGEgPSAtbG9jTWluLkxlZnRCb3VuZC5XaW5kRGVsdGE7XG5cdFx0XHRFID0gdGhpcy5Qcm9jZXNzQm91bmQobG9jTWluLkxlZnRCb3VuZCwgbGVmdEJvdW5kSXNGb3J3YXJkKTtcblx0XHRcdGlmIChFLk91dElkeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwKVxuXHRcdFx0XHRFID0gdGhpcy5Qcm9jZXNzQm91bmQoRSwgbGVmdEJvdW5kSXNGb3J3YXJkKTtcblx0XHRcdHZhciBFMiA9IHRoaXMuUHJvY2Vzc0JvdW5kKGxvY01pbi5SaWdodEJvdW5kLCAhbGVmdEJvdW5kSXNGb3J3YXJkKTtcblx0XHRcdGlmIChFMi5PdXRJZHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcCkgRTIgPSB0aGlzLlByb2Nlc3NCb3VuZChFMiwgIWxlZnRCb3VuZElzRm9yd2FyZCk7XG5cdFx0XHRpZiAobG9jTWluLkxlZnRCb3VuZC5PdXRJZHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcClcblx0XHRcdFx0bG9jTWluLkxlZnRCb3VuZCA9IG51bGw7XG5cdFx0XHRlbHNlIGlmIChsb2NNaW4uUmlnaHRCb3VuZC5PdXRJZHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcClcblx0XHRcdFx0bG9jTWluLlJpZ2h0Qm91bmQgPSBudWxsO1xuXHRcdFx0dGhpcy5JbnNlcnRMb2NhbE1pbmltYShsb2NNaW4pO1xuXHRcdFx0aWYgKCFsZWZ0Qm91bmRJc0ZvcndhcmQpXG5cdFx0XHRcdEUgPSBFMjtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuQWRkUGF0aHMgPSBmdW5jdGlvbiAocHBnLCBwb2x5VHlwZSwgY2xvc2VkKVxuXHR7XG5cdFx0Ly8gIGNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwiKTtcblx0XHQvLyAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocHBnKSk7XG5cdFx0dmFyIHJlc3VsdCA9IGZhbHNlO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gcHBnLmxlbmd0aDsgaSA8IGlsZW47ICsraSlcblx0XHRcdGlmICh0aGlzLkFkZFBhdGgocHBnW2ldLCBwb2x5VHlwZSwgY2xvc2VkKSlcblx0XHRcdFx0cmVzdWx0ID0gdHJ1ZTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlB0MklzQmV0d2VlblB0MUFuZFB0MyA9IGZ1bmN0aW9uIChwdDEsIHB0MiwgcHQzKVxuXHR7XG5cdFx0aWYgKChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHB0MSwgcHQzKSkgfHwgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocHQxLCBwdDIpKSB8fCAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShwdDMsIHB0MikpKVxuXG5cdFx0XHQvL2lmICgocHQxID09IHB0MykgfHwgKHB0MSA9PSBwdDIpIHx8IChwdDMgPT0gcHQyKSlcblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdGVsc2UgaWYgKHB0MS5YICE9PSBwdDMuWClcblx0XHRcdHJldHVybiAocHQyLlggPiBwdDEuWCkgPT09IChwdDIuWCA8IHB0My5YKTtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gKHB0Mi5ZID4gcHQxLlkpID09PSAocHQyLlkgPCBwdDMuWSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuUmVtb3ZlRWRnZSA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0Ly9yZW1vdmVzIGUgZnJvbSBkb3VibGVfbGlua2VkX2xpc3QgKGJ1dCB3aXRob3V0IHJlbW92aW5nIGZyb20gbWVtb3J5KVxuXHRcdGUuUHJldi5OZXh0ID0gZS5OZXh0O1xuXHRcdGUuTmV4dC5QcmV2ID0gZS5QcmV2O1xuXHRcdHZhciByZXN1bHQgPSBlLk5leHQ7XG5cdFx0ZS5QcmV2ID0gbnVsbDsgLy9mbGFnIGFzIHJlbW92ZWQgKHNlZSBDbGlwcGVyQmFzZS5DbGVhcilcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlNldER4ID0gZnVuY3Rpb24gKGUpXG5cdHtcblx0XHRlLkRlbHRhLlggPSAoZS5Ub3AuWCAtIGUuQm90LlgpO1xuXHRcdGUuRGVsdGEuWSA9IChlLlRvcC5ZIC0gZS5Cb3QuWSk7XG5cdFx0aWYgKGUuRGVsdGEuWSA9PT0gMCkgZS5EeCA9IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbDtcblx0XHRlbHNlIGUuRHggPSAoZS5EZWx0YS5YKSAvIChlLkRlbHRhLlkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkluc2VydExvY2FsTWluaW1hID0gZnVuY3Rpb24gKG5ld0xtKVxuXHR7XG5cdFx0aWYgKHRoaXMubV9NaW5pbWFMaXN0ID09PSBudWxsKVxuXHRcdHtcblx0XHRcdHRoaXMubV9NaW5pbWFMaXN0ID0gbmV3TG07XG5cdFx0fVxuXHRcdGVsc2UgaWYgKG5ld0xtLlkgPj0gdGhpcy5tX01pbmltYUxpc3QuWSlcblx0XHR7XG5cdFx0XHRuZXdMbS5OZXh0ID0gdGhpcy5tX01pbmltYUxpc3Q7XG5cdFx0XHR0aGlzLm1fTWluaW1hTGlzdCA9IG5ld0xtO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIHRtcExtID0gdGhpcy5tX01pbmltYUxpc3Q7XG5cdFx0XHR3aGlsZSAodG1wTG0uTmV4dCAhPT0gbnVsbCAmJiAobmV3TG0uWSA8IHRtcExtLk5leHQuWSkpXG5cdFx0XHRcdHRtcExtID0gdG1wTG0uTmV4dDtcblx0XHRcdG5ld0xtLk5leHQgPSB0bXBMbS5OZXh0O1xuXHRcdFx0dG1wTG0uTmV4dCA9IG5ld0xtO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Qb3BMb2NhbE1pbmltYSA9IGZ1bmN0aW9uIChZLCBjdXJyZW50KVxuXHR7XG5cdFx0Y3VycmVudC52ID0gdGhpcy5tX0N1cnJlbnRMTTtcblx0XHRpZiAodGhpcy5tX0N1cnJlbnRMTSAhPT0gbnVsbCAmJiB0aGlzLm1fQ3VycmVudExNLlkgPT09IFkpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX0N1cnJlbnRMTSA9IHRoaXMubV9DdXJyZW50TE0uTmV4dDtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuUmV2ZXJzZUhvcml6b250YWwgPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdC8vc3dhcCBob3Jpem9udGFsIGVkZ2VzJyB0b3AgYW5kIGJvdHRvbSB4J3Mgc28gdGhleSBmb2xsb3cgdGhlIG5hdHVyYWxcblx0XHQvL3Byb2dyZXNzaW9uIG9mIHRoZSBib3VuZHMgLSBpZSBzbyB0aGVpciB4Ym90cyB3aWxsIGFsaWduIHdpdGggdGhlXG5cdFx0Ly9hZGpvaW5pbmcgbG93ZXIgZWRnZS4gW0hlbHBmdWwgaW4gdGhlIFByb2Nlc3NIb3Jpem9udGFsKCkgbWV0aG9kLl1cblx0XHR2YXIgdG1wID0gZS5Ub3AuWDtcblx0XHRlLlRvcC5YID0gZS5Cb3QuWDtcblx0XHRlLkJvdC5YID0gdG1wO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopXG5cdFx0e1xuXHRcdFx0dG1wID0gZS5Ub3AuWjtcblx0XHRcdGUuVG9wLlogPSBlLkJvdC5aO1xuXHRcdFx0ZS5Cb3QuWiA9IHRtcDtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuUmVzZXQgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dGhpcy5tX0N1cnJlbnRMTSA9IHRoaXMubV9NaW5pbWFMaXN0O1xuXHRcdGlmICh0aGlzLm1fQ3VycmVudExNID09PSBudWxsKSAvL2llIG5vdGhpbmcgdG8gcHJvY2Vzc1xuXHRcdFx0cmV0dXJuO1xuXHRcdC8vcmVzZXQgYWxsIGVkZ2VzIC4uLlxuXHRcdHRoaXMubV9TY2FuYmVhbSA9IG51bGw7XG5cdFx0dmFyIGxtID0gdGhpcy5tX01pbmltYUxpc3Q7XG5cdFx0d2hpbGUgKGxtICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdHRoaXMuSW5zZXJ0U2NhbmJlYW0obG0uWSk7XG5cdFx0XHR2YXIgZSA9IGxtLkxlZnRCb3VuZDtcblx0XHRcdGlmIChlICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHQvL2UuQ3VyciA9IGUuQm90O1xuXHRcdFx0XHRlLkN1cnIuWCA9IGUuQm90Llg7XG5cdFx0XHRcdGUuQ3Vyci5ZID0gZS5Cb3QuWTtcblx0XHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgZS5DdXJyLlogPSBlLkJvdC5aO1xuXHRcdFx0XHRlLk91dElkeCA9IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuVW5hc3NpZ25lZDtcblx0XHRcdH1cblx0XHRcdGUgPSBsbS5SaWdodEJvdW5kO1xuXHRcdFx0aWYgKGUgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdC8vZS5DdXJyID0gZS5Cb3Q7XG5cdFx0XHRcdGUuQ3Vyci5YID0gZS5Cb3QuWDtcblx0XHRcdFx0ZS5DdXJyLlkgPSBlLkJvdC5ZO1xuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBlLkN1cnIuWiA9IGUuQm90Llo7XG5cdFx0XHRcdGUuT3V0SWR4ID0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5VbmFzc2lnbmVkO1xuXHRcdFx0fVxuXHRcdFx0bG0gPSBsbS5OZXh0O1xuXHRcdH1cblx0XHR0aGlzLm1fQWN0aXZlRWRnZXMgPSBudWxsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkluc2VydFNjYW5iZWFtID0gZnVuY3Rpb24gKFkpXG5cdHtcblx0XHQvL3NpbmdsZS1saW5rZWQgbGlzdDogc29ydGVkIGRlc2NlbmRpbmcsIGlnbm9yaW5nIGR1cHMuXG5cdFx0aWYgKHRoaXMubV9TY2FuYmVhbSA9PT0gbnVsbClcblx0XHR7XG5cdFx0XHR0aGlzLm1fU2NhbmJlYW0gPSBuZXcgQ2xpcHBlckxpYi5TY2FuYmVhbSgpO1xuXHRcdFx0dGhpcy5tX1NjYW5iZWFtLk5leHQgPSBudWxsO1xuXHRcdFx0dGhpcy5tX1NjYW5iZWFtLlkgPSBZO1xuXHRcdH1cblx0XHRlbHNlIGlmIChZID4gdGhpcy5tX1NjYW5iZWFtLlkpXG5cdFx0e1xuXHRcdFx0dmFyIG5ld1NiID0gbmV3IENsaXBwZXJMaWIuU2NhbmJlYW0oKTtcblx0XHRcdG5ld1NiLlkgPSBZO1xuXHRcdFx0bmV3U2IuTmV4dCA9IHRoaXMubV9TY2FuYmVhbTtcblx0XHRcdHRoaXMubV9TY2FuYmVhbSA9IG5ld1NiO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIHNiMiA9IHRoaXMubV9TY2FuYmVhbTtcblx0XHRcdHdoaWxlIChzYjIuTmV4dCAhPT0gbnVsbCAmJiBZIDw9IHNiMi5OZXh0LlkpXG5cdFx0XHR7XG5cdFx0XHRcdHNiMiA9IHNiMi5OZXh0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKFkgPT09IHNiMi5ZKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9IC8vaWUgaWdub3JlcyBkdXBsaWNhdGVzXG5cdFx0XHR2YXIgbmV3U2IxID0gbmV3IENsaXBwZXJMaWIuU2NhbmJlYW0oKTtcblx0XHRcdG5ld1NiMS5ZID0gWTtcblx0XHRcdG5ld1NiMS5OZXh0ID0gc2IyLk5leHQ7XG5cdFx0XHRzYjIuTmV4dCA9IG5ld1NiMTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuUG9wU2NhbmJlYW0gPSBmdW5jdGlvbiAoWSlcblx0e1xuXHRcdGlmICh0aGlzLm1fU2NhbmJlYW0gPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0WS52ID0gMDtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0WS52ID0gdGhpcy5tX1NjYW5iZWFtLlk7XG5cdFx0dGhpcy5tX1NjYW5iZWFtID0gdGhpcy5tX1NjYW5iZWFtLk5leHQ7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuTG9jYWxNaW5pbWFQZW5kaW5nID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiAodGhpcy5tX0N1cnJlbnRMTSAhPT0gbnVsbCk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuQ3JlYXRlT3V0UmVjID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQ2xpcHBlckxpYi5PdXRSZWMoKTtcblx0XHRyZXN1bHQuSWR4ID0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5VbmFzc2lnbmVkO1xuXHRcdHJlc3VsdC5Jc0hvbGUgPSBmYWxzZTtcblx0XHRyZXN1bHQuSXNPcGVuID0gZmFsc2U7XG5cdFx0cmVzdWx0LkZpcnN0TGVmdCA9IG51bGw7XG5cdFx0cmVzdWx0LlB0cyA9IG51bGw7XG5cdFx0cmVzdWx0LkJvdHRvbVB0ID0gbnVsbDtcblx0XHRyZXN1bHQuUG9seU5vZGUgPSBudWxsO1xuXHRcdHRoaXMubV9Qb2x5T3V0cy5wdXNoKHJlc3VsdCk7XG5cdFx0cmVzdWx0LklkeCA9IHRoaXMubV9Qb2x5T3V0cy5sZW5ndGggLSAxO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuRGlzcG9zZU91dFJlYyA9IGZ1bmN0aW9uIChpbmRleClcblx0e1xuXHRcdHZhciBvdXRSZWMgPSB0aGlzLm1fUG9seU91dHNbaW5kZXhdO1xuXHRcdG91dFJlYy5QdHMgPSBudWxsO1xuXHRcdG91dFJlYyA9IG51bGw7XG5cdFx0dGhpcy5tX1BvbHlPdXRzW2luZGV4XSA9IG51bGw7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuVXBkYXRlRWRnZUludG9BRUwgPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdGlmIChlLk5leHRJbkxNTCA9PT0gbnVsbClcblx0XHR7XG5cdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiVXBkYXRlRWRnZUludG9BRUw6IGludmFsaWQgY2FsbFwiKTtcblx0XHR9XG5cdFx0dmFyIEFlbFByZXYgPSBlLlByZXZJbkFFTDtcblx0XHR2YXIgQWVsTmV4dCA9IGUuTmV4dEluQUVMO1xuXHRcdGUuTmV4dEluTE1MLk91dElkeCA9IGUuT3V0SWR4O1xuXHRcdGlmIChBZWxQcmV2ICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdEFlbFByZXYuTmV4dEluQUVMID0gZS5OZXh0SW5MTUw7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR0aGlzLm1fQWN0aXZlRWRnZXMgPSBlLk5leHRJbkxNTDtcblx0XHR9XG5cdFx0aWYgKEFlbE5leHQgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0QWVsTmV4dC5QcmV2SW5BRUwgPSBlLk5leHRJbkxNTDtcblx0XHR9XG5cdFx0ZS5OZXh0SW5MTUwuU2lkZSA9IGUuU2lkZTtcblx0XHRlLk5leHRJbkxNTC5XaW5kRGVsdGEgPSBlLldpbmREZWx0YTtcblx0XHRlLk5leHRJbkxNTC5XaW5kQ250ID0gZS5XaW5kQ250O1xuXHRcdGUuTmV4dEluTE1MLldpbmRDbnQyID0gZS5XaW5kQ250Mjtcblx0XHRlID0gZS5OZXh0SW5MTUw7XG5cdFx0ZS5DdXJyLlggPSBlLkJvdC5YO1xuXHRcdGUuQ3Vyci5ZID0gZS5Cb3QuWTtcblx0XHRlLlByZXZJbkFFTCA9IEFlbFByZXY7XG5cdFx0ZS5OZXh0SW5BRUwgPSBBZWxOZXh0O1xuXHRcdGlmICghQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Jc0hvcml6b250YWwoZSkpXG5cdFx0e1xuXHRcdFx0dGhpcy5JbnNlcnRTY2FuYmVhbShlLlRvcC5ZKTtcblx0XHR9XG5cdFx0cmV0dXJuIGU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuU3dhcFBvc2l0aW9uc0luQUVMID0gZnVuY3Rpb24gKGVkZ2UxLCBlZGdlMilcblx0e1xuXHRcdC8vY2hlY2sgdGhhdCBvbmUgb3Igb3RoZXIgZWRnZSBoYXNuJ3QgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZnJvbSBBRUwgLi4uXG5cdFx0aWYgKGVkZ2UxLk5leHRJbkFFTCA9PT0gZWRnZTEuUHJldkluQUVMIHx8IGVkZ2UyLk5leHRJbkFFTCA9PT0gZWRnZTIuUHJldkluQUVMKVxuXHRcdHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoZWRnZTEuTmV4dEluQUVMID09PSBlZGdlMilcblx0XHR7XG5cdFx0XHR2YXIgbmV4dCA9IGVkZ2UyLk5leHRJbkFFTDtcblx0XHRcdGlmIChuZXh0ICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHRuZXh0LlByZXZJbkFFTCA9IGVkZ2UxO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHByZXYgPSBlZGdlMS5QcmV2SW5BRUw7XG5cdFx0XHRpZiAocHJldiAhPT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0cHJldi5OZXh0SW5BRUwgPSBlZGdlMjtcblx0XHRcdH1cblx0XHRcdGVkZ2UyLlByZXZJbkFFTCA9IHByZXY7XG5cdFx0XHRlZGdlMi5OZXh0SW5BRUwgPSBlZGdlMTtcblx0XHRcdGVkZ2UxLlByZXZJbkFFTCA9IGVkZ2UyO1xuXHRcdFx0ZWRnZTEuTmV4dEluQUVMID0gbmV4dDtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoZWRnZTIuTmV4dEluQUVMID09PSBlZGdlMSlcblx0XHR7XG5cdFx0XHR2YXIgbmV4dDEgPSBlZGdlMS5OZXh0SW5BRUw7XG5cdFx0XHRpZiAobmV4dDEgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdG5leHQxLlByZXZJbkFFTCA9IGVkZ2UyO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHByZXYxID0gZWRnZTIuUHJldkluQUVMO1xuXHRcdFx0aWYgKHByZXYxICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHRwcmV2MS5OZXh0SW5BRUwgPSBlZGdlMTtcblx0XHRcdH1cblx0XHRcdGVkZ2UxLlByZXZJbkFFTCA9IHByZXYxO1xuXHRcdFx0ZWRnZTEuTmV4dEluQUVMID0gZWRnZTI7XG5cdFx0XHRlZGdlMi5QcmV2SW5BRUwgPSBlZGdlMTtcblx0XHRcdGVkZ2UyLk5leHRJbkFFTCA9IG5leHQxO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIG5leHQyID0gZWRnZTEuTmV4dEluQUVMO1xuXHRcdFx0dmFyIHByZXYyID0gZWRnZTEuUHJldkluQUVMO1xuXHRcdFx0ZWRnZTEuTmV4dEluQUVMID0gZWRnZTIuTmV4dEluQUVMO1xuXHRcdFx0aWYgKGVkZ2UxLk5leHRJbkFFTCAhPT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0ZWRnZTEuTmV4dEluQUVMLlByZXZJbkFFTCA9IGVkZ2UxO1xuXHRcdFx0fVxuXHRcdFx0ZWRnZTEuUHJldkluQUVMID0gZWRnZTIuUHJldkluQUVMO1xuXHRcdFx0aWYgKGVkZ2UxLlByZXZJbkFFTCAhPT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0ZWRnZTEuUHJldkluQUVMLk5leHRJbkFFTCA9IGVkZ2UxO1xuXHRcdFx0fVxuXHRcdFx0ZWRnZTIuTmV4dEluQUVMID0gbmV4dDI7XG5cdFx0XHRpZiAoZWRnZTIuTmV4dEluQUVMICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHRlZGdlMi5OZXh0SW5BRUwuUHJldkluQUVMID0gZWRnZTI7XG5cdFx0XHR9XG5cdFx0XHRlZGdlMi5QcmV2SW5BRUwgPSBwcmV2Mjtcblx0XHRcdGlmIChlZGdlMi5QcmV2SW5BRUwgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdGVkZ2UyLlByZXZJbkFFTC5OZXh0SW5BRUwgPSBlZGdlMjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZWRnZTEuUHJldkluQUVMID09PSBudWxsKVxuXHRcdHtcblx0XHRcdHRoaXMubV9BY3RpdmVFZGdlcyA9IGVkZ2UxO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0aWYgKGVkZ2UyLlByZXZJbkFFTCA9PT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gZWRnZTI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkRlbGV0ZUZyb21BRUwgPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdHZhciBBZWxQcmV2ID0gZS5QcmV2SW5BRUw7XG5cdFx0dmFyIEFlbE5leHQgPSBlLk5leHRJbkFFTDtcblx0XHRpZiAoQWVsUHJldiA9PT0gbnVsbCAmJiBBZWxOZXh0ID09PSBudWxsICYmIGUgIT09IHRoaXMubV9BY3RpdmVFZGdlcylcblx0XHR7XG5cdFx0XHRyZXR1cm47XG5cdFx0fSAvL2FscmVhZHkgZGVsZXRlZFxuXHRcdGlmIChBZWxQcmV2ICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdEFlbFByZXYuTmV4dEluQUVMID0gQWVsTmV4dDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHRoaXMubV9BY3RpdmVFZGdlcyA9IEFlbE5leHQ7XG5cdFx0fVxuXHRcdGlmIChBZWxOZXh0ICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdEFlbE5leHQuUHJldkluQUVMID0gQWVsUHJldjtcblx0XHR9XG5cdFx0ZS5OZXh0SW5BRUwgPSBudWxsO1xuXHRcdGUuUHJldkluQUVMID0gbnVsbDtcblx0fVxuXG5cdC8vIHB1YmxpYyBDbGlwcGVyKGludCBJbml0T3B0aW9ucyA9IDApXG5cdC8qKlxuXHQgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfVxuXHQgKi9cblx0Q2xpcHBlckxpYi5DbGlwcGVyID0gZnVuY3Rpb24gKEluaXRPcHRpb25zKVxuXHR7XG5cdFx0aWYgKHR5cGVvZiAoSW5pdE9wdGlvbnMpID09PSBcInVuZGVmaW5lZFwiKSBJbml0T3B0aW9ucyA9IDA7XG5cdFx0dGhpcy5tX1BvbHlPdXRzID0gbnVsbDtcblx0XHR0aGlzLm1fQ2xpcFR5cGUgPSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0SW50ZXJzZWN0aW9uO1xuXHRcdHRoaXMubV9TY2FuYmVhbSA9IG51bGw7XG5cdFx0dGhpcy5tX01heGltYSA9IG51bGw7XG5cdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gbnVsbDtcblx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBudWxsO1xuXHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0ID0gbnVsbDtcblx0XHR0aGlzLm1fSW50ZXJzZWN0Tm9kZUNvbXBhcmVyID0gbnVsbDtcblx0XHR0aGlzLm1fRXhlY3V0ZUxvY2tlZCA9IGZhbHNlO1xuXHRcdHRoaXMubV9DbGlwRmlsbFR5cGUgPSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRFdmVuT2RkO1xuXHRcdHRoaXMubV9TdWJqRmlsbFR5cGUgPSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRFdmVuT2RkO1xuXHRcdHRoaXMubV9Kb2lucyA9IG51bGw7XG5cdFx0dGhpcy5tX0dob3N0Sm9pbnMgPSBudWxsO1xuXHRcdHRoaXMubV9Vc2luZ1BvbHlUcmVlID0gZmFsc2U7XG5cdFx0dGhpcy5SZXZlcnNlU29sdXRpb24gPSBmYWxzZTtcblx0XHR0aGlzLlN0cmljdGx5U2ltcGxlID0gZmFsc2U7XG5cblx0XHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmNhbGwodGhpcyk7XG5cblx0XHR0aGlzLm1fU2NhbmJlYW0gPSBudWxsO1xuXHRcdHRoaXMubV9NYXhpbWEgPSBudWxsO1xuXHRcdHRoaXMubV9BY3RpdmVFZGdlcyA9IG51bGw7XG5cdFx0dGhpcy5tX1NvcnRlZEVkZ2VzID0gbnVsbDtcblx0XHR0aGlzLm1fSW50ZXJzZWN0TGlzdCA9IG5ldyBBcnJheSgpO1xuXHRcdHRoaXMubV9JbnRlcnNlY3ROb2RlQ29tcGFyZXIgPSBDbGlwcGVyTGliLk15SW50ZXJzZWN0Tm9kZVNvcnQuQ29tcGFyZTtcblx0XHR0aGlzLm1fRXhlY3V0ZUxvY2tlZCA9IGZhbHNlO1xuXHRcdHRoaXMubV9Vc2luZ1BvbHlUcmVlID0gZmFsc2U7XG5cdFx0dGhpcy5tX1BvbHlPdXRzID0gbmV3IEFycmF5KCk7XG5cdFx0dGhpcy5tX0pvaW5zID0gbmV3IEFycmF5KCk7XG5cdFx0dGhpcy5tX0dob3N0Sm9pbnMgPSBuZXcgQXJyYXkoKTtcblx0XHR0aGlzLlJldmVyc2VTb2x1dGlvbiA9ICgxICYgSW5pdE9wdGlvbnMpICE9PSAwO1xuXHRcdHRoaXMuU3RyaWN0bHlTaW1wbGUgPSAoMiAmIEluaXRPcHRpb25zKSAhPT0gMDtcblx0XHR0aGlzLlByZXNlcnZlQ29sbGluZWFyID0gKDQgJiBJbml0T3B0aW9ucykgIT09IDA7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eilcblx0XHR7XG5cdFx0XHR0aGlzLlpGaWxsRnVuY3Rpb24gPSBudWxsOyAvLyBmdW5jdGlvbiAoSW50UG9pbnQgdmVydDEsIEludFBvaW50IHZlcnQyLCByZWYgSW50UG9pbnQgaW50ZXJzZWN0UHQpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuaW9SZXZlcnNlU29sdXRpb24gPSAxO1xuXHRDbGlwcGVyTGliLkNsaXBwZXIuaW9TdHJpY3RseVNpbXBsZSA9IDI7XG5cdENsaXBwZXJMaWIuQ2xpcHBlci5pb1ByZXNlcnZlQ29sbGluZWFyID0gNDtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkNsZWFyID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdGlmICh0aGlzLm1fZWRnZXMubGVuZ3RoID09PSAwKVxuXHRcdFx0cmV0dXJuO1xuXHRcdC8vYXZvaWRzIHByb2JsZW1zIHdpdGggQ2xpcHBlckJhc2UgZGVzdHJ1Y3RvclxuXHRcdHRoaXMuRGlzcG9zZUFsbFBvbHlQdHMoKTtcblx0XHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5DbGVhci5jYWxsKHRoaXMpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSW5zZXJ0TWF4aW1hID0gZnVuY3Rpb24gKFgpXG5cdHtcblx0XHQvL2RvdWJsZS1saW5rZWQgbGlzdDogc29ydGVkIGFzY2VuZGluZywgaWdub3JpbmcgZHVwcy5cblx0XHR2YXIgbmV3TWF4ID0gbmV3IENsaXBwZXJMaWIuTWF4aW1hKCk7XG5cdFx0bmV3TWF4LlggPSBYO1xuXHRcdGlmICh0aGlzLm1fTWF4aW1hID09PSBudWxsKVxuXHRcdHtcblx0XHRcdHRoaXMubV9NYXhpbWEgPSBuZXdNYXg7XG5cdFx0XHR0aGlzLm1fTWF4aW1hLk5leHQgPSBudWxsO1xuXHRcdFx0dGhpcy5tX01heGltYS5QcmV2ID0gbnVsbDtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoWCA8IHRoaXMubV9NYXhpbWEuWClcblx0XHR7XG5cdFx0XHRuZXdNYXguTmV4dCA9IHRoaXMubV9NYXhpbWE7XG5cdFx0XHRuZXdNYXguUHJldiA9IG51bGw7XG5cdFx0XHR0aGlzLm1fTWF4aW1hID0gbmV3TWF4O1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIG0gPSB0aGlzLm1fTWF4aW1hO1xuXHRcdFx0d2hpbGUgKG0uTmV4dCAhPT0gbnVsbCAmJiBYID49IG0uTmV4dC5YKVxuXHRcdFx0e1xuXHRcdFx0XHRtID0gbS5OZXh0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKFggPT09IG0uWClcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSAvL2llIGlnbm9yZXMgZHVwbGljYXRlcyAoJiBDRyB0byBjbGVhbiB1cCBuZXdNYXgpXG5cdFx0XHQvL2luc2VydCBuZXdNYXggYmV0d2VlbiBtIGFuZCBtLk5leHQgLi4uXG5cdFx0XHRuZXdNYXguTmV4dCA9IG0uTmV4dDtcblx0XHRcdG5ld01heC5QcmV2ID0gbTtcblx0XHRcdGlmIChtLk5leHQgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdG0uTmV4dC5QcmV2ID0gbmV3TWF4O1xuXHRcdFx0fVxuXHRcdFx0bS5OZXh0ID0gbmV3TWF4O1xuXHRcdH1cblx0fTtcblxuXHQvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5FeGVjdXRlID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHZhciBhID0gYXJndW1lbnRzLFxuXHRcdFx0YWxlbiA9IGEubGVuZ3RoLFxuXHRcdFx0aXNwb2x5dHJlZSA9IGFbMV0gaW5zdGFuY2VvZiBDbGlwcGVyTGliLlBvbHlUcmVlO1xuXHRcdGlmIChhbGVuID09PSA0ICYmICFpc3BvbHl0cmVlKSAvLyBmdW5jdGlvbiAoY2xpcFR5cGUsIHNvbHV0aW9uLCBzdWJqRmlsbFR5cGUsIGNsaXBGaWxsVHlwZSlcblx0XHR7XG5cdFx0XHR2YXIgY2xpcFR5cGUgPSBhWzBdLFxuXHRcdFx0XHRzb2x1dGlvbiA9IGFbMV0sXG5cdFx0XHRcdHN1YmpGaWxsVHlwZSA9IGFbMl0sXG5cdFx0XHRcdGNsaXBGaWxsVHlwZSA9IGFbM107XG5cdFx0XHRpZiAodGhpcy5tX0V4ZWN1dGVMb2NrZWQpXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdGlmICh0aGlzLm1fSGFzT3BlblBhdGhzKVxuXHRcdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiRXJyb3I6IFBvbHlUcmVlIHN0cnVjdCBpcyBuZWVkZWQgZm9yIG9wZW4gcGF0aCBjbGlwcGluZy5cIik7XG5cdFx0XHR0aGlzLm1fRXhlY3V0ZUxvY2tlZCA9IHRydWU7XG5cdFx0XHRDbGlwcGVyTGliLkNsZWFyKHNvbHV0aW9uKTtcblx0XHRcdHRoaXMubV9TdWJqRmlsbFR5cGUgPSBzdWJqRmlsbFR5cGU7XG5cdFx0XHR0aGlzLm1fQ2xpcEZpbGxUeXBlID0gY2xpcEZpbGxUeXBlO1xuXHRcdFx0dGhpcy5tX0NsaXBUeXBlID0gY2xpcFR5cGU7XG5cdFx0XHR0aGlzLm1fVXNpbmdQb2x5VHJlZSA9IGZhbHNlO1xuXHRcdFx0dHJ5XG5cdFx0XHR7XG5cdFx0XHRcdHZhciBzdWNjZWVkZWQgPSB0aGlzLkV4ZWN1dGVJbnRlcm5hbCgpO1xuXHRcdFx0XHQvL2J1aWxkIHRoZSByZXR1cm4gcG9seWdvbnMgLi4uXG5cdFx0XHRcdGlmIChzdWNjZWVkZWQpIHRoaXMuQnVpbGRSZXN1bHQoc29sdXRpb24pO1xuXHRcdFx0fVxuXHRcdFx0ZmluYWxseVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLkRpc3Bvc2VBbGxQb2x5UHRzKCk7XG5cdFx0XHRcdHRoaXMubV9FeGVjdXRlTG9ja2VkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gc3VjY2VlZGVkO1xuXHRcdH1cblx0XHRlbHNlIGlmIChhbGVuID09PSA0ICYmIGlzcG9seXRyZWUpIC8vIGZ1bmN0aW9uIChjbGlwVHlwZSwgcG9seXRyZWUsIHN1YmpGaWxsVHlwZSwgY2xpcEZpbGxUeXBlKVxuXHRcdHtcblx0XHRcdHZhciBjbGlwVHlwZSA9IGFbMF0sXG5cdFx0XHRcdHBvbHl0cmVlID0gYVsxXSxcblx0XHRcdFx0c3ViakZpbGxUeXBlID0gYVsyXSxcblx0XHRcdFx0Y2xpcEZpbGxUeXBlID0gYVszXTtcblx0XHRcdGlmICh0aGlzLm1fRXhlY3V0ZUxvY2tlZClcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0dGhpcy5tX0V4ZWN1dGVMb2NrZWQgPSB0cnVlO1xuXHRcdFx0dGhpcy5tX1N1YmpGaWxsVHlwZSA9IHN1YmpGaWxsVHlwZTtcblx0XHRcdHRoaXMubV9DbGlwRmlsbFR5cGUgPSBjbGlwRmlsbFR5cGU7XG5cdFx0XHR0aGlzLm1fQ2xpcFR5cGUgPSBjbGlwVHlwZTtcblx0XHRcdHRoaXMubV9Vc2luZ1BvbHlUcmVlID0gdHJ1ZTtcblx0XHRcdHRyeVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgc3VjY2VlZGVkID0gdGhpcy5FeGVjdXRlSW50ZXJuYWwoKTtcblx0XHRcdFx0Ly9idWlsZCB0aGUgcmV0dXJuIHBvbHlnb25zIC4uLlxuXHRcdFx0XHRpZiAoc3VjY2VlZGVkKSB0aGlzLkJ1aWxkUmVzdWx0Mihwb2x5dHJlZSk7XG5cdFx0XHR9XG5cdFx0XHRmaW5hbGx5XG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuRGlzcG9zZUFsbFBvbHlQdHMoKTtcblx0XHRcdFx0dGhpcy5tX0V4ZWN1dGVMb2NrZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBzdWNjZWVkZWQ7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGFsZW4gPT09IDIgJiYgIWlzcG9seXRyZWUpIC8vIGZ1bmN0aW9uIChjbGlwVHlwZSwgc29sdXRpb24pXG5cdFx0e1xuXHRcdFx0dmFyIGNsaXBUeXBlID0gYVswXSxcblx0XHRcdFx0c29sdXRpb24gPSBhWzFdO1xuXHRcdFx0cmV0dXJuIHRoaXMuRXhlY3V0ZShjbGlwVHlwZSwgc29sdXRpb24sIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChhbGVuID09PSAyICYmIGlzcG9seXRyZWUpIC8vIGZ1bmN0aW9uIChjbGlwVHlwZSwgcG9seXRyZWUpXG5cdFx0e1xuXHRcdFx0dmFyIGNsaXBUeXBlID0gYVswXSxcblx0XHRcdFx0cG9seXRyZWUgPSBhWzFdO1xuXHRcdFx0cmV0dXJuIHRoaXMuRXhlY3V0ZShjbGlwVHlwZSwgcG9seXRyZWUsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkZpeEhvbGVMaW5rYWdlID0gZnVuY3Rpb24gKG91dFJlYylcblx0e1xuXHRcdC8vc2tpcCBpZiBhbiBvdXRlcm1vc3QgcG9seWdvbiBvclxuXHRcdC8vYWxyZWFkeSBhbHJlYWR5IHBvaW50cyB0byB0aGUgY29ycmVjdCBGaXJzdExlZnQgLi4uXG5cdFx0aWYgKG91dFJlYy5GaXJzdExlZnQgPT09IG51bGwgfHwgKG91dFJlYy5Jc0hvbGUgIT09IG91dFJlYy5GaXJzdExlZnQuSXNIb2xlICYmIG91dFJlYy5GaXJzdExlZnQuUHRzICE9PSBudWxsKSlcblx0XHRcdHJldHVybjtcblx0XHR2YXIgb3JmbCA9IG91dFJlYy5GaXJzdExlZnQ7XG5cdFx0d2hpbGUgKG9yZmwgIT09IG51bGwgJiYgKChvcmZsLklzSG9sZSA9PT0gb3V0UmVjLklzSG9sZSkgfHwgb3JmbC5QdHMgPT09IG51bGwpKVxuXHRcdFx0b3JmbCA9IG9yZmwuRmlyc3RMZWZ0O1xuXHRcdG91dFJlYy5GaXJzdExlZnQgPSBvcmZsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRXhlY3V0ZUludGVybmFsID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRyeVxuXHRcdHtcblx0XHRcdHRoaXMuUmVzZXQoKTtcblx0XHRcdHRoaXMubV9Tb3J0ZWRFZGdlcyA9IG51bGw7XG5cdFx0XHR0aGlzLm1fTWF4aW1hID0gbnVsbDtcblxuXHRcdFx0dmFyIGJvdFkgPSB7fSxcblx0XHRcdFx0dG9wWSA9IHt9O1xuXG5cdFx0XHRpZiAoIXRoaXMuUG9wU2NhbmJlYW0oYm90WSkpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHRoaXMuSW5zZXJ0TG9jYWxNaW5pbWFJbnRvQUVMKGJvdFkudik7XG5cdFx0XHR3aGlsZSAodGhpcy5Qb3BTY2FuYmVhbSh0b3BZKSB8fCB0aGlzLkxvY2FsTWluaW1hUGVuZGluZygpKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLlByb2Nlc3NIb3Jpem9udGFscygpO1xuXHRcdFx0XHR0aGlzLm1fR2hvc3RKb2lucy5sZW5ndGggPSAwO1xuXHRcdFx0XHRpZiAoIXRoaXMuUHJvY2Vzc0ludGVyc2VjdGlvbnModG9wWS52KSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLlByb2Nlc3NFZGdlc0F0VG9wT2ZTY2FuYmVhbSh0b3BZLnYpO1xuXHRcdFx0XHRib3RZLnYgPSB0b3BZLnY7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0TG9jYWxNaW5pbWFJbnRvQUVMKGJvdFkudik7XG5cdFx0XHR9XG5cblx0XHRcdC8vZml4IG9yaWVudGF0aW9ucyAuLi5cblx0XHRcdHZhciBvdXRSZWMsIGksIGlsZW47XG5cdFx0XHQvL2ZpeCBvcmllbnRhdGlvbnMgLi4uXG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHRcdHtcblx0XHRcdFx0b3V0UmVjID0gdGhpcy5tX1BvbHlPdXRzW2ldO1xuXHRcdFx0XHRpZiAob3V0UmVjLlB0cyA9PT0gbnVsbCB8fCBvdXRSZWMuSXNPcGVuKSBjb250aW51ZTtcblx0XHRcdFx0aWYgKChvdXRSZWMuSXNIb2xlIF4gdGhpcy5SZXZlcnNlU29sdXRpb24pID09ICh0aGlzLkFyZWEkMShvdXRSZWMpID4gMCkpXG5cdFx0XHRcdFx0dGhpcy5SZXZlcnNlUG9seVB0TGlua3Mob3V0UmVjLlB0cyk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuSm9pbkNvbW1vbkVkZ2VzKCk7XG5cblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSB0aGlzLm1fUG9seU91dHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdFx0e1xuXHRcdFx0XHRvdXRSZWMgPSB0aGlzLm1fUG9seU91dHNbaV07XG5cdFx0XHRcdGlmIChvdXRSZWMuUHRzID09PSBudWxsKVxuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRlbHNlIGlmIChvdXRSZWMuSXNPcGVuKVxuXHRcdFx0XHRcdHRoaXMuRml4dXBPdXRQb2x5bGluZShvdXRSZWMpO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0dGhpcy5GaXh1cE91dFBvbHlnb24ob3V0UmVjKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuU3RyaWN0bHlTaW1wbGUpIHRoaXMuRG9TaW1wbGVQb2x5Z29ucygpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdC8vY2F0Y2ggeyByZXR1cm4gZmFsc2U7IH1cblx0XHRmaW5hbGx5XG5cdFx0e1xuXHRcdFx0dGhpcy5tX0pvaW5zLmxlbmd0aCA9IDA7XG5cdFx0XHR0aGlzLm1fR2hvc3RKb2lucy5sZW5ndGggPSAwO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkRpc3Bvc2VBbGxQb2x5UHRzID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSlcblx0XHRcdHRoaXMuRGlzcG9zZU91dFJlYyhpKTtcblx0XHRDbGlwcGVyTGliLkNsZWFyKHRoaXMubV9Qb2x5T3V0cyk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5BZGRKb2luID0gZnVuY3Rpb24gKE9wMSwgT3AyLCBPZmZQdClcblx0e1xuXHRcdHZhciBqID0gbmV3IENsaXBwZXJMaWIuSm9pbigpO1xuXHRcdGouT3V0UHQxID0gT3AxO1xuXHRcdGouT3V0UHQyID0gT3AyO1xuXHRcdC8vai5PZmZQdCA9IE9mZlB0O1xuXHRcdGouT2ZmUHQuWCA9IE9mZlB0Llg7XG5cdFx0ai5PZmZQdC5ZID0gT2ZmUHQuWTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBqLk9mZlB0LlogPSBPZmZQdC5aO1xuXHRcdHRoaXMubV9Kb2lucy5wdXNoKGopO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuQWRkR2hvc3RKb2luID0gZnVuY3Rpb24gKE9wLCBPZmZQdClcblx0e1xuXHRcdHZhciBqID0gbmV3IENsaXBwZXJMaWIuSm9pbigpO1xuXHRcdGouT3V0UHQxID0gT3A7XG5cdFx0Ly9qLk9mZlB0ID0gT2ZmUHQ7XG5cdFx0ai5PZmZQdC5YID0gT2ZmUHQuWDtcblx0XHRqLk9mZlB0LlkgPSBPZmZQdC5ZO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIGouT2ZmUHQuWiA9IE9mZlB0Llo7XG5cdFx0dGhpcy5tX0dob3N0Sm9pbnMucHVzaChqKTtcblx0fTtcblxuXHQvL2lmIChDbGlwcGVyTGliLnVzZV94eXopXG5cdC8ve1xuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlNldFogPSBmdW5jdGlvbiAocHQsIGUxLCBlMilcblx0e1xuXHRcdGlmICh0aGlzLlpGaWxsRnVuY3Rpb24gIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0aWYgKHB0LlogIT09IDAgfHwgdGhpcy5aRmlsbEZ1bmN0aW9uID09PSBudWxsKSByZXR1cm47XG5cdFx0XHRlbHNlIGlmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHB0LCBlMS5Cb3QpKSBwdC5aID0gZTEuQm90Llo7XG5cdFx0XHRlbHNlIGlmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHB0LCBlMS5Ub3ApKSBwdC5aID0gZTEuVG9wLlo7XG5cdFx0XHRlbHNlIGlmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHB0LCBlMi5Cb3QpKSBwdC5aID0gZTIuQm90Llo7XG5cdFx0XHRlbHNlIGlmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHB0LCBlMi5Ub3ApKSBwdC5aID0gZTIuVG9wLlo7XG5cdFx0XHRlbHNlIHRoaXMuWkZpbGxGdW5jdGlvbihlMS5Cb3QsIGUxLlRvcCwgZTIuQm90LCBlMi5Ub3AsIHB0KTtcblx0XHR9XG5cdH07XG5cdC8vfVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSW5zZXJ0TG9jYWxNaW5pbWFJbnRvQUVMID0gZnVuY3Rpb24gKGJvdFkpXG5cdHtcblx0XHR2YXIgbG0gPSB7fTtcblxuXHRcdHZhciBsYjtcblx0XHR2YXIgcmI7XG5cdFx0d2hpbGUgKHRoaXMuUG9wTG9jYWxNaW5pbWEoYm90WSwgbG0pKVxuXHRcdHtcblx0XHRcdGxiID0gbG0udi5MZWZ0Qm91bmQ7XG5cdFx0XHRyYiA9IGxtLnYuUmlnaHRCb3VuZDtcblxuXHRcdFx0dmFyIE9wMSA9IG51bGw7XG5cdFx0XHRpZiAobGIgPT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0RWRnZUludG9BRUwocmIsIG51bGwpO1xuXHRcdFx0XHR0aGlzLlNldFdpbmRpbmdDb3VudChyYik7XG5cdFx0XHRcdGlmICh0aGlzLklzQ29udHJpYnV0aW5nKHJiKSlcblx0XHRcdFx0XHRPcDEgPSB0aGlzLkFkZE91dFB0KHJiLCByYi5Cb3QpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAocmIgPT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0RWRnZUludG9BRUwobGIsIG51bGwpO1xuXHRcdFx0XHR0aGlzLlNldFdpbmRpbmdDb3VudChsYik7XG5cdFx0XHRcdGlmICh0aGlzLklzQ29udHJpYnV0aW5nKGxiKSlcblx0XHRcdFx0XHRPcDEgPSB0aGlzLkFkZE91dFB0KGxiLCBsYi5Cb3QpO1xuXHRcdFx0XHR0aGlzLkluc2VydFNjYW5iZWFtKGxiLlRvcC5ZKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5JbnNlcnRFZGdlSW50b0FFTChsYiwgbnVsbCk7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0RWRnZUludG9BRUwocmIsIGxiKTtcblx0XHRcdFx0dGhpcy5TZXRXaW5kaW5nQ291bnQobGIpO1xuXHRcdFx0XHRyYi5XaW5kQ250ID0gbGIuV2luZENudDtcblx0XHRcdFx0cmIuV2luZENudDIgPSBsYi5XaW5kQ250Mjtcblx0XHRcdFx0aWYgKHRoaXMuSXNDb250cmlidXRpbmcobGIpKVxuXHRcdFx0XHRcdE9wMSA9IHRoaXMuQWRkTG9jYWxNaW5Qb2x5KGxiLCByYiwgbGIuQm90KTtcblx0XHRcdFx0dGhpcy5JbnNlcnRTY2FuYmVhbShsYi5Ub3AuWSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocmIgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbChyYikpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAocmIuTmV4dEluTE1MICE9PSBudWxsKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHRoaXMuSW5zZXJ0U2NhbmJlYW0ocmIuTmV4dEluTE1MLlRvcC5ZKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5BZGRFZGdlVG9TRUwocmIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRoaXMuSW5zZXJ0U2NhbmJlYW0ocmIuVG9wLlkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAobGIgPT09IG51bGwgfHwgcmIgPT09IG51bGwpIGNvbnRpbnVlO1xuXHRcdFx0Ly9pZiBvdXRwdXQgcG9seWdvbnMgc2hhcmUgYW4gRWRnZSB3aXRoIGEgaG9yaXpvbnRhbCByYiwgdGhleSdsbCBuZWVkIGpvaW5pbmcgbGF0ZXIgLi4uXG5cdFx0XHRpZiAoT3AxICE9PSBudWxsICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuSXNIb3Jpem9udGFsKHJiKSAmJiB0aGlzLm1fR2hvc3RKb2lucy5sZW5ndGggPiAwICYmIHJiLldpbmREZWx0YSAhPT0gMClcblx0XHRcdHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fR2hvc3RKb2lucy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvL2lmIHRoZSBob3Jpem9udGFsIFJiIGFuZCBhICdnaG9zdCcgaG9yaXpvbnRhbCBvdmVybGFwLCB0aGVuIGNvbnZlcnRcblx0XHRcdFx0XHQvL3RoZSAnZ2hvc3QnIGpvaW4gdG8gYSByZWFsIGpvaW4gcmVhZHkgZm9yIGxhdGVyIC4uLlxuXHRcdFx0XHRcdHZhciBqID0gdGhpcy5tX0dob3N0Sm9pbnNbaV07XG5cblx0XHRcdFx0XHRpZiAodGhpcy5Ib3J6U2VnbWVudHNPdmVybGFwKGouT3V0UHQxLlB0LlgsIGouT2ZmUHQuWCwgcmIuQm90LlgsIHJiLlRvcC5YKSlcblx0XHRcdFx0XHRcdHRoaXMuQWRkSm9pbihqLk91dFB0MSwgT3AxLCBqLk9mZlB0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAobGIuT3V0SWR4ID49IDAgJiYgbGIuUHJldkluQUVMICE9PSBudWxsICYmXG5cdFx0XHRcdGxiLlByZXZJbkFFTC5DdXJyLlggPT09IGxiLkJvdC5YICYmXG5cdFx0XHRcdGxiLlByZXZJbkFFTC5PdXRJZHggPj0gMCAmJlxuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNShsYi5QcmV2SW5BRUwuQ3VyciwgbGIuUHJldkluQUVMLlRvcCwgbGIuQ3VyciwgbGIuVG9wLCB0aGlzLm1fVXNlRnVsbFJhbmdlKSAmJlxuXHRcdFx0XHRsYi5XaW5kRGVsdGEgIT09IDAgJiYgbGIuUHJldkluQUVMLldpbmREZWx0YSAhPT0gMClcblx0XHRcdHtcblx0XHRcdFx0dmFyIE9wMiA9IHRoaXMuQWRkT3V0UHQobGIuUHJldkluQUVMLCBsYi5Cb3QpO1xuXHRcdFx0XHR0aGlzLkFkZEpvaW4oT3AxLCBPcDIsIGxiLlRvcCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAobGIuTmV4dEluQUVMICE9PSByYilcblx0XHRcdHtcblx0XHRcdFx0aWYgKHJiLk91dElkeCA+PSAwICYmIHJiLlByZXZJbkFFTC5PdXRJZHggPj0gMCAmJlxuXHRcdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw1KHJiLlByZXZJbkFFTC5DdXJyLCByYi5QcmV2SW5BRUwuVG9wLCByYi5DdXJyLCByYi5Ub3AsIHRoaXMubV9Vc2VGdWxsUmFuZ2UpICYmXG5cdFx0XHRcdFx0cmIuV2luZERlbHRhICE9PSAwICYmIHJiLlByZXZJbkFFTC5XaW5kRGVsdGEgIT09IDApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgT3AyID0gdGhpcy5BZGRPdXRQdChyYi5QcmV2SW5BRUwsIHJiLkJvdCk7XG5cdFx0XHRcdFx0dGhpcy5BZGRKb2luKE9wMSwgT3AyLCByYi5Ub3ApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBlID0gbGIuTmV4dEluQUVMO1xuXHRcdFx0XHRpZiAoZSAhPT0gbnVsbClcblx0XHRcdFx0XHR3aGlsZSAoZSAhPT0gcmIpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Ly9uYjogRm9yIGNhbGN1bGF0aW5nIHdpbmRpbmcgY291bnRzIGV0YywgSW50ZXJzZWN0RWRnZXMoKSBhc3N1bWVzXG5cdFx0XHRcdFx0XHQvL3RoYXQgcGFyYW0xIHdpbGwgYmUgdG8gdGhlIHJpZ2h0IG9mIHBhcmFtMiBBQk9WRSB0aGUgaW50ZXJzZWN0aW9uIC4uLlxuXHRcdFx0XHRcdFx0dGhpcy5JbnRlcnNlY3RFZGdlcyhyYiwgZSwgbGIuQ3Vycik7XG5cdFx0XHRcdFx0XHQvL29yZGVyIGltcG9ydGFudCBoZXJlXG5cdFx0XHRcdFx0XHRlID0gZS5OZXh0SW5BRUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkluc2VydEVkZ2VJbnRvQUVMID0gZnVuY3Rpb24gKGVkZ2UsIHN0YXJ0RWRnZSlcblx0e1xuXHRcdGlmICh0aGlzLm1fQWN0aXZlRWRnZXMgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0ZWRnZS5QcmV2SW5BRUwgPSBudWxsO1xuXHRcdFx0ZWRnZS5OZXh0SW5BRUwgPSBudWxsO1xuXHRcdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gZWRnZTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoc3RhcnRFZGdlID09PSBudWxsICYmIHRoaXMuRTJJbnNlcnRzQmVmb3JlRTEodGhpcy5tX0FjdGl2ZUVkZ2VzLCBlZGdlKSlcblx0XHR7XG5cdFx0XHRlZGdlLlByZXZJbkFFTCA9IG51bGw7XG5cdFx0XHRlZGdlLk5leHRJbkFFTCA9IHRoaXMubV9BY3RpdmVFZGdlcztcblx0XHRcdHRoaXMubV9BY3RpdmVFZGdlcy5QcmV2SW5BRUwgPSBlZGdlO1xuXHRcdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gZWRnZTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmIChzdGFydEVkZ2UgPT09IG51bGwpXG5cdFx0XHRcdHN0YXJ0RWRnZSA9IHRoaXMubV9BY3RpdmVFZGdlcztcblx0XHRcdHdoaWxlIChzdGFydEVkZ2UuTmV4dEluQUVMICE9PSBudWxsICYmICF0aGlzLkUySW5zZXJ0c0JlZm9yZUUxKHN0YXJ0RWRnZS5OZXh0SW5BRUwsIGVkZ2UpKVxuXHRcdFx0XHRzdGFydEVkZ2UgPSBzdGFydEVkZ2UuTmV4dEluQUVMO1xuXHRcdFx0ZWRnZS5OZXh0SW5BRUwgPSBzdGFydEVkZ2UuTmV4dEluQUVMO1xuXHRcdFx0aWYgKHN0YXJ0RWRnZS5OZXh0SW5BRUwgIT09IG51bGwpXG5cdFx0XHRcdHN0YXJ0RWRnZS5OZXh0SW5BRUwuUHJldkluQUVMID0gZWRnZTtcblx0XHRcdGVkZ2UuUHJldkluQUVMID0gc3RhcnRFZGdlO1xuXHRcdFx0c3RhcnRFZGdlLk5leHRJbkFFTCA9IGVkZ2U7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRTJJbnNlcnRzQmVmb3JlRTEgPSBmdW5jdGlvbiAoZTEsIGUyKVxuXHR7XG5cdFx0aWYgKGUyLkN1cnIuWCA9PT0gZTEuQ3Vyci5YKVxuXHRcdHtcblx0XHRcdGlmIChlMi5Ub3AuWSA+IGUxLlRvcC5ZKVxuXHRcdFx0XHRyZXR1cm4gZTIuVG9wLlggPCBDbGlwcGVyTGliLkNsaXBwZXIuVG9wWChlMSwgZTIuVG9wLlkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gZTEuVG9wLlggPiBDbGlwcGVyTGliLkNsaXBwZXIuVG9wWChlMiwgZTEuVG9wLlkpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gZTIuQ3Vyci5YIDwgZTEuQ3Vyci5YO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSXNFdmVuT2RkRmlsbFR5cGUgPSBmdW5jdGlvbiAoZWRnZSlcblx0e1xuXHRcdGlmIChlZGdlLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0KVxuXHRcdFx0cmV0dXJuIHRoaXMubV9TdWJqRmlsbFR5cGUgPT09IENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHRoaXMubV9DbGlwRmlsbFR5cGUgPT09IENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Jc0V2ZW5PZGRBbHRGaWxsVHlwZSA9IGZ1bmN0aW9uIChlZGdlKVxuXHR7XG5cdFx0aWYgKGVkZ2UuUG9seVR5cCA9PT0gQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QpXG5cdFx0XHRyZXR1cm4gdGhpcy5tX0NsaXBGaWxsVHlwZSA9PT0gQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gdGhpcy5tX1N1YmpGaWxsVHlwZSA9PT0gQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLklzQ29udHJpYnV0aW5nID0gZnVuY3Rpb24gKGVkZ2UpXG5cdHtcblx0XHR2YXIgcGZ0LCBwZnQyO1xuXHRcdGlmIChlZGdlLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0KVxuXHRcdHtcblx0XHRcdHBmdCA9IHRoaXMubV9TdWJqRmlsbFR5cGU7XG5cdFx0XHRwZnQyID0gdGhpcy5tX0NsaXBGaWxsVHlwZTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHBmdCA9IHRoaXMubV9DbGlwRmlsbFR5cGU7XG5cdFx0XHRwZnQyID0gdGhpcy5tX1N1YmpGaWxsVHlwZTtcblx0XHR9XG5cdFx0c3dpdGNoIChwZnQpXG5cdFx0e1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDpcblx0XHRcdGlmIChlZGdlLldpbmREZWx0YSA9PT0gMCAmJiBlZGdlLldpbmRDbnQgIT09IDEpXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0Tm9uWmVybzpcblx0XHRcdGlmIChNYXRoLmFicyhlZGdlLldpbmRDbnQpICE9PSAxKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlOlxuXHRcdFx0aWYgKGVkZ2UuV2luZENudCAhPT0gMSlcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGlmIChlZGdlLldpbmRDbnQgIT09IC0xKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0c3dpdGNoICh0aGlzLm1fQ2xpcFR5cGUpXG5cdFx0e1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5DbGlwVHlwZS5jdEludGVyc2VjdGlvbjpcblx0XHRcdHN3aXRjaCAocGZ0Milcblx0XHRcdHtcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDpcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0Tm9uWmVybzpcblx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyICE9PSAwKTtcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0UG9zaXRpdmU6XG5cdFx0XHRcdHJldHVybiAoZWRnZS5XaW5kQ250MiA+IDApO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyIDwgMCk7XG5cdFx0XHR9XG5cdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb246XG5cdFx0XHRzd2l0Y2ggKHBmdDIpXG5cdFx0XHR7XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ6XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm86XG5cdFx0XHRcdHJldHVybiAoZWRnZS5XaW5kQ250MiA9PT0gMCk7XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlOlxuXHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgPD0gMCk7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgPj0gMCk7XG5cdFx0XHR9XG5cdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0RGlmZmVyZW5jZTpcblx0XHRcdGlmIChlZGdlLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0KVxuXHRcdFx0XHRzd2l0Y2ggKHBmdDIpXG5cdFx0XHRcdHtcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRFdmVuT2RkOlxuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm86XG5cdFx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyID09PSAwKTtcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZTpcblx0XHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgPD0gMCk7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyID49IDApO1xuXHRcdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHN3aXRjaCAocGZ0Milcblx0XHRcdFx0e1xuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ6XG5cdFx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0Tm9uWmVybzpcblx0XHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgIT09IDApO1xuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlOlxuXHRcdFx0XHRcdHJldHVybiAoZWRnZS5XaW5kQ250MiA+IDApO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHJldHVybiAoZWRnZS5XaW5kQ250MiA8IDApO1xuXHRcdFx0XHR9XG5cdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0WG9yOlxuXHRcdFx0aWYgKGVkZ2UuV2luZERlbHRhID09PSAwKVxuXHRcdFx0XHRzd2l0Y2ggKHBmdDIpXG5cdFx0XHRcdHtcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRFdmVuT2RkOlxuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm86XG5cdFx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyID09PSAwKTtcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZTpcblx0XHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgPD0gMCk7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyID49IDApO1xuXHRcdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlNldFdpbmRpbmdDb3VudCA9IGZ1bmN0aW9uIChlZGdlKVxuXHR7XG5cdFx0dmFyIGUgPSBlZGdlLlByZXZJbkFFTDtcblx0XHQvL2ZpbmQgdGhlIGVkZ2Ugb2YgdGhlIHNhbWUgcG9seXR5cGUgdGhhdCBpbW1lZGlhdGVseSBwcmVjZWVkcyAnZWRnZScgaW4gQUVMXG5cdFx0d2hpbGUgKGUgIT09IG51bGwgJiYgKChlLlBvbHlUeXAgIT09IGVkZ2UuUG9seVR5cCkgfHwgKGUuV2luZERlbHRhID09PSAwKSkpXG5cdFx0XHRlID0gZS5QcmV2SW5BRUw7XG5cdFx0aWYgKGUgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dmFyIHBmdCA9IChlZGdlLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0ID8gdGhpcy5tX1N1YmpGaWxsVHlwZSA6IHRoaXMubV9DbGlwRmlsbFR5cGUpO1xuXHRcdFx0aWYgKGVkZ2UuV2luZERlbHRhID09PSAwKVxuXHRcdFx0e1xuXHRcdFx0XHRlZGdlLldpbmRDbnQgPSAocGZ0ID09PSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROZWdhdGl2ZSA/IC0xIDogMSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdGVkZ2UuV2luZENudCA9IGVkZ2UuV2luZERlbHRhO1xuXHRcdFx0fVxuXHRcdFx0ZWRnZS5XaW5kQ250MiA9IDA7XG5cdFx0XHRlID0gdGhpcy5tX0FjdGl2ZUVkZ2VzO1xuXHRcdFx0Ly9pZSBnZXQgcmVhZHkgdG8gY2FsYyBXaW5kQ250MlxuXHRcdH1cblx0XHRlbHNlIGlmIChlZGdlLldpbmREZWx0YSA9PT0gMCAmJiB0aGlzLm1fQ2xpcFR5cGUgIT09IENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbilcblx0XHR7XG5cdFx0XHRlZGdlLldpbmRDbnQgPSAxO1xuXHRcdFx0ZWRnZS5XaW5kQ250MiA9IGUuV2luZENudDI7XG5cdFx0XHRlID0gZS5OZXh0SW5BRUw7XG5cdFx0XHQvL2llIGdldCByZWFkeSB0byBjYWxjIFdpbmRDbnQyXG5cdFx0fVxuXHRcdGVsc2UgaWYgKHRoaXMuSXNFdmVuT2RkRmlsbFR5cGUoZWRnZSkpXG5cdFx0e1xuXHRcdFx0Ly9FdmVuT2RkIGZpbGxpbmcgLi4uXG5cdFx0XHRpZiAoZWRnZS5XaW5kRGVsdGEgPT09IDApXG5cdFx0XHR7XG5cdFx0XHRcdC8vYXJlIHdlIGluc2lkZSBhIHN1YmogcG9seWdvbiAuLi5cblx0XHRcdFx0dmFyIEluc2lkZSA9IHRydWU7XG5cdFx0XHRcdHZhciBlMiA9IGUuUHJldkluQUVMO1xuXHRcdFx0XHR3aGlsZSAoZTIgIT09IG51bGwpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoZTIuUG9seVR5cCA9PT0gZS5Qb2x5VHlwICYmIGUyLldpbmREZWx0YSAhPT0gMClcblx0XHRcdFx0XHRcdEluc2lkZSA9ICFJbnNpZGU7XG5cdFx0XHRcdFx0ZTIgPSBlMi5QcmV2SW5BRUw7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWRnZS5XaW5kQ250ID0gKEluc2lkZSA/IDAgOiAxKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0ZWRnZS5XaW5kQ250ID0gZWRnZS5XaW5kRGVsdGE7XG5cdFx0XHR9XG5cdFx0XHRlZGdlLldpbmRDbnQyID0gZS5XaW5kQ250Mjtcblx0XHRcdGUgPSBlLk5leHRJbkFFTDtcblx0XHRcdC8vaWUgZ2V0IHJlYWR5IHRvIGNhbGMgV2luZENudDJcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdC8vbm9uWmVybywgUG9zaXRpdmUgb3IgTmVnYXRpdmUgZmlsbGluZyAuLi5cblx0XHRcdGlmIChlLldpbmRDbnQgKiBlLldpbmREZWx0YSA8IDApXG5cdFx0XHR7XG5cdFx0XHRcdC8vcHJldiBlZGdlIGlzICdkZWNyZWFzaW5nJyBXaW5kQ291bnQgKFdDKSB0b3dhcmQgemVyb1xuXHRcdFx0XHQvL3NvIHdlJ3JlIG91dHNpZGUgdGhlIHByZXZpb3VzIHBvbHlnb24gLi4uXG5cdFx0XHRcdGlmIChNYXRoLmFicyhlLldpbmRDbnQpID4gMSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vb3V0c2lkZSBwcmV2IHBvbHkgYnV0IHN0aWxsIGluc2lkZSBhbm90aGVyLlxuXHRcdFx0XHRcdC8vd2hlbiByZXZlcnNpbmcgZGlyZWN0aW9uIG9mIHByZXYgcG9seSB1c2UgdGhlIHNhbWUgV0Ncblx0XHRcdFx0XHRpZiAoZS5XaW5kRGVsdGEgKiBlZGdlLldpbmREZWx0YSA8IDApXG5cdFx0XHRcdFx0XHRlZGdlLldpbmRDbnQgPSBlLldpbmRDbnQ7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0ZWRnZS5XaW5kQ250ID0gZS5XaW5kQ250ICsgZWRnZS5XaW5kRGVsdGE7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGVkZ2UuV2luZENudCA9IChlZGdlLldpbmREZWx0YSA9PT0gMCA/IDEgOiBlZGdlLldpbmREZWx0YSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdC8vcHJldiBlZGdlIGlzICdpbmNyZWFzaW5nJyBXaW5kQ291bnQgKFdDKSBhd2F5IGZyb20gemVyb1xuXHRcdFx0XHQvL3NvIHdlJ3JlIGluc2lkZSB0aGUgcHJldmlvdXMgcG9seWdvbiAuLi5cblx0XHRcdFx0aWYgKGVkZ2UuV2luZERlbHRhID09PSAwKVxuXHRcdFx0XHRcdGVkZ2UuV2luZENudCA9IChlLldpbmRDbnQgPCAwID8gZS5XaW5kQ250IC0gMSA6IGUuV2luZENudCArIDEpO1xuXHRcdFx0XHRlbHNlIGlmIChlLldpbmREZWx0YSAqIGVkZ2UuV2luZERlbHRhIDwgMClcblx0XHRcdFx0XHRlZGdlLldpbmRDbnQgPSBlLldpbmRDbnQ7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRlZGdlLldpbmRDbnQgPSBlLldpbmRDbnQgKyBlZGdlLldpbmREZWx0YTtcblx0XHRcdH1cblx0XHRcdGVkZ2UuV2luZENudDIgPSBlLldpbmRDbnQyO1xuXHRcdFx0ZSA9IGUuTmV4dEluQUVMO1xuXHRcdFx0Ly9pZSBnZXQgcmVhZHkgdG8gY2FsYyBXaW5kQ250MlxuXHRcdH1cblx0XHQvL3VwZGF0ZSBXaW5kQ250MiAuLi5cblx0XHRpZiAodGhpcy5Jc0V2ZW5PZGRBbHRGaWxsVHlwZShlZGdlKSlcblx0XHR7XG5cdFx0XHQvL0V2ZW5PZGQgZmlsbGluZyAuLi5cblx0XHRcdHdoaWxlIChlICE9PSBlZGdlKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoZS5XaW5kRGVsdGEgIT09IDApXG5cdFx0XHRcdFx0ZWRnZS5XaW5kQ250MiA9IChlZGdlLldpbmRDbnQyID09PSAwID8gMSA6IDApO1xuXHRcdFx0XHRlID0gZS5OZXh0SW5BRUw7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHQvL25vblplcm8sIFBvc2l0aXZlIG9yIE5lZ2F0aXZlIGZpbGxpbmcgLi4uXG5cdFx0XHR3aGlsZSAoZSAhPT0gZWRnZSlcblx0XHRcdHtcblx0XHRcdFx0ZWRnZS5XaW5kQ250MiArPSBlLldpbmREZWx0YTtcblx0XHRcdFx0ZSA9IGUuTmV4dEluQUVMO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkFkZEVkZ2VUb1NFTCA9IGZ1bmN0aW9uIChlZGdlKVxuXHR7XG5cdFx0Ly9TRUwgcG9pbnRlcnMgaW4gUEVkZ2UgYXJlIHVzZSB0byBidWlsZCB0cmFuc2llbnQgbGlzdHMgb2YgaG9yaXpvbnRhbCBlZGdlcy5cblx0XHQvL0hvd2V2ZXIsIHNpbmNlIHdlIGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgcHJvY2Vzc2luZyBvcmRlciwgYWxsIGFkZGl0aW9uc1xuXHRcdC8vYXJlIG1hZGUgdG8gdGhlIGZyb250IG9mIHRoZSBsaXN0IC4uLlxuXHRcdGlmICh0aGlzLm1fU29ydGVkRWRnZXMgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX1NvcnRlZEVkZ2VzID0gZWRnZTtcblx0XHRcdGVkZ2UuUHJldkluU0VMID0gbnVsbDtcblx0XHRcdGVkZ2UuTmV4dEluU0VMID0gbnVsbDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGVkZ2UuTmV4dEluU0VMID0gdGhpcy5tX1NvcnRlZEVkZ2VzO1xuXHRcdFx0ZWRnZS5QcmV2SW5TRUwgPSBudWxsO1xuXHRcdFx0dGhpcy5tX1NvcnRlZEVkZ2VzLlByZXZJblNFTCA9IGVkZ2U7XG5cdFx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBlZGdlO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlBvcEVkZ2VGcm9tU0VMID0gZnVuY3Rpb24gKGUpXG5cdHtcblx0XHQvL1BvcCBlZGdlIGZyb20gZnJvbnQgb2YgU0VMIChpZSBTRUwgaXMgYSBGSUxPIGxpc3QpXG5cdFx0ZS52ID0gdGhpcy5tX1NvcnRlZEVkZ2VzO1xuXHRcdGlmIChlLnYgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR2YXIgb2xkRSA9IGUudjtcblx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBlLnYuTmV4dEluU0VMO1xuXHRcdGlmICh0aGlzLm1fU29ydGVkRWRnZXMgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX1NvcnRlZEVkZ2VzLlByZXZJblNFTCA9IG51bGw7XG5cdFx0fVxuXHRcdG9sZEUuTmV4dEluU0VMID0gbnVsbDtcblx0XHRvbGRFLlByZXZJblNFTCA9IG51bGw7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Db3B5QUVMVG9TRUwgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIGUgPSB0aGlzLm1fQWN0aXZlRWRnZXM7XG5cdFx0dGhpcy5tX1NvcnRlZEVkZ2VzID0gZTtcblx0XHR3aGlsZSAoZSAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHRlLlByZXZJblNFTCA9IGUuUHJldkluQUVMO1xuXHRcdFx0ZS5OZXh0SW5TRUwgPSBlLk5leHRJbkFFTDtcblx0XHRcdGUgPSBlLk5leHRJbkFFTDtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Td2FwUG9zaXRpb25zSW5TRUwgPSBmdW5jdGlvbiAoZWRnZTEsIGVkZ2UyKVxuXHR7XG5cdFx0aWYgKGVkZ2UxLk5leHRJblNFTCA9PT0gbnVsbCAmJiBlZGdlMS5QcmV2SW5TRUwgPT09IG51bGwpXG5cdFx0XHRyZXR1cm47XG5cdFx0aWYgKGVkZ2UyLk5leHRJblNFTCA9PT0gbnVsbCAmJiBlZGdlMi5QcmV2SW5TRUwgPT09IG51bGwpXG5cdFx0XHRyZXR1cm47XG5cdFx0aWYgKGVkZ2UxLk5leHRJblNFTCA9PT0gZWRnZTIpXG5cdFx0e1xuXHRcdFx0dmFyIG5leHQgPSBlZGdlMi5OZXh0SW5TRUw7XG5cdFx0XHRpZiAobmV4dCAhPT0gbnVsbClcblx0XHRcdFx0bmV4dC5QcmV2SW5TRUwgPSBlZGdlMTtcblx0XHRcdHZhciBwcmV2ID0gZWRnZTEuUHJldkluU0VMO1xuXHRcdFx0aWYgKHByZXYgIT09IG51bGwpXG5cdFx0XHRcdHByZXYuTmV4dEluU0VMID0gZWRnZTI7XG5cdFx0XHRlZGdlMi5QcmV2SW5TRUwgPSBwcmV2O1xuXHRcdFx0ZWRnZTIuTmV4dEluU0VMID0gZWRnZTE7XG5cdFx0XHRlZGdlMS5QcmV2SW5TRUwgPSBlZGdlMjtcblx0XHRcdGVkZ2UxLk5leHRJblNFTCA9IG5leHQ7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGVkZ2UyLk5leHRJblNFTCA9PT0gZWRnZTEpXG5cdFx0e1xuXHRcdFx0dmFyIG5leHQgPSBlZGdlMS5OZXh0SW5TRUw7XG5cdFx0XHRpZiAobmV4dCAhPT0gbnVsbClcblx0XHRcdFx0bmV4dC5QcmV2SW5TRUwgPSBlZGdlMjtcblx0XHRcdHZhciBwcmV2ID0gZWRnZTIuUHJldkluU0VMO1xuXHRcdFx0aWYgKHByZXYgIT09IG51bGwpXG5cdFx0XHRcdHByZXYuTmV4dEluU0VMID0gZWRnZTE7XG5cdFx0XHRlZGdlMS5QcmV2SW5TRUwgPSBwcmV2O1xuXHRcdFx0ZWRnZTEuTmV4dEluU0VMID0gZWRnZTI7XG5cdFx0XHRlZGdlMi5QcmV2SW5TRUwgPSBlZGdlMTtcblx0XHRcdGVkZ2UyLk5leHRJblNFTCA9IG5leHQ7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR2YXIgbmV4dCA9IGVkZ2UxLk5leHRJblNFTDtcblx0XHRcdHZhciBwcmV2ID0gZWRnZTEuUHJldkluU0VMO1xuXHRcdFx0ZWRnZTEuTmV4dEluU0VMID0gZWRnZTIuTmV4dEluU0VMO1xuXHRcdFx0aWYgKGVkZ2UxLk5leHRJblNFTCAhPT0gbnVsbClcblx0XHRcdFx0ZWRnZTEuTmV4dEluU0VMLlByZXZJblNFTCA9IGVkZ2UxO1xuXHRcdFx0ZWRnZTEuUHJldkluU0VMID0gZWRnZTIuUHJldkluU0VMO1xuXHRcdFx0aWYgKGVkZ2UxLlByZXZJblNFTCAhPT0gbnVsbClcblx0XHRcdFx0ZWRnZTEuUHJldkluU0VMLk5leHRJblNFTCA9IGVkZ2UxO1xuXHRcdFx0ZWRnZTIuTmV4dEluU0VMID0gbmV4dDtcblx0XHRcdGlmIChlZGdlMi5OZXh0SW5TRUwgIT09IG51bGwpXG5cdFx0XHRcdGVkZ2UyLk5leHRJblNFTC5QcmV2SW5TRUwgPSBlZGdlMjtcblx0XHRcdGVkZ2UyLlByZXZJblNFTCA9IHByZXY7XG5cdFx0XHRpZiAoZWRnZTIuUHJldkluU0VMICE9PSBudWxsKVxuXHRcdFx0XHRlZGdlMi5QcmV2SW5TRUwuTmV4dEluU0VMID0gZWRnZTI7XG5cdFx0fVxuXHRcdGlmIChlZGdlMS5QcmV2SW5TRUwgPT09IG51bGwpXG5cdFx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBlZGdlMTtcblx0XHRlbHNlIGlmIChlZGdlMi5QcmV2SW5TRUwgPT09IG51bGwpXG5cdFx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBlZGdlMjtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkFkZExvY2FsTWF4UG9seSA9IGZ1bmN0aW9uIChlMSwgZTIsIHB0KVxuXHR7XG5cdFx0dGhpcy5BZGRPdXRQdChlMSwgcHQpO1xuXHRcdGlmIChlMi5XaW5kRGVsdGEgPT09IDApIHRoaXMuQWRkT3V0UHQoZTIsIHB0KTtcblx0XHRpZiAoZTEuT3V0SWR4ID09PSBlMi5PdXRJZHgpXG5cdFx0e1xuXHRcdFx0ZTEuT3V0SWR4ID0gLTE7XG5cdFx0XHRlMi5PdXRJZHggPSAtMTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoZTEuT3V0SWR4IDwgZTIuT3V0SWR4KVxuXHRcdFx0dGhpcy5BcHBlbmRQb2x5Z29uKGUxLCBlMik7XG5cdFx0ZWxzZVxuXHRcdFx0dGhpcy5BcHBlbmRQb2x5Z29uKGUyLCBlMSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5BZGRMb2NhbE1pblBvbHkgPSBmdW5jdGlvbiAoZTEsIGUyLCBwdClcblx0e1xuXHRcdHZhciByZXN1bHQ7XG5cdFx0dmFyIGUsIHByZXZFO1xuXHRcdGlmIChDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbChlMikgfHwgKGUxLkR4ID4gZTIuRHgpKVxuXHRcdHtcblx0XHRcdHJlc3VsdCA9IHRoaXMuQWRkT3V0UHQoZTEsIHB0KTtcblx0XHRcdGUyLk91dElkeCA9IGUxLk91dElkeDtcblx0XHRcdGUxLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzTGVmdDtcblx0XHRcdGUyLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzUmlnaHQ7XG5cdFx0XHRlID0gZTE7XG5cdFx0XHRpZiAoZS5QcmV2SW5BRUwgPT09IGUyKVxuXHRcdFx0XHRwcmV2RSA9IGUyLlByZXZJbkFFTDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cHJldkUgPSBlLlByZXZJbkFFTDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHJlc3VsdCA9IHRoaXMuQWRkT3V0UHQoZTIsIHB0KTtcblx0XHRcdGUxLk91dElkeCA9IGUyLk91dElkeDtcblx0XHRcdGUxLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzUmlnaHQ7XG5cdFx0XHRlMi5TaWRlID0gQ2xpcHBlckxpYi5FZGdlU2lkZS5lc0xlZnQ7XG5cdFx0XHRlID0gZTI7XG5cdFx0XHRpZiAoZS5QcmV2SW5BRUwgPT09IGUxKVxuXHRcdFx0XHRwcmV2RSA9IGUxLlByZXZJbkFFTDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cHJldkUgPSBlLlByZXZJbkFFTDtcblx0XHR9XG5cblx0XHRpZiAocHJldkUgIT09IG51bGwgJiYgcHJldkUuT3V0SWR4ID49IDAgJiYgcHJldkUuVG9wLlkgPCBwdC5ZICYmIGUuVG9wLlkgPCBwdC5ZKVxuXHRcdHtcblx0XHRcdHZhciB4UHJldiA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKHByZXZFLCBwdC5ZKTtcblx0XHRcdHZhciB4RSA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGUsIHB0LlkpO1xuXHRcdFx0aWYgKCh4UHJldiA9PT0geEUpICYmIChlLldpbmREZWx0YSAhPT0gMCkgJiYgKHByZXZFLldpbmREZWx0YSAhPT0gMCkgJiYgQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbDUobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKHhQcmV2LCBwdC5ZKSwgcHJldkUuVG9wLCBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoeEUsIHB0LlkpLCBlLlRvcCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBvdXRQdCA9IHRoaXMuQWRkT3V0UHQocHJldkUsIHB0KTtcblx0XHRcdFx0dGhpcy5BZGRKb2luKHJlc3VsdCwgb3V0UHQsIGUuVG9wKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkFkZE91dFB0ID0gZnVuY3Rpb24gKGUsIHB0KVxuXHR7XG5cdFx0aWYgKGUuT3V0SWR4IDwgMClcblx0XHR7XG5cdFx0XHR2YXIgb3V0UmVjID0gdGhpcy5DcmVhdGVPdXRSZWMoKTtcblx0XHRcdG91dFJlYy5Jc09wZW4gPSAoZS5XaW5kRGVsdGEgPT09IDApO1xuXHRcdFx0dmFyIG5ld09wID0gbmV3IENsaXBwZXJMaWIuT3V0UHQoKTtcblx0XHRcdG91dFJlYy5QdHMgPSBuZXdPcDtcblx0XHRcdG5ld09wLklkeCA9IG91dFJlYy5JZHg7XG5cdFx0XHQvL25ld09wLlB0ID0gcHQ7XG5cdFx0XHRuZXdPcC5QdC5YID0gcHQuWDtcblx0XHRcdG5ld09wLlB0LlkgPSBwdC5ZO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgbmV3T3AuUHQuWiA9IHB0Llo7XG5cdFx0XHRuZXdPcC5OZXh0ID0gbmV3T3A7XG5cdFx0XHRuZXdPcC5QcmV2ID0gbmV3T3A7XG5cdFx0XHRpZiAoIW91dFJlYy5Jc09wZW4pXG5cdFx0XHRcdHRoaXMuU2V0SG9sZVN0YXRlKGUsIG91dFJlYyk7XG5cdFx0XHRlLk91dElkeCA9IG91dFJlYy5JZHg7XG5cdFx0XHQvL25iOiBkbyB0aGlzIGFmdGVyIFNldFogIVxuXHRcdFx0cmV0dXJuIG5ld09wO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIG91dFJlYyA9IHRoaXMubV9Qb2x5T3V0c1tlLk91dElkeF07XG5cdFx0XHQvL091dFJlYy5QdHMgaXMgdGhlICdMZWZ0LW1vc3QnIHBvaW50ICYgT3V0UmVjLlB0cy5QcmV2IGlzIHRoZSAnUmlnaHQtbW9zdCdcblx0XHRcdHZhciBvcCA9IG91dFJlYy5QdHM7XG5cdFx0XHR2YXIgVG9Gcm9udCA9IChlLlNpZGUgPT09IENsaXBwZXJMaWIuRWRnZVNpZGUuZXNMZWZ0KTtcblx0XHRcdGlmIChUb0Zyb250ICYmIENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocHQsIG9wLlB0KSlcblx0XHRcdFx0cmV0dXJuIG9wO1xuXHRcdFx0ZWxzZSBpZiAoIVRvRnJvbnQgJiYgQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShwdCwgb3AuUHJldi5QdCkpXG5cdFx0XHRcdHJldHVybiBvcC5QcmV2O1xuXHRcdFx0dmFyIG5ld09wID0gbmV3IENsaXBwZXJMaWIuT3V0UHQoKTtcblx0XHRcdG5ld09wLklkeCA9IG91dFJlYy5JZHg7XG5cdFx0XHQvL25ld09wLlB0ID0gcHQ7XG5cdFx0XHRuZXdPcC5QdC5YID0gcHQuWDtcblx0XHRcdG5ld09wLlB0LlkgPSBwdC5ZO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgbmV3T3AuUHQuWiA9IHB0Llo7XG5cdFx0XHRuZXdPcC5OZXh0ID0gb3A7XG5cdFx0XHRuZXdPcC5QcmV2ID0gb3AuUHJldjtcblx0XHRcdG5ld09wLlByZXYuTmV4dCA9IG5ld09wO1xuXHRcdFx0b3AuUHJldiA9IG5ld09wO1xuXHRcdFx0aWYgKFRvRnJvbnQpXG5cdFx0XHRcdG91dFJlYy5QdHMgPSBuZXdPcDtcblx0XHRcdHJldHVybiBuZXdPcDtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5HZXRMYXN0T3V0UHQgPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdHZhciBvdXRSZWMgPSB0aGlzLm1fUG9seU91dHNbZS5PdXRJZHhdO1xuXHRcdGlmIChlLlNpZGUgPT09IENsaXBwZXJMaWIuRWRnZVNpZGUuZXNMZWZ0KVxuXHRcdHtcblx0XHRcdHJldHVybiBvdXRSZWMuUHRzO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0cmV0dXJuIG91dFJlYy5QdHMuUHJldjtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Td2FwUG9pbnRzID0gZnVuY3Rpb24gKHB0MSwgcHQyKVxuXHR7XG5cdFx0dmFyIHRtcCA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MShwdDEuVmFsdWUpO1xuXHRcdC8vcHQxLlZhbHVlID0gcHQyLlZhbHVlO1xuXHRcdHB0MS5WYWx1ZS5YID0gcHQyLlZhbHVlLlg7XG5cdFx0cHQxLlZhbHVlLlkgPSBwdDIuVmFsdWUuWTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBwdDEuVmFsdWUuWiA9IHB0Mi5WYWx1ZS5aO1xuXHRcdC8vcHQyLlZhbHVlID0gdG1wO1xuXHRcdHB0Mi5WYWx1ZS5YID0gdG1wLlg7XG5cdFx0cHQyLlZhbHVlLlkgPSB0bXAuWTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBwdDIuVmFsdWUuWiA9IHRtcC5aO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSG9yelNlZ21lbnRzT3ZlcmxhcCA9IGZ1bmN0aW9uIChzZWcxYSwgc2VnMWIsIHNlZzJhLCBzZWcyYilcblx0e1xuXHRcdHZhciB0bXA7XG5cdFx0aWYgKHNlZzFhID4gc2VnMWIpXG5cdFx0e1xuXHRcdFx0dG1wID0gc2VnMWE7XG5cdFx0XHRzZWcxYSA9IHNlZzFiO1xuXHRcdFx0c2VnMWIgPSB0bXA7XG5cdFx0fVxuXHRcdGlmIChzZWcyYSA+IHNlZzJiKVxuXHRcdHtcblx0XHRcdHRtcCA9IHNlZzJhO1xuXHRcdFx0c2VnMmEgPSBzZWcyYjtcblx0XHRcdHNlZzJiID0gdG1wO1xuXHRcdH1cblx0XHRyZXR1cm4gKHNlZzFhIDwgc2VnMmIpICYmIChzZWcyYSA8IHNlZzFiKTtcblx0fVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuU2V0SG9sZVN0YXRlID0gZnVuY3Rpb24gKGUsIG91dFJlYylcblx0e1xuXHRcdHZhciBlMiA9IGUuUHJldkluQUVMO1xuXHRcdHZhciBlVG1wID0gbnVsbDtcblx0XHR3aGlsZSAoZTIgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0aWYgKGUyLk91dElkeCA+PSAwICYmIGUyLldpbmREZWx0YSAhPT0gMClcblx0XHRcdHtcblx0XHRcdFx0aWYgKGVUbXAgPT09IG51bGwpXG5cdFx0XHRcdFx0ZVRtcCA9IGUyO1xuXHRcdFx0XHRlbHNlIGlmIChlVG1wLk91dElkeCA9PT0gZTIuT3V0SWR4KVxuXHRcdFx0XHRcdGVUbXAgPSBudWxsOyAvL3BhaXJlZFxuXHRcdFx0fVxuXHRcdFx0ZTIgPSBlMi5QcmV2SW5BRUw7XG5cdFx0fVxuXG5cdFx0aWYgKGVUbXAgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0b3V0UmVjLkZpcnN0TGVmdCA9IG51bGw7XG5cdFx0XHRvdXRSZWMuSXNIb2xlID0gZmFsc2U7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRvdXRSZWMuRmlyc3RMZWZ0ID0gdGhpcy5tX1BvbHlPdXRzW2VUbXAuT3V0SWR4XTtcblx0XHRcdG91dFJlYy5Jc0hvbGUgPSAhb3V0UmVjLkZpcnN0TGVmdC5Jc0hvbGU7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuR2V0RHggPSBmdW5jdGlvbiAocHQxLCBwdDIpXG5cdHtcblx0XHRpZiAocHQxLlkgPT09IHB0Mi5ZKVxuXHRcdFx0cmV0dXJuIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbDtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gKHB0Mi5YIC0gcHQxLlgpIC8gKHB0Mi5ZIC0gcHQxLlkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRmlyc3RJc0JvdHRvbVB0ID0gZnVuY3Rpb24gKGJ0bVB0MSwgYnRtUHQyKVxuXHR7XG5cdFx0dmFyIHAgPSBidG1QdDEuUHJldjtcblx0XHR3aGlsZSAoKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocC5QdCwgYnRtUHQxLlB0KSkgJiYgKHAgIT09IGJ0bVB0MSkpXG5cdFx0XHRwID0gcC5QcmV2O1xuXHRcdHZhciBkeDFwID0gTWF0aC5hYnModGhpcy5HZXREeChidG1QdDEuUHQsIHAuUHQpKTtcblx0XHRwID0gYnRtUHQxLk5leHQ7XG5cdFx0d2hpbGUgKChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHAuUHQsIGJ0bVB0MS5QdCkpICYmIChwICE9PSBidG1QdDEpKVxuXHRcdFx0cCA9IHAuTmV4dDtcblx0XHR2YXIgZHgxbiA9IE1hdGguYWJzKHRoaXMuR2V0RHgoYnRtUHQxLlB0LCBwLlB0KSk7XG5cdFx0cCA9IGJ0bVB0Mi5QcmV2O1xuXHRcdHdoaWxlICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShwLlB0LCBidG1QdDIuUHQpKSAmJiAocCAhPT0gYnRtUHQyKSlcblx0XHRcdHAgPSBwLlByZXY7XG5cdFx0dmFyIGR4MnAgPSBNYXRoLmFicyh0aGlzLkdldER4KGJ0bVB0Mi5QdCwgcC5QdCkpO1xuXHRcdHAgPSBidG1QdDIuTmV4dDtcblx0XHR3aGlsZSAoKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocC5QdCwgYnRtUHQyLlB0KSkgJiYgKHAgIT09IGJ0bVB0MikpXG5cdFx0XHRwID0gcC5OZXh0O1xuXHRcdHZhciBkeDJuID0gTWF0aC5hYnModGhpcy5HZXREeChidG1QdDIuUHQsIHAuUHQpKTtcblxuXHRcdGlmIChNYXRoLm1heChkeDFwLCBkeDFuKSA9PT0gTWF0aC5tYXgoZHgycCwgZHgybikgJiYgTWF0aC5taW4oZHgxcCwgZHgxbikgPT09IE1hdGgubWluKGR4MnAsIGR4Mm4pKVxuXHRcdHtcblx0XHRcdHJldHVybiB0aGlzLkFyZWEoYnRtUHQxKSA+IDA7IC8vaWYgb3RoZXJ3aXNlIGlkZW50aWNhbCB1c2Ugb3JpZW50YXRpb25cblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHJldHVybiAoZHgxcCA+PSBkeDJwICYmIGR4MXAgPj0gZHgybikgfHwgKGR4MW4gPj0gZHgycCAmJiBkeDFuID49IGR4Mm4pO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldEJvdHRvbVB0ID0gZnVuY3Rpb24gKHBwKVxuXHR7XG5cdFx0dmFyIGR1cHMgPSBudWxsO1xuXHRcdHZhciBwID0gcHAuTmV4dDtcblx0XHR3aGlsZSAocCAhPT0gcHApXG5cdFx0e1xuXHRcdFx0aWYgKHAuUHQuWSA+IHBwLlB0LlkpXG5cdFx0XHR7XG5cdFx0XHRcdHBwID0gcDtcblx0XHRcdFx0ZHVwcyA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChwLlB0LlkgPT09IHBwLlB0LlkgJiYgcC5QdC5YIDw9IHBwLlB0LlgpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChwLlB0LlggPCBwcC5QdC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ZHVwcyA9IG51bGw7XG5cdFx0XHRcdFx0cHAgPSBwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChwLk5leHQgIT09IHBwICYmIHAuUHJldiAhPT0gcHApXG5cdFx0XHRcdFx0XHRkdXBzID0gcDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cCA9IHAuTmV4dDtcblx0XHR9XG5cdFx0aWYgKGR1cHMgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0Ly90aGVyZSBhcHBlYXJzIHRvIGJlIGF0IGxlYXN0IDIgdmVydGljZXMgYXQgYm90dG9tUHQgc28gLi4uXG5cdFx0XHR3aGlsZSAoZHVwcyAhPT0gcClcblx0XHRcdHtcblx0XHRcdFx0aWYgKCF0aGlzLkZpcnN0SXNCb3R0b21QdChwLCBkdXBzKSlcblx0XHRcdFx0XHRwcCA9IGR1cHM7XG5cdFx0XHRcdGR1cHMgPSBkdXBzLk5leHQ7XG5cdFx0XHRcdHdoaWxlIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0luZXF1YWxpdHkoZHVwcy5QdCwgcHAuUHQpKVxuXHRcdFx0XHRcdGR1cHMgPSBkdXBzLk5leHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBwcDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldExvd2VybW9zdFJlYyA9IGZ1bmN0aW9uIChvdXRSZWMxLCBvdXRSZWMyKVxuXHR7XG5cdFx0Ly93b3JrIG91dCB3aGljaCBwb2x5Z29uIGZyYWdtZW50IGhhcyB0aGUgY29ycmVjdCBob2xlIHN0YXRlIC4uLlxuXHRcdGlmIChvdXRSZWMxLkJvdHRvbVB0ID09PSBudWxsKVxuXHRcdFx0b3V0UmVjMS5Cb3R0b21QdCA9IHRoaXMuR2V0Qm90dG9tUHQob3V0UmVjMS5QdHMpO1xuXHRcdGlmIChvdXRSZWMyLkJvdHRvbVB0ID09PSBudWxsKVxuXHRcdFx0b3V0UmVjMi5Cb3R0b21QdCA9IHRoaXMuR2V0Qm90dG9tUHQob3V0UmVjMi5QdHMpO1xuXHRcdHZhciBiUHQxID0gb3V0UmVjMS5Cb3R0b21QdDtcblx0XHR2YXIgYlB0MiA9IG91dFJlYzIuQm90dG9tUHQ7XG5cdFx0aWYgKGJQdDEuUHQuWSA+IGJQdDIuUHQuWSlcblx0XHRcdHJldHVybiBvdXRSZWMxO1xuXHRcdGVsc2UgaWYgKGJQdDEuUHQuWSA8IGJQdDIuUHQuWSlcblx0XHRcdHJldHVybiBvdXRSZWMyO1xuXHRcdGVsc2UgaWYgKGJQdDEuUHQuWCA8IGJQdDIuUHQuWClcblx0XHRcdHJldHVybiBvdXRSZWMxO1xuXHRcdGVsc2UgaWYgKGJQdDEuUHQuWCA+IGJQdDIuUHQuWClcblx0XHRcdHJldHVybiBvdXRSZWMyO1xuXHRcdGVsc2UgaWYgKGJQdDEuTmV4dCA9PT0gYlB0MSlcblx0XHRcdHJldHVybiBvdXRSZWMyO1xuXHRcdGVsc2UgaWYgKGJQdDIuTmV4dCA9PT0gYlB0Milcblx0XHRcdHJldHVybiBvdXRSZWMxO1xuXHRcdGVsc2UgaWYgKHRoaXMuRmlyc3RJc0JvdHRvbVB0KGJQdDEsIGJQdDIpKVxuXHRcdFx0cmV0dXJuIG91dFJlYzE7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIG91dFJlYzI7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5PdXRSZWMxUmlnaHRPZk91dFJlYzIgPSBmdW5jdGlvbiAob3V0UmVjMSwgb3V0UmVjMilcblx0e1xuXHRcdGRvIHtcblx0XHRcdG91dFJlYzEgPSBvdXRSZWMxLkZpcnN0TGVmdDtcblx0XHRcdGlmIChvdXRSZWMxID09PSBvdXRSZWMyKVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0d2hpbGUgKG91dFJlYzEgIT09IG51bGwpXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuR2V0T3V0UmVjID0gZnVuY3Rpb24gKGlkeClcblx0e1xuXHRcdHZhciBvdXRyZWMgPSB0aGlzLm1fUG9seU91dHNbaWR4XTtcblx0XHR3aGlsZSAob3V0cmVjICE9PSB0aGlzLm1fUG9seU91dHNbb3V0cmVjLklkeF0pXG5cdFx0XHRvdXRyZWMgPSB0aGlzLm1fUG9seU91dHNbb3V0cmVjLklkeF07XG5cdFx0cmV0dXJuIG91dHJlYztcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkFwcGVuZFBvbHlnb24gPSBmdW5jdGlvbiAoZTEsIGUyKVxuXHR7XG5cdFx0Ly9nZXQgdGhlIHN0YXJ0IGFuZCBlbmRzIG9mIGJvdGggb3V0cHV0IHBvbHlnb25zIC4uLlxuXHRcdHZhciBvdXRSZWMxID0gdGhpcy5tX1BvbHlPdXRzW2UxLk91dElkeF07XG5cdFx0dmFyIG91dFJlYzIgPSB0aGlzLm1fUG9seU91dHNbZTIuT3V0SWR4XTtcblx0XHR2YXIgaG9sZVN0YXRlUmVjO1xuXHRcdGlmICh0aGlzLk91dFJlYzFSaWdodE9mT3V0UmVjMihvdXRSZWMxLCBvdXRSZWMyKSlcblx0XHRcdGhvbGVTdGF0ZVJlYyA9IG91dFJlYzI7XG5cdFx0ZWxzZSBpZiAodGhpcy5PdXRSZWMxUmlnaHRPZk91dFJlYzIob3V0UmVjMiwgb3V0UmVjMSkpXG5cdFx0XHRob2xlU3RhdGVSZWMgPSBvdXRSZWMxO1xuXHRcdGVsc2Vcblx0XHRcdGhvbGVTdGF0ZVJlYyA9IHRoaXMuR2V0TG93ZXJtb3N0UmVjKG91dFJlYzEsIG91dFJlYzIpO1xuXG5cdFx0Ly9nZXQgdGhlIHN0YXJ0IGFuZCBlbmRzIG9mIGJvdGggb3V0cHV0IHBvbHlnb25zIGFuZFxuXHRcdC8vam9pbiBFMiBwb2x5IG9udG8gRTEgcG9seSBhbmQgZGVsZXRlIHBvaW50ZXJzIHRvIEUyIC4uLlxuXG5cdFx0dmFyIHAxX2xmdCA9IG91dFJlYzEuUHRzO1xuXHRcdHZhciBwMV9ydCA9IHAxX2xmdC5QcmV2O1xuXHRcdHZhciBwMl9sZnQgPSBvdXRSZWMyLlB0cztcblx0XHR2YXIgcDJfcnQgPSBwMl9sZnQuUHJldjtcblx0XHQvL2pvaW4gZTIgcG9seSBvbnRvIGUxIHBvbHkgYW5kIGRlbGV0ZSBwb2ludGVycyB0byBlMiAuLi5cblx0XHRpZiAoZTEuU2lkZSA9PT0gQ2xpcHBlckxpYi5FZGdlU2lkZS5lc0xlZnQpXG5cdFx0e1xuXHRcdFx0aWYgKGUyLlNpZGUgPT09IENsaXBwZXJMaWIuRWRnZVNpZGUuZXNMZWZ0KVxuXHRcdFx0e1xuXHRcdFx0XHQvL3ogeSB4IGEgYiBjXG5cdFx0XHRcdHRoaXMuUmV2ZXJzZVBvbHlQdExpbmtzKHAyX2xmdCk7XG5cdFx0XHRcdHAyX2xmdC5OZXh0ID0gcDFfbGZ0O1xuXHRcdFx0XHRwMV9sZnQuUHJldiA9IHAyX2xmdDtcblx0XHRcdFx0cDFfcnQuTmV4dCA9IHAyX3J0O1xuXHRcdFx0XHRwMl9ydC5QcmV2ID0gcDFfcnQ7XG5cdFx0XHRcdG91dFJlYzEuUHRzID0gcDJfcnQ7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdC8veCB5IHogYSBiIGNcblx0XHRcdFx0cDJfcnQuTmV4dCA9IHAxX2xmdDtcblx0XHRcdFx0cDFfbGZ0LlByZXYgPSBwMl9ydDtcblx0XHRcdFx0cDJfbGZ0LlByZXYgPSBwMV9ydDtcblx0XHRcdFx0cDFfcnQuTmV4dCA9IHAyX2xmdDtcblx0XHRcdFx0b3V0UmVjMS5QdHMgPSBwMl9sZnQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRpZiAoZTIuU2lkZSA9PT0gQ2xpcHBlckxpYi5FZGdlU2lkZS5lc1JpZ2h0KVxuXHRcdFx0e1xuXHRcdFx0XHQvL2EgYiBjIHogeSB4XG5cdFx0XHRcdHRoaXMuUmV2ZXJzZVBvbHlQdExpbmtzKHAyX2xmdCk7XG5cdFx0XHRcdHAxX3J0Lk5leHQgPSBwMl9ydDtcblx0XHRcdFx0cDJfcnQuUHJldiA9IHAxX3J0O1xuXHRcdFx0XHRwMl9sZnQuTmV4dCA9IHAxX2xmdDtcblx0XHRcdFx0cDFfbGZ0LlByZXYgPSBwMl9sZnQ7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdC8vYSBiIGMgeCB5IHpcblx0XHRcdFx0cDFfcnQuTmV4dCA9IHAyX2xmdDtcblx0XHRcdFx0cDJfbGZ0LlByZXYgPSBwMV9ydDtcblx0XHRcdFx0cDFfbGZ0LlByZXYgPSBwMl9ydDtcblx0XHRcdFx0cDJfcnQuTmV4dCA9IHAxX2xmdDtcblx0XHRcdH1cblx0XHR9XG5cdFx0b3V0UmVjMS5Cb3R0b21QdCA9IG51bGw7XG5cdFx0aWYgKGhvbGVTdGF0ZVJlYyA9PT0gb3V0UmVjMilcblx0XHR7XG5cdFx0XHRpZiAob3V0UmVjMi5GaXJzdExlZnQgIT09IG91dFJlYzEpXG5cdFx0XHRcdG91dFJlYzEuRmlyc3RMZWZ0ID0gb3V0UmVjMi5GaXJzdExlZnQ7XG5cdFx0XHRvdXRSZWMxLklzSG9sZSA9IG91dFJlYzIuSXNIb2xlO1xuXHRcdH1cblx0XHRvdXRSZWMyLlB0cyA9IG51bGw7XG5cdFx0b3V0UmVjMi5Cb3R0b21QdCA9IG51bGw7XG5cdFx0b3V0UmVjMi5GaXJzdExlZnQgPSBvdXRSZWMxO1xuXHRcdHZhciBPS0lkeCA9IGUxLk91dElkeDtcblx0XHR2YXIgT2Jzb2xldGVJZHggPSBlMi5PdXRJZHg7XG5cdFx0ZTEuT3V0SWR4ID0gLTE7XG5cdFx0Ly9uYjogc2FmZSBiZWNhdXNlIHdlIG9ubHkgZ2V0IGhlcmUgdmlhIEFkZExvY2FsTWF4UG9seVxuXHRcdGUyLk91dElkeCA9IC0xO1xuXHRcdHZhciBlID0gdGhpcy5tX0FjdGl2ZUVkZ2VzO1xuXHRcdHdoaWxlIChlICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdGlmIChlLk91dElkeCA9PT0gT2Jzb2xldGVJZHgpXG5cdFx0XHR7XG5cdFx0XHRcdGUuT3V0SWR4ID0gT0tJZHg7XG5cdFx0XHRcdGUuU2lkZSA9IGUxLlNpZGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0ZSA9IGUuTmV4dEluQUVMO1xuXHRcdH1cblx0XHRvdXRSZWMyLklkeCA9IG91dFJlYzEuSWR4O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuUmV2ZXJzZVBvbHlQdExpbmtzID0gZnVuY3Rpb24gKHBwKVxuXHR7XG5cdFx0aWYgKHBwID09PSBudWxsKVxuXHRcdFx0cmV0dXJuO1xuXHRcdHZhciBwcDE7XG5cdFx0dmFyIHBwMjtcblx0XHRwcDEgPSBwcDtcblx0XHRkbyB7XG5cdFx0XHRwcDIgPSBwcDEuTmV4dDtcblx0XHRcdHBwMS5OZXh0ID0gcHAxLlByZXY7XG5cdFx0XHRwcDEuUHJldiA9IHBwMjtcblx0XHRcdHBwMSA9IHBwMjtcblx0XHR9XG5cdFx0d2hpbGUgKHBwMSAhPT0gcHApXG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLlN3YXBTaWRlcyA9IGZ1bmN0aW9uIChlZGdlMSwgZWRnZTIpXG5cdHtcblx0XHR2YXIgc2lkZSA9IGVkZ2UxLlNpZGU7XG5cdFx0ZWRnZTEuU2lkZSA9IGVkZ2UyLlNpZGU7XG5cdFx0ZWRnZTIuU2lkZSA9IHNpZGU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLlN3YXBQb2x5SW5kZXhlcyA9IGZ1bmN0aW9uIChlZGdlMSwgZWRnZTIpXG5cdHtcblx0XHR2YXIgb3V0SWR4ID0gZWRnZTEuT3V0SWR4O1xuXHRcdGVkZ2UxLk91dElkeCA9IGVkZ2UyLk91dElkeDtcblx0XHRlZGdlMi5PdXRJZHggPSBvdXRJZHg7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5JbnRlcnNlY3RFZGdlcyA9IGZ1bmN0aW9uIChlMSwgZTIsIHB0KVxuXHR7XG5cdFx0Ly9lMSB3aWxsIGJlIHRvIHRoZSBsZWZ0IG9mIGUyIEJFTE9XIHRoZSBpbnRlcnNlY3Rpb24uIFRoZXJlZm9yZSBlMSBpcyBiZWZvcmVcblx0XHQvL2UyIGluIEFFTCBleGNlcHQgd2hlbiBlMSBpcyBiZWluZyBpbnNlcnRlZCBhdCB0aGUgaW50ZXJzZWN0aW9uIHBvaW50IC4uLlxuXHRcdHZhciBlMUNvbnRyaWJ1dGluZyA9IChlMS5PdXRJZHggPj0gMCk7XG5cdFx0dmFyIGUyQ29udHJpYnV0aW5nID0gKGUyLk91dElkeCA+PSAwKTtcblxuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopXG5cdFx0XHR0aGlzLlNldFoocHQsIGUxLCBlMik7XG5cblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfbGluZXMpXG5cdFx0e1xuXHRcdFx0Ly9pZiBlaXRoZXIgZWRnZSBpcyBvbiBhbiBPUEVOIHBhdGggLi4uXG5cdFx0XHRpZiAoZTEuV2luZERlbHRhID09PSAwIHx8IGUyLldpbmREZWx0YSA9PT0gMClcblx0XHRcdHtcblx0XHRcdFx0Ly9pZ25vcmUgc3ViamVjdC1zdWJqZWN0IG9wZW4gcGF0aCBpbnRlcnNlY3Rpb25zIFVOTEVTUyB0aGV5XG5cdFx0XHRcdC8vYXJlIGJvdGggb3BlbiBwYXRocywgQU5EIHRoZXkgYXJlIGJvdGggJ2NvbnRyaWJ1dGluZyBtYXhpbWFzJyAuLi5cblx0XHRcdFx0aWYgKGUxLldpbmREZWx0YSA9PT0gMCAmJiBlMi5XaW5kRGVsdGEgPT09IDApIHJldHVybjtcblx0XHRcdFx0Ly9pZiBpbnRlcnNlY3RpbmcgYSBzdWJqIGxpbmUgd2l0aCBhIHN1YmogcG9seSAuLi5cblx0XHRcdFx0ZWxzZSBpZiAoZTEuUG9seVR5cCA9PT0gZTIuUG9seVR5cCAmJlxuXHRcdFx0XHRcdGUxLldpbmREZWx0YSAhPT0gZTIuV2luZERlbHRhICYmIHRoaXMubV9DbGlwVHlwZSA9PT0gQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKGUxLldpbmREZWx0YSA9PT0gMClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRpZiAoZTJDb250cmlidXRpbmcpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRoaXMuQWRkT3V0UHQoZTEsIHB0KTtcblx0XHRcdFx0XHRcdFx0aWYgKGUxQ29udHJpYnV0aW5nKVxuXHRcdFx0XHRcdFx0XHRcdGUxLk91dElkeCA9IC0xO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWYgKGUxQ29udHJpYnV0aW5nKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0aGlzLkFkZE91dFB0KGUyLCBwdCk7XG5cdFx0XHRcdFx0XHRcdGlmIChlMkNvbnRyaWJ1dGluZylcblx0XHRcdFx0XHRcdFx0XHRlMi5PdXRJZHggPSAtMTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAoZTEuUG9seVR5cCAhPT0gZTIuUG9seVR5cClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmICgoZTEuV2luZERlbHRhID09PSAwKSAmJiBNYXRoLmFicyhlMi5XaW5kQ250KSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0KHRoaXMubV9DbGlwVHlwZSAhPT0gQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uIHx8IGUyLldpbmRDbnQyID09PSAwKSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0aGlzLkFkZE91dFB0KGUxLCBwdCk7XG5cdFx0XHRcdFx0XHRpZiAoZTFDb250cmlidXRpbmcpXG5cdFx0XHRcdFx0XHRcdGUxLk91dElkeCA9IC0xO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmICgoZTIuV2luZERlbHRhID09PSAwKSAmJiAoTWF0aC5hYnMoZTEuV2luZENudCkgPT09IDEpICYmXG5cdFx0XHRcdFx0XHQodGhpcy5tX0NsaXBUeXBlICE9PSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24gfHwgZTEuV2luZENudDIgPT09IDApKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHRoaXMuQWRkT3V0UHQoZTIsIHB0KTtcblx0XHRcdFx0XHRcdGlmIChlMkNvbnRyaWJ1dGluZylcblx0XHRcdFx0XHRcdFx0ZTIuT3V0SWR4ID0gLTE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly91cGRhdGUgd2luZGluZyBjb3VudHMuLi5cblx0XHQvL2Fzc3VtZXMgdGhhdCBlMSB3aWxsIGJlIHRvIHRoZSBSaWdodCBvZiBlMiBBQk9WRSB0aGUgaW50ZXJzZWN0aW9uXG5cdFx0aWYgKGUxLlBvbHlUeXAgPT09IGUyLlBvbHlUeXApXG5cdFx0e1xuXHRcdFx0aWYgKHRoaXMuSXNFdmVuT2RkRmlsbFR5cGUoZTEpKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgb2xkRTFXaW5kQ250ID0gZTEuV2luZENudDtcblx0XHRcdFx0ZTEuV2luZENudCA9IGUyLldpbmRDbnQ7XG5cdFx0XHRcdGUyLldpbmRDbnQgPSBvbGRFMVdpbmRDbnQ7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChlMS5XaW5kQ250ICsgZTIuV2luZERlbHRhID09PSAwKVxuXHRcdFx0XHRcdGUxLldpbmRDbnQgPSAtZTEuV2luZENudDtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGUxLldpbmRDbnQgKz0gZTIuV2luZERlbHRhO1xuXHRcdFx0XHRpZiAoZTIuV2luZENudCAtIGUxLldpbmREZWx0YSA9PT0gMClcblx0XHRcdFx0XHRlMi5XaW5kQ250ID0gLWUyLldpbmRDbnQ7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRlMi5XaW5kQ250IC09IGUxLldpbmREZWx0YTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmICghdGhpcy5Jc0V2ZW5PZGRGaWxsVHlwZShlMikpXG5cdFx0XHRcdGUxLldpbmRDbnQyICs9IGUyLldpbmREZWx0YTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0ZTEuV2luZENudDIgPSAoZTEuV2luZENudDIgPT09IDApID8gMSA6IDA7XG5cdFx0XHRpZiAoIXRoaXMuSXNFdmVuT2RkRmlsbFR5cGUoZTEpKVxuXHRcdFx0XHRlMi5XaW5kQ250MiAtPSBlMS5XaW5kRGVsdGE7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGUyLldpbmRDbnQyID0gKGUyLldpbmRDbnQyID09PSAwKSA/IDEgOiAwO1xuXHRcdH1cblx0XHR2YXIgZTFGaWxsVHlwZSwgZTJGaWxsVHlwZSwgZTFGaWxsVHlwZTIsIGUyRmlsbFR5cGUyO1xuXHRcdGlmIChlMS5Qb2x5VHlwID09PSBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdClcblx0XHR7XG5cdFx0XHRlMUZpbGxUeXBlID0gdGhpcy5tX1N1YmpGaWxsVHlwZTtcblx0XHRcdGUxRmlsbFR5cGUyID0gdGhpcy5tX0NsaXBGaWxsVHlwZTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGUxRmlsbFR5cGUgPSB0aGlzLm1fQ2xpcEZpbGxUeXBlO1xuXHRcdFx0ZTFGaWxsVHlwZTIgPSB0aGlzLm1fU3ViakZpbGxUeXBlO1xuXHRcdH1cblx0XHRpZiAoZTIuUG9seVR5cCA9PT0gQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QpXG5cdFx0e1xuXHRcdFx0ZTJGaWxsVHlwZSA9IHRoaXMubV9TdWJqRmlsbFR5cGU7XG5cdFx0XHRlMkZpbGxUeXBlMiA9IHRoaXMubV9DbGlwRmlsbFR5cGU7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRlMkZpbGxUeXBlID0gdGhpcy5tX0NsaXBGaWxsVHlwZTtcblx0XHRcdGUyRmlsbFR5cGUyID0gdGhpcy5tX1N1YmpGaWxsVHlwZTtcblx0XHR9XG5cdFx0dmFyIGUxV2MsIGUyV2M7XG5cdFx0c3dpdGNoIChlMUZpbGxUeXBlKVxuXHRcdHtcblx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlOlxuXHRcdFx0ZTFXYyA9IGUxLldpbmRDbnQ7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5lZ2F0aXZlOlxuXHRcdFx0ZTFXYyA9IC1lMS5XaW5kQ250O1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGUxV2MgPSBNYXRoLmFicyhlMS5XaW5kQ250KTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRzd2l0Y2ggKGUyRmlsbFR5cGUpXG5cdFx0e1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0UG9zaXRpdmU6XG5cdFx0XHRlMldjID0gZTIuV2luZENudDtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0TmVnYXRpdmU6XG5cdFx0XHRlMldjID0gLWUyLldpbmRDbnQ7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0ZTJXYyA9IE1hdGguYWJzKGUyLldpbmRDbnQpO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGlmIChlMUNvbnRyaWJ1dGluZyAmJiBlMkNvbnRyaWJ1dGluZylcblx0XHR7XG5cdFx0XHRpZiAoKGUxV2MgIT09IDAgJiYgZTFXYyAhPT0gMSkgfHwgKGUyV2MgIT09IDAgJiYgZTJXYyAhPT0gMSkgfHxcblx0XHRcdFx0KGUxLlBvbHlUeXAgIT09IGUyLlBvbHlUeXAgJiYgdGhpcy5tX0NsaXBUeXBlICE9PSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0WG9yKSlcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRMb2NhbE1heFBvbHkoZTEsIGUyLCBwdCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuQWRkT3V0UHQoZTEsIHB0KTtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChlMiwgcHQpO1xuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuU3dhcFNpZGVzKGUxLCBlMik7XG5cdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlci5Td2FwUG9seUluZGV4ZXMoZTEsIGUyKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAoZTFDb250cmlidXRpbmcpXG5cdFx0e1xuXHRcdFx0aWYgKGUyV2MgPT09IDAgfHwgZTJXYyA9PT0gMSlcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChlMSwgcHQpO1xuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuU3dhcFNpZGVzKGUxLCBlMik7XG5cdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlci5Td2FwUG9seUluZGV4ZXMoZTEsIGUyKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAoZTJDb250cmlidXRpbmcpXG5cdFx0e1xuXHRcdFx0aWYgKGUxV2MgPT09IDAgfHwgZTFXYyA9PT0gMSlcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChlMiwgcHQpO1xuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuU3dhcFNpZGVzKGUxLCBlMik7XG5cdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlci5Td2FwUG9seUluZGV4ZXMoZTEsIGUyKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAoKGUxV2MgPT09IDAgfHwgZTFXYyA9PT0gMSkgJiYgKGUyV2MgPT09IDAgfHwgZTJXYyA9PT0gMSkpXG5cdFx0e1xuXHRcdFx0Ly9uZWl0aGVyIGVkZ2UgaXMgY3VycmVudGx5IGNvbnRyaWJ1dGluZyAuLi5cblx0XHRcdHZhciBlMVdjMiwgZTJXYzI7XG5cdFx0XHRzd2l0Y2ggKGUxRmlsbFR5cGUyKVxuXHRcdFx0e1xuXHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZTpcblx0XHRcdFx0ZTFXYzIgPSBlMS5XaW5kQ250Mjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5lZ2F0aXZlOlxuXHRcdFx0XHRlMVdjMiA9IC1lMS5XaW5kQ250Mjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRlMVdjMiA9IE1hdGguYWJzKGUxLldpbmRDbnQyKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2ggKGUyRmlsbFR5cGUyKVxuXHRcdFx0e1xuXHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZTpcblx0XHRcdFx0ZTJXYzIgPSBlMi5XaW5kQ250Mjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5lZ2F0aXZlOlxuXHRcdFx0XHRlMldjMiA9IC1lMi5XaW5kQ250Mjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRlMldjMiA9IE1hdGguYWJzKGUyLldpbmRDbnQyKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZTEuUG9seVR5cCAhPT0gZTIuUG9seVR5cClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRMb2NhbE1pblBvbHkoZTEsIGUyLCBwdCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChlMVdjID09PSAxICYmIGUyV2MgPT09IDEpXG5cdFx0XHRcdHN3aXRjaCAodGhpcy5tX0NsaXBUeXBlKVxuXHRcdFx0XHR7XG5cdFx0XHRcdGNhc2UgQ2xpcHBlckxpYi5DbGlwVHlwZS5jdEludGVyc2VjdGlvbjpcblx0XHRcdFx0XHRpZiAoZTFXYzIgPiAwICYmIGUyV2MyID4gMClcblx0XHRcdFx0XHRcdHRoaXMuQWRkTG9jYWxNaW5Qb2x5KGUxLCBlMiwgcHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbjpcblx0XHRcdFx0XHRpZiAoZTFXYzIgPD0gMCAmJiBlMldjMiA8PSAwKVxuXHRcdFx0XHRcdFx0dGhpcy5BZGRMb2NhbE1pblBvbHkoZTEsIGUyLCBwdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgQ2xpcHBlckxpYi5DbGlwVHlwZS5jdERpZmZlcmVuY2U6XG5cdFx0XHRcdFx0aWYgKCgoZTEuUG9seVR5cCA9PT0gQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdENsaXApICYmIChlMVdjMiA+IDApICYmIChlMldjMiA+IDApKSB8fFxuXHRcdFx0XHRcdFx0KChlMS5Qb2x5VHlwID09PSBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdCkgJiYgKGUxV2MyIDw9IDApICYmIChlMldjMiA8PSAwKSkpXG5cdFx0XHRcdFx0XHR0aGlzLkFkZExvY2FsTWluUG9seShlMSwgZTIsIHB0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0WG9yOlxuXHRcdFx0XHRcdHRoaXMuQWRkTG9jYWxNaW5Qb2x5KGUxLCBlMiwgcHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlci5Td2FwU2lkZXMoZTEsIGUyKTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5EZWxldGVGcm9tU0VMID0gZnVuY3Rpb24gKGUpXG5cdHtcblx0XHR2YXIgU2VsUHJldiA9IGUuUHJldkluU0VMO1xuXHRcdHZhciBTZWxOZXh0ID0gZS5OZXh0SW5TRUw7XG5cdFx0aWYgKFNlbFByZXYgPT09IG51bGwgJiYgU2VsTmV4dCA9PT0gbnVsbCAmJiAoZSAhPT0gdGhpcy5tX1NvcnRlZEVkZ2VzKSlcblx0XHRcdHJldHVybjtcblx0XHQvL2FscmVhZHkgZGVsZXRlZFxuXHRcdGlmIChTZWxQcmV2ICE9PSBudWxsKVxuXHRcdFx0U2VsUHJldi5OZXh0SW5TRUwgPSBTZWxOZXh0O1xuXHRcdGVsc2Vcblx0XHRcdHRoaXMubV9Tb3J0ZWRFZGdlcyA9IFNlbE5leHQ7XG5cdFx0aWYgKFNlbE5leHQgIT09IG51bGwpXG5cdFx0XHRTZWxOZXh0LlByZXZJblNFTCA9IFNlbFByZXY7XG5cdFx0ZS5OZXh0SW5TRUwgPSBudWxsO1xuXHRcdGUuUHJldkluU0VMID0gbnVsbDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlByb2Nlc3NIb3Jpem9udGFscyA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR2YXIgaG9yekVkZ2UgPSB7fTsgLy9tX1NvcnRlZEVkZ2VzO1xuXHRcdHdoaWxlICh0aGlzLlBvcEVkZ2VGcm9tU0VMKGhvcnpFZGdlKSlcblx0XHR7XG5cdFx0XHR0aGlzLlByb2Nlc3NIb3Jpem9udGFsKGhvcnpFZGdlLnYpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldEhvcnpEaXJlY3Rpb24gPSBmdW5jdGlvbiAoSG9yekVkZ2UsICR2YXIpXG5cdHtcblx0XHRpZiAoSG9yekVkZ2UuQm90LlggPCBIb3J6RWRnZS5Ub3AuWClcblx0XHR7XG5cdFx0XHQkdmFyLkxlZnQgPSBIb3J6RWRnZS5Cb3QuWDtcblx0XHRcdCR2YXIuUmlnaHQgPSBIb3J6RWRnZS5Ub3AuWDtcblx0XHRcdCR2YXIuRGlyID0gQ2xpcHBlckxpYi5EaXJlY3Rpb24uZExlZnRUb1JpZ2h0O1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0JHZhci5MZWZ0ID0gSG9yekVkZ2UuVG9wLlg7XG5cdFx0XHQkdmFyLlJpZ2h0ID0gSG9yekVkZ2UuQm90Llg7XG5cdFx0XHQkdmFyLkRpciA9IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRSaWdodFRvTGVmdDtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Qcm9jZXNzSG9yaXpvbnRhbCA9IGZ1bmN0aW9uIChob3J6RWRnZSlcblx0e1xuXHRcdHZhciAkdmFyID0ge1xuXHRcdFx0RGlyOiBudWxsLFxuXHRcdFx0TGVmdDogbnVsbCxcblx0XHRcdFJpZ2h0OiBudWxsXG5cdFx0fTtcblxuXHRcdHRoaXMuR2V0SG9yekRpcmVjdGlvbihob3J6RWRnZSwgJHZhcik7XG5cdFx0dmFyIGRpciA9ICR2YXIuRGlyO1xuXHRcdHZhciBob3J6TGVmdCA9ICR2YXIuTGVmdDtcblx0XHR2YXIgaG9yelJpZ2h0ID0gJHZhci5SaWdodDtcblxuXHRcdHZhciBJc09wZW4gPSBob3J6RWRnZS5XaW5kRGVsdGEgPT09IDA7XG5cblx0XHR2YXIgZUxhc3RIb3J6ID0gaG9yekVkZ2UsXG5cdFx0XHRlTWF4UGFpciA9IG51bGw7XG5cdFx0d2hpbGUgKGVMYXN0SG9yei5OZXh0SW5MTUwgIT09IG51bGwgJiYgQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Jc0hvcml6b250YWwoZUxhc3RIb3J6Lk5leHRJbkxNTCkpXG5cdFx0XHRlTGFzdEhvcnogPSBlTGFzdEhvcnouTmV4dEluTE1MO1xuXHRcdGlmIChlTGFzdEhvcnouTmV4dEluTE1MID09PSBudWxsKVxuXHRcdFx0ZU1heFBhaXIgPSB0aGlzLkdldE1heGltYVBhaXIoZUxhc3RIb3J6KTtcblxuXHRcdHZhciBjdXJyTWF4ID0gdGhpcy5tX01heGltYTtcblx0XHRpZiAoY3Vyck1heCAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHQvL2dldCB0aGUgZmlyc3QgbWF4aW1hIGluIHJhbmdlIChYKSAuLi5cblx0XHRcdGlmIChkaXIgPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRMZWZ0VG9SaWdodClcblx0XHRcdHtcblx0XHRcdFx0d2hpbGUgKGN1cnJNYXggIT09IG51bGwgJiYgY3Vyck1heC5YIDw9IGhvcnpFZGdlLkJvdC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y3Vyck1heCA9IGN1cnJNYXguTmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY3Vyck1heCAhPT0gbnVsbCAmJiBjdXJyTWF4LlggPj0gZUxhc3RIb3J6LlRvcC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y3Vyck1heCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0d2hpbGUgKGN1cnJNYXguTmV4dCAhPT0gbnVsbCAmJiBjdXJyTWF4Lk5leHQuWCA8IGhvcnpFZGdlLkJvdC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y3Vyck1heCA9IGN1cnJNYXguTmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY3Vyck1heC5YIDw9IGVMYXN0SG9yei5Ub3AuWClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGN1cnJNYXggPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHZhciBvcDEgPSBudWxsO1xuXHRcdGZvciAoOzspIC8vbG9vcCB0aHJvdWdoIGNvbnNlYy4gaG9yaXpvbnRhbCBlZGdlc1xuXHRcdHtcblx0XHRcdHZhciBJc0xhc3RIb3J6ID0gKGhvcnpFZGdlID09PSBlTGFzdEhvcnopO1xuXHRcdFx0dmFyIGUgPSB0aGlzLkdldE5leHRJbkFFTChob3J6RWRnZSwgZGlyKTtcblx0XHRcdHdoaWxlIChlICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHQvL3RoaXMgY29kZSBibG9jayBpbnNlcnRzIGV4dHJhIGNvb3JkcyBpbnRvIGhvcml6b250YWwgZWRnZXMgKGluIG91dHB1dFxuXHRcdFx0XHQvL3BvbHlnb25zKSB3aGVyZWV2ZXIgbWF4aW1hIHRvdWNoIHRoZXNlIGhvcml6b250YWwgZWRnZXMuIFRoaXMgaGVscHNcblx0XHRcdFx0Ly8nc2ltcGxpZnlpbmcnIHBvbHlnb25zIChpZSBpZiB0aGUgU2ltcGxpZnkgcHJvcGVydHkgaXMgc2V0KS5cblx0XHRcdFx0aWYgKGN1cnJNYXggIT09IG51bGwpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoZGlyID09PSBDbGlwcGVyTGliLkRpcmVjdGlvbi5kTGVmdFRvUmlnaHQpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0d2hpbGUgKGN1cnJNYXggIT09IG51bGwgJiYgY3Vyck1heC5YIDwgZS5DdXJyLlgpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMCAmJiAhSXNPcGVuKVxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5BZGRPdXRQdChob3J6RWRnZSwgbmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKGN1cnJNYXguWCwgaG9yekVkZ2UuQm90LlkpKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRjdXJyTWF4ID0gY3Vyck1heC5OZXh0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0d2hpbGUgKGN1cnJNYXggIT09IG51bGwgJiYgY3Vyck1heC5YID4gZS5DdXJyLlgpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMCAmJiAhSXNPcGVuKVxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5BZGRPdXRQdChob3J6RWRnZSwgbmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKGN1cnJNYXguWCwgaG9yekVkZ2UuQm90LlkpKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRjdXJyTWF4ID0gY3Vyck1heC5QcmV2O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICgoZGlyID09PSBDbGlwcGVyTGliLkRpcmVjdGlvbi5kTGVmdFRvUmlnaHQgJiYgZS5DdXJyLlggPiBob3J6UmlnaHQpIHx8IChkaXIgPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRSaWdodFRvTGVmdCAmJiBlLkN1cnIuWCA8IGhvcnpMZWZ0KSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9BbHNvIGJyZWFrIGlmIHdlJ3ZlIGdvdCB0byB0aGUgZW5kIG9mIGFuIGludGVybWVkaWF0ZSBob3Jpem9udGFsIGVkZ2UgLi4uXG5cdFx0XHRcdC8vbmI6IFNtYWxsZXIgRHgncyBhcmUgdG8gdGhlIHJpZ2h0IG9mIGxhcmdlciBEeCdzIEFCT1ZFIHRoZSBob3Jpem9udGFsLlxuXHRcdFx0XHRpZiAoZS5DdXJyLlggPT09IGhvcnpFZGdlLlRvcC5YICYmIGhvcnpFZGdlLk5leHRJbkxNTCAhPT0gbnVsbCAmJiBlLkR4IDwgaG9yekVkZ2UuTmV4dEluTE1MLkR4KVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMCAmJiAhSXNPcGVuKSAvL25vdGU6IG1heSBiZSBkb25lIG11bHRpcGxlIHRpbWVzXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlmIChkaXIgPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRMZWZ0VG9SaWdodClcblx0XHRcdFx0XHRcdFx0dGhpcy5TZXRaKGUuQ3VyciwgaG9yekVkZ2UsIGUpO1xuXHRcdFx0XHRcdFx0ZWxzZSB0aGlzLlNldFooZS5DdXJyLCBlLCBob3J6RWRnZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3AxID0gdGhpcy5BZGRPdXRQdChob3J6RWRnZSwgZS5DdXJyKTtcblx0XHRcdFx0XHR2YXIgZU5leHRIb3J6ID0gdGhpcy5tX1NvcnRlZEVkZ2VzO1xuXHRcdFx0XHRcdHdoaWxlIChlTmV4dEhvcnogIT09IG51bGwpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWYgKGVOZXh0SG9yei5PdXRJZHggPj0gMCAmJiB0aGlzLkhvcnpTZWdtZW50c092ZXJsYXAoaG9yekVkZ2UuQm90LlgsIGhvcnpFZGdlLlRvcC5YLCBlTmV4dEhvcnouQm90LlgsIGVOZXh0SG9yei5Ub3AuWCkpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHZhciBvcDIgPSB0aGlzLkdldExhc3RPdXRQdChlTmV4dEhvcnopO1xuXHRcdFx0XHRcdFx0XHR0aGlzLkFkZEpvaW4ob3AyLCBvcDEsIGVOZXh0SG9yei5Ub3ApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZU5leHRIb3J6ID0gZU5leHRIb3J6Lk5leHRJblNFTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5BZGRHaG9zdEpvaW4ob3AxLCBob3J6RWRnZS5Cb3QpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9PSywgc28gZmFyIHdlJ3JlIHN0aWxsIGluIHJhbmdlIG9mIHRoZSBob3Jpem9udGFsIEVkZ2UgIGJ1dCBtYWtlIHN1cmVcblx0XHRcdFx0Ly93ZSdyZSBhdCB0aGUgbGFzdCBvZiBjb25zZWMuIGhvcml6b250YWxzIHdoZW4gbWF0Y2hpbmcgd2l0aCBlTWF4UGFpclxuXHRcdFx0XHRpZiAoZSA9PT0gZU1heFBhaXIgJiYgSXNMYXN0SG9yeilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0aGlzLkFkZExvY2FsTWF4UG9seShob3J6RWRnZSwgZU1heFBhaXIsIGhvcnpFZGdlLlRvcCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuRGVsZXRlRnJvbUFFTChob3J6RWRnZSk7XG5cdFx0XHRcdFx0dGhpcy5EZWxldGVGcm9tQUVMKGVNYXhQYWlyKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZGlyID09PSBDbGlwcGVyTGliLkRpcmVjdGlvbi5kTGVmdFRvUmlnaHQpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgUHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoZS5DdXJyLlgsIGhvcnpFZGdlLkN1cnIuWSk7XG5cdFx0XHRcdFx0dGhpcy5JbnRlcnNlY3RFZGdlcyhob3J6RWRnZSwgZSwgUHQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBQdCA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MihlLkN1cnIuWCwgaG9yekVkZ2UuQ3Vyci5ZKTtcblx0XHRcdFx0XHR0aGlzLkludGVyc2VjdEVkZ2VzKGUsIGhvcnpFZGdlLCBQdCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGVOZXh0ID0gdGhpcy5HZXROZXh0SW5BRUwoZSwgZGlyKTtcblx0XHRcdFx0dGhpcy5Td2FwUG9zaXRpb25zSW5BRUwoaG9yekVkZ2UsIGUpO1xuXHRcdFx0XHRlID0gZU5leHQ7XG5cdFx0XHR9IC8vZW5kIHdoaWxlKGUgIT09IG51bGwpXG5cblx0XHRcdC8vQnJlYWsgb3V0IG9mIGxvb3AgaWYgSG9yekVkZ2UuTmV4dEluTE1MIGlzIG5vdCBhbHNvIGhvcml6b250YWwgLi4uXG5cdFx0XHRpZiAoaG9yekVkZ2UuTmV4dEluTE1MID09PSBudWxsIHx8ICFDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbChob3J6RWRnZS5OZXh0SW5MTUwpKVxuXHRcdFx0e1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0aG9yekVkZ2UgPSB0aGlzLlVwZGF0ZUVkZ2VJbnRvQUVMKGhvcnpFZGdlKTtcblx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChob3J6RWRnZSwgaG9yekVkZ2UuQm90KTtcblx0XHRcdH1cblxuXHRcdFx0JHZhciA9IHtcblx0XHRcdFx0RGlyOiBkaXIsXG5cdFx0XHRcdExlZnQ6IGhvcnpMZWZ0LFxuXHRcdFx0XHRSaWdodDogaG9yelJpZ2h0XG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLkdldEhvcnpEaXJlY3Rpb24oaG9yekVkZ2UsICR2YXIpO1xuXHRcdFx0ZGlyID0gJHZhci5EaXI7XG5cdFx0XHRob3J6TGVmdCA9ICR2YXIuTGVmdDtcblx0XHRcdGhvcnpSaWdodCA9ICR2YXIuUmlnaHQ7XG5cblx0XHR9IC8vZW5kIGZvciAoOzspXG5cblx0XHRpZiAoaG9yekVkZ2UuT3V0SWR4ID49IDAgJiYgb3AxID09PSBudWxsKVxuXHRcdHtcblx0XHRcdG9wMSA9IHRoaXMuR2V0TGFzdE91dFB0KGhvcnpFZGdlKTtcblx0XHRcdHZhciBlTmV4dEhvcnogPSB0aGlzLm1fU29ydGVkRWRnZXM7XG5cdFx0XHR3aGlsZSAoZU5leHRIb3J6ICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoZU5leHRIb3J6Lk91dElkeCA+PSAwICYmIHRoaXMuSG9yelNlZ21lbnRzT3ZlcmxhcChob3J6RWRnZS5Cb3QuWCwgaG9yekVkZ2UuVG9wLlgsIGVOZXh0SG9yei5Cb3QuWCwgZU5leHRIb3J6LlRvcC5YKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBvcDIgPSB0aGlzLkdldExhc3RPdXRQdChlTmV4dEhvcnopO1xuXHRcdFx0XHRcdHRoaXMuQWRkSm9pbihvcDIsIG9wMSwgZU5leHRIb3J6LlRvcCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZU5leHRIb3J6ID0gZU5leHRIb3J6Lk5leHRJblNFTDtcblx0XHRcdH1cblx0XHRcdHRoaXMuQWRkR2hvc3RKb2luKG9wMSwgaG9yekVkZ2UuVG9wKTtcblx0XHR9XG5cblx0XHRpZiAoaG9yekVkZ2UuTmV4dEluTE1MICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMClcblx0XHRcdHtcblx0XHRcdFx0b3AxID0gdGhpcy5BZGRPdXRQdChob3J6RWRnZSwgaG9yekVkZ2UuVG9wKTtcblxuXHRcdFx0XHRob3J6RWRnZSA9IHRoaXMuVXBkYXRlRWRnZUludG9BRUwoaG9yekVkZ2UpO1xuXHRcdFx0XHRpZiAoaG9yekVkZ2UuV2luZERlbHRhID09PSAwKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vbmI6IEhvcnpFZGdlIGlzIG5vIGxvbmdlciBob3Jpem9udGFsIGhlcmVcblx0XHRcdFx0dmFyIGVQcmV2ID0gaG9yekVkZ2UuUHJldkluQUVMO1xuXHRcdFx0XHR2YXIgZU5leHQgPSBob3J6RWRnZS5OZXh0SW5BRUw7XG5cdFx0XHRcdGlmIChlUHJldiAhPT0gbnVsbCAmJiBlUHJldi5DdXJyLlggPT09IGhvcnpFZGdlLkJvdC5YICYmIGVQcmV2LkN1cnIuWSA9PT0gaG9yekVkZ2UuQm90LlkgJiYgZVByZXYuV2luZERlbHRhID09PSAwICYmIChlUHJldi5PdXRJZHggPj0gMCAmJiBlUHJldi5DdXJyLlkgPiBlUHJldi5Ub3AuWSAmJiBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsMyhob3J6RWRnZSwgZVByZXYsIHRoaXMubV9Vc2VGdWxsUmFuZ2UpKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBvcDIgPSB0aGlzLkFkZE91dFB0KGVQcmV2LCBob3J6RWRnZS5Cb3QpO1xuXHRcdFx0XHRcdHRoaXMuQWRkSm9pbihvcDEsIG9wMiwgaG9yekVkZ2UuVG9wKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmIChlTmV4dCAhPT0gbnVsbCAmJiBlTmV4dC5DdXJyLlggPT09IGhvcnpFZGdlLkJvdC5YICYmIGVOZXh0LkN1cnIuWSA9PT0gaG9yekVkZ2UuQm90LlkgJiYgZU5leHQuV2luZERlbHRhICE9PSAwICYmIGVOZXh0Lk91dElkeCA+PSAwICYmIGVOZXh0LkN1cnIuWSA+IGVOZXh0LlRvcC5ZICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWwzKGhvcnpFZGdlLCBlTmV4dCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgb3AyID0gdGhpcy5BZGRPdXRQdChlTmV4dCwgaG9yekVkZ2UuQm90KTtcblx0XHRcdFx0XHR0aGlzLkFkZEpvaW4ob3AxLCBvcDIsIGhvcnpFZGdlLlRvcCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0aG9yekVkZ2UgPSB0aGlzLlVwZGF0ZUVkZ2VJbnRvQUVMKGhvcnpFZGdlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChob3J6RWRnZSwgaG9yekVkZ2UuVG9wKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuRGVsZXRlRnJvbUFFTChob3J6RWRnZSk7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuR2V0TmV4dEluQUVMID0gZnVuY3Rpb24gKGUsIERpcmVjdGlvbilcblx0e1xuXHRcdHJldHVybiBEaXJlY3Rpb24gPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRMZWZ0VG9SaWdodCA/IGUuTmV4dEluQUVMIDogZS5QcmV2SW5BRUw7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Jc01pbmltYSA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0cmV0dXJuIGUgIT09IG51bGwgJiYgKGUuUHJldi5OZXh0SW5MTUwgIT09IGUpICYmIChlLk5leHQuTmV4dEluTE1MICE9PSBlKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLklzTWF4aW1hID0gZnVuY3Rpb24gKGUsIFkpXG5cdHtcblx0XHRyZXR1cm4gKGUgIT09IG51bGwgJiYgZS5Ub3AuWSA9PT0gWSAmJiBlLk5leHRJbkxNTCA9PT0gbnVsbCk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Jc0ludGVybWVkaWF0ZSA9IGZ1bmN0aW9uIChlLCBZKVxuXHR7XG5cdFx0cmV0dXJuIChlLlRvcC5ZID09PSBZICYmIGUuTmV4dEluTE1MICE9PSBudWxsKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldE1heGltYVBhaXIgPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdGlmICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShlLk5leHQuVG9wLCBlLlRvcCkpICYmIGUuTmV4dC5OZXh0SW5MTUwgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIGUuTmV4dDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShlLlByZXYuVG9wLCBlLlRvcCkpICYmIGUuUHJldi5OZXh0SW5MTUwgPT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBlLlByZXY7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldE1heGltYVBhaXJFeCA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0Ly9hcyBhYm92ZSBidXQgcmV0dXJucyBudWxsIGlmIE1heFBhaXIgaXNuJ3QgaW4gQUVMICh1bmxlc3MgaXQncyBob3Jpem9udGFsKVxuXHRcdHZhciByZXN1bHQgPSB0aGlzLkdldE1heGltYVBhaXIoZSk7XG5cdFx0aWYgKHJlc3VsdCA9PT0gbnVsbCB8fCByZXN1bHQuT3V0SWR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNraXAgfHxcblx0XHRcdCgocmVzdWx0Lk5leHRJbkFFTCA9PT0gcmVzdWx0LlByZXZJbkFFTCkgJiYgIUNsaXBwZXJMaWIuQ2xpcHBlckJhc2UuSXNIb3Jpem9udGFsKHJlc3VsdCkpKVxuXHRcdHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuUHJvY2Vzc0ludGVyc2VjdGlvbnMgPSBmdW5jdGlvbiAodG9wWSlcblx0e1xuXHRcdGlmICh0aGlzLm1fQWN0aXZlRWRnZXMgPT09IG51bGwpXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR0cnlcblx0XHR7XG5cdFx0XHR0aGlzLkJ1aWxkSW50ZXJzZWN0TGlzdCh0b3BZKTtcblx0XHRcdGlmICh0aGlzLm1fSW50ZXJzZWN0TGlzdC5sZW5ndGggPT09IDApXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0aWYgKHRoaXMubV9JbnRlcnNlY3RMaXN0Lmxlbmd0aCA9PT0gMSB8fCB0aGlzLkZpeHVwSW50ZXJzZWN0aW9uT3JkZXIoKSlcblx0XHRcdFx0dGhpcy5Qcm9jZXNzSW50ZXJzZWN0TGlzdCgpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGNhdGNoICgkJGUyKVxuXHRcdHtcblx0XHRcdHRoaXMubV9Tb3J0ZWRFZGdlcyA9IG51bGw7XG5cdFx0XHR0aGlzLm1fSW50ZXJzZWN0TGlzdC5sZW5ndGggPSAwO1xuXHRcdFx0Q2xpcHBlckxpYi5FcnJvcihcIlByb2Nlc3NJbnRlcnNlY3Rpb25zIGVycm9yXCIpO1xuXHRcdH1cblx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBudWxsO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuQnVpbGRJbnRlcnNlY3RMaXN0ID0gZnVuY3Rpb24gKHRvcFkpXG5cdHtcblx0XHRpZiAodGhpcy5tX0FjdGl2ZUVkZ2VzID09PSBudWxsKVxuXHRcdFx0cmV0dXJuO1xuXHRcdC8vcHJlcGFyZSBmb3Igc29ydGluZyAuLi5cblx0XHR2YXIgZSA9IHRoaXMubV9BY3RpdmVFZGdlcztcblx0XHQvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KEpTT04uZGVjeWNsZSggZSApKSk7XG5cdFx0dGhpcy5tX1NvcnRlZEVkZ2VzID0gZTtcblx0XHR3aGlsZSAoZSAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHRlLlByZXZJblNFTCA9IGUuUHJldkluQUVMO1xuXHRcdFx0ZS5OZXh0SW5TRUwgPSBlLk5leHRJbkFFTDtcblx0XHRcdGUuQ3Vyci5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZSwgdG9wWSk7XG5cdFx0XHRlID0gZS5OZXh0SW5BRUw7XG5cdFx0fVxuXHRcdC8vYnViYmxlc29ydCAuLi5cblx0XHR2YXIgaXNNb2RpZmllZCA9IHRydWU7XG5cdFx0d2hpbGUgKGlzTW9kaWZpZWQgJiYgdGhpcy5tX1NvcnRlZEVkZ2VzICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdGlzTW9kaWZpZWQgPSBmYWxzZTtcblx0XHRcdGUgPSB0aGlzLm1fU29ydGVkRWRnZXM7XG5cdFx0XHR3aGlsZSAoZS5OZXh0SW5TRUwgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBlTmV4dCA9IGUuTmV4dEluU0VMO1xuXHRcdFx0XHR2YXIgcHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDAoKTtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImUuQ3Vyci5YOiBcIiArIGUuQ3Vyci5YICsgXCIgZU5leHQuQ3Vyci5YXCIgKyBlTmV4dC5DdXJyLlgpO1xuXHRcdFx0XHRpZiAoZS5DdXJyLlggPiBlTmV4dC5DdXJyLlgpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0aGlzLkludGVyc2VjdFBvaW50KGUsIGVOZXh0LCBwdCk7XG5cdFx0XHRcdFx0aWYgKHB0LlkgPCB0b3BZKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHB0ID0gbmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGUsIHRvcFkpLCB0b3BZKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIG5ld05vZGUgPSBuZXcgQ2xpcHBlckxpYi5JbnRlcnNlY3ROb2RlKCk7XG5cdFx0XHRcdFx0bmV3Tm9kZS5FZGdlMSA9IGU7XG5cdFx0XHRcdFx0bmV3Tm9kZS5FZGdlMiA9IGVOZXh0O1xuXHRcdFx0XHRcdC8vbmV3Tm9kZS5QdCA9IHB0O1xuXHRcdFx0XHRcdG5ld05vZGUuUHQuWCA9IHB0Llg7XG5cdFx0XHRcdFx0bmV3Tm9kZS5QdC5ZID0gcHQuWTtcblx0XHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBuZXdOb2RlLlB0LlogPSBwdC5aO1xuXHRcdFx0XHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0LnB1c2gobmV3Tm9kZSk7XG5cdFx0XHRcdFx0dGhpcy5Td2FwUG9zaXRpb25zSW5TRUwoZSwgZU5leHQpO1xuXHRcdFx0XHRcdGlzTW9kaWZpZWQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRlID0gZU5leHQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZS5QcmV2SW5TRUwgIT09IG51bGwpXG5cdFx0XHRcdGUuUHJldkluU0VMLk5leHRJblNFTCA9IG51bGw7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBudWxsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRWRnZXNBZGphY2VudCA9IGZ1bmN0aW9uIChpbm9kZSlcblx0e1xuXHRcdHJldHVybiAoaW5vZGUuRWRnZTEuTmV4dEluU0VMID09PSBpbm9kZS5FZGdlMikgfHwgKGlub2RlLkVkZ2UxLlByZXZJblNFTCA9PT0gaW5vZGUuRWRnZTIpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5JbnRlcnNlY3ROb2RlU29ydCA9IGZ1bmN0aW9uIChub2RlMSwgbm9kZTIpXG5cdHtcblx0XHQvL3RoZSBmb2xsb3dpbmcgdHlwZWNhc3QgaXMgc2FmZSBiZWNhdXNlIHRoZSBkaWZmZXJlbmNlcyBpbiBQdC5ZIHdpbGxcblx0XHQvL2JlIGxpbWl0ZWQgdG8gdGhlIGhlaWdodCBvZiB0aGUgc2NhbmJlYW0uXG5cdFx0cmV0dXJuIChub2RlMi5QdC5ZIC0gbm9kZTEuUHQuWSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5GaXh1cEludGVyc2VjdGlvbk9yZGVyID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdC8vcHJlLWNvbmRpdGlvbjogaW50ZXJzZWN0aW9ucyBhcmUgc29ydGVkIGJvdHRvbS1tb3N0IGZpcnN0LlxuXHRcdC8vTm93IGl0J3MgY3J1Y2lhbCB0aGF0IGludGVyc2VjdGlvbnMgYXJlIG1hZGUgb25seSBiZXR3ZWVuIGFkamFjZW50IGVkZ2VzLFxuXHRcdC8vc28gdG8gZW5zdXJlIHRoaXMgdGhlIG9yZGVyIG9mIGludGVyc2VjdGlvbnMgbWF5IG5lZWQgYWRqdXN0aW5nIC4uLlxuXHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0LnNvcnQodGhpcy5tX0ludGVyc2VjdE5vZGVDb21wYXJlcik7XG5cdFx0dGhpcy5Db3B5QUVMVG9TRUwoKTtcblx0XHR2YXIgY250ID0gdGhpcy5tX0ludGVyc2VjdExpc3QubGVuZ3RoO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY250OyBpKyspXG5cdFx0e1xuXHRcdFx0aWYgKCF0aGlzLkVkZ2VzQWRqYWNlbnQodGhpcy5tX0ludGVyc2VjdExpc3RbaV0pKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgaiA9IGkgKyAxO1xuXHRcdFx0XHR3aGlsZSAoaiA8IGNudCAmJiAhdGhpcy5FZGdlc0FkamFjZW50KHRoaXMubV9JbnRlcnNlY3RMaXN0W2pdKSlcblx0XHRcdFx0XHRqKys7XG5cdFx0XHRcdGlmIChqID09PSBjbnQpXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR2YXIgdG1wID0gdGhpcy5tX0ludGVyc2VjdExpc3RbaV07XG5cdFx0XHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0W2ldID0gdGhpcy5tX0ludGVyc2VjdExpc3Rbal07XG5cdFx0XHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0W2pdID0gdG1wO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5Td2FwUG9zaXRpb25zSW5TRUwodGhpcy5tX0ludGVyc2VjdExpc3RbaV0uRWRnZTEsIHRoaXMubV9JbnRlcnNlY3RMaXN0W2ldLkVkZ2UyKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Qcm9jZXNzSW50ZXJzZWN0TGlzdCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IHRoaXMubV9JbnRlcnNlY3RMaXN0Lmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHR2YXIgaU5vZGUgPSB0aGlzLm1fSW50ZXJzZWN0TGlzdFtpXTtcblx0XHRcdHRoaXMuSW50ZXJzZWN0RWRnZXMoaU5vZGUuRWRnZTEsIGlOb2RlLkVkZ2UyLCBpTm9kZS5QdCk7XG5cdFx0XHR0aGlzLlN3YXBQb3NpdGlvbnNJbkFFTChpTm9kZS5FZGdlMSwgaU5vZGUuRWRnZTIpO1xuXHRcdH1cblx0XHR0aGlzLm1fSW50ZXJzZWN0TGlzdC5sZW5ndGggPSAwO1xuXHR9O1xuXG5cdC8qXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFJvdW5kIHNwZWVkdGVzdDogaHR0cDovL2pzcGVyZi5jb20vZmFzdGVzdC1yb3VuZFxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQqL1xuXHR2YXIgUjEgPSBmdW5jdGlvbiAoYSlcblx0e1xuXHRcdHJldHVybiBhIDwgMCA/IE1hdGguY2VpbChhIC0gMC41KSA6IE1hdGgucm91bmQoYSlcblx0fTtcblxuXHR2YXIgUjIgPSBmdW5jdGlvbiAoYSlcblx0e1xuXHRcdHJldHVybiBhIDwgMCA/IE1hdGguY2VpbChhIC0gMC41KSA6IE1hdGguZmxvb3IoYSArIDAuNSlcblx0fTtcblxuXHR2YXIgUjMgPSBmdW5jdGlvbiAoYSlcblx0e1xuXHRcdHJldHVybiBhIDwgMCA/IC1NYXRoLnJvdW5kKE1hdGguYWJzKGEpKSA6IE1hdGgucm91bmQoYSlcblx0fTtcblxuXHR2YXIgUjQgPSBmdW5jdGlvbiAoYSlcblx0e1xuXHRcdGlmIChhIDwgMClcblx0XHR7XG5cdFx0XHRhIC09IDAuNTtcblx0XHRcdHJldHVybiBhIDwgLTIxNDc0ODM2NDggPyBNYXRoLmNlaWwoYSkgOiBhIHwgMDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGEgKz0gMC41O1xuXHRcdFx0cmV0dXJuIGEgPiAyMTQ3NDgzNjQ3ID8gTWF0aC5mbG9vcihhKSA6IGEgfCAwO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoYnJvd3Nlci5tc2llKSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQgPSBSMTtcblx0ZWxzZSBpZiAoYnJvd3Nlci5jaHJvbWl1bSkgQ2xpcHBlckxpYi5DbGlwcGVyLlJvdW5kID0gUjM7XG5cdGVsc2UgaWYgKGJyb3dzZXIuc2FmYXJpKSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQgPSBSNDtcblx0ZWxzZSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQgPSBSMjsgLy8gZWcuIGJyb3dzZXIuY2hyb21lIHx8IGJyb3dzZXIuZmlyZWZveCB8fCBicm93c2VyLm9wZXJhXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYID0gZnVuY3Rpb24gKGVkZ2UsIGN1cnJlbnRZKVxuXHR7XG5cdFx0Ly9pZiAoZWRnZS5Cb3QgPT0gZWRnZS5DdXJyKSBhbGVydCAoXCJlZGdlLkJvdCA9IGVkZ2UuQ3VyclwiKTtcblx0XHQvL2lmIChlZGdlLkJvdCA9PSBlZGdlLlRvcCkgYWxlcnQgKFwiZWRnZS5Cb3QgPSBlZGdlLlRvcFwiKTtcblx0XHRpZiAoY3VycmVudFkgPT09IGVkZ2UuVG9wLlkpXG5cdFx0XHRyZXR1cm4gZWRnZS5Ub3AuWDtcblx0XHRyZXR1cm4gZWRnZS5Cb3QuWCArIENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZChlZGdlLkR4ICogKGN1cnJlbnRZIC0gZWRnZS5Cb3QuWSkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSW50ZXJzZWN0UG9pbnQgPSBmdW5jdGlvbiAoZWRnZTEsIGVkZ2UyLCBpcClcblx0e1xuXHRcdGlwLlggPSAwO1xuXHRcdGlwLlkgPSAwO1xuXHRcdHZhciBiMSwgYjI7XG5cdFx0Ly9uYjogd2l0aCB2ZXJ5IGxhcmdlIGNvb3JkaW5hdGUgdmFsdWVzLCBpdCdzIHBvc3NpYmxlIGZvciBTbG9wZXNFcXVhbCgpIHRvXG5cdFx0Ly9yZXR1cm4gZmFsc2UgYnV0IGZvciB0aGUgZWRnZS5EeCB2YWx1ZSBiZSBlcXVhbCBkdWUgdG8gZG91YmxlIHByZWNpc2lvbiByb3VuZGluZy5cblx0XHRpZiAoZWRnZTEuRHggPT09IGVkZ2UyLkR4KVxuXHRcdHtcblx0XHRcdGlwLlkgPSBlZGdlMS5DdXJyLlk7XG5cdFx0XHRpcC5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZWRnZTEsIGlwLlkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoZWRnZTEuRGVsdGEuWCA9PT0gMClcblx0XHR7XG5cdFx0XHRpcC5YID0gZWRnZTEuQm90Llg7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Jc0hvcml6b250YWwoZWRnZTIpKVxuXHRcdFx0e1xuXHRcdFx0XHRpcC5ZID0gZWRnZTIuQm90Llk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdGIyID0gZWRnZTIuQm90LlkgLSAoZWRnZTIuQm90LlggLyBlZGdlMi5EeCk7XG5cdFx0XHRcdGlwLlkgPSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQoaXAuWCAvIGVkZ2UyLkR4ICsgYjIpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGlmIChlZGdlMi5EZWx0YS5YID09PSAwKVxuXHRcdHtcblx0XHRcdGlwLlggPSBlZGdlMi5Cb3QuWDtcblx0XHRcdGlmIChDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbChlZGdlMSkpXG5cdFx0XHR7XG5cdFx0XHRcdGlwLlkgPSBlZGdlMS5Cb3QuWTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0YjEgPSBlZGdlMS5Cb3QuWSAtIChlZGdlMS5Cb3QuWCAvIGVkZ2UxLkR4KTtcblx0XHRcdFx0aXAuWSA9IENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZChpcC5YIC8gZWRnZTEuRHggKyBiMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRiMSA9IGVkZ2UxLkJvdC5YIC0gZWRnZTEuQm90LlkgKiBlZGdlMS5EeDtcblx0XHRcdGIyID0gZWRnZTIuQm90LlggLSBlZGdlMi5Cb3QuWSAqIGVkZ2UyLkR4O1xuXHRcdFx0dmFyIHEgPSAoYjIgLSBiMSkgLyAoZWRnZTEuRHggLSBlZGdlMi5EeCk7XG5cdFx0XHRpcC5ZID0gQ2xpcHBlckxpYi5DbGlwcGVyLlJvdW5kKHEpO1xuXHRcdFx0aWYgKE1hdGguYWJzKGVkZ2UxLkR4KSA8IE1hdGguYWJzKGVkZ2UyLkR4KSlcblx0XHRcdFx0aXAuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZChlZGdlMS5EeCAqIHEgKyBiMSk7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGlwLlggPSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQoZWRnZTIuRHggKiBxICsgYjIpO1xuXHRcdH1cblx0XHRpZiAoaXAuWSA8IGVkZ2UxLlRvcC5ZIHx8IGlwLlkgPCBlZGdlMi5Ub3AuWSlcblx0XHR7XG5cdFx0XHRpZiAoZWRnZTEuVG9wLlkgPiBlZGdlMi5Ub3AuWSlcblx0XHRcdHtcblx0XHRcdFx0aXAuWSA9IGVkZ2UxLlRvcC5ZO1xuXHRcdFx0XHRpcC5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZWRnZTIsIGVkZ2UxLlRvcC5ZKTtcblx0XHRcdFx0cmV0dXJuIGlwLlggPCBlZGdlMS5Ub3AuWDtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0aXAuWSA9IGVkZ2UyLlRvcC5ZO1xuXHRcdFx0aWYgKE1hdGguYWJzKGVkZ2UxLkR4KSA8IE1hdGguYWJzKGVkZ2UyLkR4KSlcblx0XHRcdFx0aXAuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGVkZ2UxLCBpcC5ZKTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0aXAuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGVkZ2UyLCBpcC5ZKTtcblx0XHR9XG5cdFx0Ly9maW5hbGx5LCBkb24ndCBhbGxvdyAnaXAnIHRvIGJlIEJFTE9XIGN1cnIuWSAoaWUgYm90dG9tIG9mIHNjYW5iZWFtKSAuLi5cblx0XHRpZiAoaXAuWSA+IGVkZ2UxLkN1cnIuWSlcblx0XHR7XG5cdFx0XHRpcC5ZID0gZWRnZTEuQ3Vyci5ZO1xuXHRcdFx0Ly9iZXR0ZXIgdG8gdXNlIHRoZSBtb3JlIHZlcnRpY2FsIGVkZ2UgdG8gZGVyaXZlIFggLi4uXG5cdFx0XHRpZiAoTWF0aC5hYnMoZWRnZTEuRHgpID4gTWF0aC5hYnMoZWRnZTIuRHgpKVxuXHRcdFx0XHRpcC5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZWRnZTIsIGlwLlkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRpcC5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZWRnZTEsIGlwLlkpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlByb2Nlc3NFZGdlc0F0VG9wT2ZTY2FuYmVhbSA9IGZ1bmN0aW9uICh0b3BZKVxuXHR7XG5cdFx0dmFyIGUgPSB0aGlzLm1fQWN0aXZlRWRnZXM7XG5cblx0XHR3aGlsZSAoZSAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHQvLzEuIHByb2Nlc3MgbWF4aW1hLCB0cmVhdGluZyB0aGVtIGFzIGlmIHRoZXkncmUgJ2JlbnQnIGhvcml6b250YWwgZWRnZXMsXG5cdFx0XHQvLyAgIGJ1dCBleGNsdWRlIG1heGltYSB3aXRoIGhvcml6b250YWwgZWRnZXMuIG5iOiBlIGNhbid0IGJlIGEgaG9yaXpvbnRhbC5cblx0XHRcdHZhciBJc01heGltYUVkZ2UgPSB0aGlzLklzTWF4aW1hKGUsIHRvcFkpO1xuXHRcdFx0aWYgKElzTWF4aW1hRWRnZSlcblx0XHRcdHtcblx0XHRcdFx0dmFyIGVNYXhQYWlyID0gdGhpcy5HZXRNYXhpbWFQYWlyRXgoZSk7XG5cdFx0XHRcdElzTWF4aW1hRWRnZSA9IChlTWF4UGFpciA9PT0gbnVsbCB8fCAhQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Jc0hvcml6b250YWwoZU1heFBhaXIpKTtcblx0XHRcdH1cblx0XHRcdGlmIChJc01heGltYUVkZ2UpXG5cdFx0XHR7XG5cdFx0XHRcdGlmICh0aGlzLlN0cmljdGx5U2ltcGxlKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGhpcy5JbnNlcnRNYXhpbWEoZS5Ub3AuWCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGVQcmV2ID0gZS5QcmV2SW5BRUw7XG5cdFx0XHRcdHRoaXMuRG9NYXhpbWEoZSk7XG5cdFx0XHRcdGlmIChlUHJldiA9PT0gbnVsbClcblx0XHRcdFx0XHRlID0gdGhpcy5tX0FjdGl2ZUVkZ2VzO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0ZSA9IGVQcmV2Lk5leHRJbkFFTDtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0Ly8yLiBwcm9tb3RlIGhvcml6b250YWwgZWRnZXMsIG90aGVyd2lzZSB1cGRhdGUgQ3Vyci5YIGFuZCBDdXJyLlkgLi4uXG5cdFx0XHRcdGlmICh0aGlzLklzSW50ZXJtZWRpYXRlKGUsIHRvcFkpICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuSXNIb3Jpem9udGFsKGUuTmV4dEluTE1MKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGUgPSB0aGlzLlVwZGF0ZUVkZ2VJbnRvQUVMKGUpO1xuXHRcdFx0XHRcdGlmIChlLk91dElkeCA+PSAwKVxuXHRcdFx0XHRcdFx0dGhpcy5BZGRPdXRQdChlLCBlLkJvdCk7XG5cdFx0XHRcdFx0dGhpcy5BZGRFZGdlVG9TRUwoZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ZS5DdXJyLlggPSBDbGlwcGVyTGliLkNsaXBwZXIuVG9wWChlLCB0b3BZKTtcblx0XHRcdFx0XHRlLkN1cnIuWSA9IHRvcFk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKGUuVG9wLlkgPT09IHRvcFkpIGUuQ3Vyci5aID0gZS5Ub3AuWjtcblx0XHRcdFx0XHRlbHNlIGlmIChlLkJvdC5ZID09PSB0b3BZKSBlLkN1cnIuWiA9IGUuQm90Llo7XG5cdFx0XHRcdFx0ZWxzZSBlLkN1cnIuWiA9IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL1doZW4gU3RyaWN0bHlTaW1wbGUgYW5kICdlJyBpcyBiZWluZyB0b3VjaGVkIGJ5IGFub3RoZXIgZWRnZSwgdGhlblxuXHRcdFx0XHQvL21ha2Ugc3VyZSBib3RoIGVkZ2VzIGhhdmUgYSB2ZXJ0ZXggaGVyZSAuLi4gICAgICAgIFxuXHRcdFx0XHRpZiAodGhpcy5TdHJpY3RseVNpbXBsZSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBlUHJldiA9IGUuUHJldkluQUVMO1xuXHRcdFx0XHRcdGlmICgoZS5PdXRJZHggPj0gMCkgJiYgKGUuV2luZERlbHRhICE9PSAwKSAmJiBlUHJldiAhPT0gbnVsbCAmJlxuXHRcdFx0XHRcdFx0KGVQcmV2Lk91dElkeCA+PSAwKSAmJiAoZVByZXYuQ3Vyci5YID09PSBlLkN1cnIuWCkgJiZcblx0XHRcdFx0XHRcdChlUHJldi5XaW5kRGVsdGEgIT09IDApKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHZhciBpcCA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MShlLkN1cnIpO1xuXG5cdFx0XHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0aGlzLlNldFooaXAsIGVQcmV2LCBlKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIG9wID0gdGhpcy5BZGRPdXRQdChlUHJldiwgaXApO1xuXHRcdFx0XHRcdFx0dmFyIG9wMiA9IHRoaXMuQWRkT3V0UHQoZSwgaXApO1xuXHRcdFx0XHRcdFx0dGhpcy5BZGRKb2luKG9wLCBvcDIsIGlwKTsgLy9TdHJpY3RseVNpbXBsZSAodHlwZS0zKSBqb2luXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGUgPSBlLk5leHRJbkFFTDtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8zLiBQcm9jZXNzIGhvcml6b250YWxzIGF0IHRoZSBUb3Agb2YgdGhlIHNjYW5iZWFtIC4uLlxuXHRcdHRoaXMuUHJvY2Vzc0hvcml6b250YWxzKCk7XG5cdFx0dGhpcy5tX01heGltYSA9IG51bGw7XG5cdFx0Ly80LiBQcm9tb3RlIGludGVybWVkaWF0ZSB2ZXJ0aWNlcyAuLi5cblx0XHRlID0gdGhpcy5tX0FjdGl2ZUVkZ2VzO1xuXHRcdHdoaWxlIChlICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLklzSW50ZXJtZWRpYXRlKGUsIHRvcFkpKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgb3AgPSBudWxsO1xuXHRcdFx0XHRpZiAoZS5PdXRJZHggPj0gMClcblx0XHRcdFx0XHRvcCA9IHRoaXMuQWRkT3V0UHQoZSwgZS5Ub3ApO1xuXHRcdFx0XHRlID0gdGhpcy5VcGRhdGVFZGdlSW50b0FFTChlKTtcblx0XHRcdFx0Ly9pZiBvdXRwdXQgcG9seWdvbnMgc2hhcmUgYW4gZWRnZSwgdGhleSdsbCBuZWVkIGpvaW5pbmcgbGF0ZXIgLi4uXG5cdFx0XHRcdHZhciBlUHJldiA9IGUuUHJldkluQUVMO1xuXHRcdFx0XHR2YXIgZU5leHQgPSBlLk5leHRJbkFFTDtcblxuXHRcdFx0XHRpZiAoZVByZXYgIT09IG51bGwgJiYgZVByZXYuQ3Vyci5YID09PSBlLkJvdC5YICYmIGVQcmV2LkN1cnIuWSA9PT0gZS5Cb3QuWSAmJiBvcCAhPT0gbnVsbCAmJiBlUHJldi5PdXRJZHggPj0gMCAmJiBlUHJldi5DdXJyLlkgPT09IGVQcmV2LlRvcC5ZICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw1KGUuQ3VyciwgZS5Ub3AsIGVQcmV2LkN1cnIsIGVQcmV2LlRvcCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkgJiYgKGUuV2luZERlbHRhICE9PSAwKSAmJiAoZVByZXYuV2luZERlbHRhICE9PSAwKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBvcDIgPSB0aGlzLkFkZE91dFB0KGVQcmV2MiwgZS5Cb3QpO1xuXHRcdFx0XHRcdHRoaXMuQWRkSm9pbihvcCwgb3AyLCBlLlRvcCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAoZU5leHQgIT09IG51bGwgJiYgZU5leHQuQ3Vyci5YID09PSBlLkJvdC5YICYmIGVOZXh0LkN1cnIuWSA9PT0gZS5Cb3QuWSAmJiBvcCAhPT0gbnVsbCAmJiBlTmV4dC5PdXRJZHggPj0gMCAmJiBlTmV4dC5DdXJyLlkgPT09IGVOZXh0LlRvcC5ZICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw1KGUuQ3VyciwgZS5Ub3AsIGVOZXh0LkN1cnIsIGVOZXh0LlRvcCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkgJiYgKGUuV2luZERlbHRhICE9PSAwKSAmJiAoZU5leHQuV2luZERlbHRhICE9PSAwKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBvcDIgPSB0aGlzLkFkZE91dFB0KGVOZXh0LCBlLkJvdCk7XG5cdFx0XHRcdFx0dGhpcy5BZGRKb2luKG9wLCBvcDIsIGUuVG9wKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZSA9IGUuTmV4dEluQUVMO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkRvTWF4aW1hID0gZnVuY3Rpb24gKGUpXG5cdHtcblx0XHR2YXIgZU1heFBhaXIgPSB0aGlzLkdldE1heGltYVBhaXJFeChlKTtcblx0XHRpZiAoZU1heFBhaXIgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0aWYgKGUuT3V0SWR4ID49IDApXG5cdFx0XHRcdHRoaXMuQWRkT3V0UHQoZSwgZS5Ub3ApO1xuXHRcdFx0dGhpcy5EZWxldGVGcm9tQUVMKGUpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR2YXIgZU5leHQgPSBlLk5leHRJbkFFTDtcblx0XHR3aGlsZSAoZU5leHQgIT09IG51bGwgJiYgZU5leHQgIT09IGVNYXhQYWlyKVxuXHRcdHtcblx0XHRcdHRoaXMuSW50ZXJzZWN0RWRnZXMoZSwgZU5leHQsIGUuVG9wKTtcblx0XHRcdHRoaXMuU3dhcFBvc2l0aW9uc0luQUVMKGUsIGVOZXh0KTtcblx0XHRcdGVOZXh0ID0gZS5OZXh0SW5BRUw7XG5cdFx0fVxuXHRcdGlmIChlLk91dElkeCA9PT0gLTEgJiYgZU1heFBhaXIuT3V0SWR4ID09PSAtMSlcblx0XHR7XG5cdFx0XHR0aGlzLkRlbGV0ZUZyb21BRUwoZSk7XG5cdFx0XHR0aGlzLkRlbGV0ZUZyb21BRUwoZU1heFBhaXIpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChlLk91dElkeCA+PSAwICYmIGVNYXhQYWlyLk91dElkeCA+PSAwKVxuXHRcdHtcblx0XHRcdGlmIChlLk91dElkeCA+PSAwKSB0aGlzLkFkZExvY2FsTWF4UG9seShlLCBlTWF4UGFpciwgZS5Ub3ApO1xuXHRcdFx0dGhpcy5EZWxldGVGcm9tQUVMKGUpO1xuXHRcdFx0dGhpcy5EZWxldGVGcm9tQUVMKGVNYXhQYWlyKTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoQ2xpcHBlckxpYi51c2VfbGluZXMgJiYgZS5XaW5kRGVsdGEgPT09IDApXG5cdFx0e1xuXHRcdFx0aWYgKGUuT3V0SWR4ID49IDApXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuQWRkT3V0UHQoZSwgZS5Ub3ApO1xuXHRcdFx0XHRlLk91dElkeCA9IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuVW5hc3NpZ25lZDtcblx0XHRcdH1cblx0XHRcdHRoaXMuRGVsZXRlRnJvbUFFTChlKTtcblx0XHRcdGlmIChlTWF4UGFpci5PdXRJZHggPj0gMClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChlTWF4UGFpciwgZS5Ub3ApO1xuXHRcdFx0XHRlTWF4UGFpci5PdXRJZHggPSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlVuYXNzaWduZWQ7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLkRlbGV0ZUZyb21BRUwoZU1heFBhaXIpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiRG9NYXhpbWEgZXJyb3JcIik7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLlJldmVyc2VQYXRocyA9IGZ1bmN0aW9uIChwb2x5cylcblx0e1xuXHRcdGZvciAodmFyIGkgPSAwLCBsZW4gPSBwb2x5cy5sZW5ndGg7IGkgPCBsZW47IGkrKylcblx0XHRcdHBvbHlzW2ldLnJldmVyc2UoKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuT3JpZW50YXRpb24gPSBmdW5jdGlvbiAocG9seSlcblx0e1xuXHRcdHJldHVybiBDbGlwcGVyTGliLkNsaXBwZXIuQXJlYShwb2x5KSA+PSAwO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuUG9pbnRDb3VudCA9IGZ1bmN0aW9uIChwdHMpXG5cdHtcblx0XHRpZiAocHRzID09PSBudWxsKVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0dmFyIHJlc3VsdCA9IDA7XG5cdFx0dmFyIHAgPSBwdHM7XG5cdFx0ZG8ge1xuXHRcdFx0cmVzdWx0Kys7XG5cdFx0XHRwID0gcC5OZXh0O1xuXHRcdH1cblx0XHR3aGlsZSAocCAhPT0gcHRzKVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5CdWlsZFJlc3VsdCA9IGZ1bmN0aW9uIChwb2x5Zylcblx0e1xuXHRcdENsaXBwZXJMaWIuQ2xlYXIocG9seWcpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHR2YXIgb3V0UmVjID0gdGhpcy5tX1BvbHlPdXRzW2ldO1xuXHRcdFx0aWYgKG91dFJlYy5QdHMgPT09IG51bGwpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0dmFyIHAgPSBvdXRSZWMuUHRzLlByZXY7XG5cdFx0XHR2YXIgY250ID0gdGhpcy5Qb2ludENvdW50KHApO1xuXHRcdFx0aWYgKGNudCA8IDIpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0dmFyIHBnID0gbmV3IEFycmF5KGNudCk7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNudDsgaisrKVxuXHRcdFx0e1xuXHRcdFx0XHRwZ1tqXSA9IHAuUHQ7XG5cdFx0XHRcdHAgPSBwLlByZXY7XG5cdFx0XHR9XG5cdFx0XHRwb2x5Zy5wdXNoKHBnKTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5CdWlsZFJlc3VsdDIgPSBmdW5jdGlvbiAocG9seXRyZWUpXG5cdHtcblx0XHRwb2x5dHJlZS5DbGVhcigpO1xuXHRcdC8vYWRkIGVhY2ggb3V0cHV0IHBvbHlnb24vY29udG91ciB0byBwb2x5dHJlZSAuLi5cblx0XHQvL3BvbHl0cmVlLm1fQWxsUG9seXMuc2V0X0NhcGFjaXR5KHRoaXMubV9Qb2x5T3V0cy5sZW5ndGgpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHR2YXIgb3V0UmVjID0gdGhpcy5tX1BvbHlPdXRzW2ldO1xuXHRcdFx0dmFyIGNudCA9IHRoaXMuUG9pbnRDb3VudChvdXRSZWMuUHRzKTtcblx0XHRcdGlmICgob3V0UmVjLklzT3BlbiAmJiBjbnQgPCAyKSB8fCAoIW91dFJlYy5Jc09wZW4gJiYgY250IDwgMykpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0dGhpcy5GaXhIb2xlTGlua2FnZShvdXRSZWMpO1xuXHRcdFx0dmFyIHBuID0gbmV3IENsaXBwZXJMaWIuUG9seU5vZGUoKTtcblx0XHRcdHBvbHl0cmVlLm1fQWxsUG9seXMucHVzaChwbik7XG5cdFx0XHRvdXRSZWMuUG9seU5vZGUgPSBwbjtcblx0XHRcdHBuLm1fcG9seWdvbi5sZW5ndGggPSBjbnQ7XG5cdFx0XHR2YXIgb3AgPSBvdXRSZWMuUHRzLlByZXY7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNudDsgaisrKVxuXHRcdFx0e1xuXHRcdFx0XHRwbi5tX3BvbHlnb25bal0gPSBvcC5QdDtcblx0XHRcdFx0b3AgPSBvcC5QcmV2O1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvL2ZpeHVwIFBvbHlOb2RlIGxpbmtzIGV0YyAuLi5cblx0XHQvL3BvbHl0cmVlLm1fQ2hpbGRzLnNldF9DYXBhY2l0eSh0aGlzLm1fUG9seU91dHMubGVuZ3RoKTtcblx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IHRoaXMubV9Qb2x5T3V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspXG5cdFx0e1xuXHRcdFx0dmFyIG91dFJlYyA9IHRoaXMubV9Qb2x5T3V0c1tpXTtcblx0XHRcdGlmIChvdXRSZWMuUG9seU5vZGUgPT09IG51bGwpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0ZWxzZSBpZiAob3V0UmVjLklzT3Blbilcblx0XHRcdHtcblx0XHRcdFx0b3V0UmVjLlBvbHlOb2RlLklzT3BlbiA9IHRydWU7XG5cdFx0XHRcdHBvbHl0cmVlLkFkZENoaWxkKG91dFJlYy5Qb2x5Tm9kZSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChvdXRSZWMuRmlyc3RMZWZ0ICE9PSBudWxsICYmIG91dFJlYy5GaXJzdExlZnQuUG9seU5vZGUgIT09IG51bGwpXG5cdFx0XHRcdG91dFJlYy5GaXJzdExlZnQuUG9seU5vZGUuQWRkQ2hpbGQob3V0UmVjLlBvbHlOb2RlKTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cG9seXRyZWUuQWRkQ2hpbGQob3V0UmVjLlBvbHlOb2RlKTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5GaXh1cE91dFBvbHlsaW5lID0gZnVuY3Rpb24gKG91dFJlYylcblx0e1xuXHRcdHZhciBwcCA9IG91dFJlYy5QdHM7XG5cdFx0dmFyIGxhc3RQUCA9IHBwLlByZXY7XG5cdFx0d2hpbGUgKHBwICE9PSBsYXN0UFApXG5cdFx0e1xuXHRcdFx0cHAgPSBwcC5OZXh0O1xuXHRcdFx0aWYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocHAuUHQsIHBwLlByZXYuUHQpKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAocHAgPT09IGxhc3RQUClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhc3RQUCA9IHBwLlByZXY7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHRtcFBQID0gcHAuUHJldjtcblx0XHRcdFx0dG1wUFAuTmV4dCA9IHBwLk5leHQ7XG5cdFx0XHRcdHBwLk5leHQuUHJldiA9IHRtcFBQO1xuXHRcdFx0XHRwcCA9IHRtcFBQO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAocHAgPT09IHBwLlByZXYpXG5cdFx0e1xuXHRcdFx0b3V0UmVjLlB0cyA9IG51bGw7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRml4dXBPdXRQb2x5Z29uID0gZnVuY3Rpb24gKG91dFJlYylcblx0e1xuXHRcdC8vRml4dXBPdXRQb2x5Z29uKCkgLSByZW1vdmVzIGR1cGxpY2F0ZSBwb2ludHMgYW5kIHNpbXBsaWZpZXMgY29uc2VjdXRpdmVcblx0XHQvL3BhcmFsbGVsIGVkZ2VzIGJ5IHJlbW92aW5nIHRoZSBtaWRkbGUgdmVydGV4LlxuXHRcdHZhciBsYXN0T0sgPSBudWxsO1xuXHRcdG91dFJlYy5Cb3R0b21QdCA9IG51bGw7XG5cdFx0dmFyIHBwID0gb3V0UmVjLlB0cztcblx0XHR2YXIgcHJlc2VydmVDb2wgPSB0aGlzLlByZXNlcnZlQ29sbGluZWFyIHx8IHRoaXMuU3RyaWN0bHlTaW1wbGU7XG5cdFx0Zm9yICg7Oylcblx0XHR7XG5cdFx0XHRpZiAocHAuUHJldiA9PT0gcHAgfHwgcHAuUHJldiA9PT0gcHAuTmV4dClcblx0XHRcdHtcblx0XHRcdFx0b3V0UmVjLlB0cyA9IG51bGw7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly90ZXN0IGZvciBkdXBsaWNhdGUgcG9pbnRzIGFuZCBjb2xsaW5lYXIgZWRnZXMgLi4uXG5cdFx0XHRpZiAoKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocHAuUHQsIHBwLk5leHQuUHQpKSB8fCAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShwcC5QdCwgcHAuUHJldi5QdCkpIHx8IChDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNChwcC5QcmV2LlB0LCBwcC5QdCwgcHAuTmV4dC5QdCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkgJiYgKCFwcmVzZXJ2ZUNvbCB8fCAhdGhpcy5QdDJJc0JldHdlZW5QdDFBbmRQdDMocHAuUHJldi5QdCwgcHAuUHQsIHBwLk5leHQuUHQpKSkpXG5cdFx0XHR7XG5cdFx0XHRcdGxhc3RPSyA9IG51bGw7XG5cdFx0XHRcdHBwLlByZXYuTmV4dCA9IHBwLk5leHQ7XG5cdFx0XHRcdHBwLk5leHQuUHJldiA9IHBwLlByZXY7XG5cdFx0XHRcdHBwID0gcHAuUHJldjtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKHBwID09PSBsYXN0T0spXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAobGFzdE9LID09PSBudWxsKVxuXHRcdFx0XHRcdGxhc3RPSyA9IHBwO1xuXHRcdFx0XHRwcCA9IHBwLk5leHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdG91dFJlYy5QdHMgPSBwcDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkR1cE91dFB0ID0gZnVuY3Rpb24gKG91dFB0LCBJbnNlcnRBZnRlcilcblx0e1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQ2xpcHBlckxpYi5PdXRQdCgpO1xuXHRcdC8vcmVzdWx0LlB0ID0gb3V0UHQuUHQ7XG5cdFx0cmVzdWx0LlB0LlggPSBvdXRQdC5QdC5YO1xuXHRcdHJlc3VsdC5QdC5ZID0gb3V0UHQuUHQuWTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSByZXN1bHQuUHQuWiA9IG91dFB0LlB0Llo7XG5cdFx0cmVzdWx0LklkeCA9IG91dFB0LklkeDtcblx0XHRpZiAoSW5zZXJ0QWZ0ZXIpXG5cdFx0e1xuXHRcdFx0cmVzdWx0Lk5leHQgPSBvdXRQdC5OZXh0O1xuXHRcdFx0cmVzdWx0LlByZXYgPSBvdXRQdDtcblx0XHRcdG91dFB0Lk5leHQuUHJldiA9IHJlc3VsdDtcblx0XHRcdG91dFB0Lk5leHQgPSByZXN1bHQ7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRyZXN1bHQuUHJldiA9IG91dFB0LlByZXY7XG5cdFx0XHRyZXN1bHQuTmV4dCA9IG91dFB0O1xuXHRcdFx0b3V0UHQuUHJldi5OZXh0ID0gcmVzdWx0O1xuXHRcdFx0b3V0UHQuUHJldiA9IHJlc3VsdDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldE92ZXJsYXAgPSBmdW5jdGlvbiAoYTEsIGEyLCBiMSwgYjIsICR2YWwpXG5cdHtcblx0XHRpZiAoYTEgPCBhMilcblx0XHR7XG5cdFx0XHRpZiAoYjEgPCBiMilcblx0XHRcdHtcblx0XHRcdFx0JHZhbC5MZWZ0ID0gTWF0aC5tYXgoYTEsIGIxKTtcblx0XHRcdFx0JHZhbC5SaWdodCA9IE1hdGgubWluKGEyLCBiMik7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdCR2YWwuTGVmdCA9IE1hdGgubWF4KGExLCBiMik7XG5cdFx0XHRcdCR2YWwuUmlnaHQgPSBNYXRoLm1pbihhMiwgYjEpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0aWYgKGIxIDwgYjIpXG5cdFx0XHR7XG5cdFx0XHRcdCR2YWwuTGVmdCA9IE1hdGgubWF4KGEyLCBiMSk7XG5cdFx0XHRcdCR2YWwuUmlnaHQgPSBNYXRoLm1pbihhMSwgYjIpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQkdmFsLkxlZnQgPSBNYXRoLm1heChhMiwgYjIpO1xuXHRcdFx0XHQkdmFsLlJpZ2h0ID0gTWF0aC5taW4oYTEsIGIxKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuICR2YWwuTGVmdCA8ICR2YWwuUmlnaHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Kb2luSG9yeiA9IGZ1bmN0aW9uIChvcDEsIG9wMWIsIG9wMiwgb3AyYiwgUHQsIERpc2NhcmRMZWZ0KVxuXHR7XG5cdFx0dmFyIERpcjEgPSAob3AxLlB0LlggPiBvcDFiLlB0LlggPyBDbGlwcGVyTGliLkRpcmVjdGlvbi5kUmlnaHRUb0xlZnQgOiBDbGlwcGVyTGliLkRpcmVjdGlvbi5kTGVmdFRvUmlnaHQpO1xuXHRcdHZhciBEaXIyID0gKG9wMi5QdC5YID4gb3AyYi5QdC5YID8gQ2xpcHBlckxpYi5EaXJlY3Rpb24uZFJpZ2h0VG9MZWZ0IDogQ2xpcHBlckxpYi5EaXJlY3Rpb24uZExlZnRUb1JpZ2h0KTtcblx0XHRpZiAoRGlyMSA9PT0gRGlyMilcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHQvL1doZW4gRGlzY2FyZExlZnQsIHdlIHdhbnQgT3AxYiB0byBiZSBvbiB0aGUgTGVmdCBvZiBPcDEsIG90aGVyd2lzZSB3ZVxuXHRcdC8vd2FudCBPcDFiIHRvIGJlIG9uIHRoZSBSaWdodC4gKEFuZCBsaWtld2lzZSB3aXRoIE9wMiBhbmQgT3AyYi4pXG5cdFx0Ly9TbywgdG8gZmFjaWxpdGF0ZSB0aGlzIHdoaWxlIGluc2VydGluZyBPcDFiIGFuZCBPcDJiIC4uLlxuXHRcdC8vd2hlbiBEaXNjYXJkTGVmdCwgbWFrZSBzdXJlIHdlJ3JlIEFUIG9yIFJJR0hUIG9mIFB0IGJlZm9yZSBhZGRpbmcgT3AxYixcblx0XHQvL290aGVyd2lzZSBtYWtlIHN1cmUgd2UncmUgQVQgb3IgTEVGVCBvZiBQdC4gKExpa2V3aXNlIHdpdGggT3AyYi4pXG5cdFx0aWYgKERpcjEgPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRMZWZ0VG9SaWdodClcblx0XHR7XG5cdFx0XHR3aGlsZSAob3AxLk5leHQuUHQuWCA8PSBQdC5YICYmXG5cdFx0XHRcdG9wMS5OZXh0LlB0LlggPj0gb3AxLlB0LlggJiYgb3AxLk5leHQuUHQuWSA9PT0gUHQuWSlcblx0XHRcdFx0b3AxID0gb3AxLk5leHQ7XG5cdFx0XHRpZiAoRGlzY2FyZExlZnQgJiYgKG9wMS5QdC5YICE9PSBQdC5YKSlcblx0XHRcdFx0b3AxID0gb3AxLk5leHQ7XG5cdFx0XHRvcDFiID0gdGhpcy5EdXBPdXRQdChvcDEsICFEaXNjYXJkTGVmdCk7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9JbmVxdWFsaXR5KG9wMWIuUHQsIFB0KSlcblx0XHRcdHtcblx0XHRcdFx0b3AxID0gb3AxYjtcblx0XHRcdFx0Ly9vcDEuUHQgPSBQdDtcblx0XHRcdFx0b3AxLlB0LlggPSBQdC5YO1xuXHRcdFx0XHRvcDEuUHQuWSA9IFB0Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIG9wMS5QdC5aID0gUHQuWjtcblx0XHRcdFx0b3AxYiA9IHRoaXMuRHVwT3V0UHQob3AxLCAhRGlzY2FyZExlZnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0d2hpbGUgKG9wMS5OZXh0LlB0LlggPj0gUHQuWCAmJlxuXHRcdFx0XHRvcDEuTmV4dC5QdC5YIDw9IG9wMS5QdC5YICYmIG9wMS5OZXh0LlB0LlkgPT09IFB0LlkpXG5cdFx0XHRcdG9wMSA9IG9wMS5OZXh0O1xuXHRcdFx0aWYgKCFEaXNjYXJkTGVmdCAmJiAob3AxLlB0LlggIT09IFB0LlgpKVxuXHRcdFx0XHRvcDEgPSBvcDEuTmV4dDtcblx0XHRcdG9wMWIgPSB0aGlzLkR1cE91dFB0KG9wMSwgRGlzY2FyZExlZnQpO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfSW5lcXVhbGl0eShvcDFiLlB0LCBQdCkpXG5cdFx0XHR7XG5cdFx0XHRcdG9wMSA9IG9wMWI7XG5cdFx0XHRcdC8vb3AxLlB0ID0gUHQ7XG5cdFx0XHRcdG9wMS5QdC5YID0gUHQuWDtcblx0XHRcdFx0b3AxLlB0LlkgPSBQdC5ZO1xuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBvcDEuUHQuWiA9IFB0Llo7XG5cdFx0XHRcdG9wMWIgPSB0aGlzLkR1cE91dFB0KG9wMSwgRGlzY2FyZExlZnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoRGlyMiA9PT0gQ2xpcHBlckxpYi5EaXJlY3Rpb24uZExlZnRUb1JpZ2h0KVxuXHRcdHtcblx0XHRcdHdoaWxlIChvcDIuTmV4dC5QdC5YIDw9IFB0LlggJiZcblx0XHRcdFx0b3AyLk5leHQuUHQuWCA+PSBvcDIuUHQuWCAmJiBvcDIuTmV4dC5QdC5ZID09PSBQdC5ZKVxuXHRcdFx0XHRvcDIgPSBvcDIuTmV4dDtcblx0XHRcdGlmIChEaXNjYXJkTGVmdCAmJiAob3AyLlB0LlggIT09IFB0LlgpKVxuXHRcdFx0XHRvcDIgPSBvcDIuTmV4dDtcblx0XHRcdG9wMmIgPSB0aGlzLkR1cE91dFB0KG9wMiwgIURpc2NhcmRMZWZ0KTtcblx0XHRcdGlmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0luZXF1YWxpdHkob3AyYi5QdCwgUHQpKVxuXHRcdFx0e1xuXHRcdFx0XHRvcDIgPSBvcDJiO1xuXHRcdFx0XHQvL29wMi5QdCA9IFB0O1xuXHRcdFx0XHRvcDIuUHQuWCA9IFB0Llg7XG5cdFx0XHRcdG9wMi5QdC5ZID0gUHQuWTtcblx0XHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgb3AyLlB0LlogPSBQdC5aO1xuXHRcdFx0XHRvcDJiID0gdGhpcy5EdXBPdXRQdChvcDIsICFEaXNjYXJkTGVmdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR3aGlsZSAob3AyLk5leHQuUHQuWCA+PSBQdC5YICYmXG5cdFx0XHRcdG9wMi5OZXh0LlB0LlggPD0gb3AyLlB0LlggJiYgb3AyLk5leHQuUHQuWSA9PT0gUHQuWSlcblx0XHRcdFx0b3AyID0gb3AyLk5leHQ7XG5cdFx0XHRpZiAoIURpc2NhcmRMZWZ0ICYmIChvcDIuUHQuWCAhPT0gUHQuWCkpXG5cdFx0XHRcdG9wMiA9IG9wMi5OZXh0O1xuXHRcdFx0b3AyYiA9IHRoaXMuRHVwT3V0UHQob3AyLCBEaXNjYXJkTGVmdCk7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9JbmVxdWFsaXR5KG9wMmIuUHQsIFB0KSlcblx0XHRcdHtcblx0XHRcdFx0b3AyID0gb3AyYjtcblx0XHRcdFx0Ly9vcDIuUHQgPSBQdDtcblx0XHRcdFx0b3AyLlB0LlggPSBQdC5YO1xuXHRcdFx0XHRvcDIuUHQuWSA9IFB0Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIG9wMi5QdC5aID0gUHQuWjtcblx0XHRcdFx0b3AyYiA9IHRoaXMuRHVwT3V0UHQob3AyLCBEaXNjYXJkTGVmdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICgoRGlyMSA9PT0gQ2xpcHBlckxpYi5EaXJlY3Rpb24uZExlZnRUb1JpZ2h0KSA9PT0gRGlzY2FyZExlZnQpXG5cdFx0e1xuXHRcdFx0b3AxLlByZXYgPSBvcDI7XG5cdFx0XHRvcDIuTmV4dCA9IG9wMTtcblx0XHRcdG9wMWIuTmV4dCA9IG9wMmI7XG5cdFx0XHRvcDJiLlByZXYgPSBvcDFiO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0b3AxLk5leHQgPSBvcDI7XG5cdFx0XHRvcDIuUHJldiA9IG9wMTtcblx0XHRcdG9wMWIuUHJldiA9IG9wMmI7XG5cdFx0XHRvcDJiLk5leHQgPSBvcDFiO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkpvaW5Qb2ludHMgPSBmdW5jdGlvbiAoaiwgb3V0UmVjMSwgb3V0UmVjMilcblx0e1xuXHRcdHZhciBvcDEgPSBqLk91dFB0MSxcblx0XHRcdG9wMWIgPSBuZXcgQ2xpcHBlckxpYi5PdXRQdCgpO1xuXHRcdHZhciBvcDIgPSBqLk91dFB0Mixcblx0XHRcdG9wMmIgPSBuZXcgQ2xpcHBlckxpYi5PdXRQdCgpO1xuXHRcdC8vVGhlcmUgYXJlIDMga2luZHMgb2Ygam9pbnMgZm9yIG91dHB1dCBwb2x5Z29ucyAuLi5cblx0XHQvLzEuIEhvcml6b250YWwgam9pbnMgd2hlcmUgSm9pbi5PdXRQdDEgJiBKb2luLk91dFB0MiBhcmUgdmVydGljZXMgYW55d2hlcmVcblx0XHQvL2Fsb25nIChob3Jpem9udGFsKSBjb2xsaW5lYXIgZWRnZXMgKCYgSm9pbi5PZmZQdCBpcyBvbiB0aGUgc2FtZSBob3Jpem9udGFsKS5cblx0XHQvLzIuIE5vbi1ob3Jpem9udGFsIGpvaW5zIHdoZXJlIEpvaW4uT3V0UHQxICYgSm9pbi5PdXRQdDIgYXJlIGF0IHRoZSBzYW1lXG5cdFx0Ly9sb2NhdGlvbiBhdCB0aGUgQm90dG9tIG9mIHRoZSBvdmVybGFwcGluZyBzZWdtZW50ICgmIEpvaW4uT2ZmUHQgaXMgYWJvdmUpLlxuXHRcdC8vMy4gU3RyaWN0bHlTaW1wbGUgam9pbnMgd2hlcmUgZWRnZXMgdG91Y2ggYnV0IGFyZSBub3QgY29sbGluZWFyIGFuZCB3aGVyZVxuXHRcdC8vSm9pbi5PdXRQdDEsIEpvaW4uT3V0UHQyICYgSm9pbi5PZmZQdCBhbGwgc2hhcmUgdGhlIHNhbWUgcG9pbnQuXG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IChqLk91dFB0MS5QdC5ZID09PSBqLk9mZlB0LlkpO1xuXHRcdGlmIChpc0hvcml6b250YWwgJiYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkoai5PZmZQdCwgai5PdXRQdDEuUHQpKSAmJiAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShqLk9mZlB0LCBqLk91dFB0Mi5QdCkpKVxuXHRcdHtcblx0XHRcdC8vU3RyaWN0bHkgU2ltcGxlIGpvaW4gLi4uXG5cdFx0XHRpZiAob3V0UmVjMSAhPT0gb3V0UmVjMikgcmV0dXJuIGZhbHNlO1xuXG5cdFx0XHRvcDFiID0gai5PdXRQdDEuTmV4dDtcblx0XHRcdHdoaWxlIChvcDFiICE9PSBvcDEgJiYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkob3AxYi5QdCwgai5PZmZQdCkpKVxuXHRcdFx0XHRvcDFiID0gb3AxYi5OZXh0O1xuXHRcdFx0dmFyIHJldmVyc2UxID0gKG9wMWIuUHQuWSA+IGouT2ZmUHQuWSk7XG5cdFx0XHRvcDJiID0gai5PdXRQdDIuTmV4dDtcblx0XHRcdHdoaWxlIChvcDJiICE9PSBvcDIgJiYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkob3AyYi5QdCwgai5PZmZQdCkpKVxuXHRcdFx0XHRvcDJiID0gb3AyYi5OZXh0O1xuXHRcdFx0dmFyIHJldmVyc2UyID0gKG9wMmIuUHQuWSA+IGouT2ZmUHQuWSk7XG5cdFx0XHRpZiAocmV2ZXJzZTEgPT09IHJldmVyc2UyKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRpZiAocmV2ZXJzZTEpXG5cdFx0XHR7XG5cdFx0XHRcdG9wMWIgPSB0aGlzLkR1cE91dFB0KG9wMSwgZmFsc2UpO1xuXHRcdFx0XHRvcDJiID0gdGhpcy5EdXBPdXRQdChvcDIsIHRydWUpO1xuXHRcdFx0XHRvcDEuUHJldiA9IG9wMjtcblx0XHRcdFx0b3AyLk5leHQgPSBvcDE7XG5cdFx0XHRcdG9wMWIuTmV4dCA9IG9wMmI7XG5cdFx0XHRcdG9wMmIuUHJldiA9IG9wMWI7XG5cdFx0XHRcdGouT3V0UHQxID0gb3AxO1xuXHRcdFx0XHRqLk91dFB0MiA9IG9wMWI7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRvcDFiID0gdGhpcy5EdXBPdXRQdChvcDEsIHRydWUpO1xuXHRcdFx0XHRvcDJiID0gdGhpcy5EdXBPdXRQdChvcDIsIGZhbHNlKTtcblx0XHRcdFx0b3AxLk5leHQgPSBvcDI7XG5cdFx0XHRcdG9wMi5QcmV2ID0gb3AxO1xuXHRcdFx0XHRvcDFiLlByZXYgPSBvcDJiO1xuXHRcdFx0XHRvcDJiLk5leHQgPSBvcDFiO1xuXHRcdFx0XHRqLk91dFB0MSA9IG9wMTtcblx0XHRcdFx0ai5PdXRQdDIgPSBvcDFiO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAoaXNIb3Jpem9udGFsKVxuXHRcdHtcblx0XHRcdC8vdHJlYXQgaG9yaXpvbnRhbCBqb2lucyBkaWZmZXJlbnRseSB0byBub24taG9yaXpvbnRhbCBqb2lucyBzaW5jZSB3aXRoXG5cdFx0XHQvL3RoZW0gd2UncmUgbm90IHlldCBzdXJlIHdoZXJlIHRoZSBvdmVybGFwcGluZyBpcy4gT3V0UHQxLlB0ICYgT3V0UHQyLlB0XG5cdFx0XHQvL21heSBiZSBhbnl3aGVyZSBhbG9uZyB0aGUgaG9yaXpvbnRhbCBlZGdlLlxuXHRcdFx0b3AxYiA9IG9wMTtcblx0XHRcdHdoaWxlIChvcDEuUHJldi5QdC5ZID09PSBvcDEuUHQuWSAmJiBvcDEuUHJldiAhPT0gb3AxYiAmJiBvcDEuUHJldiAhPT0gb3AyKVxuXHRcdFx0XHRvcDEgPSBvcDEuUHJldjtcblx0XHRcdHdoaWxlIChvcDFiLk5leHQuUHQuWSA9PT0gb3AxYi5QdC5ZICYmIG9wMWIuTmV4dCAhPT0gb3AxICYmIG9wMWIuTmV4dCAhPT0gb3AyKVxuXHRcdFx0XHRvcDFiID0gb3AxYi5OZXh0O1xuXHRcdFx0aWYgKG9wMWIuTmV4dCA9PT0gb3AxIHx8IG9wMWIuTmV4dCA9PT0gb3AyKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHQvL2EgZmxhdCAncG9seWdvbidcblx0XHRcdG9wMmIgPSBvcDI7XG5cdFx0XHR3aGlsZSAob3AyLlByZXYuUHQuWSA9PT0gb3AyLlB0LlkgJiYgb3AyLlByZXYgIT09IG9wMmIgJiYgb3AyLlByZXYgIT09IG9wMWIpXG5cdFx0XHRcdG9wMiA9IG9wMi5QcmV2O1xuXHRcdFx0d2hpbGUgKG9wMmIuTmV4dC5QdC5ZID09PSBvcDJiLlB0LlkgJiYgb3AyYi5OZXh0ICE9PSBvcDIgJiYgb3AyYi5OZXh0ICE9PSBvcDEpXG5cdFx0XHRcdG9wMmIgPSBvcDJiLk5leHQ7XG5cdFx0XHRpZiAob3AyYi5OZXh0ID09PSBvcDIgfHwgb3AyYi5OZXh0ID09PSBvcDEpXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdC8vYSBmbGF0ICdwb2x5Z29uJ1xuXHRcdFx0Ly9PcDEgLS4gT3AxYiAmIE9wMiAtLiBPcDJiIGFyZSB0aGUgZXh0cmVtaXRlcyBvZiB0aGUgaG9yaXpvbnRhbCBlZGdlc1xuXG5cdFx0XHR2YXIgJHZhbCA9IHtcblx0XHRcdFx0TGVmdDogbnVsbCxcblx0XHRcdFx0UmlnaHQ6IG51bGxcblx0XHRcdH07XG5cblx0XHRcdGlmICghdGhpcy5HZXRPdmVybGFwKG9wMS5QdC5YLCBvcDFiLlB0LlgsIG9wMi5QdC5YLCBvcDJiLlB0LlgsICR2YWwpKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR2YXIgTGVmdCA9ICR2YWwuTGVmdDtcblx0XHRcdHZhciBSaWdodCA9ICR2YWwuUmlnaHQ7XG5cblx0XHRcdC8vRGlzY2FyZExlZnRTaWRlOiB3aGVuIG92ZXJsYXBwaW5nIGVkZ2VzIGFyZSBqb2luZWQsIGEgc3Bpa2Ugd2lsbCBjcmVhdGVkXG5cdFx0XHQvL3doaWNoIG5lZWRzIHRvIGJlIGNsZWFuZWQgdXAuIEhvd2V2ZXIsIHdlIGRvbid0IHdhbnQgT3AxIG9yIE9wMiBjYXVnaHQgdXBcblx0XHRcdC8vb24gdGhlIGRpc2NhcmQgU2lkZSBhcyBlaXRoZXIgbWF5IHN0aWxsIGJlIG5lZWRlZCBmb3Igb3RoZXIgam9pbnMgLi4uXG5cdFx0XHR2YXIgUHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDAoKTtcblx0XHRcdHZhciBEaXNjYXJkTGVmdFNpZGU7XG5cdFx0XHRpZiAob3AxLlB0LlggPj0gTGVmdCAmJiBvcDEuUHQuWCA8PSBSaWdodClcblx0XHRcdHtcblx0XHRcdFx0Ly9QdCA9IG9wMS5QdDtcblx0XHRcdFx0UHQuWCA9IG9wMS5QdC5YO1xuXHRcdFx0XHRQdC5ZID0gb3AxLlB0Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIFB0LlogPSBvcDEuUHQuWjtcblx0XHRcdFx0RGlzY2FyZExlZnRTaWRlID0gKG9wMS5QdC5YID4gb3AxYi5QdC5YKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKG9wMi5QdC5YID49IExlZnQgJiYgb3AyLlB0LlggPD0gUmlnaHQpXG5cdFx0XHR7XG5cdFx0XHRcdC8vUHQgPSBvcDIuUHQ7XG5cdFx0XHRcdFB0LlggPSBvcDIuUHQuWDtcblx0XHRcdFx0UHQuWSA9IG9wMi5QdC5ZO1xuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBQdC5aID0gb3AyLlB0Llo7XG5cdFx0XHRcdERpc2NhcmRMZWZ0U2lkZSA9IChvcDIuUHQuWCA+IG9wMmIuUHQuWCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChvcDFiLlB0LlggPj0gTGVmdCAmJiBvcDFiLlB0LlggPD0gUmlnaHQpXG5cdFx0XHR7XG5cdFx0XHRcdC8vUHQgPSBvcDFiLlB0O1xuXHRcdFx0XHRQdC5YID0gb3AxYi5QdC5YO1xuXHRcdFx0XHRQdC5ZID0gb3AxYi5QdC5ZO1xuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBQdC5aID0gb3AxYi5QdC5aO1xuXHRcdFx0XHREaXNjYXJkTGVmdFNpZGUgPSBvcDFiLlB0LlggPiBvcDEuUHQuWDtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0Ly9QdCA9IG9wMmIuUHQ7XG5cdFx0XHRcdFB0LlggPSBvcDJiLlB0Llg7XG5cdFx0XHRcdFB0LlkgPSBvcDJiLlB0Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIFB0LlogPSBvcDJiLlB0Llo7XG5cdFx0XHRcdERpc2NhcmRMZWZ0U2lkZSA9IChvcDJiLlB0LlggPiBvcDIuUHQuWCk7XG5cdFx0XHR9XG5cdFx0XHRqLk91dFB0MSA9IG9wMTtcblx0XHRcdGouT3V0UHQyID0gb3AyO1xuXHRcdFx0cmV0dXJuIHRoaXMuSm9pbkhvcnoob3AxLCBvcDFiLCBvcDIsIG9wMmIsIFB0LCBEaXNjYXJkTGVmdFNpZGUpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0Ly9uYjogRm9yIG5vbi1ob3Jpem9udGFsIGpvaW5zIC4uLlxuXHRcdFx0Ly8gICAgMS4gSnIuT3V0UHQxLlB0LlkgPT0gSnIuT3V0UHQyLlB0Lllcblx0XHRcdC8vICAgIDIuIEpyLk91dFB0MS5QdCA+IEpyLk9mZlB0Lllcblx0XHRcdC8vbWFrZSBzdXJlIHRoZSBwb2x5Z29ucyBhcmUgY29ycmVjdGx5IG9yaWVudGVkIC4uLlxuXHRcdFx0b3AxYiA9IG9wMS5OZXh0O1xuXHRcdFx0d2hpbGUgKChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KG9wMWIuUHQsIG9wMS5QdCkpICYmIChvcDFiICE9PSBvcDEpKVxuXHRcdFx0XHRvcDFiID0gb3AxYi5OZXh0O1xuXHRcdFx0dmFyIFJldmVyc2UxID0gKChvcDFiLlB0LlkgPiBvcDEuUHQuWSkgfHwgIUNsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw0KG9wMS5QdCwgb3AxYi5QdCwgai5PZmZQdCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkpO1xuXHRcdFx0aWYgKFJldmVyc2UxKVxuXHRcdFx0e1xuXHRcdFx0XHRvcDFiID0gb3AxLlByZXY7XG5cdFx0XHRcdHdoaWxlICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShvcDFiLlB0LCBvcDEuUHQpKSAmJiAob3AxYiAhPT0gb3AxKSlcblx0XHRcdFx0XHRvcDFiID0gb3AxYi5QcmV2O1xuXG5cdFx0XHRcdGlmICgob3AxYi5QdC5ZID4gb3AxLlB0LlkpIHx8ICFDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNChvcDEuUHQsIG9wMWIuUHQsIGouT2ZmUHQsIHRoaXMubV9Vc2VGdWxsUmFuZ2UpKVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdG9wMmIgPSBvcDIuTmV4dDtcblx0XHRcdHdoaWxlICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShvcDJiLlB0LCBvcDIuUHQpKSAmJiAob3AyYiAhPT0gb3AyKSlcblx0XHRcdFx0b3AyYiA9IG9wMmIuTmV4dDtcblxuXHRcdFx0dmFyIFJldmVyc2UyID0gKChvcDJiLlB0LlkgPiBvcDIuUHQuWSkgfHwgIUNsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw0KG9wMi5QdCwgb3AyYi5QdCwgai5PZmZQdCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkpO1xuXHRcdFx0aWYgKFJldmVyc2UyKVxuXHRcdFx0e1xuXHRcdFx0XHRvcDJiID0gb3AyLlByZXY7XG5cdFx0XHRcdHdoaWxlICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShvcDJiLlB0LCBvcDIuUHQpKSAmJiAob3AyYiAhPT0gb3AyKSlcblx0XHRcdFx0XHRvcDJiID0gb3AyYi5QcmV2O1xuXG5cdFx0XHRcdGlmICgob3AyYi5QdC5ZID4gb3AyLlB0LlkpIHx8ICFDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNChvcDIuUHQsIG9wMmIuUHQsIGouT2ZmUHQsIHRoaXMubV9Vc2VGdWxsUmFuZ2UpKVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGlmICgob3AxYiA9PT0gb3AxKSB8fCAob3AyYiA9PT0gb3AyKSB8fCAob3AxYiA9PT0gb3AyYikgfHxcblx0XHRcdFx0KChvdXRSZWMxID09PSBvdXRSZWMyKSAmJiAoUmV2ZXJzZTEgPT09IFJldmVyc2UyKSkpXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdGlmIChSZXZlcnNlMSlcblx0XHRcdHtcblx0XHRcdFx0b3AxYiA9IHRoaXMuRHVwT3V0UHQob3AxLCBmYWxzZSk7XG5cdFx0XHRcdG9wMmIgPSB0aGlzLkR1cE91dFB0KG9wMiwgdHJ1ZSk7XG5cdFx0XHRcdG9wMS5QcmV2ID0gb3AyO1xuXHRcdFx0XHRvcDIuTmV4dCA9IG9wMTtcblx0XHRcdFx0b3AxYi5OZXh0ID0gb3AyYjtcblx0XHRcdFx0b3AyYi5QcmV2ID0gb3AxYjtcblx0XHRcdFx0ai5PdXRQdDEgPSBvcDE7XG5cdFx0XHRcdGouT3V0UHQyID0gb3AxYjtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdG9wMWIgPSB0aGlzLkR1cE91dFB0KG9wMSwgdHJ1ZSk7XG5cdFx0XHRcdG9wMmIgPSB0aGlzLkR1cE91dFB0KG9wMiwgZmFsc2UpO1xuXHRcdFx0XHRvcDEuTmV4dCA9IG9wMjtcblx0XHRcdFx0b3AyLlByZXYgPSBvcDE7XG5cdFx0XHRcdG9wMWIuUHJldiA9IG9wMmI7XG5cdFx0XHRcdG9wMmIuTmV4dCA9IG9wMWI7XG5cdFx0XHRcdGouT3V0UHQxID0gb3AxO1xuXHRcdFx0XHRqLk91dFB0MiA9IG9wMWI7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldEJvdW5kcyA9IGZ1bmN0aW9uIChwYXRocylcblx0e1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGNudCA9IHBhdGhzLmxlbmd0aDtcblx0XHR3aGlsZSAoaSA8IGNudCAmJiBwYXRoc1tpXS5sZW5ndGggPT09IDApIGkrKztcblx0XHRpZiAoaSA9PT0gY250KSByZXR1cm4gbmV3IENsaXBwZXJMaWIuSW50UmVjdCgwLCAwLCAwLCAwKTtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IENsaXBwZXJMaWIuSW50UmVjdCgpO1xuXHRcdHJlc3VsdC5sZWZ0ID0gcGF0aHNbaV1bMF0uWDtcblx0XHRyZXN1bHQucmlnaHQgPSByZXN1bHQubGVmdDtcblx0XHRyZXN1bHQudG9wID0gcGF0aHNbaV1bMF0uWTtcblx0XHRyZXN1bHQuYm90dG9tID0gcmVzdWx0LnRvcDtcblx0XHRmb3IgKDsgaSA8IGNudDsgaSsrKVxuXHRcdFx0Zm9yICh2YXIgaiA9IDAsIGpsZW4gPSBwYXRoc1tpXS5sZW5ndGg7IGogPCBqbGVuOyBqKyspXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChwYXRoc1tpXVtqXS5YIDwgcmVzdWx0LmxlZnQpIHJlc3VsdC5sZWZ0ID0gcGF0aHNbaV1bal0uWDtcblx0XHRcdFx0ZWxzZSBpZiAocGF0aHNbaV1bal0uWCA+IHJlc3VsdC5yaWdodCkgcmVzdWx0LnJpZ2h0ID0gcGF0aHNbaV1bal0uWDtcblx0XHRcdFx0aWYgKHBhdGhzW2ldW2pdLlkgPCByZXN1bHQudG9wKSByZXN1bHQudG9wID0gcGF0aHNbaV1bal0uWTtcblx0XHRcdFx0ZWxzZSBpZiAocGF0aHNbaV1bal0uWSA+IHJlc3VsdC5ib3R0b20pIHJlc3VsdC5ib3R0b20gPSBwYXRoc1tpXVtqXS5ZO1xuXHRcdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5HZXRCb3VuZHMyID0gZnVuY3Rpb24gKG9wcylcblx0e1xuXHRcdHZhciBvcFN0YXJ0ID0gb3BzO1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRSZWN0KCk7XG5cdFx0cmVzdWx0LmxlZnQgPSBvcHMuUHQuWDtcblx0XHRyZXN1bHQucmlnaHQgPSBvcHMuUHQuWDtcblx0XHRyZXN1bHQudG9wID0gb3BzLlB0Llk7XG5cdFx0cmVzdWx0LmJvdHRvbSA9IG9wcy5QdC5ZO1xuXHRcdG9wcyA9IG9wcy5OZXh0O1xuXHRcdHdoaWxlIChvcHMgIT09IG9wU3RhcnQpXG5cdFx0e1xuXHRcdFx0aWYgKG9wcy5QdC5YIDwgcmVzdWx0LmxlZnQpXG5cdFx0XHRcdHJlc3VsdC5sZWZ0ID0gb3BzLlB0Llg7XG5cdFx0XHRpZiAob3BzLlB0LlggPiByZXN1bHQucmlnaHQpXG5cdFx0XHRcdHJlc3VsdC5yaWdodCA9IG9wcy5QdC5YO1xuXHRcdFx0aWYgKG9wcy5QdC5ZIDwgcmVzdWx0LnRvcClcblx0XHRcdFx0cmVzdWx0LnRvcCA9IG9wcy5QdC5ZO1xuXHRcdFx0aWYgKG9wcy5QdC5ZID4gcmVzdWx0LmJvdHRvbSlcblx0XHRcdFx0cmVzdWx0LmJvdHRvbSA9IG9wcy5QdC5ZO1xuXHRcdFx0b3BzID0gb3BzLk5leHQ7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLlBvaW50SW5Qb2x5Z29uID0gZnVuY3Rpb24gKHB0LCBwYXRoKVxuXHR7XG5cdFx0Ly9yZXR1cm5zIDAgaWYgZmFsc2UsICsxIGlmIHRydWUsIC0xIGlmIHB0IE9OIHBvbHlnb24gYm91bmRhcnlcblx0XHQvL1NlZSBcIlRoZSBQb2ludCBpbiBQb2x5Z29uIFByb2JsZW0gZm9yIEFyYml0cmFyeSBQb2x5Z29uc1wiIGJ5IEhvcm1hbm4gJiBBZ2F0aG9zXG5cdFx0Ly9odHRwOi8vY2l0ZXNlZXJ4LmlzdC5wc3UuZWR1L3ZpZXdkb2MvZG93bmxvYWQ/ZG9pPTEwLjEuMS44OC41NDk4JnJlcD1yZXAxJnR5cGU9cGRmXG5cdFx0dmFyIHJlc3VsdCA9IDAsXG5cdFx0XHRjbnQgPSBwYXRoLmxlbmd0aDtcblx0XHRpZiAoY250IDwgMylcblx0XHRcdHJldHVybiAwO1xuXHRcdHZhciBpcCA9IHBhdGhbMF07XG5cdFx0Zm9yICh2YXIgaSA9IDE7IGkgPD0gY250OyArK2kpXG5cdFx0e1xuXHRcdFx0dmFyIGlwTmV4dCA9IChpID09PSBjbnQgPyBwYXRoWzBdIDogcGF0aFtpXSk7XG5cdFx0XHRpZiAoaXBOZXh0LlkgPT09IHB0LlkpXG5cdFx0XHR7XG5cdFx0XHRcdGlmICgoaXBOZXh0LlggPT09IHB0LlgpIHx8IChpcC5ZID09PSBwdC5ZICYmICgoaXBOZXh0LlggPiBwdC5YKSA9PT0gKGlwLlggPCBwdC5YKSkpKVxuXHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICgoaXAuWSA8IHB0LlkpICE9PSAoaXBOZXh0LlkgPCBwdC5ZKSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKGlwLlggPj0gcHQuWClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChpcE5leHQuWCA+IHB0LlgpXG5cdFx0XHRcdFx0XHRyZXN1bHQgPSAxIC0gcmVzdWx0O1xuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR2YXIgZCA9IChpcC5YIC0gcHQuWCkgKiAoaXBOZXh0LlkgLSBwdC5ZKSAtIChpcE5leHQuWCAtIHB0LlgpICogKGlwLlkgLSBwdC5ZKTtcblx0XHRcdFx0XHRcdGlmIChkID09PSAwKVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHRcdFx0XHRlbHNlIGlmICgoZCA+IDApID09PSAoaXBOZXh0LlkgPiBpcC5ZKSlcblx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gMSAtIHJlc3VsdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKGlwTmV4dC5YID4gcHQuWClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR2YXIgZCA9IChpcC5YIC0gcHQuWCkgKiAoaXBOZXh0LlkgLSBwdC5ZKSAtIChpcE5leHQuWCAtIHB0LlgpICogKGlwLlkgLSBwdC5ZKTtcblx0XHRcdFx0XHRcdGlmIChkID09PSAwKVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHRcdFx0XHRlbHNlIGlmICgoZCA+IDApID09PSAoaXBOZXh0LlkgPiBpcC5ZKSlcblx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gMSAtIHJlc3VsdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlwID0gaXBOZXh0O1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuUG9pbnRJblBvbHlnb24gPSBmdW5jdGlvbiAocHQsIG9wKVxuXHR7XG5cdFx0Ly9yZXR1cm5zIDAgaWYgZmFsc2UsICsxIGlmIHRydWUsIC0xIGlmIHB0IE9OIHBvbHlnb24gYm91bmRhcnlcblx0XHR2YXIgcmVzdWx0ID0gMDtcblx0XHR2YXIgc3RhcnRPcCA9IG9wO1xuXHRcdHZhciBwdHggPSBwdC5YLFxuXHRcdFx0cHR5ID0gcHQuWTtcblx0XHR2YXIgcG9seTB4ID0gb3AuUHQuWCxcblx0XHRcdHBvbHkweSA9IG9wLlB0Llk7XG5cdFx0ZG8ge1xuXHRcdFx0b3AgPSBvcC5OZXh0O1xuXHRcdFx0dmFyIHBvbHkxeCA9IG9wLlB0LlgsXG5cdFx0XHRcdHBvbHkxeSA9IG9wLlB0Llk7XG5cdFx0XHRpZiAocG9seTF5ID09PSBwdHkpXG5cdFx0XHR7XG5cdFx0XHRcdGlmICgocG9seTF4ID09PSBwdHgpIHx8IChwb2x5MHkgPT09IHB0eSAmJiAoKHBvbHkxeCA+IHB0eCkgPT09IChwb2x5MHggPCBwdHgpKSkpXG5cdFx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKChwb2x5MHkgPCBwdHkpICE9PSAocG9seTF5IDwgcHR5KSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKHBvbHkweCA+PSBwdHgpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAocG9seTF4ID4gcHR4KVxuXHRcdFx0XHRcdFx0cmVzdWx0ID0gMSAtIHJlc3VsdDtcblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dmFyIGQgPSAocG9seTB4IC0gcHR4KSAqIChwb2x5MXkgLSBwdHkpIC0gKHBvbHkxeCAtIHB0eCkgKiAocG9seTB5IC0gcHR5KTtcblx0XHRcdFx0XHRcdGlmIChkID09PSAwKVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHRcdFx0XHRpZiAoKGQgPiAwKSA9PT0gKHBvbHkxeSA+IHBvbHkweSkpXG5cdFx0XHRcdFx0XHRcdHJlc3VsdCA9IDEgLSByZXN1bHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChwb2x5MXggPiBwdHgpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dmFyIGQgPSAocG9seTB4IC0gcHR4KSAqIChwb2x5MXkgLSBwdHkpIC0gKHBvbHkxeCAtIHB0eCkgKiAocG9seTB5IC0gcHR5KTtcblx0XHRcdFx0XHRcdGlmIChkID09PSAwKVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHRcdFx0XHRpZiAoKGQgPiAwKSA9PT0gKHBvbHkxeSA+IHBvbHkweSkpXG5cdFx0XHRcdFx0XHRcdHJlc3VsdCA9IDEgLSByZXN1bHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRwb2x5MHggPSBwb2x5MXg7XG5cdFx0XHRwb2x5MHkgPSBwb2x5MXk7XG5cdFx0fSB3aGlsZSAoc3RhcnRPcCAhPT0gb3ApO1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlBvbHkyQ29udGFpbnNQb2x5MSA9IGZ1bmN0aW9uIChvdXRQdDEsIG91dFB0Milcblx0e1xuXHRcdHZhciBvcCA9IG91dFB0MTtcblx0XHRkbyB7XG5cdFx0XHQvL25iOiBQb2ludEluUG9seWdvbiByZXR1cm5zIDAgaWYgZmFsc2UsICsxIGlmIHRydWUsIC0xIGlmIHB0IG9uIHBvbHlnb25cblx0XHRcdHZhciByZXMgPSB0aGlzLlBvaW50SW5Qb2x5Z29uKG9wLlB0LCBvdXRQdDIpO1xuXHRcdFx0aWYgKHJlcyA+PSAwKVxuXHRcdFx0XHRyZXR1cm4gcmVzID4gMDtcblx0XHRcdG9wID0gb3AuTmV4dDtcblx0XHR9XG5cdFx0d2hpbGUgKG9wICE9PSBvdXRQdDEpXG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5GaXh1cEZpcnN0TGVmdHMxID0gZnVuY3Rpb24gKE9sZE91dFJlYywgTmV3T3V0UmVjKVxuXHR7XG5cdFx0dmFyIG91dFJlYywgZmlyc3RMZWZ0O1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHRvdXRSZWMgPSB0aGlzLm1fUG9seU91dHNbaV07XG5cdFx0XHRmaXJzdExlZnQgPSBDbGlwcGVyTGliLkNsaXBwZXIuUGFyc2VGaXJzdExlZnQob3V0UmVjLkZpcnN0TGVmdCk7XG5cdFx0XHRpZiAob3V0UmVjLlB0cyAhPT0gbnVsbCAmJiBmaXJzdExlZnQgPT09IE9sZE91dFJlYylcblx0XHRcdHtcblx0XHRcdFx0aWYgKHRoaXMuUG9seTJDb250YWluc1BvbHkxKG91dFJlYy5QdHMsIE5ld091dFJlYy5QdHMpKVxuXHRcdFx0XHRcdG91dFJlYy5GaXJzdExlZnQgPSBOZXdPdXRSZWM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5GaXh1cEZpcnN0TGVmdHMyID0gZnVuY3Rpb24gKGlubmVyT3V0UmVjLCBvdXRlck91dFJlYylcblx0e1xuXHRcdC8vQSBwb2x5Z29uIGhhcyBzcGxpdCBpbnRvIHR3byBzdWNoIHRoYXQgb25lIGlzIG5vdyB0aGUgaW5uZXIgb2YgdGhlIG90aGVyLlxuXHRcdC8vSXQncyBwb3NzaWJsZSB0aGF0IHRoZXNlIHBvbHlnb25zIG5vdyB3cmFwIGFyb3VuZCBvdGhlciBwb2x5Z29ucywgc28gY2hlY2tcblx0XHQvL2V2ZXJ5IHBvbHlnb24gdGhhdCdzIGFsc28gY29udGFpbmVkIGJ5IE91dGVyT3V0UmVjJ3MgRmlyc3RMZWZ0IGNvbnRhaW5lclxuXHRcdC8vKGluY2x1ZGluZyBuaWwpIHRvIHNlZSBpZiB0aGV5J3ZlIGJlY29tZSBpbm5lciB0byB0aGUgbmV3IGlubmVyIHBvbHlnb24gLi4uXG5cdFx0dmFyIG9yZmwgPSBvdXRlck91dFJlYy5GaXJzdExlZnQ7XG5cdFx0dmFyIG91dFJlYywgZmlyc3RMZWZ0O1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHRvdXRSZWMgPSB0aGlzLm1fUG9seU91dHNbaV07XG5cdFx0XHRpZiAob3V0UmVjLlB0cyA9PT0gbnVsbCB8fCBvdXRSZWMgPT09IG91dGVyT3V0UmVjIHx8IG91dFJlYyA9PT0gaW5uZXJPdXRSZWMpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0Zmlyc3RMZWZ0ID0gQ2xpcHBlckxpYi5DbGlwcGVyLlBhcnNlRmlyc3RMZWZ0KG91dFJlYy5GaXJzdExlZnQpO1xuXHRcdFx0aWYgKGZpcnN0TGVmdCAhPT0gb3JmbCAmJiBmaXJzdExlZnQgIT09IGlubmVyT3V0UmVjICYmIGZpcnN0TGVmdCAhPT0gb3V0ZXJPdXRSZWMpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0aWYgKHRoaXMuUG9seTJDb250YWluc1BvbHkxKG91dFJlYy5QdHMsIGlubmVyT3V0UmVjLlB0cykpXG5cdFx0XHRcdG91dFJlYy5GaXJzdExlZnQgPSBpbm5lck91dFJlYztcblx0XHRcdGVsc2UgaWYgKHRoaXMuUG9seTJDb250YWluc1BvbHkxKG91dFJlYy5QdHMsIG91dGVyT3V0UmVjLlB0cykpXG5cdFx0XHRcdG91dFJlYy5GaXJzdExlZnQgPSBvdXRlck91dFJlYztcblx0XHRcdGVsc2UgaWYgKG91dFJlYy5GaXJzdExlZnQgPT09IGlubmVyT3V0UmVjIHx8IG91dFJlYy5GaXJzdExlZnQgPT09IG91dGVyT3V0UmVjKVxuXHRcdFx0XHRvdXRSZWMuRmlyc3RMZWZ0ID0gb3JmbDtcblx0XHR9XG5cdH1cblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkZpeHVwRmlyc3RMZWZ0czMgPSBmdW5jdGlvbiAoT2xkT3V0UmVjLCBOZXdPdXRSZWMpXG5cdHtcblx0XHQvL3NhbWUgYXMgRml4dXBGaXJzdExlZnRzMSBidXQgZG9lc24ndCBjYWxsIFBvbHkyQ29udGFpbnNQb2x5MSgpXG5cdFx0dmFyIG91dFJlYztcblx0XHR2YXIgZmlyc3RMZWZ0O1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHRvdXRSZWMgPSB0aGlzLm1fUG9seU91dHNbaV07XG5cdFx0XHRmaXJzdExlZnQgPSBDbGlwcGVyTGliLkNsaXBwZXIuUGFyc2VGaXJzdExlZnQob3V0UmVjLkZpcnN0TGVmdCk7XG5cdFx0XHRpZiAob3V0UmVjLlB0cyAhPT0gbnVsbCAmJiBmaXJzdExlZnQgPT09IE9sZE91dFJlYylcblx0XHRcdFx0b3V0UmVjLkZpcnN0TGVmdCA9IE5ld091dFJlYztcblx0XHR9XG5cdH1cblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuUGFyc2VGaXJzdExlZnQgPSBmdW5jdGlvbiAoRmlyc3RMZWZ0KVxuXHR7XG5cdFx0d2hpbGUgKEZpcnN0TGVmdCAhPT0gbnVsbCAmJiBGaXJzdExlZnQuUHRzID09PSBudWxsKVxuXHRcdFx0Rmlyc3RMZWZ0ID0gRmlyc3RMZWZ0LkZpcnN0TGVmdDtcblx0XHRyZXR1cm4gRmlyc3RMZWZ0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSm9pbkNvbW1vbkVkZ2VzID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5tX0pvaW5zLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHR2YXIgam9pbiA9IHRoaXMubV9Kb2luc1tpXTtcblx0XHRcdHZhciBvdXRSZWMxID0gdGhpcy5HZXRPdXRSZWMoam9pbi5PdXRQdDEuSWR4KTtcblx0XHRcdHZhciBvdXRSZWMyID0gdGhpcy5HZXRPdXRSZWMoam9pbi5PdXRQdDIuSWR4KTtcblx0XHRcdGlmIChvdXRSZWMxLlB0cyA9PT0gbnVsbCB8fCBvdXRSZWMyLlB0cyA9PT0gbnVsbClcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdGlmIChvdXRSZWMxLklzT3BlbiB8fCBvdXRSZWMyLklzT3Blbilcblx0XHRcdHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vZ2V0IHRoZSBwb2x5Z29uIGZyYWdtZW50IHdpdGggdGhlIGNvcnJlY3QgaG9sZSBzdGF0ZSAoRmlyc3RMZWZ0KVxuXHRcdFx0Ly9iZWZvcmUgY2FsbGluZyBKb2luUG9pbnRzKCkgLi4uXG5cdFx0XHR2YXIgaG9sZVN0YXRlUmVjO1xuXHRcdFx0aWYgKG91dFJlYzEgPT09IG91dFJlYzIpXG5cdFx0XHRcdGhvbGVTdGF0ZVJlYyA9IG91dFJlYzE7XG5cdFx0XHRlbHNlIGlmICh0aGlzLk91dFJlYzFSaWdodE9mT3V0UmVjMihvdXRSZWMxLCBvdXRSZWMyKSlcblx0XHRcdFx0aG9sZVN0YXRlUmVjID0gb3V0UmVjMjtcblx0XHRcdGVsc2UgaWYgKHRoaXMuT3V0UmVjMVJpZ2h0T2ZPdXRSZWMyKG91dFJlYzIsIG91dFJlYzEpKVxuXHRcdFx0XHRob2xlU3RhdGVSZWMgPSBvdXRSZWMxO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRob2xlU3RhdGVSZWMgPSB0aGlzLkdldExvd2VybW9zdFJlYyhvdXRSZWMxLCBvdXRSZWMyKTtcblxuXHRcdFx0aWYgKCF0aGlzLkpvaW5Qb2ludHMoam9pbiwgb3V0UmVjMSwgb3V0UmVjMikpIGNvbnRpbnVlO1xuXG5cdFx0XHRpZiAob3V0UmVjMSA9PT0gb3V0UmVjMilcblx0XHRcdHtcblx0XHRcdFx0Ly9pbnN0ZWFkIG9mIGpvaW5pbmcgdHdvIHBvbHlnb25zLCB3ZSd2ZSBqdXN0IGNyZWF0ZWQgYSBuZXcgb25lIGJ5XG5cdFx0XHRcdC8vc3BsaXR0aW5nIG9uZSBwb2x5Z29uIGludG8gdHdvLlxuXHRcdFx0XHRvdXRSZWMxLlB0cyA9IGpvaW4uT3V0UHQxO1xuXHRcdFx0XHRvdXRSZWMxLkJvdHRvbVB0ID0gbnVsbDtcblx0XHRcdFx0b3V0UmVjMiA9IHRoaXMuQ3JlYXRlT3V0UmVjKCk7XG5cdFx0XHRcdG91dFJlYzIuUHRzID0gam9pbi5PdXRQdDI7XG5cdFx0XHRcdC8vdXBkYXRlIGFsbCBPdXRSZWMyLlB0cyBJZHgncyAuLi5cblx0XHRcdFx0dGhpcy5VcGRhdGVPdXRQdElkeHMob3V0UmVjMik7XG5cblx0XHRcdFx0aWYgKHRoaXMuUG9seTJDb250YWluc1BvbHkxKG91dFJlYzIuUHRzLCBvdXRSZWMxLlB0cykpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvL291dFJlYzEgY29udGFpbnMgb3V0UmVjMiAuLi5cblx0XHRcdFx0XHRvdXRSZWMyLklzSG9sZSA9ICFvdXRSZWMxLklzSG9sZTtcblx0XHRcdFx0XHRvdXRSZWMyLkZpcnN0TGVmdCA9IG91dFJlYzE7XG5cdFx0XHRcdFx0aWYgKHRoaXMubV9Vc2luZ1BvbHlUcmVlKVxuXHRcdFx0XHRcdFx0dGhpcy5GaXh1cEZpcnN0TGVmdHMyKG91dFJlYzIsIG91dFJlYzEpO1xuXHRcdFx0XHRcdGlmICgob3V0UmVjMi5Jc0hvbGUgXiB0aGlzLlJldmVyc2VTb2x1dGlvbikgPT0gKHRoaXMuQXJlYSQxKG91dFJlYzIpID4gMCkpXG5cdFx0XHRcdFx0XHR0aGlzLlJldmVyc2VQb2x5UHRMaW5rcyhvdXRSZWMyLlB0cyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAodGhpcy5Qb2x5MkNvbnRhaW5zUG9seTEob3V0UmVjMS5QdHMsIG91dFJlYzIuUHRzKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vb3V0UmVjMiBjb250YWlucyBvdXRSZWMxIC4uLlxuXHRcdFx0XHRcdG91dFJlYzIuSXNIb2xlID0gb3V0UmVjMS5Jc0hvbGU7XG5cdFx0XHRcdFx0b3V0UmVjMS5Jc0hvbGUgPSAhb3V0UmVjMi5Jc0hvbGU7XG5cdFx0XHRcdFx0b3V0UmVjMi5GaXJzdExlZnQgPSBvdXRSZWMxLkZpcnN0TGVmdDtcblx0XHRcdFx0XHRvdXRSZWMxLkZpcnN0TGVmdCA9IG91dFJlYzI7XG5cdFx0XHRcdFx0aWYgKHRoaXMubV9Vc2luZ1BvbHlUcmVlKVxuXHRcdFx0XHRcdFx0dGhpcy5GaXh1cEZpcnN0TGVmdHMyKG91dFJlYzEsIG91dFJlYzIpO1xuXG5cdFx0XHRcdFx0aWYgKChvdXRSZWMxLklzSG9sZSBeIHRoaXMuUmV2ZXJzZVNvbHV0aW9uKSA9PSAodGhpcy5BcmVhJDEob3V0UmVjMSkgPiAwKSlcblx0XHRcdFx0XHRcdHRoaXMuUmV2ZXJzZVBvbHlQdExpbmtzKG91dFJlYzEuUHRzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvL3RoZSAyIHBvbHlnb25zIGFyZSBjb21wbGV0ZWx5IHNlcGFyYXRlIC4uLlxuXHRcdFx0XHRcdG91dFJlYzIuSXNIb2xlID0gb3V0UmVjMS5Jc0hvbGU7XG5cdFx0XHRcdFx0b3V0UmVjMi5GaXJzdExlZnQgPSBvdXRSZWMxLkZpcnN0TGVmdDtcblx0XHRcdFx0XHQvL2ZpeHVwIEZpcnN0TGVmdCBwb2ludGVycyB0aGF0IG1heSBuZWVkIHJlYXNzaWduaW5nIHRvIE91dFJlYzJcblx0XHRcdFx0XHRpZiAodGhpcy5tX1VzaW5nUG9seVRyZWUpXG5cdFx0XHRcdFx0XHR0aGlzLkZpeHVwRmlyc3RMZWZ0czEob3V0UmVjMSwgb3V0UmVjMik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0Ly9qb2luZWQgMiBwb2x5Z29ucyB0b2dldGhlciAuLi5cblx0XHRcdFx0b3V0UmVjMi5QdHMgPSBudWxsO1xuXHRcdFx0XHRvdXRSZWMyLkJvdHRvbVB0ID0gbnVsbDtcblx0XHRcdFx0b3V0UmVjMi5JZHggPSBvdXRSZWMxLklkeDtcblx0XHRcdFx0b3V0UmVjMS5Jc0hvbGUgPSBob2xlU3RhdGVSZWMuSXNIb2xlO1xuXHRcdFx0XHRpZiAoaG9sZVN0YXRlUmVjID09PSBvdXRSZWMyKVxuXHRcdFx0XHRcdG91dFJlYzEuRmlyc3RMZWZ0ID0gb3V0UmVjMi5GaXJzdExlZnQ7XG5cdFx0XHRcdG91dFJlYzIuRmlyc3RMZWZ0ID0gb3V0UmVjMTtcblx0XHRcdFx0Ly9maXh1cCBGaXJzdExlZnQgcG9pbnRlcnMgdGhhdCBtYXkgbmVlZCByZWFzc2lnbmluZyB0byBPdXRSZWMxXG5cdFx0XHRcdGlmICh0aGlzLm1fVXNpbmdQb2x5VHJlZSlcblx0XHRcdFx0XHR0aGlzLkZpeHVwRmlyc3RMZWZ0czMob3V0UmVjMiwgb3V0UmVjMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuVXBkYXRlT3V0UHRJZHhzID0gZnVuY3Rpb24gKG91dHJlYylcblx0e1xuXHRcdHZhciBvcCA9IG91dHJlYy5QdHM7XG5cdFx0ZG8ge1xuXHRcdFx0b3AuSWR4ID0gb3V0cmVjLklkeDtcblx0XHRcdG9wID0gb3AuUHJldjtcblx0XHR9XG5cdFx0d2hpbGUgKG9wICE9PSBvdXRyZWMuUHRzKVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRG9TaW1wbGVQb2x5Z29ucyA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR2YXIgaSA9IDA7XG5cdFx0d2hpbGUgKGkgPCB0aGlzLm1fUG9seU91dHMubGVuZ3RoKVxuXHRcdHtcblx0XHRcdHZhciBvdXRyZWMgPSB0aGlzLm1fUG9seU91dHNbaSsrXTtcblx0XHRcdHZhciBvcCA9IG91dHJlYy5QdHM7XG5cdFx0XHRpZiAob3AgPT09IG51bGwgfHwgb3V0cmVjLklzT3Blbilcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRkbyAvL2ZvciBlYWNoIFB0IGluIFBvbHlnb24gdW50aWwgZHVwbGljYXRlIGZvdW5kIGRvIC4uLlxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgb3AyID0gb3AuTmV4dDtcblx0XHRcdFx0d2hpbGUgKG9wMiAhPT0gb3V0cmVjLlB0cylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShvcC5QdCwgb3AyLlB0KSkgJiYgb3AyLk5leHQgIT09IG9wICYmIG9wMi5QcmV2ICE9PSBvcClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHQvL3NwbGl0IHRoZSBwb2x5Z29uIGludG8gdHdvIC4uLlxuXHRcdFx0XHRcdFx0dmFyIG9wMyA9IG9wLlByZXY7XG5cdFx0XHRcdFx0XHR2YXIgb3A0ID0gb3AyLlByZXY7XG5cdFx0XHRcdFx0XHRvcC5QcmV2ID0gb3A0O1xuXHRcdFx0XHRcdFx0b3A0Lk5leHQgPSBvcDtcblx0XHRcdFx0XHRcdG9wMi5QcmV2ID0gb3AzO1xuXHRcdFx0XHRcdFx0b3AzLk5leHQgPSBvcDI7XG5cdFx0XHRcdFx0XHRvdXRyZWMuUHRzID0gb3A7XG5cdFx0XHRcdFx0XHR2YXIgb3V0cmVjMiA9IHRoaXMuQ3JlYXRlT3V0UmVjKCk7XG5cdFx0XHRcdFx0XHRvdXRyZWMyLlB0cyA9IG9wMjtcblx0XHRcdFx0XHRcdHRoaXMuVXBkYXRlT3V0UHRJZHhzKG91dHJlYzIpO1xuXHRcdFx0XHRcdFx0aWYgKHRoaXMuUG9seTJDb250YWluc1BvbHkxKG91dHJlYzIuUHRzLCBvdXRyZWMuUHRzKSlcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Ly9PdXRSZWMyIGlzIGNvbnRhaW5lZCBieSBPdXRSZWMxIC4uLlxuXHRcdFx0XHRcdFx0XHRvdXRyZWMyLklzSG9sZSA9ICFvdXRyZWMuSXNIb2xlO1xuXHRcdFx0XHRcdFx0XHRvdXRyZWMyLkZpcnN0TGVmdCA9IG91dHJlYztcblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMubV9Vc2luZ1BvbHlUcmVlKSB0aGlzLkZpeHVwRmlyc3RMZWZ0czIob3V0cmVjMiwgb3V0cmVjKTtcblxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiAodGhpcy5Qb2x5MkNvbnRhaW5zUG9seTEob3V0cmVjLlB0cywgb3V0cmVjMi5QdHMpKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHQvL091dFJlYzEgaXMgY29udGFpbmVkIGJ5IE91dFJlYzIgLi4uXG5cdFx0XHRcdFx0XHRcdG91dHJlYzIuSXNIb2xlID0gb3V0cmVjLklzSG9sZTtcblx0XHRcdFx0XHRcdFx0b3V0cmVjLklzSG9sZSA9ICFvdXRyZWMyLklzSG9sZTtcblx0XHRcdFx0XHRcdFx0b3V0cmVjMi5GaXJzdExlZnQgPSBvdXRyZWMuRmlyc3RMZWZ0O1xuXHRcdFx0XHRcdFx0XHRvdXRyZWMuRmlyc3RMZWZ0ID0gb3V0cmVjMjtcblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMubV9Vc2luZ1BvbHlUcmVlKSB0aGlzLkZpeHVwRmlyc3RMZWZ0czIob3V0cmVjLCBvdXRyZWMyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Ly90aGUgMiBwb2x5Z29ucyBhcmUgc2VwYXJhdGUgLi4uXG5cdFx0XHRcdFx0XHRcdG91dHJlYzIuSXNIb2xlID0gb3V0cmVjLklzSG9sZTtcblx0XHRcdFx0XHRcdFx0b3V0cmVjMi5GaXJzdExlZnQgPSBvdXRyZWMuRmlyc3RMZWZ0O1xuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5tX1VzaW5nUG9seVRyZWUpIHRoaXMuRml4dXBGaXJzdExlZnRzMShvdXRyZWMsIG91dHJlYzIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0b3AyID0gb3A7XG5cdFx0XHRcdFx0XHQvL2llIGdldCByZWFkeSBmb3IgdGhlIG5leHQgaXRlcmF0aW9uXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG9wMiA9IG9wMi5OZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9wID0gb3AuTmV4dDtcblx0XHRcdH1cblx0XHRcdHdoaWxlIChvcCAhPT0gb3V0cmVjLlB0cylcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLkFyZWEgPSBmdW5jdGlvbiAocG9seSlcblx0e1xuXHRcdGlmICghQXJyYXkuaXNBcnJheShwb2x5KSlcblx0XHRcdHJldHVybiAwO1xuXHRcdHZhciBjbnQgPSBwb2x5Lmxlbmd0aDtcblx0XHRpZiAoY250IDwgMylcblx0XHRcdHJldHVybiAwO1xuXHRcdHZhciBhID0gMDtcblx0XHRmb3IgKHZhciBpID0gMCwgaiA9IGNudCAtIDE7IGkgPCBjbnQ7ICsraSlcblx0XHR7XG5cdFx0XHRhICs9IChwb2x5W2pdLlggKyBwb2x5W2ldLlgpICogKHBvbHlbal0uWSAtIHBvbHlbaV0uWSk7XG5cdFx0XHRqID0gaTtcblx0XHR9XG5cdFx0cmV0dXJuIC1hICogMC41O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuQXJlYSA9IGZ1bmN0aW9uIChvcClcblx0e1xuXHRcdHZhciBvcEZpcnN0ID0gb3A7XG5cdFx0aWYgKG9wID09PSBudWxsKSByZXR1cm4gMDtcblx0XHR2YXIgYSA9IDA7XG5cdFx0ZG8ge1xuXHRcdFx0YSA9IGEgKyAob3AuUHJldi5QdC5YICsgb3AuUHQuWCkgKiAob3AuUHJldi5QdC5ZIC0gb3AuUHQuWSk7XG5cdFx0XHRvcCA9IG9wLk5leHQ7XG5cdFx0fSB3aGlsZSAob3AgIT09IG9wRmlyc3QpOyAvLyAmJiB0eXBlb2Ygb3AgIT09ICd1bmRlZmluZWQnKTtcblx0XHRyZXR1cm4gYSAqIDAuNTtcblx0fVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuQXJlYSQxID0gZnVuY3Rpb24gKG91dFJlYylcblx0e1xuXHRcdHJldHVybiB0aGlzLkFyZWEob3V0UmVjLlB0cyk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLlNpbXBsaWZ5UG9seWdvbiA9IGZ1bmN0aW9uIChwb2x5LCBmaWxsVHlwZSlcblx0e1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQXJyYXkoKTtcblx0XHR2YXIgYyA9IG5ldyBDbGlwcGVyTGliLkNsaXBwZXIoMCk7XG5cdFx0Yy5TdHJpY3RseVNpbXBsZSA9IHRydWU7XG5cdFx0Yy5BZGRQYXRoKHBvbHksIENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0LCB0cnVlKTtcblx0XHRjLkV4ZWN1dGUoQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uLCByZXN1bHQsIGZpbGxUeXBlLCBmaWxsVHlwZSk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuU2ltcGxpZnlQb2x5Z29ucyA9IGZ1bmN0aW9uIChwb2x5cywgZmlsbFR5cGUpXG5cdHtcblx0XHRpZiAodHlwZW9mIChmaWxsVHlwZSkgPT09IFwidW5kZWZpbmVkXCIpIGZpbGxUeXBlID0gQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IEFycmF5KCk7XG5cdFx0dmFyIGMgPSBuZXcgQ2xpcHBlckxpYi5DbGlwcGVyKDApO1xuXHRcdGMuU3RyaWN0bHlTaW1wbGUgPSB0cnVlO1xuXHRcdGMuQWRkUGF0aHMocG9seXMsIENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0LCB0cnVlKTtcblx0XHRjLkV4ZWN1dGUoQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uLCByZXN1bHQsIGZpbGxUeXBlLCBmaWxsVHlwZSk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuRGlzdGFuY2VTcXJkID0gZnVuY3Rpb24gKHB0MSwgcHQyKVxuXHR7XG5cdFx0dmFyIGR4ID0gKHB0MS5YIC0gcHQyLlgpO1xuXHRcdHZhciBkeSA9IChwdDEuWSAtIHB0Mi5ZKTtcblx0XHRyZXR1cm4gKGR4ICogZHggKyBkeSAqIGR5KTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuRGlzdGFuY2VGcm9tTGluZVNxcmQgPSBmdW5jdGlvbiAocHQsIGxuMSwgbG4yKVxuXHR7XG5cdFx0Ly9UaGUgZXF1YXRpb24gb2YgYSBsaW5lIGluIGdlbmVyYWwgZm9ybSAoQXggKyBCeSArIEMgPSAwKVxuXHRcdC8vZ2l2ZW4gMiBwb2ludHMgKHjCuSx5wrkpICYgKHjCsix5wrIpIGlzIC4uLlxuXHRcdC8vKHnCuSAtIHnCsil4ICsgKHjCsiAtIHjCuSl5ICsgKHnCsiAtIHnCuSl4wrkgLSAoeMKyIC0geMK5KXnCuSA9IDBcblx0XHQvL0EgPSAoecK5IC0gecKyKTsgQiA9ICh4wrIgLSB4wrkpOyBDID0gKHnCsiAtIHnCuSl4wrkgLSAoeMKyIC0geMK5KXnCuVxuXHRcdC8vcGVycGVuZGljdWxhciBkaXN0YW5jZSBvZiBwb2ludCAoeMKzLHnCsykgPSAoQXjCsyArIEJ5wrMgKyBDKS9TcXJ0KEHCsiArIELCsilcblx0XHQvL3NlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BlcnBlbmRpY3VsYXJfZGlzdGFuY2Vcblx0XHR2YXIgQSA9IGxuMS5ZIC0gbG4yLlk7XG5cdFx0dmFyIEIgPSBsbjIuWCAtIGxuMS5YO1xuXHRcdHZhciBDID0gQSAqIGxuMS5YICsgQiAqIGxuMS5ZO1xuXHRcdEMgPSBBICogcHQuWCArIEIgKiBwdC5ZIC0gQztcblx0XHRyZXR1cm4gKEMgKiBDKSAvIChBICogQSArIEIgKiBCKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuU2xvcGVzTmVhckNvbGxpbmVhciA9IGZ1bmN0aW9uIChwdDEsIHB0MiwgcHQzLCBkaXN0U3FyZClcblx0e1xuXHRcdC8vdGhpcyBmdW5jdGlvbiBpcyBtb3JlIGFjY3VyYXRlIHdoZW4gdGhlIHBvaW50IHRoYXQncyBHRU9NRVRSSUNBTExZXG5cdFx0Ly9iZXR3ZWVuIHRoZSBvdGhlciAyIHBvaW50cyBpcyB0aGUgb25lIHRoYXQncyB0ZXN0ZWQgZm9yIGRpc3RhbmNlLlxuXHRcdC8vbmI6IHdpdGggJ3NwaWtlcycsIGVpdGhlciBwdDEgb3IgcHQzIGlzIGdlb21ldHJpY2FsbHkgYmV0d2VlbiB0aGUgb3RoZXIgcHRzXG5cdFx0aWYgKE1hdGguYWJzKHB0MS5YIC0gcHQyLlgpID4gTWF0aC5hYnMocHQxLlkgLSBwdDIuWSkpXG5cdFx0e1xuXHRcdFx0aWYgKChwdDEuWCA+IHB0Mi5YKSA9PT0gKHB0MS5YIDwgcHQzLlgpKVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DbGlwcGVyLkRpc3RhbmNlRnJvbUxpbmVTcXJkKHB0MSwgcHQyLCBwdDMpIDwgZGlzdFNxcmQ7XG5cdFx0XHRlbHNlIGlmICgocHQyLlggPiBwdDEuWCkgPT09IChwdDIuWCA8IHB0My5YKSlcblx0XHRcdFx0cmV0dXJuIENsaXBwZXJMaWIuQ2xpcHBlci5EaXN0YW5jZUZyb21MaW5lU3FyZChwdDIsIHB0MSwgcHQzKSA8IGRpc3RTcXJkO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DbGlwcGVyLkRpc3RhbmNlRnJvbUxpbmVTcXJkKHB0MywgcHQxLCBwdDIpIDwgZGlzdFNxcmQ7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRpZiAoKHB0MS5ZID4gcHQyLlkpID09PSAocHQxLlkgPCBwdDMuWSkpXG5cdFx0XHRcdHJldHVybiBDbGlwcGVyTGliLkNsaXBwZXIuRGlzdGFuY2VGcm9tTGluZVNxcmQocHQxLCBwdDIsIHB0MykgPCBkaXN0U3FyZDtcblx0XHRcdGVsc2UgaWYgKChwdDIuWSA+IHB0MS5ZKSA9PT0gKHB0Mi5ZIDwgcHQzLlkpKVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DbGlwcGVyLkRpc3RhbmNlRnJvbUxpbmVTcXJkKHB0MiwgcHQxLCBwdDMpIDwgZGlzdFNxcmQ7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiBDbGlwcGVyTGliLkNsaXBwZXIuRGlzdGFuY2VGcm9tTGluZVNxcmQocHQzLCBwdDEsIHB0MikgPCBkaXN0U3FyZDtcblx0XHR9XG5cdH1cblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuUG9pbnRzQXJlQ2xvc2UgPSBmdW5jdGlvbiAocHQxLCBwdDIsIGRpc3RTcXJkKVxuXHR7XG5cdFx0dmFyIGR4ID0gcHQxLlggLSBwdDIuWDtcblx0XHR2YXIgZHkgPSBwdDEuWSAtIHB0Mi5ZO1xuXHRcdHJldHVybiAoKGR4ICogZHgpICsgKGR5ICogZHkpIDw9IGRpc3RTcXJkKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuRXhjbHVkZU9wID0gZnVuY3Rpb24gKG9wKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IG9wLlByZXY7XG5cdFx0cmVzdWx0Lk5leHQgPSBvcC5OZXh0O1xuXHRcdG9wLk5leHQuUHJldiA9IHJlc3VsdDtcblx0XHRyZXN1bHQuSWR4ID0gMDtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5DbGVhblBvbHlnb24gPSBmdW5jdGlvbiAocGF0aCwgZGlzdGFuY2UpXG5cdHtcblx0XHRpZiAodHlwZW9mIChkaXN0YW5jZSkgPT09IFwidW5kZWZpbmVkXCIpIGRpc3RhbmNlID0gMS40MTU7XG5cdFx0Ly9kaXN0YW5jZSA9IHByb3hpbWl0eSBpbiB1bml0cy9waXhlbHMgYmVsb3cgd2hpY2ggdmVydGljZXMgd2lsbCBiZSBzdHJpcHBlZC5cblx0XHQvL0RlZmF1bHQgfj0gc3FydCgyKSBzbyB3aGVuIGFkamFjZW50IHZlcnRpY2VzIG9yIHNlbWktYWRqYWNlbnQgdmVydGljZXMgaGF2ZVxuXHRcdC8vYm90aCB4ICYgeSBjb29yZHMgd2l0aGluIDEgdW5pdCwgdGhlbiB0aGUgc2Vjb25kIHZlcnRleCB3aWxsIGJlIHN0cmlwcGVkLlxuXHRcdHZhciBjbnQgPSBwYXRoLmxlbmd0aDtcblx0XHRpZiAoY250ID09PSAwKVxuXHRcdFx0cmV0dXJuIG5ldyBBcnJheSgpO1xuXHRcdHZhciBvdXRQdHMgPSBuZXcgQXJyYXkoY250KTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNudDsgKytpKVxuXHRcdFx0b3V0UHRzW2ldID0gbmV3IENsaXBwZXJMaWIuT3V0UHQoKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNudDsgKytpKVxuXHRcdHtcblx0XHRcdG91dFB0c1tpXS5QdCA9IHBhdGhbaV07XG5cdFx0XHRvdXRQdHNbaV0uTmV4dCA9IG91dFB0c1soaSArIDEpICUgY250XTtcblx0XHRcdG91dFB0c1tpXS5OZXh0LlByZXYgPSBvdXRQdHNbaV07XG5cdFx0XHRvdXRQdHNbaV0uSWR4ID0gMDtcblx0XHR9XG5cdFx0dmFyIGRpc3RTcXJkID0gZGlzdGFuY2UgKiBkaXN0YW5jZTtcblx0XHR2YXIgb3AgPSBvdXRQdHNbMF07XG5cdFx0d2hpbGUgKG9wLklkeCA9PT0gMCAmJiBvcC5OZXh0ICE9PSBvcC5QcmV2KVxuXHRcdHtcblx0XHRcdGlmIChDbGlwcGVyTGliLkNsaXBwZXIuUG9pbnRzQXJlQ2xvc2Uob3AuUHQsIG9wLlByZXYuUHQsIGRpc3RTcXJkKSlcblx0XHRcdHtcblx0XHRcdFx0b3AgPSBDbGlwcGVyTGliLkNsaXBwZXIuRXhjbHVkZU9wKG9wKTtcblx0XHRcdFx0Y250LS07XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChDbGlwcGVyTGliLkNsaXBwZXIuUG9pbnRzQXJlQ2xvc2Uob3AuUHJldi5QdCwgb3AuTmV4dC5QdCwgZGlzdFNxcmQpKVxuXHRcdFx0e1xuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuRXhjbHVkZU9wKG9wLk5leHQpO1xuXHRcdFx0XHRvcCA9IENsaXBwZXJMaWIuQ2xpcHBlci5FeGNsdWRlT3Aob3ApO1xuXHRcdFx0XHRjbnQgLT0gMjtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKENsaXBwZXJMaWIuQ2xpcHBlci5TbG9wZXNOZWFyQ29sbGluZWFyKG9wLlByZXYuUHQsIG9wLlB0LCBvcC5OZXh0LlB0LCBkaXN0U3FyZCkpXG5cdFx0XHR7XG5cdFx0XHRcdG9wID0gQ2xpcHBlckxpYi5DbGlwcGVyLkV4Y2x1ZGVPcChvcCk7XG5cdFx0XHRcdGNudC0tO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRvcC5JZHggPSAxO1xuXHRcdFx0XHRvcCA9IG9wLk5leHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChjbnQgPCAzKVxuXHRcdFx0Y250ID0gMDtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGNudCk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjbnQ7ICsraSlcblx0XHR7XG5cdFx0XHRyZXN1bHRbaV0gPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDEob3AuUHQpO1xuXHRcdFx0b3AgPSBvcC5OZXh0O1xuXHRcdH1cblx0XHRvdXRQdHMgPSBudWxsO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLkNsZWFuUG9seWdvbnMgPSBmdW5jdGlvbiAocG9seXMsIGRpc3RhbmNlKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBBcnJheShwb2x5cy5sZW5ndGgpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gcG9seXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdFx0cmVzdWx0W2ldID0gQ2xpcHBlckxpYi5DbGlwcGVyLkNsZWFuUG9seWdvbihwb2x5c1tpXSwgZGlzdGFuY2UpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLk1pbmtvd3NraSA9IGZ1bmN0aW9uIChwYXR0ZXJuLCBwYXRoLCBJc1N1bSwgSXNDbG9zZWQpXG5cdHtcblx0XHR2YXIgZGVsdGEgPSAoSXNDbG9zZWQgPyAxIDogMCk7XG5cdFx0dmFyIHBvbHlDbnQgPSBwYXR0ZXJuLmxlbmd0aDtcblx0XHR2YXIgcGF0aENudCA9IHBhdGgubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQXJyYXkoKTtcblx0XHRpZiAoSXNTdW0pXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhDbnQ7IGkrKylcblx0XHRcdHtcblx0XHRcdFx0dmFyIHAgPSBuZXcgQXJyYXkocG9seUNudCk7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwLCBqbGVuID0gcGF0dGVybi5sZW5ndGgsIGlwID0gcGF0dGVybltqXTsgaiA8IGpsZW47IGorKywgaXAgPSBwYXR0ZXJuW2pdKVxuXHRcdFx0XHRcdHBbal0gPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIocGF0aFtpXS5YICsgaXAuWCwgcGF0aFtpXS5ZICsgaXAuWSk7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKHApO1xuXHRcdFx0fVxuXHRcdGVsc2Vcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aENudDsgaSsrKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgcCA9IG5ldyBBcnJheShwb2x5Q250KTtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDAsIGpsZW4gPSBwYXR0ZXJuLmxlbmd0aCwgaXAgPSBwYXR0ZXJuW2pdOyBqIDwgamxlbjsgaisrLCBpcCA9IHBhdHRlcm5bal0pXG5cdFx0XHRcdFx0cFtqXSA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MihwYXRoW2ldLlggLSBpcC5YLCBwYXRoW2ldLlkgLSBpcC5ZKTtcblx0XHRcdFx0cmVzdWx0LnB1c2gocCk7XG5cdFx0XHR9XG5cdFx0dmFyIHF1YWRzID0gbmV3IEFycmF5KCk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoQ250IC0gMSArIGRlbHRhOyBpKyspXG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IHBvbHlDbnQ7IGorKylcblx0XHRcdHtcblx0XHRcdFx0dmFyIHF1YWQgPSBuZXcgQXJyYXkoKTtcblx0XHRcdFx0cXVhZC5wdXNoKHJlc3VsdFtpICUgcGF0aENudF1baiAlIHBvbHlDbnRdKTtcblx0XHRcdFx0cXVhZC5wdXNoKHJlc3VsdFsoaSArIDEpICUgcGF0aENudF1baiAlIHBvbHlDbnRdKTtcblx0XHRcdFx0cXVhZC5wdXNoKHJlc3VsdFsoaSArIDEpICUgcGF0aENudF1bKGogKyAxKSAlIHBvbHlDbnRdKTtcblx0XHRcdFx0cXVhZC5wdXNoKHJlc3VsdFtpICUgcGF0aENudF1bKGogKyAxKSAlIHBvbHlDbnRdKTtcblx0XHRcdFx0aWYgKCFDbGlwcGVyTGliLkNsaXBwZXIuT3JpZW50YXRpb24ocXVhZCkpXG5cdFx0XHRcdFx0cXVhZC5yZXZlcnNlKCk7XG5cdFx0XHRcdHF1YWRzLnB1c2gocXVhZCk7XG5cdFx0XHR9XG5cdFx0cmV0dXJuIHF1YWRzO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5NaW5rb3dza2lTdW0gPSBmdW5jdGlvbiAocGF0dGVybiwgcGF0aF9vcl9wYXRocywgcGF0aElzQ2xvc2VkKVxuXHR7XG5cdFx0aWYgKCEocGF0aF9vcl9wYXRoc1swXSBpbnN0YW5jZW9mIEFycmF5KSlcblx0XHR7XG5cdFx0XHR2YXIgcGF0aCA9IHBhdGhfb3JfcGF0aHM7XG5cdFx0XHR2YXIgcGF0aHMgPSBDbGlwcGVyTGliLkNsaXBwZXIuTWlua293c2tpKHBhdHRlcm4sIHBhdGgsIHRydWUsIHBhdGhJc0Nsb3NlZCk7XG5cdFx0XHR2YXIgYyA9IG5ldyBDbGlwcGVyTGliLkNsaXBwZXIoKTtcblx0XHRcdGMuQWRkUGF0aHMocGF0aHMsIENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0LCB0cnVlKTtcblx0XHRcdGMuRXhlY3V0ZShDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24sIHBhdGhzLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvKTtcblx0XHRcdHJldHVybiBwYXRocztcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHZhciBwYXRocyA9IHBhdGhfb3JfcGF0aHM7XG5cdFx0XHR2YXIgc29sdXRpb24gPSBuZXcgQ2xpcHBlckxpYi5QYXRocygpO1xuXHRcdFx0dmFyIGMgPSBuZXcgQ2xpcHBlckxpYi5DbGlwcGVyKCk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgKytpKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgdG1wID0gQ2xpcHBlckxpYi5DbGlwcGVyLk1pbmtvd3NraShwYXR0ZXJuLCBwYXRoc1tpXSwgdHJ1ZSwgcGF0aElzQ2xvc2VkKTtcblx0XHRcdFx0Yy5BZGRQYXRocyh0bXAsIENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0LCB0cnVlKTtcblx0XHRcdFx0aWYgKHBhdGhJc0Nsb3NlZClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBwYXRoID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRyYW5zbGF0ZVBhdGgocGF0aHNbaV0sIHBhdHRlcm5bMF0pO1xuXHRcdFx0XHRcdGMuQWRkUGF0aChwYXRoLCBDbGlwcGVyTGliLlBvbHlUeXBlLnB0Q2xpcCwgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGMuRXhlY3V0ZShDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24sIHNvbHV0aW9uLFxuXHRcdFx0XHRDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvKTtcblx0XHRcdHJldHVybiBzb2x1dGlvbjtcblx0XHR9XG5cdH1cblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuVHJhbnNsYXRlUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCBkZWx0YSlcblx0e1xuXHRcdHZhciBvdXRQYXRoID0gbmV3IENsaXBwZXJMaWIuUGF0aCgpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKylcblx0XHRcdG91dFBhdGgucHVzaChuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIocGF0aFtpXS5YICsgZGVsdGEuWCwgcGF0aFtpXS5ZICsgZGVsdGEuWSkpO1xuXHRcdHJldHVybiBvdXRQYXRoO1xuXHR9XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLk1pbmtvd3NraURpZmYgPSBmdW5jdGlvbiAocG9seTEsIHBvbHkyKVxuXHR7XG5cdFx0dmFyIHBhdGhzID0gQ2xpcHBlckxpYi5DbGlwcGVyLk1pbmtvd3NraShwb2x5MSwgcG9seTIsIGZhbHNlLCB0cnVlKTtcblx0XHR2YXIgYyA9IG5ldyBDbGlwcGVyTGliLkNsaXBwZXIoKTtcblx0XHRjLkFkZFBhdGhzKHBhdGhzLCBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdCwgdHJ1ZSk7XG5cdFx0Yy5FeGVjdXRlKENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbiwgcGF0aHMsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm8sIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm8pO1xuXHRcdHJldHVybiBwYXRocztcblx0fVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5Qb2x5VHJlZVRvUGF0aHMgPSBmdW5jdGlvbiAocG9seXRyZWUpXG5cdHtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IEFycmF5KCk7XG5cdFx0Ly9yZXN1bHQuc2V0X0NhcGFjaXR5KHBvbHl0cmVlLmdldF9Ub3RhbCgpKTtcblx0XHRDbGlwcGVyTGliLkNsaXBwZXIuQWRkUG9seU5vZGVUb1BhdGhzKHBvbHl0cmVlLCBDbGlwcGVyTGliLkNsaXBwZXIuTm9kZVR5cGUubnRBbnksIHJlc3VsdCk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuQWRkUG9seU5vZGVUb1BhdGhzID0gZnVuY3Rpb24gKHBvbHlub2RlLCBudCwgcGF0aHMpXG5cdHtcblx0XHR2YXIgbWF0Y2ggPSB0cnVlO1xuXHRcdHN3aXRjaCAobnQpXG5cdFx0e1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5DbGlwcGVyLk5vZGVUeXBlLm50T3Blbjpcblx0XHRcdHJldHVybjtcblx0XHRjYXNlIENsaXBwZXJMaWIuQ2xpcHBlci5Ob2RlVHlwZS5udENsb3NlZDpcblx0XHRcdG1hdGNoID0gIXBvbHlub2RlLklzT3Blbjtcblx0XHRcdGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0aWYgKHBvbHlub2RlLm1fcG9seWdvbi5sZW5ndGggPiAwICYmIG1hdGNoKVxuXHRcdFx0cGF0aHMucHVzaChwb2x5bm9kZS5tX3BvbHlnb24pO1xuXHRcdGZvciAodmFyICRpMyA9IDAsICR0MyA9IHBvbHlub2RlLkNoaWxkcygpLCAkbDMgPSAkdDMubGVuZ3RoLCBwbiA9ICR0M1skaTNdOyAkaTMgPCAkbDM7ICRpMysrLCBwbiA9ICR0M1skaTNdKVxuXHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyLkFkZFBvbHlOb2RlVG9QYXRocyhwbiwgbnQsIHBhdGhzKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuT3BlblBhdGhzRnJvbVBvbHlUcmVlID0gZnVuY3Rpb24gKHBvbHl0cmVlKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBDbGlwcGVyTGliLlBhdGhzKCk7XG5cdFx0Ly9yZXN1bHQuc2V0X0NhcGFjaXR5KHBvbHl0cmVlLkNoaWxkQ291bnQoKSk7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSBwb2x5dHJlZS5DaGlsZENvdW50KCk7IGkgPCBpbGVuOyBpKyspXG5cdFx0XHRpZiAocG9seXRyZWUuQ2hpbGRzKClbaV0uSXNPcGVuKVxuXHRcdFx0XHRyZXN1bHQucHVzaChwb2x5dHJlZS5DaGlsZHMoKVtpXS5tX3BvbHlnb24pO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLkNsb3NlZFBhdGhzRnJvbVBvbHlUcmVlID0gZnVuY3Rpb24gKHBvbHl0cmVlKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBDbGlwcGVyTGliLlBhdGhzKCk7XG5cdFx0Ly9yZXN1bHQuc2V0X0NhcGFjaXR5KHBvbHl0cmVlLlRvdGFsKCkpO1xuXHRcdENsaXBwZXJMaWIuQ2xpcHBlci5BZGRQb2x5Tm9kZVRvUGF0aHMocG9seXRyZWUsIENsaXBwZXJMaWIuQ2xpcHBlci5Ob2RlVHlwZS5udENsb3NlZCwgcmVzdWx0KTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdEluaGVyaXQoQ2xpcHBlckxpYi5DbGlwcGVyLCBDbGlwcGVyTGliLkNsaXBwZXJCYXNlKTtcblx0Q2xpcHBlckxpYi5DbGlwcGVyLk5vZGVUeXBlID0ge1xuXHRcdG50QW55OiAwLFxuXHRcdG50T3BlbjogMSxcblx0XHRudENsb3NlZDogMlxuXHR9O1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQgPSBmdW5jdGlvbiAobWl0ZXJMaW1pdCwgYXJjVG9sZXJhbmNlKVxuXHR7XG5cdFx0aWYgKHR5cGVvZiAobWl0ZXJMaW1pdCkgPT09IFwidW5kZWZpbmVkXCIpIG1pdGVyTGltaXQgPSAyO1xuXHRcdGlmICh0eXBlb2YgKGFyY1RvbGVyYW5jZSkgPT09IFwidW5kZWZpbmVkXCIpIGFyY1RvbGVyYW5jZSA9IENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5kZWZfYXJjX3RvbGVyYW5jZTtcblx0XHR0aGlzLm1fZGVzdFBvbHlzID0gbmV3IENsaXBwZXJMaWIuUGF0aHMoKTtcblx0XHR0aGlzLm1fc3JjUG9seSA9IG5ldyBDbGlwcGVyTGliLlBhdGgoKTtcblx0XHR0aGlzLm1fZGVzdFBvbHkgPSBuZXcgQ2xpcHBlckxpYi5QYXRoKCk7XG5cdFx0dGhpcy5tX25vcm1hbHMgPSBuZXcgQXJyYXkoKTtcblx0XHR0aGlzLm1fZGVsdGEgPSAwO1xuXHRcdHRoaXMubV9zaW5BID0gMDtcblx0XHR0aGlzLm1fc2luID0gMDtcblx0XHR0aGlzLm1fY29zID0gMDtcblx0XHR0aGlzLm1fbWl0ZXJMaW0gPSAwO1xuXHRcdHRoaXMubV9TdGVwc1BlclJhZCA9IDA7XG5cdFx0dGhpcy5tX2xvd2VzdCA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MCgpO1xuXHRcdHRoaXMubV9wb2x5Tm9kZXMgPSBuZXcgQ2xpcHBlckxpYi5Qb2x5Tm9kZSgpO1xuXHRcdHRoaXMuTWl0ZXJMaW1pdCA9IG1pdGVyTGltaXQ7XG5cdFx0dGhpcy5BcmNUb2xlcmFuY2UgPSBhcmNUb2xlcmFuY2U7XG5cdFx0dGhpcy5tX2xvd2VzdC5YID0gLTE7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnR3b19waSA9IDYuMjgzMTg1MzA3MTc5NTk7XG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5kZWZfYXJjX3RvbGVyYW5jZSA9IDAuMjU7XG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5wcm90b3R5cGUuQ2xlYXIgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0Q2xpcHBlckxpYi5DbGVhcih0aGlzLm1fcG9seU5vZGVzLkNoaWxkcygpKTtcblx0XHR0aGlzLm1fbG93ZXN0LlggPSAtMTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQgPSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQ7XG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5wcm90b3R5cGUuQWRkUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCBqb2luVHlwZSwgZW5kVHlwZSlcblx0e1xuXHRcdHZhciBoaWdoSSA9IHBhdGgubGVuZ3RoIC0gMTtcblx0XHRpZiAoaGlnaEkgPCAwKVxuXHRcdFx0cmV0dXJuO1xuXHRcdHZhciBuZXdOb2RlID0gbmV3IENsaXBwZXJMaWIuUG9seU5vZGUoKTtcblx0XHRuZXdOb2RlLm1fam9pbnR5cGUgPSBqb2luVHlwZTtcblx0XHRuZXdOb2RlLm1fZW5kdHlwZSA9IGVuZFR5cGU7XG5cdFx0Ly9zdHJpcCBkdXBsaWNhdGUgcG9pbnRzIGZyb20gcGF0aCBhbmQgYWxzbyBnZXQgaW5kZXggdG8gdGhlIGxvd2VzdCBwb2ludCAuLi5cblx0XHRpZiAoZW5kVHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0Q2xvc2VkTGluZSB8fCBlbmRUeXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRQb2x5Z29uKVxuXHRcdFx0d2hpbGUgKGhpZ2hJID4gMCAmJiBDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHBhdGhbMF0sIHBhdGhbaGlnaEldKSlcblx0XHRcdFx0aGlnaEktLTtcblx0XHQvL25ld05vZGUubV9wb2x5Z29uLnNldF9DYXBhY2l0eShoaWdoSSArIDEpO1xuXHRcdG5ld05vZGUubV9wb2x5Z29uLnB1c2gocGF0aFswXSk7XG5cdFx0dmFyIGogPSAwLFxuXHRcdFx0ayA9IDA7XG5cdFx0Zm9yICh2YXIgaSA9IDE7IGkgPD0gaGlnaEk7IGkrKylcblx0XHRcdGlmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0luZXF1YWxpdHkobmV3Tm9kZS5tX3BvbHlnb25bal0sIHBhdGhbaV0pKVxuXHRcdFx0e1xuXHRcdFx0XHRqKys7XG5cdFx0XHRcdG5ld05vZGUubV9wb2x5Z29uLnB1c2gocGF0aFtpXSk7XG5cdFx0XHRcdGlmIChwYXRoW2ldLlkgPiBuZXdOb2RlLm1fcG9seWdvbltrXS5ZIHx8IChwYXRoW2ldLlkgPT09IG5ld05vZGUubV9wb2x5Z29uW2tdLlkgJiYgcGF0aFtpXS5YIDwgbmV3Tm9kZS5tX3BvbHlnb25ba10uWCkpXG5cdFx0XHRcdFx0ayA9IGo7XG5cdFx0XHR9XG5cdFx0aWYgKGVuZFR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZFBvbHlnb24gJiYgaiA8IDIpIHJldHVybjtcblxuXHRcdHRoaXMubV9wb2x5Tm9kZXMuQWRkQ2hpbGQobmV3Tm9kZSk7XG5cdFx0Ly9pZiB0aGlzIHBhdGgncyBsb3dlc3QgcHQgaXMgbG93ZXIgdGhhbiBhbGwgdGhlIG90aGVycyB0aGVuIHVwZGF0ZSBtX2xvd2VzdFxuXHRcdGlmIChlbmRUeXBlICE9PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRQb2x5Z29uKVxuXHRcdFx0cmV0dXJuO1xuXHRcdGlmICh0aGlzLm1fbG93ZXN0LlggPCAwKVxuXHRcdFx0dGhpcy5tX2xvd2VzdCA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50Mih0aGlzLm1fcG9seU5vZGVzLkNoaWxkQ291bnQoKSAtIDEsIGspO1xuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR2YXIgaXAgPSB0aGlzLm1fcG9seU5vZGVzLkNoaWxkcygpW3RoaXMubV9sb3dlc3QuWF0ubV9wb2x5Z29uW3RoaXMubV9sb3dlc3QuWV07XG5cdFx0XHRpZiAobmV3Tm9kZS5tX3BvbHlnb25ba10uWSA+IGlwLlkgfHwgKG5ld05vZGUubV9wb2x5Z29uW2tdLlkgPT09IGlwLlkgJiYgbmV3Tm9kZS5tX3BvbHlnb25ba10uWCA8IGlwLlgpKVxuXHRcdFx0XHR0aGlzLm1fbG93ZXN0ID0gbmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRDb3VudCgpIC0gMSwgayk7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5wcm90b3R5cGUuQWRkUGF0aHMgPSBmdW5jdGlvbiAocGF0aHMsIGpvaW5UeXBlLCBlbmRUeXBlKVxuXHR7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSBwYXRocy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspXG5cdFx0XHR0aGlzLkFkZFBhdGgocGF0aHNbaV0sIGpvaW5UeXBlLCBlbmRUeXBlKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQucHJvdG90eXBlLkZpeE9yaWVudGF0aW9ucyA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHQvL2ZpeHVwIG9yaWVudGF0aW9ucyBvZiBhbGwgY2xvc2VkIHBhdGhzIGlmIHRoZSBvcmllbnRhdGlvbiBvZiB0aGVcblx0XHQvL2Nsb3NlZCBwYXRoIHdpdGggdGhlIGxvd2VybW9zdCB2ZXJ0ZXggaXMgd3JvbmcgLi4uXG5cdFx0aWYgKHRoaXMubV9sb3dlc3QuWCA+PSAwICYmICFDbGlwcGVyTGliLkNsaXBwZXIuT3JpZW50YXRpb24odGhpcy5tX3BvbHlOb2Rlcy5DaGlsZHMoKVt0aGlzLm1fbG93ZXN0LlhdLm1fcG9seWdvbikpXG5cdFx0e1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1fcG9seU5vZGVzLkNoaWxkQ291bnQoKTsgaSsrKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgbm9kZSA9IHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRzKClbaV07XG5cdFx0XHRcdGlmIChub2RlLm1fZW5kdHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0Q2xvc2VkUG9seWdvbiB8fCAobm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZExpbmUgJiYgQ2xpcHBlckxpYi5DbGlwcGVyLk9yaWVudGF0aW9uKG5vZGUubV9wb2x5Z29uKSkpXG5cdFx0XHRcdFx0bm9kZS5tX3BvbHlnb24ucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1fcG9seU5vZGVzLkNoaWxkQ291bnQoKTsgaSsrKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgbm9kZSA9IHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRzKClbaV07XG5cdFx0XHRcdGlmIChub2RlLm1fZW5kdHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0Q2xvc2VkTGluZSAmJiAhQ2xpcHBlckxpYi5DbGlwcGVyLk9yaWVudGF0aW9uKG5vZGUubV9wb2x5Z29uKSlcblx0XHRcdFx0XHRub2RlLm1fcG9seWdvbi5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5HZXRVbml0Tm9ybWFsID0gZnVuY3Rpb24gKHB0MSwgcHQyKVxuXHR7XG5cdFx0dmFyIGR4ID0gKHB0Mi5YIC0gcHQxLlgpO1xuXHRcdHZhciBkeSA9IChwdDIuWSAtIHB0MS5ZKTtcblx0XHRpZiAoKGR4ID09PSAwKSAmJiAoZHkgPT09IDApKVxuXHRcdFx0cmV0dXJuIG5ldyBDbGlwcGVyTGliLkRvdWJsZVBvaW50MigwLCAwKTtcblx0XHR2YXIgZiA9IDEgLyBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXHRcdGR4ICo9IGY7XG5cdFx0ZHkgKj0gZjtcblx0XHRyZXR1cm4gbmV3IENsaXBwZXJMaWIuRG91YmxlUG9pbnQyKGR5LCAtZHgpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5wcm90b3R5cGUuRG9PZmZzZXQgPSBmdW5jdGlvbiAoZGVsdGEpXG5cdHtcblx0XHR0aGlzLm1fZGVzdFBvbHlzID0gbmV3IEFycmF5KCk7XG5cdFx0dGhpcy5tX2RlbHRhID0gZGVsdGE7XG5cdFx0Ly9pZiBaZXJvIG9mZnNldCwganVzdCBjb3B5IGFueSBDTE9TRUQgcG9seWdvbnMgdG8gbV9wIGFuZCByZXR1cm4gLi4uXG5cdFx0aWYgKENsaXBwZXJMaWIuQ2xpcHBlckJhc2UubmVhcl96ZXJvKGRlbHRhKSlcblx0XHR7XG5cdFx0XHQvL3RoaXMubV9kZXN0UG9seXMuc2V0X0NhcGFjaXR5KHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRDb3VudCk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRDb3VudCgpOyBpKyspXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBub2RlID0gdGhpcy5tX3BvbHlOb2Rlcy5DaGlsZHMoKVtpXTtcblx0XHRcdFx0aWYgKG5vZGUubV9lbmR0eXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRQb2x5Z29uKVxuXHRcdFx0XHRcdHRoaXMubV9kZXN0UG9seXMucHVzaChub2RlLm1fcG9seWdvbik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vc2VlIG9mZnNldF90cmlnaW5vbWV0cnkzLnN2ZyBpbiB0aGUgZG9jdW1lbnRhdGlvbiBmb2xkZXIgLi4uXG5cdFx0aWYgKHRoaXMuTWl0ZXJMaW1pdCA+IDIpXG5cdFx0XHR0aGlzLm1fbWl0ZXJMaW0gPSAyIC8gKHRoaXMuTWl0ZXJMaW1pdCAqIHRoaXMuTWl0ZXJMaW1pdCk7XG5cdFx0ZWxzZVxuXHRcdFx0dGhpcy5tX21pdGVyTGltID0gMC41O1xuXHRcdHZhciB5O1xuXHRcdGlmICh0aGlzLkFyY1RvbGVyYW5jZSA8PSAwKVxuXHRcdFx0eSA9IENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5kZWZfYXJjX3RvbGVyYW5jZTtcblx0XHRlbHNlIGlmICh0aGlzLkFyY1RvbGVyYW5jZSA+IE1hdGguYWJzKGRlbHRhKSAqIENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5kZWZfYXJjX3RvbGVyYW5jZSlcblx0XHRcdHkgPSBNYXRoLmFicyhkZWx0YSkgKiBDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuZGVmX2FyY190b2xlcmFuY2U7XG5cdFx0ZWxzZVxuXHRcdFx0eSA9IHRoaXMuQXJjVG9sZXJhbmNlO1xuXHRcdC8vc2VlIG9mZnNldF90cmlnaW5vbWV0cnkyLnN2ZyBpbiB0aGUgZG9jdW1lbnRhdGlvbiBmb2xkZXIgLi4uXG5cdFx0dmFyIHN0ZXBzID0gMy4xNDE1OTI2NTM1ODk3OSAvIE1hdGguYWNvcygxIC0geSAvIE1hdGguYWJzKGRlbHRhKSk7XG5cdFx0dGhpcy5tX3NpbiA9IE1hdGguc2luKENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC50d29fcGkgLyBzdGVwcyk7XG5cdFx0dGhpcy5tX2NvcyA9IE1hdGguY29zKENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC50d29fcGkgLyBzdGVwcyk7XG5cdFx0dGhpcy5tX1N0ZXBzUGVyUmFkID0gc3RlcHMgLyBDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQudHdvX3BpO1xuXHRcdGlmIChkZWx0YSA8IDApXG5cdFx0XHR0aGlzLm1fc2luID0gLXRoaXMubV9zaW47XG5cdFx0Ly90aGlzLm1fZGVzdFBvbHlzLnNldF9DYXBhY2l0eSh0aGlzLm1fcG9seU5vZGVzLkNoaWxkQ291bnQgKiAyKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRDb3VudCgpOyBpKyspXG5cdFx0e1xuXHRcdFx0dmFyIG5vZGUgPSB0aGlzLm1fcG9seU5vZGVzLkNoaWxkcygpW2ldO1xuXHRcdFx0dGhpcy5tX3NyY1BvbHkgPSBub2RlLm1fcG9seWdvbjtcblx0XHRcdHZhciBsZW4gPSB0aGlzLm1fc3JjUG9seS5sZW5ndGg7XG5cdFx0XHRpZiAobGVuID09PSAwIHx8IChkZWx0YSA8PSAwICYmIChsZW4gPCAzIHx8IG5vZGUubV9lbmR0eXBlICE9PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRQb2x5Z29uKSkpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0dGhpcy5tX2Rlc3RQb2x5ID0gbmV3IEFycmF5KCk7XG5cdFx0XHRpZiAobGVuID09PSAxKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAobm9kZS5tX2pvaW50eXBlID09PSBDbGlwcGVyTGliLkpvaW5UeXBlLmp0Um91bmQpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgWCA9IDEsXG5cdFx0XHRcdFx0XHRZID0gMDtcblx0XHRcdFx0XHRmb3IgKHZhciBqID0gMTsgaiA8PSBzdGVwczsgaisrKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50MihDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbMF0uWCArIFggKiBkZWx0YSksIENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVswXS5ZICsgWSAqIGRlbHRhKSkpO1xuXHRcdFx0XHRcdFx0dmFyIFgyID0gWDtcblx0XHRcdFx0XHRcdFggPSBYICogdGhpcy5tX2NvcyAtIHRoaXMubV9zaW4gKiBZO1xuXHRcdFx0XHRcdFx0WSA9IFgyICogdGhpcy5tX3NpbiArIFkgKiB0aGlzLm1fY29zO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgWCA9IC0xLFxuXHRcdFx0XHRcdFx0WSA9IC0xO1xuXHRcdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgNDsgKytqKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50MihDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbMF0uWCArIFggKiBkZWx0YSksIENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVswXS5ZICsgWSAqIGRlbHRhKSkpO1xuXHRcdFx0XHRcdFx0aWYgKFggPCAwKVxuXHRcdFx0XHRcdFx0XHRYID0gMTtcblx0XHRcdFx0XHRcdGVsc2UgaWYgKFkgPCAwKVxuXHRcdFx0XHRcdFx0XHRZID0gMTtcblx0XHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdFx0WCA9IC0xO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLm1fZGVzdFBvbHlzLnB1c2godGhpcy5tX2Rlc3RQb2x5KTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHQvL2J1aWxkIG1fbm9ybWFscyAuLi5cblx0XHRcdHRoaXMubV9ub3JtYWxzLmxlbmd0aCA9IDA7XG5cdFx0XHQvL3RoaXMubV9ub3JtYWxzLnNldF9DYXBhY2l0eShsZW4pO1xuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBsZW4gLSAxOyBqKyspXG5cdFx0XHRcdHRoaXMubV9ub3JtYWxzLnB1c2goQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LkdldFVuaXROb3JtYWwodGhpcy5tX3NyY1BvbHlbal0sIHRoaXMubV9zcmNQb2x5W2ogKyAxXSkpO1xuXHRcdFx0aWYgKG5vZGUubV9lbmR0eXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRMaW5lIHx8IG5vZGUubV9lbmR0eXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRQb2x5Z29uKVxuXHRcdFx0XHR0aGlzLm1fbm9ybWFscy5wdXNoKENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5HZXRVbml0Tm9ybWFsKHRoaXMubV9zcmNQb2x5W2xlbiAtIDFdLCB0aGlzLm1fc3JjUG9seVswXSkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHR0aGlzLm1fbm9ybWFscy5wdXNoKG5ldyBDbGlwcGVyTGliLkRvdWJsZVBvaW50MSh0aGlzLm1fbm9ybWFsc1tsZW4gLSAyXSkpO1xuXHRcdFx0aWYgKG5vZGUubV9lbmR0eXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRQb2x5Z29uKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgayA9IGxlbiAtIDE7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspXG5cdFx0XHRcdFx0ayA9IHRoaXMuT2Zmc2V0UG9pbnQoaiwgaywgbm9kZS5tX2pvaW50eXBlKTtcblx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5cy5wdXNoKHRoaXMubV9kZXN0UG9seSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChub2RlLm1fZW5kdHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0Q2xvc2VkTGluZSlcblx0XHRcdHtcblx0XHRcdFx0dmFyIGsgPSBsZW4gLSAxO1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKVxuXHRcdFx0XHRcdGsgPSB0aGlzLk9mZnNldFBvaW50KGosIGssIG5vZGUubV9qb2ludHlwZSk7XG5cdFx0XHRcdHRoaXMubV9kZXN0UG9seXMucHVzaCh0aGlzLm1fZGVzdFBvbHkpO1xuXHRcdFx0XHR0aGlzLm1fZGVzdFBvbHkgPSBuZXcgQXJyYXkoKTtcblx0XHRcdFx0Ly9yZS1idWlsZCBtX25vcm1hbHMgLi4uXG5cdFx0XHRcdHZhciBuID0gdGhpcy5tX25vcm1hbHNbbGVuIC0gMV07XG5cdFx0XHRcdGZvciAodmFyIGogPSBsZW4gLSAxOyBqID4gMDsgai0tKVxuXHRcdFx0XHRcdHRoaXMubV9ub3JtYWxzW2pdID0gbmV3IENsaXBwZXJMaWIuRG91YmxlUG9pbnQyKC10aGlzLm1fbm9ybWFsc1tqIC0gMV0uWCwgLXRoaXMubV9ub3JtYWxzW2ogLSAxXS5ZKTtcblx0XHRcdFx0dGhpcy5tX25vcm1hbHNbMF0gPSBuZXcgQ2xpcHBlckxpYi5Eb3VibGVQb2ludDIoLW4uWCwgLW4uWSk7XG5cdFx0XHRcdGsgPSAwO1xuXHRcdFx0XHRmb3IgKHZhciBqID0gbGVuIC0gMTsgaiA+PSAwOyBqLS0pXG5cdFx0XHRcdFx0ayA9IHRoaXMuT2Zmc2V0UG9pbnQoaiwgaywgbm9kZS5tX2pvaW50eXBlKTtcblx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5cy5wdXNoKHRoaXMubV9kZXN0UG9seSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBrID0gMDtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDE7IGogPCBsZW4gLSAxOyArK2opXG5cdFx0XHRcdFx0ayA9IHRoaXMuT2Zmc2V0UG9pbnQoaiwgaywgbm9kZS5tX2pvaW50eXBlKTtcblx0XHRcdFx0dmFyIHB0MTtcblx0XHRcdFx0aWYgKG5vZGUubV9lbmR0eXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRPcGVuQnV0dClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBqID0gbGVuIC0gMTtcblx0XHRcdFx0XHRwdDEgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlggKyB0aGlzLm1fbm9ybWFsc1tqXS5YICogZGVsdGEpLCBDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbal0uWSArIHRoaXMubV9ub3JtYWxzW2pdLlkgKiBkZWx0YSkpO1xuXHRcdFx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKHB0MSk7XG5cdFx0XHRcdFx0cHQxID0gbmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5YIC0gdGhpcy5tX25vcm1hbHNbal0uWCAqIGRlbHRhKSwgQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlkgLSB0aGlzLm1fbm9ybWFsc1tqXS5ZICogZGVsdGEpKTtcblx0XHRcdFx0XHR0aGlzLm1fZGVzdFBvbHkucHVzaChwdDEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBqID0gbGVuIC0gMTtcblx0XHRcdFx0XHRrID0gbGVuIC0gMjtcblx0XHRcdFx0XHR0aGlzLm1fc2luQSA9IDA7XG5cdFx0XHRcdFx0dGhpcy5tX25vcm1hbHNbal0gPSBuZXcgQ2xpcHBlckxpYi5Eb3VibGVQb2ludDIoLXRoaXMubV9ub3JtYWxzW2pdLlgsIC10aGlzLm1fbm9ybWFsc1tqXS5ZKTtcblx0XHRcdFx0XHRpZiAobm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldE9wZW5TcXVhcmUpXG5cdFx0XHRcdFx0XHR0aGlzLkRvU3F1YXJlKGosIGspO1xuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdHRoaXMuRG9Sb3VuZChqLCBrKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL3JlLWJ1aWxkIG1fbm9ybWFscyAuLi5cblx0XHRcdFx0Zm9yICh2YXIgaiA9IGxlbiAtIDE7IGogPiAwOyBqLS0pXG5cdFx0XHRcdFx0dGhpcy5tX25vcm1hbHNbal0gPSBuZXcgQ2xpcHBlckxpYi5Eb3VibGVQb2ludDIoLXRoaXMubV9ub3JtYWxzW2ogLSAxXS5YLCAtdGhpcy5tX25vcm1hbHNbaiAtIDFdLlkpO1xuXHRcdFx0XHR0aGlzLm1fbm9ybWFsc1swXSA9IG5ldyBDbGlwcGVyTGliLkRvdWJsZVBvaW50MigtdGhpcy5tX25vcm1hbHNbMV0uWCwgLXRoaXMubV9ub3JtYWxzWzFdLlkpO1xuXHRcdFx0XHRrID0gbGVuIC0gMTtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IGsgLSAxOyBqID4gMDsgLS1qKVxuXHRcdFx0XHRcdGsgPSB0aGlzLk9mZnNldFBvaW50KGosIGssIG5vZGUubV9qb2ludHlwZSk7XG5cdFx0XHRcdGlmIChub2RlLm1fZW5kdHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0T3BlbkJ1dHQpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRwdDEgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5WzBdLlggLSB0aGlzLm1fbm9ybWFsc1swXS5YICogZGVsdGEpLCBDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbMF0uWSAtIHRoaXMubV9ub3JtYWxzWzBdLlkgKiBkZWx0YSkpO1xuXHRcdFx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKHB0MSk7XG5cdFx0XHRcdFx0cHQxID0gbmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVswXS5YICsgdGhpcy5tX25vcm1hbHNbMF0uWCAqIGRlbHRhKSwgQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5WzBdLlkgKyB0aGlzLm1fbm9ybWFsc1swXS5ZICogZGVsdGEpKTtcblx0XHRcdFx0XHR0aGlzLm1fZGVzdFBvbHkucHVzaChwdDEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGsgPSAxO1xuXHRcdFx0XHRcdHRoaXMubV9zaW5BID0gMDtcblx0XHRcdFx0XHRpZiAobm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldE9wZW5TcXVhcmUpXG5cdFx0XHRcdFx0XHR0aGlzLkRvU3F1YXJlKDAsIDEpO1xuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdHRoaXMuRG9Sb3VuZCgwLCAxKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLm1fZGVzdFBvbHlzLnB1c2godGhpcy5tX2Rlc3RQb2x5KTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnByb3RvdHlwZS5FeGVjdXRlID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHZhciBhID0gYXJndW1lbnRzLFxuXHRcdFx0aXNwb2x5dHJlZSA9IGFbMF0gaW5zdGFuY2VvZiBDbGlwcGVyTGliLlBvbHlUcmVlO1xuXHRcdGlmICghaXNwb2x5dHJlZSkgLy8gZnVuY3Rpb24gKHNvbHV0aW9uLCBkZWx0YSlcblx0XHR7XG5cdFx0XHR2YXIgc29sdXRpb24gPSBhWzBdLFxuXHRcdFx0XHRkZWx0YSA9IGFbMV07XG5cdFx0XHRDbGlwcGVyTGliLkNsZWFyKHNvbHV0aW9uKTtcblx0XHRcdHRoaXMuRml4T3JpZW50YXRpb25zKCk7XG5cdFx0XHR0aGlzLkRvT2Zmc2V0KGRlbHRhKTtcblx0XHRcdC8vbm93IGNsZWFuIHVwICdjb3JuZXJzJyAuLi5cblx0XHRcdHZhciBjbHByID0gbmV3IENsaXBwZXJMaWIuQ2xpcHBlcigwKTtcblx0XHRcdGNscHIuQWRkUGF0aHModGhpcy5tX2Rlc3RQb2x5cywgQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QsIHRydWUpO1xuXHRcdFx0aWYgKGRlbHRhID4gMClcblx0XHRcdHtcblx0XHRcdFx0Y2xwci5FeGVjdXRlKENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbiwgc29sdXRpb24sIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHZhciByID0gQ2xpcHBlckxpYi5DbGlwcGVyLkdldEJvdW5kcyh0aGlzLm1fZGVzdFBvbHlzKTtcblx0XHRcdFx0dmFyIG91dGVyID0gbmV3IENsaXBwZXJMaWIuUGF0aCgpO1xuXHRcdFx0XHRvdXRlci5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50MihyLmxlZnQgLSAxMCwgci5ib3R0b20gKyAxMCkpO1xuXHRcdFx0XHRvdXRlci5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50MihyLnJpZ2h0ICsgMTAsIHIuYm90dG9tICsgMTApKTtcblx0XHRcdFx0b3V0ZXIucHVzaChuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoci5yaWdodCArIDEwLCByLnRvcCAtIDEwKSk7XG5cdFx0XHRcdG91dGVyLnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKHIubGVmdCAtIDEwLCByLnRvcCAtIDEwKSk7XG5cdFx0XHRcdGNscHIuQWRkUGF0aChvdXRlciwgQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QsIHRydWUpO1xuXHRcdFx0XHRjbHByLlJldmVyc2VTb2x1dGlvbiA9IHRydWU7XG5cdFx0XHRcdGNscHIuRXhlY3V0ZShDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24sIHNvbHV0aW9uLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROZWdhdGl2ZSwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0TmVnYXRpdmUpO1xuXHRcdFx0XHRpZiAoc29sdXRpb24ubGVuZ3RoID4gMClcblx0XHRcdFx0XHRzb2x1dGlvbi5zcGxpY2UoMCwgMSk7XG5cdFx0XHR9XG5cdFx0XHQvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHNvbHV0aW9uKSk7XG5cdFx0fVxuXHRcdGVsc2UgLy8gZnVuY3Rpb24gKHBvbHl0cmVlLCBkZWx0YSlcblx0XHR7XG5cdFx0XHR2YXIgc29sdXRpb24gPSBhWzBdLFxuXHRcdFx0XHRkZWx0YSA9IGFbMV07XG5cdFx0XHRzb2x1dGlvbi5DbGVhcigpO1xuXHRcdFx0dGhpcy5GaXhPcmllbnRhdGlvbnMoKTtcblx0XHRcdHRoaXMuRG9PZmZzZXQoZGVsdGEpO1xuXHRcdFx0Ly9ub3cgY2xlYW4gdXAgJ2Nvcm5lcnMnIC4uLlxuXHRcdFx0dmFyIGNscHIgPSBuZXcgQ2xpcHBlckxpYi5DbGlwcGVyKDApO1xuXHRcdFx0Y2xwci5BZGRQYXRocyh0aGlzLm1fZGVzdFBvbHlzLCBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdCwgdHJ1ZSk7XG5cdFx0XHRpZiAoZGVsdGEgPiAwKVxuXHRcdFx0e1xuXHRcdFx0XHRjbHByLkV4ZWN1dGUoQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uLCBzb2x1dGlvbiwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0UG9zaXRpdmUsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0dmFyIHIgPSBDbGlwcGVyTGliLkNsaXBwZXIuR2V0Qm91bmRzKHRoaXMubV9kZXN0UG9seXMpO1xuXHRcdFx0XHR2YXIgb3V0ZXIgPSBuZXcgQ2xpcHBlckxpYi5QYXRoKCk7XG5cdFx0XHRcdG91dGVyLnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKHIubGVmdCAtIDEwLCByLmJvdHRvbSArIDEwKSk7XG5cdFx0XHRcdG91dGVyLnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKHIucmlnaHQgKyAxMCwgci5ib3R0b20gKyAxMCkpO1xuXHRcdFx0XHRvdXRlci5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50MihyLnJpZ2h0ICsgMTAsIHIudG9wIC0gMTApKTtcblx0XHRcdFx0b3V0ZXIucHVzaChuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoci5sZWZ0IC0gMTAsIHIudG9wIC0gMTApKTtcblx0XHRcdFx0Y2xwci5BZGRQYXRoKG91dGVyLCBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdCwgdHJ1ZSk7XG5cdFx0XHRcdGNscHIuUmV2ZXJzZVNvbHV0aW9uID0gdHJ1ZTtcblx0XHRcdFx0Y2xwci5FeGVjdXRlKENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbiwgc29sdXRpb24sIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5lZ2F0aXZlLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROZWdhdGl2ZSk7XG5cdFx0XHRcdC8vcmVtb3ZlIHRoZSBvdXRlciBQb2x5Tm9kZSByZWN0YW5nbGUgLi4uXG5cdFx0XHRcdGlmIChzb2x1dGlvbi5DaGlsZENvdW50KCkgPT09IDEgJiYgc29sdXRpb24uQ2hpbGRzKClbMF0uQ2hpbGRDb3VudCgpID4gMClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBvdXRlck5vZGUgPSBzb2x1dGlvbi5DaGlsZHMoKVswXTtcblx0XHRcdFx0XHQvL3NvbHV0aW9uLkNoaWxkcy5zZXRfQ2FwYWNpdHkob3V0ZXJOb2RlLkNoaWxkQ291bnQpO1xuXHRcdFx0XHRcdHNvbHV0aW9uLkNoaWxkcygpWzBdID0gb3V0ZXJOb2RlLkNoaWxkcygpWzBdO1xuXHRcdFx0XHRcdHNvbHV0aW9uLkNoaWxkcygpWzBdLm1fUGFyZW50ID0gc29sdXRpb247XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDE7IGkgPCBvdXRlck5vZGUuQ2hpbGRDb3VudCgpOyBpKyspXG5cdFx0XHRcdFx0XHRzb2x1dGlvbi5BZGRDaGlsZChvdXRlck5vZGUuQ2hpbGRzKClbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRzb2x1dGlvbi5DbGVhcigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQucHJvdG90eXBlLk9mZnNldFBvaW50ID0gZnVuY3Rpb24gKGosIGssIGpvaW50eXBlKVxuXHR7XG5cdFx0Ly9jcm9zcyBwcm9kdWN0IC4uLlxuXHRcdHRoaXMubV9zaW5BID0gKHRoaXMubV9ub3JtYWxzW2tdLlggKiB0aGlzLm1fbm9ybWFsc1tqXS5ZIC0gdGhpcy5tX25vcm1hbHNbal0uWCAqIHRoaXMubV9ub3JtYWxzW2tdLlkpO1xuXG5cdFx0aWYgKE1hdGguYWJzKHRoaXMubV9zaW5BICogdGhpcy5tX2RlbHRhKSA8IDEuMClcblx0XHR7XG5cdFx0XHQvL2RvdCBwcm9kdWN0IC4uLlxuXHRcdFx0dmFyIGNvc0EgPSAodGhpcy5tX25vcm1hbHNba10uWCAqIHRoaXMubV9ub3JtYWxzW2pdLlggKyB0aGlzLm1fbm9ybWFsc1tqXS5ZICogdGhpcy5tX25vcm1hbHNba10uWSk7XG5cdFx0XHRpZiAoY29zQSA+IDApIC8vIGFuZ2xlID09PiAwIGRlZ3JlZXNcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5YICsgdGhpcy5tX25vcm1hbHNba10uWCAqIHRoaXMubV9kZWx0YSksXG5cdFx0XHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlkgKyB0aGlzLm1fbm9ybWFsc1trXS5ZICogdGhpcy5tX2RlbHRhKSkpO1xuXHRcdFx0XHRyZXR1cm4gaztcblx0XHRcdH1cblx0XHRcdC8vZWxzZSBhbmdsZSA9PT4gMTgwIGRlZ3JlZXNcblx0XHR9XG5cdFx0ZWxzZSBpZiAodGhpcy5tX3NpbkEgPiAxKVxuXHRcdFx0dGhpcy5tX3NpbkEgPSAxLjA7XG5cdFx0ZWxzZSBpZiAodGhpcy5tX3NpbkEgPCAtMSlcblx0XHRcdHRoaXMubV9zaW5BID0gLTEuMDtcblx0XHRpZiAodGhpcy5tX3NpbkEgKiB0aGlzLm1fZGVsdGEgPCAwKVxuXHRcdHtcblx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50MihDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbal0uWCArIHRoaXMubV9ub3JtYWxzW2tdLlggKiB0aGlzLm1fZGVsdGEpLFxuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbal0uWSArIHRoaXMubV9ub3JtYWxzW2tdLlkgKiB0aGlzLm1fZGVsdGEpKSk7XG5cdFx0XHR0aGlzLm1fZGVzdFBvbHkucHVzaChuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDEodGhpcy5tX3NyY1BvbHlbal0pKTtcblx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50MihDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbal0uWCArIHRoaXMubV9ub3JtYWxzW2pdLlggKiB0aGlzLm1fZGVsdGEpLFxuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbal0uWSArIHRoaXMubV9ub3JtYWxzW2pdLlkgKiB0aGlzLm1fZGVsdGEpKSk7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHRcdHN3aXRjaCAoam9pbnR5cGUpXG5cdFx0XHR7XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuSm9pblR5cGUuanRNaXRlcjpcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciByID0gMSArICh0aGlzLm1fbm9ybWFsc1tqXS5YICogdGhpcy5tX25vcm1hbHNba10uWCArIHRoaXMubV9ub3JtYWxzW2pdLlkgKiB0aGlzLm1fbm9ybWFsc1trXS5ZKTtcblx0XHRcdFx0XHRpZiAociA+PSB0aGlzLm1fbWl0ZXJMaW0pXG5cdFx0XHRcdFx0XHR0aGlzLkRvTWl0ZXIoaiwgaywgcik7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0dGhpcy5Eb1NxdWFyZShqLCBrKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0Y2FzZSBDbGlwcGVyTGliLkpvaW5UeXBlLmp0U3F1YXJlOlxuXHRcdFx0XHR0aGlzLkRvU3F1YXJlKGosIGspO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Kb2luVHlwZS5qdFJvdW5kOlxuXHRcdFx0XHR0aGlzLkRvUm91bmQoaiwgayk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdGsgPSBqO1xuXHRcdHJldHVybiBrO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5wcm90b3R5cGUuRG9TcXVhcmUgPSBmdW5jdGlvbiAoaiwgaylcblx0e1xuXHRcdHZhciBkeCA9IE1hdGgudGFuKE1hdGguYXRhbjIodGhpcy5tX3NpbkEsXG5cdFx0XHR0aGlzLm1fbm9ybWFsc1trXS5YICogdGhpcy5tX25vcm1hbHNbal0uWCArIHRoaXMubV9ub3JtYWxzW2tdLlkgKiB0aGlzLm1fbm9ybWFsc1tqXS5ZKSAvIDQpO1xuXHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50Mihcblx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5YICsgdGhpcy5tX2RlbHRhICogKHRoaXMubV9ub3JtYWxzW2tdLlggLSB0aGlzLm1fbm9ybWFsc1trXS5ZICogZHgpKSxcblx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5ZICsgdGhpcy5tX2RlbHRhICogKHRoaXMubV9ub3JtYWxzW2tdLlkgKyB0aGlzLm1fbm9ybWFsc1trXS5YICogZHgpKSkpO1xuXHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50Mihcblx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5YICsgdGhpcy5tX2RlbHRhICogKHRoaXMubV9ub3JtYWxzW2pdLlggKyB0aGlzLm1fbm9ybWFsc1tqXS5ZICogZHgpKSxcblx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5ZICsgdGhpcy5tX2RlbHRhICogKHRoaXMubV9ub3JtYWxzW2pdLlkgLSB0aGlzLm1fbm9ybWFsc1tqXS5YICogZHgpKSkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5wcm90b3R5cGUuRG9NaXRlciA9IGZ1bmN0aW9uIChqLCBrLCByKVxuXHR7XG5cdFx0dmFyIHEgPSB0aGlzLm1fZGVsdGEgLyByO1xuXHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50Mihcblx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5YICsgKHRoaXMubV9ub3JtYWxzW2tdLlggKyB0aGlzLm1fbm9ybWFsc1tqXS5YKSAqIHEpLFxuXHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlkgKyAodGhpcy5tX25vcm1hbHNba10uWSArIHRoaXMubV9ub3JtYWxzW2pdLlkpICogcSkpKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQucHJvdG90eXBlLkRvUm91bmQgPSBmdW5jdGlvbiAoaiwgaylcblx0e1xuXHRcdHZhciBhID0gTWF0aC5hdGFuMih0aGlzLm1fc2luQSxcblx0XHRcdHRoaXMubV9ub3JtYWxzW2tdLlggKiB0aGlzLm1fbm9ybWFsc1tqXS5YICsgdGhpcy5tX25vcm1hbHNba10uWSAqIHRoaXMubV9ub3JtYWxzW2pdLlkpO1xuXG5cdFx0dmFyIHN0ZXBzID0gTWF0aC5tYXgoQ2xpcHBlckxpYi5DYXN0X0ludDMyKENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fU3RlcHNQZXJSYWQgKiBNYXRoLmFicyhhKSkpLCAxKTtcblxuXHRcdHZhciBYID0gdGhpcy5tX25vcm1hbHNba10uWCxcblx0XHRcdFkgPSB0aGlzLm1fbm9ybWFsc1trXS5ZLFxuXHRcdFx0WDI7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdGVwczsgKytpKVxuXHRcdHtcblx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50Mihcblx0XHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlggKyBYICogdGhpcy5tX2RlbHRhKSxcblx0XHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlkgKyBZICogdGhpcy5tX2RlbHRhKSkpO1xuXHRcdFx0WDIgPSBYO1xuXHRcdFx0WCA9IFggKiB0aGlzLm1fY29zIC0gdGhpcy5tX3NpbiAqIFk7XG5cdFx0XHRZID0gWDIgKiB0aGlzLm1fc2luICsgWSAqIHRoaXMubV9jb3M7XG5cdFx0fVxuXHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50Mihcblx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5YICsgdGhpcy5tX25vcm1hbHNbal0uWCAqIHRoaXMubV9kZWx0YSksXG5cdFx0XHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbal0uWSArIHRoaXMubV9ub3JtYWxzW2pdLlkgKiB0aGlzLm1fZGVsdGEpKSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5FcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlKVxuXHR7XG5cdFx0dHJ5XG5cdFx0e1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuXHRcdH1cblx0XHRjYXRjaCAoZXJyKVxuXHRcdHtcblx0XHRcdGFsZXJ0KGVyci5tZXNzYWdlKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0Ly8gSlMgZXh0ZW5zaW9uIGJ5IFRpbW8gMjAxM1xuXHRDbGlwcGVyTGliLkpTID0ge307XG5cblx0Q2xpcHBlckxpYi5KUy5BcmVhT2ZQb2x5Z29uID0gZnVuY3Rpb24gKHBvbHksIHNjYWxlKVxuXHR7XG5cdFx0aWYgKCFzY2FsZSkgc2NhbGUgPSAxO1xuXHRcdHJldHVybiBDbGlwcGVyTGliLkNsaXBwZXIuQXJlYShwb2x5KSAvIChzY2FsZSAqIHNjYWxlKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkpTLkFyZWFPZlBvbHlnb25zID0gZnVuY3Rpb24gKHBvbHksIHNjYWxlKVxuXHR7XG5cdFx0aWYgKCFzY2FsZSkgc2NhbGUgPSAxO1xuXHRcdHZhciBhcmVhID0gMDtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBvbHkubGVuZ3RoOyBpKyspXG5cdFx0e1xuXHRcdFx0YXJlYSArPSBDbGlwcGVyTGliLkNsaXBwZXIuQXJlYShwb2x5W2ldKTtcblx0XHR9XG5cdFx0cmV0dXJuIGFyZWEgLyAoc2NhbGUgKiBzY2FsZSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5KUy5Cb3VuZHNPZlBhdGggPSBmdW5jdGlvbiAocGF0aCwgc2NhbGUpXG5cdHtcblx0XHRyZXR1cm4gQ2xpcHBlckxpYi5KUy5Cb3VuZHNPZlBhdGhzKFtwYXRoXSwgc2NhbGUpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuSlMuQm91bmRzT2ZQYXRocyA9IGZ1bmN0aW9uIChwYXRocywgc2NhbGUpXG5cdHtcblx0XHRpZiAoIXNjYWxlKSBzY2FsZSA9IDE7XG5cdFx0dmFyIGJvdW5kcyA9IENsaXBwZXJMaWIuQ2xpcHBlci5HZXRCb3VuZHMocGF0aHMpO1xuXHRcdGJvdW5kcy5sZWZ0IC89IHNjYWxlO1xuXHRcdGJvdW5kcy5ib3R0b20gLz0gc2NhbGU7XG5cdFx0Ym91bmRzLnJpZ2h0IC89IHNjYWxlO1xuXHRcdGJvdW5kcy50b3AgLz0gc2NhbGU7XG5cdFx0cmV0dXJuIGJvdW5kcztcblx0fTtcblxuXHQvLyBDbGVhbigpIGpvaW5zIHZlcnRpY2VzIHRoYXQgYXJlIHRvbyBuZWFyIGVhY2ggb3RoZXJcblx0Ly8gYW5kIGNhdXNlcyBkaXN0b3J0aW9uIHRvIG9mZnNldHRlZCBwb2x5Z29ucyB3aXRob3V0IGNsZWFuaW5nXG5cdENsaXBwZXJMaWIuSlMuQ2xlYW4gPSBmdW5jdGlvbiAocG9seWdvbiwgZGVsdGEpXG5cdHtcblx0XHRpZiAoIShwb2x5Z29uIGluc3RhbmNlb2YgQXJyYXkpKSByZXR1cm4gW107XG5cdFx0dmFyIGlzUG9seWdvbnMgPSBwb2x5Z29uWzBdIGluc3RhbmNlb2YgQXJyYXk7XG5cdFx0dmFyIHBvbHlnb24gPSBDbGlwcGVyTGliLkpTLkNsb25lKHBvbHlnb24pO1xuXHRcdGlmICh0eXBlb2YgZGVsdGEgIT09IFwibnVtYmVyXCIgfHwgZGVsdGEgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0Q2xpcHBlckxpYi5FcnJvcihcIkRlbHRhIGlzIG5vdCBhIG51bWJlciBpbiBDbGVhbigpLlwiKTtcblx0XHRcdHJldHVybiBwb2x5Z29uO1xuXHRcdH1cblx0XHRpZiAocG9seWdvbi5sZW5ndGggPT09IDAgfHwgKHBvbHlnb24ubGVuZ3RoID09PSAxICYmIHBvbHlnb25bMF0ubGVuZ3RoID09PSAwKSB8fCBkZWx0YSA8IDApIHJldHVybiBwb2x5Z29uO1xuXHRcdGlmICghaXNQb2x5Z29ucykgcG9seWdvbiA9IFtwb2x5Z29uXTtcblx0XHR2YXIga19sZW5ndGggPSBwb2x5Z29uLmxlbmd0aDtcblx0XHR2YXIgbGVuLCBwb2x5LCByZXN1bHQsIGQsIHAsIGosIGk7XG5cdFx0dmFyIHJlc3VsdHMgPSBbXTtcblx0XHRmb3IgKHZhciBrID0gMDsgayA8IGtfbGVuZ3RoOyBrKyspXG5cdFx0e1xuXHRcdFx0cG9seSA9IHBvbHlnb25ba107XG5cdFx0XHRsZW4gPSBwb2x5Lmxlbmd0aDtcblx0XHRcdGlmIChsZW4gPT09IDApIGNvbnRpbnVlO1xuXHRcdFx0ZWxzZSBpZiAobGVuIDwgMylcblx0XHRcdHtcblx0XHRcdFx0cmVzdWx0ID0gcG9seTtcblx0XHRcdFx0cmVzdWx0cy5wdXNoKHJlc3VsdCk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0cmVzdWx0ID0gcG9seTtcblx0XHRcdGQgPSBkZWx0YSAqIGRlbHRhO1xuXHRcdFx0Ly9kID0gTWF0aC5mbG9vcihjX2RlbHRhICogY19kZWx0YSk7XG5cdFx0XHRwID0gcG9seVswXTtcblx0XHRcdGogPSAxO1xuXHRcdFx0Zm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoKHBvbHlbaV0uWCAtIHAuWCkgKiAocG9seVtpXS5YIC0gcC5YKSArXG5cdFx0XHRcdFx0KHBvbHlbaV0uWSAtIHAuWSkgKiAocG9seVtpXS5ZIC0gcC5ZKSA8PSBkKVxuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRyZXN1bHRbal0gPSBwb2x5W2ldO1xuXHRcdFx0XHRwID0gcG9seVtpXTtcblx0XHRcdFx0aisrO1xuXHRcdFx0fVxuXHRcdFx0cCA9IHBvbHlbaiAtIDFdO1xuXHRcdFx0aWYgKChwb2x5WzBdLlggLSBwLlgpICogKHBvbHlbMF0uWCAtIHAuWCkgK1xuXHRcdFx0XHQocG9seVswXS5ZIC0gcC5ZKSAqIChwb2x5WzBdLlkgLSBwLlkpIDw9IGQpXG5cdFx0XHRcdGotLTtcblx0XHRcdGlmIChqIDwgbGVuKVxuXHRcdFx0XHRyZXN1bHQuc3BsaWNlKGosIGxlbiAtIGopO1xuXHRcdFx0aWYgKHJlc3VsdC5sZW5ndGgpIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuXHRcdH1cblx0XHRpZiAoIWlzUG9seWdvbnMgJiYgcmVzdWx0cy5sZW5ndGgpIHJlc3VsdHMgPSByZXN1bHRzWzBdO1xuXHRcdGVsc2UgaWYgKCFpc1BvbHlnb25zICYmIHJlc3VsdHMubGVuZ3RoID09PSAwKSByZXN1bHRzID0gW107XG5cdFx0ZWxzZSBpZiAoaXNQb2x5Z29ucyAmJiByZXN1bHRzLmxlbmd0aCA9PT0gMCkgcmVzdWx0cyA9IFtcblx0XHRcdFtdXG5cdFx0XTtcblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXHQvLyBNYWtlIGRlZXAgY29weSBvZiBQb2x5Z29ucyBvciBQb2x5Z29uXG5cdC8vIHNvIHRoYXQgYWxzbyBJbnRQb2ludCBvYmplY3RzIGFyZSBjbG9uZWQgYW5kIG5vdCBvbmx5IHJlZmVyZW5jZWRcblx0Ly8gVGhpcyBzaG91bGQgYmUgdGhlIGZhc3Rlc3Qgd2F5XG5cdENsaXBwZXJMaWIuSlMuQ2xvbmUgPSBmdW5jdGlvbiAocG9seWdvbilcblx0e1xuXHRcdGlmICghKHBvbHlnb24gaW5zdGFuY2VvZiBBcnJheSkpIHJldHVybiBbXTtcblx0XHRpZiAocG9seWdvbi5sZW5ndGggPT09IDApIHJldHVybiBbXTtcblx0XHRlbHNlIGlmIChwb2x5Z29uLmxlbmd0aCA9PT0gMSAmJiBwb2x5Z29uWzBdLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtcblx0XHRcdFtdXG5cdFx0XTtcblx0XHR2YXIgaXNQb2x5Z29ucyA9IHBvbHlnb25bMF0gaW5zdGFuY2VvZiBBcnJheTtcblx0XHRpZiAoIWlzUG9seWdvbnMpIHBvbHlnb24gPSBbcG9seWdvbl07XG5cdFx0dmFyIGxlbiA9IHBvbHlnb24ubGVuZ3RoLFxuXHRcdFx0cGxlbiwgaSwgaiwgcmVzdWx0O1xuXHRcdHZhciByZXN1bHRzID0gbmV3IEFycmF5KGxlbik7XG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdHBsZW4gPSBwb2x5Z29uW2ldLmxlbmd0aDtcblx0XHRcdHJlc3VsdCA9IG5ldyBBcnJheShwbGVuKTtcblx0XHRcdGZvciAoaiA9IDA7IGogPCBwbGVuOyBqKyspXG5cdFx0XHR7XG5cdFx0XHRcdHJlc3VsdFtqXSA9IHtcblx0XHRcdFx0XHRYOiBwb2x5Z29uW2ldW2pdLlgsXG5cdFx0XHRcdFx0WTogcG9seWdvbltpXVtqXS5ZXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblx0XHRcdHJlc3VsdHNbaV0gPSByZXN1bHQ7XG5cdFx0fVxuXHRcdGlmICghaXNQb2x5Z29ucykgcmVzdWx0cyA9IHJlc3VsdHNbMF07XG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH07XG5cblx0Ly8gUmVtb3ZlcyBwb2ludHMgdGhhdCBkb2Vzbid0IGFmZmVjdCBtdWNoIHRvIHRoZSB2aXN1YWwgYXBwZWFyYW5jZS5cblx0Ly8gSWYgbWlkZGxlIHBvaW50IGlzIGF0IG9yIHVuZGVyIGNlcnRhaW4gZGlzdGFuY2UgKHRvbGVyYW5jZSkgb2YgdGhlIGxpbmUgc2VnbWVudCBiZXR3ZWVuXG5cdC8vIHN0YXJ0IGFuZCBlbmQgcG9pbnQsIHRoZSBtaWRkbGUgcG9pbnQgaXMgcmVtb3ZlZC5cblx0Q2xpcHBlckxpYi5KUy5MaWdodGVuID0gZnVuY3Rpb24gKHBvbHlnb24sIHRvbGVyYW5jZSlcblx0e1xuXHRcdGlmICghKHBvbHlnb24gaW5zdGFuY2VvZiBBcnJheSkpIHJldHVybiBbXTtcblx0XHRpZiAodHlwZW9mIHRvbGVyYW5jZSAhPT0gXCJudW1iZXJcIiB8fCB0b2xlcmFuY2UgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0Q2xpcHBlckxpYi5FcnJvcihcIlRvbGVyYW5jZSBpcyBub3QgYSBudW1iZXIgaW4gTGlnaHRlbigpLlwiKVxuXHRcdFx0cmV0dXJuIENsaXBwZXJMaWIuSlMuQ2xvbmUocG9seWdvbik7XG5cdFx0fVxuXHRcdGlmIChwb2x5Z29uLmxlbmd0aCA9PT0gMCB8fCAocG9seWdvbi5sZW5ndGggPT09IDEgJiYgcG9seWdvblswXS5sZW5ndGggPT09IDApIHx8IHRvbGVyYW5jZSA8IDApXG5cdFx0e1xuXHRcdFx0cmV0dXJuIENsaXBwZXJMaWIuSlMuQ2xvbmUocG9seWdvbik7XG5cdFx0fVxuXHRcdHZhciBpc1BvbHlnb25zID0gcG9seWdvblswXSBpbnN0YW5jZW9mIEFycmF5O1xuXHRcdGlmICghaXNQb2x5Z29ucykgcG9seWdvbiA9IFtwb2x5Z29uXTtcblx0XHR2YXIgaSwgaiwgcG9seSwgaywgcG9seTIsIHBsZW4sIEEsIEIsIFAsIGQsIHJlbSwgYWRkbGFzdDtcblx0XHR2YXIgYnhheCwgYnlheSwgbCwgYXgsIGF5O1xuXHRcdHZhciBsZW4gPSBwb2x5Z29uLmxlbmd0aDtcblx0XHR2YXIgdG9sZXJhbmNlU3EgPSB0b2xlcmFuY2UgKiB0b2xlcmFuY2U7XG5cdFx0dmFyIHJlc3VsdHMgPSBbXTtcblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG5cdFx0e1xuXHRcdFx0cG9seSA9IHBvbHlnb25baV07XG5cdFx0XHRwbGVuID0gcG9seS5sZW5ndGg7XG5cdFx0XHRpZiAocGxlbiA9PT0gMCkgY29udGludWU7XG5cdFx0XHRmb3IgKGsgPSAwOyBrIDwgMTAwMDAwMDsgaysrKSAvLyBjb3VsZCBiZSBmb3JldmVyIGxvb3AsIGJ1dCB3aXNlciB0byByZXN0cmljdCBtYXggcmVwZWF0IGNvdW50XG5cdFx0XHR7XG5cdFx0XHRcdHBvbHkyID0gW107XG5cdFx0XHRcdHBsZW4gPSBwb2x5Lmxlbmd0aDtcblx0XHRcdFx0Ly8gdGhlIGZpcnN0IGhhdmUgdG8gYWRkZWQgdG8gdGhlIGVuZCwgaWYgZmlyc3QgYW5kIGxhc3QgYXJlIG5vdCB0aGUgc2FtZVxuXHRcdFx0XHQvLyB0aGlzIHdheSB3ZSBlbnN1cmUgdGhhdCBhbHNvIHRoZSBhY3R1YWwgbGFzdCBwb2ludCBjYW4gYmUgcmVtb3ZlZCBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKHBvbHlbcGxlbiAtIDFdLlggIT09IHBvbHlbMF0uWCB8fCBwb2x5W3BsZW4gLSAxXS5ZICE9PSBwb2x5WzBdLlkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRhZGRsYXN0ID0gMTtcblx0XHRcdFx0XHRwb2x5LnB1c2goXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0WDogcG9seVswXS5YLFxuXHRcdFx0XHRcdFx0WTogcG9seVswXS5ZXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0cGxlbiA9IHBvbHkubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgYWRkbGFzdCA9IDA7XG5cdFx0XHRcdHJlbSA9IFtdOyAvLyBJbmRleGVzIG9mIHJlbW92ZWQgcG9pbnRzXG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBwbGVuIC0gMjsgaisrKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0QSA9IHBvbHlbal07IC8vIFN0YXJ0IHBvaW50IG9mIGxpbmUgc2VnbWVudFxuXHRcdFx0XHRcdFAgPSBwb2x5W2ogKyAxXTsgLy8gTWlkZGxlIHBvaW50LiBUaGlzIGlzIHRoZSBvbmUgdG8gYmUgcmVtb3ZlZC5cblx0XHRcdFx0XHRCID0gcG9seVtqICsgMl07IC8vIEVuZCBwb2ludCBvZiBsaW5lIHNlZ21lbnRcblx0XHRcdFx0XHRheCA9IEEuWDtcblx0XHRcdFx0XHRheSA9IEEuWTtcblx0XHRcdFx0XHRieGF4ID0gQi5YIC0gYXg7XG5cdFx0XHRcdFx0YnlheSA9IEIuWSAtIGF5O1xuXHRcdFx0XHRcdGlmIChieGF4ICE9PSAwIHx8IGJ5YXkgIT09IDApIC8vIFRvIGF2b2lkIE5hbiwgd2hlbiBBPT1QICYmIFA9PUIuIEFuZCB0byBhdm9pZCBwZWFrcyAoQT09QiAmJiBBIT1QKSwgd2hpY2ggaGF2ZSBsZW5naHQsIGJ1dCBub3QgYXJlYS5cblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRsID0gKChQLlggLSBheCkgKiBieGF4ICsgKFAuWSAtIGF5KSAqIGJ5YXkpIC8gKGJ4YXggKiBieGF4ICsgYnlheSAqIGJ5YXkpO1xuXHRcdFx0XHRcdFx0aWYgKGwgPiAxKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRheCA9IEIuWDtcblx0XHRcdFx0XHRcdFx0YXkgPSBCLlk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIGlmIChsID4gMClcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0YXggKz0gYnhheCAqIGw7XG5cdFx0XHRcdFx0XHRcdGF5ICs9IGJ5YXkgKiBsO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRieGF4ID0gUC5YIC0gYXg7XG5cdFx0XHRcdFx0YnlheSA9IFAuWSAtIGF5O1xuXHRcdFx0XHRcdGQgPSBieGF4ICogYnhheCArIGJ5YXkgKiBieWF5O1xuXHRcdFx0XHRcdGlmIChkIDw9IHRvbGVyYW5jZVNxKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHJlbVtqICsgMV0gPSAxO1xuXHRcdFx0XHRcdFx0aisrOyAvLyB3aGVuIHJlbW92ZWQsIHRyYW5zZmVyIHRoZSBwb2ludGVyIHRvIHRoZSBuZXh0IG9uZVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBhZGQgYWxsIHVucmVtb3ZlZCBwb2ludHMgdG8gcG9seTJcblx0XHRcdFx0cG9seTIucHVzaChcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFg6IHBvbHlbMF0uWCxcblx0XHRcdFx0XHRZOiBwb2x5WzBdLllcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGZvciAoaiA9IDE7IGogPCBwbGVuIC0gMTsgaisrKVxuXHRcdFx0XHRcdGlmICghcmVtW2pdKSBwb2x5Mi5wdXNoKFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFg6IHBvbHlbal0uWCxcblx0XHRcdFx0XHRcdFk6IHBvbHlbal0uWVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRwb2x5Mi5wdXNoKFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0WDogcG9seVtwbGVuIC0gMV0uWCxcblx0XHRcdFx0XHRZOiBwb2x5W3BsZW4gLSAxXS5ZXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHQvLyBpZiB0aGUgZmlyc3QgcG9pbnQgd2FzIGFkZGVkIHRvIHRoZSBlbmQsIHJlbW92ZSBpdFxuXHRcdFx0XHRpZiAoYWRkbGFzdCkgcG9seS5wb3AoKTtcblx0XHRcdFx0Ly8gYnJlYWssIGlmIHRoZXJlIHdhcyBub3QgYW55bW9yZSByZW1vdmVkIHBvaW50c1xuXHRcdFx0XHRpZiAoIXJlbS5sZW5ndGgpIGJyZWFrO1xuXHRcdFx0XHQvLyBlbHNlIGNvbnRpbnVlIGxvb3BpbmcgdXNpbmcgcG9seTIsIHRvIGNoZWNrIGlmIHRoZXJlIGFyZSBwb2ludHMgdG8gcmVtb3ZlXG5cdFx0XHRcdGVsc2UgcG9seSA9IHBvbHkyO1xuXHRcdFx0fVxuXHRcdFx0cGxlbiA9IHBvbHkyLmxlbmd0aDtcblx0XHRcdC8vIHJlbW92ZSBkdXBsaWNhdGUgZnJvbSBlbmQsIGlmIG5lZWRlZFxuXHRcdFx0aWYgKHBvbHkyW3BsZW4gLSAxXS5YID09PSBwb2x5MlswXS5YICYmIHBvbHkyW3BsZW4gLSAxXS5ZID09PSBwb2x5MlswXS5ZKVxuXHRcdFx0e1xuXHRcdFx0XHRwb2x5Mi5wb3AoKTtcblx0XHRcdH1cblx0XHRcdGlmIChwb2x5Mi5sZW5ndGggPiAyKSAvLyB0byBhdm9pZCB0d28tcG9pbnQtcG9seWdvbnNcblx0XHRcdFx0cmVzdWx0cy5wdXNoKHBvbHkyKTtcblx0XHR9XG5cdFx0aWYgKCFpc1BvbHlnb25zKVxuXHRcdHtcblx0XHRcdHJlc3VsdHMgPSByZXN1bHRzWzBdO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIChyZXN1bHRzKSA9PT0gXCJ1bmRlZmluZWRcIilcblx0XHR7XG5cdFx0XHRyZXN1bHRzID0gW107XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Q2xpcHBlckxpYi5KUy5QZXJpbWV0ZXJPZlBhdGggPSBmdW5jdGlvbiAocGF0aCwgY2xvc2VkLCBzY2FsZSlcblx0e1xuXHRcdGlmICh0eXBlb2YgKHBhdGgpID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gMDtcblx0XHR2YXIgc3FydCA9IE1hdGguc3FydDtcblx0XHR2YXIgcGVyaW1ldGVyID0gMC4wO1xuXHRcdHZhciBwMSwgcDIsIHAxeCA9IDAuMCxcblx0XHRcdHAxeSA9IDAuMCxcblx0XHRcdHAyeCA9IDAuMCxcblx0XHRcdHAyeSA9IDAuMDtcblx0XHR2YXIgaiA9IHBhdGgubGVuZ3RoO1xuXHRcdGlmIChqIDwgMikgcmV0dXJuIDA7XG5cdFx0aWYgKGNsb3NlZClcblx0XHR7XG5cdFx0XHRwYXRoW2pdID0gcGF0aFswXTtcblx0XHRcdGorKztcblx0XHR9XG5cdFx0d2hpbGUgKC0tailcblx0XHR7XG5cdFx0XHRwMSA9IHBhdGhbal07XG5cdFx0XHRwMXggPSBwMS5YO1xuXHRcdFx0cDF5ID0gcDEuWTtcblx0XHRcdHAyID0gcGF0aFtqIC0gMV07XG5cdFx0XHRwMnggPSBwMi5YO1xuXHRcdFx0cDJ5ID0gcDIuWTtcblx0XHRcdHBlcmltZXRlciArPSBzcXJ0KChwMXggLSBwMngpICogKHAxeCAtIHAyeCkgKyAocDF5IC0gcDJ5KSAqIChwMXkgLSBwMnkpKTtcblx0XHR9XG5cdFx0aWYgKGNsb3NlZCkgcGF0aC5wb3AoKTtcblx0XHRyZXR1cm4gcGVyaW1ldGVyIC8gc2NhbGU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5KUy5QZXJpbWV0ZXJPZlBhdGhzID0gZnVuY3Rpb24gKHBhdGhzLCBjbG9zZWQsIHNjYWxlKVxuXHR7XG5cdFx0aWYgKCFzY2FsZSkgc2NhbGUgPSAxO1xuXHRcdHZhciBwZXJpbWV0ZXIgPSAwO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspXG5cdFx0e1xuXHRcdFx0cGVyaW1ldGVyICs9IENsaXBwZXJMaWIuSlMuUGVyaW1ldGVyT2ZQYXRoKHBhdGhzW2ldLCBjbG9zZWQsIHNjYWxlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHBlcmltZXRlcjtcblx0fTtcblxuXHRDbGlwcGVyTGliLkpTLlNjYWxlRG93blBhdGggPSBmdW5jdGlvbiAocGF0aCwgc2NhbGUpXG5cdHtcblx0XHR2YXIgaSwgcDtcblx0XHRpZiAoIXNjYWxlKSBzY2FsZSA9IDE7XG5cdFx0aSA9IHBhdGgubGVuZ3RoO1xuXHRcdHdoaWxlIChpLS0pXG5cdFx0e1xuXHRcdFx0cCA9IHBhdGhbaV07XG5cdFx0XHRwLlggPSBwLlggLyBzY2FsZTtcblx0XHRcdHAuWSA9IHAuWSAvIHNjYWxlO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkpTLlNjYWxlRG93blBhdGhzID0gZnVuY3Rpb24gKHBhdGhzLCBzY2FsZSlcblx0e1xuXHRcdHZhciBpLCBqLCBwO1xuXHRcdGlmICghc2NhbGUpIHNjYWxlID0gMTtcblx0XHRpID0gcGF0aHMubGVuZ3RoO1xuXHRcdHdoaWxlIChpLS0pXG5cdFx0e1xuXHRcdFx0aiA9IHBhdGhzW2ldLmxlbmd0aDtcblx0XHRcdHdoaWxlIChqLS0pXG5cdFx0XHR7XG5cdFx0XHRcdHAgPSBwYXRoc1tpXVtqXTtcblx0XHRcdFx0cC5YID0gcC5YIC8gc2NhbGU7XG5cdFx0XHRcdHAuWSA9IHAuWSAvIHNjYWxlO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkpTLlNjYWxlVXBQYXRoID0gZnVuY3Rpb24gKHBhdGgsIHNjYWxlKVxuXHR7XG5cdFx0dmFyIGksIHAsIHJvdW5kID0gTWF0aC5yb3VuZDtcblx0XHRpZiAoIXNjYWxlKSBzY2FsZSA9IDE7XG5cdFx0aSA9IHBhdGgubGVuZ3RoO1xuXHRcdHdoaWxlIChpLS0pXG5cdFx0e1xuXHRcdFx0cCA9IHBhdGhbaV07XG5cdFx0XHRwLlggPSByb3VuZChwLlggKiBzY2FsZSk7XG5cdFx0XHRwLlkgPSByb3VuZChwLlkgKiBzY2FsZSk7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuSlMuU2NhbGVVcFBhdGhzID0gZnVuY3Rpb24gKHBhdGhzLCBzY2FsZSlcblx0e1xuXHRcdHZhciBpLCBqLCBwLCByb3VuZCA9IE1hdGgucm91bmQ7XG5cdFx0aWYgKCFzY2FsZSkgc2NhbGUgPSAxO1xuXHRcdGkgPSBwYXRocy5sZW5ndGg7XG5cdFx0d2hpbGUgKGktLSlcblx0XHR7XG5cdFx0XHRqID0gcGF0aHNbaV0ubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKGotLSlcblx0XHRcdHtcblx0XHRcdFx0cCA9IHBhdGhzW2ldW2pdO1xuXHRcdFx0XHRwLlggPSByb3VuZChwLlggKiBzY2FsZSk7XG5cdFx0XHRcdHAuWSA9IHJvdW5kKHAuWSAqIHNjYWxlKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuRXhQb2x5Z29ucyA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuRXhQb2x5Z29uID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRoaXMub3V0ZXIgPSBudWxsO1xuXHRcdHRoaXMuaG9sZXMgPSBudWxsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuSlMuQWRkT3V0ZXJQb2x5Tm9kZVRvRXhQb2x5Z29ucyA9IGZ1bmN0aW9uIChwb2x5bm9kZSwgZXhwb2x5Z29ucylcblx0e1xuXHRcdHZhciBlcCA9IG5ldyBDbGlwcGVyTGliLkV4UG9seWdvbigpO1xuXHRcdGVwLm91dGVyID0gcG9seW5vZGUuQ29udG91cigpO1xuXHRcdHZhciBjaGlsZHMgPSBwb2x5bm9kZS5DaGlsZHMoKTtcblx0XHR2YXIgaWxlbiA9IGNoaWxkcy5sZW5ndGg7XG5cdFx0ZXAuaG9sZXMgPSBuZXcgQXJyYXkoaWxlbik7XG5cdFx0dmFyIG5vZGUsIG4sIGksIGosIGNoaWxkczIsIGpsZW47XG5cdFx0Zm9yIChpID0gMDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHRub2RlID0gY2hpbGRzW2ldO1xuXHRcdFx0ZXAuaG9sZXNbaV0gPSBub2RlLkNvbnRvdXIoKTtcblx0XHRcdC8vQWRkIG91dGVyIHBvbHlnb25zIGNvbnRhaW5lZCBieSAobmVzdGVkIHdpdGhpbikgaG9sZXMgLi4uXG5cdFx0XHRmb3IgKGogPSAwLCBjaGlsZHMyID0gbm9kZS5DaGlsZHMoKSwgamxlbiA9IGNoaWxkczIubGVuZ3RoOyBqIDwgamxlbjsgaisrKVxuXHRcdFx0e1xuXHRcdFx0XHRuID0gY2hpbGRzMltqXTtcblx0XHRcdFx0Q2xpcHBlckxpYi5KUy5BZGRPdXRlclBvbHlOb2RlVG9FeFBvbHlnb25zKG4sIGV4cG9seWdvbnMpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRleHBvbHlnb25zLnB1c2goZXApO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuSlMuRXhQb2x5Z29uc1RvUGF0aHMgPSBmdW5jdGlvbiAoZXhwb2x5Z29ucylcblx0e1xuXHRcdHZhciBhLCBpLCBhbGVuLCBpbGVuO1xuXHRcdHZhciBwYXRocyA9IG5ldyBDbGlwcGVyTGliLlBhdGhzKCk7XG5cdFx0Zm9yIChhID0gMCwgYWxlbiA9IGV4cG9seWdvbnMubGVuZ3RoOyBhIDwgYWxlbjsgYSsrKVxuXHRcdHtcblx0XHRcdHBhdGhzLnB1c2goZXhwb2x5Z29uc1thXS5vdXRlcik7XG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZXhwb2x5Z29uc1thXS5ob2xlcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspXG5cdFx0XHR7XG5cdFx0XHRcdHBhdGhzLnB1c2goZXhwb2x5Z29uc1thXS5ob2xlc1tpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBwYXRocztcblx0fVxuXHRDbGlwcGVyTGliLkpTLlBvbHlUcmVlVG9FeFBvbHlnb25zID0gZnVuY3Rpb24gKHBvbHl0cmVlKVxuXHR7XG5cdFx0dmFyIGV4cG9seWdvbnMgPSBuZXcgQ2xpcHBlckxpYi5FeFBvbHlnb25zKCk7XG5cdFx0dmFyIG5vZGUsIGksIGNoaWxkcywgaWxlbjtcblx0XHRmb3IgKGkgPSAwLCBjaGlsZHMgPSBwb2x5dHJlZS5DaGlsZHMoKSwgaWxlbiA9IGNoaWxkcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspXG5cdFx0e1xuXHRcdFx0bm9kZSA9IGNoaWxkc1tpXTtcblx0XHRcdENsaXBwZXJMaWIuSlMuQWRkT3V0ZXJQb2x5Tm9kZVRvRXhQb2x5Z29ucyhub2RlLCBleHBvbHlnb25zKTtcblx0XHR9XG5cdFx0cmV0dXJuIGV4cG9seWdvbnM7XG5cdH07XG5cbn0pKCk7IiwiaW1wb3J0IHsgU2tldGNoIH0gZnJvbSAnLi4vU2tldGNoJ1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyByYW5kRmxvYXQsIHJhbmRJbnQsIHJhbmRJbnRSYW5nZSwgd3JhcCB9IGZyb20gJy4uL3V0aWxzL251bWJlclV0aWxzJ1xuaW1wb3J0IFJhbmdlIGZyb20gJy4vdG9vbHMvUmFuZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluaXRpYWxTa2V0Y2ggZXh0ZW5kcyBTa2V0Y2gge1xuICBwb3M6IFZlY3RvclxuICBzdGF0aWMgZ2VuZXJhdGVHQ29kZSA9IGZhbHNlXG4gIHN0YXRpYyBlbmFibGVDdXRvdXRzID0gZmFsc2VcblxuICBpbml0KCkge1xuICAgIHRoaXMucG9zID0geyB4OiB0aGlzLmNhbnZhc1dpZHRoIC8gMiwgeTogdGhpcy5jYW52YXNIZWlnaHQgLyAyIH1cbiAgICB0aGlzLnZzLnhEcmlmdCA9IG5ldyBSYW5nZSh7IG5hbWU6ICd4IERyaWZ0JywgbWluOiAwLCBtYXg6IDIwLCBpbml0aWFsVmFsdWU6IDUgfSlcbiAgICB0aGlzLnZzLnlEcmlmdCA9IG5ldyBSYW5nZSh7IG5hbWU6ICd5IERyaWZ0JywgbWluOiAwLCBtYXg6IDIwLCBpbml0aWFsVmFsdWU6IDUgfSlcbiAgICB0aGlzLnZzLmNpcmNsZU1pblJhZGl1cyA9IG5ldyBSYW5nZSh7IG5hbWU6ICdNaW4gcmFkJywgbWluOiAwLCBtYXg6IDI1LCBpbml0aWFsVmFsdWU6IDMgfSlcbiAgICB0aGlzLnZzLmNpcmNsZU1heFJhZGl1cyA9IG5ldyBSYW5nZSh7IG5hbWU6ICdNYXggcmFkJywgbWluOiAwLCBtYXg6IDUwLCBpbml0aWFsVmFsdWU6IDEyIH0pXG4gICAgdGhpcy52cy5jaXJjbGVEcmlmdCA9IG5ldyBSYW5nZSh7IG5hbWU6ICdDaXJjbGUgRHJpZnQnLCBtaW46IDAsIG1heDogMTAwLCBpbml0aWFsVmFsdWU6IDMwIH0pXG4gICAgdGhpcy52cy5jaXJjbGVTcGF3blJhdGUgPSBuZXcgUmFuZ2UoeyBuYW1lOiAnU3Bhd24gcmF0ZScsIG1pbjogMSwgbWF4OiAzMDAsIHN0ZXA6IDEsIGluaXRpYWxWYWx1ZTogMTUwIH0pXG4gICAgdGhpcy52cy5jaXJjbGVTcGF3bkNoYW5jZSA9IG5ldyBSYW5nZSh7IG5hbWU6ICdTcGF3biBjaGFuY2UnLCBtaW46IDAsIG1heDogMSwgaW5pdGlhbFZhbHVlOiAwLjUgfSlcbiAgfVxuXG4gIGluaXREcmF3KCkge1xuICAgIGlmICh0aGlzLnZzLmNpcmNsZU1heFJhZGl1cy52YWx1ZSA8IHRoaXMudnMuY2lyY2xlTWluUmFkaXVzLnZhbHVlKSB7XG4gICAgICB0aGlzLnZzLmNpcmNsZU1heFJhZGl1cy5zZXRWYWx1ZSh0aGlzLnZzLmNpcmNsZU1pblJhZGl1cy52YWx1ZSwgdHJ1ZSlcbiAgICB9XG4gIH1cblxuICBkcmF3KGluY3JlbWVudDogbnVtYmVyKSB7XG4gICAgdGhpcy5wb3MueCA9IHdyYXAodGhpcy5wb3MueCwgdGhpcy5jYW52YXNXaWR0aClcbiAgICB0aGlzLnBvcy55ID0gd3JhcCh0aGlzLnBvcy55LCB0aGlzLmNhbnZhc0hlaWdodClcblxuICAgIGlmIChpbmNyZW1lbnQgJSAxMDAgPT09IDApIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gYCMkeyhyYW5kSW50UmFuZ2UoMTI4KSAqIDY1NzkzKS50b1N0cmluZygxNil9YFxuXG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICB0aGlzLmN0eC5tb3ZlVG8odGhpcy5wb3MueCwgdGhpcy5wb3MueSlcbiAgICB0aGlzLnBvcy54ICs9IHJhbmRGbG9hdCh0aGlzLnZzLnhEcmlmdC52YWx1ZSlcbiAgICB0aGlzLnBvcy55ICs9IHJhbmRGbG9hdCh0aGlzLnZzLnlEcmlmdC52YWx1ZSlcbiAgICB0aGlzLmN0eC5saW5lVG8odGhpcy5wb3MueCwgdGhpcy5wb3MueSlcbiAgICB0aGlzLmN0eC5zdHJva2UoKVxuICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG5cbiAgICBpZiAoaW5jcmVtZW50ICUgdGhpcy52cy5jaXJjbGVTcGF3blJhdGUudmFsdWUgPT09IDAgJiYgTWF0aC5yYW5kb20oKSA8IHRoaXMudnMuY2lyY2xlU3Bhd25DaGFuY2UudmFsdWUpIHtcbiAgICAgIGNvbnN0IHByZXZGaWxsU3R5bGUgPSB0aGlzLmN0eC5maWxsU3R5bGVcbiAgICAgIGNvbnN0IHByZXZTdHJva2VTdHlsZSA9IHRoaXMuY3R4LnN0cm9rZVN0eWxlXG4gICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IGAjMDAwYFxuICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gYCMke01hdGguZmxvb3IoMTY3NzcyMTUgLyAyICsgcmFuZEludFJhbmdlKDE2Nzc3MjE1IC8gMikpLnRvU3RyaW5nKDE2KX1gXG4gICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKVxuICAgICAgdGhpcy5jdHguY2lyY2xlKFxuICAgICAgICB0aGlzLnBvcy54ICsgcmFuZEludCh0aGlzLnZzLmNpcmNsZURyaWZ0LnZhbHVlKSxcbiAgICAgICAgdGhpcy5wb3MueSArIHJhbmRJbnQodGhpcy52cy5jaXJjbGVEcmlmdC52YWx1ZSksXG4gICAgICAgIHJhbmRJbnRSYW5nZSh0aGlzLnZzLmNpcmNsZU1heFJhZGl1cy52YWx1ZSwgdGhpcy52cy5jaXJjbGVNaW5SYWRpdXMudmFsdWUpXG4gICAgICApXG4gICAgICB0aGlzLmN0eC5maWxsKClcbiAgICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSBwcmV2U3Ryb2tlU3R5bGVcbiAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IHByZXZGaWxsU3R5bGVcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4uL1NrZXRjaCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR0NvZGVUZXN0IGV4dGVuZHMgU2tldGNoIHtcbiAgaW5pdCgpIHtcbiAgICB0aGlzLmN0eC5kcml2ZXIuY29tbWVudCgnRHJhd2luZyBzaW5nbGUgbGluZScpXG5cbiAgICB0aGlzLmN0eC5iZWdpblBhdGgoKVxuICAgIHRoaXMuY3R4Lm1vdmVUbygxMCwgMTApXG4gICAgdGhpcy5jdHgubGluZVRvKDIwLCAxMClcbiAgICB0aGlzLmN0eC5zdHJva2UoKVxuICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG5cbiAgICB0aGlzLmN0eC5kcml2ZXIuY29tbWVudCgnRHJhd2luZyBqb2luZWQgbGluZScpXG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICB0aGlzLmN0eC5tb3ZlVG8oMjAsIDQwKVxuICAgIHRoaXMuY3R4LmxpbmVUbygyNSwgNDApXG4gICAgdGhpcy5jdHgubGluZVRvKDMwLCA0NSlcbiAgICB0aGlzLmN0eC5zdHJva2UoKVxuICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG5cbiAgICB0aGlzLmN0eC5kcml2ZXIuY29tbWVudCgnRHJhd2luZyByZWN0IG91dGxpbmUnKVxuICAgIHRoaXMuY3R4LnN0cm9rZVJlY3QoMjAsIDIwLCA1LCA1KVxuXG4gICAgdGhpcy5jdHguZHJpdmVyLmNvbW1lbnQoJ0RyYXdpbmcgcmVjdCBmaWxsJylcbiAgICB0aGlzLmN0eC5maWxsUmVjdCgzMCwgMjAsIDUsIDUpXG5cbiAgICB0aGlzLmN0eC5kcml2ZXIuY29tbWVudCgnRHJhd2luZyBjaXJjbGUnKVxuICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgaWYgKCdjaXJjbGUnIGluIHRoaXMuY3R4KSB0aGlzLmN0eC5jaXJjbGUoNDAsIDQwLCA1KVxuICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgfVxufVxuIiwiaW1wb3J0IFBhdGggZnJvbSAnLi4vUGF0aCdcbmltcG9ydCBQb2ludCBmcm9tICcuLi9Qb2ludCdcbmltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4uL1NrZXRjaCdcbmltcG9ydCB7IGFyY1RvUG9pbnRzIH0gZnJvbSAnLi4vdXRpbHMvcGF0aFV0aWxzJ1xuaW1wb3J0IE9zYyBmcm9tICcuL3Rvb2xzL09zYydcbmltcG9ydCBSYW5nZSBmcm9tICcuL3Rvb2xzL1JhbmdlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcmNzIGV4dGVuZHMgU2tldGNoIHtcbiAgb3NjOiBPc2NcbiAgY2lyY2xlUG9pbnRzOiBQb2ludFtdXG4gIGNvdW50OiBudW1iZXIgPSAwXG4gIGxhc3RQb2ludDogUG9pbnRcblxuICBpbml0KCkge1xuICAgIHRoaXMudnMucHJlY2lzaW9uID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxODAsIG1pbjogMiwgbWF4OiAxNDQwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5zcGVlZFBvdzEgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAuNSwgbWluOiAwLjAwMSwgbWF4OiAxMCwgc3RlcDogMC4wMDEgfSlcbiAgICB0aGlzLnZzLnJhZGl1c01pbiA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMC4xLCBtaW46IDEsIG1heDogMjAsIHN0ZXA6IDAuMSB9KVxuICAgIHRoaXMudnMucmFkaXVzTWF4ID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjUsIG1pbjogMSwgbWF4OiAyMCwgc3RlcDogMC4xIH0pXG4gICAgdGhpcy52cy5yYWRpdXNUaGV0YU11bHRpID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxLCBtaW46IDAuMDAxLCBtYXg6IDUsIHN0ZXA6IDAuMDAxIH0pXG5cbiAgICB0aGlzLm9zYyA9IG5ldyBPc2Moe1xuICAgICAgc3BlZWQ6IChpKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gTWF0aC5zcXJ0KGkpIC8gLU1hdGgucG93KE1hdGguc3FydChpKSwgdGhpcy52cy5zcGVlZFBvdzEudmFsdWUpXG4gICAgICAgIHJldHVybiBpc05hTih2YWx1ZSkgPyAwIDogdmFsdWVcbiAgICAgIH0sXG4gICAgICByYWRpdXM6IChpKSA9PlxuICAgICAgICBuZXcgUG9pbnQoXG4gICAgICAgICAgdGhpcy52cy5yYWRpdXNNaW4udmFsdWUgKyBNYXRoLmNvcyhpICogdGhpcy52cy5yYWRpdXNUaGV0YU11bHRpLnZhbHVlKSAqIHRoaXMudnMucmFkaXVzTWF4LnZhbHVlLFxuICAgICAgICAgIHRoaXMudnMucmFkaXVzTWluLnZhbHVlICsgTWF0aC5zaW4oaSAqIHRoaXMudnMucmFkaXVzVGhldGFNdWx0aS52YWx1ZSkgKiB0aGlzLnZzLnJhZGl1c01heC52YWx1ZVxuICAgICAgICApLFxuICAgIH0pXG4gIH1cblxuICBpbml0RHJhdygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52cy5yYWRpdXNNaW4udmFsdWUgPiB0aGlzLnZzLnJhZGl1c01heC52YWx1ZSkgdGhpcy52cy5yYWRpdXNNYXguc2V0VmFsdWUodGhpcy52cy5yYWRpdXNNaW4udmFsdWUsIHRydWUpXG5cbiAgICBjb25zb2xlLmxvZyh7XG4gICAgICBwcmVjaXNpb246IHRoaXMudnMucHJlY2lzaW9uLnZhbHVlLFxuICAgICAgc3BlZWRQb3cxOiB0aGlzLnZzLnNwZWVkUG93MS52YWx1ZSxcbiAgICAgIHJhZGl1c01pbjogdGhpcy52cy5yYWRpdXNNaW4udmFsdWUsXG4gICAgICByYWRpdXNNYXg6IHRoaXMudnMucmFkaXVzTWF4LnZhbHVlLFxuICAgICAgcmFkaXVzVGhldGFNdWx0aTogdGhpcy52cy5yYWRpdXNUaGV0YU11bHRpLnZhbHVlLFxuICAgIH0pXG5cbiAgICB0aGlzLmNvdW50ID0gMFxuICAgIHRoaXMubGFzdFBvaW50ID0gdW5kZWZpbmVkXG4gICAgdGhpcy5vc2MucmVzZXQoKVxuXG4gICAgY29uc3QgcmFkaXVzID0gTWF0aC5taW4odGhpcy5jdywgdGhpcy5jaCkgLyAyIC0gKHRoaXMudnMucmFkaXVzTWF4LnZhbHVlICsgMTApXG4gICAgY29uc3QgeyBzdGFydDogc3RhcnRQb2ludCB9ID0gYXJjVG9Qb2ludHModGhpcy5jeCwgdGhpcy5jeSwgMCwgTWF0aC5QSSAqIDIsIHJhZGl1cylcblxuICAgIGNvbnN0IHRtcCA9IG5ldyBQYXRoKClcbiAgICB0bXAubW92ZVRvKHN0YXJ0UG9pbnQueCwgc3RhcnRQb2ludC55KVxuICAgIHRtcC5hcmModGhpcy5jeCwgdGhpcy5jeSwgcmFkaXVzLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpXG4gICAgdGhpcy5jaXJjbGVQb2ludHMgPSB0bXAuZ2V0UG9pbnRzKHRoaXMudnMucHJlY2lzaW9uLnZhbHVlKVxuXG4gICAgLy8gdGhpcy5sYXN0UG9pbnQgPSBzdGFydFBvaW50LmNsb25lKClcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jb3VudCA+PSB0aGlzLmNpcmNsZVBvaW50cy5sZW5ndGgpIHJldHVyblxuXG4gICAgdGhpcy5vc2Muc3RlcCh0aGlzLmNvdW50ICsgMSlcbiAgICBjb25zdCBwID0gdGhpcy5jaXJjbGVQb2ludHNbdGhpcy5jb3VudF1cbiAgICBjb25zdCBwb2ludCA9IG5ldyBQb2ludChwLnggKyB0aGlzLm9zYy54LCBwLnkgKyB0aGlzLm9zYy55KVxuXG4gICAgaWYgKHRoaXMubGFzdFBvaW50ICYmIHApIHtcbiAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgICB0aGlzLmN0eC5tb3ZlVG8odGhpcy5sYXN0UG9pbnQueCwgdGhpcy5sYXN0UG9pbnQueSlcbiAgICAgIHRoaXMuY3R4LmxpbmVUbyhwb2ludC54LCBwb2ludC55KVxuICAgICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG4gICAgfVxuXG4gICAgdGhpcy5sYXN0UG9pbnQgPSBwb2ludC5jbG9uZSgpXG5cbiAgICB0aGlzLmNvdW50KytcbiAgfVxufVxuIiwiaW1wb3J0IFBvaW50IGZyb20gJy4uL1BvaW50J1xuaW1wb3J0IHsgU2tldGNoIH0gZnJvbSAnLi4vU2tldGNoJ1xuaW1wb3J0IHsgcmFuZEludCB9IGZyb20gJy4uL3V0aWxzL251bWJlclV0aWxzJ1xuaW1wb3J0IFJhbmdlIGZyb20gJy4vdG9vbHMvUmFuZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJlemllclNjcmliYmxlcyBleHRlbmRzIFNrZXRjaCB7XG4gIHN0YXRpYyBnZW5lcmF0ZUdDb2RlID0gZmFsc2VcbiAgc3RhdGljIGVuYWJsZUN1dG91dHMgPSBmYWxzZVxuICAvLyBzdGFydFBvaW50OiBQb2ludFxuICBsYXN0UG9pbnQ6IFBvaW50XG4gIGxhc3RBbmNob3JQb2ludDogUG9pbnRcblxuICBpbml0KCkge1xuICAgIHRoaXMudnMuc3RvcEFmdGVyID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA1LCBtaW46IDEsIG1heDogMjAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5kcmlmdE1pbiA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMjAsIG1pbjogMCwgbWF4OiAxMDAsIHN0ZXA6IDEgfSlcbiAgICB0aGlzLnZzLmRyaWZ0TWF4ID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA1MCwgbWluOiAwLCBtYXg6IDEwMCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMubWlkcG9pbnREcmlmdCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMzAsIG1pbjogMCwgbWF4OiAxMDAsIHN0ZXA6IDEgfSlcbiAgfVxuXG4gIGluaXREcmF3KCk6IHZvaWQge1xuICAgIGNvbnN0IGRpciA9IE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMlxuICAgIHRoaXMubGFzdFBvaW50ID0gbmV3IFBvaW50KHRoaXMuY3ggKyBNYXRoLmNvcyhkaXIpICogMTAwLCB0aGlzLmN5ICsgK01hdGguc2luKGRpcikgKiAxMDApXG4gICAgdGhpcy5sYXN0QW5jaG9yUG9pbnQgPSB0aGlzLmxhc3RQb2ludC5jbG9uZSgpXG4gIH1cblxuICBkcmF3KGluY3JlbWVudDogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gY29uc29sZS5sb2coaW5jcmVtZW50KVxuICAgIGlmIChpbmNyZW1lbnQgPiB0aGlzLnZzLnN0b3BBZnRlci52YWx1ZSkgcmV0dXJuXG5cbiAgICBjb25zdCBlbmRQb2ludCA9IG5ldyBQb2ludChcbiAgICAgIHRoaXMubGFzdFBvaW50LnggK1xuICAgICAgICBNYXRoLmNvcyhNYXRoLnJhbmRvbSgpICogTWF0aC5QSSAqIDIpICpcbiAgICAgICAgICAodGhpcy52cy5kcmlmdE1pbi52YWx1ZSArIE1hdGgucmFuZG9tKCkgKiAodGhpcy52cy5kcmlmdE1heC52YWx1ZSAtIHRoaXMudnMuZHJpZnRNaW4udmFsdWUpKSxcbiAgICAgIHRoaXMubGFzdFBvaW50LnkgK1xuICAgICAgICBNYXRoLnNpbihNYXRoLnJhbmRvbSgpICogTWF0aC5QSSAqIDIpICpcbiAgICAgICAgICAodGhpcy52cy5kcmlmdE1pbi52YWx1ZSArIE1hdGgucmFuZG9tKCkgKiAodGhpcy52cy5kcmlmdE1heC52YWx1ZSAtIHRoaXMudnMuZHJpZnRNaW4udmFsdWUpKVxuICAgIClcblxuICAgIGVuZFBvaW50LnggKz0gKHRoaXMuY3ggLSBlbmRQb2ludC54KSAvIDE1XG4gICAgZW5kUG9pbnQueSArPSAodGhpcy5jeSAtIGVuZFBvaW50LnkpIC8gMTVcblxuICAgIGNvbnN0IGFuZ2xlID0gdGhpcy5sYXN0QW5jaG9yUG9pbnQuYW5nbGVUbyh0aGlzLmxhc3RQb2ludClcbiAgICBjb25zdCBkaXN0ID0gdGhpcy5sYXN0QW5jaG9yUG9pbnQuZGlzdGFuY2VUbyh0aGlzLmxhc3RQb2ludClcblxuICAgIGNvbnN0IG1pZFBvaW50ID0gdGhpcy5sYXN0QW5jaG9yUG9pbnRcbiAgICAgIC5hZGQobmV3IFBvaW50KE1hdGguY29zKGFuZ2xlKSAqIChkaXN0ICogMiksIE1hdGguc2luKGFuZ2xlKSAqIChkaXN0ICogMikpKVxuICAgICAgLmFkZChuZXcgUG9pbnQocmFuZEludCh0aGlzLnZzLm1pZHBvaW50RHJpZnQudmFsdWUpLCByYW5kSW50KHRoaXMudnMubWlkcG9pbnREcmlmdC52YWx1ZSkpKVxuXG4gICAgbWlkUG9pbnQueCArPSAodGhpcy5jeCAtIG1pZFBvaW50LngpIC8gMTVcbiAgICBtaWRQb2ludC55ICs9ICh0aGlzLmN5IC0gbWlkUG9pbnQueSkgLyAxNVxuXG4gICAgLy8gZGVidWdEb3QodGhpcy5jdHgsIG1pZFBvaW50LngsIG1pZFBvaW50LnksICcjMDBmJylcbiAgICAvLyBkZWJ1Z0RvdCh0aGlzLmN0eCwgZW5kUG9pbnQueCwgZW5kUG9pbnQueSwgJyNmMDAnKVxuXG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICB0aGlzLmN0eC5tb3ZlVG8odGhpcy5sYXN0UG9pbnQueCwgdGhpcy5sYXN0UG9pbnQueSlcbiAgICB0aGlzLmN0eC5iZXppZXJDdXJ2ZVRvKG1pZFBvaW50LngsIG1pZFBvaW50LnksIG1pZFBvaW50LngsIG1pZFBvaW50LnksIGVuZFBvaW50LngsIGVuZFBvaW50LnkpXG4gICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuXG4gICAgdGhpcy5sYXN0UG9pbnQgPSBlbmRQb2ludC5jbG9uZSgpXG4gICAgdGhpcy5sYXN0QW5jaG9yUG9pbnQgPSBtaWRQb2ludC5jbG9uZSgpXG4gIH1cbn1cbiIsImltcG9ydCBQb2ludCBmcm9tICcuLi9Qb2ludCdcbmltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4uL1NrZXRjaCdcbmltcG9ydCBPc2MgZnJvbSAnLi90b29scy9Pc2MnXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi90b29scy9SYW5nZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3BpcmFsaW5nIGV4dGVuZHMgU2tldGNoIHtcbiAgLy8gc3RhdGljIGdlbmVyYXRlR0NvZGUgPSBmYWxzZVxuICBzdGF0aWMgZW5hYmxlQ3V0b3V0cyA9IGZhbHNlXG4gIG9zYzE6IE9zY1xuICBvc2MyOiBPc2NcbiAgb3NjMzogT3NjXG4gIGxhc3RQb2ludDogUG9pbnRcblxuICBpbml0KCkge1xuICAgIGNvbnN0IHNjYWxlRG93biA9IDE1XG4gICAgdGhpcy52cy5zcGVlZFVwID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxMCwgbWluOiAxLCBtYXg6IDEwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMuc3RvcEFmdGVyID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA1MDAwMCwgbWluOiAxLCBtYXg6IDEyMDAwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMub3NjMXNwZWVkID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjEsIG1pbjogLU1hdGguUEkgLyA4LCBtYXg6IE1hdGguUEkgLyA4LCBzdGVwOiBNYXRoLlBJIC8gNjY2IH0pIC8vIDY2NiBpcyBhY3R1YWxseSBpbXBvcnRhbnRcbiAgICB0aGlzLnZzLm9zYzFkaXN0ID0gbmV3IFJhbmdlKHtcbiAgICAgIGluaXRpYWxWYWx1ZTogTWF0aC5QSSAvIDQgLyBzY2FsZURvd24sXG4gICAgICBtaW46IE1hdGguUEkgLyA4IC8gc2NhbGVEb3duLFxuICAgICAgbWF4OiAoTWF0aC5QSSAqIDE2KSAvIHNjYWxlRG93bixcbiAgICAgIHN0ZXA6IE1hdGguUEkgLyAzMiAvIHNjYWxlRG93bixcbiAgICB9KVxuICAgIHRoaXMudnMub3NjMXBoYXNlID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IDAsIG1heDogTWF0aC5QSSAqIDIsIHN0ZXA6IE1hdGguUEkgLyAxNiB9KVxuICAgIHRoaXMudnMub3NjMnNwZWVkID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjEsIG1pbjogLU1hdGguUEkgLyA4LCBtYXg6IE1hdGguUEkgLyA4LCBzdGVwOiBNYXRoLlBJIC8gNjY2IH0pIC8vIDY2NiBpcyBhY3R1YWxseSBpbXBvcnRhbnRcbiAgICB0aGlzLnZzLm9zYzJkaXN0ID0gbmV3IFJhbmdlKHtcbiAgICAgIGluaXRpYWxWYWx1ZTogTWF0aC5QSSAvIDQgLyBzY2FsZURvd24sXG4gICAgICBtaW46IE1hdGguUEkgLyA4IC8gc2NhbGVEb3duLFxuICAgICAgbWF4OiAoTWF0aC5QSSAqIDE2KSAvIHNjYWxlRG93bixcbiAgICAgIHN0ZXA6IE1hdGguUEkgLyAzMiAvIHNjYWxlRG93bixcbiAgICB9KVxuICAgIHRoaXMudnMub3NjMnBoYXNlID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IDAsIG1heDogTWF0aC5QSSAqIDIsIHN0ZXA6IE1hdGguUEkgLyAxNiB9KVxuICAgIHRoaXMudnMub3NjM3NwZWVkID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjEsIG1pbjogLU1hdGguUEkgLyA4LCBtYXg6IE1hdGguUEkgLyA4LCBzdGVwOiBNYXRoLlBJIC8gNjY2IH0pIC8vIDY2NiBpcyBhY3R1YWxseSBpbXBvcnRhbnRcbiAgICB0aGlzLnZzLm9zYzNkaXN0ID0gbmV3IFJhbmdlKHtcbiAgICAgIGluaXRpYWxWYWx1ZTogTWF0aC5QSSAvIDQgLyBzY2FsZURvd24sXG4gICAgICBtaW46IE1hdGguUEkgLyA4IC8gc2NhbGVEb3duLFxuICAgICAgbWF4OiAoTWF0aC5QSSAqIDE2KSAvIHNjYWxlRG93bixcbiAgICAgIHN0ZXA6IE1hdGguUEkgLyAzMiAvIHNjYWxlRG93bixcbiAgICB9KVxuICAgIHRoaXMudnMub3NjM3BoYXNlID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IDAsIG1heDogTWF0aC5QSSAqIDIsIHN0ZXA6IE1hdGguUEkgLyAxNiB9KVxuICAgIHRoaXMub3NjMSA9IG5ldyBPc2MoeyBzcGVlZDogKGkpID0+IHRoaXMudnMub3NjMXNwZWVkLnZhbHVlLCByYWRpdXM6IChpKSA9PiB0aGlzLnZzLm9zYzFkaXN0LnZhbHVlLCBwaGFzZTogMCB9KVxuICAgIHRoaXMub3NjMiA9IG5ldyBPc2MoeyBzcGVlZDogKGkpID0+IHRoaXMudnMub3NjMnNwZWVkLnZhbHVlLCByYWRpdXM6IChpKSA9PiB0aGlzLnZzLm9zYzJkaXN0LnZhbHVlLCBwaGFzZTogMCB9KVxuICAgIHRoaXMub3NjMyA9IG5ldyBPc2MoeyBzcGVlZDogKGkpID0+IHRoaXMudnMub3NjM3NwZWVkLnZhbHVlLCByYWRpdXM6IChpKSA9PiB0aGlzLnZzLm9zYzNkaXN0LnZhbHVlLCBwaGFzZTogMCB9KVxuICB9XG5cbiAgaW5pdERyYXcoKTogdm9pZCB7XG4gICAgdGhpcy5sYXN0UG9pbnQgPSBuZXcgUG9pbnQodGhpcy5jeCwgdGhpcy5jeSlcbiAgICB0aGlzLnZzLnN0b3BBZnRlci5zdGVwID0gdGhpcy52cy5zcGVlZFVwLnZhbHVlXG4gICAgdGhpcy5vc2MxLnBoYXNlID0gdGhpcy52cy5vc2MxcGhhc2UudmFsdWVcbiAgICB0aGlzLm9zYzIucGhhc2UgPSB0aGlzLnZzLm9zYzJwaGFzZS52YWx1ZVxuICAgIHRoaXMub3NjMy5waGFzZSA9IHRoaXMudnMub3NjM3BoYXNlLnZhbHVlXG4gICAgdGhpcy5vc2MxLnJlc2V0KClcbiAgICB0aGlzLm9zYzIucmVzZXQoKVxuICAgIHRoaXMub3NjMy5yZXNldCgpXG4gIH1cblxuICBkcmF3KGluY3JlbWVudDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgbG9vcCA9IHRoaXMudnMuc3BlZWRVcC52YWx1ZVxuICAgIGlmIChpbmNyZW1lbnQgKiBsb29wID4gdGhpcy52cy5zdG9wQWZ0ZXIudmFsdWUpIHJldHVyblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcDsgaSsrKSB7XG4gICAgICB0aGlzLm9zYzEuc3RlcChpbmNyZW1lbnQpXG4gICAgICB0aGlzLm9zYzIuc3RlcChpbmNyZW1lbnQpXG4gICAgICB0aGlzLm9zYzMuc3RlcChpbmNyZW1lbnQpXG4gICAgICAvLyBjb25zdCBwb2ludCA9IHRoaXMubGFzdFBvaW50LmNsb25lKCkuYWRkKHRoaXMub3NjMS52YWx1ZSkuYWRkKHRoaXMub3NjMi52YWx1ZSkuYWRkKHRoaXMub3NjMy52YWx1ZSlcbiAgICAgIGNvbnN0IHBvaW50ID0gdGhpcy5sYXN0UG9pbnQuY2xvbmUoKS5hZGQodGhpcy5vc2MxLnZhbHVlLmFkZCh0aGlzLm9zYzIudmFsdWUpLmFkZCh0aGlzLm9zYzMudmFsdWUpKVxuXG4gICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKVxuICAgICAgdGhpcy5jdHgubW92ZVRvKHRoaXMubGFzdFBvaW50LngsIHRoaXMubGFzdFBvaW50LnkpXG4gICAgICB0aGlzLmN0eC5saW5lVG8ocG9pbnQueCwgcG9pbnQueSlcbiAgICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuXG4gICAgICB0aGlzLmxhc3RQb2ludCA9IHBvaW50XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi4vUG9pbnQnXG5pbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuLi9Ta2V0Y2gnXG5pbXBvcnQgT3NjIGZyb20gJy4vdG9vbHMvT3NjJ1xuaW1wb3J0IFJhbmdlIGZyb20gJy4vdG9vbHMvUmFuZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwaXJhbGluZ1Byb3BvcnRpb25hbCBleHRlbmRzIFNrZXRjaCB7XG4gIC8vIHN0YXRpYyBnZW5lcmF0ZUdDb2RlID0gZmFsc2VcbiAgc3RhdGljIGVuYWJsZUN1dG91dHMgPSBmYWxzZVxuICBvc2MxOiBPc2NcbiAgb3NjMjogT3NjXG4gIG9zYzM6IE9zY1xuICBsYXN0UG9pbnQ6IFBvaW50XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnZzLnNwZWVkVXAgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDE1LCBtaW46IDEsIG1heDogMTAwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5zdG9wQWZ0ZXIgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDEwMDAsIG1pbjogMSwgbWF4OiAyMDAwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMub3NjU3BlZWQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAuMTgyNSwgbWluOiAtTWF0aC5QSSAvIDgsIG1heDogTWF0aC5QSSAvIDgsIHN0ZXA6IE1hdGguUEkgLyA2NjYgfSlcbiAgICB0aGlzLnZzLm9zY1NwZWVkTXVsdGkgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDIuOTk0LCBtaW46IDAuNSwgbWF4OiA1LCBzdGVwOiAwLjAwMDAxIH0pXG4gICAgdGhpcy52cy5vc2NEaXN0ID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA1MCwgbWluOiAxLCBtYXg6IDIwLCBzdGVwOiAwLjI1IH0pXG4gICAgdGhpcy52cy5vc2MxcGhhc2UgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDUuOSwgbWluOiAwLCBtYXg6IE1hdGguUEkgKiAyLCBzdGVwOiBNYXRoLlBJIC8gMzIgfSlcbiAgICB0aGlzLnZzLm9zYzJwaGFzZSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMS44LCBtaW46IDAsIG1heDogTWF0aC5QSSAqIDIsIHN0ZXA6IE1hdGguUEkgLyAzMiB9KVxuICAgIHRoaXMudnMub3NjM3BoYXNlID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAyLCBtaW46IDAsIG1heDogTWF0aC5QSSAqIDIsIHN0ZXA6IE1hdGguUEkgLyAzMiB9KVxuICAgIHRoaXMub3NjMSA9IG5ldyBPc2Moe1xuICAgICAgc3BlZWQ6IChpKSA9PiAodGhpcy52cy5vc2NTcGVlZC52YWx1ZSAqIHRoaXMudnMub3NjU3BlZWRNdWx0aS52YWx1ZSkgLyAyLFxuICAgICAgcmFkaXVzOiAoaSkgPT4gdGhpcy52cy5vc2NEaXN0LnZhbHVlLFxuICAgICAgcGhhc2U6IDAsXG4gICAgfSlcbiAgICB0aGlzLm9zYzIgPSBuZXcgT3NjKHtcbiAgICAgIHNwZWVkOiAoaSkgPT4gKHRoaXMudnMub3NjU3BlZWQudmFsdWUgKiBNYXRoLnBvdyh0aGlzLnZzLm9zY1NwZWVkTXVsdGkudmFsdWUsIDIpKSAvIDIsXG4gICAgICByYWRpdXM6IChpKSA9PiB0aGlzLnZzLm9zY0Rpc3QudmFsdWUsXG4gICAgICBwaGFzZTogMCxcbiAgICB9KVxuICAgIHRoaXMub3NjMyA9IG5ldyBPc2Moe1xuICAgICAgc3BlZWQ6IChpKSA9PiAodGhpcy52cy5vc2NTcGVlZC52YWx1ZSAqIE1hdGgucG93KHRoaXMudnMub3NjU3BlZWRNdWx0aS52YWx1ZSwgMykpIC8gMyxcbiAgICAgIHJhZGl1czogKGkpID0+IHRoaXMudnMub3NjRGlzdC52YWx1ZSxcbiAgICAgIHBoYXNlOiAwLFxuICAgIH0pXG4gIH1cblxuICBpbml0RHJhdygpOiB2b2lkIHtcbiAgICB0aGlzLmxhc3RQb2ludCA9IG5ldyBQb2ludCh0aGlzLmN4LCB0aGlzLmN5KVxuICAgIHRoaXMudnMuc3RvcEFmdGVyLnN0ZXAgPSB0aGlzLnZzLnNwZWVkVXAudmFsdWVcbiAgICB0aGlzLm9zYzEucGhhc2UgPSB0aGlzLnZzLm9zYzFwaGFzZS52YWx1ZVxuICAgIHRoaXMub3NjMi5waGFzZSA9IHRoaXMudnMub3NjMnBoYXNlLnZhbHVlXG4gICAgdGhpcy5vc2MzLnBoYXNlID0gdGhpcy52cy5vc2MzcGhhc2UudmFsdWVcbiAgICB0aGlzLm9zYzEucmVzZXQoKVxuICAgIHRoaXMub3NjMi5yZXNldCgpXG4gICAgdGhpcy5vc2MzLnJlc2V0KClcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBsb29wID0gdGhpcy52cy5zcGVlZFVwLnZhbHVlXG4gICAgaWYgKGluY3JlbWVudCAqIGxvb3AgPiB0aGlzLnZzLnN0b3BBZnRlci52YWx1ZSkgcmV0dXJuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb29wOyBpKyspIHtcbiAgICAgIHRoaXMub3NjMS5zdGVwKGluY3JlbWVudClcbiAgICAgIHRoaXMub3NjMi5zdGVwKGluY3JlbWVudClcbiAgICAgIHRoaXMub3NjMy5zdGVwKGluY3JlbWVudClcbiAgICAgIC8vIGNvbnN0IHBvaW50ID0gdGhpcy5sYXN0UG9pbnQuY2xvbmUoKS5hZGQodGhpcy5vc2MxLnZhbHVlKS5hZGQodGhpcy5vc2MyLnZhbHVlKS5hZGQodGhpcy5vc2MzLnZhbHVlKVxuICAgICAgY29uc3QgcG9pbnQgPSB0aGlzLmxhc3RQb2ludC5jbG9uZSgpLmFkZCh0aGlzLm9zYzEudmFsdWUuYWRkKHRoaXMub3NjMi52YWx1ZSkuYWRkKHRoaXMub3NjMy52YWx1ZSkpXG5cbiAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgICB0aGlzLmN0eC5tb3ZlVG8odGhpcy5sYXN0UG9pbnQueCwgdGhpcy5sYXN0UG9pbnQueSlcbiAgICAgIHRoaXMuY3R4LmxpbmVUbyhwb2ludC54LCBwb2ludC55KVxuICAgICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG5cbiAgICAgIHRoaXMubGFzdFBvaW50ID0gcG9pbnRcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBQb2ludCBmcm9tICcuLi9Qb2ludCdcbmltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4uL1NrZXRjaCdcbmltcG9ydCBPc2MgZnJvbSAnLi90b29scy9Pc2MnXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi90b29scy9SYW5nZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29uY2VudHJpY0NpcmNsZXMgZXh0ZW5kcyBTa2V0Y2gge1xuICAvLyBzdGF0aWMgZ2VuZXJhdGVHQ29kZSA9IGZhbHNlXG4gIHN0YXRpYyBlbmFibGVDdXRvdXRzID0gZmFsc2VcblxuICBsYXN0UG9pbnQ6IFBvaW50XG4gIHJhZGl1czogbnVtYmVyXG4gIHRoZXRhOiBudW1iZXJcbiAgb3NjMTogT3NjXG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnZzLnNwZWVkVXAgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDEsIG1pbjogMSwgbWF4OiAxMDAsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLnN0b3BBZnRlciA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMTAwLCBtaW46IDEsIG1heDogMTAwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMuc2hyaW5rQW1vdW50ID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxNSwgbWluOiAxLCBtYXg6IDEyLCBzdGVwOiAwLjEgfSlcbiAgICB0aGlzLnZzLnNocmlua0RpdiA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMSwgbWluOiAwLCBtYXg6IDEuOCwgc3RlcDogMC4wMSB9KVxuICAgIHRoaXMudnMuc2hyaW5rRmFsbG9mZiA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMSwgbWluOiAwLjksIG1heDogMS4xLCBzdGVwOiAwLjAwNSB9KVxuICAgIHRoaXMudnMuc2hyaW5rVmFyaWFuY2UgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAsIG1pbjogMCwgbWF4OiA1MCwgc3RlcDogMC4wMSB9KVxuICAgIHRoaXMudnMuc2hyaW5rVmFyT3NjID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiBNYXRoLlBJIC8gMzIsIG1pbjogMCwgbWF4OiBNYXRoLlBJIC8gNCwgc3RlcDogMC4wMDEgfSlcbiAgICB0aGlzLnZzLnJvdGF0ZVNwZWVkID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiBNYXRoLlBJIC8gMzIsIG1pbjogLU1hdGguUEkgLyA0LCBtYXg6IE1hdGguUEkgLyA0LCBzdGVwOiAwLjAwMSB9KVxuICAgIHRoaXMub3NjMSA9IG5ldyBPc2Moe1xuICAgICAgcmFkaXVzOiAoaSkgPT4gdGhpcy52cy5zaHJpbmtWYXJpYW5jZS52YWx1ZSxcbiAgICAgIHNwZWVkOiAoaSkgPT4gdGhpcy52cy5zaHJpbmtWYXJPc2MudmFsdWUsXG4gICAgICBwaGFzZTogMCxcbiAgICB9KVxuICB9XG5cbiAgaW5pdERyYXcoKTogdm9pZCB7XG4gICAgdGhpcy5sYXN0UG9pbnQgPSBuZXcgUG9pbnQodGhpcy5jeCwgdGhpcy5jeSlcbiAgICB0aGlzLnJhZGl1cyA9IE1hdGgubWluKHRoaXMuY3csIHRoaXMuY2gpICogMC40NVxuICAgIHRoaXMudGhldGEgPSAwXG4gICAgdGhpcy5vc2MxLnJlc2V0KClcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBsb29wID0gdGhpcy52cy5zcGVlZFVwLnZhbHVlXG4gICAgaWYgKGluY3JlbWVudCAqIGxvb3AgPiB0aGlzLnZzLnN0b3BBZnRlci52YWx1ZSkgcmV0dXJuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb29wOyBpKyspIHtcbiAgICAgIGNvbnN0IHJlYWxJbmNyZW1lbnQgPSBpbmNyZW1lbnQgKiBsb29wICsgaVxuXG4gICAgICB0aGlzLm9zYzEuc3RlcChyZWFsSW5jcmVtZW50KVxuXG4gICAgICBpZiAodGhpcy5yYWRpdXMgPiAwKSB7XG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgICAgIHRoaXMuY3R4LmNpcmNsZSh0aGlzLmxhc3RQb2ludC54LCB0aGlzLmxhc3RQb2ludC55LCB0aGlzLnJhZGl1cylcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgICAgIH1cblxuICAgICAgdGhpcy50aGV0YSArPSB0aGlzLnZzLnJvdGF0ZVNwZWVkLnZhbHVlXG5cbiAgICAgIGNvbnN0IG5leHRSYWRpdXMgPVxuICAgICAgICB0aGlzLnJhZGl1cyAtICh0aGlzLnZzLnNocmlua0Ftb3VudC52YWx1ZSArIHRoaXMub3NjMS54KSAqIE1hdGgucG93KHRoaXMudnMuc2hyaW5rRmFsbG9mZi52YWx1ZSwgcmVhbEluY3JlbWVudClcbiAgICAgIGNvbnN0IHJhZERpZmYgPSB0aGlzLnJhZGl1cyAtIG5leHRSYWRpdXNcblxuICAgICAgdGhpcy5sYXN0UG9pbnQgPSB0aGlzLmxhc3RQb2ludC5tb3ZlQWxvbmdBbmdsZSh0aGlzLnRoZXRhLCByYWREaWZmICogdGhpcy52cy5zaHJpbmtEaXYudmFsdWUpXG4gICAgICB0aGlzLnJhZGl1cyA9IG5leHRSYWRpdXNcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBQb2ludCBmcm9tICcuLi9Qb2ludCdcbmltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4uL1NrZXRjaCdcbmltcG9ydCB7IHJhbmRvbSwgc2VlZFJhbmRvbSB9IGZyb20gJy4uL3V0aWxzL3JhbmRvbSdcbmltcG9ydCBSYW5nZSBmcm9tICcuL3Rvb2xzL1JhbmdlJ1xuXG5pbnRlcmZhY2UgQ2lyY2xlIHtcbiAgcG9zaXRpb246IFBvaW50XG4gIHJhZGl1czogbnVtYmVyXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1YmJsZXNJbkNpcmNsZSBleHRlbmRzIFNrZXRjaCB7XG4gIHN0YXRpYyBnZW5lcmF0ZUdDb2RlID0gZmFsc2VcbiAgc3RhdGljIGVuYWJsZUN1dG91dHMgPSBmYWxzZVxuXG4gIHJlZHJhd25Db3VudDogbnVtYmVyXG4gIHJlb3JkZXJlZDogYm9vbGVhblxuICBjaXJjbGVzOiBDaXJjbGVbXVxuICBsYXN0UG9pbnQ6IFBvaW50XG4gIHJhZGl1czogbnVtYmVyXG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnZzLnNlZWQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDEzOTEsIG1pbjogMTAwMCwgbWF4OiA1MDAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5hdExlYXN0ID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA3NzcsIG1pbjogMSwgbWF4OiA1MDAwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5tYXhSYWRpdXMgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDMwMCwgbWluOiAwLjUsIG1heDogNDUsIHN0ZXA6IDAuNSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMubWluUmFkaXVzID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjIsIG1pbjogMC4xLCBtYXg6IDUsIHN0ZXA6IDAuMDUsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgfVxuXG4gIGluaXREcmF3KCk6IHZvaWQge1xuICAgIHNlZWRSYW5kb20odGhpcy52cy5zZWVkLnZhbHVlKVxuICAgIHRoaXMucmVvcmRlcmVkID0gZmFsc2VcbiAgICB0aGlzLnJlZHJhd25Db3VudCA9IDBcbiAgICB0aGlzLmNpcmNsZXMgPSBbXVxuICAgIHRoaXMucmFkaXVzID0gTWF0aC5taW4odGhpcy5jdywgdGhpcy5jaCkgKiAwLjQ1XG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICB0aGlzLmN0eC5jaXJjbGUodGhpcy5jeCwgdGhpcy5jeSwgdGhpcy5yYWRpdXMpXG4gICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuICB9XG5cbiAgZHJhdyhpbmNyZW1lbnQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLmNpcmNsZXMubGVuZ3RoID4gdGhpcy52cy5hdExlYXN0LnZhbHVlKSB7XG4gICAgICBpZiAoIXRoaXMucmVvcmRlcmVkKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IG5ldyBQb2ludCh0aGlzLmN4LCB0aGlzLmN5KVxuICAgICAgICB0aGlzLmNpcmNsZXMuc29ydCgoYSwgYikgPT4gUG9pbnQuZGlzdGFuY2UoY2VudGVyLCBiLnBvc2l0aW9uKSAtIFBvaW50LmRpc3RhbmNlKGNlbnRlciwgYS5wb3NpdGlvbikpXG4gICAgICAgIHRoaXMuY3R4LnJlc2V0KClcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICAgICAgdGhpcy5jdHguY2lyY2xlKHRoaXMuY3gsIHRoaXMuY3ksIHRoaXMucmFkaXVzKVxuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKVxuICAgICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuICAgICAgICB0aGlzLnJlb3JkZXJlZCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLnJlZHJhd25Db3VudCA8IHRoaXMuY2lyY2xlcy5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBjaXJjbGUgPSB0aGlzLmNpcmNsZXNbdGhpcy5yZWRyYXduQ291bnRdXG4gICAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICAgICAgICB0aGlzLmN0eC5jaXJjbGUoY2lyY2xlLnBvc2l0aW9uLngsIGNpcmNsZS5wb3NpdGlvbi55LCBjaXJjbGUucmFkaXVzKVxuICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgICAgICAgICB0aGlzLnJlZHJhd25Db3VudCsrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGFuZ2xlID0gcmFuZG9tKCkgKiBNYXRoLlBJICogMlxuICAgIGNvbnN0IGRpc3QgPSByYW5kb20oKSAqIHRoaXMucmFkaXVzXG4gICAgY29uc3QgcG9pbnQgPSBuZXcgUG9pbnQodGhpcy5jeCArIE1hdGguY29zKGFuZ2xlKSAqIGRpc3QsIHRoaXMuY3kgKyBNYXRoLnNpbihhbmdsZSkgKiBkaXN0KVxuXG4gICAgbGV0IG5ld1JhZGl1cyA9IDBcbiAgICBsZXQgYWxsb3dlZCA9IHRydWVcblxuICAgIGNvbnN0IGRpc3RUb0VkZ2UgPSB0aGlzLnJhZGl1cyAtIFBvaW50LmRpc3RhbmNlKG5ldyBQb2ludCh0aGlzLmN4LCB0aGlzLmN5KSwgcG9pbnQpXG4gICAgaWYgKCF0aGlzLmNpcmNsZXMubGVuZ3RoKSB7XG4gICAgICBuZXdSYWRpdXMgPSBkaXN0VG9FZGdlXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJhZGl1c2VzOiBudW1iZXJbXSA9IFtdXG4gICAgICBmb3IgKGxldCBjaXJjbGUgb2YgdGhpcy5jaXJjbGVzKSB7XG4gICAgICAgIGNvbnN0IGRpc3QgPSBQb2ludC5kaXN0YW5jZShjaXJjbGUucG9zaXRpb24sIHBvaW50KVxuICAgICAgICBpZiAoZGlzdCA8PSBjaXJjbGUucmFkaXVzKSB7XG4gICAgICAgICAgYWxsb3dlZCA9IGZhbHNlXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgICByYWRpdXNlcy5wdXNoKGRpc3QgLSBjaXJjbGUucmFkaXVzKVxuICAgICAgfVxuICAgICAgcmFkaXVzZXMuc29ydCgoYSwgYikgPT4gYSAtIGIpXG4gICAgICBuZXdSYWRpdXMgPSByYWRpdXNlc1swXVxuICAgICAgaWYgKGFsbG93ZWQgJiYgbmV3UmFkaXVzID4gZGlzdFRvRWRnZSkge1xuICAgICAgICBuZXdSYWRpdXMgPSBkaXN0VG9FZGdlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuZXdSYWRpdXMgPiB0aGlzLnZzLm1heFJhZGl1cy52YWx1ZSB8fCBuZXdSYWRpdXMgPCB0aGlzLnZzLm1pblJhZGl1cy52YWx1ZSkge1xuICAgICAgYWxsb3dlZCA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKGFsbG93ZWQgJiYgbmV3UmFkaXVzID4gMCkge1xuICAgICAgdGhpcy5jaXJjbGVzLnB1c2goe1xuICAgICAgICBwb3NpdGlvbjogcG9pbnQsXG4gICAgICAgIHJhZGl1czogbmV3UmFkaXVzLFxuICAgICAgfSlcbiAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgICB0aGlzLmN0eC5jaXJjbGUocG9pbnQueCwgcG9pbnQueSwgbmV3UmFkaXVzKVxuICAgICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi4vUG9pbnQnXG5pbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuLi9Ta2V0Y2gnXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi90b29scy9SYW5nZSdcblxuaW50ZXJmYWNlIENpcmNsZSB7XG4gIHBvc2l0aW9uOiBQb2ludFxuICByYWRpdXM6IG51bWJlclxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcmlkV2F2ZXMgZXh0ZW5kcyBTa2V0Y2gge1xuICAvLyBzdGF0aWMgZ2VuZXJhdGVHQ29kZSA9IGZhbHNlXG4gIHN0YXRpYyBlbmFibGVDdXRvdXRzID0gZmFsc2VcblxuICBlZmZlY3RpdmVXaWR0aDogbnVtYmVyXG4gIGVmZmVjdGl2ZUhlaWdodDogbnVtYmVyXG5cbiAgaW5pdCgpIHtcbiAgICAvLyB0aGlzLnZzLnNlZWQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDEwMDAsIG1pbjogMTAwMCwgbWF4OiA1MDAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5jb2xzID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAzLCBtaW46IDEsIG1heDogMTAsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLnJvd3MgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDQsIG1pbjogMSwgbWF4OiAxMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMuZ2FwID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAyLCBtaW46IDAsIG1heDogMjUsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLm91dGVyR2FwID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA1LCBtaW46IDAsIG1heDogMjUsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgfVxuXG4gIGluaXREcmF3KCk6IHZvaWQge1xuICAgIC8vIHNlZWRSYW5kb20odGhpcy52cy5zZWVkLnZhbHVlKVxuICAgIGNvbnN0IGNvbHMgPSB0aGlzLnZzLmNvbHMudmFsdWVcbiAgICBjb25zdCByb3dzID0gdGhpcy52cy5yb3dzLnZhbHVlXG4gICAgY29uc3QgZ2FwID0gdGhpcy52cy5nYXAudmFsdWVcbiAgICBjb25zdCBvdXRlckdhcCA9IHRoaXMudnMub3V0ZXJHYXAudmFsdWVcbiAgICB0aGlzLmVmZmVjdGl2ZVdpZHRoID0gdGhpcy5jdyAtIG91dGVyR2FwICogMlxuICAgIHRoaXMuZWZmZWN0aXZlSGVpZ2h0ID0gdGhpcy5jaCAtIG91dGVyR2FwICogMlxuICAgIGNvbnN0IGJveFdpZHRoID0gKHRoaXMuZWZmZWN0aXZlV2lkdGggLSBnYXAgKiAoY29scyAtIDEpKSAvIGNvbHNcbiAgICBsZXQgeCA9IG91dGVyR2FwXG4gICAgbGV0IHkgPSBvdXRlckdhcFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICB4ID0gb3V0ZXJHYXBcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sczsgaisrKSB7XG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgICAgIHRoaXMuY3R4LnJlY3QoeCwgeSwgYm94V2lkdGgsIGJveFdpZHRoKVxuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKVxuICAgICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuICAgICAgICB4ICs9IGJveFdpZHRoICsgZ2FwXG4gICAgICB9XG4gICAgICB5ICs9IGJveFdpZHRoICsgZ2FwXG4gICAgfVxuICB9XG5cbiAgZHJhdyhpbmNyZW1lbnQ6IG51bWJlcik6IHZvaWQge31cbn1cbiIsImltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4uL1NrZXRjaCdcbmltcG9ydCB7IHBlcmxpbjIsIHNlZWROb2lzZSB9IGZyb20gJy4uL3V0aWxzL25vaXNlJ1xuaW1wb3J0IHsgc2VlZFJhbmRvbSB9IGZyb20gJy4uL3V0aWxzL3JhbmRvbSdcbmltcG9ydCBSYW5nZSBmcm9tICcuL3Rvb2xzL1JhbmdlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJsaW5HcmlkIGV4dGVuZHMgU2tldGNoIHtcbiAgLy8gc3RhdGljIGdlbmVyYXRlR0NvZGUgPSBmYWxzZVxuICBzdGF0aWMgZW5hYmxlQ3V0b3V0cyA9IGZhbHNlXG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnZzLnNwZWVkVXAgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDEwLCBtaW46IDEsIG1heDogMTAwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5zZWVkID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxMDAwLCBtaW46IDEwMDAsIG1heDogNTAwMCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMuY29scyA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogOTAsIG1pbjogMSwgbWF4OiAyMDAsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLnJvd3MgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDkwLCBtaW46IDEsIG1heDogMjAwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5zaGFwZSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMSwgbWluOiAwLCBtYXg6IDEsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLnNpemUgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDE4LCBtaW46IDAuMSwgbWF4OiA2NCwgc3RlcDogMC4xIH0pXG4gICAgdGhpcy52cy5wZXJsaW5EaXYgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDI1LCBtaW46IDEsIG1heDogMTAwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5vZmZzZXRYID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IC0xMDAsIG1heDogMTAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5vZmZzZXRZID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IC0xMDAsIG1heDogMTAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5vdXRlckdhcCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMTIsIG1pbjogMCwgbWF4OiAyNSwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICB9XG5cbiAgcHJpdmF0ZSBkcmF3Q291bnQ6IG51bWJlciA9IDBcbiAgcHJpdmF0ZSBtYXhEcmF3Q291bnQ6IG51bWJlciA9IDBcbiAgcHJpdmF0ZSBlZmZlY3RpdmVXaWR0aDogbnVtYmVyXG4gIHByaXZhdGUgZWZmZWN0aXZlSGVpZ2h0OiBudW1iZXJcblxuICBpbml0RHJhdygpOiB2b2lkIHtcbiAgICBzZWVkUmFuZG9tKHRoaXMudnMuc2VlZC52YWx1ZSlcbiAgICBzZWVkTm9pc2UodGhpcy52cy5zZWVkLnZhbHVlKVxuICAgIGNvbnN0IGNvbHMgPSB0aGlzLnZzLmNvbHMudmFsdWVcbiAgICBjb25zdCByb3dzID0gdGhpcy52cy5yb3dzLnZhbHVlXG4gICAgY29uc3Qgb3V0ZXJHYXAgPSB0aGlzLnZzLm91dGVyR2FwLnZhbHVlXG4gICAgdGhpcy5lZmZlY3RpdmVXaWR0aCA9IHRoaXMuY3cgLSBvdXRlckdhcCAqIDJcbiAgICB0aGlzLmVmZmVjdGl2ZUhlaWdodCA9IHRoaXMuY2ggLSBvdXRlckdhcCAqIDJcbiAgICB0aGlzLmRyYXdDb3VudCA9IDBcbiAgICB0aGlzLm1heERyYXdDb3VudCA9IHJvd3MgKiBjb2xzXG4gIH1cblxuICBkcmF3KGluY3JlbWVudDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZHJhd0NvdW50ID49IHRoaXMubWF4RHJhd0NvdW50KSByZXR1cm5cblxuICAgIGxldCBzcGVlZFVwID0gdGhpcy52cy5zcGVlZFVwLnZhbHVlXG4gICAgY29uc3QgY29scyA9IHRoaXMudnMuY29scy52YWx1ZVxuICAgIGNvbnN0IHJvd3MgPSB0aGlzLnZzLnJvd3MudmFsdWVcbiAgICBjb25zdCBvdXRlckdhcCA9IHRoaXMudnMub3V0ZXJHYXAudmFsdWVcbiAgICBjb25zdCBzaXplID0gdGhpcy52cy5zaXplLnZhbHVlXG4gICAgY29uc3Qgc2hhcGUgPSB0aGlzLnZzLnNoYXBlLnZhbHVlXG4gICAgY29uc3QgcGVybGluRGl2ID0gdGhpcy52cy5wZXJsaW5EaXYudmFsdWVcbiAgICBjb25zdCBvZmZzZXRYID0gdGhpcy52cy5vZmZzZXRYLnZhbHVlXG4gICAgY29uc3Qgb2Zmc2V0WSA9IHRoaXMudnMub2Zmc2V0WS52YWx1ZVxuXG4gICAgY29uc3QgY29sV2lkdGggPSB0aGlzLmVmZmVjdGl2ZVdpZHRoIC8gY29sc1xuICAgIGNvbnN0IHJvd0hlaWdodCA9IHRoaXMuZWZmZWN0aXZlSGVpZ2h0IC8gcm93c1xuXG4gICAgaWYgKHNoYXBlID09PSAwKSBzcGVlZFVwID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihzcGVlZFVwIC8gNCkpXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudnMuc3BlZWRVcC52YWx1ZTsgaSsrKSB7XG4gICAgICBjb25zdCByZWFsQ291bnQgPSB0aGlzLmRyYXdDb3VudCArIGlcbiAgICAgIGlmIChyZWFsQ291bnQgPj0gdGhpcy5tYXhEcmF3Q291bnQpIGJyZWFrXG5cbiAgICAgIGNvbnN0IHggPSByZWFsQ291bnQgJSBjb2xzXG4gICAgICBjb25zdCB5ID0gTWF0aC5mbG9vcihyZWFsQ291bnQgLyBjb2xzKVxuXG4gICAgICBjb25zdCB4UG9zID0gb3V0ZXJHYXAgKyB4ICogY29sV2lkdGhcbiAgICAgIGNvbnN0IHlQb3MgPSBvdXRlckdhcCArIHkgKiByb3dIZWlnaHRcbiAgICAgIGNvbnN0IHJhZGl1cyA9IE1hdGguYWJzKHBlcmxpbjIoKHggKyBvZmZzZXRYKSAvIHBlcmxpbkRpdiwgKHkgKyBvZmZzZXRZKSAvIHBlcmxpbkRpdikpICogc2l6ZVxuXG4gICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKVxuICAgICAgaWYgKHNoYXBlID09PSAwKSB0aGlzLmN0eC5jaXJjbGUoeFBvcywgeVBvcywgcmFkaXVzKVxuICAgICAgZWxzZSBpZiAoc2hhcGUgPT09IDEpIHRoaXMuY3R4LnJlY3QoeFBvcyAtIHJhZGl1cyAvIDIsIHlQb3MgLSByYWRpdXMgLyAyLCByYWRpdXMsIHJhZGl1cylcbiAgICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuICAgIH1cbiAgICB0aGlzLmRyYXdDb3VudCArPSB0aGlzLnZzLnNwZWVkVXAudmFsdWVcbiAgfVxufVxuIiwiaW1wb3J0IHsgU2tldGNoIH0gZnJvbSAnLi4vU2tldGNoJ1xuaW1wb3J0IHsgcGVybGluMiwgc2VlZE5vaXNlIH0gZnJvbSAnLi4vdXRpbHMvbm9pc2UnXG5pbXBvcnQgeyBzZWVkUmFuZG9tIH0gZnJvbSAnLi4vdXRpbHMvcmFuZG9tJ1xuaW1wb3J0IFJhbmdlIGZyb20gJy4vdG9vbHMvUmFuZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlcmxpbkxpbmVzIGV4dGVuZHMgU2tldGNoIHtcbiAgLy8gc3RhdGljIGdlbmVyYXRlR0NvZGUgPSBmYWxzZVxuICBzdGF0aWMgZW5hYmxlQ3V0b3V0cyA9IGZhbHNlXG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnZzLnNwZWVkVXAgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDEsIG1pbjogMSwgbWF4OiAxMDAsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLnNlZWQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDkyNzUsIG1pbjogMTAwMCwgbWF4OiA1MDAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5jb2xzID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxNTAsIG1pbjogMSwgbWF4OiAzMDAsIHN0ZXA6IDEgfSlcbiAgICB0aGlzLnZzLnJvd3MgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDEyMCwgbWluOiAxLCBtYXg6IDMwMCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMuc2l6ZSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMC41LCBtaW46IDAuMSwgbWF4OiA4LCBzdGVwOiAwLjEgfSlcbiAgICB0aGlzLnZzLnBlcmxpbkRpdlggPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDc1LCBtaW46IDEsIG1heDogMTAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5wZXJsaW5EaXZZID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA3NSwgbWluOiAxLCBtYXg6IDEwMCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMucGVybGluT2Zmc2V0WCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMCwgbWluOiAtMTAwLCBtYXg6IDEwMCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMucGVybGluT2Zmc2V0WSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMCwgbWluOiAtMTAwLCBtYXg6IDEwMCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMuZHJhd09mZnNldFN0YXJ0ID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxLCBtaW46IC01LCBtYXg6IDUsIHN0ZXA6IDAuMSB9KVxuICAgIHRoaXMudnMuZHJhd09mZnNldEVuZCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogLTQuNSwgbWluOiAtNSwgbWF4OiA1LCBzdGVwOiAwLjEgfSlcbiAgICB0aGlzLnZzLm91dGVyR2FwID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxOCwgbWluOiAwLCBtYXg6IDI1LCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gIH1cblxuICBwcml2YXRlIGRyYXdDb3VudDogbnVtYmVyID0gMFxuICBwcml2YXRlIG1heERyYXdDb3VudDogbnVtYmVyID0gMFxuICBwcml2YXRlIGVmZmVjdGl2ZVdpZHRoOiBudW1iZXJcbiAgcHJpdmF0ZSBlZmZlY3RpdmVIZWlnaHQ6IG51bWJlclxuXG4gIGluaXREcmF3KCk6IHZvaWQge1xuICAgIHNlZWRSYW5kb20odGhpcy52cy5zZWVkLnZhbHVlKVxuICAgIHNlZWROb2lzZSh0aGlzLnZzLnNlZWQudmFsdWUpXG4gICAgY29uc3QgY29scyA9IHRoaXMudnMuY29scy52YWx1ZVxuICAgIGNvbnN0IHJvd3MgPSB0aGlzLnZzLnJvd3MudmFsdWVcbiAgICBjb25zdCBvdXRlckdhcCA9IHRoaXMudnMub3V0ZXJHYXAudmFsdWVcbiAgICB0aGlzLmVmZmVjdGl2ZVdpZHRoID0gdGhpcy5jdyAtIG91dGVyR2FwICogMlxuICAgIHRoaXMuZWZmZWN0aXZlSGVpZ2h0ID0gdGhpcy5jaCAtIG91dGVyR2FwICogMlxuICAgIHRoaXMuZHJhd0NvdW50ID0gMFxuICAgIHRoaXMubWF4RHJhd0NvdW50ID0gcm93cyAqIGNvbHNcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kcmF3Q291bnQgPj0gdGhpcy5tYXhEcmF3Q291bnQpIHJldHVyblxuXG4gICAgY29uc3QgY29scyA9IHRoaXMudnMuY29scy52YWx1ZVxuICAgIGNvbnN0IHJvd3MgPSB0aGlzLnZzLnJvd3MudmFsdWVcbiAgICBjb25zdCBvdXRlckdhcCA9IHRoaXMudnMub3V0ZXJHYXAudmFsdWVcbiAgICBjb25zdCBzaXplID0gdGhpcy52cy5zaXplLnZhbHVlXG4gICAgY29uc3QgcGVybGluRGl2WCA9IHRoaXMudnMucGVybGluRGl2WC52YWx1ZVxuICAgIGNvbnN0IHBlcmxpbkRpdlkgPSB0aGlzLnZzLnBlcmxpbkRpdlkudmFsdWVcbiAgICBjb25zdCBwZXJsaW5PZmZzZXRYID0gdGhpcy52cy5wZXJsaW5PZmZzZXRYLnZhbHVlXG4gICAgY29uc3QgcGVybGluT2Zmc2V0WSA9IHRoaXMudnMucGVybGluT2Zmc2V0WS52YWx1ZVxuICAgIGNvbnN0IGRyYXdPZmZzZXRTdGFydCA9IHRoaXMudnMuZHJhd09mZnNldFN0YXJ0LnZhbHVlXG4gICAgY29uc3QgZHJhd09mZnNldEVuZCA9IHRoaXMudnMuZHJhd09mZnNldEVuZC52YWx1ZVxuXG4gICAgY29uc3Qgc3BhY2VYID0gdGhpcy5lZmZlY3RpdmVXaWR0aCAvIGNvbHNcbiAgICBjb25zdCBzcGFjZVkgPSB0aGlzLmVmZmVjdGl2ZUhlaWdodCAvIHJvd3NcblxuICAgIGNvbnN0IGFkanVzdGVkU2l6ZSA9IHNpemUgLyAoMSArICh0aGlzLnZzLnNpemUubWF4IC0gKGNvbHMgKyByb3dzKSAvIDIpIC8gNTAwKVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZzLnNwZWVkVXAudmFsdWU7IGkrKykge1xuICAgICAgY29uc3QgcmVhbENvdW50ID0gdGhpcy5kcmF3Q291bnQgKyBpXG4gICAgICBpZiAocmVhbENvdW50ID49IHRoaXMubWF4RHJhd0NvdW50KSBicmVha1xuXG4gICAgICBjb25zdCB4ID0gcmVhbENvdW50ICUgY29sc1xuICAgICAgY29uc3QgeSA9IE1hdGguZmxvb3IocmVhbENvdW50IC8gY29scylcblxuICAgICAgY29uc3QgeFBvcyA9IG91dGVyR2FwICsgeCAqIHNwYWNlWFxuICAgICAgY29uc3QgeVBvcyA9IG91dGVyR2FwICsgeSAqIHNwYWNlWVxuXG4gICAgICBjb25zdCB0aGV0YSA9IHBlcmxpbjIoKHggKyBwZXJsaW5PZmZzZXRYKSAvIHBlcmxpbkRpdlgsICh5ICsgcGVybGluT2Zmc2V0WSkgLyBwZXJsaW5EaXZZKSAqIE1hdGguUEkgKiAyXG4gICAgICBjb25zdCBwdDEgPSB7XG4gICAgICAgIHg6IHhQb3MgKyBNYXRoLmNvcyh0aGV0YSkgKiAoYWRqdXN0ZWRTaXplICsgZHJhd09mZnNldFN0YXJ0KSxcbiAgICAgICAgeTogeVBvcyArIE1hdGguc2luKHRoZXRhKSAqIChhZGp1c3RlZFNpemUgKyBkcmF3T2Zmc2V0U3RhcnQpLFxuICAgICAgfVxuICAgICAgY29uc3QgcHQyID0ge1xuICAgICAgICB4OiB4UG9zICsgTWF0aC5jb3ModGhldGEgKyBNYXRoLlBJKSAqIChhZGp1c3RlZFNpemUgKyBkcmF3T2Zmc2V0RW5kKSxcbiAgICAgICAgeTogeVBvcyArIE1hdGguc2luKHRoZXRhICsgTWF0aC5QSSkgKiAoYWRqdXN0ZWRTaXplICsgZHJhd09mZnNldEVuZCksXG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG5cbiAgICAgIC8vIGFsdGVybmF0ZSBzbyB0aGUgcGVuY2lsIGhhcyBsZXNzIHNwYWNlIHRvIG1vdmVcbiAgICAgIGlmIChyZWFsQ291bnQgJSAyID09PSAwKSB7XG4gICAgICAgIHRoaXMuY3R4Lm1vdmVUbyhwdDEueCwgcHQxLnkpXG4gICAgICAgIHRoaXMuY3R4LmxpbmVUbyhwdDIueCwgcHQyLnkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmN0eC5tb3ZlVG8ocHQyLngsIHB0Mi55KVxuICAgICAgICB0aGlzLmN0eC5saW5lVG8ocHQxLngsIHB0MS55KVxuICAgICAgfVxuXG4gICAgICB0aGlzLmN0eC5zdHJva2UoKVxuICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgICB9XG4gICAgdGhpcy5kcmF3Q291bnQgKz0gdGhpcy52cy5zcGVlZFVwLnZhbHVlXG4gIH1cbn1cbiIsImltcG9ydCBQb2ludCBmcm9tICcuLi9Qb2ludCdcbmltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4uL1NrZXRjaCdcbmltcG9ydCB7IHJhbmRGbG9hdCwgcmFuZEZsb2F0UmFuZ2UgfSBmcm9tICcuLi91dGlscy9udW1iZXJVdGlscydcbmltcG9ydCB7IHJhbmRvbSwgc2VlZFJhbmRvbSB9IGZyb20gJy4uL3V0aWxzL3JhbmRvbSdcbmltcG9ydCBSYW5nZSBmcm9tICcuL3Rvb2xzL1JhbmdlJ1xuXG5pbnRlcmZhY2UgU3RlbSB7XG4gIHBvc2l0aW9uOiBQb2ludFxuICBhbmdsZTogbnVtYmVyXG4gIGxlbmd0aDogbnVtYmVyXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyZWUgZXh0ZW5kcyBTa2V0Y2gge1xuICAvLyBzdGF0aWMgZ2VuZXJhdGVHQ29kZSA9IGZhbHNlXG4gIHN0YXRpYyBlbmFibGVDdXRvdXRzID0gZmFsc2VcblxuICBpbml0KCkge1xuICAgIC8vIHRoaXMudnMuc3BlZWRVcCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMSwgbWluOiAxLCBtYXg6IDEwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMuc2VlZCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMjIyMiwgbWluOiAxMDAwLCBtYXg6IDUwMDAsIHN0ZXA6IDEgfSlcbiAgICB0aGlzLnZzLmluaXRCcmFuY2hMZW5ndGggPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDgsIG1pbjogNSwgbWF4OiAxMCwgc3RlcDogMC4xIH0pXG4gICAgdGhpcy52cy5icmFuY2hMZW5ndGhGYWxsb2ZmID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjgzLCBtaW46IDAuNCwgbWF4OiAwLjksIHN0ZXA6IDAuMDA1IH0pXG4gICAgdGhpcy52cy5zcGxpdFByb2JhYmlsaXR5ID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjYsIG1pbjogMCwgbWF4OiAxLCBzdGVwOiAwLjAwNSB9KVxuICAgIHRoaXMudnMucHJ1bmVQcm9iYWJpbGl0eSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMC45NSwgbWluOiAwLCBtYXg6IDEsIHN0ZXA6IDAuMDUgfSlcbiAgICB0aGlzLnZzLmJsb29tUHJvYmFiaWxpdHkgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAuNiwgbWluOiAwLCBtYXg6IDEsIHN0ZXA6IDAuMDUgfSlcbiAgICB0aGlzLnZzLmJsb29tU2l6ZSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMC4zLCBtaW46IDAuMiwgbWF4OiAxLjIsIHN0ZXA6IDAuMSB9KVxuICAgIHRoaXMudnMuc3BsaXRBbmdsZVJhbmdlID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjQ0LCBtaW46IDAsIG1heDogTWF0aC5QSSAvIDIsIHN0ZXA6IE1hdGguUEkgLyAyNTYgfSlcbiAgICB0aGlzLnZzLnNwbGl0QW5nbGVCcmFuY2hMZXZlbE11bHRpID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjEsIG1pbjogLTEsIG1heDogMSwgc3RlcDogMC4wNSB9KVxuICAgIHRoaXMudnMuc3BsaXRBbmdsZU1pblBlcmNlbnQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAuNSwgbWluOiAwLCBtYXg6IDEsIHN0ZXA6IDAuMDUgfSlcbiAgICB0aGlzLnZzLmNoYW9zRmFjdG9yID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjg1LCBtaW46IDAsIG1heDogMiwgc3RlcDogMC4wMSB9KVxuICAgIHRoaXMudnMuc3BsaXRDb3VudCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMiwgbWluOiAyLCBtYXg6IDUsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLm1heEJyYW5jaExldmVscyA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMTQsIG1pbjogMSwgbWF4OiAyNCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICB9XG5cbiAgcHJpdmF0ZSBicmFuY2hMZXZlbDogbnVtYmVyID0gMFxuICBwcml2YXRlIGRyYXduQ3VycmVudFN0ZW1zOiBudW1iZXIgPSAwXG4gIHByaXZhdGUgY3VycmVudFN0ZW1zOiBTdGVtW10gPSBbXVxuICBwcml2YXRlIG5leHRTdGVtczogU3RlbVtdID0gW11cblxuICBpbml0RHJhdygpOiB2b2lkIHtcbiAgICBzZWVkUmFuZG9tKHRoaXMudnMuc2VlZC52YWx1ZSlcblxuICAgIHRoaXMuYnJhbmNoTGV2ZWwgPSAwXG4gICAgdGhpcy5kcmF3bkN1cnJlbnRTdGVtcyA9IDBcbiAgICB0aGlzLmN1cnJlbnRTdGVtcyA9IFtdXG4gICAgdGhpcy5uZXh0U3RlbXMgPSBbXVxuXG4gICAgY29uc3QgYnJhbmNoTGVuZ3RoRmFsbG9mZiA9IHRoaXMudnMuYnJhbmNoTGVuZ3RoRmFsbG9mZi52YWx1ZVxuICAgIGNvbnN0IGluaXRCcmFuY2hMZW5ndGggPSB0aGlzLnZzLmluaXRCcmFuY2hMZW5ndGgudmFsdWVcblxuICAgIGNvbnN0IGxlbmd0aCA9IGluaXRCcmFuY2hMZW5ndGggLyBicmFuY2hMZW5ndGhGYWxsb2ZmXG4gICAgY29uc3QgYW5nbGUgPSAtTWF0aC5QSSAvIDJcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZHJhd0JyYW5jaChuZXcgUG9pbnQodGhpcy5jeCwgdGhpcy5jaCAtIDEwKSwgYW5nbGUsIGxlbmd0aClcbiAgICB0aGlzLmN1cnJlbnRTdGVtcy5wdXNoKHsgcG9zaXRpb24sIGFuZ2xlLCBsZW5ndGggfSlcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5icmFuY2hMZXZlbCA+IHRoaXMudnMubWF4QnJhbmNoTGV2ZWxzLnZhbHVlKSByZXR1cm5cbiAgICBpZiAodGhpcy5kcmF3bkN1cnJlbnRTdGVtcyA+PSB0aGlzLmN1cnJlbnRTdGVtcy5sZW5ndGgpIHtcbiAgICAgIC8vIHRpbWUgdG8gY2FsY3VsYXRlIG5ldyBzdGVtc1xuICAgICAgdGhpcy5jdXJyZW50U3RlbXMgPSBbLi4udGhpcy5uZXh0U3RlbXNdXG4gICAgICB0aGlzLm5leHRTdGVtcyA9IFtdXG4gICAgICB0aGlzLmJyYW5jaExldmVsKytcbiAgICAgIHRoaXMuZHJhd25DdXJyZW50U3RlbXMgPSAwXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRyYXcgY3VycmVudCBzdGVtc1xuICAgICAgY29uc3Qgc3RlbSA9IHRoaXMuY3VycmVudFN0ZW1zW3RoaXMuZHJhd25DdXJyZW50U3RlbXNdXG5cbiAgICAgIGNvbnN0IGJyYW5jaExlbmd0aEZhbGxvZmYgPSB0aGlzLnZzLmJyYW5jaExlbmd0aEZhbGxvZmYudmFsdWVcbiAgICAgIGNvbnN0IHNwbGl0UHJvYmFiaWxpdHkgPSB0aGlzLmJyYW5jaExldmVsIDwgMyA/IDEgOiB0aGlzLnZzLnNwbGl0UHJvYmFiaWxpdHkudmFsdWVcbiAgICAgIGNvbnN0IHNwbGl0QW5nbGVSYW5nZSA9IHRoaXMudnMuc3BsaXRBbmdsZVJhbmdlLnZhbHVlXG4gICAgICBjb25zdCBzcGxpdEFuZ2xlQnJhbmNoTGV2ZWxNdWx0aSA9IHRoaXMudnMuc3BsaXRBbmdsZUJyYW5jaExldmVsTXVsdGkudmFsdWVcbiAgICAgIGNvbnN0IHNwbGl0QW5nbGVNaW5QZXJjZW50ID0gdGhpcy52cy5zcGxpdEFuZ2xlTWluUGVyY2VudC52YWx1ZVxuICAgICAgY29uc3QgcHJ1bmVQcm9iYWJpbGl0eSA9IHRoaXMudnMucHJ1bmVQcm9iYWJpbGl0eS52YWx1ZVxuICAgICAgY29uc3QgYmxvb21Qcm9iYWJpbGl0eSA9IHRoaXMudnMuYmxvb21Qcm9iYWJpbGl0eS52YWx1ZVxuICAgICAgY29uc3QgY2hhb3NGYWN0b3IgPSB0aGlzLnZzLmNoYW9zRmFjdG9yLnZhbHVlXG5cbiAgICAgIGNvbnN0IGRvU3BsaXQgPSByYW5kb20oKSA8PSBzcGxpdFByb2JhYmlsaXR5XG5cbiAgICAgIGlmICghZG9TcGxpdCkge1xuICAgICAgICAvLyBkcmF3IGJyYW5jaFxuICAgICAgICBjb25zdCBhbmdsZSA9IHN0ZW0uYW5nbGUgKyByYW5kRmxvYXQoKE1hdGguUEkgKiBjaGFvc0ZhY3RvcikgLyAxMClcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gc3RlbS5sZW5ndGggKiBicmFuY2hMZW5ndGhGYWxsb2ZmICogKDEgKyByYW5kRmxvYXQoY2hhb3NGYWN0b3IgLyA4KSlcbiAgICAgICAgY29uc3QgZW5kUG9pbnQgPSB0aGlzLmRyYXdCcmFuY2goc3RlbS5wb3NpdGlvbiwgYW5nbGUsIGxlbmd0aClcbiAgICAgICAgaWYgKHRoaXMuYnJhbmNoTGV2ZWwgIT09IHRoaXMudnMubWF4QnJhbmNoTGV2ZWxzLnZhbHVlICYmIHJhbmRvbSgpID4gcHJ1bmVQcm9iYWJpbGl0eSkge1xuICAgICAgICAgIHRoaXMubmV4dFN0ZW1zLnB1c2goe1xuICAgICAgICAgICAgcG9zaXRpb246IGVuZFBvaW50LFxuICAgICAgICAgICAgYW5nbGUsXG4gICAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIGlmIChyYW5kb20oKSA8IGJsb29tUHJvYmFiaWxpdHkpIHtcbiAgICAgICAgICB0aGlzLmRyYXdCbG9vbShlbmRQb2ludCwgYW5nbGUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNwbGl0SW50byA9IHRoaXMudnMuc3BsaXRDb3VudC52YWx1ZVxuICAgICAgICBjb25zdCBhZGp1c3RlZFNwbGl0QW5nbGVSYW5nZSA9IHNwbGl0QW5nbGVSYW5nZSAqICgxICsgKHNwbGl0QW5nbGVCcmFuY2hMZXZlbE11bHRpICogdGhpcy5icmFuY2hMZXZlbCkgLyA0KVxuICAgICAgICBjb25zdCBzcGxpdEFuZ2xlU3BhbiA9XG4gICAgICAgICAgYWRqdXN0ZWRTcGxpdEFuZ2xlUmFuZ2UgKiBzcGxpdEFuZ2xlTWluUGVyY2VudCArXG4gICAgICAgICAgcmFuZEZsb2F0UmFuZ2UoYWRqdXN0ZWRTcGxpdEFuZ2xlUmFuZ2UgKiAoMSAtIHNwbGl0QW5nbGVNaW5QZXJjZW50KSkgK1xuICAgICAgICAgIChyYW5kRmxvYXQoY2hhb3NGYWN0b3IpICogTWF0aC5QSSkgLyA4XG5cbiAgICAgICAgY29uc3Qgc3BsaXRTbGljZSA9IChzcGxpdEFuZ2xlU3BhbiAqIDIpIC8gc3BsaXRJbnRvXG5cbiAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBzcGxpdEludG87IHMrKykge1xuICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHN0ZW0ubGVuZ3RoICogYnJhbmNoTGVuZ3RoRmFsbG9mZiAqICgxICsgcmFuZEZsb2F0KGNoYW9zRmFjdG9yIC8gOCkpXG4gICAgICAgICAgY29uc3QgYW5nbGUgPSBzdGVtLmFuZ2xlIC0gc3BsaXRBbmdsZVNwYW4gLyAyICsgc3BsaXRTbGljZSAqIHMgKyByYW5kRmxvYXQoKE1hdGguUEkgKiBjaGFvc0ZhY3RvcikgLyAxMClcbiAgICAgICAgICBjb25zdCBlbmRQb2ludCA9IHRoaXMuZHJhd0JyYW5jaChzdGVtLnBvc2l0aW9uLCBhbmdsZSwgbGVuZ3RoKVxuICAgICAgICAgIHRoaXMubmV4dFN0ZW1zLnB1c2goe1xuICAgICAgICAgICAgcG9zaXRpb246IGVuZFBvaW50LFxuICAgICAgICAgICAgYW5nbGUsXG4gICAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmRyYXduQ3VycmVudFN0ZW1zKytcbiAgICB9XG4gIH1cblxuICBkcmF3QnJhbmNoKHBvc2l0aW9uOiBQb2ludCwgYW5nbGU6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpOiBQb2ludCB7XG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICB0aGlzLmN0eC5tb3ZlVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSlcbiAgICBjb25zdCBlbmRQb2ludCA9IHBvc2l0aW9uLmNsb25lKCkuYWRkKG5ldyBQb2ludChNYXRoLmNvcyhhbmdsZSkgKiBsZW5ndGgsIE1hdGguc2luKGFuZ2xlKSAqIGxlbmd0aCkpXG4gICAgdGhpcy5jdHgubGluZVRvKGVuZFBvaW50LngsIGVuZFBvaW50LnkpXG4gICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuICAgIHJldHVybiBlbmRQb2ludFxuICB9XG5cbiAgZHJhd0Jsb29tKHBvc2l0aW9uOiBQb2ludCwgYW5nbGU6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGJsb29tU2l6ZSA9IHRoaXMudnMuYmxvb21TaXplLnZhbHVlXG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICAvLyBjb25zdCBvZmZzZXRBbmdsZSA9ICg2MCAvIDM2MCkgKiBNYXRoLlBJXG4gICAgLy8gdGhpcy5jdHgubW92ZVRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpXG4gICAgLy8gdGhpcy5jdHgubGluZVRvKHBvc2l0aW9uLnggKyBNYXRoLmNvcyhhbmdsZSAtIG9mZnNldEFuZ2xlKSAqIGJsb29tU2l6ZSwgcG9zaXRpb24ueSArIE1hdGguc2luKGFuZ2xlIC0gb2Zmc2V0QW5nbGUpICogYmxvb21TaXplKVxuICAgIC8vIHRoaXMuY3R4LmxpbmVUbyhwb3NpdGlvbi54ICsgTWF0aC5jb3MoYW5nbGUgKyBvZmZzZXRBbmdsZSkgKiBibG9vbVNpemUsIHBvc2l0aW9uLnkgKyBNYXRoLnNpbihhbmdsZSArIG9mZnNldEFuZ2xlKSAqIGJsb29tU2l6ZSlcbiAgICAvLyB0aGlzLmN0eC5saW5lVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSlcbiAgICB0aGlzLmN0eC5jaXJjbGUocG9zaXRpb24ueCArIE1hdGguY29zKGFuZ2xlKSAqIGJsb29tU2l6ZSwgcG9zaXRpb24ueSArIE1hdGguc2luKGFuZ2xlKSAqIGJsb29tU2l6ZSwgYmxvb21TaXplKVxuICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgfVxufVxuIiwiaW1wb3J0IHsgU2tldGNoIH0gZnJvbSAnLi4vU2tldGNoJ1xuaW1wb3J0IHsgbm9ybWFsaXplUmFkaWFuLCByYW5kSW50LCBzZWdtZW50VmFsdWUgfSBmcm9tICcuLi91dGlscy9udW1iZXJVdGlscydcbmltcG9ydCB7IHNlZWRSYW5kb20gfSBmcm9tICcuLi91dGlscy9yYW5kb20nXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi90b29scy9SYW5nZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9uZGF5TWF6ZSBleHRlbmRzIFNrZXRjaCB7XG4gIC8vIHN0YXRpYyBnZW5lcmF0ZUdDb2RlID0gZmFsc2VcbiAgc3RhdGljIGVuYWJsZUN1dG91dHMgPSBmYWxzZVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy52cy5zcGVlZFVwID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxLCBtaW46IDEsIG1heDogMTAwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5zZWVkID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAyMjIyLCBtaW46IDEwMDAsIG1heDogNTAwMCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMuZ3JpZFNpemUgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDIsIG1pbjogMSwgbWF4OiA4LCBzdGVwOiAwLjI1IH0pXG4gICAgdGhpcy52cy5yYWRpYWxEaXZzID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAyLCBtaW46IDEsIG1heDogNCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMub2Zmc2V0QW5nID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IDAsIG1heDogMzYwLCBzdGVwOiAxNSB9KVxuICB9XG5cbiAgcHJpdmF0ZSByb3dzOiBudW1iZXJcbiAgcHJpdmF0ZSBjb2xzOiBudW1iZXJcbiAgcHJpdmF0ZSBpOiBudW1iZXJcbiAgLy8gcHJpdmF0ZSBzZWdDYWNoZTogbnVtYmVyW11cblxuICBpbml0RHJhdygpOiB2b2lkIHtcbiAgICBzZWVkUmFuZG9tKHRoaXMudnMuc2VlZC52YWx1ZSlcbiAgICB0aGlzLmkgPSAwXG4gICAgdGhpcy5yb3dzID0gTWF0aC5jZWlsKHRoaXMuY3cgLyB0aGlzLnZzLmdyaWRTaXplLnZhbHVlKSArIDFcbiAgICB0aGlzLmNvbHMgPSBNYXRoLmNlaWwodGhpcy5jaCAvIHRoaXMudnMuZ3JpZFNpemUudmFsdWUpICsgMVxuICAgIHJldHVyblxuICAgIGlmICh0aGlzLmN0eC5jdHgpIHtcbiAgICAgIHRoaXMuY3R4LmN0eC5zdHJva2VTdHlsZSA9ICcjZGRkJ1xuICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCB0aGlzLnJvd3M7IHIrKykge1xuICAgICAgICB0aGlzLmN0eC5jdHgubW92ZVRvKDAsIHIgKiB0aGlzLnZzLmdyaWRTaXplLnZhbHVlKVxuICAgICAgICB0aGlzLmN0eC5jdHgubGluZVRvKHRoaXMuY3csIHIgKiB0aGlzLnZzLmdyaWRTaXplLnZhbHVlKVxuICAgICAgICB0aGlzLmN0eC5jdHguc3Ryb2tlKClcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jb2xzOyBjKyspIHtcbiAgICAgICAgdGhpcy5jdHguY3R4Lm1vdmVUbyhjICogdGhpcy52cy5ncmlkU2l6ZS52YWx1ZSwgMClcbiAgICAgICAgdGhpcy5jdHguY3R4LmxpbmVUbyhjICogdGhpcy52cy5ncmlkU2l6ZS52YWx1ZSwgdGhpcy5jaClcbiAgICAgICAgdGhpcy5jdHguY3R4LnN0cm9rZSgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZHJhdyhpbmNyZW1lbnQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLmkgPj0gdGhpcy5yb3dzICogdGhpcy5jb2xzKSByZXR1cm5cbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IHRoaXMudnMuc3BlZWRVcC52YWx1ZTsgbisrKSB7XG4gICAgICBpZiAodGhpcy5pID49IHRoaXMucm93cyAqIHRoaXMuY29scykgYnJlYWtcblxuICAgICAgY29uc3QgeEkgPSB0aGlzLmkgJSB0aGlzLnJvd3NcbiAgICAgIGNvbnN0IHlJID0gTWF0aC5mbG9vcih0aGlzLmkgLyB0aGlzLnJvd3MpXG4gICAgICBjb25zdCB4ID0geEkgKiB0aGlzLnZzLmdyaWRTaXplLnZhbHVlXG4gICAgICBjb25zdCB5ID0geUkgKiB0aGlzLnZzLmdyaWRTaXplLnZhbHVlXG5cbiAgICAgIGNvbnN0IG9mZnNldEFuZ2xlID0gc2VnbWVudFZhbHVlKHRoaXMudnMub2Zmc2V0QW5nLnZhbHVlLCB0aGlzLnZzLm9mZnNldEFuZy5tYXgsIE1hdGguUEkgKiAyKVxuICAgICAgY29uc3Qgc2VnSW5kZXggPSByYW5kSW50KHRoaXMudnMucmFkaWFsRGl2cy52YWx1ZSlcbiAgICAgIGxldCBhbmdsZSA9IChNYXRoLlBJIC8gdGhpcy52cy5yYWRpYWxEaXZzLnZhbHVlKSAqIHNlZ0luZGV4XG4gICAgICBhbmdsZSA9IG5vcm1hbGl6ZVJhZGlhbihhbmdsZSlcblxuICAgICAgaWYgKGFuZ2xlID4gTWF0aC5QSSAvIDIpIGFuZ2xlIC09IE1hdGguUElcbiAgICAgIGlmIChhbmdsZSA8IE1hdGguUEkgLyAyKSBhbmdsZSArPSBNYXRoLlBJXG5cbiAgICAgIGFuZ2xlICs9IG9mZnNldEFuZ2xlXG5cbiAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgICAvLyB0aGlzLmN0eC5yZWN0KHggLSAwLjIsIHkgLSAwLjIsIDAuNCwgMC40KVxuICAgICAgLy8gdGhpcy5jdHguZmlsbCgpXG5cbiAgICAgIHRoaXMuY3R4Lm1vdmVUbyh4LCB5KVxuXG4gICAgICBjb25zdCBsZW4gPSBNYXRoLm1pbihcbiAgICAgICAgTWF0aC5hYnModGhpcy52cy5ncmlkU2l6ZS52YWx1ZSAvIE1hdGguY29zKGFuZ2xlKSksXG4gICAgICAgIE1hdGguYWJzKHRoaXMudnMuZ3JpZFNpemUudmFsdWUgLyBNYXRoLnNpbihhbmdsZSkpXG4gICAgICApXG5cbiAgICAgIHRoaXMuY3R4LmxpbmVUbyh4ICsgTWF0aC5jb3MoYW5nbGUpICogbGVuLCB5ICsgTWF0aC5zaW4oYW5nbGUpICogbGVuKVxuICAgICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG5cbiAgICAgIHRoaXMuaSsrXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi4vUG9pbnQnXG5pbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuLi9Ta2V0Y2gnXG5pbXBvcnQgeyBkZWdUb1JhZCwgbm9ybWFsaXplUmFkaWFuLCByYW5kRmxvYXQsIHJhbmRGbG9hdFJhbmdlIH0gZnJvbSAnLi4vdXRpbHMvbnVtYmVyVXRpbHMnXG5pbXBvcnQgeyBzZWVkUmFuZG9tIH0gZnJvbSAnLi4vdXRpbHMvcmFuZG9tJ1xuaW1wb3J0IFJhbmdlIGZyb20gJy4vdG9vbHMvUmFuZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYXNlciBleHRlbmRzIFNrZXRjaCB7XG4gIC8vIHN0YXRpYyBnZW5lcmF0ZUdDb2RlID0gZmFsc2VcbiAgc3RhdGljIGVuYWJsZUN1dG91dHMgPSBmYWxzZVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy52cy5kb3duc2NhbGVEcmF3aW5nID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA1LCBtaW46IDEsIG1heDogMjAwLCBzdGVwOiAwLjAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5zcGVlZFVwID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxLCBtaW46IDEsIG1heDogNTAwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5zdG9wQWZ0ZXIgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDcwMDAwLCBtaW46IDEsIG1heDogMTAwMDAwLCBzdGVwOiAxMDAsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLnNlZWQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDIyMjIsIG1pbjogMTAwMCwgbWF4OiA1MDAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5hbmdsZURpZmYgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDIzLCBtaW46IDAsIG1heDogMTgwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5taW5BbmdsZURpZmYgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDcsIG1pbjogMCwgbWF4OiAxODAsIHN0ZXA6IDEgfSlcbiAgICB0aGlzLnZzLmFuZ2xlQ2hhbmdlU3BlZWQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDY4LCBtaW46IDAsIG1heDogNjAgKiAyMCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMuZWFzZVRvQW5nbGUgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDI1LCBtaW46IDEsIG1heDogNjAsIHN0ZXA6IDAuMjUgfSlcbiAgICB0aGlzLnZzLmNlbnRlckZvcmNlID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA0NTAsIG1pbjogMiwgbWF4OiAxMjAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy50cmF2ZWwgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAuMSwgbWluOiAwLjAwMSwgbWF4OiAxLCBzdGVwOiAwLjAwMSB9KVxuICAgIHRoaXMudnMuY2VudGVyRGlzdFJhdGlvID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA0MCwgbWluOiAtMTAsIG1heDogODAsIHN0ZXA6IDAuMDEgfSlcbiAgfVxuXG4gIHBvaW50OiBQb2ludFxuICBwb2ludEFuZ2xlOiBudW1iZXJcbiAgYWltQW5nbGU6IG51bWJlclxuICBhbmdsZUNoYW5nZUNvdW50ZG93biA9IDBcbiAgaW5jcmVtZW50ID0gMFxuXG4gIGluaXREcmF3KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnZzLm1pbkFuZ2xlRGlmZi52YWx1ZSA+IHRoaXMudnMuYW5nbGVEaWZmLnZhbHVlKVxuICAgICAgdGhpcy52cy5taW5BbmdsZURpZmYuc2V0VmFsdWUodGhpcy52cy5hbmdsZURpZmYudmFsdWUsIHRydWUpXG5cbiAgICBzZWVkUmFuZG9tKHRoaXMudnMuc2VlZC52YWx1ZSlcbiAgICB0aGlzLnBvaW50ID0gbmV3IFBvaW50KHJhbmRGbG9hdFJhbmdlKHRoaXMuY3cpLCByYW5kRmxvYXRSYW5nZSh0aGlzLmNoKSlcbiAgICB0aGlzLnBvaW50QW5nbGUgPSByYW5kRmxvYXRSYW5nZShNYXRoLlBJICogMilcbiAgICB0aGlzLmFpbUFuZ2xlID0gdGhpcy5wb2ludEFuZ2xlXG4gICAgdGhpcy5pbmNyZW1lbnQgPSAwXG4gICAgdGhpcy5hbmdsZUNoYW5nZUNvdW50ZG93biA9IDBcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbmNyZW1lbnQgPiB0aGlzLnZzLnN0b3BBZnRlci52YWx1ZSkgcmV0dXJuXG4gICAgY29uc3QgYW5nbGVEaWZmID0gZGVnVG9SYWQodGhpcy52cy5hbmdsZURpZmYudmFsdWUpXG4gICAgY29uc3QgbWluQW5nbGVEaWZmID0gZGVnVG9SYWQodGhpcy52cy5taW5BbmdsZURpZmYudmFsdWUpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZzLnNwZWVkVXAudmFsdWU7IGkrKykge1xuICAgICAgdGhpcy5pbmNyZW1lbnQrK1xuICAgICAgaWYgKHRoaXMuaW5jcmVtZW50ID4gdGhpcy52cy5zdG9wQWZ0ZXIudmFsdWUpIGJyZWFrXG4gICAgICBpZiAodGhpcy5hbmdsZUNoYW5nZUNvdW50ZG93biA8PSAwKSB7XG4gICAgICAgIGxldCByYW5kQW5nbGUgPSByYW5kRmxvYXQoYW5nbGVEaWZmIC0gbWluQW5nbGVEaWZmKVxuICAgICAgICByYW5kQW5nbGUgKz0gKHJhbmRBbmdsZSA+IDAgPyAxIDogLTEpICogbWluQW5nbGVEaWZmXG4gICAgICAgIHRoaXMuYWltQW5nbGUgPSB0aGlzLnBvaW50QW5nbGUgKyByYW5kQW5nbGVcbiAgICAgICAgdGhpcy5haW1BbmdsZSA9IG5vcm1hbGl6ZVJhZGlhbih0aGlzLmFpbUFuZ2xlKVxuICAgICAgICB0aGlzLnBvaW50QW5nbGUgPSBub3JtYWxpemVSYWRpYW4odGhpcy5wb2ludEFuZ2xlKVxuICAgICAgICAvLyB0aGlzLnBvaW50QW5nbGUgKz0gcmFuZEFuZ2xlXG4gICAgICAgIHRoaXMuYW5nbGVDaGFuZ2VDb3VudGRvd24gPSB0aGlzLnZzLmFuZ2xlQ2hhbmdlU3BlZWQudmFsdWVcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNlbnRlckRpc3QgPSBNYXRoLm1heCgwLjUsIFBvaW50LmRpc3RhbmNlKHRoaXMucG9pbnQsIG5ldyBQb2ludCh0aGlzLmN4LCB0aGlzLmN5KSkpXG4gICAgICAvLyBjb25zdCBpbnZlcnNlQ2VudGVyRGlzdCA9IE1hdGgubWF4KDAsIHRoaXMuY3cgLSBjZW50ZXJEaXN0KVxuXG4gICAgICB0aGlzLnBvaW50QW5nbGUgKz0gKHRoaXMuYWltQW5nbGUgLSB0aGlzLnBvaW50QW5nbGUpIC8gdGhpcy52cy5lYXNlVG9BbmdsZS52YWx1ZVxuXG4gICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKVxuICAgICAgdGhpcy5jdHgubW92ZVRvKFxuICAgICAgICAodGhpcy5wb2ludC54IC0gdGhpcy5jeCkgLyB0aGlzLnZzLmRvd25zY2FsZURyYXdpbmcudmFsdWUgKyB0aGlzLmN4LFxuICAgICAgICAodGhpcy5wb2ludC55IC0gdGhpcy5jeSkgLyB0aGlzLnZzLmRvd25zY2FsZURyYXdpbmcudmFsdWUgKyB0aGlzLmN5XG4gICAgICApXG4gICAgICB0aGlzLnBvaW50LnggKz0gTWF0aC5jb3ModGhpcy5wb2ludEFuZ2xlKSAqIHRoaXMudnMudHJhdmVsLnZhbHVlXG4gICAgICB0aGlzLnBvaW50LnkgKz0gTWF0aC5zaW4odGhpcy5wb2ludEFuZ2xlKSAqIHRoaXMudnMudHJhdmVsLnZhbHVlXG4gICAgICB0aGlzLnBvaW50LnggKz1cbiAgICAgICAgKHRoaXMuY3ggLSB0aGlzLnBvaW50LngpIC8gKHRoaXMudnMuY2VudGVyRm9yY2UudmFsdWUgKiAoY2VudGVyRGlzdCAvIHRoaXMudnMuY2VudGVyRGlzdFJhdGlvLnZhbHVlKSlcbiAgICAgIHRoaXMucG9pbnQueSArPVxuICAgICAgICAodGhpcy5jeSAtIHRoaXMucG9pbnQueSkgLyAodGhpcy52cy5jZW50ZXJGb3JjZS52YWx1ZSAqIChjZW50ZXJEaXN0IC8gdGhpcy52cy5jZW50ZXJEaXN0UmF0aW8udmFsdWUpKVxuICAgICAgdGhpcy5jdHgubGluZVRvKFxuICAgICAgICAodGhpcy5wb2ludC54IC0gdGhpcy5jeCkgLyB0aGlzLnZzLmRvd25zY2FsZURyYXdpbmcudmFsdWUgKyB0aGlzLmN4LFxuICAgICAgICAodGhpcy5wb2ludC55IC0gdGhpcy5jeSkgLyB0aGlzLnZzLmRvd25zY2FsZURyYXdpbmcudmFsdWUgKyB0aGlzLmN5XG4gICAgICApXG4gICAgICB0aGlzLmN0eC5zdHJva2UoKVxuICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgICAgIC8vIHRoaXMucG9pbnQueCA9IHdyYXAodGhpcy5wb2ludC54LCB0aGlzLmN3KVxuICAgICAgLy8gdGhpcy5wb2ludC55ID0gd3JhcCh0aGlzLnBvaW50LnksIHRoaXMuY2gpXG4gICAgICB0aGlzLmFuZ2xlQ2hhbmdlQ291bnRkb3duLS1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4uL1NrZXRjaCdcbmltcG9ydCB7IGRlZ1RvUmFkLCByYW5kRmxvYXQsIHJhbmRGbG9hdFJhbmdlLCB3cmFwIH0gZnJvbSAnLi4vdXRpbHMvbnVtYmVyVXRpbHMnXG5pbXBvcnQgeyBzZWVkUmFuZG9tIH0gZnJvbSAnLi4vdXRpbHMvcmFuZG9tJ1xuaW1wb3J0IFJhbmdlIGZyb20gJy4vdG9vbHMvUmFuZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEthbGVpZG8gZXh0ZW5kcyBTa2V0Y2gge1xuICAvLyBzdGF0aWMgZ2VuZXJhdGVHQ29kZSA9IGZhbHNlXG4gIHN0YXRpYyBlbmFibGVDdXRvdXRzID0gZmFsc2VcblxuICBpbml0KCkge1xuICAgIHRoaXMudnMuc3BlZWRVcCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMSwgbWluOiAxLCBtYXg6IDEwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMuc3RvcEFmdGVyID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAyMCwgbWluOiAxLCBtYXg6IDQyMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMubWF4UmFkaXVzID0gbmV3IFJhbmdlKHtcbiAgICAgIGluaXRpYWxWYWx1ZTogdGhpcy5jaCAqIDAuNDUsXG4gICAgICBtaW46IDEsXG4gICAgICBtYXg6IHRoaXMuY2ggKiAwLjUsXG4gICAgICBzdGVwOiAwLjEsXG4gICAgICBkaXNhYmxlUmFuZG9taXplOiB0cnVlLFxuICAgIH0pXG4gICAgdGhpcy52cy5hbmdsZU9mZnNldCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMCwgbWluOiAwLCBtYXg6IDkwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG5cbiAgICB0aGlzLnZzLnNlZWQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDIyMjIsIG1pbjogMTAwMCwgbWF4OiA1MDAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5zZWdtZW50cyA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogOCwgbWluOiAyLCBtYXg6IDI0LCBzdGVwOiAyIH0pXG4gICAgdGhpcy52cy5tYXhIZWlnaHREaWZmID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxMjAsIG1pbjogMCwgbWF4OiB0aGlzLnZzLm1heFJhZGl1cy52YWx1ZSwgc3RlcDogMSB9KVxuICB9XG5cbiAgaW5jcmVtZW50ID0gMFxuXG4gIGluaXREcmF3KCk6IHZvaWQge1xuICAgIHRoaXMudnMubWF4SGVpZ2h0RGlmZi5tYXggPSB0aGlzLnZzLm1heFJhZGl1cy52YWx1ZVxuICAgIGlmICh0aGlzLnZzLm1heEhlaWdodERpZmYudmFsdWUgPiB0aGlzLnZzLm1heFJhZGl1cy52YWx1ZSkge1xuICAgICAgdGhpcy52cy5tYXhIZWlnaHREaWZmLnNldFZhbHVlKHRoaXMudnMubWF4UmFkaXVzLnZhbHVlLCB0cnVlKVxuICAgIH1cbiAgICBzZWVkUmFuZG9tKHRoaXMudnMuc2VlZC52YWx1ZSlcbiAgICB0aGlzLmluY3JlbWVudCA9IDBcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbmNyZW1lbnQgPiB0aGlzLnZzLnN0b3BBZnRlci52YWx1ZSkgcmV0dXJuXG4gICAgY29uc3Qgc2VnQW5nbGUgPSBkZWdUb1JhZCgzNjAgLyB0aGlzLnZzLnNlZ21lbnRzLnZhbHVlKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52cy5zcGVlZFVwLnZhbHVlOyBpKyspIHtcbiAgICAgIHRoaXMuaW5jcmVtZW50KytcbiAgICAgIGlmICh0aGlzLmluY3JlbWVudCA+IHRoaXMudnMuc3RvcEFmdGVyLnZhbHVlKSBicmVha1xuXG4gICAgICBjb25zdCBsZW5ndGgxID0gcmFuZEZsb2F0UmFuZ2UodGhpcy52cy5tYXhSYWRpdXMudmFsdWUpXG4gICAgICBjb25zdCBsZW5ndGgyID0gd3JhcChsZW5ndGgxICsgcmFuZEZsb2F0KHRoaXMudnMubWF4SGVpZ2h0RGlmZi52YWx1ZSAvIDIpLCB0aGlzLnZzLm1heFJhZGl1cy52YWx1ZSwgMClcblxuICAgICAgaWYgKGxlbmd0aDEgPT09IGxlbmd0aDIpIGNvbnRpbnVlXG5cbiAgICAgIGZvciAobGV0IGEgPSAwOyBhIDwgdGhpcy52cy5zZWdtZW50cy52YWx1ZTsgYSsrKSB7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gc2VnQW5nbGUgKiBhICsgZGVnVG9SYWQodGhpcy52cy5hbmdsZU9mZnNldC52YWx1ZSlcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICAgICAgdGhpcy5jdHgubW92ZVRvKFxuICAgICAgICAgIHRoaXMuY3ggKyBNYXRoLmNvcyhhbmdsZSkgKiAoYSAlIDIgPyBsZW5ndGgxIDogbGVuZ3RoMiksXG4gICAgICAgICAgdGhpcy5jeSArIE1hdGguc2luKGFuZ2xlKSAqIChhICUgMiA/IGxlbmd0aDEgOiBsZW5ndGgyKVxuICAgICAgICApXG4gICAgICAgIHRoaXMuY3R4LmxpbmVUbyhcbiAgICAgICAgICB0aGlzLmN4ICsgTWF0aC5jb3MoYW5nbGUgKyBzZWdBbmdsZSkgKiAoYSAlIDIgPyBsZW5ndGgyIDogbGVuZ3RoMSksXG4gICAgICAgICAgdGhpcy5jeSArIE1hdGguc2luKGFuZ2xlICsgc2VnQW5nbGUpICogKGEgJSAyID8gbGVuZ3RoMiA6IGxlbmd0aDEpXG4gICAgICAgIClcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4uL1NrZXRjaCdcbmltcG9ydCB7IHBlcmxpbjIgfSBmcm9tICcuLi91dGlscy9ub2lzZSdcbmltcG9ydCB7IGRlZ1RvUmFkLCByYW5kRmxvYXQsIHJhbmRGbG9hdFJhbmdlLCB3cmFwIH0gZnJvbSAnLi4vdXRpbHMvbnVtYmVyVXRpbHMnXG5pbXBvcnQgeyBzZWVkUmFuZG9tIH0gZnJvbSAnLi4vdXRpbHMvcmFuZG9tJ1xuaW1wb3J0IFJhbmdlIGZyb20gJy4vdG9vbHMvUmFuZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEthbGVpZG9DdXJ2ZSBleHRlbmRzIFNrZXRjaCB7XG4gIC8vIHN0YXRpYyBnZW5lcmF0ZUdDb2RlID0gZmFsc2VcbiAgc3RhdGljIGVuYWJsZUN1dG91dHMgPSBmYWxzZVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy52cy5zcGVlZFVwID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxLCBtaW46IDEsIG1heDogMTAwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5zdG9wQWZ0ZXIgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDIwLCBtaW46IDEsIG1heDogNDIwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5tYXhSYWRpdXMgPSBuZXcgUmFuZ2Uoe1xuICAgICAgaW5pdGlhbFZhbHVlOiB0aGlzLmNoICogMC40NSxcbiAgICAgIG1pbjogMSxcbiAgICAgIG1heDogdGhpcy5jaCAqIDAuNSxcbiAgICAgIHN0ZXA6IDAuMSxcbiAgICAgIGRpc2FibGVSYW5kb21pemU6IHRydWUsXG4gICAgfSlcbiAgICB0aGlzLnZzLmFuZ2xlT2Zmc2V0ID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IDAsIG1heDogOTAsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcblxuICAgIHRoaXMudnMucGVybGluRGl2WCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogNzUsIG1pbjogMSwgbWF4OiAxMDAsIHN0ZXA6IDEgfSlcbiAgICB0aGlzLnZzLnBlcmxpbkRpdlkgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDc1LCBtaW46IDEsIG1heDogMTAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5wZXJsaW5PZmZzZXRYID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IC0xMDAsIG1heDogMTAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5wZXJsaW5PZmZzZXRZID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IC0xMDAsIG1heDogMTAwLCBzdGVwOiAxIH0pXG5cbiAgICB0aGlzLnZzLnNlZWQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDIyMjIsIG1pbjogMTAwMCwgbWF4OiA1MDAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5zZWdtZW50cyA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogOCwgbWluOiAyLCBtYXg6IDI0LCBzdGVwOiAyIH0pXG4gICAgdGhpcy52cy5tYXhIZWlnaHREaWZmID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxMjAsIG1pbjogMCwgbWF4OiB0aGlzLnZzLm1heFJhZGl1cy52YWx1ZSwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMuY3VydmVSYW5nZSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMC41LCBtaW46IDAsIG1heDogNSwgc3RlcDogMC4wMDUgfSlcbiAgICB0aGlzLnZzLm1heEN1cnZlU3RyZW5ndGggPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDUwLCBtaW46IDAsIG1heDogOTAsIHN0ZXA6IDEgfSlcbiAgfVxuXG4gIGluY3JlbWVudCA9IDBcblxuICBpbml0RHJhdygpOiB2b2lkIHtcbiAgICB0aGlzLnZzLm1heEhlaWdodERpZmYubWF4ID0gdGhpcy52cy5tYXhSYWRpdXMudmFsdWVcbiAgICBpZiAodGhpcy52cy5tYXhIZWlnaHREaWZmLnZhbHVlID4gdGhpcy52cy5tYXhSYWRpdXMudmFsdWUpXG4gICAgICB0aGlzLnZzLm1heEhlaWdodERpZmYuc2V0VmFsdWUodGhpcy52cy5tYXhSYWRpdXMudmFsdWUsIHRydWUpXG5cbiAgICBzZWVkUmFuZG9tKHRoaXMudnMuc2VlZC52YWx1ZSlcbiAgICB0aGlzLmluY3JlbWVudCA9IDBcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbmNyZW1lbnQgPiB0aGlzLnZzLnN0b3BBZnRlci52YWx1ZSkgcmV0dXJuXG4gICAgY29uc3Qgc2VnQW5nbGUgPSBkZWdUb1JhZCgzNjAgLyB0aGlzLnZzLnNlZ21lbnRzLnZhbHVlKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52cy5zcGVlZFVwLnZhbHVlOyBpKyspIHtcbiAgICAgIHRoaXMuaW5jcmVtZW50KytcbiAgICAgIGlmICh0aGlzLmluY3JlbWVudCA+IHRoaXMudnMuc3RvcEFmdGVyLnZhbHVlKSBicmVha1xuXG4gICAgICBjb25zdCBsZW5ndGgxID0gcmFuZEZsb2F0UmFuZ2UodGhpcy52cy5tYXhSYWRpdXMudmFsdWUpXG4gICAgICBjb25zdCBsZW5ndGgyID0gd3JhcChsZW5ndGgxICsgcmFuZEZsb2F0KHRoaXMudnMubWF4SGVpZ2h0RGlmZi52YWx1ZSAvIDIpLCB0aGlzLnZzLm1heFJhZGl1cy52YWx1ZSwgMClcblxuICAgICAgY29uc3QgbGVuZ3RoUGVybGluID0gcGVybGluMihcbiAgICAgICAgKGxlbmd0aDEgKyB0aGlzLnZzLnBlcmxpbk9mZnNldFgudmFsdWUpIC8gdGhpcy52cy5wZXJsaW5EaXZYLnZhbHVlLFxuICAgICAgICAobGVuZ3RoMiArIHRoaXMudnMucGVybGluT2Zmc2V0WS52YWx1ZSkgLyB0aGlzLnZzLnBlcmxpbkRpdlkudmFsdWVcbiAgICAgIClcbiAgICAgIGNvbnN0IGN1cnZlQW5nbGUgPSBsZW5ndGhQZXJsaW4gKiB0aGlzLnZzLmN1cnZlUmFuZ2UudmFsdWUgKiBzZWdBbmdsZSAqIDIgKyBzZWdBbmdsZSAvIDJcbiAgICAgIGNvbnN0IGN1cnZlTGVuZ3RoID0gcmFuZEZsb2F0UmFuZ2UodGhpcy52cy5tYXhDdXJ2ZVN0cmVuZ3RoLnZhbHVlKVxuXG4gICAgICBpZiAobGVuZ3RoMSA9PT0gbGVuZ3RoMikgY29udGludWVcblxuICAgICAgZm9yIChsZXQgYSA9IDA7IGEgPCB0aGlzLnZzLnNlZ21lbnRzLnZhbHVlOyBhKyspIHtcbiAgICAgICAgY29uc3QgYW5nbGUgPSBzZWdBbmdsZSAqIGEgKyBkZWdUb1JhZCh0aGlzLnZzLmFuZ2xlT2Zmc2V0LnZhbHVlKVxuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKVxuICAgICAgICB0aGlzLmN0eC5tb3ZlVG8oXG4gICAgICAgICAgdGhpcy5jeCArIE1hdGguY29zKGFuZ2xlKSAqIChhICUgMiA/IGxlbmd0aDEgOiBsZW5ndGgyKSxcbiAgICAgICAgICB0aGlzLmN5ICsgTWF0aC5zaW4oYW5nbGUpICogKGEgJSAyID8gbGVuZ3RoMSA6IGxlbmd0aDIpXG4gICAgICAgIClcbiAgICAgICAgdGhpcy5jdHgucXVhZHJhdGljQ3VydmVUbyhcbiAgICAgICAgICB0aGlzLmN4ICsgTWF0aC5jb3MoYW5nbGUgKyBjdXJ2ZUFuZ2xlKSAqIGN1cnZlTGVuZ3RoLFxuICAgICAgICAgIHRoaXMuY3kgKyBNYXRoLnNpbihhbmdsZSArIGN1cnZlQW5nbGUpICogY3VydmVMZW5ndGgsXG4gICAgICAgICAgdGhpcy5jeCArIE1hdGguY29zKGFuZ2xlICsgc2VnQW5nbGUpICogKGEgJSAyID8gbGVuZ3RoMiA6IGxlbmd0aDEpLFxuICAgICAgICAgIHRoaXMuY3kgKyBNYXRoLnNpbihhbmdsZSArIHNlZ0FuZ2xlKSAqIChhICUgMiA/IGxlbmd0aDIgOiBsZW5ndGgxKVxuICAgICAgICApXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi4vUG9pbnQnXG5pbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuLi9Ta2V0Y2gnXG5pbXBvcnQgeyBMaW5lIH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyBnZXRMaW5lSW50ZXJzZWN0aW9uUG9pbnRzIH0gZnJvbSAnLi4vdXRpbHMvZ2VvbVV0aWxzJ1xuaW1wb3J0IHsgZGVnVG9SYWQsIHJhbmRGbG9hdCwgcmFuZEZsb2F0UmFuZ2UgfSBmcm9tICcuLi91dGlscy9udW1iZXJVdGlscydcbmltcG9ydCB7IGxpbmVUb1BvaW50cywgc2FtZUZsb2F0IH0gZnJvbSAnLi4vdXRpbHMvcGF0aFV0aWxzJ1xuaW1wb3J0IHsgc2VlZFJhbmRvbSB9IGZyb20gJy4uL3V0aWxzL3JhbmRvbSdcbmltcG9ydCBSYW5nZSBmcm9tICcuL3Rvb2xzL1JhbmdlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJwZW5kaWN1bGFyaXR5IGV4dGVuZHMgU2tldGNoIHtcbiAgLy8gc3RhdGljIGdlbmVyYXRlR0NvZGUgPSBmYWxzZVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy52cy5zdG9wQWZ0ZXIgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDM2LCBtaW46IDEsIG1heDogNDIwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5tYXhSYWRpdXMgPSBuZXcgUmFuZ2Uoe1xuICAgICAgaW5pdGlhbFZhbHVlOiB0aGlzLmNoICogMC40NSxcbiAgICAgIG1pbjogMSxcbiAgICAgIG1heDogdGhpcy5jaCAqIDAuNSxcbiAgICAgIHN0ZXA6IDAuMSxcbiAgICAgIGRpc2FibGVSYW5kb21pemU6IHRydWUsXG4gICAgfSlcblxuICAgIHRoaXMudnMuc2VlZCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMjIyMiwgbWluOiAxMDAwLCBtYXg6IDUwMDAsIHN0ZXA6IDEgfSlcblxuICAgIHRoaXMudnMuc2VnbWVudHMgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDYsIG1pbjogMywgbWF4OiAxNSwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMuc2VnbWVudEFuZ2xlV29uayA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMCwgbWluOiAwLCBtYXg6IDEsIHN0ZXA6IDAuMDAxIH0pXG4gICAgdGhpcy52cy5yYWRpYWxTcGF3blBvaW50cyA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMSwgbWluOiAwLCBtYXg6IDEwLCBzdGVwOiAxIH0pXG5cbiAgICB0aGlzLnZzLm9mZnNldFBlcnBBbmdsZSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogTWF0aC5QSSAvIDIgLSAwLjEsIG1pbjogMCwgbWF4OiBNYXRoLlBJLCBzdGVwOiAwLjAwMSB9KVxuICAgIHRoaXMudnMub2Zmc2V0UGVycEFuZ2xlV29uayA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMCwgbWluOiAwLCBtYXg6IDEsIHN0ZXA6IDAuMDAxIH0pXG4gIH1cblxuICBjcCA9IG5ldyBQb2ludCh0aGlzLmN4LCB0aGlzLmN5KVxuXG4gIGluY3JlbWVudCA9IDBcbiAgc2VnbWVudEFuZ2xlczogbnVtYmVyW10gPSBbXVxuICBzZWdtZW50c0xpbmVzOiBMaW5lW10gPSBbXVxuXG4gIGRyYXduTGluZXM6IExpbmVbXSA9IFtdXG4gIG5leHRTcGF3blBvaW50czogW1BvaW50LCBMaW5lXVtdID0gW11cblxuICBkcmF3TGluZUZyb21Qb2ludEF0QW5nbGUoc3RhcnRQb2ludDogUG9pbnQsIG9yaWdpbmFsTGluZTogTGluZSwgb2Zmc2V0QW5nbGU6IG51bWJlciA9IE1hdGguUEkgLyAyKSB7XG4gICAgY29uc3QgbGluZUFuZ2xlID0gb3JpZ2luYWxMaW5lWzBdLmFuZ2xlVG8ob3JpZ2luYWxMaW5lWzFdKVxuXG4gICAgY29uc3Qgc3RhcnRQdEFuZ2xlRnJvbUNlbnRlciA9IHRoaXMuY3AuYW5nbGVUbyhzdGFydFBvaW50KVxuXG4gICAgbGV0IGFuZ2xlID0gbGluZUFuZ2xlICsgb2Zmc2V0QW5nbGVcblxuICAgIC8vIGZsaXAgYW5nbGUgMTgwwrAgaWYgdGhlc2UgbWF0Y2hcbiAgICBpZiAoc2FtZUZsb2F0KHN0YXJ0UHRBbmdsZUZyb21DZW50ZXIsIGxpbmVBbmdsZSkpIHtcbiAgICAgIGFuZ2xlICs9IE1hdGguUElcbiAgICB9XG5cbiAgICBjb25zdCB0ZXN0TGluZTogTGluZSA9IFtzdGFydFBvaW50LCBzdGFydFBvaW50LmNsb25lKCkubW92ZUFsb25nQW5nbGUoYW5nbGUsIDEwMDApXVxuXG4gICAgbGV0IGludGVyc2VjdGlvblBvaW50QW5kTGluZXMgPSBnZXRMaW5lSW50ZXJzZWN0aW9uUG9pbnRzKHRlc3RMaW5lLCAuLi50aGlzLmRyYXduTGluZXMpXG4gICAgICAubWFwKChbcHQsIGxpbmVdKSA9PiBbcHQsIGxpbmUsIHN0YXJ0UG9pbnQuZGlzdGFuY2VUbyhwdCldIGFzIFtQb2ludCwgTGluZSwgbnVtYmVyXSlcbiAgICAgIC5maWx0ZXIoKFssICwgZGlzdF0pID0+IGRpc3QgPiAwLjAwMSlcbiAgICAgIC5zb3J0KChbLCAsIGRpc3QxXSwgWywgLCBkaXN0Ml0pID0+IGRpc3QxIC0gZGlzdDIpXG5cbiAgICBpZiAoIWludGVyc2VjdGlvblBvaW50QW5kTGluZXMubGVuZ3RoKSB7XG4gICAgICB0ZXN0TGluZVsxXSA9IHRlc3RMaW5lWzBdLmNsb25lKCkubW92ZUFsb25nQW5nbGUoYW5nbGUgKyBNYXRoLlBJLCAxMDAwKVxuICAgICAgaW50ZXJzZWN0aW9uUG9pbnRBbmRMaW5lcyA9IGdldExpbmVJbnRlcnNlY3Rpb25Qb2ludHModGVzdExpbmUsIC4uLnRoaXMuZHJhd25MaW5lcylcbiAgICAgICAgLm1hcCgoW3B0LCBsaW5lXSkgPT4gW3B0LCBsaW5lLCBzdGFydFBvaW50LmRpc3RhbmNlVG8ocHQpXSBhcyBbUG9pbnQsIExpbmUsIG51bWJlcl0pXG4gICAgICAgIC5maWx0ZXIoKFssICwgZGlzdF0pID0+IGRpc3QgPiAwLjAwMSlcbiAgICAgICAgLnNvcnQoKFssICwgZGlzdDFdLCBbLCAsIGRpc3QyXSkgPT4gZGlzdDEgLSBkaXN0MilcbiAgICB9XG5cbiAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRBbmRMaW5lcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBbY2xvc2VzdEludGVyc2VjdGlvblBvaW50LCBjbG9zZXN0SW50ZXJzZWN0aW9uTGluZV0gPSBpbnRlcnNlY3Rpb25Qb2ludEFuZExpbmVzWzBdXG4gICAgICB0ZXN0TGluZVsxXSA9IGNsb3Nlc3RJbnRlcnNlY3Rpb25Qb2ludFxuICAgICAgdGhpcy5uZXh0U3Bhd25Qb2ludHMucHVzaChbY2xvc2VzdEludGVyc2VjdGlvblBvaW50LCBjbG9zZXN0SW50ZXJzZWN0aW9uTGluZV0pXG4gICAgfVxuXG4gICAgdGhpcy5kcmF3bkxpbmVzLnB1c2godGVzdExpbmUpXG4gICAgdGhpcy5jdHguc3Ryb2tlTGluZSguLi50ZXN0TGluZSlcbiAgfVxuXG4gIGluaXREcmF3KCk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKCdpbml0IGRyYXcgY2FsbGVkJylcbiAgICB0aGlzLmluY3JlbWVudCA9IDBcbiAgICB0aGlzLnNlZ21lbnRBbmdsZXMgPSBbXVxuICAgIHRoaXMuc2VnbWVudHNMaW5lcyA9IFtdXG4gICAgdGhpcy5kcmF3bkxpbmVzID0gW11cbiAgICB0aGlzLm5leHRTcGF3blBvaW50cyA9IFtdXG4gICAgc2VlZFJhbmRvbSh0aGlzLnZzLnNlZWQudmFsdWUpXG5cbiAgICBjb25zdCBtaWRQdCA9IG5ldyBQb2ludCh0aGlzLmN4LCB0aGlzLmN5KVxuICAgIGNvbnN0IHNlZ0FuZ2xlID0gZGVnVG9SYWQoMzYwIC8gdGhpcy52cy5zZWdtZW50cy52YWx1ZSlcblxuICAgIGxldCBhbmdsZSA9IDBcbiAgICBmb3IgKGxldCBhID0gMDsgYSA8IHRoaXMudnMuc2VnbWVudHMudmFsdWU7IGErKykge1xuICAgICAgY29uc3QgYW5nbGVXb25rQW1vdW50ID0gcmFuZEZsb2F0UmFuZ2UodGhpcy52cy5zZWdtZW50QW5nbGVXb25rLnZhbHVlKVxuICAgICAgYW5nbGUgKz0gc2VnQW5nbGUgKyByYW5kRmxvYXRSYW5nZSgtc2VnQW5nbGUgKiBhbmdsZVdvbmtBbW91bnQsIHNlZ0FuZ2xlICogYW5nbGVXb25rQW1vdW50KVxuICAgICAgdGhpcy5zZWdtZW50QW5nbGVzLnB1c2goYW5nbGUpXG4gICAgICBjb25zdCBzZWdFbmRQdCA9IG5ldyBQb2ludChcbiAgICAgICAgdGhpcy5jeCArIE1hdGguY29zKGFuZ2xlKSAqIHRoaXMudnMubWF4UmFkaXVzLnZhbHVlLFxuICAgICAgICB0aGlzLmN5ICsgTWF0aC5zaW4oYW5nbGUpICogdGhpcy52cy5tYXhSYWRpdXMudmFsdWVcbiAgICAgIClcbiAgICAgIGNvbnN0IGxpbmU6IExpbmUgPSBbbWlkUHQsIHNlZ0VuZFB0XVxuICAgICAgdGhpcy5zZWdtZW50c0xpbmVzLnB1c2gobGluZSlcbiAgICAgIHRoaXMuZHJhd25MaW5lcy5wdXNoKGxpbmUpXG4gICAgICAvLyB0aGlzLmN0eC5zdHJva2VMaW5lKC4uLmxpbmUpXG4gICAgfVxuXG4gICAgLy8gZHJhdyBsaW5lcyB0byBjbG9zZSBzaGFwZVxuICAgIGZvciAobGV0IHMgPSAwOyBzIDwgdGhpcy52cy5zZWdtZW50cy52YWx1ZTsgcysrKSB7XG4gICAgICBjb25zdCBjbG9zaW5nTGluZTogTGluZSA9IFtcbiAgICAgICAgdGhpcy5zZWdtZW50c0xpbmVzW3NdWzFdLFxuICAgICAgICB0aGlzLnNlZ21lbnRzTGluZXNbcyA9PT0gdGhpcy52cy5zZWdtZW50cy52YWx1ZSAtIDEgPyAwIDogcyArIDFdWzFdLFxuICAgICAgXVxuICAgICAgdGhpcy5kcmF3bkxpbmVzLnB1c2goY2xvc2luZ0xpbmUpXG4gICAgICAvLyB0aGlzLmN0eC5zdHJva2VMaW5lKC4uLmNsb3NpbmdMaW5lKVxuICAgIH1cblxuICAgIC8vIHN0YXJ0IGluaXRpYWwgbGluZXMgc3Bhd25pbmcgb2ZmIG9mIHNlZ21lbnQgbGluZXNcbiAgICBmb3IgKGxldCBzID0gMDsgcyA8IHRoaXMudnMuc2VnbWVudHMudmFsdWU7IHMrKykge1xuICAgICAgY29uc3QgbGluZSA9IHRoaXMuc2VnbWVudHNMaW5lc1tzXVxuICAgICAgY29uc3Qgc3RhcnRQb2ludHMgPSBsaW5lVG9Qb2ludHMoLi4ubGluZSwgdGhpcy52cy5yYWRpYWxTcGF3blBvaW50cy52YWx1ZSlcbiAgICAgIGZvciAobGV0IHIgPSAwOyByIDwgdGhpcy52cy5yYWRpYWxTcGF3blBvaW50cy52YWx1ZTsgcisrKSB7XG4gICAgICAgIHRoaXMuZHJhd0xpbmVGcm9tUG9pbnRBdEFuZ2xlKHN0YXJ0UG9pbnRzW3JdLCBsaW5lLCB0aGlzLnZzLm9mZnNldFBlcnBBbmdsZS52YWx1ZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkcmF3KGluY3JlbWVudDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaW5jcmVtZW50ID4gdGhpcy52cy5zdG9wQWZ0ZXIudmFsdWUpIHJldHVyblxuICAgIGNvbnN0IHNwYXduUG9pbnRzID0gWy4uLnRoaXMubmV4dFNwYXduUG9pbnRzXVxuICAgIHRoaXMubmV4dFNwYXduUG9pbnRzID0gW11cbiAgICBmb3IgKGxldCBbcHQsIGxpbmVdIG9mIHNwYXduUG9pbnRzKSB7XG4gICAgICBjb25zdCBhbmdsZSA9IHRoaXMudnMub2Zmc2V0UGVycEFuZ2xlLnZhbHVlICsgcmFuZEZsb2F0KHRoaXMudnMub2Zmc2V0UGVycEFuZ2xlV29uay52YWx1ZSlcbiAgICAgIHRoaXMuZHJhd0xpbmVGcm9tUG9pbnRBdEFuZ2xlKHB0LCBsaW5lLCBhbmdsZSlcbiAgICB9XG4gICAgdGhpcy5pbmNyZW1lbnQrK1xuICB9XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi4vUG9pbnQnXG5pbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuLi9Ta2V0Y2gnXG5pbXBvcnQgeyBMaW5lIH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyBkZWJ1Z0RvdCB9IGZyb20gJy4uL3V0aWxzL2RlYnVnVXRpbHMnXG5pbXBvcnQge1xuICBjaXJjbGVPdmVybGFwc0NpcmNsZXMsXG4gIGdldENsb3Nlc3RCdXROb3RTYW1lUG9pbnQsXG4gIGdldENsb3Nlc3RQb2ludCxcbiAgZ2V0TGluZUludGVyc2VjdGlvblBvaW50cyxcbiAgZ2V0UG9pbnRzV2hlcmVMaW5lSW50ZXJzZWN0c0NpcmNsZSxcbiAgcG9pbnRJbkNpcmNsZXMsXG59IGZyb20gJy4uL3V0aWxzL2dlb21VdGlscydcbmltcG9ydCB7IHNtYWxsZXN0QW5nbGVEaWZmLCBkZWdUb1JhZCwgcmFkVG9EZWcsIHJhbmRGbG9hdCwgcmFuZEZsb2F0UmFuZ2UsIGFuZ2xlRGlmZiB9IGZyb20gJy4uL3V0aWxzL251bWJlclV0aWxzJ1xuaW1wb3J0IHsgbGluZVRvUG9pbnRzLCBzYW1lRmxvYXQgfSBmcm9tICcuLi91dGlscy9wYXRoVXRpbHMnXG5pbXBvcnQgeyBzZWVkUmFuZG9tIH0gZnJvbSAnLi4vdXRpbHMvcmFuZG9tJ1xuaW1wb3J0IFJhbmdlIGZyb20gJy4vdG9vbHMvUmFuZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJheXMgZXh0ZW5kcyBTa2V0Y2gge1xuICAvLyBzdGF0aWMgZ2VuZXJhdGVHQ29kZSA9IGZhbHNlXG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnZzLnN0b3BBZnRlciA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMywgbWluOiAxLCBtYXg6IDI1Niwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMubWF4UmFkaXVzID0gbmV3IFJhbmdlKHtcbiAgICAgIGluaXRpYWxWYWx1ZTogdGhpcy5jaCAqIDAuNDUsXG4gICAgICBtaW46IDEsXG4gICAgICBtYXg6IHRoaXMuY2ggKiAwLjUsXG4gICAgICBzdGVwOiAwLjEsXG4gICAgICBkaXNhYmxlUmFuZG9taXplOiB0cnVlLFxuICAgIH0pXG5cbiAgICB0aGlzLnZzLnNlZWQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDM5NzUsIG1pbjogMTAwMCwgbWF4OiA1MDAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5saW5lcyA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogNTAwLCBtaW46IDMsIG1heDogNzIwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5saW5lQW5nbGVXb25rID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IDAsIG1heDogMSwgc3RlcDogMC4wMDAxIH0pXG4gICAgdGhpcy52cy5jaXJjbGVzID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAzLCBtaW46IDEsIG1heDogMTAsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLnJlZnJhY3Rpb25JbmRleCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMSwgbWluOiAxLCBtYXg6IDIsIHN0ZXA6IDAuMDAwMDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgfVxuXG4gIGluY3JlbWVudCA9IDBcbiAgcmVmbGVjdGl2ZUNpcmNsZXM6IFtwb3M6IFBvaW50LCByYWQ6IG51bWJlcl1bXSA9IFtdXG4gIGRyYXdpbmdQb2ludHM6IFtwdDogUG9pbnQsIGFuZ2xlOiBudW1iZXIsIGluc2lkZVNoYXBlOiBib29sZWFuXVtdID0gW11cbiAgY3AgPSBuZXcgUG9pbnQodGhpcy5jeCwgdGhpcy5jeSlcblxuICBpbml0RHJhdygpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZygnaW5pdCBkcmF3IGNhbGxlZCcpXG4gICAgdGhpcy5pbmNyZW1lbnQgPSAwXG4gICAgdGhpcy5yZWZsZWN0aXZlQ2lyY2xlcyA9IFtdXG4gICAgdGhpcy5kcmF3aW5nUG9pbnRzID0gW11cbiAgICBzZWVkUmFuZG9tKHRoaXMudnMuc2VlZC52YWx1ZSlcbiAgICAvLyB0aGlzLnZzLnN0b3BBZnRlci5zZXRWYWx1ZShNYXRoLm1pbih0aGlzLnZzLnN0b3BBZnRlci52YWx1ZSwgdGhpcy52cy5saW5lcy52YWx1ZSAvIDIwKSwgdHJ1ZSlcblxuICAgIGxldCBpID0gMFxuICAgIHdoaWxlIChpIDwgdGhpcy52cy5jaXJjbGVzLnZhbHVlKSB7XG4gICAgICBjb25zdCByYWQgPSByYW5kRmxvYXRSYW5nZSg1LCAyMClcbiAgICAgIGNvbnN0IHBvcyA9IG5ldyBQb2ludChyYW5kRmxvYXRSYW5nZSh0aGlzLmN3IC0gcmFkICogMiwgcmFkKSwgcmFuZEZsb2F0UmFuZ2UodGhpcy5jaCAtIHJhZCAqIDIsIHJhZCkpXG4gICAgICBpZiAoIWNpcmNsZU92ZXJsYXBzQ2lyY2xlcyhbcG9zLCByYWRdLCAuLi50aGlzLnJlZmxlY3RpdmVDaXJjbGVzKSkge1xuICAgICAgICB0aGlzLnJlZmxlY3RpdmVDaXJjbGVzLnB1c2goW3BvcywgcmFkXSlcbiAgICAgICAgLy8gdGhpcy5jdHguc3Ryb2tlQ2lyY2xlKHBvcywgcmFkKVxuICAgICAgICBpKytcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzdGFydGluZ0luc2lkZUNpcmNsZSA9IHBvaW50SW5DaXJjbGVzKHRoaXMuY3AsIC4uLnRoaXMucmVmbGVjdGl2ZUNpcmNsZXMpXG4gICAgY29uc3Qgc2VnQW5nbGUgPSAoTWF0aC5QSSAqIDIpIC8gdGhpcy52cy5saW5lcy52YWx1ZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52cy5saW5lcy52YWx1ZTsgaSsrKSB7XG4gICAgICBjb25zdCBsaW5lQW5nbGUgPSBzZWdBbmdsZSAqIGkgKyByYW5kRmxvYXQodGhpcy52cy5saW5lQW5nbGVXb25rLnZhbHVlKSAqIHNlZ0FuZ2xlXG4gICAgICB0aGlzLmRyYXdpbmdQb2ludHMucHVzaChbdGhpcy5jcCwgbGluZUFuZ2xlLCBzdGFydGluZ0luc2lkZUNpcmNsZV0pXG4gICAgfVxuICB9XG5cbiAgZHJhd0xpbmVzKGRyYXdpbmdQb2ludHM6IHR5cGVvZiB0aGlzLmRyYXdpbmdQb2ludHMpIHtcbiAgICBmb3IgKGNvbnN0IFtwdCwgYW5nbGUsIGluc2lkZVNoYXBlXSBvZiBkcmF3aW5nUG9pbnRzKSB7XG4gICAgICBjb25zdCBsaW5lOiBMaW5lID0gW3B0LCBwdC5tb3ZlQWxvbmdBbmdsZShhbmdsZSwgMTAwMCldXG4gICAgICBsZXQgaW50ZXJzZWN0aW9uUG9pbnRzOiBbaW50ZXJzZWN0aW9uOiBQb2ludCwgY2lyY2xlOiBQb2ludCwgcmFkaXVzOiBudW1iZXJdW10gPSBbXVxuICAgICAgZm9yIChjb25zdCBbcG9zLCByYWRdIG9mIHRoaXMucmVmbGVjdGl2ZUNpcmNsZXMpIHtcbiAgICAgICAgY29uc3QgbGluZUFuZ2xlQ2lyY2xlUG9zRGlmZiA9IGFuZ2xlRGlmZihhbmdsZSwgbGluZVswXS5hbmdsZVRvKHBvcykpXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdhbmdsZSB0byBjaXJjbGU6JywgcmFkVG9EZWcobGluZUFuZ2xlQ2lyY2xlUG9zRGlmZiwgdHJ1ZSkpXG4gICAgICAgIGlmIChsaW5lQW5nbGVDaXJjbGVQb3NEaWZmID4gZGVnVG9SYWQoOTApIHx8IGxpbmVBbmdsZUNpcmNsZVBvc0RpZmYgPCBkZWdUb1JhZCgtOTApKSBjb250aW51ZVxuICAgICAgICBmb3IgKGNvbnN0IGludGVyc2VjdGlvblBvaW50IG9mIGdldFBvaW50c1doZXJlTGluZUludGVyc2VjdHNDaXJjbGUobGluZSwgcG9zLCByYWQpKSB7XG4gICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRzLnB1c2goW2ludGVyc2VjdGlvblBvaW50LCBwb3MsIHJhZF0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludHMubGVuZ3RoKSB7XG4gICAgICAgIC8vIGlmICghcHQuZXF1YWxzKHRoaXMuY3ApKSB7XG4gICAgICAgIC8vICAgaW50ZXJzZWN0aW9uUG9pbnRzLmZvckVhY2goKFtpcHQsIHBvcywgcmFkXSkgPT4ge1xuICAgICAgICAvLyAgICAgLy8gZGVidWdEb3QodGhpcy5jdHgsIGlwdCwgJ3JlZCcpXG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhpcHQsIHB0LmRpc3RhbmNlVG8oaXB0KSlcbiAgICAgICAgLy8gICB9KVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgY29uc3QgY2xvc2VzdFB0ID0gZ2V0Q2xvc2VzdEJ1dE5vdFNhbWVQb2ludChwdCwgLi4uaW50ZXJzZWN0aW9uUG9pbnRzLm1hcCgoW3B0XSkgPT4gcHQpKVxuICAgICAgICBjb25zdCBbLCBjaXJjbGVQb3MsIHJhZGl1c10gPSBpbnRlcnNlY3Rpb25Qb2ludHMuZmluZCgoW3B0XSkgPT4gcHQgPT09IGNsb3Nlc3RQdCkhXG4gICAgICAgIGxpbmVbMV0gPSBjbG9zZXN0UHRcblxuICAgICAgICAvLyBub3JtYWxcbiAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uQW5nbGUgPSBjaXJjbGVQb3MuYW5nbGVUbyhjbG9zZXN0UHQpXG4gICAgICAgIC8vIHRoaXMuY3R4LnN0cm9rZUxpbmUoLi4uW3B0LCBwdC5jbG9uZSgpLm1vdmVBbG9uZ0FuZ2xlKGludGVyc2VjdGlvbkFuZ2xlLCAyKV0pXG5cbiAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uQW5nbGVEaWZmID0gc21hbGxlc3RBbmdsZURpZmYoaW50ZXJzZWN0aW9uQW5nbGUsIGFuZ2xlICsgTWF0aC5QSSlcblxuICAgICAgICBjb25zdCByZWZsZWN0aW9uQW5nbGUgPSBpbnRlcnNlY3Rpb25BbmdsZSArIGludGVyc2VjdGlvbkFuZ2xlRGlmZiArIChpbnNpZGVTaGFwZSA/IE1hdGguUEkgOiAwKVxuICAgICAgICAvLyB0aGlzLmN0eC5zdHJva2VMaW5lKC4uLltwdCwgcHQuY2xvbmUoKS5tb3ZlQWxvbmdBbmdsZShyZWZsZWN0aW9uQW5nbGUsIDgpXSlcbiAgICAgICAgLy8gaWYgKCFpbnNpZGVTaGFwZSkgdGhpcy5kcmF3aW5nUG9pbnRzLnB1c2goW2Nsb3Nlc3RQdC5jbG9uZSgpLCByZWZsZWN0aW9uQW5nbGUsIGZhbHNlXSlcblxuICAgICAgICAvKlxuICAgICAgcmVmcmFjdGlvbiBpbmRleCA9IDEuMzNcbiAgICAgIGluY29taW5nIGFuZ2xlID0gNDVkZWdcbiAgICAgIFxuICAgICAgc2luKDQ1KSA9IDEuMzMgKiBzaW4ozphyKVxuICAgICAgc2luKDQ1KSAvIDEuMzMgPSBzaW4ozphyKVxuICAgICAgXG4gICAgICBhc2luKHNpbig0NSkgLyAxLjMzKSA9IM6YclxuICAgICAgKi9cblxuICAgICAgICBjb25zdCByZWZyYWN0aW9uQW5nbGUgPVxuICAgICAgICAgIGludGVyc2VjdGlvbkFuZ2xlICsgTWF0aC5QSSAtIE1hdGguYXNpbihNYXRoLnNpbihpbnRlcnNlY3Rpb25BbmdsZURpZmYpIC8gdGhpcy52cy5yZWZyYWN0aW9uSW5kZXgudmFsdWUpXG4gICAgICAgIC8vIHRoaXMuY3R4LnN0cm9rZUxpbmUoLi4uW2Nsb3Nlc3RQdCwgY2xvc2VzdFB0LmNsb25lKCkubW92ZUFsb25nQW5nbGUocmVmcmFjdGlvbkFuZ2xlLCA4KV0pXG4gICAgICAgIHRoaXMuZHJhd2luZ1BvaW50cy5wdXNoKFtjbG9zZXN0UHQuY2xvbmUoKSwgcmVmcmFjdGlvbkFuZ2xlLCB0cnVlXSlcblxuICAgICAgICAvLyB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IGluc2lkZVNoYXBlID8gJ3JlZCcgOiAnYmxhY2snXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZUxpbmUoLi4ubGluZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gaW5zaWRlU2hhcGUgPyAncmVkJyA6ICdibGFjaydcbiAgICAgICAgLy8gdGhpcy5jdHguc3Ryb2tlTGluZSguLi5saW5lKVxuICAgICAgfVxuICAgICAgLy8gZGVidWdnZXJcbiAgICB9XG4gIH1cblxuICBkcmF3KGluY3JlbWVudDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaW5jcmVtZW50ID49IHRoaXMudnMuc3RvcEFmdGVyLnZhbHVlKSByZXR1cm5cbiAgICBjb25zdCBkcmF3aW5nUG9pbnRzID0gWy4uLnRoaXMuZHJhd2luZ1BvaW50c11cbiAgICB0aGlzLmRyYXdpbmdQb2ludHMgPSBbXVxuICAgIHRoaXMuZHJhd0xpbmVzKGRyYXdpbmdQb2ludHMpXG4gICAgdGhpcy5pbmNyZW1lbnQrK1xuICB9XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi4vUG9pbnQnXG5pbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuLi9Ta2V0Y2gnXG5pbXBvcnQgeyBwZXJsaW4yIH0gZnJvbSAnLi4vdXRpbHMvbm9pc2UnXG5pbXBvcnQgeyBkZWdUb1JhZCwgbm9ybWFsaXplUmFkaWFuLCByYW5kRmxvYXQsIHJhbmRGbG9hdFJhbmdlLCByYW5kSW50LCByYW5kSW50UmFuZ2UsIHdyYXAgfSBmcm9tICcuLi91dGlscy9udW1iZXJVdGlscydcbmltcG9ydCB7IHJhbmRvbSwgc2VlZFJhbmRvbSB9IGZyb20gJy4uL3V0aWxzL3JhbmRvbSdcbmltcG9ydCBSYW5nZSBmcm9tICcuL3Rvb2xzL1JhbmdlJ1xuXG5pbXBvcnQgKiBhcyBDbGlwcGVyTGliIGZyb20gJy4uL2NsaXBwZXJfdW5taW5pZmllZCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3V0b3V0VGVzdCBleHRlbmRzIFNrZXRjaCB7XG4gIC8vIHN0YXRpYyBnZW5lcmF0ZUdDb2RlID0gZmFsc2VcbiAgc3RhdGljIGVuYWJsZUN1dG91dHMgPSB0cnVlXG5cbiAgaW5pdCgpIHt9XG5cbiAgaW5jcmVtZW50ID0gMFxuXG4gIGluaXREcmF3KCk6IHZvaWQge1xuICAgIHRoaXMuY3R4LnN0cm9rZVJlY3QoMjUsIDI1LCAyNSwgMjUpXG4gICAgdmFyIGJvdW5kcyA9IHRoaXMuY3R4LnBhdGg/LmdldEJvdW5kcygpXG4gICAgY29uc29sZS5sb2coJ2JvdW5kcycsIGJvdW5kcylcbiAgICB0aGlzLmN0eC5zdHJva2VSZWN0KGJvdW5kcy5sZWZ0LCBib3VuZHMudG9wLCBib3VuZHMucmlnaHQgLSBib3VuZHMubGVmdCwgYm91bmRzLmJvdHRvbSAtIGJvdW5kcy50b3AsIHtcbiAgICAgIGRlYnVnOiB0cnVlLFxuICAgIH0pXG4gICAgY29uc29sZS5sb2coJ3BvaW50cycsIHRoaXMuY3R4LnBhdGg/LmdldFBvaW50cygpKVxuICAgIGNvbnNvbGUubG9nKCdjbG9zZWQnLCB0aGlzLmN0eC5wYXRoPy5jdXJyZW50LmlzQ2xvc2VkKCkpXG5cbiAgICB0aGlzLmN0eC5zYXZlKClcbiAgICB0aGlzLmN0eC50cmFuc2xhdGUoMjAsIDIwKVxuICAgIHRoaXMuY3R4LnN0cm9rZVJlY3QoMCwgMCwgMTUsIDE1LCB7IGN1dG91dDogdHJ1ZSB9KVxuICAgIHRoaXMuY3R4LnJlc3RvcmUoKVxuXG4gICAgdGhpcy5jdHguc2F2ZSgpXG4gICAgdGhpcy5jdHgudHJhbnNsYXRlKDI1LCAyNSlcbiAgICB0aGlzLmN0eC5yb3RhdGUoZGVnVG9SYWQoNSkpXG4gICAgdGhpcy5jdHguc3Ryb2tlUmVjdCgwLCAwLCAyNSwgMjUsIHsgY3V0b3V0OiB0cnVlIH0pXG4gICAgdGhpcy5jdHgucmVzdG9yZSgpXG4gICAgdmFyIGJvdW5kcyA9IHRoaXMuY3R4LnBhdGg/LmdldEJvdW5kcygpXG4gICAgY29uc29sZS5sb2coJ2JvdW5kcycsIGJvdW5kcylcbiAgICBjb25zb2xlLmxvZygncG9pbnRzJywgdGhpcy5jdHgucGF0aD8uZ2V0UG9pbnRzKCkpXG4gICAgY29uc29sZS5sb2coJ2Nsb3NlZCcsIHRoaXMuY3R4LnBhdGg/LmN1cnJlbnQuaXNDbG9zZWQoKSlcblxuICAgIHRoaXMuY3R4LnN0cm9rZVJlY3QoYm91bmRzLmxlZnQsIGJvdW5kcy50b3AsIGJvdW5kcy5yaWdodCAtIGJvdW5kcy5sZWZ0LCBib3VuZHMuYm90dG9tIC0gYm91bmRzLnRvcCwge1xuICAgICAgZGVidWc6IHRydWUsXG4gICAgfSlcblxuICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgdGhpcy5jdHgubW92ZVRvKDMwICsgNDAsIDI1KVxuICAgIHRoaXMuY3R4LmxpbmVUbygzNSArIDQwLCAyMClcbiAgICB0aGlzLmN0eC5saW5lVG8oNDAgKyA0MCwgMjUpXG4gICAgdGhpcy5jdHgubGluZVRvKDQwICsgNDAsIDQwKVxuICAgIHRoaXMuY3R4LmxpbmVUbygzMCArIDQwLCA0MClcbiAgICB0aGlzLmN0eC5saW5lVG8oMzAgKyA0MCwgMjUpXG4gICAgdGhpcy5jdHguc3Ryb2tlKHsgY3V0b3V0OiB0cnVlIH0pXG4gICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgICB2YXIgYm91bmRzID0gdGhpcy5jdHgucGF0aD8uZ2V0Qm91bmRzKClcbiAgICBjb25zb2xlLmxvZygnYm91bmRzJywgYm91bmRzKVxuICAgIHRoaXMuY3R4LnN0cm9rZVJlY3QoYm91bmRzLmxlZnQsIGJvdW5kcy50b3AsIGJvdW5kcy5yaWdodCAtIGJvdW5kcy5sZWZ0LCBib3VuZHMuYm90dG9tIC0gYm91bmRzLnRvcCwge1xuICAgICAgZGVidWc6IHRydWUsXG4gICAgfSlcbiAgICBjb25zb2xlLmxvZygncG9pbnRzJywgdGhpcy5jdHgucGF0aD8uZ2V0UG9pbnRzKCkpXG4gICAgY29uc29sZS5sb2coJ2Nsb3NlZCcsIHRoaXMuY3R4LnBhdGg/LmN1cnJlbnQuaXNDbG9zZWQoKSlcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHt9XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi4vLi4vUG9pbnQnXG5cbmludGVyZmFjZSBPc2NPcHRpb25zIHtcbiAgcmFkaXVzPzogbnVtYmVyIHwgUG9pbnQgfCAoKGk6IG51bWJlcikgPT4gUG9pbnQgfCBudW1iZXIpXG4gIG9mZnNldD86IFBvaW50XG4gIHNwZWVkPzogbnVtYmVyIHwgKChpOiBudW1iZXIpID0+IG51bWJlcilcbiAgcGhhc2U/OiBudW1iZXJcbiAgb2Zmc2V0UGhhc2U/OiBudW1iZXJcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3NjIHtcbiAgcHVibGljIHZhbHVlID0gbmV3IFBvaW50KClcbiAgcHVibGljIHJhZGl1czogUG9pbnRcbiAgcHVibGljIG9mZnNldDogUG9pbnRcbiAgcHVibGljIHNwZWVkOiBudW1iZXJcbiAgcHVibGljIHBoYXNlOiBudW1iZXJcbiAgcHVibGljIG9mZnNldFBoYXNlID0gLU1hdGguUEkgLyAyIC8vIHN0YXJ0IGRyYXdpbmcgZnJvbSB0b3AgbWlkZGxlXG4gIHByaXZhdGUgdGhldGE6IFBvaW50XG4gIHByaXZhdGUgc3BlZWRGdW5jOiBFeGNsdWRlPE9zY09wdGlvbnNbJ3NwZWVkJ10sIG51bWJlcj5cbiAgcHJpdmF0ZSByYWRpdXNGdW5jOiBFeGNsdWRlPE9zY09wdGlvbnNbJ3JhZGl1cyddLCBudW1iZXIgfCBQb2ludD5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogT3NjT3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zcGVlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5zcGVlZEZ1bmMgPSBvcHRpb25zLnNwZWVkXG4gICAgICB0aGlzLnNwZWVkID0gdGhpcy5zcGVlZEZ1bmMoMClcbiAgICB9IGVsc2UgdGhpcy5zcGVlZCA9IG9wdGlvbnMuc3BlZWQgfHwgTWF0aC5QSSAvIDE4MFxuXG4gICAgaWYgKG9wdGlvbnMucmFkaXVzID09PSB1bmRlZmluZWQpIHRoaXMucmFkaXVzID0gbmV3IFBvaW50KDEsIDEpXG4gICAgZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMucmFkaXVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLnJhZGl1c0Z1bmMgPSBvcHRpb25zLnJhZGl1c1xuICAgICAgY29uc3QgcmFkaXVzID0gdGhpcy5yYWRpdXNGdW5jKDApXG4gICAgICB0aGlzLnJhZGl1cyA9IHR5cGVvZiByYWRpdXMgPT09ICdudW1iZXInID8gbmV3IFBvaW50KHJhZGl1cywgcmFkaXVzKSA6IHJhZGl1c1xuICAgIH0gZWxzZVxuICAgICAgdGhpcy5yYWRpdXMgPVxuICAgICAgICB0eXBlb2Ygb3B0aW9ucy5yYWRpdXMgPT09ICdudW1iZXInID8gbmV3IFBvaW50KG9wdGlvbnMucmFkaXVzLCBvcHRpb25zLnJhZGl1cykgOiBvcHRpb25zLnJhZGl1cy5jbG9uZSgpXG5cbiAgICB0aGlzLm9mZnNldCA9IG9wdGlvbnMub2Zmc2V0ID8gb3B0aW9ucy5vZmZzZXQuY2xvbmUoKSA6IG5ldyBQb2ludCgwLCAwKVxuICAgIHRoaXMub2Zmc2V0UGhhc2UgPSBvcHRpb25zLm9mZnNldFBoYXNlIHx8IDBcbiAgICB0aGlzLnBoYXNlID0gb3B0aW9ucy5waGFzZSB8fCAwXG4gICAgdGhpcy50aGV0YSA9IG5ldyBQb2ludCh0aGlzLnBoYXNlLCB0aGlzLnBoYXNlKVxuICAgIHRoaXMucHJvY2VzcygpXG4gIH1cbiAgcHVibGljIGdldCB4KCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlLnhcbiAgfVxuICBwdWJsaWMgZ2V0IHkoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUueVxuICB9XG4gIHB1YmxpYyByZXNldCgpIHtcbiAgICB0aGlzLnRoZXRhID0gbmV3IFBvaW50KHRoaXMucGhhc2UsIHRoaXMucGhhc2UpXG4gIH1cbiAgcHVibGljIHN0ZXAoaW5jcmVtZW50OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5zcGVlZEZ1bmMpIHtcbiAgICAgIGNvbnN0IHZhbCA9IHRoaXMuc3BlZWRGdW5jKGluY3JlbWVudClcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKSkgdGhpcy5zcGVlZCA9IHZhbFxuICAgIH1cbiAgICBpZiAodGhpcy5yYWRpdXNGdW5jKSB7XG4gICAgICBjb25zdCB2YWwgPSB0aGlzLnJhZGl1c0Z1bmMoaW5jcmVtZW50KVxuICAgICAgdGhpcy5yYWRpdXMgPSB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyA/IG5ldyBQb2ludCh2YWwsIHZhbCkgOiB2YWxcbiAgICB9XG4gICAgdGhpcy50aGV0YS54ID0gdGhpcy50aGV0YS54ICsgdGhpcy5zcGVlZFxuICAgIHRoaXMudGhldGEueSA9IHRoaXMudGhldGEueSArIHRoaXMuc3BlZWRcbiAgICB0aGlzLnByb2Nlc3MoKVxuICB9XG4gIHByaXZhdGUgcHJvY2VzcygpIHtcbiAgICB0aGlzLnZhbHVlLnggPSB0aGlzLm9mZnNldC54ICsgTWF0aC5jb3ModGhpcy5vZmZzZXRQaGFzZSArIHRoaXMudGhldGEueCkgKiB0aGlzLnJhZGl1cy54XG4gICAgdGhpcy52YWx1ZS55ID0gdGhpcy5vZmZzZXQueSArIE1hdGguc2luKHRoaXMub2Zmc2V0UGhhc2UgKyB0aGlzLnRoZXRhLnkpICogdGhpcy5yYWRpdXMueVxuICAgIGlmIChpc05hTih0aGlzLnZhbHVlLngpKSBkZWJ1Z2dlclxuICB9XG59XG4iLCJpbXBvcnQgeyByYW5kSW50UmFuZ2UsIHdyYXAgfSBmcm9tICcuLi8uLi91dGlscy9udW1iZXJVdGlscydcblxubGV0IGNvdW50ZXIgPSAwXG5cbmludGVyZmFjZSBSYW5nZU9wdGlvbnMge1xuICBuYW1lPzogc3RyaW5nXG4gIGluaXRpYWxWYWx1ZT86IG51bWJlclxuICBtaW46IG51bWJlclxuICBtYXg6IG51bWJlclxuICBzdGVwPzogbnVtYmVyXG4gIGRpc2FibGVSYW5kb21pemU/OiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhbmdlIHtcbiAgcHVibGljIG5hbWU6IHN0cmluZ1xuICBwdWJsaWMgbWluOiBudW1iZXJcbiAgcHVibGljIG1heDogbnVtYmVyXG4gIHB1YmxpYyBzdGVwOiBudW1iZXJcbiAgcHVibGljIGlucHV0RWxlbTogSFRNTElucHV0RWxlbWVudFxuICBwcml2YXRlIF92YWx1ZTogbnVtYmVyXG4gIHByaXZhdGUgX2Rpc2FibGVSYW5kb21pemU6IGJvb2xlYW5cblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBSYW5nZU9wdGlvbnMpIHtcbiAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgYFZhci0ke2NvdW50ZXIrK31gXG4gICAgdGhpcy5taW4gPSBvcHRpb25zLm1pblxuICAgIHRoaXMubWF4ID0gb3B0aW9ucy5tYXhcbiAgICB0aGlzLnN0ZXAgPSBvcHRpb25zLnN0ZXAgfHwgMC4wMVxuICAgIHRoaXMuX3ZhbHVlID0gb3B0aW9ucy5pbml0aWFsVmFsdWUgfHwgb3B0aW9ucy5taW5cbiAgICB0aGlzLl9kaXNhYmxlUmFuZG9taXplID0gb3B0aW9ucy5kaXNhYmxlUmFuZG9taXplIHx8IGZhbHNlXG4gIH1cbiAgcHVibGljIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVcbiAgfVxuICBwdWJsaWMgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl92YWx1ZSA9IHdyYXAodmFsdWUsIHRoaXMubWF4LCB0aGlzLm1pbilcbiAgfVxuICBwdWJsaWMgc2V0VmFsdWUodmFsdWU6IG51bWJlciwgdXBkYXRlSW5wdXQ6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgaWYgKHVwZGF0ZUlucHV0ICYmIHRoaXMuaW5wdXRFbGVtKSB0aGlzLmlucHV0RWxlbS52YWx1ZSA9IFN0cmluZyh0aGlzLnZhbHVlKVxuICB9XG4gIHB1YmxpYyByYW5kb21pemUoKSB7XG4gICAgaWYgKHRoaXMuX2Rpc2FibGVSYW5kb21pemUpIHJldHVyblxuICAgIGNvbnN0IHBpZWNlcyA9IE1hdGgucm91bmQoKHRoaXMubWF4IC0gdGhpcy5taW4pIC8gdGhpcy5zdGVwKVxuICAgIGxldCB2YWx1ZSA9IHRoaXMubWluICsgcmFuZEludFJhbmdlKHBpZWNlcykgKiB0aGlzLnN0ZXBcbiAgICBpZiAodGhpcy5zdGVwID49IDEpIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSlcbiAgICB0aGlzLnNldFZhbHVlKHZhbHVlLCB0cnVlKVxuICB9XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi4vUG9pbnQnXG5pbXBvcnQgeyBMaW5lIH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyBzaWduIH0gZnJvbSAnLi9udW1iZXJVdGlscydcblxuZXhwb3J0IGNvbnN0IGxpbmVzSW50ZXJzZWN0ID0gKGxpbmUxOiBMaW5lLCBsaW5lMjogTGluZSk6IGJvb2xlYW4gPT4ge1xuICBjb25zdCBbYTEsIGEyXSA9IGxpbmUxXG4gIGNvbnN0IFtiMSwgYjJdID0gbGluZTJcblxuICBjb25zdCBkZW5vbWluYXRvciA9IChiMi55IC0gYjEueSkgKiAoYTIueCAtIGExLngpIC0gKGIyLnggLSBiMS54KSAqIChhMi55IC0gYTEueSlcbiAgaWYgKGRlbm9taW5hdG9yID09PSAwKSByZXR1cm4gZmFsc2VcblxuICBjb25zdCB1YSA9ICgoYjIueCAtIGIxLngpICogKGExLnkgLSBiMS55KSAtIChiMi55IC0gYjEueSkgKiAoYTEueCAtIGIxLngpKSAvIGRlbm9taW5hdG9yXG4gIGNvbnN0IHViID0gKChhMi54IC0gYTEueCkgKiAoYTEueSAtIGIxLnkpIC0gKGEyLnkgLSBhMS55KSAqIChhMS54IC0gYjEueCkpIC8gZGVub21pbmF0b3JcblxuICByZXR1cm4gdWEgPj0gMCAmJiB1YSA8PSAxICYmIHViID49IDAgJiYgdWIgPD0gMVxufVxuXG5leHBvcnQgY29uc3QgZ2V0TGluZUludGVyc2VjdGlvblBvaW50ID0gKGxpbmUxOiBMaW5lLCBsaW5lMjogTGluZSk6IFBvaW50IHwgbnVsbCA9PiB7XG4gIGNvbnN0IFtsMXAxLCBsMXAyXSA9IGxpbmUxXG4gIGNvbnN0IFtsMnAxLCBsMnAyXSA9IGxpbmUyXG5cbiAgY29uc3QgZGVub21pbmF0b3IgPSAobDJwMi55IC0gbDJwMS55KSAqIChsMXAyLnggLSBsMXAxLngpIC0gKGwycDIueCAtIGwycDEueCkgKiAobDFwMi55IC0gbDFwMS55KVxuICBpZiAoZGVub21pbmF0b3IgPT09IDApIHJldHVybiBudWxsXG5cbiAgY29uc3QgdWEgPSAoKGwycDIueCAtIGwycDEueCkgKiAobDFwMS55IC0gbDJwMS55KSAtIChsMnAyLnkgLSBsMnAxLnkpICogKGwxcDEueCAtIGwycDEueCkpIC8gZGVub21pbmF0b3JcbiAgY29uc3QgdWIgPSAoKGwxcDIueCAtIGwxcDEueCkgKiAobDFwMS55IC0gbDJwMS55KSAtIChsMXAyLnkgLSBsMXAxLnkpICogKGwxcDEueCAtIGwycDEueCkpIC8gZGVub21pbmF0b3JcblxuICBpZiAodWEgPj0gMCAmJiB1YSA8PSAxICYmIHViID49IDAgJiYgdWIgPD0gMSkge1xuICAgIGNvbnN0IHggPSBsMXAxLnggKyB1YSAqIChsMXAyLnggLSBsMXAxLngpXG4gICAgY29uc3QgeSA9IGwxcDEueSArIHVhICogKGwxcDIueSAtIGwxcDEueSlcbiAgICByZXR1cm4gbmV3IFBvaW50KHgsIHkpXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG5leHBvcnQgY29uc3QgZ2V0TGluZUludGVyc2VjdGlvblBvaW50cyA9IChsaW5lOiBMaW5lLCAuLi5saW5lczogTGluZVtdKSA9PiB7XG4gIGNvbnN0IHBvaW50c0FuZExpbmVzOiBbUG9pbnQsIExpbmVdW10gPSBbXVxuICBmb3IgKGNvbnN0IGwgb2YgbGluZXMpIHtcbiAgICBjb25zdCBwdCA9IGdldExpbmVJbnRlcnNlY3Rpb25Qb2ludChsaW5lLCBsKVxuICAgIGlmIChwdCkgcG9pbnRzQW5kTGluZXMucHVzaChbcHQsIGxdKVxuICB9XG4gIHJldHVybiBwb2ludHNBbmRMaW5lc1xufVxuXG5leHBvcnQgY29uc3QgZ2V0RGlzdGFuY2VzVG9Qb2ludCA9IChwdDogUG9pbnQsIC4uLnB0czogW1BvaW50XSB8IFBvaW50W10pOiBbUG9pbnQsIG51bWJlcl1bXSA9PlxuICBwdHMubWFwKChwKSA9PiBbcCwgcHQuZGlzdGFuY2VUbyhwKV0pXG5cbmV4cG9ydCBjb25zdCBnZXRDbG9zZXN0UG9pbnQgPSAocHQ6IFBvaW50LCAuLi5wdHM6IFtQb2ludF0gfCBQb2ludFtdKTogUG9pbnQgPT5cbiAgZ2V0RGlzdGFuY2VzVG9Qb2ludChwdCwgLi4ucHRzKS5zb3J0KChhLCBiKSA9PiBhWzFdIC0gYlsxXSlbMF1bMF1cblxuZXhwb3J0IGNvbnN0IGdldENsb3Nlc3RCdXROb3RTYW1lUG9pbnQgPSAocHQ6IFBvaW50LCAuLi5wdHM6IFtQb2ludF0gfCBQb2ludFtdKTogUG9pbnQgPT4ge1xuICBjb25zdCBwdHNXaXRoRGlzdCA9IGdldERpc3RhbmNlc1RvUG9pbnQocHQsIC4uLnB0cylcbiAgICAuc29ydCgoYSwgYikgPT4gYVsxXSAtIGJbMV0pXG4gICAgLmZpbHRlcigocCkgPT4gcFsxXSA+IDAuMDAwMSlcbiAgcmV0dXJuIHB0c1dpdGhEaXN0WzBdWzBdXG59XG5cbmV4cG9ydCBjb25zdCBsaW5lSW50ZXJzZWN0c0NpcmNsZSA9IChbcDEsIHAyXTogTGluZSwgcHQ6IFBvaW50LCByYWRpdXM6IG51bWJlcikgPT4ge1xuICBsZXQgeDEgPSBwMS5jbG9uZSgpLnN1YnRyYWN0KHB0KVxuICBsZXQgeDIgPSBwMi5jbG9uZSgpLnN1YnRyYWN0KHB0KVxuXG4gIGxldCBkdiA9IHgyLmNsb25lKCkuc3VidHJhY3QoeDEpXG4gIGxldCBkciA9IGR2Lm1hZ25pdHVkZSgpXG4gIGxldCBEID0geDEueCAqIHgyLnkgLSB4Mi54ICogeDEueVxuXG4gIC8vIGV2YWx1YXRlIGlmIHRoZXJlIGlzIGFuIGludGVyc2VjdGlvblxuICBsZXQgZGkgPSByYWRpdXMgKiByYWRpdXMgKiBkciAqIGRyIC0gRCAqIERcbiAgaWYgKGRpIDwgMC4wKSByZXR1cm4gZmFsc2VcblxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgY29uc3QgZ2V0UG9pbnRzV2hlcmVMaW5lSW50ZXJzZWN0c0NpcmNsZSA9IChbcDEsIHAyXTogTGluZSwgcHQ6IFBvaW50LCByYWRpdXM6IG51bWJlcikgPT4ge1xuICBsZXQgeDEgPSBwMS5jbG9uZSgpLnN1YnRyYWN0KHB0KVxuICBsZXQgeDIgPSBwMi5jbG9uZSgpLnN1YnRyYWN0KHB0KVxuXG4gIGxldCBkdiA9IHgyLmNsb25lKCkuc3VidHJhY3QoeDEpXG4gIGxldCBkciA9IGR2Lm1hZ25pdHVkZSgpXG4gIGxldCBEID0geDEueCAqIHgyLnkgLSB4Mi54ICogeDEueVxuXG4gIC8vIGV2YWx1YXRlIGlmIHRoZXJlIGlzIGFuIGludGVyc2VjdGlvblxuICBsZXQgZGkgPSByYWRpdXMgKiByYWRpdXMgKiBkciAqIGRyIC0gRCAqIERcbiAgaWYgKGRpIDwgMC4wKSByZXR1cm4gW11cblxuICBsZXQgdCA9IE1hdGguc3FydChkaSlcblxuICBjb25zdCBpbnRlcnNlY3Rpb25Qb2ludHM6IFBvaW50W10gPSBbXVxuICBpbnRlcnNlY3Rpb25Qb2ludHMucHVzaChcbiAgICBuZXcgUG9pbnQoRCAqIGR2LnkgKyBzaWduKGR2LnkpICogZHYueCAqIHQsIC1EICogZHYueCArIE1hdGguYWJzKGR2LnkpICogdCkuZGl2aWRlKGRyICogZHIpLmFkZChwdClcbiAgKVxuICBpZiAoZGkgPiAwLjApIHtcbiAgICBpbnRlcnNlY3Rpb25Qb2ludHMucHVzaChcbiAgICAgIG5ldyBQb2ludChEICogZHYueSAtIHNpZ24oZHYueSkgKiBkdi54ICogdCwgLUQgKiBkdi54IC0gTWF0aC5hYnMoZHYueSkgKiB0KS5kaXZpZGUoZHIgKiBkcikuYWRkKHB0KVxuICAgIClcbiAgfVxuICByZXR1cm4gaW50ZXJzZWN0aW9uUG9pbnRzXG59XG5cbmV4cG9ydCBjb25zdCBwb2ludEluQ2lyY2xlID0gKHB0OiBQb2ludCwgY2lyY2xlUG9zOiBQb2ludCwgcmFkaXVzOiBudW1iZXIpID0+IHB0LmRpc3RhbmNlVG8oY2lyY2xlUG9zKSA8IHJhZGl1c1xuXG5leHBvcnQgY29uc3QgcG9pbnRJbkNpcmNsZXMgPSAocHQ6IFBvaW50LCAuLi5jaXJjbGVzOiBbcG9zOiBQb2ludCwgcmFkOiBudW1iZXJdW10pID0+IHtcbiAgZm9yIChjb25zdCBbcG9zLCByYWRdIG9mIGNpcmNsZXMpIHtcbiAgICBpZiAocG9pbnRJbkNpcmNsZShwdCwgcG9zLCByYWQpKSByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgY29uc3QgY2lyY2xlT3ZlcmxhcHNDaXJjbGUgPSAoXG4gIFtjaXJjbGUxUG9zLCBjaXJjbGUxUmFkXTogW1BvaW50LCBudW1iZXJdLFxuICBbY2lyY2xlMlBvcywgY2lyY2xlMlJhZF06IFtQb2ludCwgbnVtYmVyXVxuKSA9PiBjaXJjbGUxUG9zLmRpc3RhbmNlVG8oY2lyY2xlMlBvcykgPCBjaXJjbGUxUmFkICsgY2lyY2xlMlJhZFxuXG5leHBvcnQgY29uc3QgY2lyY2xlT3ZlcmxhcHNDaXJjbGVzID0gKFxuICBbY2lyY2xlUG9zLCBjaXJjbGVSYWRdOiBbUG9pbnQsIG51bWJlcl0sXG4gIC4uLmNpcmNsZXM6IFtwb3M6IFBvaW50LCByYWQ6IG51bWJlcl1bXVxuKSA9PiB7XG4gIGZvciAoY29uc3QgW3BvcywgcmFkXSBvZiBjaXJjbGVzKSB7XG4gICAgaWYgKGNpcmNsZU92ZXJsYXBzQ2lyY2xlKFtjaXJjbGVQb3MsIGNpcmNsZVJhZF0sIFtwb3MsIHJhZF0pKSByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuIiwiLypcbiAqIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2pvc2VwaGcvbm9pc2Vqc1xuICpcbiAqIEEgc3BlZWQtaW1wcm92ZWQgcGVybGluIGFuZCBzaW1wbGV4IG5vaXNlIGFsZ29yaXRobXMgZm9yIDJELlxuICpcbiAqIEJhc2VkIG9uIGV4YW1wbGUgY29kZSBieSBTdGVmYW4gR3VzdGF2c29uIChzdGVndUBpdG4ubGl1LnNlKS5cbiAqIE9wdGltaXNhdGlvbnMgYnkgUGV0ZXIgRWFzdG1hbiAocGVhc3RtYW5AZHJpenpsZS5zdGFuZm9yZC5lZHUpLlxuICogQmV0dGVyIHJhbmsgb3JkZXJpbmcgbWV0aG9kIGJ5IFN0ZWZhbiBHdXN0YXZzb24gaW4gMjAxMi5cbiAqIENvbnZlcnRlZCB0byBKYXZhc2NyaXB0IGJ5IEpvc2VwaCBHZW50bGUuXG4gKlxuICogVmVyc2lvbiAyMDEyLTAzLTA5XG4gKlxuICogVGhpcyBjb2RlIHdhcyBwbGFjZWQgaW4gdGhlIHB1YmxpYyBkb21haW4gYnkgaXRzIG9yaWdpbmFsIGF1dGhvcixcbiAqIFN0ZWZhbiBHdXN0YXZzb24uIFlvdSBtYXkgdXNlIGl0IGFzIHlvdSBzZWUgZml0LCBidXRcbiAqIGF0dHJpYnV0aW9uIGlzIGFwcHJlY2lhdGVkLlxuICpcbiAqL1xuXG5jbGFzcyBHcmFkIHtcbiAgeDogbnVtYmVyXG4gIHk6IG51bWJlclxuICB6OiBudW1iZXJcbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcikge1xuICAgIHRoaXMueCA9IHhcbiAgICB0aGlzLnkgPSB5XG4gICAgdGhpcy56ID0gelxuICB9XG4gIHB1YmxpYyBkb3QyID0gKHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyID0+IHRoaXMueCAqIHggKyB0aGlzLnkgKiB5XG4gIHB1YmxpYyBkb3QzID0gKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBudW1iZXIgPT4gdGhpcy54ICogeCArIHRoaXMueSAqIHkgKyB0aGlzLnogKiB6XG59XG5cbmNvbnN0IGdyYWQzID0gW1xuICBuZXcgR3JhZCgxLCAxLCAwKSxcbiAgbmV3IEdyYWQoLTEsIDEsIDApLFxuICBuZXcgR3JhZCgxLCAtMSwgMCksXG4gIG5ldyBHcmFkKC0xLCAtMSwgMCksIC8vIHByZXR0aWVyLWlnbm9yZVxuICBuZXcgR3JhZCgxLCAwLCAxKSxcbiAgbmV3IEdyYWQoLTEsIDAsIDEpLFxuICBuZXcgR3JhZCgxLCAwLCAtMSksXG4gIG5ldyBHcmFkKC0xLCAwLCAtMSksIC8vIHByZXR0aWVyLWlnbm9yZVxuICBuZXcgR3JhZCgwLCAxLCAxKSxcbiAgbmV3IEdyYWQoMCwgLTEsIDEpLFxuICBuZXcgR3JhZCgwLCAxLCAtMSksXG4gIG5ldyBHcmFkKDAsIC0xLCAtMSksIC8vIHByZXR0aWVyLWlnbm9yZVxuXVxuXG5jb25zdCBwID0gW1xuICAxNTEsIDE2MCwgMTM3LCA5MSwgOTAsIDE1LCAxMzEsIDEzLCAyMDEsIDk1LCA5NiwgNTMsIDE5NCwgMjMzLCA3LCAyMjUsIDE0MCwgMzYsIDEwMywgMzAsIDY5LCAxNDIsIDgsIDk5LCAzNywgMjQwLCAyMSxcbiAgMTAsIDIzLCAxOTAsIDYsIDE0OCwgMjQ3LCAxMjAsIDIzNCwgNzUsIDAsIDI2LCAxOTcsIDYyLCA5NCwgMjUyLCAyMTksIDIwMywgMTE3LCAzNSwgMTEsIDMyLCA1NywgMTc3LCAzMywgODgsIDIzNywgMTQ5LFxuICA1NiwgODcsIDE3NCwgMjAsIDEyNSwgMTM2LCAxNzEsIDE2OCwgNjgsIDE3NSwgNzQsIDE2NSwgNzEsIDEzNCwgMTM5LCA0OCwgMjcsIDE2NiwgNzcsIDE0NiwgMTU4LCAyMzEsIDgzLCAxMTEsIDIyOSxcbiAgMTIyLCA2MCwgMjExLCAxMzMsIDIzMCwgMjIwLCAxMDUsIDkyLCA0MSwgNTUsIDQ2LCAyNDUsIDQwLCAyNDQsIDEwMiwgMTQzLCA1NCwgNjUsIDI1LCA2MywgMTYxLCAxLCAyMTYsIDgwLCA3MywgMjA5LFxuICA3NiwgMTMyLCAxODcsIDIwOCwgODksIDE4LCAxNjksIDIwMCwgMTk2LCAxMzUsIDEzMCwgMTE2LCAxODgsIDE1OSwgODYsIDE2NCwgMTAwLCAxMDksIDE5OCwgMTczLCAxODYsIDMsIDY0LCA1MiwgMjE3LFxuICAyMjYsIDI1MCwgMTI0LCAxMjMsIDUsIDIwMiwgMzgsIDE0NywgMTE4LCAxMjYsIDI1NSwgODIsIDg1LCAyMTIsIDIwNywgMjA2LCA1OSwgMjI3LCA0NywgMTYsIDU4LCAxNywgMTgyLCAxODksIDI4LCA0MixcbiAgMjIzLCAxODMsIDE3MCwgMjEzLCAxMTksIDI0OCwgMTUyLCAyLCA0NCwgMTU0LCAxNjMsIDcwLCAyMjEsIDE1MywgMTAxLCAxNTUsIDE2NywgNDMsIDE3MiwgOSwgMTI5LCAyMiwgMzksIDI1MywgMTksIDk4LFxuICAxMDgsIDExMCwgNzksIDExMywgMjI0LCAyMzIsIDE3OCwgMTg1LCAxMTIsIDEwNCwgMjE4LCAyNDYsIDk3LCAyMjgsIDI1MSwgMzQsIDI0MiwgMTkzLCAyMzgsIDIxMCwgMTQ0LCAxMiwgMTkxLCAxNzksXG4gIDE2MiwgMjQxLCA4MSwgNTEsIDE0NSwgMjM1LCAyNDksIDE0LCAyMzksIDEwNywgNDksIDE5MiwgMjE0LCAzMSwgMTgxLCAxOTksIDEwNiwgMTU3LCAxODQsIDg0LCAyMDQsIDE3NiwgMTE1LCAxMjEsIDUwLFxuICA0NSwgMTI3LCA0LCAxNTAsIDI1NCwgMTM4LCAyMzYsIDIwNSwgOTMsIDIyMiwgMTE0LCA2NywgMjksIDI0LCA3MiwgMjQzLCAxNDEsIDEyOCwgMTk1LCA3OCwgNjYsIDIxNSwgNjEsIDE1NiwgMTgwLFxuXVxuXG4vLyBUbyByZW1vdmUgdGhlIG5lZWQgZm9yIGluZGV4IHdyYXBwaW5nLCBkb3VibGUgdGhlIHBlcm11dGF0aW9uIHRhYmxlIGxlbmd0aFxuY29uc3QgcGVybSA9IG5ldyBBcnJheSg1MTIpXG5jb25zdCBncmFkUCA9IG5ldyBBcnJheSg1MTIpXG5cbi8vIFRoaXMgaXNuJ3QgYSB2ZXJ5IGdvb2Qgc2VlZGluZyBmdW5jdGlvbiwgYnV0IGl0IHdvcmtzIG9rLiBJdCBzdXBwb3J0cyAyXjE2XG4vLyBkaWZmZXJlbnQgc2VlZCB2YWx1ZXMuIFdyaXRlIHNvbWV0aGluZyBiZXR0ZXIgaWYgeW91IG5lZWQgbW9yZSBzZWVkcy5cbmV4cG9ydCBjb25zdCBzZWVkTm9pc2UgPSAoc2VlZDogbnVtYmVyKSA9PiB7XG4gIGlmIChzZWVkID4gMCAmJiBzZWVkIDwgMSkge1xuICAgIC8vIFNjYWxlIHRoZSBzZWVkIG91dFxuICAgIHNlZWQgKj0gNjU1MzZcbiAgfVxuXG4gIHNlZWQgPSBNYXRoLmZsb29yKHNlZWQpXG4gIGlmIChzZWVkIDwgMjU2KSB7XG4gICAgc2VlZCB8PSBzZWVkIDw8IDhcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgICBjb25zdCB2ID0gaSAmIDEgPyBwW2ldIF4gKHNlZWQgJiAyNTUpIDogcFtpXSBeICgoc2VlZCA+PiA4KSAmIDI1NSlcbiAgICBwZXJtW2ldID0gcGVybVtpICsgMjU2XSA9IHZcbiAgICBncmFkUFtpXSA9IGdyYWRQW2kgKyAyNTZdID0gZ3JhZDNbdiAlIDEyXVxuICB9XG59XG5cbnNlZWROb2lzZSgwKVxuXG4vLyBTa2V3aW5nIGFuZCB1bnNrZXdpbmcgZmFjdG9ycyBmb3IgMiwgMywgYW5kIDQgZGltZW5zaW9uc1xuY29uc3QgRjIgPSAwLjUgKiAoTWF0aC5zcXJ0KDMpIC0gMSlcbmNvbnN0IEcyID0gKDMgLSBNYXRoLnNxcnQoMykpIC8gNlxuXG5jb25zdCBGMyA9IDEgLyAzXG5jb25zdCBHMyA9IDEgLyA2XG5cbi8vIDJEIHNpbXBsZXggbm9pc2VcbmV4cG9ydCBjb25zdCBzaW1wbGV4MiA9ICh4SW46IG51bWJlciwgeUluOiBudW1iZXIpID0+IHtcbiAgbGV0IG4wLCBuMSwgbjIgLy8gTm9pc2UgY29udHJpYnV0aW9ucyBmcm9tIHRoZSB0aHJlZSBjb3JuZXJzXG5cbiAgLy8gU2tldyB0aGUgaW5wdXQgc3BhY2UgdG8gZGV0ZXJtaW5lIHdoaWNoIHNpbXBsZXggY2VsbCB3ZSdyZSBpblxuICBjb25zdCBzID0gKHhJbiArIHlJbikgKiBGMiAvLyBIYWlyeSBmYWN0b3IgZm9yIDJEXG4gIGxldCBpID0gTWF0aC5mbG9vcih4SW4gKyBzKVxuICBsZXQgaiA9IE1hdGguZmxvb3IoeUluICsgcylcbiAgY29uc3QgdCA9IChpICsgaikgKiBHMlxuXG4gIC8vIFRoZSB4LHkgZGlzdGFuY2VzIGZyb20gdGhlIGNlbGwgb3JpZ2luLCB1bnNrZXdlZC5cbiAgY29uc3QgeDAgPSB4SW4gLSBpICsgdFxuICBjb25zdCB5MCA9IHlJbiAtIGogKyB0XG5cbiAgLy8gRm9yIHRoZSAyRCBjYXNlLCB0aGUgc2ltcGxleCBzaGFwZSBpcyBhbiBlcXVpbGF0ZXJhbCB0cmlhbmdsZS5cbiAgLy8gRGV0ZXJtaW5lIHdoaWNoIHNpbXBsZXggd2UgYXJlIGluLlxuICBsZXQgaTEsIGoxIC8vIE9mZnNldHMgZm9yIHNlY29uZCAobWlkZGxlKSBjb3JuZXIgb2Ygc2ltcGxleCBpbiAoaSxqKSBjb29yZHNcbiAgaWYgKHgwID4geTApIHtcbiAgICAvLyBsb3dlciB0cmlhbmdsZSwgWFkgb3JkZXI6ICgwLDApLT4oMSwwKS0+KDEsMSlcbiAgICBpMSA9IDFcbiAgICBqMSA9IDBcbiAgfSBlbHNlIHtcbiAgICAvLyB1cHBlciB0cmlhbmdsZSwgWVggb3JkZXI6ICgwLDApLT4oMCwxKS0+KDEsMSlcbiAgICBpMSA9IDBcbiAgICBqMSA9IDFcbiAgfVxuXG4gIC8vIEEgc3RlcCBvZiAoMSwwKSBpbiAoaSxqKSBtZWFucyBhIHN0ZXAgb2YgKDEtYywtYykgaW4gKHgseSksIGFuZFxuICAvLyBhIHN0ZXAgb2YgKDAsMSkgaW4gKGksaikgbWVhbnMgYSBzdGVwIG9mICgtYywxLWMpIGluICh4LHkpLCB3aGVyZVxuICAvLyBjID0gKDMtc3FydCgzKSkvNlxuICBjb25zdCB4MSA9IHgwIC0gaTEgKyBHMiAvLyBPZmZzZXRzIGZvciBtaWRkbGUgY29ybmVyIGluICh4LHkpIHVuc2tld2VkIGNvb3Jkc1xuICBjb25zdCB5MSA9IHkwIC0gajEgKyBHMlxuICBjb25zdCB4MiA9IHgwIC0gMSArIDIgKiBHMiAvLyBPZmZzZXRzIGZvciBsYXN0IGNvcm5lciBpbiAoeCx5KSB1bnNrZXdlZCBjb29yZHNcbiAgY29uc3QgeTIgPSB5MCAtIDEgKyAyICogRzJcblxuICAvLyBXb3JrIG91dCB0aGUgaGFzaGVkIGdyYWRpZW50IGluZGljZXMgb2YgdGhlIHRocmVlIHNpbXBsZXggY29ybmVyc1xuICBpICY9IDI1NVxuICBqICY9IDI1NVxuICBjb25zdCBnaTAgPSBncmFkUFtpICsgcGVybVtqXV1cbiAgY29uc3QgZ2kxID0gZ3JhZFBbaSArIGkxICsgcGVybVtqICsgajFdXVxuICBjb25zdCBnaTIgPSBncmFkUFtpICsgMSArIHBlcm1baiArIDFdXVxuXG4gIC8vIENhbGN1bGF0ZSB0aGUgY29udHJpYnV0aW9uIGZyb20gdGhlIHRocmVlIGNvcm5lcnNcbiAgbGV0IHQwID0gMC41IC0geDAgKiB4MCAtIHkwICogeTBcbiAgaWYgKHQwIDwgMCkge1xuICAgIG4wID0gMFxuICB9IGVsc2Uge1xuICAgIHQwICo9IHQwXG4gICAgbjAgPSB0MCAqIHQwICogZ2kwLmRvdDIoeDAsIHkwKSAvLyAoeCx5KSBvZiBncmFkMyB1c2VkIGZvciAyRCBncmFkaWVudFxuICB9XG4gIGxldCB0MSA9IDAuNSAtIHgxICogeDEgLSB5MSAqIHkxXG4gIGlmICh0MSA8IDApIHtcbiAgICBuMSA9IDBcbiAgfSBlbHNlIHtcbiAgICB0MSAqPSB0MVxuICAgIG4xID0gdDEgKiB0MSAqIGdpMS5kb3QyKHgxLCB5MSlcbiAgfVxuICBsZXQgdDIgPSAwLjUgLSB4MiAqIHgyIC0geTIgKiB5MlxuICBpZiAodDIgPCAwKSB7XG4gICAgbjIgPSAwXG4gIH0gZWxzZSB7XG4gICAgdDIgKj0gdDJcbiAgICBuMiA9IHQyICogdDIgKiBnaTIuZG90Mih4MiwgeTIpXG4gIH1cblxuICAvLyBBZGQgY29udHJpYnV0aW9ucyBmcm9tIGVhY2ggY29ybmVyIHRvIGdldCB0aGUgZmluYWwgbm9pc2UgdmFsdWUuXG4gIC8vIFRoZSByZXN1bHQgaXMgc2NhbGVkIHRvIHJldHVybiB2YWx1ZXMgaW4gdGhlIGludGVydmFsIFstMSwxXS5cbiAgcmV0dXJuIDcwICogKG4wICsgbjEgKyBuMilcbn1cblxuLy8gM0Qgc2ltcGxleCBub2lzZVxuLypcbiAgICBtb2R1bGUuc2ltcGxleDMgPSBmdW5jdGlvbih4aW4sIHlpbiwgemluKSB7XG4gICAgdmFyIG4wLCBuMSwgbjIsIG4zOyAvLyBOb2lzZSBjb250cmlidXRpb25zIGZyb20gdGhlIGZvdXIgY29ybmVyc1xuXG4gICAgLy8gU2tldyB0aGUgaW5wdXQgc3BhY2UgdG8gZGV0ZXJtaW5lIHdoaWNoIHNpbXBsZXggY2VsbCB3ZSdyZSBpblxuICAgIHZhciBzID0gKHhpbit5aW4remluKSpGMzsgLy8gSGFpcnkgZmFjdG9yIGZvciAyRFxuICAgIHZhciBpID0gTWF0aC5mbG9vcih4aW4rcyk7XG4gICAgdmFyIGogPSBNYXRoLmZsb29yKHlpbitzKTtcbiAgICB2YXIgayA9IE1hdGguZmxvb3IoemluK3MpO1xuXG4gICAgdmFyIHQgPSAoaStqK2spKkczO1xuICAgIHZhciB4MCA9IHhpbi1pK3Q7IC8vIFRoZSB4LHkgZGlzdGFuY2VzIGZyb20gdGhlIGNlbGwgb3JpZ2luLCB1bnNrZXdlZC5cbiAgICB2YXIgeTAgPSB5aW4tait0O1xuICAgIHZhciB6MCA9IHppbi1rK3Q7XG5cbiAgICAvLyBGb3IgdGhlIDNEIGNhc2UsIHRoZSBzaW1wbGV4IHNoYXBlIGlzIGEgc2xpZ2h0bHkgaXJyZWd1bGFyIHRldHJhaGVkcm9uLlxuICAgIC8vIERldGVybWluZSB3aGljaCBzaW1wbGV4IHdlIGFyZSBpbi5cbiAgICB2YXIgaTEsIGoxLCBrMTsgLy8gT2Zmc2V0cyBmb3Igc2Vjb25kIGNvcm5lciBvZiBzaW1wbGV4IGluIChpLGosaykgY29vcmRzXG4gICAgdmFyIGkyLCBqMiwgazI7IC8vIE9mZnNldHMgZm9yIHRoaXJkIGNvcm5lciBvZiBzaW1wbGV4IGluIChpLGosaykgY29vcmRzXG4gICAgaWYoeDAgPj0geTApIHtcbiAgICAgIGlmKHkwID49IHowKSAgICAgIHsgaTE9MTsgajE9MDsgazE9MDsgaTI9MTsgajI9MTsgazI9MDsgfVxuICAgICAgZWxzZSBpZih4MCA+PSB6MCkgeyBpMT0xOyBqMT0wOyBrMT0wOyBpMj0xOyBqMj0wOyBrMj0xOyB9XG4gICAgICBlbHNlICAgICAgICAgICAgICB7IGkxPTA7IGoxPTA7IGsxPTE7IGkyPTE7IGoyPTA7IGsyPTE7IH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYoeTAgPCB6MCkgICAgICB7IGkxPTA7IGoxPTA7IGsxPTE7IGkyPTA7IGoyPTE7IGsyPTE7IH1cbiAgICAgIGVsc2UgaWYoeDAgPCB6MCkgeyBpMT0wOyBqMT0xOyBrMT0wOyBpMj0wOyBqMj0xOyBrMj0xOyB9XG4gICAgICBlbHNlICAgICAgICAgICAgIHsgaTE9MDsgajE9MTsgazE9MDsgaTI9MTsgajI9MTsgazI9MDsgfVxuICAgIH1cbiAgICAvLyBBIHN0ZXAgb2YgKDEsMCwwKSBpbiAoaSxqLGspIG1lYW5zIGEgc3RlcCBvZiAoMS1jLC1jLC1jKSBpbiAoeCx5LHopLFxuICAgIC8vIGEgc3RlcCBvZiAoMCwxLDApIGluIChpLGosaykgbWVhbnMgYSBzdGVwIG9mICgtYywxLWMsLWMpIGluICh4LHkseiksIGFuZFxuICAgIC8vIGEgc3RlcCBvZiAoMCwwLDEpIGluIChpLGosaykgbWVhbnMgYSBzdGVwIG9mICgtYywtYywxLWMpIGluICh4LHkseiksIHdoZXJlXG4gICAgLy8gYyA9IDEvNi5cbiAgICB2YXIgeDEgPSB4MCAtIGkxICsgRzM7IC8vIE9mZnNldHMgZm9yIHNlY29uZCBjb3JuZXJcbiAgICB2YXIgeTEgPSB5MCAtIGoxICsgRzM7XG4gICAgdmFyIHoxID0gejAgLSBrMSArIEczO1xuXG4gICAgdmFyIHgyID0geDAgLSBpMiArIDIgKiBHMzsgLy8gT2Zmc2V0cyBmb3IgdGhpcmQgY29ybmVyXG4gICAgdmFyIHkyID0geTAgLSBqMiArIDIgKiBHMztcbiAgICB2YXIgejIgPSB6MCAtIGsyICsgMiAqIEczO1xuXG4gICAgdmFyIHgzID0geDAgLSAxICsgMyAqIEczOyAvLyBPZmZzZXRzIGZvciBmb3VydGggY29ybmVyXG4gICAgdmFyIHkzID0geTAgLSAxICsgMyAqIEczO1xuICAgIHZhciB6MyA9IHowIC0gMSArIDMgKiBHMztcblxuICAgIC8vIFdvcmsgb3V0IHRoZSBoYXNoZWQgZ3JhZGllbnQgaW5kaWNlcyBvZiB0aGUgZm91ciBzaW1wbGV4IGNvcm5lcnNcbiAgICBpICY9IDI1NTtcbiAgICBqICY9IDI1NTtcbiAgICBrICY9IDI1NTtcbiAgICB2YXIgZ2kwID0gZ3JhZFBbaSsgICBwZXJtW2orICAgcGVybVtrICAgXV1dO1xuICAgIHZhciBnaTEgPSBncmFkUFtpK2kxK3Blcm1baitqMStwZXJtW2srazFdXV07XG4gICAgdmFyIGdpMiA9IGdyYWRQW2kraTIrcGVybVtqK2oyK3Blcm1baytrMl1dXTtcbiAgICB2YXIgZ2kzID0gZ3JhZFBbaSsgMStwZXJtW2orIDErcGVybVtrKyAxXV1dO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBjb250cmlidXRpb24gZnJvbSB0aGUgZm91ciBjb3JuZXJzXG4gICAgdmFyIHQwID0gMC42IC0geDAqeDAgLSB5MCp5MCAtIHowKnowO1xuICAgIGlmKHQwPDApIHtcbiAgICAgIG4wID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDAgKj0gdDA7XG4gICAgICBuMCA9IHQwICogdDAgKiBnaTAuZG90Myh4MCwgeTAsIHowKTsgIC8vICh4LHkpIG9mIGdyYWQzIHVzZWQgZm9yIDJEIGdyYWRpZW50XG4gICAgfVxuICAgIHZhciB0MSA9IDAuNiAtIHgxKngxIC0geTEqeTEgLSB6MSp6MTtcbiAgICBpZih0MTwwKSB7XG4gICAgICBuMSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQxICo9IHQxO1xuICAgICAgbjEgPSB0MSAqIHQxICogZ2kxLmRvdDMoeDEsIHkxLCB6MSk7XG4gICAgfVxuICAgIHZhciB0MiA9IDAuNiAtIHgyKngyIC0geTIqeTIgLSB6Mip6MjtcbiAgICBpZih0MjwwKSB7XG4gICAgICBuMiA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQyICo9IHQyO1xuICAgICAgbjIgPSB0MiAqIHQyICogZ2kyLmRvdDMoeDIsIHkyLCB6Mik7XG4gICAgfVxuICAgIHZhciB0MyA9IDAuNiAtIHgzKngzIC0geTMqeTMgLSB6Myp6MztcbiAgICBpZih0MzwwKSB7XG4gICAgICBuMyA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQzICo9IHQzO1xuICAgICAgbjMgPSB0MyAqIHQzICogZ2kzLmRvdDMoeDMsIHkzLCB6Myk7XG4gICAgfVxuICAgIC8vIEFkZCBjb250cmlidXRpb25zIGZyb20gZWFjaCBjb3JuZXIgdG8gZ2V0IHRoZSBmaW5hbCBub2lzZSB2YWx1ZS5cbiAgICAvLyBUaGUgcmVzdWx0IGlzIHNjYWxlZCB0byByZXR1cm4gdmFsdWVzIGluIHRoZSBpbnRlcnZhbCBbLTEsMV0uXG4gICAgcmV0dXJuIDMyICogKG4wICsgbjEgKyBuMiArIG4zKTtcblxuICB9O1xuICAqL1xuXG4vLyAjIyMjIyBQZXJsaW4gbm9pc2Ugc3R1ZmZcblxuY29uc3QgZmFkZSA9ICh0OiBudW1iZXIpID0+IHQgKiB0ICogdCAqICh0ICogKHQgKiA2IC0gMTUpICsgMTApXG5jb25zdCBsZXJwID0gKGE6IG51bWJlciwgYjogbnVtYmVyLCB0OiBudW1iZXIpID0+ICgxIC0gdCkgKiBhICsgdCAqIGJcblxuLy8gMkQgUGVybGluIE5vaXNlXG5leHBvcnQgY29uc3QgcGVybGluMiA9ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4ge1xuICAvLyBGaW5kIHVuaXQgZ3JpZCBjZWxsIGNvbnRhaW5pbmcgcG9pbnRcbiAgbGV0IFggPSBNYXRoLmZsb29yKHgpXG4gIGxldCBZID0gTWF0aC5mbG9vcih5KVxuXG4gIC8vIEdldCByZWxhdGl2ZSB4eSBjb29yZGluYXRlcyBvZiBwb2ludCB3aXRoaW4gdGhhdCBjZWxsXG4gIHggPSB4IC0gWFxuICB5ID0geSAtIFlcblxuICAvLyBXcmFwIHRoZSBpbnRlZ2VyIGNlbGxzIGF0IDI1NSAoc21hbGxlciBpbnRlZ2VyIHBlcmlvZCBjYW4gYmUgaW50cm9kdWNlZCBoZXJlKVxuICBYID0gWCAmIDI1NVxuICBZID0gWSAmIDI1NVxuXG4gIC8vIENhbGN1bGF0ZSBub2lzZSBjb250cmlidXRpb25zIGZyb20gZWFjaCBvZiB0aGUgZm91ciBjb3JuZXJzXG4gIGNvbnN0IG4wMCA9IGdyYWRQW1ggKyBwZXJtW1ldXS5kb3QyKHgsIHkpXG4gIGNvbnN0IG4wMSA9IGdyYWRQW1ggKyBwZXJtW1kgKyAxXV0uZG90Mih4LCB5IC0gMSlcbiAgY29uc3QgbjEwID0gZ3JhZFBbWCArIDEgKyBwZXJtW1ldXS5kb3QyKHggLSAxLCB5KVxuICBjb25zdCBuMTEgPSBncmFkUFtYICsgMSArIHBlcm1bWSArIDFdXS5kb3QyKHggLSAxLCB5IC0gMSlcblxuICAvLyBDb21wdXRlIHRoZSBmYWRlIGN1cnZlIHZhbHVlIGZvciB4XG4gIGNvbnN0IHUgPSBmYWRlKHgpXG5cbiAgLy8gSW50ZXJwb2xhdGUgdGhlIGZvdXIgcmVzdWx0c1xuICByZXR1cm4gbGVycChsZXJwKG4wMCwgbjEwLCB1KSwgbGVycChuMDEsIG4xMSwgdSksIGZhZGUoeSkpXG59XG5cbi8vIDNEIFBlcmxpbiBOb2lzZVxuLypcbiAgbW9kdWxlLnBlcmxpbjMgPSBmdW5jdGlvbih4LCB5LCB6KSB7XG4gICAgLy8gRmluZCB1bml0IGdyaWQgY2VsbCBjb250YWluaW5nIHBvaW50XG4gICAgdmFyIFggPSBNYXRoLmZsb29yKHgpLCBZID0gTWF0aC5mbG9vcih5KSwgWiA9IE1hdGguZmxvb3Ioeik7XG4gICAgLy8gR2V0IHJlbGF0aXZlIHh5eiBjb29yZGluYXRlcyBvZiBwb2ludCB3aXRoaW4gdGhhdCBjZWxsXG4gICAgeCA9IHggLSBYOyB5ID0geSAtIFk7IHogPSB6IC0gWjtcbiAgICAvLyBXcmFwIHRoZSBpbnRlZ2VyIGNlbGxzIGF0IDI1NSAoc21hbGxlciBpbnRlZ2VyIHBlcmlvZCBjYW4gYmUgaW50cm9kdWNlZCBoZXJlKVxuICAgIFggPSBYICYgMjU1OyBZID0gWSAmIDI1NTsgWiA9IFogJiAyNTU7XG5cbiAgICAvLyBDYWxjdWxhdGUgbm9pc2UgY29udHJpYnV0aW9ucyBmcm9tIGVhY2ggb2YgdGhlIGVpZ2h0IGNvcm5lcnNcbiAgICB2YXIgbjAwMCA9IGdyYWRQW1grICBwZXJtW1krICBwZXJtW1ogIF1dXS5kb3QzKHgsICAgeSwgICAgIHopO1xuICAgIHZhciBuMDAxID0gZ3JhZFBbWCsgIHBlcm1bWSsgIHBlcm1bWisxXV1dLmRvdDMoeCwgICB5LCAgIHotMSk7XG4gICAgdmFyIG4wMTAgPSBncmFkUFtYKyAgcGVybVtZKzErcGVybVtaICBdXV0uZG90Myh4LCAgIHktMSwgICB6KTtcbiAgICB2YXIgbjAxMSA9IGdyYWRQW1grICBwZXJtW1krMStwZXJtW1orMV1dXS5kb3QzKHgsICAgeS0xLCB6LTEpO1xuICAgIHZhciBuMTAwID0gZ3JhZFBbWCsxK3Blcm1bWSsgIHBlcm1bWiAgXV1dLmRvdDMoeC0xLCAgIHksICAgeik7XG4gICAgdmFyIG4xMDEgPSBncmFkUFtYKzErcGVybVtZKyAgcGVybVtaKzFdXV0uZG90Myh4LTEsICAgeSwgei0xKTtcbiAgICB2YXIgbjExMCA9IGdyYWRQW1grMStwZXJtW1krMStwZXJtW1ogIF1dXS5kb3QzKHgtMSwgeS0xLCAgIHopO1xuICAgIHZhciBuMTExID0gZ3JhZFBbWCsxK3Blcm1bWSsxK3Blcm1bWisxXV1dLmRvdDMoeC0xLCB5LTEsIHotMSk7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBmYWRlIGN1cnZlIHZhbHVlIGZvciB4LCB5LCB6XG4gICAgdmFyIHUgPSBmYWRlKHgpO1xuICAgIHZhciB2ID0gZmFkZSh5KTtcbiAgICB2YXIgdyA9IGZhZGUoeik7XG5cbiAgICAvLyBJbnRlcnBvbGF0ZVxuICAgIHJldHVybiBsZXJwKFxuICAgICAgICBsZXJwKFxuICAgICAgICAgIGxlcnAobjAwMCwgbjEwMCwgdSksXG4gICAgICAgICAgbGVycChuMDAxLCBuMTAxLCB1KSwgdyksXG4gICAgICAgIGxlcnAoXG4gICAgICAgICAgbGVycChuMDEwLCBuMTEwLCB1KSxcbiAgICAgICAgICBsZXJwKG4wMTEsIG4xMTEsIHUpLCB3KSxcbiAgICAgICB2KTtcbiAgfTtcbiAgKi9cbiIsImltcG9ydCB7IHJhbmRvbSB9IGZyb20gJy4vcmFuZG9tJ1xuXG5leHBvcnQgY29uc3QgcmFuZEludFJhbmdlID0gKG1heDogbnVtYmVyLCBtaW46IG51bWJlciA9IDApOiBudW1iZXIgPT4gTWF0aC5yb3VuZChyYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluKVxuZXhwb3J0IGNvbnN0IHJhbmRGbG9hdFJhbmdlID0gKG1heDogbnVtYmVyLCBtaW46IG51bWJlciA9IDApOiBudW1iZXIgPT4gcmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pblxuZXhwb3J0IGNvbnN0IHJhbmRJbnQgPSAocmFuZ2U6IG51bWJlcik6IG51bWJlciA9PiBNYXRoLnJvdW5kKHJhbmRvbSgpICogKHJhbmdlICogMikgLSByYW5nZSlcbmV4cG9ydCBjb25zdCByYW5kRmxvYXQgPSAocmFuZ2U6IG51bWJlcik6IG51bWJlciA9PiByYW5kb20oKSAqIChyYW5nZSAqIDIpIC0gcmFuZ2VcbmV4cG9ydCBjb25zdCB3cmFwID0gKHZhbHVlOiBudW1iZXIsIG1heDogbnVtYmVyLCBtaW46IG51bWJlciA9IDApOiBudW1iZXIgPT5cbiAgdmFsdWUgPCBtaW4gPyBtYXggOiB2YWx1ZSA+IG1heCA/IG1pbiA6IHZhbHVlXG5cbmV4cG9ydCBjb25zdCBjb3VudERlY2ltYWxzID0gKG51bWJlcjogbnVtYmVyLCBtb3N0OiBudW1iZXIgPSA4KTogbnVtYmVyID0+IHtcbiAgZm9yIChsZXQgbiA9IDEsIGNvdW50ID0gMDsgY291bnQgPCBtb3N0OyBjb3VudCsrLCBuIC89IDEwKSB7XG4gICAgaWYgKG51bWJlciAlIG4gPT09IDApIHJldHVybiBjb3VudFxuICB9XG4gIHJldHVybiBtb3N0XG59XG5cbmV4cG9ydCBjb25zdCBmbG9hdFN0cmluZyA9IChudW1iZXI6IG51bWJlciwgZGVjaW1hbHM6IG51bWJlciA9IDUpOiBzdHJpbmcgPT4ge1xuICBpZiAobnVtYmVyICUgMSA9PT0gMCkgcmV0dXJuIFN0cmluZyhudW1iZXIpXG4gIGNvbnN0IGRlY2ltYWxzQ291bnQgPSBNYXRoLm1pbihjb3VudERlY2ltYWxzKG51bWJlciwgZGVjaW1hbHMpLCBkZWNpbWFscylcbiAgcmV0dXJuIGRlY2ltYWxzQ291bnQgPT09IDAgPyBTdHJpbmcoTWF0aC5yb3VuZChudW1iZXIpKSA6IG51bWJlci50b0ZpeGVkKGRlY2ltYWxzQ291bnQpXG59XG5cbi8vIG5vcm1hbGl6ZXMgYW55IGFuZ2xlIHRvIGJlIGJldHdlZW4gLVBJIGFuZCBQSVxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVJhZGlhbiA9IChyYWRpYW46IG51bWJlcik6IG51bWJlciA9PiAoKHJhZGlhbiArIE1hdGguUEkpICUgKE1hdGguUEkgKiAyKSkgLSBNYXRoLlBJXG5cbmV4cG9ydCBjb25zdCBhbmdsZURpZmYgPSAoc3RhcnRBbmdsZTogbnVtYmVyLCBlbmRBbmdsZTogbnVtYmVyKSA9PlxuICAoKGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSArIE1hdGguUEkgKiAzKSAlIChNYXRoLlBJICogMikpIC0gTWF0aC5QSVxuXG5leHBvcnQgY29uc3Qgc21hbGxlc3RBbmdsZURpZmYgPSAoYTE6IG51bWJlciwgYTI6IG51bWJlcik6IG51bWJlciA9PiBNYXRoLlBJIC0gTWF0aC5hYnMoTWF0aC5hYnMoYTEgLSBhMikgLSBNYXRoLlBJKVxuXG5leHBvcnQgY29uc3Qgc2VnbWVudFZhbHVlID0gKHNlZ21lbnRzOiBudW1iZXIsIHRvdGFsU2VnbWVudHM6IG51bWJlciwgbWF4OiBudW1iZXIsIG1pbjogbnVtYmVyID0gMCk6IG51bWJlciA9PlxuICAoKG1heCAtIG1pbikgLyB0b3RhbFNlZ21lbnRzKSAqIHNlZ21lbnRzXG5cbmV4cG9ydCBjb25zdCBkZWdUb1JhZCA9IChkZWc6IG51bWJlcik6IG51bWJlciA9PiAoZGVnICogTWF0aC5QSSkgLyAxODBcbmV4cG9ydCBjb25zdCByYWRUb0RlZyA9IChyYWQ6IG51bWJlciwgcm91bmQ/OiBib29sZWFuKTogbnVtYmVyID0+IHtcbiAgY29uc3QgYW5nbGUgPSAocmFkICogMTgwKSAvIE1hdGguUElcbiAgcmV0dXJuIHJvdW5kID8gTWF0aC5yb3VuZChhbmdsZSkgOiBhbmdsZVxufVxuXG5leHBvcnQgY29uc3Qgc2lnbiA9ICh4OiBudW1iZXIpID0+ICh4IDwgMC4wID8gLTEgOiAxKVxuIiwiaW1wb3J0IFBvaW50IGZyb20gJy4uL1BvaW50J1xuaW1wb3J0IHsgRWRnZSB9IGZyb20gJy4uL3R5cGVzJ1xuXG5leHBvcnQgY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxXG5cbi8vIENvbnZlcnQgc3RhcnQrZW5kIGFuZ2xlIGFyYyB0byBzdGFydC9lbmQgcG9pbnRzLlxuZXhwb3J0IGNvbnN0IGFyY1RvUG9pbnRzID0gKHg6IG51bWJlciwgeTogbnVtYmVyLCBhU3RhcnQ6IG51bWJlciwgYUVuZDogbnVtYmVyLCByYWRpdXM6IG51bWJlcikgPT4ge1xuICBhU3RhcnQgPSBhU3RhcnQgJSAoTWF0aC5QSSAqIDIpXG4gIGFFbmQgPSBhRW5kICUgKE1hdGguUEkgKiAyKVxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBuZXcgUG9pbnQocmFkaXVzICogTWF0aC5jb3MoYVN0YXJ0KSArIHgsIHJhZGl1cyAqIE1hdGguc2luKGFTdGFydCkgKyB5KSxcbiAgICBlbmQ6IG5ldyBQb2ludChyYWRpdXMgKiBNYXRoLmNvcyhhRW5kKSArIHgsIHJhZGl1cyAqIE1hdGguc2luKGFFbmQpICsgeSksXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGxpbmVUb1BvaW50cyA9IChcbiAgLi4uYXJnczpcbiAgICB8IFtwdDE6IFBvaW50LCBwdDI6IFBvaW50LCBkaXZpc2lvbnM6IG51bWJlcl1cbiAgICB8IFt4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyLCBkaXZpc2lvbnM6IG51bWJlcl1cbikgPT4ge1xuICBjb25zdCBwdDEgPSBhcmdzLmxlbmd0aCA9PT0gMyA/IGFyZ3NbMF0gOiBuZXcgUG9pbnQoYXJnc1swXSwgYXJnc1sxXSlcbiAgY29uc3QgcHQyID0gYXJncy5sZW5ndGggPT09IDMgPyBhcmdzWzFdIDogbmV3IFBvaW50KGFyZ3NbMl0sIGFyZ3NbM10pXG4gIGNvbnN0IGRpdmlzaW9ucyA9IGFyZ3MubGVuZ3RoID09PSAzID8gYXJnc1syXSA6IGFyZ3NbNF1cblxuICBjb25zdCBhbmdsZSA9IHB0MS5hbmdsZVRvKHB0MilcbiAgY29uc3QgZGlzdCA9IHB0MS5kaXN0YW5jZVRvKHB0MilcblxuICBjb25zdCBwb2ludHMgPSBbXVxuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgZGl2aXNpb25zICsgMTsgaSsrKSB7XG4gICAgY29uc3QgcHQgPSBwdDEuY2xvbmUoKS5tb3ZlQWxvbmdBbmdsZShhbmdsZSwgKGRpc3QgLyAoZGl2aXNpb25zICsgMSkpICogaSlcbiAgICBwb2ludHMucHVzaChwdClcbiAgfVxuXG4gIHJldHVybiBwb2ludHNcbn1cblxuLy8gQ29udmVydCBzdGFydC9lbmQvY2VudGVyIHBvaW50IGFyYyB0byBzdGFydC9lbmQgYW5nbGUgYXJjLlxuZXhwb3J0IGNvbnN0IHBvaW50c1RvQXJjID0gKGNlbnRlcjogUG9pbnQsIHN0YXJ0OiBQb2ludCwgZW5kOiBQb2ludCkgPT4ge1xuICBjZW50ZXIgPSBjZW50ZXIuY2xvbmUoKVxuICBzdGFydCA9IHN0YXJ0LmNsb25lKClcbiAgZW5kID0gZW5kLmNsb25lKClcblxuICBjb25zdCBhU3RhcnQgPSBNYXRoLmF0YW4yKHN0YXJ0LnkgLSBjZW50ZXIueSwgc3RhcnQueCAtIGNlbnRlci54KVxuICBsZXQgYUVuZCA9IE1hdGguYXRhbjIoZW5kLnkgLSBjZW50ZXIueSwgZW5kLnggLSBjZW50ZXIueClcbiAgY29uc3QgcmFkaXVzID0gY2VudGVyLnN1YnRyYWN0KHN0YXJ0KS5tYWduaXR1ZGUoKVxuXG4gIC8vIEFsd2F5cyBhc3N1bWUgYSBmdWxsIGNpcmNsZSBpZiB0aGV5IGFyZSB0aGUgc2FtZVxuICAvLyBIYW5kbGluZyBvZiAwLDAgb3B0aW1pemVkIGluIHRoZSB1c2FnZVxuICBpZiAoYUVuZCA9PT0gYVN0YXJ0KSBhRW5kICs9IE1hdGguUEkgKiAyXG5cbiAgcmV0dXJuIHsgc3RhcnQ6IGFTdGFydCwgZW5kOiBhRW5kLCByYWRpdXMgfVxufVxuXG4vKipcbiAqIEdpdmVuIGFuIGFuZ2xlIGluIHJhZGlhbnMsIHdpbGwgcmV0dXJuIGFuIGVxdWl2YWxlbnQgYW5nbGUgYmV0d2VlbiBbLXBpLCBwaV1cbiAqIFdlIGhhdmUgdG8gd29yayBhcm91bmQgSmF2YXNjcmlwdCdzIFNUVVBJRCBtb2R1bG8gYnVnOiAtMiAlIDMgaXMgbm90IC0yLCBpdCBpcyAxLlxuICogVGhhdCdzIHdoeSB3ZSdyZSBjYWxsaW5nIG1vZHVsbyB0d2ljZS5cbiAqKi9cbmV4cG9ydCBjb25zdCBub3JtYWxpemVBbmdsZSA9IChhbmdsZTogbnVtYmVyKTogbnVtYmVyID0+XG4gICgoKChhbmdsZSArIE1hdGguUEkpICUgKDIgKiBNYXRoLlBJKSkgKyAyICogTWF0aC5QSSkgJSAoMiAqIE1hdGguUEkpKSAtIE1hdGguUElcblxuZXhwb3J0IGNvbnN0IHNhbWVGbG9hdCA9IChhOiBudW1iZXIsIGI6IG51bWJlciwgZXBzaWxvbiA9IEVQU0lMT04pOiBib29sZWFuID0+IHtcbiAgaWYgKE1hdGguYWJzKGEgLSBiKSA8IEVQU0lMT04pIHJldHVybiB0cnVlXG5cbiAgY29uc3QgYWJzQSA9IE1hdGguYWJzKGEpXG4gIGNvbnN0IGFic0IgPSBNYXRoLmFicyhiKVxuICBjb25zdCBkaWZmID0gTWF0aC5hYnMoYSAtIGIpXG5cbiAgLy8gc2hvcnRjdXQsIGhhbmRsZXMgaW5maW5pdGllc1xuICBpZiAoYSA9PSBiKSByZXR1cm4gdHJ1ZVxuXG4gIC8vIGEgb3IgYiBpcyB6ZXJvIG9yIGJvdGggYXJlIGV4dHJlbWVseSBjbG9zZSB0byBpdFxuICAvLyByZWxhdGl2ZSBlcnJvciBpcyBsZXNzIG1lYW5pbmdmdWwgaGVyZVxuICBpZiAoYSA9PT0gMCB8fCBiID09PSAwIHx8IGRpZmYgPCBOdW1iZXIuTUlOX1ZBTFVFKSByZXR1cm4gZGlmZiA8IGVwc2lsb24gKiBOdW1iZXIuTUlOX1ZBTFVFXG5cbiAgLy8gdXNlIHJlbGF0aXZlIGVycm9yXG4gIHJldHVybiBkaWZmIC8gKGFic0EgKyBhYnNCKSA8IGVwc2lsb25cbn1cblxuZXhwb3J0IGNvbnN0IHNhbWVQb3MgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiBzYW1lRmxvYXQoYS54LCBiLngpICYmIHNhbWVGbG9hdChhLnksIGIueSkgLy8gJiYgc2FtZUZsb2F0KGEueiwgYi56KSAmJiBzYW1lRmxvYXQoYS5hLCBiLmEpXG59XG5cbmV4cG9ydCBjb25zdCBjb252ZXJ0UG9pbnRzVG9FZGdlcyA9IChwdHM6IFBvaW50W10pOiBFZGdlW10gPT4ge1xuICBpZiAoIXNhbWVQb3MocHRzWzBdLCBwdHNbcHRzLmxlbmd0aCAtIDFdKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgY29udmVydFBvaW50c1RvRWRnZXM6IHByb3ZpZGVkIHBvaW50cyBhcmVuJ3Qgc2VsZi1jbG9zaW5nIWApXG4gIH1cbiAgY29uc3QgZWRnZXM6IEVkZ2VbXSA9IFtdXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgcHRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGVkZ2VzLnB1c2goW3B0c1tpIC0gMV0sIHB0c1tpXV0pXG4gIH1cbiAgcmV0dXJuIGVkZ2VzXG59XG4iLCIvLyBUYWtlbiBmcm9tIGhlcmU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xOTMwMTMwNlxuXG5sZXQgbV93ID0gMTIzNDU2Nzg5XG5sZXQgbV96ID0gOTg3NjU0MzIxXG5jb25zdCBtYXNrID0gMHhmZmZmZmZmZlxuXG4vLyBUYWtlcyBhbnkgaW50ZWdlclxuZXhwb3J0IGNvbnN0IHNlZWRSYW5kb20gPSAoaW50ZWdlcjogbnVtYmVyKSA9PiB7XG4gIG1fdyA9ICgxMjM0NTY3ODkgKyBpbnRlZ2VyKSAmIG1hc2tcbiAgbV96ID0gKDk4NzY1NDMyMSAtIGludGVnZXIpICYgbWFza1xufVxuXG4vLyBSZXR1cm5zIG51bWJlciBiZXR3ZWVuIDAgKGluY2x1c2l2ZSkgYW5kIDEuMCAoZXhjbHVzaXZlKSxcbi8vIGp1c3QgbGlrZSBNYXRoLnJhbmRvbSgpLlxuZXhwb3J0IGNvbnN0IHJhbmRvbSA9ICgpID0+IHtcbiAgbV96ID0gKDM2OTY5ICogKG1feiAmIDY1NTM1KSArIChtX3ogPj4gMTYpKSAmIG1hc2tcbiAgbV93ID0gKDE4MDAwICogKG1fdyAmIDY1NTM1KSArIChtX3cgPj4gMTYpKSAmIG1hc2tcbiAgY29uc3QgcmVzdWx0ID0gKChtX3ogPDwgMTYpICsgKG1fdyAmIDY1NTM1KSkgPj4+IDBcbiAgcmV0dXJuIHJlc3VsdCAvIDQyOTQ5NjcyOTZcbn1cblxuc2VlZFJhbmRvbSgwKVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4yMSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nLFxuICAgICAgSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCA9ICdJbnZhbGlkIGB2YXJpYWJsZWAgb3B0aW9uIHBhc3NlZCBpbnRvIGBfLnRlbXBsYXRlYCc7XG5cbiAgLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xuICB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xuICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xuICB2YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xuICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNhdGVgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG4gIHZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxhenkgaXRlcmF0ZWVzLiAqL1xuICB2YXIgTEFaWV9GSUxURVJfRkxBRyA9IDEsXG4gICAgICBMQVpZX01BUF9GTEFHID0gMixcbiAgICAgIExBWllfV0hJTEVfRkxBRyA9IDM7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG4gIHZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgICAgTkFOID0gMCAvIDA7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgdmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gIC8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG4gIHZhciB3cmFwRmxhZ3MgPSBbXG4gICAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gICAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICAgIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gICAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gICAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbiAgXTtcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nLFxuICAgICAgd2Vha1NldFRhZyA9ICdbb2JqZWN0IFdlYWtTZXRdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICAgKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAgICovXG4gIHZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgICByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGEgc2luZ2xlIHdoaXRlc3BhY2UgY2hhcmFjdGVyLiAqL1xuICB2YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKipcbiAgICogVXNlZCB0byB2YWxpZGF0ZSB0aGUgYHZhbGlkYXRlYCBvcHRpb24gaW4gYF8udGVtcGxhdGVgIHZhcmlhYmxlLlxuICAgKlxuICAgKiBGb3JiaWRzIGNoYXJhY3RlcnMgd2hpY2ggY291bGQgcG90ZW50aWFsbHkgY2hhbmdlIHRoZSBtZWFuaW5nIG9mIHRoZSBmdW5jdGlvbiBhcmd1bWVudCBkZWZpbml0aW9uOlxuICAgKiAtIFwiKCksXCIgKG1vZGlmaWNhdGlvbiBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzKVxuICAgKiAtIFwiPVwiIChkZWZhdWx0IHZhbHVlKVxuICAgKiAtIFwiW117fVwiIChkZXN0cnVjdHVyaW5nIG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMpXG4gICAqIC0gXCIvXCIgKGJlZ2lubmluZyBvZiBhIGNvbW1lbnQpXG4gICAqIC0gd2hpdGVzcGFjZVxuICAgKi9cbiAgdmFyIHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzID0gL1soKT0se31cXFtcXF1cXC9cXHNdLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udHJpbWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB0cmltLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUcmltKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmdcbiAgICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgICA6IHN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gICAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICAgKiBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1TdGFydGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNvdW50LlxuICAgKi9cbiAgZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IDA7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChhcnJheVtsZW5ndGhdID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICArK3Jlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAgICovXG4gIHZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gICAgdmFyIGRhdGEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gICAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZWlyIGluZGV4ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHJlcGxhY2UuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlSG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFt2YWx1ZSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmxhc3RJbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCArIDE7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBzeW1ib2xzIGluIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgICAgOiBhc2NpaVNpemUoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICAgKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyaW5nLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy51bmVzY2FwZWAgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIHVuZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sVW5lc2NhcGVzKTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgKytyZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB1c2luZyB0aGUgYGNvbnRleHRgIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMS4xLjBcbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLm1peGluKHsgJ2Zvbyc6IF8uY29uc3RhbnQoJ2ZvbycpIH0pO1xuICAgKlxuICAgKiB2YXIgbG9kYXNoID0gXy5ydW5JbkNvbnRleHQoKTtcbiAgICogbG9kYXNoLm1peGluKHsgJ2Jhcic6IGxvZGFzaC5jb25zdGFudCgnYmFyJykgfSk7XG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfLmZvbyk7XG4gICAqIC8vID0+IHRydWVcbiAgICogXy5pc0Z1bmN0aW9uKF8uYmFyKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmZvbyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5iYXIpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIC8vIENyZWF0ZSBhIHN1cGVkLXVwIGBkZWZlcmAgaW4gTm9kZS5qcy5cbiAgICogdmFyIGRlZmVyID0gXy5ydW5JbkNvbnRleHQoeyAnc2V0VGltZW91dCc6IHNldEltbWVkaWF0ZSB9KS5kZWZlcjtcbiAgICovXG4gIHZhciBydW5JbkNvbnRleHQgPSAoZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gY29udGV4dCA9PSBudWxsID8gcm9vdCA6IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpO1xuXG4gICAgLyoqIEJ1aWx0LWluIGNvbnN0cnVjdG9yIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHQuRGF0ZSxcbiAgICAgICAgRXJyb3IgPSBjb250ZXh0LkVycm9yLFxuICAgICAgICBGdW5jdGlvbiA9IGNvbnRleHQuRnVuY3Rpb24sXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LFxuICAgICAgICBSZWdFeHAgPSBjb250ZXh0LlJlZ0V4cCxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yO1xuXG4gICAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbiAgICB2YXIgY29yZUpzRGF0YSA9IGNvbnRleHRbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xuICAgIHZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG4gICAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xuICAgIHZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgICAgIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byByZXNvbHZlIHRoZVxuICAgICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgICAqIG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbiAgICB2YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBfLm5vQ29uZmxpY3RgLiAqL1xuICAgIHZhciBvbGREYXNoID0gcm9vdC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbiAgICB2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IGNvbnRleHQuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBTeW1ib2wgPSBjb250ZXh0LlN5bWJvbCxcbiAgICAgICAgVWludDhBcnJheSA9IGNvbnRleHQuVWludDhBcnJheSxcbiAgICAgICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQsXG4gICAgICAgIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpLFxuICAgICAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICAgICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bUl0ZXJhdG9yID0gU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9KCkpO1xuXG4gICAgLyoqIE1vY2tlZCBidWlsdC1pbnMuICovXG4gICAgdmFyIGN0eENsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0ICE9PSByb290LmNsZWFyVGltZW91dCAmJiBjb250ZXh0LmNsZWFyVGltZW91dCxcbiAgICAgICAgY3R4Tm93ID0gRGF0ZSAmJiBEYXRlLm5vdyAhPT0gcm9vdC5EYXRlLm5vdyAmJiBEYXRlLm5vdyxcbiAgICAgICAgY3R4U2V0VGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dCAhPT0gcm9vdC5zZXRUaW1lb3V0ICYmIGNvbnRleHQuc2V0VGltZW91dDtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbiAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICAgICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSxcbiAgICAgICAgbmF0aXZlSm9pbiA9IGFycmF5UHJvdG8uam9pbixcbiAgICAgICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlTm93ID0gRGF0ZS5ub3csXG4gICAgICAgIG5hdGl2ZVBhcnNlSW50ID0gY29udGV4dC5wYXJzZUludCxcbiAgICAgICAgbmF0aXZlUmFuZG9tID0gTWF0aC5yYW5kb20sXG4gICAgICAgIG5hdGl2ZVJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG4gICAgdmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdEYXRhVmlldycpLFxuICAgICAgICBNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ01hcCcpLFxuICAgICAgICBQcm9taXNlID0gZ2V0TmF0aXZlKGNvbnRleHQsICdQcm9taXNlJyksXG4gICAgICAgIFNldCA9IGdldE5hdGl2ZShjb250ZXh0LCAnU2V0JyksXG4gICAgICAgIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ1dlYWtNYXAnKSxcbiAgICAgICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4gICAgLyoqIFVzZWQgdG8gc3RvcmUgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gICAgdmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG4gICAgLyoqIFVzZWQgdG8gbG9va3VwIHVubWluaWZpZWQgZnVuY3Rpb24gbmFtZXMuICovXG4gICAgdmFyIHJlYWxOYW1lcyA9IHt9O1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbiAgICB2YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgICAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICAgICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICAgICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbiAgICAvKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbiAgICB2YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGltcGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcy4gTWV0aG9kcyB0aGF0IG9wZXJhdGUgb24gYW5kIHJldHVybiBhcnJheXMsIGNvbGxlY3Rpb25zLFxuICAgICAqIGFuZCBmdW5jdGlvbnMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZVxuICAgICAqIG9yIG1heSByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gc2VxdWVuY2VcbiAgICAgKiBhbmQgcmV0dXJuIHRoZSB1bndyYXBwZWQgdmFsdWUuIE90aGVyd2lzZSwgdGhlIHZhbHVlIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBFeHBsaWNpdCBjaGFpbiBzZXF1ZW5jZXMsIHdoaWNoIG11c3QgYmUgdW53cmFwcGVkIHdpdGggYF8jdmFsdWVgLCBtYXkgYmVcbiAgICAgKiBlbmFibGVkIHVzaW5nIGBfLmNoYWluYC5cbiAgICAgKlxuICAgICAqIFRoZSBleGVjdXRpb24gb2YgY2hhaW5lZCBtZXRob2RzIGlzIGxhenksIHRoYXQgaXMsIGl0J3MgZGVmZXJyZWQgdW50aWxcbiAgICAgKiBgXyN2YWx1ZWAgaXMgaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGNhbGxlZC5cbiAgICAgKlxuICAgICAqIExhenkgZXZhbHVhdGlvbiBhbGxvd3Mgc2V2ZXJhbCBtZXRob2RzIHRvIHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uLlxuICAgICAqIFNob3J0Y3V0IGZ1c2lvbiBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWVyZ2UgaXRlcmF0ZWUgY2FsbHM7IHRoaXMgYXZvaWRzXG4gICAgICogdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBhcnJheXMgYW5kIGNhbiBncmVhdGx5IHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICogaXRlcmF0ZWUgZXhlY3V0aW9ucy4gU2VjdGlvbnMgb2YgYSBjaGFpbiBzZXF1ZW5jZSBxdWFsaWZ5IGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpZiB0aGUgc2VjdGlvbiBpcyBhcHBsaWVkIHRvIGFuIGFycmF5IGFuZCBpdGVyYXRlZXMgYWNjZXB0IG9ubHlcbiAgICAgKiBvbmUgYXJndW1lbnQuIFRoZSBoZXVyaXN0aWMgZm9yIHdoZXRoZXIgYSBzZWN0aW9uIHF1YWxpZmllcyBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaXMgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgXyN2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiB0byBsb2Rhc2ggbWV0aG9kcywgd3JhcHBlcnMgaGF2ZSBgQXJyYXlgIGFuZCBgU3RyaW5nYCBtZXRob2RzLlxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYEFycmF5YCBtZXRob2RzIGFyZTpcbiAgICAgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgc2hpZnRgLCBgc29ydGAsIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAgICAgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gICAgICogYGF0YCwgYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsIGBmaW5kYCxcbiAgICAgKiBgZmluZExhc3RgLCBgaGVhZGAsIGBpbml0aWFsYCwgYGxhc3RgLCBgbWFwYCwgYHJlamVjdGAsIGByZXZlcnNlYCwgYHNsaWNlYCxcbiAgICAgKiBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBhbmQgYHRvQXJyYXlgXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgbWV0aG9kcyBhcmU6XG4gICAgICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXNzaWduSW5gLCBgYXNzaWduSW5XaXRoYCwgYGFzc2lnbldpdGhgLCBgYXRgLFxuICAgICAqIGBiZWZvcmVgLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2FzdEFycmF5YCwgYGNoYWluYCwgYGNodW5rYCxcbiAgICAgKiBgY29tbWl0YCwgYGNvbXBhY3RgLCBgY29uY2F0YCwgYGNvbmZvcm1zYCwgYGNvbnN0YW50YCwgYGNvdW50QnlgLCBgY3JlYXRlYCxcbiAgICAgKiBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGRlZmVyYCwgYGRlbGF5YCxcbiAgICAgKiBgZGlmZmVyZW5jZWAsIGBkaWZmZXJlbmNlQnlgLCBgZGlmZmVyZW5jZVdpdGhgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLFxuICAgICAqIGBkcm9wUmlnaHRXaGlsZWAsIGBkcm9wV2hpbGVgLCBgZXh0ZW5kYCwgYGV4dGVuZFdpdGhgLCBgZmlsbGAsIGBmaWx0ZXJgLFxuICAgICAqIGBmbGF0TWFwYCwgYGZsYXRNYXBEZWVwYCwgYGZsYXRNYXBEZXB0aGAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCxcbiAgICAgKiBgZmxhdHRlbkRlcHRoYCwgYGZsaXBgLCBgZmxvd2AsIGBmbG93UmlnaHRgLCBgZnJvbVBhaXJzYCwgYGZ1bmN0aW9uc2AsXG4gICAgICogYGZ1bmN0aW9uc0luYCwgYGdyb3VwQnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW50ZXJzZWN0aW9uQnlgLFxuICAgICAqIGBpbnRlcnNlY3Rpb25XaXRoYCwgYGludmVydGAsIGBpbnZlcnRCeWAsIGBpbnZva2VNYXBgLCBgaXRlcmF0ZWVgLCBga2V5QnlgLFxuICAgICAqIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsIGBtYXRjaGVzUHJvcGVydHlgLFxuICAgICAqIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1lcmdlV2l0aGAsIGBtZXRob2RgLCBgbWV0aG9kT2ZgLCBgbWl4aW5gLCBgbmVnYXRlYCxcbiAgICAgKiBgbnRoQXJnYCwgYG9taXRgLCBgb21pdEJ5YCwgYG9uY2VgLCBgb3JkZXJCeWAsIGBvdmVyYCwgYG92ZXJBcmdzYCxcbiAgICAgKiBgb3ZlckV2ZXJ5YCwgYG92ZXJTb21lYCwgYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBhcnRpdGlvbmAsIGBwaWNrYCxcbiAgICAgKiBgcGlja0J5YCwgYHBsYW50YCwgYHByb3BlcnR5YCwgYHByb3BlcnR5T2ZgLCBgcHVsbGAsIGBwdWxsQWxsYCwgYHB1bGxBbGxCeWAsXG4gICAgICogYHB1bGxBbGxXaXRoYCwgYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVhcmdgLCBgcmVqZWN0YCxcbiAgICAgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzYW1wbGVTaXplYCwgYHNldGAsIGBzZXRXaXRoYCwgYHNodWZmbGVgLFxuICAgICAqIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzcGxpY2VgLCBgc3ByZWFkYCwgYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdG9BcnJheWAsXG4gICAgICogYHRvUGFpcnNgLCBgdG9QYWlyc0luYCwgYHRvUGF0aGAsIGB0b1BsYWluT2JqZWN0YCwgYHRyYW5zZm9ybWAsIGB1bmFyeWAsXG4gICAgICogYHVuaW9uYCwgYHVuaW9uQnlgLCBgdW5pb25XaXRoYCwgYHVuaXFgLCBgdW5pcUJ5YCwgYHVuaXFXaXRoYCwgYHVuc2V0YCxcbiAgICAgKiBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdXBkYXRlYCwgYHVwZGF0ZVdpdGhgLCBgdmFsdWVzYCxcbiAgICAgKiBgdmFsdWVzSW5gLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB4b3JCeWAsIGB4b3JXaXRoYCwgYHppcGAsXG4gICAgICogYHppcE9iamVjdGAsIGB6aXBPYmplY3REZWVwYCwgYW5kIGB6aXBXaXRoYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcbiAgICAgKiBgYWRkYCwgYGF0dGVtcHRgLCBgY2FtZWxDYXNlYCwgYGNhcGl0YWxpemVgLCBgY2VpbGAsIGBjbGFtcGAsIGBjbG9uZWAsXG4gICAgICogYGNsb25lRGVlcGAsIGBjbG9uZURlZXBXaXRoYCwgYGNsb25lV2l0aGAsIGBjb25mb3Jtc1RvYCwgYGRlYnVycmAsXG4gICAgICogYGRlZmF1bHRUb2AsIGBkaXZpZGVgLCBgZWFjaGAsIGBlYWNoUmlnaHRgLCBgZW5kc1dpdGhgLCBgZXFgLCBgZXNjYXBlYCxcbiAgICAgKiBgZXNjYXBlUmVnRXhwYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCwgYGZpbmRLZXlgLCBgZmluZExhc3RgLFxuICAgICAqIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpcnN0YCwgYGZsb29yYCwgYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCxcbiAgICAgKiBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZ2V0YCwgYGd0YCwgYGd0ZWAsIGBoYXNgLFxuICAgICAqIGBoYXNJbmAsIGBoZWFkYCwgYGlkZW50aXR5YCwgYGluY2x1ZGVzYCwgYGluZGV4T2ZgLCBgaW5SYW5nZWAsIGBpbnZva2VgLFxuICAgICAqIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQXJyYXlCdWZmZXJgLCBgaXNBcnJheUxpa2VgLCBgaXNBcnJheUxpa2VPYmplY3RgLFxuICAgICAqIGBpc0Jvb2xlYW5gLCBgaXNCdWZmZXJgLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLFxuICAgICAqIGBpc0VxdWFsV2l0aGAsIGBpc0Vycm9yYCwgYGlzRmluaXRlYCwgYGlzRnVuY3Rpb25gLCBgaXNJbnRlZ2VyYCwgYGlzTGVuZ3RoYCxcbiAgICAgKiBgaXNNYXBgLCBgaXNNYXRjaGAsIGBpc01hdGNoV2l0aGAsIGBpc05hTmAsIGBpc05hdGl2ZWAsIGBpc05pbGAsIGBpc051bGxgLFxuICAgICAqIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc09iamVjdExpa2VgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsXG4gICAgICogYGlzU2FmZUludGVnZXJgLCBgaXNTZXRgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgaXNUeXBlZEFycmF5YCxcbiAgICAgKiBgaXNXZWFrTWFwYCwgYGlzV2Vha1NldGAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsIGBsYXN0YCwgYGxhc3RJbmRleE9mYCxcbiAgICAgKiBgbG93ZXJDYXNlYCwgYGxvd2VyRmlyc3RgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtYXhCeWAsIGBtZWFuYCwgYG1lYW5CeWAsXG4gICAgICogYG1pbmAsIGBtaW5CeWAsIGBtdWx0aXBseWAsIGBub0NvbmZsaWN0YCwgYG5vb3BgLCBgbm93YCwgYG50aGAsIGBwYWRgLFxuICAgICAqIGBwYWRFbmRgLCBgcGFkU3RhcnRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLFxuICAgICAqIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzYW1wbGVgLCBgc2hpZnRgLCBgc2l6ZWAsXG4gICAgICogYHNuYWtlQ2FzZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHNvcnRlZEluZGV4QnlgLCBgc29ydGVkTGFzdEluZGV4YCxcbiAgICAgKiBgc29ydGVkTGFzdEluZGV4QnlgLCBgc3RhcnRDYXNlYCwgYHN0YXJ0c1dpdGhgLCBgc3R1YkFycmF5YCwgYHN0dWJGYWxzZWAsXG4gICAgICogYHN0dWJPYmplY3RgLCBgc3R1YlN0cmluZ2AsIGBzdHViVHJ1ZWAsIGBzdWJ0cmFjdGAsIGBzdW1gLCBgc3VtQnlgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0aW1lc2AsIGB0b0Zpbml0ZWAsIGB0b0ludGVnZXJgLCBgdG9KU09OYCwgYHRvTGVuZ3RoYCxcbiAgICAgKiBgdG9Mb3dlcmAsIGB0b051bWJlcmAsIGB0b1NhZmVJbnRlZ2VyYCwgYHRvU3RyaW5nYCwgYHRvVXBwZXJgLCBgdHJpbWAsXG4gICAgICogYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYHRydW5jYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHVwcGVyQ2FzZWAsXG4gICAgICogYHVwcGVyRmlyc3RgLCBgdmFsdWVgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB3cmFwcGVkLnJlZHVjZShfLmFkZCk7XG4gICAgICogLy8gPT4gNlxuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhIHdyYXBwZWQgdmFsdWUuXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChzcXVhcmUpO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkge1xuICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGNvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICB0aGlzLl9faW5kZXhfXyA9IDA7XG4gICAgICB0aGlzLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpIGFzIHdlbGwgYXMgRVMyMDE1IHRlbXBsYXRlIHN0cmluZ3MuIENoYW5nZSB0aGVcbiAgICAgKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXZhbHVhdGUnOiByZUV2YWx1YXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICAnaW1wb3J0cyc6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHdyYXBwZXJzIGFyZSBpbnN0YW5jZXMgb2YgYGJhc2VMb2Rhc2hgLlxuICAgIGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbG9kYXNoO1xuXG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGVlc19fID0gW107XG4gICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuICAgICAgdGhpcy5fX3ZpZXdzX18gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGxhenkgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsb25lXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlDbG9uZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcy5fX3dyYXBwZWRfXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19kaXJfXyA9IHRoaXMuX19kaXJfXztcbiAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0aGlzLl9fZmlsdGVyZWRfXztcbiAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7XG4gICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXztcbiAgICAgIHJlc3VsdC5fX3ZpZXdzX18gPSBjb3B5QXJyYXkodGhpcy5fX3ZpZXdzX18pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGxhenkgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHJldmVyc2VkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlSZXZlcnNlKCkge1xuICAgICAgaWYgKHRoaXMuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fID0gLTE7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyAqPSAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHVud3JhcHBlZCB2YWx1ZSBmcm9tIGl0cyBsYXp5IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5VmFsdWUoKSB7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksXG4gICAgICAgICAgZGlyID0gdGhpcy5fX2Rpcl9fLFxuICAgICAgICAgIGlzQXJyID0gaXNBcnJheShhcnJheSksXG4gICAgICAgICAgaXNSaWdodCA9IGRpciA8IDAsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gaXNBcnIgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHZpZXcgPSBnZXRWaWV3KDAsIGFyckxlbmd0aCwgdGhpcy5fX3ZpZXdzX18pLFxuICAgICAgICAgIHN0YXJ0ID0gdmlldy5zdGFydCxcbiAgICAgICAgICBlbmQgPSB2aWV3LmVuZCxcbiAgICAgICAgICBsZW5ndGggPSBlbmQgLSBzdGFydCxcbiAgICAgICAgICBpbmRleCA9IGlzUmlnaHQgPyBlbmQgOiAoc3RhcnQgLSAxKSxcbiAgICAgICAgICBpdGVyYXRlZXMgPSB0aGlzLl9faXRlcmF0ZWVzX18sXG4gICAgICAgICAgaXRlckxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHRha2VDb3VudCA9IG5hdGl2ZU1pbihsZW5ndGgsIHRoaXMuX190YWtlQ291bnRfXyk7XG5cbiAgICAgIGlmICghaXNBcnIgfHwgKCFpc1JpZ2h0ICYmIGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlIChsZW5ndGgtLSAmJiByZXNJbmRleCA8IHRha2VDb3VudCkge1xuICAgICAgICBpbmRleCArPSBkaXI7XG5cbiAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sXG4gICAgICAgICAgICAgIGl0ZXJhdGVlID0gZGF0YS5pdGVyYXRlZSxcbiAgICAgICAgICAgICAgdHlwZSA9IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgYExhenlXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgYmFzZUxvZGFzaGAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gICAgICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbiAgICBIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbiAgICBIYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuICAgIEhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG4gICAgSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbiAgICBIYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gW107XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgIGRhdGEucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICAtLXRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX19kYXRhX18gPSB7XG4gICAgICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBhZGRcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAYWxpYXMgcHVzaFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuICAgIFNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuICAgIFNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgICAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgICAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuICAgIFN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG4gICAgU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuICAgIFN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICAgICApKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGUoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbYmFzZVJhbmRvbSgwLCBsZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZVNpemVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGVTaXplKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNodWZmbGUoYXJyYXkpIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICAgICAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWdncmVnYXRlcyBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgb24gYGFjY3VtdWxhdG9yYCB3aXRoIGtleXMgdHJhbnNmb3JtZWRcbiAgICAgKiBieSBgaXRlcmF0ZWVgIGFuZCB2YWx1ZXMgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gICAgICogdmFsdWUgY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWwgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIHNraXAgPSBvYmplY3QgPT0gbnVsbDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHNraXAgPyB1bmRlZmluZWQgOiBnZXQob2JqZWN0LCBwYXRoc1tpbmRleF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPD0gdXBwZXIgPyBudW1iZXIgOiB1cHBlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAgICAgKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gRGVlcCBjbG9uZVxuICAgICAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICAgICAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICAgICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkO1xuICAgICAgfVxuICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICAgICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICAgICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgICAgIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICAgICAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNUb2Agd2hpY2ggYWNjZXB0cyBgcHJvcHNgIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcykge1xuICAgICAgdmFyIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gc291cmNlW2tleV0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB8fCAhcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGVsYXlgIGFuZCBgXy5kZWZlcmAgd2hpY2ggYWNjZXB0cyBgYXJnc2BcbiAgICAgKiB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEZWxheShmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGV4Y2x1ZGluZyBtdWx0aXBsZSBhcnJheXMgb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICB2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA9PSBudWxsID8gdmFsdWUgOiBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ubWF4YCBhbmQgYF8ubWluYCB3aGljaCBhY2NlcHRzIGFcbiAgICAgKiBgY29tcGFyYXRvcmAgdG8gZGV0ZXJtaW5lIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV4dHJlbXVtKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50ICE9IG51bGwgJiYgKGNvbXB1dGVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAoY3VycmVudCA9PT0gY3VycmVudCAmJiAhaXNTeW1ib2woY3VycmVudCkpXG4gICAgICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICB2YXIgY29tcHV0ZWQgPSBjdXJyZW50LFxuICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZW5kID0gc3RhcnQgPiBlbmQgPyAwIDogdG9MZW5ndGgoZW5kKTtcbiAgICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gICAgICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlRm9yYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXNcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3JSaWdodCA9IGNyZWF0ZUJhc2VGb3IodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvclJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZ1bmN0aW9uc2Agd2hpY2ggY3JlYXRlcyBhbiBhcnJheSBvZlxuICAgICAqIGBvYmplY3RgIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZpbHRlcmVkIGZyb20gYHByb3BzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGZpbHRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqZWN0W2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAgICAgKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICAgICAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgICAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICAgICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ3RgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUd0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIG51bWJlciA+PSBuYXRpdmVNaW4oc3RhcnQsIGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmNsdWRlcyA9IGNvbXBhcmF0b3IgPyBhcnJheUluY2x1ZGVzV2l0aCA6IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXlzWzBdLmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoLFxuICAgICAgICAgIGNhY2hlcyA9IEFycmF5KG90aExlbmd0aCksXG4gICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgICAgIGlmIChvdGhJbmRleCAmJiBpdGVyYXRlZSkge1xuICAgICAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1heExlbmd0aCA9IG5hdGl2ZU1pbihhcnJheS5sZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgIGNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgKGxlbmd0aCA+PSAxMjAgJiYgYXJyYXkubGVuZ3RoID49IDEyMCkpXG4gICAgICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnJheSA9IGFycmF5c1swXTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiByZXN1bHQubGVuZ3RoIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKCEoc2VlblxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgICAgICA6IGluY2x1ZGVzKHJlc3VsdCwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKC0tb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tvdGhJbmRleF07XG4gICAgICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICAgICAgPyBjYWNoZUhhcyhjYWNoZSwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgICAgICA6IGluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52ZXJ0YCBhbmQgYF8uaW52ZXJ0QnlgIHdoaWNoIGludmVydHNcbiAgICAgKiBgb2JqZWN0YCB3aXRoIHZhbHVlcyB0cmFuc2Zvcm1lZCBieSBgaXRlcmF0ZWVgIGFuZCBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIGl0ZXJhdGVlKHZhbHVlKSwga2V5LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52b2tlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBtZXRob2QgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICB2YXIgZnVuYyA9IG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhcHBseShmdW5jLCBvYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FycmF5QnVmZmVyYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRGF0ZWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBkYXRlVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAgICAgKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAgICAgKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gICAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gICAgICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgICAgICBvYmpJc09iaiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgICAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgICAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzUmVnRXhwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHJlZ2V4cFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubHRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUx0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgYmFzZU1lcmdlLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICAgICAgc3JjVmFsdWUgPSBzYWZlR2V0KHNvdXJjZSwga2V5KSxcbiAgICAgICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgIGlmIChpc0FyciB8fCBpc0J1ZmYgfHwgaXNUeXBlZCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm50aGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTnRoKGFycmF5LCBuKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gaXNJbmRleChuLCBsZW5ndGgpID8gYXJyYXlbbl0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgICAgIGlmIChpdGVyYXRlZXMubGVuZ3RoKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShpdGVyYXRlZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gYmFzZUdldCh2YWx1ZSwgaXRlcmF0ZWUubGVuZ3RoID09PSAxID8gaXRlcmF0ZWVbMF0gOiBpdGVyYXRlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpdGVyYXRlZTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaWRlbnRpdHldO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgICAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5waWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBoYXNJbihvYmplY3QsIHBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhzW2luZGV4XSxcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuXG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICAgICAgYmFzZVNldChyZXN1bHQsIGNhc3RQYXRoKHBhdGgsIG9iamVjdCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEFsbEJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAgICogc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4T2YgPSBjb21wYXJhdG9yID8gYmFzZUluZGV4T2ZXaXRoIDogYmFzZUluZGV4T2YsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHNlZW4gPSBhcnJheTtcblxuICAgICAgaWYgKGFycmF5ID09PSB2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzID0gY29weUFycmF5KHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgc2VlbiA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBmcm9tSW5kZXggPSAwLFxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbUluZGV4ID0gaW5kZXhPZihzZWVuLCBjb21wdXRlZCwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSkgPiAtMSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoc2VlbiwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIGluZGV4ZXMgb3IgY2FwdHVyaW5nIHRoZSByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGluZGV4ZXMubGVuZ3RoIDogMCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBpZiAobGVuZ3RoID09IGxhc3RJbmRleCB8fCBpbmRleCAhPT0gcHJldmlvdXMpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXMgPSBpbmRleDtcbiAgICAgICAgICBpZiAoaXNJbmRleChpbmRleCkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleCwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2VVbnNldChhcnJheSwgaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmRvbWAgd2l0aG91dCBzdXBwb3J0IGZvciByZXR1cm5pbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcikge1xuICAgICAgcmV0dXJuIGxvd2VyICsgbmF0aXZlRmxvb3IobmF0aXZlUmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAgICAgKiBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlcGVhdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXBlYXQoc3RyaW5nLCBuKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICBpZiAoIXN0cmluZyB8fCBuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gTGV2ZXJhZ2UgdGhlIGV4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nIGFsZ29yaXRobSBmb3IgYSBmYXN0ZXIgcmVwZWF0LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V4cG9uZW50aWF0aW9uX2J5X3NxdWFyaW5nIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuICUgMikge1xuICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG5hdGl2ZUZsb29yKG4gLyAyKTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICBzdHJpbmcgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChuKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGFycmF5U2FtcGxlKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlU2l6ZWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuKSB7XG4gICAgICB2YXIgYXJyYXkgPSB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoYXJyYXksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gICAgICB3aGlsZSAobmVzdGVkICE9IG51bGwgJiYgKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJyB8fCBrZXkgPT09ICdjb25zdHJ1Y3RvcicgfHwga2V5ID09PSAncHJvdG90eXBlJykge1xuICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kZXggIT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgICAgIDogKGlzSW5kZXgocGF0aFtpbmRleCArIDFdKSA/IFtdIDoge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3NpZ25WYWx1ZShuZXN0ZWQsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldERhdGFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldERhdGEgPSAhbWV0YU1hcCA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgZGF0YSkge1xuICAgICAgbWV0YU1hcC5zZXQoZnVuYywgZGF0YSk7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zaHVmZmxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgICAgIHN0YXJ0ID4+Pj0gMDtcblxuICAgICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvbWVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gIXJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4YCB3aGljaFxuICAgICAqIHBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBvZiBgYXJyYXlgIHRvIGRldGVybWluZSB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gbG93IDogYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDEsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gYXJyYXlbbWlkXTtcblxuICAgICAgICAgIGlmIChjb21wdXRlZCAhPT0gbnVsbCAmJiAhaXNTeW1ib2woY29tcHV0ZWQpICYmXG4gICAgICAgICAgICAgIChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4QnlgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhCeWBcbiAgICAgKiB3aGljaCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGVcbiAgICAgKiB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICB2YXIgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uICYmIG5hdGl2ZUlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBvYmpTdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBvYmpTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gb2JqZWN0O1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgICAgIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAgICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IChmdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgYXJyYXkgPSByZWFsTmFtZXNbcmVzdWx0XSxcbiAgICAgICAgICBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0KSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IGFycmF5W2xlbmd0aF0sXG4gICAgICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgICAgIHZhciBvYmplY3QgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaCwgJ3BsYWNlaG9sZGVyJykgPyBsb2Rhc2ggOiBmdW5jO1xuICAgICAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcIml0ZXJhdGVlXCIgZnVuY3Rpb24uIElmIGBfLml0ZXJhdGVlYCBpcyBjdXN0b21pemVkLFxuICAgICAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGJhc2VJdGVyYXRlZWAuXG4gICAgICogSWYgYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgdGhlIGNob3NlbiBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIHRoZSBjcmVhdGVkIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2hvc2VuIGZ1bmN0aW9uIG9yIGl0cyByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoLml0ZXJhdGVlIHx8IGl0ZXJhdGVlO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBpdGVyYXRlZSA/IGJhc2VJdGVyYXRlZSA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcmVzdWx0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgICAgIDogZGF0YS5tYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICBpZiAodW5tYXNrZWQpIHtcbiAgICAgICAgaWYgKGlzT3duKSB7XG4gICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHdoaWxlIChvYmplY3QpIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICAgICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgdmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbiAgICAvLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG4gICAgaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgICAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAgICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgICAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gICAgICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmlldywgYXBwbHlpbmcgYW55IGB0cmFuc2Zvcm1zYCB0byB0aGUgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIFRoZSB0cmFuc2Zvcm1hdGlvbnMgdG8gYXBwbHkgdG8gdGhlIHZpZXcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHN0YXJ0YCBhbmQgYGVuZGBcbiAgICAgKiAgcG9zaXRpb25zIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZpZXcoc3RhcnQsIGVuZCwgdHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdHJhbnNmb3Jtc1tpbmRleF0sXG4gICAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6ICAgICAgc3RhcnQgKz0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcFJpZ2h0JzogZW5kIC09IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2UnOiAgICAgIGVuZCA9IG5hdGl2ZU1pbihlbmQsIHN0YXJ0ICsgc2l6ZSk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2VSaWdodCc6IHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0LCBlbmQgLSBzaXplKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7ICdzdGFydCc6IHN0YXJ0LCAnZW5kJzogZW5kIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgd3JhcHBlciBkZXRhaWxzIGZyb20gdGhlIGBzb3VyY2VgIGJvZHkgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3cmFwcGVyIGRldGFpbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0V3JhcERldGFpbHMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdChyZVNwbGl0RGV0YWlscykgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgICAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gICAgICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc291cmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICAgICAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UocmVXcmFwQ29tbWVudCwgJ3tcXG4vKiBbd3JhcHBlZCB3aXRoICcgKyBkZXRhaWxzICsgJ10gKi9cXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gICAgICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgICAgICkge1xuICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICAgICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSAnZnVuY3Rpb24nIHx8ICEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGdldERhdGEob3RoZXIpO1xuICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBpcyBjYXBhYmxlIG9mIGJlaW5nIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIHZhciBpc01hc2thYmxlID0gY29yZUpzRGF0YSA/IGlzRnVuY3Rpb24gOiBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gICAgICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAgICAgKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAgICAgKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAgICAgKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICAgICAqIGV4ZWN1dGVkIGltcG9ydGFudCwgcHJldmVudGluZyB0aGUgbWVyZ2luZyBvZiBtZXRhZGF0YS4gSG93ZXZlciwgd2UgbWFrZVxuICAgICAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gICAgICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyZ1Bvc2AgaWYgYXZhaWxhYmxlLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbN107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZGF0YVs3XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQVJZX0ZMQUcpIHtcbiAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gICAgICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gICAgICBkYXRhWzBdID0gc291cmNlWzBdO1xuICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICAgICAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIHNlY29uZCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlb3JkZXIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihpbmRleGVzLmxlbmd0aCwgYXJyTGVuZ3RoKSxcbiAgICAgICAgICBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4KGluZGV4LCBhcnJMZW5ndGgpID8gb2xkQXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICAgICAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAgICAgKiBmdW5jdGlvbiB0byBhdm9pZCBnYXJiYWdlIGNvbGxlY3Rpb24gcGF1c2VzIGluIFY4LiBTZWVcbiAgICAgKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgc2V0VGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL3NldFRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VGltZW91dCA9IGN0eFNldFRpbWVvdXQgfHwgZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAgICAgKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcod3JhcHBlciwgaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICAgICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICAgIHZhciBjb3VudCA9IDAsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCB3aGljaCBtdXRhdGVzIGFuZCBzZXRzIHRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemU7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgdmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgfVxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgICAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgICAgIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkZXRhaWxzYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gICAgICBhcnJheUVhY2god3JhcEZsYWdzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgICAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgICAgICBkZXRhaWxzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXRhaWxzLnNvcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh3cmFwcGVyLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2luZGV4X18gID0gd3JhcHBlci5fX2luZGV4X187XG4gICAgICByZXN1bHQuX192YWx1ZXNfXyA9IHdyYXBwZXIuX192YWx1ZXNfXztcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIGdyb3VwcyB0aGUgbGVuZ3RoIG9mIGBzaXplYC5cbiAgICAgKiBJZiBgYXJyYXlgIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIFRoZSBsZW5ndGggb2YgZWFjaCBjaHVua1xuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY2h1bmtzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWydjJywgJ2QnXV1cbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYicsICdjJ10sIFsnZCddXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzaXplLCBndWFyZCkgOiBzaXplID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHNpemUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IG5hdGl2ZU1heCh0b0ludGVnZXIoc2l6ZSksIDApO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc2l6ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlQ2VpbChsZW5ndGggLyBzaXplKSk7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBiYXNlU2xpY2UoYXJyYXksIGluZGV4LCAoaW5kZXggKz0gc2l6ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsXG4gICAgICogYDBgLCBgXCJcImAsIGB1bmRlZmluZWRgLCBhbmQgYE5hTmAgYXJlIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb25jYXRlbmF0aW5nIGBhcnJheWAgd2l0aCBhbnkgYWRkaXRpb25hbCBhcnJheXNcbiAgICAgKiBhbmQvb3IgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNvbmNhdChhcnJheSwgMiwgWzNdLCBbWzRdXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvdGhlcik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoIC0gMSksXG4gICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGFyZ3NbaW5kZXggLSAxXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlQdXNoKGlzQXJyYXkoYXJyYXkpID8gY29weUFycmF5KGFycmF5KSA6IFthcnJheV0sIGJhc2VGbGF0dGVuKGFyZ3MsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsQnlgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sIFt7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZUJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIG9yZGVyIGFuZFxuICAgICAqIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxXaXRoYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZVdpdGgob2JqZWN0cywgW3sgJ3gnOiAxLCAneSc6IDIgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZVdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgICAgICBjb21wYXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsbHMgZWxlbWVudHMgb2YgYGFycmF5YCB3aXRoIGB2YWx1ZWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90XG4gICAgICogaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8uZmlsbChhcnJheSwgJ2EnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2EnLCAnYSddXG4gICAgICpcbiAgICAgKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICAgICAqIC8vID0+IFsyLCAyLCAyXVxuICAgICAqXG4gICAgICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzQsICcqJywgJyonLCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ICYmIHR5cGVvZiBzdGFydCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRJbmRleGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAncGViYmxlcyc7IH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggPCAwXG4gICAgICAgICAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApXG4gICAgICAgICAgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0LCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIElORklOSVRZKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYGFycmF5YCB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgWzIsIFszLCBbNF1dLCA1XV07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlcHRoKGFycmF5LCBkZXB0aCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy50b1BhaXJzYDsgdGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBmcm9tIGtleS12YWx1ZSBgcGFpcnNgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZyb21QYWlycyhbWydhJywgMV0sIFsnYicsIDJdXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBmaXJzdFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmhlYWQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmhlYWQoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlYWQoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzIHRoZVxuICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMCwgLTEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsyXVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBpZiAoaXRlcmF0ZWUgPT09IGxhc3QobWFwcGVkKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXNcbiAgICAgKiBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYWxsIGVsZW1lbnRzIGluIGBhcnJheWAgaW50byBhIHN0cmluZyBzZXBhcmF0ZWQgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcGFyYXRvcj0nLCddIFRoZSBlbGVtZW50IHNlcGFyYXRvci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBqb2luZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmpvaW4oWydhJywgJ2InLCAnYyddLCAnficpO1xuICAgICAqIC8vID0+ICdhfmJ+YydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBqb2luKGFycmF5LCBzZXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gJycgOiBuYXRpdmVKb2luLmNhbGwoYXJyYXksIHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBhcnJheWAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKSA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICAgID8gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleClcbiAgICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbGVtZW50IGF0IGluZGV4IGBuYCBvZiBgYXJyYXlgLiBJZiBgbmAgaXMgbmVnYXRpdmUsIHRoZSBudGhcbiAgICAgKiBlbGVtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjExLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIC0yKTtcbiAgICAgKiAvLyA9PiAnYyc7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlTnRoKGFycmF5LCB0b0ludGVnZXIobikpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnJlbW92ZWBcbiAgICAgKiB0byByZW1vdmUgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSBwcmVkaWNhdGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgdmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbChhcnJheSwgWydhJywgJ2MnXSk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlQnlgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMyB9LCB7ICd4JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbEJ5KGFycmF5LCBbeyAneCc6IDEgfSwgeyAneCc6IDMgfV0sICd4Jyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZVdpdGhgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDMsICd5JzogNCB9LCB7ICd4JzogNSwgJ3knOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsV2l0aChhcnJheSwgW3sgJ3gnOiAzLCAneSc6IDQgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiA1LCAneSc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsV2l0aChhcnJheSwgdmFsdWVzLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGBhcnJheWAgY29ycmVzcG9uZGluZyB0byBgaW5kZXhlc2AgYW5kIHJldHVybnMgYW5cbiAgICAgKiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5hdGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKiB2YXIgcHVsbGVkID0gXy5wdWxsQXQoYXJyYXksIFsxLCAzXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2MnXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cocHVsbGVkKTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnZCddXG4gICAgICovXG4gICAgdmFyIHB1bGxBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcblxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgYXJyYXlNYXAoaW5kZXhlcywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGlzSW5kZXgoaW5kZXgsIGxlbmd0aCkgPyAraW5kZXggOiBpbmRleDtcbiAgICAgIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBgYXJyYXlgIHRoYXQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yXG4gICAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnB1bGxgXG4gICAgICogdG8gcHVsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDRdO1xuICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgYGFycmF5YCBzbyB0aGF0IHRoZSBmaXJzdCBlbGVtZW50IGJlY29tZXMgdGhlIGxhc3QsIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50IGJlY29tZXMgdGhlIHNlY29uZCB0byBsYXN0LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgIGFuZCBpcyBiYXNlZCBvblxuICAgICAqIFtgQXJyYXkjcmV2ZXJzZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3JldmVyc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5yZXZlcnNlKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXZlcnNlKGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/IGFycmF5IDogbmF0aXZlUmV2ZXJzZS5jYWxsKGFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICAgKiBbYEFycmF5I3NsaWNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvc2xpY2UpIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCAmJiBlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAgICAgKiBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG9cbiAgICAgKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZExhc3RJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubGFzdEluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpIC0gMTtcbiAgICAgICAgaWYgKGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXEoWzEsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFCeWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXFCeShbMS4xLCAxLjIsIDIuMywgMi40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMSwgMi4zXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRhaWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWlsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAxLCBsZW5ndGgpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZShhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gICAgICogdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGZhbHNlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICAgICAqIGFyZSB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgZnJvbSBhbGwgZ2l2ZW4gYXJyYXlzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uKFsyXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb20gdGhlIGZpcnN0XG4gICAgICogYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uQnkoWzIuMV0sIFsxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbVxuICAgICAqIHRoZSBmaXJzdCBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGluIHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaCBlbGVtZW50XG4gICAgICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICAgICAqIGluIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzIsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZVxuICAgICAqIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXFCeShbMi4xLCAxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS5UaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIHVuZGVmaW5lZCwgY29tcGFyYXRvcikgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiBncm91cGVkXG4gICAgICogZWxlbWVudHMgYW5kIGNyZWF0ZXMgYW4gYXJyYXkgcmVncm91cGluZyB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlLXppcFxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwKHppcHBlZCk7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcChhcnJheSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChncm91cCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoZ3JvdXAubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAoYXJyYXksIGJhc2VQcm9wZXJ0eShpbmRleCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgcmVncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSk7XG4gICAgICogLy8gPT4gW1sxLCAxMCwgMTAwXSwgWzIsIDIwLCAyMDBdXVxuICAgICAqXG4gICAgICogXy51bnppcFdpdGgoemlwcGVkLCBfLmFkZCk7XG4gICAgICogLy8gPT4gWzMsIDMwLCAzMDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdW56aXAoYXJyYXkpO1xuICAgICAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdW5kZWZpbmVkLCBncm91cCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzIsIDEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKi9cbiAgICB2YXIgd2l0aG91dCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgaXMgdGhlXG4gICAgICogW3N5bW1ldHJpYyBkaWZmZXJlbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZSlcbiAgICAgKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICAgICAqIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICovXG4gICAgdmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkXG4gICAgICogYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmVcbiAgICAgKiBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvckJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjIsIDMuNF1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ueG9yQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHhvckJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy54b3JXaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHhvcldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIHNlY29uZCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKi9cbiAgICB2YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mcm9tUGFpcnNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgdHdvIGFycmF5cyxcbiAgICAgKiBvbmUgb2YgcHJvcGVydHkgaWRlbnRpZmllcnMgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydhJywgJ2InXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3QocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYXNzaWduVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwT2JqZWN0YCBleGNlcHQgdGhhdCBpdCBzdXBwb3J0cyBwcm9wZXJ0eSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3REZWVwKFsnYS5iWzBdLmMnLCAnYS5iWzFdLmQnXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IFt7ICdjJzogMSB9LCB7ICdkJzogMiB9XSB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3REZWVwKHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGJhc2VTZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyBncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBXaXRoKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0sIGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBhICsgYiArIGM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzExMSwgMjIyXVxuICAgICAqL1xuICAgIHZhciB6aXBXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGl0ZXJhdGVlID0gdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgPyAoYXJyYXlzLnBvcCgpLCBpdGVyYXRlZSkgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUpO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCB3cmFwcyBgdmFsdWVgIHdpdGggZXhwbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuIFRoZSByZXN1bHQgb2Ygc3VjaCBzZXF1ZW5jZXMgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgeW91bmdlc3QgPSBfXG4gICAgICogICAuY2hhaW4odXNlcnMpXG4gICAgICogICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICogICAgIHJldHVybiBvLnVzZXIgKyAnIGlzICcgKyBvLmFnZTtcbiAgICAgKiAgIH0pXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoKHZhbHVlKTtcbiAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIGBpbnRlcmNlcHRvcmAgYW5kIHJldHVybnMgYHZhbHVlYC4gVGhlIGludGVyY2VwdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG9cbiAgICAgKiBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UgaW4gb3JkZXIgdG8gbW9kaWZ5IGludGVybWVkaWF0ZSByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICogICAgLy8gTXV0YXRlIGlucHV0IGFycmF5LlxuICAgICAqICAgIGFycmF5LnBvcCgpO1xuICAgICAqICB9KVxuICAgICAqICAucmV2ZXJzZSgpXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhcCh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnRhcGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJwYXNzIHRocnVcIiB2YWx1ZXMgcmVwbGFjaW5nIGludGVybWVkaWF0ZVxuICAgICAqIHJlc3VsdHMgaW4gYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKCcgIGFiYyAgJylcbiAgICAgKiAgLmNoYWluKClcbiAgICAgKiAgLnRyaW0oKVxuICAgICAqICAudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgIHJldHVybiBbdmFsdWVdO1xuICAgICAqICB9KVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhydSh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5hdGAuXG4gICAgICpcbiAgICAgKiBAbmFtZSBhdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfKG9iamVjdCkuYXQoWydhWzBdLmIuYycsICdhWzFdJ10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIHdyYXBwZXJBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoID8gcGF0aHNbMF0gOiAwLFxuICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKG9iamVjdCkgeyByZXR1cm4gYmFzZUF0KG9iamVjdCwgcGF0aHMpOyB9O1xuXG4gICAgICBpZiAobGVuZ3RoID4gMSB8fCB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCB8fFxuICAgICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikgfHwgIWlzSW5kZXgoc3RhcnQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShzdGFydCwgK3N0YXJ0ICsgKGxlbmd0aCA/IDEgOiAwKSk7XG4gICAgICB2YWx1ZS5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAnYXJncyc6IFtpbnRlcmNlcHRvcl0sXG4gICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSwgdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgaWYgKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXkucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycykuaGVhZCgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKVxuICAgICAqICAgLmNoYWluKClcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC5waWNrKCd1c2VyJylcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkge1xuICAgICAgcmV0dXJuIGNoYWluKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSBhbmQgcmV0dXJucyB0aGUgd3JhcHBlZCByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb21taXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkucHVzaCgzKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQgPSB3cmFwcGVkLmNvbW1pdCgpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubGFzdCgpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ29tbWl0KCkge1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgdmFsdWUgb24gYSB3cmFwcGVkIG9iamVjdCBmb2xsb3dpbmcgdGhlXG4gICAgICogW2l0ZXJhdG9yIHByb3RvY29sXShodHRwczovL21kbi5pby9pdGVyYXRpb25fcHJvdG9jb2xzI2l0ZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBuYW1lIG5leHRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXh0IGl0ZXJhdG9yIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMSB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDIgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IHRydWUsICd2YWx1ZSc6IHVuZGVmaW5lZCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlck5leHQoKSB7XG4gICAgICBpZiAodGhpcy5fX3ZhbHVlc19fID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdG9BcnJheSh0aGlzLnZhbHVlKCkpO1xuICAgICAgfVxuICAgICAgdmFyIGRvbmUgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gZG9uZSA/IHVuZGVmaW5lZCA6IHRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXTtcblxuICAgICAgcmV0dXJuIHsgJ2RvbmUnOiBkb25lLCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIHdyYXBwZXIgdG8gYmUgaXRlcmFibGUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBTeW1ib2wuaXRlcmF0b3JcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkW1N5bWJvbC5pdGVyYXRvcl0oKSA9PT0gd3JhcHBlZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBBcnJheS5mcm9tKHdyYXBwZWQpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb0l0ZXJhdG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBjaGFpbiBzZXF1ZW5jZSBwbGFudGluZyBgdmFsdWVgIGFzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgcGxhbnRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwbGFudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKS5tYXAoc3F1YXJlKTtcbiAgICAgKiB2YXIgb3RoZXIgPSB3cmFwcGVkLnBsYW50KFszLCA0XSk7XG4gICAgICpcbiAgICAgKiBvdGhlci52YWx1ZSgpO1xuICAgICAqIC8vID0+IFs5LCAxNl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUGxhbnQodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgcGFyZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHtcbiAgICAgICAgdmFyIGNsb25lID0gd3JhcHBlckNsb25lKHBhcmVudCk7XG4gICAgICAgIGNsb25lLl9faW5kZXhfXyA9IDA7XG4gICAgICAgIGNsb25lLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IGNsb25lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNsb25lO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187XG4gICAgICB9XG4gICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLnJldmVyc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIHdyYXBwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8oYXJyYXkpLnJldmVyc2UoKS52YWx1ZSgpXG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoKSB7XG4gICAgICAgICAgd3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkID0gd3JhcHBlZC5yZXZlcnNlKCk7XG4gICAgICAgIHdyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAgICdhcmdzJzogW3JldmVyc2VdLFxuICAgICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlZCwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudGhydShyZXZlcnNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyB0b0pTT04sIHZhbHVlT2ZcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUodGhpcy5fX3dyYXBwZWRfXywgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICAgICAqL1xuICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICArK3Jlc3VsdFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBbZW1wdHkgY29sbGVjdGlvbnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxuICAgICAqIFtldmVyeXRoaW5nIGlzIHRydWVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZhY3VvdXNfdHJ1dGgpIG9mXG4gICAgICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmV2ZXJ5KFt0cnVlLCAxLCBudWxsLCAneWVzJ10sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5yZWplY3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBDb21iaW5pbmcgc2V2ZXJhbCBwcmVkaWNhdGVzIHVzaW5nIGBfLm92ZXJFdmVyeWAgb3IgYF8ub3ZlclNvbWVgLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLm92ZXJTb21lKFt7ICdhZ2UnOiAzNiB9LCBbJ2FnZScsIDQwXV0pKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogMzAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDMwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDMwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICAgICAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgICAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICAgICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICAgICAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc2FmZSBpbnRlZ2VyLiBBIHNhZmUgaW50ZWdlciBjYW4gYmUgY29tcGFyZWQgYW5kXG4gICAgICogcmVwcmVzZW50ZWQgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA5MDA3MTk5MjU0NzQwOTkxXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgLU1BWF9TQUZFX0lOVEVHRVIsIE1BWF9TQUZFX0lOVEVHRVIpXG4gICAgICAgIDogKHZhbHVlID09PSAwID8gdmFsdWUgOiAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgICAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoLTApO1xuICAgICAqIC8vID0+ICctMCdcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduSW4oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFdpdGhcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBgcGF0aHNgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfLmF0KG9iamVjdCwgWydhWzBdLmIuYycsICdhWzFdJ10pO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciBhdCA9IGZsYXRSZXN0KGJhc2VBdCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgZ2l2ZW4sIGl0cyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllc1xuICAgICAqIGFyZSBhc3NpZ25lZCB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQgOiBiYXNlQXNzaWduKHJlc3VsdCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICAgICAqIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdFxuICAgICAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgICAgIHZhciBwcm9wc0luZGV4ID0gLTE7XG4gICAgICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytwcm9wc0luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbcHJvcHNJbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAoZXEodmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBhc3NpZ25zXG4gICAgICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICdhJzogeyAnYic6IDIgfSB9LCB7ICdhJzogeyAnYic6IDEsICdjJzogMyB9IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlKTtcbiAgICAgIHJldHVybiBhcHBseShtZXJnZVdpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgJ3BlYmJsZXMnIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICAgICAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYycsICdiJywgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9ySW5gIGxvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvclJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICAgICAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2InIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgdGhlbiAnYicuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gYW5kIGluaGVyaXRlZFxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICAgICAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG90aGVyLCAnYScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAgICAgKiBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG4gICAgfSwgY29uc3RhbnQoaWRlbnRpdHkpKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW52ZXJ0YCBleGNlcHQgdGhhdCB0aGUgaW52ZXJ0ZWQgb2JqZWN0IGlzIGdlbmVyYXRlZFxuICAgICAqIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIGludmVydGVkIHZhbHVlIG9mIGVhY2ggaW52ZXJ0ZWQga2V5IGlzIGFuIGFycmF5IG9mIGtleXNcbiAgICAgKiByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUgaW52ZXJ0ZWQgdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuICdncm91cCcgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdncm91cDEnOiBbJ2EnLCAnYyddLCAnZ3JvdXAyJzogWydiJ10gfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnRCeSA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0gPSBba2V5XTtcbiAgICAgIH1cbiAgICB9LCBnZXRJdGVyYXRlZSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogWzEsIDIsIDMsIDRdIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uaW52b2tlKG9iamVjdCwgJ2FbMF0uYi5jLnNsaWNlJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgdmFyIGludm9rZSA9IGJhc2VSZXN0KGJhc2VJbnZva2UpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICAgICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8ua2V5cygnaGknKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gICAgICogc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwVmFsdWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcEtleXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICAgICAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcEtleXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gICAgICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAgICAgKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAgICAgKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXIgPSB7XG4gICAgICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZXJnZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGFuZCBzb3VyY2VcbiAgICAgKiBwcm9wZXJ0aWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgbWVyZ2luZyBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgICAqIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBzaXggYXJndW1lbnRzOlxuICAgICAqIChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIG9ialZhbHVlLmNvbmNhdChzcmNWYWx1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbMV0sICdiJzogWzJdIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IFszXSwgJ2InOiBbNF0gfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2VXaXRoKG9iamVjdCwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbMSwgM10sICdiJzogWzIsIDRdIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2VXaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmFibHkgc2xvd2VyIHRoYW4gYF8ucGlja2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgdmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgIGlzRGVlcCB8fCAoaXNEZWVwID0gcGF0aC5sZW5ndGggPiAxKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9KTtcbiAgICAgIGNvcHlPYmplY3Qob2JqZWN0LCBnZXRBbGxLZXlzSW4ob2JqZWN0KSwgcmVzdWx0KTtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmVzdWx0ID0gYmFzZUNsb25lKHJlc3VsdCwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfRkxBVF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21PbWl0Q2xvbmUpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBiYXNlVW5zZXQocmVzdWx0LCBwYXRoc1tsZW5ndGhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja0J5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2ZcbiAgICAgKiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBgb2JqZWN0YCB0aGF0XG4gICAgICogYHByZWRpY2F0ZWAgZG9lc24ndCByZXR1cm4gdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdEJ5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gb21pdEJ5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gcGlja0J5KG9iamVjdCwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIHBpY2sgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJuc1xuICAgICAqIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrQnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICB2YXIgcHJvcHMgPSBhcnJheU1hcChnZXRBbGxLZXlzSW4ob2JqZWN0KSwgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICByZXR1cm4gW3Byb3BdO1xuICAgICAgfSk7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUpO1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh2YWx1ZSwgcGF0aFswXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmdldGAgZXhjZXB0IHRoYXQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFcbiAgICAgKiBmdW5jdGlvbiBpdCdzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgaXRzIHBhcmVudCBvYmplY3QgYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjMSc6IDMsICdjMic6IF8uY29uc3RhbnQoNCkgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMxJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMyJyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsIF8uY29uc3RhbnQoJ2RlZmF1bHQnKSk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdWx0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGUgbG9vcCBpcyBlbnRlcmVkIHdoZW4gcGF0aCBpcyBlbXB0eS5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIG9iamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXhdKV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gICAgICogaXQncyBjcmVhdGVkLiBBcnJheXMgYXJlIGNyZWF0ZWQgZm9yIG1pc3NpbmcgaW5kZXggcHJvcGVydGllcyB3aGlsZSBvYmplY3RzXG4gICAgICogYXJlIGNyZWF0ZWQgZm9yIGFsbCBvdGhlciBtaXNzaW5nIHByb3BlcnRpZXMuIFVzZSBgXy5zZXRXaXRoYCB0byBjdXN0b21pemVcbiAgICAgKiBgcGF0aGAgY3JlYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCBbJ3gnLCAnMCcsICd5JywgJ3onXSwgNSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8uc2V0V2l0aChvYmplY3QsICdbMF1bMV0nLCAnYScsIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V2l0aChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YFxuICAgICAqIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcCBvciBzZXQsIGl0c1xuICAgICAqIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl1dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnMgPSBjcmVhdGVUb1BhaXJzKGtleXMpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlyc1xuICAgICAqIGZvciBgb2JqZWN0YCB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXBcbiAgICAgKiBvciBzZXQsIGl0cyBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzSW5cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnNJbiA9IGNyZWF0ZVRvUGFpcnMoa2V5c0luKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAgICAgKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gICAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyB0aHJ1IGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uXG4gICAgICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICAgICAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gICAgICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA5XVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0FyciA/IG5ldyBDdG9yIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGlzQXJyTGlrZSA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiA3IH0gfV0gfTtcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqXG4gICAgICogXy51bnNldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB0cnVlIDogYmFzZVVuc2V0KG9iamVjdCwgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGFjY2VwdHMgYHVwZGF0ZXJgIHRvIHByb2R1Y2UgdGhlXG4gICAgICogdmFsdWUgdG8gc2V0LiBVc2UgYF8udXBkYXRlV2l0aGAgdG8gY3VzdG9taXplIGBwYXRoYCBjcmVhdGlvbi4gVGhlIGB1cGRhdGVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAnYVswXS5iLmMnLCBmdW5jdGlvbihuKSB7IHJldHVybiBuICogbjsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICd4WzBdLnkueicsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPyBuICsgMSA6IDA7IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udXBkYXRlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy51cGRhdGVXaXRoKG9iamVjdCwgJ1swXVsxXScsIF8uY29uc3RhbnQoJ2EnKSwgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXaXRoKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWydoJywgJ2knXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENsYW1wcyBgbnVtYmVyYCB3aXRoaW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoLTEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gLTVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSB0b051bWJlcih1cHBlcik7XG4gICAgICAgIHVwcGVyID0gdXBwZXIgPT09IHVwcGVyID8gdXBwZXIgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgICAgIGxvd2VyID0gbG93ZXIgPT09IGxvd2VyID8gbG93ZXIgOiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgbmAgaXMgYmV0d2VlbiBgc3RhcnRgIGFuZCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZlxuICAgICAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKiBJZiBgc3RhcnRgIGlzIGdyZWF0ZXIgdGhhbiBgZW5kYCB0aGUgcGFyYW1zIGFyZSBzd2FwcGVkIHRvIHN1cHBvcnRcbiAgICAgKiBuZWdhdGl2ZSByYW5nZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ucmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMywgMiwgNCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDgpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDIsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMS4yLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNS4yLCA0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKC0zLCAtMiwgLTYpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICB9XG4gICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKiBJZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlclxuICAgICAqIGlzIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBsb3dlcmAgb3IgYHVwcGVyYCBhcmVcbiAgICAgKiBmbG9hdHMsIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGlzIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXI9MF0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdXBwZXI9MV0gVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSB7XG4gICAgICBpZiAoZmxvYXRpbmcgJiYgdHlwZW9mIGZsb2F0aW5nICE9ICdib29sZWFuJyAmJiBpc0l0ZXJhdGVlQ2FsbChsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSkge1xuICAgICAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cHBlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IHVwcGVyO1xuICAgICAgICAgIHVwcGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBsb3dlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgdXBwZXIgPSAxO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvd2VyID0gdG9GaW5pdGUobG93ZXIpO1xuICAgICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwcGVyID0gdG9GaW5pdGUodXBwZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICB2YXIgdGVtcCA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVwcGVyO1xuICAgICAgICB1cHBlciA9IHRlbXA7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgfHwgbG93ZXIgJSAxIHx8IHVwcGVyICUgMSkge1xuICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlTWluKGxvd2VyICsgKHJhbmQgKiAodXBwZXIgLSBsb3dlciArIGZyZWVQYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsgJycpLmxlbmd0aCAtIDEpKSkpLCB1cHBlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKi9cbiAgICB2YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/IGNhcGl0YWxpemUod29yZCkgOiB3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICAgICAqIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICAgICAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICAgICAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAgICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gICAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gICAgICogLy8gPT4gJ2RlamEgdnUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj1zdHJpbmcubGVuZ3RoXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2MnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBsZW5ndGhcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgbGVuZ3RoKTtcblxuICAgICAgdmFyIGVuZCA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA+PSAwICYmIHN0cmluZy5zbGljZShwb3NpdGlvbiwgZW5kKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAgICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAgICAgKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gICAgICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgICAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICAgICAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gICAgICogWFNTIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgdGhlIGBSZWdFeHBgIHNwZWNpYWwgY2hhcmFjdGVycyBcIl5cIiwgXCIkXCIsIFwiXFxcIiwgXCIuXCIsIFwiKlwiLCBcIitcIixcbiAgICAgKiBcIj9cIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiLCBcIn1cIiwgYW5kIFwifFwiIGluIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGVSZWdFeHAoJ1tsb2Rhc2hdKGh0dHBzOi8vbG9kYXNoLmNvbS8pJyk7XG4gICAgICogLy8gPT4gJ1xcW2xvZGFzaFxcXVxcKGh0dHBzOi8vbG9kYXNoXFwuY29tL1xcKSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGtlYmFiIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqL1xuICAgIHZhciBrZWJhYkNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdmUkVEJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b0xvd2VyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBjYW4ndCBiZSBldmVubHkgZGl2aWRlZCBieSBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCk7XG4gICAgICogLy8gPT4gJyAgYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgsICdfLScpO1xuICAgICAqIC8vID0+ICdfLWFiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbWlkID0gKGxlbmd0aCAtIHN0ckxlbmd0aCkgLyAyO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVGbG9vcihtaWQpLCBjaGFycykgK1xuICAgICAgICBzdHJpbmcgK1xuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUNlaWwobWlkKSwgY2hhcnMpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIHJpZ2h0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICdhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZEVuZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKHN0cmluZyArIGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnICAgYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tX2FiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpICsgc3RyaW5nKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBpbnRlZ2VyIG9mIHRoZSBzcGVjaWZpZWQgcmFkaXguIElmIGByYWRpeGAgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCBvciBgMGAsIGEgYHJhZGl4YCBvZiBgMTBgIGlzIHVzZWQgdW5sZXNzIGB2YWx1ZWAgaXMgYVxuICAgICAqIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgYWxpZ25zIHdpdGggdGhlXG4gICAgICogW0VTNSBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjIpIG9mIGBwYXJzZUludGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeD0xMF0gVGhlIHJhZGl4IHRvIGludGVycHJldCBgdmFsdWVgIGJ5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzA4JywgJzEwJ10sIF8ucGFyc2VJbnQpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4LCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkIHx8IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgcmFkaXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChyYWRpeCkge1xuICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVQYXJzZUludCh0b1N0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKSwgcmFkaXggfHwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwZWF0cyB0aGUgZ2l2ZW4gc3RyaW5nIGBuYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCcqJywgMyk7XG4gICAgICogLy8gPT4gJyoqKidcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAyKTtcbiAgICAgKiAvLyA9PiAnYWJjYWJjJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDApO1xuICAgICAqIC8vID0+ICcnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSZXBlYXQodG9TdHJpbmcoc3RyaW5nKSwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgbWF0Y2hlcyBmb3IgYHBhdHRlcm5gIGluIGBzdHJpbmdgIHdpdGggYHJlcGxhY2VtZW50YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3JlcGxhY2VgXShodHRwczovL21kbi5pby9TdHJpbmcvcmVwbGFjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gcGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSByZXBsYWNlbWVudCBUaGUgbWF0Y2ggcmVwbGFjZW1lbnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGxhY2UoJ0hpIEZyZWQnLCAnRnJlZCcsICdCYXJuZXknKTtcbiAgICAgKiAvLyA9PiAnSGkgQmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhhcmdzWzBdKTtcblxuICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoIDwgMyA/IHN0cmluZyA6IHN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICovXG4gICAgdmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3NwbGl0YF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3NwbGl0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzcGxpdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHNlcGFyYXRvciBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF0gVGhlIGxlbmd0aCB0byB0cnVuY2F0ZSByZXN1bHRzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc3RyaW5nIHNlZ21lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNwbGl0KCdhLWItYycsICctJywgMik7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGxpbWl0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX0FSUkFZX0xFTkdUSCA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKCFsaW1pdCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoXG4gICAgICAgICAgICB0eXBlb2Ygc2VwYXJhdG9yID09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAoc2VwYXJhdG9yICE9IG51bGwgJiYgIWlzUmVnRXhwKHNlcGFyYXRvcikpXG4gICAgICAgICAgKSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IgJiYgaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHN0cmluZyksIDAsIGxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciBzdGFydENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB1cHBlckZpcnN0KHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT0gbnVsbFxuICAgICAgICA/IDBcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyB0YXJnZXQubGVuZ3RoKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uIHRoYXQgY2FuIGludGVycG9sYXRlIGRhdGEgcHJvcGVydGllc1xuICAgICAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gICAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAgICogcHJvcGVydGllcyBtYXkgYmUgYWNjZXNzZWQgYXMgZnJlZSB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlLiBJZiBhIHNldHRpbmdcbiAgICAgKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkIGBfLnRlbXBsYXRlYCB1dGlsaXplc1xuICAgICAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICAgICAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAgICAgKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAgICAgKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAgICAgKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlPV8udGVtcGxhdGVTZXR0aW5ncy5ldmFsdWF0ZV1cbiAgICAgKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gICAgICogIEFuIG9iamVjdCB0byBpbXBvcnQgaW50byB0aGUgdGVtcGxhdGUgYXMgZnJlZSB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAgICAgKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVSTD0nbG9kYXNoLnRlbXBsYXRlU291cmNlc1tuXSddXG4gICAgICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy52YXJpYWJsZT0nb2JqJ11cbiAgICAgKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAgICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiAvLyBEaXNhYmxlIHN1cHBvcnQgYnkgcmVwbGFjaW5nIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCU9IFwiXFxcXDwlLSB2YWx1ZSAlXFxcXD5cIiAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgICAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gICAgICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKHRleHQsIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gICAgICogY29tcGlsZWQoZGF0YSk7XG4gICAgICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHZhcmlhYmxlYCBvcHRpb24gdG8gZW5zdXJlIGEgd2l0aC1zdGF0ZW1lbnQgaXNuJ3QgdXNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICAgKiBjb21waWxlZC5zb3VyY2U7XG4gICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gICAgICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gICAgICogLy8gICByZXR1cm4gX19wO1xuICAgICAqIC8vIH1cbiAgICAgKlxuICAgICAqIC8vIFVzZSBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVycy5cbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAgICAgLy8gQmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncztcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgICAgICBpbXBvcnRzS2V5cyA9IGtleXMoaW1wb3J0cyksXG4gICAgICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gICAgICB2YXIgaXNFc2NhcGluZyxcbiAgICAgICAgICBpc0V2YWx1YXRpbmcsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICAgICAgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuXG4gICAgICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgLCAnZycpO1xuXG4gICAgICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICAvLyBUaGUgc291cmNlVVJMIGdldHMgaW5qZWN0ZWQgaW50byB0aGUgc291cmNlIHRoYXQncyBldmFsLWVkLCBzbyBiZSBjYXJlZnVsXG4gICAgICAvLyB0byBub3JtYWxpemUgYWxsIGtpbmRzIG9mIHdoaXRlc3BhY2UsIHNvIGUuZy4gbmV3bGluZXMgKGFuZCB1bmljb2RlIHZlcnNpb25zIG9mIGl0KSBjYW4ndCBzbmVhayBpblxuICAgICAgLy8gYW5kIGVzY2FwZSB0aGUgY29tbWVudCwgdGh1cyBpbmplY3RpbmcgY29kZSB0aGF0IGdldHMgZXZhbGVkLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAnc291cmNlVVJMJylcbiAgICAgICAgICA/IChvcHRpb25zLnNvdXJjZVVSTCArICcnKS5yZXBsYWNlKC9cXHMvZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgYSBmb3JiaWRkZW4gY2hhcmFjdGVyIHdhcyBmb3VuZCBpbiBgdmFyaWFibGVgLCB0byBwcmV2ZW50XG4gICAgICAvLyBwb3RlbnRpYWwgY29tbWFuZCBpbmplY3Rpb24gYXR0YWNrcy5cbiAgICAgIGVsc2UgaWYgKHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzLnRlc3QodmFyaWFibGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBiYXNlVHJpbShzdHJpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5vdmVyU29tZShbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCBfLm1hdGNoZXMoeyAnYSc6IDQgfSldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlc1Byb3BlcnR5KCdhJywgMSksIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckV2ZXJ5KFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyRXZlcnkgPSBjcmVhdGVPdmVyKGFycmF5RXZlcnkpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYW55Kiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciBtYXRjaGVzRnVuYyA9IF8ub3ZlclNvbWUoW3sgJ2EnOiAxIH0sIHsgJ2EnOiAyIH1dKVxuICAgICAqIHZhciBtYXRjaGVzUHJvcGVydHlGdW5jID0gXy5vdmVyU29tZShbWydhJywgMV0sIFsnYScsIDJdXSlcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gbG9kYXNoRnVuYy5uYW1lICsgJyc7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIGtleSkpIHtcbiAgICAgICAgICByZWFsTmFtZXNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJlYWxOYW1lc1trZXldLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiaW1wb3J0IFBvaW50IGZyb20gJy4vUG9pbnQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdHJpeCB7XG4gIHB1YmxpYyBhOiBudW1iZXJcbiAgcHVibGljIGI6IG51bWJlclxuICBwdWJsaWMgYzogbnVtYmVyXG4gIHB1YmxpYyBkOiBudW1iZXJcbiAgcHVibGljIHR4OiBudW1iZXJcbiAgcHVibGljIHR5OiBudW1iZXJcblxuICBjb25zdHJ1Y3RvcihhOiBudW1iZXIgPSAxLCBiOiBudW1iZXIgPSAwLCBjOiBudW1iZXIgPSAwLCBkOiBudW1iZXIgPSAxLCB0eDogbnVtYmVyID0gMCwgdHk6IG51bWJlciA9IDApIHtcbiAgICB0aGlzLmEgPSBhXG4gICAgdGhpcy5iID0gYlxuICAgIHRoaXMuYyA9IGNcbiAgICB0aGlzLmQgPSBkXG4gICAgdGhpcy50eCA9IHR4XG4gICAgdGhpcy50eSA9IHR5XG4gIH1cblxuICBzdGF0aWMgdHJhbnNsYXRpb24odHg6IG51bWJlciwgdHk6IG51bWJlcikge1xuICAgIHJldHVybiBuZXcgTWF0cml4KDEsIDAsIDAsIDEsIHR4LCB0eSlcbiAgfVxuXG4gIHN0YXRpYyBzY2FsZShzeDogbnVtYmVyLCBzeT86IG51bWJlciwgYWJvdXRQb2ludD86IFBvaW50KSB7XG4gICAgaWYgKHN5ID09PSB1bmRlZmluZWQpIHN5ID0gc3hcbiAgICBsZXQgc2NhbGVNYXRyaXggPSBuZXcgTWF0cml4KHN4LCAwLCAwLCBzeSlcbiAgICBpZiAoYWJvdXRQb2ludCkge1xuICAgICAgc2NhbGVNYXRyaXggPSBNYXRyaXgudHJhbnNsYXRpb24oYWJvdXRQb2ludC54LCBhYm91dFBvaW50LnkpXG4gICAgICAgIC5jb25jYXQoc2NhbGVNYXRyaXgpXG4gICAgICAgIC5jb25jYXQoTWF0cml4LnRyYW5zbGF0aW9uKC1hYm91dFBvaW50LngsIC1hYm91dFBvaW50LnkpKVxuICAgIH1cbiAgICByZXR1cm4gc2NhbGVNYXRyaXhcbiAgfVxuXG4gIHN0YXRpYyByb3RhdGlvbih0aGV0YTogbnVtYmVyLCBhYm91dFBvaW50PzogUG9pbnQpIHtcbiAgICBsZXQgcm90YXRpb25NYXRyaXggPSBuZXcgTWF0cml4KE1hdGguY29zKHRoZXRhKSwgTWF0aC5zaW4odGhldGEpLCAtTWF0aC5zaW4odGhldGEpLCBNYXRoLmNvcyh0aGV0YSkpXG4gICAgaWYgKGFib3V0UG9pbnQpIHtcbiAgICAgIHJvdGF0aW9uTWF0cml4ID0gTWF0cml4LnRyYW5zbGF0aW9uKGFib3V0UG9pbnQueCwgYWJvdXRQb2ludC55KVxuICAgICAgICAuY29uY2F0KHJvdGF0aW9uTWF0cml4KVxuICAgICAgICAuY29uY2F0KE1hdHJpeC50cmFuc2xhdGlvbigtYWJvdXRQb2ludC54LCAtYWJvdXRQb2ludC55KSlcbiAgICB9XG4gICAgcmV0dXJuIHJvdGF0aW9uTWF0cml4XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeCh0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB0aGlzLmQsIHRoaXMudHgsIHRoaXMudHkpXG4gIH1cbiAgY29uY2F0KG1hdHJpeDogTWF0cml4KSB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgoXG4gICAgICB0aGlzLmEgKiBtYXRyaXguYSArIHRoaXMuYyAqIG1hdHJpeC5iLFxuICAgICAgdGhpcy5iICogbWF0cml4LmEgKyB0aGlzLmQgKiBtYXRyaXguYixcbiAgICAgIHRoaXMuYSAqIG1hdHJpeC5jICsgdGhpcy5jICogbWF0cml4LmQsXG4gICAgICB0aGlzLmIgKiBtYXRyaXguYyArIHRoaXMuZCAqIG1hdHJpeC5kLFxuICAgICAgdGhpcy5hICogbWF0cml4LnR4ICsgdGhpcy5jICogbWF0cml4LnR5ICsgdGhpcy50eCxcbiAgICAgIHRoaXMuYiAqIG1hdHJpeC50eCArIHRoaXMuZCAqIG1hdHJpeC50eSArIHRoaXMudHlcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogR2l2ZW4gYSBwb2ludCBpbiB0aGUgcHJlLXRyYW5zZm9ybSBjb29yZGluYXRlIHNwYWNlLCByZXR1cm5zIHRoZSBjb29yZGluYXRlcyBvZlxuICAgKiB0aGF0IHBvaW50IGFmdGVyIHRoZSB0cmFuc2Zvcm1hdGlvbiBvY2N1cnMuIFVubGlrZSB0aGUgc3RhbmRhcmQgdHJhbnNmb3JtYXRpb25cbiAgICogYXBwbGllZCB1c2luZyB0aGUgdHJhbnNmb3JtIG5ldyBQb2ludCgpIG1ldGhvZCwgdGhlIGRlbHRhVHJhbnNmb3JtbmV3IFBvaW50KCkgbWV0aG9kJ3NcbiAgICogdHJhbnNmb3JtYXRpb24gZG9lcyBub3QgY29uc2lkZXIgdGhlIHRyYW5zbGF0aW9uIHBhcmFtZXRlcnMgdHggYW5kIHR5LlxuICAgKi9cbiAgZGVsdGFUcmFuc2Zvcm1Qb2ludChwb2ludDogUG9pbnQpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMuYSAqIHBvaW50LnggKyB0aGlzLmMgKiBwb2ludC55LCB0aGlzLmIgKiBwb2ludC54ICsgdGhpcy5kICogcG9pbnQueSlcbiAgfVxuICBpbnZlcnNlKCkge1xuICAgIGNvbnN0IGRldGVybWluYW50ID0gdGhpcy5hICogdGhpcy5kIC0gdGhpcy5iICogdGhpcy5jXG4gICAgcmV0dXJuIG5ldyBNYXRyaXgoXG4gICAgICB0aGlzLmQgLyBkZXRlcm1pbmFudCxcbiAgICAgIC10aGlzLmIgLyBkZXRlcm1pbmFudCxcbiAgICAgIC10aGlzLmMgLyBkZXRlcm1pbmFudCxcbiAgICAgIHRoaXMuYSAvIGRldGVybWluYW50LFxuICAgICAgKHRoaXMuYyAqIHRoaXMudHkgLSB0aGlzLmQgKiB0aGlzLnR4KSAvIGRldGVybWluYW50LFxuICAgICAgKHRoaXMuYiAqIHRoaXMudHggLSB0aGlzLmEgKiB0aGlzLnR5KSAvIGRldGVybWluYW50XG4gICAgKVxuICB9XG4gIHJvdGF0ZSh0aGV0YTogbnVtYmVyLCBhYm91dFBvaW50PzogUG9pbnQpIHtcbiAgICByZXR1cm4gdGhpcy5jb25jYXQoTWF0cml4LnJvdGF0aW9uKHRoZXRhLCBhYm91dFBvaW50KSlcbiAgfVxuICBzY2FsZShzeDogbnVtYmVyLCBzeT86IG51bWJlciwgYWJvdXRQb2ludD86IFBvaW50KSB7XG4gICAgcmV0dXJuIHRoaXMuY29uY2F0KE1hdHJpeC5zY2FsZShzeCwgc3ksIGFib3V0UG9pbnQpKVxuICB9XG4gIHRyYW5zbGF0ZSh0eDogbnVtYmVyLCB0eTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uY2F0KE1hdHJpeC50cmFuc2xhdGlvbih0eCwgdHkpKVxuICB9XG4gIHRyYW5zZm9ybVBvaW50KHBvaW50OiBQb2ludCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy5hICogcG9pbnQueCArIHRoaXMuYyAqIHBvaW50LnkgKyB0aGlzLnR4LCB0aGlzLmIgKiBwb2ludC54ICsgdGhpcy5kICogcG9pbnQueSArIHRoaXMudHkpXG4gIH1cbn1cbiIsImltcG9ydCBHQ2FudmFzIGZyb20gJy4vR0NhbnZhcydcbmltcG9ydCB7XG4gIEFsbENvbW1hbmRQYXJhbXMsXG4gIFplcm9QYXJhbXMsXG4gIFJhcGlkUGFyYW1zLFxuICBMaW5lYXJQYXJhbXMsXG4gIEFyY1BhcmFtcyxcbiAgRWxsaXBzZVBhcmFtcyxcbiAgVW5pdCxcbn0gZnJvbSAnLi9kcml2ZXJzL0RyaXZlcidcbmltcG9ydCBQYXRoIGZyb20gJy4vUGF0aCdcbmltcG9ydCBQb2ludCBmcm9tICcuL1BvaW50J1xuaW1wb3J0IFN1YlBhdGgsIHtcbiAgQmV6aWVyQ3VydmVUb0FjdGlvbixcbiAgRWxsaXBzZUFjdGlvbixcbiAgTGluZVRvQWN0aW9uLFxuICBNb3ZlVG9BY3Rpb24sXG4gIFF1YWRyYXRpY0N1cnZlVG9BY3Rpb24sXG59IGZyb20gJy4vU3ViUGF0aCdcbmltcG9ydCB7IGFyY1RvUG9pbnRzLCBwb2ludHNUb0FyYywgc2FtZUZsb2F0LCBzYW1lUG9zIH0gZnJvbSAnLi91dGlscy9wYXRoVXRpbHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdGlvbiB7XG4gIHB1YmxpYyBjdXJyZW50VW5pdDogVW5pdFxuICBwdWJsaWMgY3VycmVudFRvb2xEaWFtZXRlcjogbnVtYmVyXG4gIHB1YmxpYyBjdXJyZW50U3BlZWQ6IG51bWJlclxuICBwdWJsaWMgY3VycmVudEZlZWQ6IG51bWJlclxuICBwdWJsaWMgY3VycmVudEF0YzogbnVtYmVyXG4gIHB1YmxpYyBwb3NpdGlvbjogUG9pbnQgPSBuZXcgUG9pbnQoKVxuICBwdWJsaWMgY3R4OiBHQ2FudmFzXG5cbiAgY29uc3RydWN0b3IoY3R4OiBHQ2FudmFzKSB7XG4gICAgdGhpcy5jdHggPSBjdHhcbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpIHtcbiAgICB0aGlzLmN1cnJlbnRVbml0ID0gdW5kZWZpbmVkXG4gICAgdGhpcy5jdXJyZW50VG9vbERpYW1ldGVyID0gdW5kZWZpbmVkXG4gICAgdGhpcy5jdXJyZW50U3BlZWQgPSB1bmRlZmluZWRcbiAgICB0aGlzLmN1cnJlbnRGZWVkID0gdW5kZWZpbmVkXG4gICAgdGhpcy5jdXJyZW50QXRjID0gdW5kZWZpbmVkXG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBQb2ludCgpXG4gIH1cblxuICBwdWJsaWMgcmV0cmFjdCgpIHtcbiAgICB0aGlzLmN0eC5kcml2ZXIuc2VuZChgTTAzIFMwOTBgKVxuICB9XG4gIHB1YmxpYyBwbHVuZ2UoKSB7XG4gICAgdGhpcy5jdHguZHJpdmVyLnNlbmQoYE0wMyBTMDcwYClcbiAgfVxuICBwdWJsaWMgemVybyhwYXJhbXM6IFplcm9QYXJhbXMpIHtcbiAgICB0aGlzLmN0eC5kcml2ZXIuemVybyhwYXJhbXMpXG4gIH1cblxuICBwdWJsaWMgcmFwaWQocGFyYW1zOiBSYXBpZFBhcmFtcykge1xuICAgIGNvbnN0IG5ld1Bvc2l0aW9uID0gdGhpcy5wb3N0UHJvY2VzcyhwYXJhbXMpXG4gICAgaWYgKCFuZXdQb3NpdGlvbikgcmV0dXJuXG4gICAgdGhpcy5jdHguZHJpdmVyLnJhcGlkKHBhcmFtcylcbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3UG9zaXRpb25cbiAgfVxuXG4gIHB1YmxpYyBsaW5lYXIocGFyYW1zOiBMaW5lYXJQYXJhbXMpIHtcbiAgICBjb25zdCBuZXdQb3NpdGlvbiA9IHRoaXMucG9zdFByb2Nlc3MocGFyYW1zKVxuICAgIGlmICghbmV3UG9zaXRpb24pIHJldHVyblxuXG4gICAgLy8gaWYocGFyYW1zLnogLSB0aGlzLnBvc2l0aW9uLnogPiAxMClcbiAgICAvLyAgIGRlYnVnZ2VyO1xuXG4gICAgdGhpcy5jdHguZHJpdmVyLmxpbmVhcihwYXJhbXMpXG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ld1Bvc2l0aW9uXG4gIH1cbiAgcHVibGljIGFyY0NXKHBhcmFtczogQXJjUGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJjKHBhcmFtcywgZmFsc2UpXG4gIH1cbiAgcHVibGljIGFyY0NDVyhwYXJhbXM6IEFyY1BhcmFtcykge1xuICAgIHJldHVybiB0aGlzLmFyYyhwYXJhbXMsIHRydWUpXG4gIH1cbiAgcHVibGljIGFyYyhwYXJhbXM6IEFyY1BhcmFtcywgY2N3OiBib29sZWFuID0gZmFsc2UpIHtcbiAgICBjb25zdCBuZXdQb3NpdGlvbiA9IHRoaXMucG9zdFByb2Nlc3MoeyAuLi5wYXJhbXMsIHo6IHRoaXMucG9zaXRpb24ueiB8fCAwIH0pXG4gICAgLy8gTm90ZTogQ2FuIGJlIGN5Y2xpYyBzbyB3ZSBkb24ndCBpZ25vcmUgaXQgaWYgdGhlIHBvc2l0aW9uIGlzIHRoZSBzYW1lXG4gICAgY29uc3QgY3ggPSB0aGlzLnBvc2l0aW9uLnggKyAocGFyYW1zLmkgfHwgMClcbiAgICBjb25zdCBjeSA9IHRoaXMucG9zaXRpb24ueSArIChwYXJhbXMuaiB8fCAwKVxuICAgIGNvbnN0IGFyYyA9IHBvaW50c1RvQXJjKG5ldyBQb2ludChjeCwgY3kpLCB0aGlzLnBvc2l0aW9uLCBuZXcgUG9pbnQocGFyYW1zLngsIHBhcmFtcy55KSlcblxuICAgIGNvbnN0IGxlbmd0aCA9IGFyYy5yYWRpdXMgKiAoYXJjLmVuZCAtIGFyYy5zdGFydClcbiAgICBsZXQgZiA9IGxlbmd0aCAvICgxIC8gdGhpcy5jdHguZmVlZClcbiAgICBmID0gTWF0aC5yb3VuZChmICogMTAwMDAwMCkgLyAxMDAwMDAwXG4gICAgaWYgKGYpIHBhcmFtcy5mID0gTWF0aC5hYnMoZilcblxuICAgIGlmICghY2N3ICYmIHRoaXMuY3R4LmRyaXZlci5hcmNDVykge1xuICAgICAgdGhpcy5jdHguZHJpdmVyLmFyY0NXKHBhcmFtcylcbiAgICB9IGVsc2UgaWYgKGNjdyAmJiB0aGlzLmN0eC5kcml2ZXIuYXJjQ0NXKSB7XG4gICAgICB0aGlzLmN0eC5kcml2ZXIuYXJjQ0NXKHBhcmFtcylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbnRlcnBvbGF0ZSgnYXJjJywgW2N4LCBjeSwgYXJjLnJhZGl1cywgYXJjLnN0YXJ0LCBhcmMuZW5kLCBjY3ddLCBwYXJhbXMueiB8fCAwKVxuICAgIH1cblxuICAgIGlmIChuZXdQb3NpdGlvbikgdGhpcy5wb3NpdGlvbiA9IG5ld1Bvc2l0aW9uXG4gIH1cblxuICBwdWJsaWMgcG9zdFByb2Nlc3MocGFyYW1zOiBQYXJ0aWFsPEFsbENvbW1hbmRQYXJhbXM+KSB7XG4gICAgLy8gU3luYyBtZXRhXG4gICAgaWYgKHRoaXMuY3R4LmRyaXZlci51bml0ICYmIHRoaXMuY3R4LnVuaXQgIT0gdGhpcy5jdXJyZW50VW5pdCkge1xuICAgICAgdGhpcy5jdHguZHJpdmVyLnVuaXQodGhpcy5jdHgudW5pdClcbiAgICAgIHRoaXMuY3VycmVudFVuaXQgPSB0aGlzLmN0eC51bml0XG4gICAgfVxuXG4gICAgLy8gU3luYyBtZXRhXG4gICAgaWYgKHRoaXMuY3R4LmRyaXZlci5tZXRhICYmIHRoaXMuY3R4LnRvb2xEaWFtZXRlciAhPSB0aGlzLmN1cnJlbnRUb29sRGlhbWV0ZXIpIHtcbiAgICAgIHRoaXMuY3R4LmRyaXZlci5tZXRhKHtcbiAgICAgICAgdG9vbERpYW1ldGVyOiB0aGlzLmN0eC50b29sRGlhbWV0ZXIsXG4gICAgICB9KVxuICAgICAgdGhpcy5jdXJyZW50VG9vbERpYW1ldGVyID0gdGhpcy5jdHgudG9vbERpYW1ldGVyXG4gICAgfVxuXG4gICAgLy8gU2V0IG5ldyBzcGluZGxlIGF0YyBjaGFuZ2VkXG4gICAgLy8gaWYgKHRoaXMuY3R4LmRyaXZlci5hdGMgJiYgdGhpcy5jdHguYXRjICE9IHRoaXMuY3VycmVudEF0Yykge1xuICAgIC8vICAgdGhpcy5jdHguZHJpdmVyLmF0Yyh0aGlzLmN0eC5hdGMpXG4gICAgLy8gICB0aGlzLmN1cnJlbnRBdGMgPSB0aGlzLmN0eC5hdGNcbiAgICAvLyB9XG5cbiAgICAvLyBTZXQgbmV3IHNwaW5kbGUgc3BlZWQgY2hhbmdlZFxuICAgIGlmICh0aGlzLmN0eC5kcml2ZXIuc3BlZWQgJiYgdGhpcy5jdHguc3BlZWQgIT0gdGhpcy5jdXJyZW50U3BlZWQpIHtcbiAgICAgIHRoaXMuY3R4LmRyaXZlci5zcGVlZCh0aGlzLmN0eC5zcGVlZClcbiAgICAgIHRoaXMuY3VycmVudFNwZWVkID0gdGhpcy5jdHguc3BlZWRcbiAgICB9XG5cbiAgICAvLyBTZXQgbmV3IGZlZWRyYXRlIGNoYW5nZWRcbiAgICBpZiAodGhpcy5jdHguZHJpdmVyLmZlZWQgJiYgdGhpcy5jdHguZmVlZCAhPSB0aGlzLmN1cnJlbnRGZWVkKSB7XG4gICAgICAvLyBBbHdheXMgdXNlIGludmVyc2UgdGltZSBtb2RlXG4gICAgICAvLyBidXQgd2Ugb25seSBzZW5kIGEgRzkzIHdoZW4gdGhlcmUgaXMgYSBmZWVkcmF0ZS5cbiAgICAgIC8vIFRoaXMgYWxsb3dzIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggZ2xvYmFsXG4gICAgICAvLyBjbGFzc2ljIGZlZWRyYXRlcy5cbiAgICAgIHRoaXMuY3R4LmRyaXZlci5zZW5kKCdHOTMgKGludmVyc2UgdGltZSBtb2RlKScpXG4gICAgICB0aGlzLmN1cnJlbnRGZWVkID0gdGhpcy5jdHguZmVlZFxuICAgIH1cblxuICAgIC8vIFNldCBjb29sYW50IGlmIGNoYW5nZWRcbiAgICAvLyBpZiAodGhpcy5jdHguZHJpdmVyLmNvb2xhbnQgJiYgdGhpcy5jdHguY29vbGFudCAhPSB0aGlzLmN1cnJlbnRDb29sYW50KSB7XG4gICAgLy8gICB0aGlzLmN0eC5kcml2ZXIuY29vbGFudCh0aGlzLmN0eC5jb29sYW50KVxuICAgIC8vICAgdGhpcy5jdXJyZW50Q29vbGFudCA9IHRoaXMuY3R4LmNvb2xhbnRcbiAgICAvLyB9XG5cbiAgICBjb25zdCB2MSA9IG5ldyBQb2ludChcbiAgICAgICd4JyBpbiBwYXJhbXMgPyBwYXJhbXMueCA6IHRoaXMucG9zaXRpb24ueCxcbiAgICAgICd5JyBpbiBwYXJhbXMgPyBwYXJhbXMueSA6IHRoaXMucG9zaXRpb24ueSxcbiAgICAgICd6JyBpbiBwYXJhbXMgPyBwYXJhbXMueiA6IHRoaXMucG9zaXRpb24ueixcbiAgICAgICdhJyBpbiBwYXJhbXMgPyBwYXJhbXMuYSA6IHRoaXMucG9zaXRpb24uYVxuICAgIClcblxuICAgIGNvbnN0IHYyID0gdGhpcy5wb3NpdGlvblxuICAgIGNvbnN0IGRpc3QgPSBNYXRoLnNxcnQoTWF0aC5wb3codjIueCAtIHYxLngsIDIpICsgTWF0aC5wb3codjIueSAtIHYxLnksIDIpIC8qICsgTWF0aC5wb3codjIueiAtIHYxLnosIDIpKi8pXG5cbiAgICBpZiAoIXBhcmFtcy5mKSB7XG4gICAgICBsZXQgZiA9IGRpc3QgLyAoMSAvIHRoaXMuY3R4LmZlZWQpXG4gICAgICBmID0gTWF0aC5yb3VuZChmICogMTAwMDAwMCkgLyAxMDAwMDAwXG4gICAgICBpZiAoZikgcGFyYW1zLmYgPSBNYXRoLmFicyhmKVxuICAgIH1cblxuICAgIGlmIChzYW1lUG9zKHRoaXMucG9zaXRpb24sIHYxKSkgcmV0dXJuIGZhbHNlXG5cbiAgICAvLyB0aGlzLmN0eC5maWx0ZXJzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAvLyAgIGNvbnN0IHRtcCA9IGYuY2FsbCh0aGlzLmN0eCwgcGFyYW1zKVxuICAgIC8vICAgaWYgKHRtcCkge1xuICAgIC8vICAgICBmb3IgKGxldCBrIGluIHRtcCkge1xuICAgIC8vICAgICAgIHBhcmFtc1trXSA9IHRtcFtrXVxuICAgIC8vICAgICB9XG4gICAgLy8gICB9XG4gICAgLy8gfSlcblxuICAgIC8vIFJvdW5kIGRvd24gdGhlIGRlY2ltYWwgcG9pbnRzIHRvIDEwIG5hbm9tZXRlcnNcbiAgICAvLyBHb3R0YSBhY2NlcHQgdGhhdCB0aGVyZSdzIG5vIHdlJ3JlIHRoYXQgcHJlY2lzZS5cbiAgICBmb3IgKGxldCBrIGluIHBhcmFtcykge1xuICAgICAgY29uc3Qga2V5ID0gayBhcyBrZXlvZiBBbGxDb21tYW5kUGFyYW1zXG4gICAgICBpZiAodHlwZW9mIHBhcmFtc1trZXldID09PSAnbnVtYmVyJykge1xuICAgICAgICBwYXJhbXNba2V5XSA9IE1hdGgucm91bmQocGFyYW1zW2tleV0gKiAxMDAwMDApIC8gMTAwMDAwXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHYxXG4gIH1cblxuICBwdWJsaWMgaW50ZXJwb2xhdGUobmFtZToga2V5b2YgU3ViUGF0aCwgYXJnczogYW55W10sIHpFbmQ6IG51bWJlcikge1xuICAgIGNvbnN0IHBhdGggPSBuZXcgU3ViUGF0aCgpXG4gICAgY29uc3QgZnVuYyA9IHBhdGhbbmFtZV1cbiAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicpIGZ1bmMuYXBwbHkocGF0aCwgYXJncylcblxuICAgIGxldCBjdXJMZW4gPSAwXG4gICAgY29uc3QgdG90YWxMZW4gPSBwYXRoLmdldExlbmd0aCgpXG4gICAgY29uc3QgelN0YXJ0ID0gdGhpcy5wb3NpdGlvbi56XG5cbiAgICBmdW5jdGlvbiBoZWxpeCgpIHtcbiAgICAgIGNvbnN0IGZ1bGxEZWx0YSA9IHpFbmQgLSB6U3RhcnRcbiAgICAgIGNvbnN0IHJhdGlvID0gY3VyTGVuIC8gdG90YWxMZW5cbiAgICAgIGNvbnN0IGN1ckRlbHRhID0gZnVsbERlbHRhICogcmF0aW9cbiAgICAgIHJldHVybiB6U3RhcnQgKyBjdXJEZWx0YVxuICAgIH1cblxuICAgIGNvbnN0IHB0cyA9IHBhdGguZ2V0UG9pbnRzKDQwKVxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gcHRzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgY29uc3QgcCA9IHB0c1tpXVxuXG4gICAgICBjb25zdCB4byA9IHAueCAtIHRoaXMucG9zaXRpb24ueFxuICAgICAgY29uc3QgeW8gPSBwLnkgLSB0aGlzLnBvc2l0aW9uLnlcbiAgICAgIGN1ckxlbiArPSBNYXRoLnNxcnQoeG8gKiB4byArIHlvICogeW8pXG5cbiAgICAgIHRoaXMubGluZWFyKHsgeDogcC54LCB5OiBwLnksIHo6IGhlbGl4KCkgfSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZm9sbG93UGF0aChwYXRoOiBQYXRoIHwgU3ViUGF0aCwgekVuZDogbnVtYmVyKSB7XG4gICAgaWYgKCFwYXRoKSByZXR1cm4gZmFsc2VcblxuICAgIGlmICgnc3ViUGF0aHMnIGluIHBhdGgpIHtcbiAgICAgIHBhdGguc3ViUGF0aHMuZm9yRWFjaCgoc3ViUGF0aCkgPT4ge1xuICAgICAgICB0aGlzLmZvbGxvd1BhdGgoc3ViUGF0aCwgekVuZClcbiAgICAgIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgelN0YXJ0ID0gdGhpcy5wb3NpdGlvbi56XG4gICAgY29uc3QgdG90YWxMZW4gPSBwYXRoLmdldExlbmd0aCgpXG4gICAgbGV0IGN1ckxlbiA9IDBcblxuICAgIGNvbnN0IG1vdGlvbiA9IHRoaXNcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eFxuICAgIGNvbnN0IHJhbXBpbmcgPSBwYXRoLmlzQ2xvc2VkKCkgJiYgY3R4LnJhbXBpbmcgIT0gZmFsc2VcblxuICAgIGZ1bmN0aW9uIGhlbGl4KCkge1xuICAgICAgaWYgKCFyYW1waW5nKSByZXR1cm4gekVuZFxuXG4gICAgICAvLyBBdm9pZCBkaXZpZGUgYnkgMCBpbiBjYXNlIG9mXG4gICAgICAvLyBhIHNpbmdsZSBtb3ZlVG8gYWN0aW9uXG4gICAgICBpZiAodG90YWxMZW4gPT09IDApIHJldHVybiAwXG5cbiAgICAgIGNvbnN0IGZ1bGxEZWx0YSA9IHpFbmQgLSB6U3RhcnRcbiAgICAgIGNvbnN0IHJhdGlvID0gY3VyTGVuIC8gdG90YWxMZW5cbiAgICAgIGNvbnN0IGN1ckRlbHRhID0gZnVsbERlbHRhICogcmF0aW9cblxuICAgICAgcmV0dXJuIHpTdGFydCArIGN1ckRlbHRhXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUobmFtZToga2V5b2YgU3ViUGF0aCwgYXJnczogYW55W10pIHtcbiAgICAgIGNvbnN0IHBhdGggPSBuZXcgU3ViUGF0aCgpXG4gICAgICBwYXRoLm1vdmVUbyhtb3Rpb24ucG9zaXRpb24ueCwgbW90aW9uLnBvc2l0aW9uLnkpXG4gICAgICBjb25zdCBmdW5jID0gcGF0aFtuYW1lXVxuICAgICAgaWYgKHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nKSBmdW5jLmFwcGx5KHBhdGgsIGFyZ3MpXG5cbiAgICAgIGNvbnN0IHB0cyA9IHBhdGguZ2V0UG9pbnRzKDQwKVxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwdHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHAgPSBwdHNbaV1cbiAgICAgICAgbW90aW9uLmxpbmVhcih7IHg6IHAueCwgeTogcC55LCB6OiBoZWxpeCgpIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZWFjaCA9IHtcbiAgICAgIFsnTU9WRV9UTycgYXMgTW92ZVRvQWN0aW9uWyd0eXBlJ11dOiAoLi4uYXJnczogTW92ZVRvQWN0aW9uWydhcmdzJ10pID0+IHtcbiAgICAgICAgY29uc3QgW3gsIHldID0gYXJnc1xuICAgICAgICAvLyBPcHRpbWl6ZSBvdXQgMCBkaXN0YW5jZXMgbW92ZXNcbiAgICAgICAgY29uc3Qgc2FtZVhZID0gc2FtZUZsb2F0KHgsIHRoaXMucG9zaXRpb24ueCkgJiYgc2FtZUZsb2F0KHksIHRoaXMucG9zaXRpb24ueSlcbiAgICAgICAgaWYgKHJhbXBpbmcgJiYgc2FtZVhZKSByZXR1cm5cblxuICAgICAgICBpZiAoIXNhbWVYWSkgbW90aW9uLnJldHJhY3QoKVxuICAgICAgICBtb3Rpb24ucmFwaWQoeyB4LCB5IH0pXG4gICAgICAgIGlmICghc2FtZVhZKSBtb3Rpb24ucGx1bmdlKClcblxuICAgICAgICBpZiAoIXJhbXBpbmcpIG1vdGlvbi5saW5lYXIoeyB6OiB6RW5kIH0pXG4gICAgICAgIHpTdGFydCA9IG1vdGlvbi5wb3NpdGlvbi56XG4gICAgICB9LFxuICAgICAgWydMSU5FX1RPJyBhcyBMaW5lVG9BY3Rpb25bJ3R5cGUnXV06ICguLi5hcmdzOiBMaW5lVG9BY3Rpb25bJ2FyZ3MnXSkgPT4ge1xuICAgICAgICBjb25zdCBbeCwgeV0gPSBhcmdzXG4gICAgICAgIG1vdGlvbi5saW5lYXIoeyB4LCB5LCB6OiBoZWxpeCgpIH0pXG4gICAgICB9LFxuICAgICAgWydFTExJUFNFJyBhcyBFbGxpcHNlQWN0aW9uWyd0eXBlJ11dOiAoLi4uYXJnczogRWxsaXBzZUFjdGlvblsnYXJncyddKSA9PiB7XG4gICAgICAgIGNvbnN0IFt4LCB5LCByeCwgcnksIGFTdGFydCwgYUVuZCwgY2N3XSA9IGFyZ3NcbiAgICAgICAgLy8gRGV0ZWN0IHBsYWluIGFyY1xuICAgICAgICBpZiAoc2FtZUZsb2F0KHJ4LCByeSkpIHtcbiAgICAgICAgICBjb25zdCBwb2ludHMgPSBhcmNUb1BvaW50cyh4LCB5LCBhU3RhcnQsIGFFbmQsIHJ4KVxuICAgICAgICAgIGNvbnN0IHBhcmFtczogRWxsaXBzZVBhcmFtcyA9IHtcbiAgICAgICAgICAgIHg6IHBvaW50cy5lbmQueCxcbiAgICAgICAgICAgIHk6IHBvaW50cy5lbmQueSxcbiAgICAgICAgICAgIGk6IHggLSBwb2ludHMuc3RhcnQueCxcbiAgICAgICAgICAgIGo6IHkgLSBwb2ludHMuc3RhcnQueSxcbiAgICAgICAgICAgIHo6IGhlbGl4KCksXG4gICAgICAgICAgfVxuICAgICAgICAgIG1vdGlvbi5hcmMocGFyYW1zLCBjY3cpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJwb2xhdGUoJ2VsbGlwc2UnLCBhcmdzKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgWydCRVpJRVJfQ1VSVkVfVE8nIGFzIEJlemllckN1cnZlVG9BY3Rpb25bJ3R5cGUnXV06ICguLi5hcmdzOiBCZXppZXJDdXJ2ZVRvQWN0aW9uWydhcmdzJ10pID0+IHtcbiAgICAgICAgaW50ZXJwb2xhdGUoJ2JlemllckN1cnZlVG8nLCBhcmdzKVxuICAgICAgfSxcbiAgICAgIFsnUVVBRFJBVElDX0NVUlZFX1RPJyBhcyBRdWFkcmF0aWNDdXJ2ZVRvQWN0aW9uWyd0eXBlJ11dOiAoLi4uYXJnczogUXVhZHJhdGljQ3VydmVUb0FjdGlvblsnYXJncyddKSA9PiB7XG4gICAgICAgIGludGVycG9sYXRlKCdxdWFkcmF0aWNDdXJ2ZVRvJywgYXJncylcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXRoLmFjdGlvbnMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICBjb25zdCBhY3Rpb24gPSBwYXRoLmFjdGlvbnNbaV1cblxuICAgICAgaWYgKGkgIT0gMCkge1xuICAgICAgICBjb25zdCB4MCA9IHRoaXMucG9zaXRpb24ueFxuICAgICAgICBjb25zdCB5MCA9IHRoaXMucG9zaXRpb24ueVxuICAgICAgICBjdXJMZW4gKz0gcGF0aC5nZXRBY3Rpb25MZW5ndGgoeDAsIHkwLCBpKVxuICAgICAgfVxuXG4gICAgICAvLyBFdmVyeSBhY3Rpb24gc2hvdWxkIGJlIHBsdW5nZWQgZXhjZXB0IGZvciBtb3ZlXG4gICAgICAvLyBpZihpdGVtLmFjdGlvbiAhPT0gUGF0aC5hY3Rpb25zLk1PVkVfVE8pIHtcbiAgICAgIC8vIG1vdGlvbi5wbHVuZ2UoKTtcbiAgICAgIC8vIH1cblxuICAgICAgZWFjaFthY3Rpb24udHlwZV0uYXBwbHkodGhpcywgYWN0aW9uLmFyZ3MpXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgdHlwZSBVbml0ID0gJ21tJyB8ICdpbmNoJ1xuXG5leHBvcnQgdHlwZSBEcml2ZXJTdHJlYW0gPSB7XG4gIHdyaXRlOiAoc3RyOiBzdHJpbmcpID0+IHZvaWRcbiAgcmVzZXQ6ICgpID0+IHZvaWRcbn1cblxuZXhwb3J0IHR5cGUgQWxsQ29tbWFuZFBhcmFtcyA9IHtcbiAgeDogbnVtYmVyXG4gIHk6IG51bWJlclxuICB6OiBudW1iZXJcbiAgYTogbnVtYmVyXG4gIGI6IG51bWJlclxuICBjOiBudW1iZXJcbiAgaTogbnVtYmVyXG4gIGo6IG51bWJlclxuICBrOiBudW1iZXJcbiAgZjogbnVtYmVyXG4gIHQ6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBBcmNQYXJhbXMgPSBQYXJ0aWFsPFBpY2s8QWxsQ29tbWFuZFBhcmFtcywgJ3gnIHwgJ3knIHwgJ3onIHwgJ2knIHwgJ2onIHwgJ2YnPj5cbmV4cG9ydCB0eXBlIEVsbGlwc2VQYXJhbXMgPSBBcmNQYXJhbXNcbmV4cG9ydCB0eXBlIFJhcGlkUGFyYW1zID0gUGFydGlhbDxQaWNrPEFsbENvbW1hbmRQYXJhbXMsICd4JyB8ICd5JyB8ICd6JyB8ICdmJz4+XG5leHBvcnQgdHlwZSBMaW5lYXJQYXJhbXMgPSBQYXJ0aWFsPFBpY2s8QWxsQ29tbWFuZFBhcmFtcywgJ3gnIHwgJ3knIHwgJ3onIHwgJ2YnIHwgJ2EnPj5cbmV4cG9ydCB0eXBlIFplcm9QYXJhbXMgPSBQYXJ0aWFsPFBpY2s8QWxsQ29tbWFuZFBhcmFtcywgJ2EnPj5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJpdmVyIHtcbiAgcHVibGljIHN0cmVhbTogRHJpdmVyU3RyZWFtXG5cbiAgY29uc3RydWN0b3Ioc3RyZWFtPzogRHJpdmVyU3RyZWFtKSB7XG4gICAgdGhpcy5zdHJlYW0gPSBzdHJlYW0gfHwge1xuICAgICAgd3JpdGU6IChzdHIpID0+IGNvbnNvbGUubG9nKHN0ciksXG4gICAgICByZXNldDogKCkgPT4ge30sXG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlc2V0KCkge1xuICAgIHRoaXMuc3RyZWFtLnJlc2V0KClcbiAgfVxuXG4gIHB1YmxpYyBzZW5kKC4uLmFyZ3M6IGFueVtdKSB7fVxuICBwdWJsaWMgaW5pdCgpIHt9XG4gIHB1YmxpYyB1bml0KG5hbWU6IFVuaXQpIHt9XG4gIHB1YmxpYyBzcGVlZChuOiBudW1iZXIpIHt9XG4gIHB1YmxpYyBmZWVkKG46IG51bWJlcikge31cbiAgcHVibGljIGNvb2xhbnQodHlwZTogJ21pc3QnIHwgJ2Zsb29kJyB8ICdvZmYnKSB7fVxuICBwdWJsaWMgemVybyhwYXJhbXM6IFplcm9QYXJhbXMpIHt9XG4gIC8vIHRvb2wgc2VsZWN0aW9uXG4gIHB1YmxpYyBhdGMoaWQ6IG51bWJlcikge31cbiAgcHVibGljIHJhcGlkKHBhcmFtczogUmFwaWRQYXJhbXMpIHt9XG4gIHB1YmxpYyBsaW5lYXIocGFyYW1zOiBMaW5lYXJQYXJhbXMpIHt9XG4gIHB1YmxpYyBhcmNDVyhwYXJhbXM6IEFyY1BhcmFtcykge31cbiAgcHVibGljIGFyY0NDVyhwYXJhbXM6IEFyY1BhcmFtcykge31cbiAgcHVibGljIGNvbW1lbnQoc3RyaW5nOiBzdHJpbmcpIHt9XG4gIHB1YmxpYyBtZXRhKHBhcmFtczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge31cbn1cbiIsImltcG9ydCBEcml2ZXIgZnJvbSAnLi9Ecml2ZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE51bGxEcml2ZXIgZXh0ZW5kcyBEcml2ZXIge31cbiIsImltcG9ydCBNYXRyaXggZnJvbSAnLi9NYXRyaXgnXG5pbXBvcnQgUG9pbnQgZnJvbSAnLi9Qb2ludCdcbmltcG9ydCBQYXRoLCB7IEJvdW5kcywgV2luZGluZ1J1bGUgfSBmcm9tICcuL1BhdGgnXG5pbXBvcnQgU3ViUGF0aCwgeyBBcmNBY3Rpb24sIEJlemllckN1cnZlVG9BY3Rpb24sIFF1YWRyYXRpY0N1cnZlVG9BY3Rpb24gfSBmcm9tICcuL1N1YlBhdGgnXG5pbXBvcnQgeyBhcmNUb1BvaW50cywgY29udmVydFBvaW50c1RvRWRnZXMsIHBvaW50c1RvQXJjIH0gZnJvbSAnLi91dGlscy9wYXRoVXRpbHMnXG5pbXBvcnQgTW90aW9uIGZyb20gJy4vTW90aW9uJ1xuaW1wb3J0IERyaXZlciwgeyBVbml0IH0gZnJvbSAnLi9kcml2ZXJzL0RyaXZlcidcbmltcG9ydCBHQ29kZURyaXZlciBmcm9tICcuL2RyaXZlcnMvR0NvZGVEcml2ZXInXG5pbXBvcnQgTnVsbERyaXZlciBmcm9tICcuL2RyaXZlcnMvTnVsbERyaXZlcidcbmltcG9ydCB7IE92ZXJsb2FkZWRGdW5jdGlvbldpdGhPcHRpb25hbHMgfSBmcm9tICcuL3R5cGVzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEdDYW52YXNDb25maWcge1xuICB3aWR0aDogbnVtYmVyXG4gIGhlaWdodDogbnVtYmVyXG4gIHZpcnR1YWxTY2FsZT86IG51bWJlclxuICBiYWNrZ3JvdW5kPzogc3RyaW5nXG4gIGNhbnZhcz86IEhUTUxDYW52YXNFbGVtZW50XG4gIG91dHB1dD86IEhUTUxUZXh0QXJlYUVsZW1lbnRcbiAgZHJpdmVyPzogRHJpdmVyXG59XG5cbmV4cG9ydCB0eXBlIFN0cm9rZUFsaWduID0gJ291dGVyJyB8ICdpbm5lcicgfCAnY2VudGVyJ1xuXG5leHBvcnQgdHlwZSBDYW52YXNTdGFja0l0ZW0gPSB7XG4gIG1hdHJpeDogTWF0cml4XG4gIGZvbnQ6IHN0cmluZ1xuICBmaWxsU3R5bGU6IHN0cmluZ1xuICBzdHJva2VTdHlsZTogc3RyaW5nXG4gIHRvcDogbnVtYmVyXG4gIGRlcHRoOiBudW1iZXJcbiAgZGVwdGhPZkN1dDogbnVtYmVyXG4gIHRvb2xEaWFtZXRlcjogbnVtYmVyXG4gIGFsaWduOiBTdHJva2VBbGlnblxuICBmaWx0ZXJzOiBhbnlbXVxufVxudHlwZSBDYW52YXNTdGFja0l0ZW1LZXkgPSBrZXlvZiBDYW52YXNTdGFja0l0ZW1cblxuZXhwb3J0IHR5cGUgU3Ryb2tlT3B0aW9ucyA9IHtcbiAgYWxpZ24/OiBTdHJva2VBbGlnblxuICBkZXB0aD86IG51bWJlclxuICBjdXRvdXQ/OiBib29sZWFuXG4gIGRlYnVnPzogYm9vbGVhblxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHQ2FudmFzIHtcbiAgcHVibGljIGNhbnZhc1dpZHRoOiBudW1iZXJcbiAgcHVibGljIGNhbnZhc0hlaWdodDogbnVtYmVyXG4gIHB1YmxpYyB2aXJ0dWFsU2NhbGU6IG51bWJlclxuICBwdWJsaWMgb3V0cHV0RWxlbWVudD86IEhUTUxUZXh0QXJlYUVsZW1lbnRcbiAgcHVibGljIGNhbnZhc0VsZW1lbnQ/OiBIVE1MQ2FudmFzRWxlbWVudFxuICBwdWJsaWMgY3R4PzogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEXG4gIHB1YmxpYyBtb3Rpb246IE1vdGlvblxuICBwdWJsaWMgZHJpdmVyOiBHQ29kZURyaXZlclxuXG4gIHB1YmxpYyBjYW52YXM6IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfVxuXG4gIHB1YmxpYyBlbmFibGVDdXRvdXRzOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8vIGNuYy1zcGVjaWZpYyBzdHVmZlxuICBwdWJsaWMgcHJlY2lzaW9uOiBudW1iZXIgPSAyMFxuICBwdWJsaWMgYWxpZ246IFN0cm9rZUFsaWduID0gJ2NlbnRlcidcbiAgcHVibGljIHJhbXBpbmc6IGJvb2xlYW4gPSB0cnVlXG4gIHB1YmxpYyBkZXB0aDogbnVtYmVyID0gMFxuICBwdWJsaWMgZGVwdGhPZkN1dDogbnVtYmVyID0gMFxuICBwdWJsaWMgcmV0cmFjdCA9IDBcbiAgcHVibGljIHNwZWVkID0gNTAwXG4gIHB1YmxpYyBmZWVkID0gMTAwMFxuICBwdWJsaWMgYWN0ID0gMFxuICBwdWJsaWMgdW5pdDogVW5pdCA9ICdtbSdcbiAgcHVibGljIHRvcDogbnVtYmVyID0gMFxuICBwdWJsaWMgdG9vbERpYW1ldGVyOiBudW1iZXIgPSAwLjE1XG5cbiAgcHJpdmF0ZSBtYXRyaXg6IE1hdHJpeCA9IG5ldyBNYXRyaXgoKVxuICBwcml2YXRlIGNsaXBSZWdpb24/OiBQYXRoXG4gIHB1YmxpYyBwYXRoPzogUGF0aFxuICBwcml2YXRlIHN1YlBhdGhzOiBTdWJQYXRoW10gPSBbXVxuICBwcml2YXRlIGZpbHRlcnM6IGFueVtdID0gW10gLy8gbm8gaWRlYSBoZXlcbiAgcHJpdmF0ZSBzdGFjazogQ2FudmFzU3RhY2tJdGVtW10gPSBbXVxuXG4gIHByaXZhdGUgcGF0aEhpc3Rvcnk6IGFueVtdID0gW11cblxuICAvLyB2YXJzIHRoYXQgZ2V0IHJlbGF5ZWQgdG8gY2FudmFzXG4gIHByaXZhdGUgX3N0cm9rZVN0eWxlOiBzdHJpbmcgPSAnIzAwMDAwMCdcbiAgcHJpdmF0ZSBfZmlsbFN0eWxlOiBzdHJpbmcgPSAnIzAwMDAwMCdcbiAgcHJpdmF0ZSBfZm9udDogc3RyaW5nID0gJzdwdCBIZWx2ZXRpY2EnXG4gIHByaXZhdGUgX2JhY2tncm91bmQ6IHN0cmluZyA9ICcjZmZmZmZmJ1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogR0NhbnZhc0NvbmZpZykge1xuICAgIHRoaXMuZHJpdmVyID0gY29uZmlnLmRyaXZlciB8fCBuZXcgTnVsbERyaXZlcigpXG4gICAgdGhpcy5tb3Rpb24gPSBuZXcgTW90aW9uKHRoaXMpXG4gICAgdGhpcy5jYW52YXNXaWR0aCA9IGNvbmZpZy53aWR0aFxuICAgIHRoaXMuY2FudmFzSGVpZ2h0ID0gY29uZmlnLmhlaWdodFxuICAgIHRoaXMudmlydHVhbFNjYWxlID0gY29uZmlnLnZpcnR1YWxTY2FsZSB8fCAxXG4gICAgaWYgKGNvbmZpZy5jYW52YXMpIHtcbiAgICAgIHRoaXMuY2FudmFzRWxlbWVudCA9IGNvbmZpZy5jYW52YXNcbiAgICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXNFbGVtZW50LmdldENvbnRleHQoJzJkJylcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5vdXRwdXQpIHRoaXMub3V0cHV0RWxlbWVudCA9IGNvbmZpZy5vdXRwdXRcbiAgICBpZiAoY29uZmlnLmJhY2tncm91bmQpIHRoaXMuX2JhY2tncm91bmQgPSBjb25maWcuYmFja2dyb3VuZFxuXG4gICAgdGhpcy5yZXNldCgpXG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgY29uc29sZS5jbGVhcigpXG4gICAgdGhpcy5kcml2ZXIucmVzZXQoKVxuICAgIHRoaXMubW90aW9uLnJlc2V0KClcbiAgICB0aGlzLnBhdGggPSB1bmRlZmluZWRcbiAgICB0aGlzLmNsaXBSZWdpb24gPSB1bmRlZmluZWRcbiAgICB0aGlzLnN1YlBhdGhzID0gW11cbiAgICB0aGlzLmZpbHRlcnMgPSBbXVxuICAgIHRoaXMuc3RhY2sgPSBbXVxuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpXG5cbiAgICBpZiAodGhpcy5jdHgpIHtcbiAgICAgIHRoaXMuY3R4LnJlc2V0VHJhbnNmb3JtKClcbiAgICAgIHRoaXMuc2V0Q3R4VHJhbnNmb3JtKHRoaXMubWF0cml4KVxuXG4gICAgICAvLyBkcmF3IHJlY3QgdGhlIGFjdHVhbCBzaXplIG9mIHRoZSBjYW52YXMgLSBzaG91bGQgZmlsbCB3aG9sZSBzY3JlZW4gYXQgdGhpcyBzdGFnZVxuICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5fYmFja2dyb3VuZFxuICAgICAgdGhpcy5jdHguZmlsbFJlY3QoMCwgMCwgdGhpcy5jYW52YXNXaWR0aCwgdGhpcy5jYW52YXNIZWlnaHQpXG5cbiAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDEgLyB0aGlzLnZpcnR1YWxTY2FsZVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQgc3Ryb2tlU3R5bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cm9rZVN0eWxlXG4gIH1cbiAgcHVibGljIHNldCBzdHJva2VTdHlsZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fc3Ryb2tlU3R5bGUgPSB2YWx1ZVxuICAgIGlmICh0aGlzLmN0eCkgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZVxuICB9XG5cbiAgcHVibGljIGdldCBmaWxsU3R5bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbGxTdHlsZVxuICB9XG4gIHB1YmxpYyBzZXQgZmlsbFN0eWxlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9maWxsU3R5bGUgPSB2YWx1ZVxuICAgIGlmICh0aGlzLmN0eCkgdGhpcy5jdHguZmlsbFN0eWxlID0gdmFsdWVcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZm9udCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsbFN0eWxlXG4gIH1cbiAgcHVibGljIHNldCBmb250KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9mb250ID0gdmFsdWVcbiAgICBpZiAodGhpcy5jdHgpIHRoaXMuY3R4LmZvbnQgPSB2YWx1ZVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRDdHhUcmFuc2Zvcm0obWF0cml4OiBNYXRyaXgpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnYmVmb3JlJywgdGhpcy5jdHguZ2V0VHJhbnNmb3JtKCkpXG4gICAgdGhpcy5jdHguc2V0VHJhbnNmb3JtKG1hdHJpeC5hLCBtYXRyaXguYiwgbWF0cml4LmMsIG1hdHJpeC5kLCBtYXRyaXgudHgsIG1hdHJpeC50eSlcbiAgICAvLyBzY2FsZSBkcmF3YWJsZSBhcmVhIHRvIG1hdGNoIGRldmljZSBwaXhlbCByYXRpb1xuICAgIHRoaXMuY3R4LnNjYWxlKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbylcbiAgICAvLyBzY2FsZSBkcmF3YWJsZSBhcmVhIHRvIG1hdGNoIHZpcnR1YWwgem9vbVxuICAgIHRoaXMuY3R4LnNjYWxlKHRoaXMudmlydHVhbFNjYWxlLCB0aGlzLnZpcnR1YWxTY2FsZSlcbiAgICAvLyBjb25zb2xlLmxvZygnYWZ0ZXInLCB0aGlzLmN0eC5nZXRUcmFuc2Zvcm0oKSlcbiAgfVxuXG4gIHB1YmxpYyBzYXZlKCkge1xuICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICBtYXRyaXg6IHRoaXMubWF0cml4LFxuICAgICAgZm9udDogdGhpcy5mb250LFxuICAgICAgZGVwdGg6IHRoaXMuZGVwdGgsXG4gICAgICBkZXB0aE9mQ3V0OiB0aGlzLmRlcHRoT2ZDdXQsXG4gICAgICB0b29sRGlhbWV0ZXI6IHRoaXMudG9vbERpYW1ldGVyLFxuICAgICAgYWxpZ246IHRoaXMuYWxpZ24sXG4gICAgICB0b3A6IHRoaXMudG9wLFxuICAgICAgc3Ryb2tlU3R5bGU6IHRoaXMuc3Ryb2tlU3R5bGUsXG4gICAgICBmaWxsU3R5bGU6IHRoaXMuZmlsbFN0eWxlLFxuICAgICAgZmlsdGVyczogdGhpcy5maWx0ZXJzLnNsaWNlKCksXG4gICAgfSlcbiAgfVxuICBwdWJsaWMgcmVzdG9yZSgpIHtcbiAgICBpZiAoIXRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0Nhbm5vdCByZXN0b3JlOiBHQ2FudmFzIHN0YWNrIGVtcHR5IScpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgcHJldiA9IHRoaXMuc3RhY2sucG9wKClcbiAgICA7KE9iamVjdC5rZXlzKHByZXYpIGFzIENhbnZhc1N0YWNrSXRlbUtleVtdKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgdGhpc1trZXldID0gcHJldltrZXldXG4gICAgfSlcbiAgICB0aGlzLnNldEN0eFRyYW5zZm9ybShwcmV2Lm1hdHJpeClcbiAgICB0aGlzLmN0eC5saW5lV2lkdGggPSAxIC8gdGhpcy52aXJ0dWFsU2NhbGVcbiAgfVxuXG4gIHB1YmxpYyBiZWdpblBhdGgoKSB7XG4gICAgdGhpcy5wYXRoID0gbmV3IFBhdGgoKVxuICAgIHRoaXMuY3R4Py5iZWdpblBhdGgoKVxuICB9XG5cbiAgcHVibGljIHRyYW5zZm9ybShhPzogbnVtYmVyLCBiPzogbnVtYmVyLCBjPzogbnVtYmVyLCBkPzogbnVtYmVyLCBlPzogbnVtYmVyLCBmPzogbnVtYmVyKSB7XG4gICAgdGhpcy5tYXRyaXggPSB0aGlzLm1hdHJpeC5jb25jYXQobmV3IE1hdHJpeChhLCBiLCBjLCBkLCBlLCBmKSlcbiAgICB0aGlzLmN0eD8udHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpXG4gIH1cblxuICBwdWJsaWMgc2V0VHJhbnNmb3JtKGE/OiBudW1iZXIsIGI/OiBudW1iZXIsIGM/OiBudW1iZXIsIGQ/OiBudW1iZXIsIGU/OiBudW1iZXIsIGY/OiBudW1iZXIpIHtcbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgoYSwgYiwgYywgZCwgZSwgZilcbiAgICB0aGlzLmN0eD8uc2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpXG4gIH1cblxuICBwdWJsaWMgcmVzZXRUcmFuc2Zvcm0oKSB7XG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4KClcbiAgICB0aGlzLmN0eD8ucmVzZXRUcmFuc2Zvcm0oKVxuICB9XG5cbiAgcHVibGljIHJvdGF0ZSh0aGV0YTogbnVtYmVyKSB7XG4gICAgdGhpcy5tYXRyaXggPSB0aGlzLm1hdHJpeC5yb3RhdGUodGhldGEpXG4gICAgdGhpcy5jdHg/LnJvdGF0ZSgodGhldGEgLyAxODApICogTWF0aC5QSSlcbiAgfVxuXG4gIHB1YmxpYyB0cmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLm1hdHJpeCA9IHRoaXMubWF0cml4LnRyYW5zbGF0ZSh4LCB5KVxuICAgIC8vIHRoaXMuY3R4Py5zY2FsZSgxIC8gdGhpcy52aXJ0dWFsU2NhbGUsIDEgLyB0aGlzLnZpcnR1YWxTY2FsZSlcbiAgICAvLyB0aGlzLmN0eD8uc2NhbGUoMSAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCAxIC8gd2luZG93LmRldmljZVBpeGVsUmF0aW8pXG4gICAgdGhpcy5jdHgucmVzZXRUcmFuc2Zvcm0oKVxuICAgIHRoaXMuY3R4Py50cmFuc2xhdGUoeCwgeSlcbiAgICB0aGlzLmN0eD8uc2NhbGUodGhpcy52aXJ0dWFsU2NhbGUsIHRoaXMudmlydHVhbFNjYWxlKVxuICAgIHRoaXMuY3R4Py5zY2FsZSh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgd2luZG93LmRldmljZVBpeGVsUmF0aW8pXG4gIH1cblxuICBwdWJsaWMgc2NhbGUoeDogbnVtYmVyLCB5PzogbnVtYmVyKSB7XG4gICAgdGhpcy5tYXRyaXggPSB0aGlzLm1hdHJpeC5zY2FsZSh4LCB5KVxuICAgIHRoaXMuY3R4Py5zY2FsZSh4LCB5IHx8IHgpXG4gIH1cblxuICAvLyBOb3RlOiB0aGlzIHdhcyBtYXJrZWQgYXMgdG8tdGlkeSBieSBPRyBhdXRob3JcbiAgcHJpdmF0ZSB0cmFuc2Zvcm1Qb2ludChhOiBbeDogbnVtYmVyLCB5OiBudW1iZXJdIHwgUG9pbnQpOiBQb2ludCB7XG4gICAgLy8gaSA9IGkgfHwgMFxuICAgIGlmIChhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGNvbnN0IHYgPSB0aGlzLm1hdHJpeC50cmFuc2Zvcm1Qb2ludChuZXcgUG9pbnQoYVswXSwgYVsxXSkpXG4gICAgICAvLyAgIHZhciB2ID0gbmV3IFBvaW50KGFbaV0sIGFbaSArIDFdKVxuICAgICAgLy8gICB2ID0gdGhpcy5tYXRyaXgudHJhbnNmb3JtUG9pbnQodilcbiAgICAgIC8vICAgYVtpXSA9IHYueFxuICAgICAgLy8gICBhW2kgKyAxXSA9IHYueVxuICAgICAgcmV0dXJuIG5ldyBQb2ludCh2LngsIHYueSlcbiAgICB9IGVsc2UgaWYgKGEueCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgdiA9IG5ldyBQb2ludChhLngsIGEueSlcbiAgICAgIHYgPSB0aGlzLm1hdHJpeC50cmFuc2Zvcm1Qb2ludCh2KVxuICAgICAgYS54ID0gdi54XG4gICAgICBhLnkgPSB2LnlcbiAgICAgIHJldHVybiB2XG4gICAgfVxuICB9XG4gIHByaXZhdGUgZW5zdXJlUGF0aCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIGlmICghdGhpcy5wYXRoKSByZXR1cm5cbiAgICBpZiAodGhpcy5wYXRoLnN1YlBhdGhzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5wYXRoLm1vdmVUbyh4LCB5KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBtb3ZlVG8oX3g6IG51bWJlciwgX3k6IG51bWJlcikge1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy50cmFuc2Zvcm1Qb2ludChbX3gsIF95XSlcbiAgICB0aGlzLnBhdGgubW92ZVRvKHgsIHkpXG4gICAgdGhpcy5jdHg/Lm1vdmVUbyh4LCB5KVxuICB9XG5cbiAgcHVibGljIGxpbmVUbyhfeDogbnVtYmVyLCBfeTogbnVtYmVyKSB7XG4gICAgY29uc3QgeyB4LCB5IH0gPSB0aGlzLnRyYW5zZm9ybVBvaW50KFtfeCwgX3ldKVxuICAgIHRoaXMuZW5zdXJlUGF0aCh4LCB5KVxuICAgIHRoaXMucGF0aC5saW5lVG8oeCwgeSlcbiAgICB0aGlzLmN0eD8ubGluZVRvKHgsIHkpXG4gIH1cblxuICBwdWJsaWMgYXJjVG8oX3gxOiBudW1iZXIsIF95MTogbnVtYmVyLCBfeDI6IG51bWJlciwgX3kyOiBudW1iZXIsIHJhZGl1czogbnVtYmVyKSB7XG4gICAgLy8gVE9ETzogdGhpcyBkb2Vzbid0IG11dGF0ZSB0aGUgYXJndW1lbnRzIGFycmF5IHlldFxuICAgIGNvbnN0IHsgeDogeDEsIHk6IHkxIH0gPSB0aGlzLnRyYW5zZm9ybVBvaW50KFtfeDEsIF95MV0pXG4gICAgY29uc3QgeyB4OiB4MiwgeTogeTIgfSA9IHRoaXMudHJhbnNmb3JtUG9pbnQoW194MiwgX3kyXSlcblxuICAgIHRoaXMuZW5zdXJlUGF0aCh4MSwgeTEpXG5cbiAgICBjb25zdCBwMCA9IHRoaXMucGF0aC5sYXN0UG9pbnQoKSB8fCBuZXcgUG9pbnQoKVxuICAgIGNvbnN0IHAxID0gbmV3IFBvaW50KHgxLCB5MSlcbiAgICBjb25zdCBwMiA9IG5ldyBQb2ludCh4MiwgeTIpXG4gICAgY29uc3QgdjAxID0gcDAuc3VidHJhY3QocDEpXG4gICAgY29uc3QgdjIxID0gcDIuc3VidHJhY3QocDEpXG5cbiAgICAvLyBzaW4oQSAtIEIpID0gc2luKEEpICogY29zKEIpIC0gc2luKEIpICogY29zKEEpXG4gICAgY29uc3QgY3Jvc3MgPSB2MDEueCAqIHYyMS55IC0gdjAxLnkgKiB2MjEueFxuXG4gICAgaWYgKE1hdGguYWJzKGNyb3NzKSA8IDFlLTEwKSB7XG4gICAgICAvLyBvbiBvbmUgbGluZVxuICAgICAgdGhpcy5saW5lVG8oeDEsIHkxKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZDAxID0gdjAxLm1hZ25pdHVkZSgpXG4gICAgY29uc3QgZDIxID0gdjIxLm1hZ25pdHVkZSgpXG4gICAgY29uc3QgYW5nbGUgPSAoTWF0aC5QSSAtIE1hdGguYWJzKE1hdGguYXNpbihjcm9zcyAvIChkMDEgKiBkMjEpKSkpIC8gMlxuICAgIGNvbnN0IHNwYW4gPSByYWRpdXMgKiBNYXRoLnRhbihhbmdsZSlcbiAgICBsZXQgcmF0ZSA9IHNwYW4gLyBkMDFcblxuICAgIGNvbnN0IHN0YXJ0UG9pbnQgPSBuZXcgUG9pbnQocDEueCArIHYwMS54ICogcmF0ZSwgcDEueSArIHYwMS55ICogcmF0ZSlcblxuICAgIHJhdGUgPSBzcGFuIC8gZDIxXG5cbiAgICBjb25zdCBlbmRQb2ludCA9IG5ldyBQb2ludChwMS54ICsgdjIxLnggKiByYXRlLCBwMS55ICsgdjIxLnkgKiByYXRlKVxuXG4gICAgY29uc3QgbWlkUG9pbnQgPSBuZXcgUG9pbnQoKHN0YXJ0UG9pbnQueCArIGVuZFBvaW50LngpIC8gMiwgKHN0YXJ0UG9pbnQueSArIGVuZFBvaW50LnkpIC8gMilcblxuICAgIGNvbnN0IHZtMSA9IG1pZFBvaW50LnN1YnRyYWN0KHAxKVxuICAgIGNvbnN0IGRtMSA9IHZtMS5tYWduaXR1ZGUoKVxuICAgIGNvbnN0IGQgPSBNYXRoLnNxcnQocmFkaXVzICogcmFkaXVzICsgc3BhbiAqIHNwYW4pXG5cbiAgICBjb25zdCBjZW50ZXJQb2ludCA9IG5ldyBQb2ludCgpXG4gICAgcmF0ZSA9IGQgLyBkbTFcbiAgICBjZW50ZXJQb2ludC54ID0gcDEueCArIHZtMS54ICogcmF0ZVxuICAgIGNlbnRlclBvaW50LnkgPSBwMS55ICsgdm0xLnkgKiByYXRlXG5cbiAgICBjb25zdCBhcmMgPSBwb2ludHNUb0FyYyhjZW50ZXJQb2ludCwgc3RhcnRQb2ludCwgZW5kUG9pbnQpXG5cbiAgICB0aGlzLnBhdGgubGluZVRvKHN0YXJ0UG9pbnQueCwgc3RhcnRQb2ludC55KVxuICAgIHRoaXMucGF0aC5hcmMoY2VudGVyUG9pbnQueCwgY2VudGVyUG9pbnQueSwgYXJjLnJhZGl1cywgYXJjLnN0YXJ0LCBhcmMuZW5kLCBjcm9zcyA+IDApXG5cbiAgICB0aGlzLmN0eD8uYXJjVG8oeDEsIHkxLCB4MiwgeTIsIHJhZGl1cylcbiAgfVxuXG4gIHB1YmxpYyBhcmMoLi4uYXJnczogQXJjQWN0aW9uWydhcmdzJ10pIHtcbiAgICBsZXQgW3gsIHksIHJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYW50aUNsb2Nrd2lzZV0gPSBhcmdzXG5cbiAgICAvLyBJbiB0aGUgY29udmVyc2lvbiB0byBwb2ludHMgd2UgbG9zZSB0aGUgZGlzdGluY3Rpb25cbiAgICAvLyBiZXR3ZWVuIDAgYW5kIHBpMiBzbyB3ZSBtdXN0IG9wdGltaXplIG91dCAwIGhlcmVcbiAgICAvLyBvciBlbHNlIHRoZXkgd2lsbCBiZSB0cmVhdGVkIGFzIGZ1bGwgY2lyY2xlcy5cblxuICAgIGlmIChhU3RhcnRBbmdsZSAtIGFFbmRBbmdsZSA9PT0gMCkgcmV0dXJuXG5cbiAgICAvLyBTZWUgcG9ydGFsMiBleGFtcGxlXG4gICAgaWYgKGFFbmRBbmdsZSAtIGFTdGFydEFuZ2xlID09PSAtTWF0aC5QSSAqIDIpIGFFbmRBbmdsZSA9IE1hdGguUEkgKiAyXG5cbiAgICBjb25zdCBjZW50ZXIgPSBuZXcgUG9pbnQoeCwgeSlcbiAgICB2YXIgcG9pbnRzID0gYXJjVG9Qb2ludHMoeCwgeSwgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgcmFkaXVzKVxuXG4gICAgdGhpcy50cmFuc2Zvcm1Qb2ludChjZW50ZXIpXG4gICAgdGhpcy50cmFuc2Zvcm1Qb2ludChwb2ludHMuc3RhcnQpXG4gICAgdGhpcy50cmFuc2Zvcm1Qb2ludChwb2ludHMuZW5kKVxuXG4gICAgY29uc3QgcmVzID0gcG9pbnRzVG9BcmMoY2VudGVyLCBwb2ludHMuc3RhcnQsIHBvaW50cy5lbmQpXG5cbiAgICAvLyB0aGlzLmVuc3VyZVBhdGgocG9pbnRzLnN0YXJ0LngsIHBvaW50cy5zdGFydC55KVxuXG4gICAgaWYgKCF0aGlzLnBhdGgpIHRocm93ICdiZWdpblBhdGggbm90IGNhbGxlZCB5ZXQnXG4gICAgdGhpcy5wYXRoLmFyYyhjZW50ZXIueCwgY2VudGVyLnksIHJlcy5yYWRpdXMsIHJlcy5zdGFydCwgcmVzLmVuZCwgYW50aUNsb2Nrd2lzZSlcblxuICAgIC8vIHZhciB0bXAgPSBuZXcgUGF0aCgpO1xuICAgIC8vIHRtcC5tb3ZlVG8ocG9pbnRzLnN0YXJ0LngsIHBvaW50cy5zdGFydC55KTtcbiAgICAvLyB0bXAuYXJjKGNlbnRlci54LCBjZW50ZXIueSwgcmFkaXVzLCByZXMuc3RhcnQsIHJlcy5lbmQsIGFDbG9ja3dpc2UpO1xuXG4gICAgLy8gdG1wLmdldFBvaW50cyg0MCkuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgLy8gICB0aGlzLmxpbmVUbyhwLngscC55KTtcbiAgICAvLyB9LHRoaXMpO1xuXG4gICAgdGhpcy5jdHg/LmFyYyh4LCB5LCByYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFudGlDbG9ja3dpc2UpXG4gIH1cblxuICBwdWJsaWMgYmV6aWVyQ3VydmVUbyguLi5hcmdzOiBCZXppZXJDdXJ2ZVRvQWN0aW9uWydhcmdzJ10pIHtcbiAgICAvLyBsZXQgW2FDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVldID0gYXJnc1xuICAgIGNvbnN0IHsgeDogYUNQMXgsIHk6IGFDUDF5IH0gPSB0aGlzLnRyYW5zZm9ybVBvaW50KFthcmdzWzBdLCBhcmdzWzFdXSlcbiAgICBjb25zdCB7IHg6IGFDUDJ4LCB5OiBhQ1AyeSB9ID0gdGhpcy50cmFuc2Zvcm1Qb2ludChbYXJnc1syXSwgYXJnc1szXV0pXG4gICAgY29uc3QgeyB4OiBhWCwgeTogYVkgfSA9IHRoaXMudHJhbnNmb3JtUG9pbnQoW2FyZ3NbNF0sIGFyZ3NbNV1dKVxuICAgIHRoaXMucGF0aC5iZXppZXJDdXJ2ZVRvKGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkpXG5cbiAgICB0aGlzLmN0eD8uYmV6aWVyQ3VydmVUbyhhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZKVxuICB9XG5cbiAgcHVibGljIHF1YWRyYXRpY0N1cnZlVG8oLi4uYXJnczogUXVhZHJhdGljQ3VydmVUb0FjdGlvblsnYXJncyddKSB7XG4gICAgLy8gY29uc3QgW2FDUHgsIGFDUHksIGFYLCBhWV0gPSBhcmdzXG4gICAgY29uc3QgeyB4OiBhQ1B4LCB5OiBhQ1B5IH0gPSB0aGlzLnRyYW5zZm9ybVBvaW50KFthcmdzWzBdLCBhcmdzWzFdXSlcbiAgICBjb25zdCB7IHg6IGFYLCB5OiBhWSB9ID0gdGhpcy50cmFuc2Zvcm1Qb2ludChbYXJnc1syXSwgYXJnc1szXV0pXG4gICAgdGhpcy5wYXRoLnF1YWRyYXRpY0N1cnZlVG8oYUNQeCwgYUNQeSwgYVgsIGFZKVxuXG4gICAgdGhpcy5jdHg/LnF1YWRyYXRpY0N1cnZlVG8oYUNQeCwgYUNQeSwgYVgsIGFZKVxuICB9XG5cbiAgcHVibGljIGNsaXAoKSB7XG4gICAgdGhpcy5jbGlwUmVnaW9uID0gdGhpcy5wYXRoXG4gICAgdGhpcy5jdHg/LmNsaXAoKVxuICB9XG5cbiAgcHVibGljIHJlY3Q6IE92ZXJsb2FkZWRGdW5jdGlvbldpdGhPcHRpb25hbHM8XG4gICAgW3B0OiBQb2ludCwgdzogbnVtYmVyLCBoOiBudW1iZXJdIHwgW3g6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlcl0sXG4gICAgW2N1dG91dDogdHJ1ZV1cbiAgPiA9ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgY3V0b3V0ID0gKGFyZ3MubGVuZ3RoID09PSA0ICYmIGFyZ3NbM10gPT09IHRydWUpIHx8IGFyZ3MubGVuZ3RoID09PSA1IHx8IGZhbHNlXG4gICAgY29uc3QgeCA9IGFyZ3MubGVuZ3RoID09PSAzIHx8IChhcmdzLmxlbmd0aCA9PT0gNCAmJiBhcmdzWzNdID09PSB0cnVlKSA/IGFyZ3NbMF0ueCA6IGFyZ3NbMF1cbiAgICBjb25zdCB5ID0gYXJncy5sZW5ndGggPT09IDMgfHwgKGFyZ3MubGVuZ3RoID09PSA0ICYmIGFyZ3NbM10gPT09IHRydWUpID8gYXJnc1swXS55IDogYXJnc1sxXVxuICAgIGNvbnN0IHcgPSBhcmdzLmxlbmd0aCA9PT0gMyB8fCAoYXJncy5sZW5ndGggPT09IDQgJiYgYXJnc1szXSA9PT0gdHJ1ZSkgPyBhcmdzWzFdIDogYXJnc1syXVxuICAgIGNvbnN0IGggPSBhcmdzLmxlbmd0aCA9PT0gMyB8fCAoYXJncy5sZW5ndGggPT09IDQgJiYgYXJnc1szXSA9PT0gdHJ1ZSkgPyBhcmdzWzJdIDogYXJnc1szXVxuICAgIGlmIChjdXRvdXQpIHRoaXMuY3V0b3V0UmVjdCh4LCB5LCB3LCBoKVxuICAgIHRoaXMubW92ZVRvKHgsIHkpXG4gICAgdGhpcy5saW5lVG8oeCArIHcsIHkpXG4gICAgdGhpcy5saW5lVG8oeCArIHcsIHkgKyBoKVxuICAgIHRoaXMubGluZVRvKHgsIHkgKyBoKVxuICAgIHRoaXMubGluZVRvKHgsIHkpXG4gIH1cblxuICBwdWJsaWMgc3Ryb2tlUmVjdDogT3ZlcmxvYWRlZEZ1bmN0aW9uV2l0aE9wdGlvbmFsczxcbiAgICBbcHQ6IFBvaW50LCB3OiBudW1iZXIsIGg6IG51bWJlcl0gfCBbeDogbnVtYmVyLCB5OiBudW1iZXIsIHc6IG51bWJlciwgaDogbnVtYmVyXSxcbiAgICBbb3B0aW9uczogU3Ryb2tlT3B0aW9uc11cbiAgPiA9ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgeCA9XG4gICAgICBhcmdzLmxlbmd0aCA9PT0gMyB8fCAoYXJncy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIGFyZ3NbM10gIT09ICdudW1iZXInKVxuICAgICAgICA/IChhcmdzWzBdIGFzIFBvaW50KS54XG4gICAgICAgIDogKGFyZ3NbMF0gYXMgbnVtYmVyKVxuICAgIGNvbnN0IHkgPVxuICAgICAgYXJncy5sZW5ndGggPT09IDMgfHwgKGFyZ3MubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBhcmdzWzNdICE9PSAnbnVtYmVyJylcbiAgICAgICAgPyAoYXJnc1swXSBhcyBQb2ludCkueVxuICAgICAgICA6IChhcmdzWzFdIGFzIG51bWJlcilcbiAgICBjb25zdCB3ID0gYXJncy5sZW5ndGggPT09IDMgfHwgKGFyZ3MubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBhcmdzWzNdICE9PSAnbnVtYmVyJykgPyBhcmdzWzFdIDogYXJnc1syXVxuICAgIGNvbnN0IGggPSBhcmdzLmxlbmd0aCA9PT0gMyB8fCAoYXJncy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIGFyZ3NbM10gIT09ICdudW1iZXInKSA/IGFyZ3NbMl0gOiAoYXJnc1szXSBhcyBudW1iZXIpXG4gICAgY29uc3Qgb3B0aW9ucyA9IGFyZ3MubGVuZ3RoID09PSA1ID8gYXJnc1s0XSA6IGFyZ3MubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBhcmdzWzNdICE9PSAnbnVtYmVyJyA/IGFyZ3NbM10gOiB1bmRlZmluZWRcbiAgICB0aGlzLmJlZ2luUGF0aCgpXG4gICAgdGhpcy5yZWN0KHgsIHksIHcsIGgpXG4gICAgdGhpcy5zdHJva2Uob3B0aW9ucylcbiAgICB0aGlzLmNsb3NlUGF0aCgpXG4gIH1cblxuICBwdWJsaWMgZmlsbFJlY3QoLi4uYXJnczogW3B0OiBQb2ludCwgdzogbnVtYmVyLCBoOiBudW1iZXJdIHwgW3g6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlcl0pIHtcbiAgICBjb25zdCB4ID0gYXJncy5sZW5ndGggPT09IDMgPyBhcmdzWzBdLnggOiBhcmdzWzBdXG4gICAgY29uc3QgeSA9IGFyZ3MubGVuZ3RoID09PSAzID8gYXJnc1swXS55IDogYXJnc1sxXVxuICAgIGNvbnN0IHcgPSBhcmdzLmxlbmd0aCA9PT0gMyA/IGFyZ3NbMV0gOiBhcmdzWzJdXG4gICAgY29uc3QgaCA9IGFyZ3MubGVuZ3RoID09PSAzID8gYXJnc1syXSA6IGFyZ3NbM11cbiAgICB0aGlzLmJlZ2luUGF0aCgpXG4gICAgdGhpcy5yZWN0KHgsIHksIHcsIGgpXG4gICAgdGhpcy5maWxsKClcbiAgICB0aGlzLmNsb3NlUGF0aCgpXG4gIH1cblxuICBwdWJsaWMgY3V0b3V0UmVjdCh4OiBudW1iZXIsIHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIpIHtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnBhdGguc3ViUGF0aHMpXG4gIH1cblxuICBwdWJsaWMgY2lyY2xlOiBPdmVybG9hZGVkRnVuY3Rpb25XaXRoT3B0aW9uYWxzPFxuICAgIFtwdDogUG9pbnQsIHJhZGl1czogbnVtYmVyXSB8IFt4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXJdLFxuICAgIFtjY3c6IHRydWVdXG4gID4gPSAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IHggPSBhcmdzLmxlbmd0aCA9PT0gMiB8fCAoYXJncy5sZW5ndGggPT09IDMgJiYgYXJnc1syXSA9PT0gdHJ1ZSkgPyBhcmdzWzBdLnggOiBhcmdzWzBdXG4gICAgY29uc3QgeSA9IGFyZ3MubGVuZ3RoID09PSAyIHx8IChhcmdzLmxlbmd0aCA9PT0gMyAmJiBhcmdzWzJdID09PSB0cnVlKSA/IGFyZ3NbMF0ueSA6IGFyZ3NbMV1cbiAgICBjb25zdCByYWRpdXMgPSBhcmdzLmxlbmd0aCA9PT0gMiB8fCAoYXJncy5sZW5ndGggPT09IDMgJiYgYXJnc1syXSA9PT0gdHJ1ZSkgPyBhcmdzWzFdIDogYXJnc1syXVxuICAgIGNvbnN0IGNjdyA9IChhcmdzLmxlbmd0aCA9PT0gMyAmJiBhcmdzWzJdID09PSB0cnVlKSB8fCBhcmdzLmxlbmd0aCA9PT0gNCB8fCBmYWxzZVxuICAgIHRoaXMuYXJjKHgsIHksIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIsIGNjdylcbiAgICAvLyBOT1RFOiBub3QgbmF0aXZlIHNvIGRvIG5vdCBuZWVkIHRvIGNhbGwgY2FudmFzIGFwaVxuICB9XG5cbiAgcHVibGljIHN0cm9rZUNpcmNsZSguLi5hcmdzOiBbcHQ6IFBvaW50LCByYWRpdXM6IG51bWJlcl0gfCBbeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyXSk6IHZvaWQge1xuICAgIGNvbnN0IHggPSBhcmdzLmxlbmd0aCA9PT0gMiA/IGFyZ3NbMF0ueCA6IGFyZ3NbMF1cbiAgICBjb25zdCB5ID0gYXJncy5sZW5ndGggPT09IDIgPyBhcmdzWzBdLnkgOiBhcmdzWzFdXG4gICAgY29uc3QgcmFkaXVzID0gYXJncy5sZW5ndGggPT09IDIgPyBhcmdzWzFdIDogYXJnc1syXVxuICAgIHRoaXMuYmVnaW5QYXRoKClcbiAgICB0aGlzLmNpcmNsZSh4LCB5LCByYWRpdXMpXG4gICAgdGhpcy5zdHJva2UoKVxuICAgIHRoaXMuY2xvc2VQYXRoKClcbiAgfVxuXG4gIHB1YmxpYyBmaWxsQ2lyY2xlKC4uLmFyZ3M6IFtwdDogUG9pbnQsIHJhZGl1czogbnVtYmVyXSB8IFt4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXJdKSB7XG4gICAgY29uc3QgeCA9IGFyZ3MubGVuZ3RoID09PSAyID8gYXJnc1swXS54IDogYXJnc1swXVxuICAgIGNvbnN0IHkgPSBhcmdzLmxlbmd0aCA9PT0gMiA/IGFyZ3NbMF0ueSA6IGFyZ3NbMV1cbiAgICBjb25zdCByYWRpdXMgPSBhcmdzLmxlbmd0aCA9PT0gMiA/IGFyZ3NbMV0gOiBhcmdzWzJdXG4gICAgdGhpcy5iZWdpblBhdGgoKVxuICAgIHRoaXMuY2lyY2xlKHgsIHksIHJhZGl1cylcbiAgICB0aGlzLmZpbGwoKVxuICAgIHRoaXMuY2xvc2VQYXRoKClcbiAgfVxuXG4gIHB1YmxpYyBzdHJva2VMaW5lKC4uLmFyZ3M6IFtQb2ludCwgUG9pbnRdIHwgW3gxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXJdKSB7XG4gICAgY29uc3QgeDEgPSBhcmdzLmxlbmd0aCA9PT0gMiA/IGFyZ3NbMF0ueCA6IGFyZ3NbMF1cbiAgICBjb25zdCB5MSA9IGFyZ3MubGVuZ3RoID09PSAyID8gYXJnc1swXS55IDogYXJnc1sxXVxuICAgIGNvbnN0IHgyID0gYXJncy5sZW5ndGggPT09IDIgPyBhcmdzWzFdLnggOiBhcmdzWzJdXG4gICAgY29uc3QgeTIgPSBhcmdzLmxlbmd0aCA9PT0gMiA/IGFyZ3NbMV0ueSA6IGFyZ3NbM11cbiAgICB0aGlzLmJlZ2luUGF0aCgpXG4gICAgdGhpcy5tb3ZlVG8oeDEsIHkxKVxuICAgIHRoaXMubGluZVRvKHgyLCB5MilcbiAgICB0aGlzLnN0cm9rZSgpXG4gICAgdGhpcy5jbG9zZVBhdGgoKVxuICB9XG5cbiAgcHVibGljIGNsb25lKCkge31cblxuICBwdWJsaWMgbWVhc3VyZVRleHQodGV4dDogc3RyaW5nKTogQm91bmRzIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaXNPcGFxdWUoY29sb3I6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGlmIChjb2xvciA9PSAndHJhbnNwYXJlbnQnKSByZXR1cm4gZmFsc2VcbiAgICBpZiAoY29sb3IgPT0gJ25vbmUnKSByZXR1cm4gZmFsc2VcblxuICAgIGlmICh0eXBlb2YgY29sb3IgPT0gJ3N0cmluZycgJiYgY29sb3IubWF0Y2goL3JnYmFcXCgoPzouKiwpezN9WzBcXC5dKlxcKS8pKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgcHVibGljIHN0cm9rZSh7IGFsaWduID0gdGhpcy5hbGlnbiwgZGVwdGggPSB0aGlzLmRlcHRoLCBjdXRvdXQsIGRlYnVnIH06IFN0cm9rZU9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghdGhpcy5pc09wYXF1ZSh0aGlzLnN0cm9rZVN0eWxlKSkgcmV0dXJuXG5cbiAgICBjb25zdCBvcmlnU3Ryb2tlU3R5bGUgPSB0aGlzLmN0eC5zdHJva2VTdHlsZVxuICAgIGlmIChkZWJ1Zykge1xuICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMCwwLDAuNSknXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRoID0gdGhpcy5wYXRoXG5cbiAgICAgIGlmIChjdXRvdXQpIHtcbiAgICAgICAgaWYgKHRoaXMucGF0aEhpc3RvcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRMaW5lcyA9IGNvbnZlcnRQb2ludHNUb0VkZ2VzKHBhdGguZ2V0UG9pbnRzKCkpXG4gICAgICAgICAgY29uc29sZS5sb2coJ2xpbmVzIG1ha2luZyB1cCBjdXJyZW50IHNoYXBlOicsIGN1cnJlbnRMaW5lcylcbiAgICAgICAgICBjb25zb2xlLmxvZygncHJldmlvdXNseSBzdG9yZWQgc2hhcGVzOiAnLCB0aGlzLnBhdGhIaXN0b3J5Lmxlbmd0aClcbiAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5wYXRoSGlzdG9yeS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgY29tcGFyZUxpbmVzID0gY29udmVydFBvaW50c1RvRWRnZXModGhpcy5wYXRoSGlzdG9yeVtpXS5nZXRQb2ludHMoKSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBoaXN0b3J5IGl0ZW0gJHtpfSBsaW5lczpgLCBjb21wYXJlTGluZXMpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2F2ZSgpXG5cbiAgICAgIGxldCBvZmZzZXQgPSAwXG4gICAgICBpZiAoYWxpZ24gPT09ICdvdXRlcicpIG9mZnNldCA9IHRoaXMudG9vbERpYW1ldGVyIC8gMlxuICAgICAgaWYgKGFsaWduID09PSAnaW5uZXInKSBvZmZzZXQgPSAtdGhpcy50b29sRGlhbWV0ZXIgLyAyXG5cbiAgICAgIGlmIChhbGlnbiAhPT0gJ2NlbnRlcicpIHtcbiAgICAgICAgcGF0aCA9IHBhdGguc2ltcGxpZnkoJ2V2ZW5vZGQnLCB0aGlzLnByZWNpc2lvbilcbiAgICAgICAgcGF0aCA9IHBhdGgub2Zmc2V0KG9mZnNldCkgfHwgcGF0aFxuICAgICAgfVxuXG4gICAgICBpZiAocGF0aC5zdWJQYXRocykge1xuICAgICAgICBwYXRoLnN1YlBhdGhzLmZvckVhY2goKHN1YlBhdGgpID0+IHtcbiAgICAgICAgICAvLyBDbGltYiBtaWxsaW5nXG4gICAgICAgICAgaWYgKGFsaWduID09ICdpbm5lcicpIHN1YlBhdGggPSBzdWJQYXRoLnJldmVyc2UoKVxuICAgICAgICAgIHRoaXMubGF5ZXIoc3ViUGF0aCwgKHopID0+IHtcbiAgICAgICAgICAgIHRoaXMubW90aW9uLmZvbGxvd1BhdGgoc3ViUGF0aCwgeilcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdzdHJva2UgaGFzIG5vIHN1YnBhdGhzPycpXG4gICAgICB9XG4gICAgICAvLyB0aGlzLm1vdGlvbi5yZXRyYWN0KClcblxuICAgICAgdGhpcy5yZXN0b3JlKClcbiAgICB9XG5cbiAgICB0aGlzLmN0eD8uc3Ryb2tlKClcblxuICAgIGlmIChkZWJ1ZykgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSBvcmlnU3Ryb2tlU3R5bGVcbiAgfVxuXG4gIHB1YmxpYyBmaWxsKHdpbmRpbmdSdWxlPzogV2luZGluZ1J1bGUpIHtcbiAgICBpZiAoIXRoaXMuaXNPcGFxdWUodGhpcy5maWxsU3R5bGUpKSByZXR1cm5cblxuICAgIHRoaXMuc2F2ZSgpXG5cbiAgICBpZiAoIXRoaXMudG9vbERpYW1ldGVyKSB0aHJvdyAnWW91IG11c3Qgc2V0IGNvbnRleHQudG9vbERpYW1ldGVyIHRvIHVzZSBmaWxsKCknXG5cbiAgICBsZXQgcGF0aCA9IHRoaXMucGF0aFxuICAgIHBhdGggPSBwYXRoLnNpbXBsaWZ5KHdpbmRpbmdSdWxlLCB0aGlzLnByZWNpc2lvbilcbiAgICBwYXRoID0gcGF0aC5jbGlwKHRoaXMuY2xpcFJlZ2lvbiwgMCwgdGhpcy5wcmVjaXNpb24pXG4gICAgcGF0aCA9IHBhdGguZmlsbFBhdGgodGhpcy50b29sRGlhbWV0ZXIsIHRoaXMucHJlY2lzaW9uKVxuXG4gICAgaWYgKHBhdGguc3ViUGF0aHMpXG4gICAgICBwYXRoLnN1YlBhdGhzLmZvckVhY2goKHN1YlBhdGgpID0+IHtcbiAgICAgICAgdGhpcy5sYXllcihzdWJQYXRoLCAoeikgPT4ge1xuICAgICAgICAgIHRoaXMubW90aW9uLmZvbGxvd1BhdGgoc3ViUGF0aCwgeilcbiAgICAgICAgfSlcbiAgICAgIH0sIHRoaXMpXG5cbiAgICAvLyB0aGlzLm1vdGlvbi5yZXRyYWN0KClcblxuICAgIHRoaXMucmVzdG9yZSgpXG5cbiAgICB0aGlzLmN0eD8uZmlsbCgpXG4gIH1cblxuICBwdWJsaWMgY2xlYXJSZWN0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgIHRoaXMuY3R4Py5jbGVhclJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodClcbiAgfVxuXG4gIHB1YmxpYyBjbG9zZVBhdGgoKSB7XG4gICAgdGhpcy5wYXRoLmNsb3NlKClcbiAgICBpZiAodGhpcy5lbmFibGVDdXRvdXRzKSB0aGlzLnBhdGhIaXN0b3J5LnB1c2godGhpcy5wYXRoLmN1cnJlbnQuY2xvbmUoKSlcbiAgICB0aGlzLmN0eD8uY2xvc2VQYXRoKClcbiAgfVxuXG4gIC8vIHB1YmxpYyBmaWxsVGV4dCh0ZXh0OiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyLCBwYXJhbXM6IGFueSkge1xuICAvLyAgICAgdGhpcy50ZXh0KHRleHQsIHgsIHksIHBhcmFtcyk7XG4gIC8vICAgICB0aGlzLmZpbGwoKTtcbiAgLy8gICB9XG4gIC8vIHB1YmxpYyBzdHJva2VUZXh0KHRleHQ6IHN0cmluZywgeDogbnVtYmVyLCB5OiBudW1iZXIsIHBhcmFtczogYW55KSB7XG4gIC8vICAgICB0aGlzLnRleHQodGV4dCwgeCwgeSwgcGFyYW1zKTtcbiAgLy8gICAgIHRoaXMuc3Ryb2tlKCk7XG4gIC8vICAgfVxuXG4gIHByaXZhdGUgbGF5ZXIoc3ViUGF0aDogU3ViUGF0aCwgZm46ICh6OiBudW1iZXIpID0+IHZvaWQpIHtcbiAgICBsZXQgZGVwdGhPZkN1dCA9IHRoaXMuZGVwdGhPZkN1dCB8fCB0aGlzLmRlcHRoXG5cbiAgICBpZiAoZGVwdGhPZkN1dCA9PT0gMCkge1xuICAgICAgZm4uY2FsbCh0aGlzLCAtdGhpcy50b3ApXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBpbnZlcnRlZFogPSB0aGlzLmRlcHRoIDwgMFxuICAgIGlmIChpbnZlcnRlZFogJiYgZGVwdGhPZkN1dCA+IDApIGRlcHRoT2ZDdXQgPSAtZGVwdGhPZkN1dFxuXG4gICAgbGV0IHN0ZXBzID0gTWF0aC5jZWlsKE1hdGguYWJzKHRoaXMuZGVwdGggLyBkZXB0aE9mQ3V0KSlcbiAgICBsZXQgb2Zmc2V0ID0gLXRoaXMudG9wXG4gICAgd2hpbGUgKHN0ZXBzLS0pIHtcbiAgICAgIG9mZnNldCAtPSBkZXB0aE9mQ3V0XG5cbiAgICAgIC8vIENsaXAgdG8gYWN0dWFsIGRlcHRoXG4gICAgICBpZiAoaW52ZXJ0ZWRaKSB7XG4gICAgICAgIG9mZnNldCA9IE1hdGgubWF4KG9mZnNldCwgdGhpcy50b3AgKyB0aGlzLmRlcHRoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0ID0gTWF0aC5tYXgob2Zmc2V0LCAtdGhpcy50b3AgLSB0aGlzLmRlcHRoKVxuICAgICAgfVxuXG4gICAgICAvLyBSZW1vdmUgdGhlIG1hdGVyaWFsIGF0IHRoaXMgZGVwdGhcbiAgICAgIGZuLmNhbGwodGhpcywgb2Zmc2V0KVxuICAgIH1cblxuICAgIC8vIEZpbmlzaGluZyBwYXNzXG4gICAgaWYgKHRoaXMucmFtcGluZyAmJiBzdWJQYXRoLmlzQ2xvc2VkKCkpIHtcbiAgICAgIGZuLmNhbGwodGhpcywgb2Zmc2V0KVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IERyaXZlciwge1xuICBBbGxDb21tYW5kUGFyYW1zLFxuICBBcmNQYXJhbXMsXG4gIERyaXZlclN0cmVhbSxcbiAgTGluZWFyUGFyYW1zLFxuICBSYXBpZFBhcmFtcyxcbiAgVW5pdCxcbiAgWmVyb1BhcmFtcyxcbn0gZnJvbSAnLi9Ecml2ZXInXG5cbnR5cGUgU3RyZWFtID0ge1xuICB3cml0ZTogKHN0cjogc3RyaW5nKSA9PiB2b2lkXG4gIHJlc2V0OiAoKSA9PiB2b2lkXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdDb2RlIGV4dGVuZHMgRHJpdmVyIHtcbiAgcHVibGljIHN0cmVhbTogU3RyZWFtXG5cbiAgY29uc3RydWN0b3Ioc3RyZWFtPzogRHJpdmVyU3RyZWFtKSB7XG4gICAgc3VwZXIoc3RyZWFtKVxuICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtIHx8IHtcbiAgICAgIHdyaXRlOiAoc3RyKSA9PiBjb25zb2xlLmxvZyhzdHIpLFxuICAgICAgcmVzZXQ6ICgpID0+IHt9LFxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpIHtcbiAgICB0aGlzLnN0cmVhbS5yZXNldCgpXG4gICAgdGhpcy5pbml0KClcbiAgfVxuXG4gIHB1YmxpYyBzZW5kKGNvZGU6IHN0cmluZywgcGFyYW1zPzogUGFydGlhbDxBbGxDb21tYW5kUGFyYW1zPikge1xuICAgIGxldCBjb21tYW5kID0gYCR7Y29kZX1gXG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgY29uc3Qga2V5cyA9ICd4eXphYmNpamtmdCcuc3BsaXQoJycpIGFzIChrZXlvZiBBbGxDb21tYW5kUGFyYW1zKVtdXG4gICAgICBrZXlzLmZvckVhY2goKGspID0+IHtcbiAgICAgICAgaWYgKHBhcmFtc1trXSA9PT0gdW5kZWZpbmVkIHx8IHBhcmFtc1trXSA9PT0gbnVsbCB8fCBpc05hTihwYXJhbXNba10pKSByZXR1cm5cbiAgICAgICAgY29tbWFuZCArPSBgICR7ay50b1VwcGVyQ2FzZSgpfSR7cGFyYW1zW2tdfWBcbiAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMuc3RyZWFtLndyaXRlKGNvbW1hbmQpXG4gIH1cblxuICBwdWJsaWMgaW5pdCgpIHtcbiAgICAvLyB0aGlzLnNlbmQoJ0cwMCAobW92ZSBhcyBmYXN0IGFzIGl0IGNhbiBvciBpcyBwcm9ncmFtbWVkIHRvKScpXG4gICAgLy8gdGhpcy5zZW5kKCdHOTAgKGFic29sdXRlIHBvc2l0aW9uIG1vZGUpJylcbiAgICAvLyB0aGlzLnNlbmQoJ0c4MCAoY2FuY2VsIGFueSBwcmV2aW91c2x5IHVzZWQgY2FubmVkIGN5Y2xlcyknKVxuICAgIHRoaXMuc2VuZCgnRzE3IChzZWxlY3QgdGhlIHh5IHBsYW5lKScpXG4gICAgLy8gdGhpcy5zZW5kKCdHMjggKHJhcGlkIHRvIGhvbWUgcG9zaXRpb24pJylcbiAgICB0aGlzLnNlbmQoJ00zIFMwIChhY3RpdmF0ZSBzZXJ2byknKVxuICB9XG5cbiAgcHVibGljIHVuaXQobmFtZTogVW5pdCkge1xuICAgIHRoaXMuc2VuZCh7IGluY2g6ICdHMjAnLCBtbTogJ0cyMScgfVtuYW1lXSArIGAgKHNlbGVjdCAke25hbWV9IHVuaXQpYClcbiAgfVxuICBwdWJsaWMgc3BlZWQobjogbnVtYmVyKSB7XG4gICAgdGhpcy5zZW5kKGBTJHtufSAoc2V0IHNwZWVkIHRvICR7bn0pYClcbiAgfVxuICBwdWJsaWMgZmVlZChuOiBudW1iZXIpIHtcbiAgICB0aGlzLnNlbmQoJ0YnICsgbilcbiAgfVxuICBwdWJsaWMgY29vbGFudCh0eXBlOiAnbWlzdCcgfCAnZmxvb2QnIHwgJ29mZicpIHtcbiAgICBpZiAodHlwZSA9PT0gJ21pc3QnKSB0aGlzLnNlbmQoJ00wNycpIC8vIHNwZWNpYWxcbiAgICBlbHNlIGlmICh0eXBlKSB0aGlzLnNlbmQoJ00wOCcpIC8vIGZsb29kXG4gICAgZWxzZSB0aGlzLnNlbmQoJ00wOScpIC8vIG9mZlxuICB9XG4gIHB1YmxpYyB6ZXJvKHBhcmFtczogWmVyb1BhcmFtcykge1xuICAgIHRoaXMuc2VuZCgnRzI4LjMnLCBwYXJhbXMpXG4gIH1cbiAgLy8gdG9vbCBzZWxlY3Rpb25cbiAgcHVibGljIGF0YyhpZDogbnVtYmVyKSB7XG4gICAgdGhpcy5zZW5kKCdNNicsIHsgdDogaWQgfSlcbiAgfVxuICBwdWJsaWMgcmFwaWQocGFyYW1zOiBSYXBpZFBhcmFtcykge1xuICAgIHRoaXMuc2VuZCgnRzAnLCBwYXJhbXMpXG4gIH1cbiAgcHVibGljIGxpbmVhcihwYXJhbXM6IExpbmVhclBhcmFtcykge1xuICAgIHRoaXMuc2VuZCgnRzEnLCBwYXJhbXMpXG4gIH1cbiAgcHVibGljIGFyY0NXKHBhcmFtczogQXJjUGFyYW1zKSB7XG4gICAgdGhpcy5zZW5kKCdHMicsIHBhcmFtcylcbiAgfVxuICBwdWJsaWMgYXJjQ0NXKHBhcmFtczogQXJjUGFyYW1zKSB7XG4gICAgdGhpcy5zZW5kKCdHMycsIHBhcmFtcylcbiAgfVxuICBwdWJsaWMgY29tbWVudChzdHJpbmc6IHN0cmluZykge1xuICAgIHRoaXMuc2VuZChgKCR7c3RyaW5nfSlgKVxuICB9XG4gIHB1YmxpYyBtZXRhKHBhcmFtczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge1xuICAgIGxldCBjb21tZW50ID0gJygnXG4gICAgZm9yICh2YXIgayBpbiBwYXJhbXMpIHtcbiAgICAgIGNvbW1lbnQgKz0gYCR7a309JHtwYXJhbXNba119YFxuICAgIH1cbiAgICBjb21tZW50ICs9ICcpJ1xuICAgIHRoaXMuc2VuZChjb21tZW50KVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBbXG4gIHJlcXVpcmUoJy4vMDFfSW5pdGlhbFNrZXRjaCcpLmRlZmF1bHQsIC8vIG1heWJlIHdvcms/XG4gIHJlcXVpcmUoJy4vMDJfR0NvZGVUZXN0JykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnLi8wM19BcmNzJykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnLi8wNF9CZXppZXJTY3JpYmJsZXMnKS5kZWZhdWx0LFxuICByZXF1aXJlKCcuLzA1X1NwaXJhbGluZycpLmRlZmF1bHQsXG4gIHJlcXVpcmUoJy4vMDZfU3BpcmFsaW5nUHJvcG9ydGlvbmFsJykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnLi8wN19Db25jZW50cmljQ2lyY2xlcycpLmRlZmF1bHQsXG4gIHJlcXVpcmUoJy4vMDhfQnViYmxlc0luQ2lyY2xlJykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnLi8wOV9HcmlkV2F2ZXMnKS5kZWZhdWx0LFxuICByZXF1aXJlKCcuLzEwX1BlcmxpbkdyaWQnKS5kZWZhdWx0LFxuICByZXF1aXJlKCcuLzExX1BlcmxpbkxpbmVzJykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnLi8xMl9UcmVlJykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnLi8xM19Nb25kYXlNYXplJykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnLi8xNF9DaGFzZXInKS5kZWZhdWx0LFxuICByZXF1aXJlKCcuLzE1X0thbGVpZG8nKS5kZWZhdWx0LFxuICByZXF1aXJlKCcuLzE2X0thbGVpZG9DdXJ2ZScpLmRlZmF1bHQsXG4gIHJlcXVpcmUoJy4vMTdfUGVycGVuZGljdWxhcml0eScpLmRlZmF1bHQsXG4gIHJlcXVpcmUoJy4vMThfUmF5cycpLmRlZmF1bHQsXG4gIHJlcXVpcmUoJy4vMTlfQ3V0b3V0VGVzdCcpLmRlZmF1bHQsXG5dXG4iLCJleHBvcnQgY29uc3QgbG9hZFZhbHVlID0gPFQgZXh0ZW5kcyBhbnk+KGtleTogc3RyaW5nLCBmYWxsYmFja1NldFZhbHVlPzogVCk6IFQgfCBudWxsID0+IHtcbiAgY29uc3QgZW5jb2RlZFZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KVxuICBpZiAoZW5jb2RlZFZhbHVlID09PSBudWxsKSB7XG4gICAgaWYgKGZhbGxiYWNrU2V0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc2F2ZVZhbHVlKGtleSwgZmFsbGJhY2tTZXRWYWx1ZSlcbiAgICAgIHJldHVybiBmYWxsYmFja1NldFZhbHVlXG4gICAgfSBlbHNlIHJldHVybiBudWxsXG4gIH1cbiAgcmV0dXJuIEpTT04ucGFyc2UoZW5jb2RlZFZhbHVlKVxufVxuZXhwb3J0IGNvbnN0IHNhdmVWYWx1ZSA9IDxUIGV4dGVuZHMgYW55PihrZXk6IHN0cmluZywgdmFsdWU6IFQpOiBUID0+IHtcbiAgY29uc3QgZW5jb2RlZFZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpXG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgZW5jb2RlZFZhbHVlKVxuICByZXR1cm4gdmFsdWVcbn1cbiIsImltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4vU2tldGNoJ1xuaW1wb3J0IHsgbG9hZFZhbHVlLCBzYXZlVmFsdWUgfSBmcm9tICcuL3V0aWxzL2xvY2FsU3RvcmFnZVV0aWxzJ1xuXG5leHBvcnQgY29uc3Qgc2F2ZU5ld1ByZXNldCA9IChza2V0Y2g6IFNrZXRjaCkgPT4ge1xuICBjb25zdCBzYXZlRGF0YSA9IE9iamVjdC5rZXlzKHNrZXRjaC52cykucmVkdWNlKFxuICAgIChhY2MsIGtleSkgPT4gKHsgLi4uYWNjLCBba2V5XTogc2tldGNoLnZzW2tleV0udmFsdWUgfSksXG4gICAge30gYXMgeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfVxuICApXG4gIGNvbnN0IHNrZXRjaE5hbWUgPSBza2V0Y2guY29uc3RydWN0b3IubmFtZVxuICBjb25zdCBza2V0Y2hTYXZlRGF0YSA9IGxvYWRWYWx1ZShza2V0Y2hOYW1lLCBbXSlcbiAgc2F2ZVZhbHVlKHNrZXRjaE5hbWUsIFsuLi5za2V0Y2hTYXZlRGF0YSwgc2F2ZURhdGFdKVxuICByZW5kZXJTa2V0Y2hTYXZlU2xvdHMoc2tldGNoKVxufVxuXG5jb25zdCBzYXZlU2xvdEFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2F2ZS1zbG90cycpXG5cbmV4cG9ydCBjb25zdCByZW5kZXJTa2V0Y2hTYXZlU2xvdHMgPSAoc2tldGNoOiBTa2V0Y2gsIG9uTG9hZD86ICgpID0+IHZvaWQpID0+IHtcbiAgc2F2ZVNsb3RBcmVhLmlubmVySFRNTCA9ICcnXG4gIGNvbnN0IHByZXNldHMgPSBsb2FkVmFsdWUoc2tldGNoLmNvbnN0cnVjdG9yLm5hbWUsIFtdKVxuICBwcmVzZXRzLmZvckVhY2goKHByZXNldCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgIGJ1dHRvbi50eXBlID0gJ2J1dHRvbidcbiAgICBidXR0b24uaW5uZXJUZXh0ID0gYCR7aW5kZXggKyAxfWBcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBvbkxvYWQ/LigpXG4gICAgICBza2V0Y2gucmVzZXQoKVxuICAgICAgY29uc29sZS5sb2coJ0xvYWRpbmc6JywgcHJlc2V0KVxuICAgICAgT2JqZWN0LmtleXMocHJlc2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgc2tldGNoLnZzW2tleV0uc2V0VmFsdWUocHJlc2V0W2tleV0sIHRydWUpXG4gICAgICB9KVxuICAgICAgc2tldGNoLmluaXREcmF3KClcbiAgICB9KVxuICAgIHNhdmVTbG90QXJlYS5hcHBlbmRDaGlsZChidXR0b24pXG4gIH0pXG59XG4iLCJpbXBvcnQgR0NhbnZhcyBmcm9tICcuL0dDYW52YXMnXG5pbXBvcnQgR0NvZGUgZnJvbSAnLi9kcml2ZXJzL0dDb2RlRHJpdmVyJ1xuaW1wb3J0IHsgU2tldGNoIH0gZnJvbSAnLi9Ta2V0Y2gnXG5cbmltcG9ydCBza2V0Y2hlcyBmcm9tICcuL3NrZXRjaGVzJ1xuaW1wb3J0IHsgbG9hZFZhbHVlLCBzYXZlVmFsdWUgfSBmcm9tICcuL3V0aWxzL2xvY2FsU3RvcmFnZVV0aWxzJ1xuaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgeyByZW5kZXJTa2V0Y2hTYXZlU2xvdHMsIHNhdmVOZXdQcmVzZXQgfSBmcm9tICcuL3NhdmVTbG90cydcbmltcG9ydCB7IHJlbmRlclNrZXRjaFNsaWRlcnMsIHVwZGF0ZVNsaWRlclZhbHVlcyB9IGZyb20gJy4vc2xpZGVycydcblxuY29uc3QgQ0FOVkFTX1dJRFRIID0gMTQwXG5jb25zdCBDQU5WQVNfSEVJR0hUID0gMTAwXG5jb25zdCBDQU5WQVNfQkFDS0dST1VORCA9ICcjZmZmJ1xuY29uc3QgVklSVFVBTF9TQ0FMRSA9IDhcbmNvbnN0IERSQVdfU1RFUFNfUEVSX0ZSQU1FID0gMTAwXG5cbmNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG5jb25zdCBjYW52YXNBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhcy1hcmVhJylcbmNvbnN0IHNrZXRjaEJ1dHRvbnNBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NrZXRjaC1idXR0b25zLWFyZWEnKVxuY29uc3Qgc2F2ZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzYXZlLWJ1dHRvbicpXG5jb25zdCByZXNldEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNldCcpXG5jb25zdCByYW5kb21pemVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmFuZG9taXplJylcbmNvbnN0IGdjb2RlVGV4dGFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2NvZGUnKVxuXG5sZXQgY3VycmVudFNrZXRjaEluZGV4ID0gbG9hZFZhbHVlKCdza2V0Y2hJbmRleCcsIDApXG5sZXQgQ3VycmVudFNrZXRjaDogU2tldGNoXG5sZXQgcmFmUmVmOiBudW1iZXIgPSAwXG5sZXQgYW5pbWF0ZUluY3JlbWVudCA9IDBcblxuY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgLy8gaW5pdGlhbGl6ZSBjYW52YXNcbiAgY2FudmFzLndpZHRoID0gQ0FOVkFTX1dJRFRIICogVklSVFVBTF9TQ0FMRSAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvXG4gIGNhbnZhcy5oZWlnaHQgPSBDQU5WQVNfSEVJR0hUICogVklSVFVBTF9TQ0FMRSAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvXG4gIGNhbnZhcy5zdHlsZS53aWR0aCA9IGAke0NBTlZBU19XSURUSCAqIFZJUlRVQUxfU0NBTEV9cHhgXG4gIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBgJHtDQU5WQVNfSEVJR0hUICogVklSVFVBTF9TQ0FMRX1weGBcbiAgaWYgKGNhbnZhc0FyZWEpIGNhbnZhc0FyZWEuYXBwZW5kQ2hpbGQoY2FudmFzKVxuICBlbHNlIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKVxuXG4gIC8vIGNyZWF0ZSBidXR0b25zIGZvciBhbGwgc2tldGNoZXNcbiAgc2tldGNoZXMuZm9yRWFjaCgoc2tldGNoLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXG4gICAgYnV0dG9uLnR5cGUgPSAnYnV0dG9uJ1xuICAgIGJ1dHRvbi5pbm5lclRleHQgPSBgJHtpbmRleCArIDF9ICR7c2tldGNoLm5hbWV9YFxuICAgIGlmIChjdXJyZW50U2tldGNoSW5kZXggPT09IGluZGV4KSBidXR0b24uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBjb25zdCBhbGxCdXR0b25zID0gc2tldGNoQnV0dG9uc0FyZWEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEJ1dHRvbnMubGVuZ3RoOyBpKyspIGFsbEJ1dHRvbnMuaXRlbShpKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICBjdXJyZW50U2tldGNoSW5kZXggPSBzYXZlVmFsdWUoJ3NrZXRjaEluZGV4JywgaW5kZXgpXG4gICAgICBpbml0U2tldGNoKHNrZXRjaClcbiAgICB9KVxuICAgIHNrZXRjaEJ1dHRvbnNBcmVhLmFwcGVuZENoaWxkKGJ1dHRvbilcbiAgfSlcblxuICAvLyBpbml0aWFsaXplIGZpcnN0IHNrZXRjaFxuICBpbml0U2tldGNoKHNrZXRjaGVzW2N1cnJlbnRTa2V0Y2hJbmRleF0pXG5cbiAgLy8gYmluZCBtYWluIGZ1bmN0aW9uIGJ1dHRvbnNcbiAgcmVzZXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaWYgKCFDdXJyZW50U2tldGNoKSByZXR1cm5cbiAgICBhbmltYXRlSW5jcmVtZW50ID0gMFxuICAgIEN1cnJlbnRTa2V0Y2gucmVzZXQoKVxuICAgIEN1cnJlbnRTa2V0Y2guaW5pdERyYXcoKVxuICB9KVxuICByYW5kb21pemVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaWYgKCFDdXJyZW50U2tldGNoKSByZXR1cm5cbiAgICBhbmltYXRlSW5jcmVtZW50ID0gMFxuICAgIE9iamVjdC5rZXlzKEN1cnJlbnRTa2V0Y2gudnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgQ3VycmVudFNrZXRjaC52c1trZXldLnJhbmRvbWl6ZSgpXG4gICAgfSlcbiAgICB1cGRhdGVTbGlkZXJWYWx1ZXMoQ3VycmVudFNrZXRjaClcbiAgICBDdXJyZW50U2tldGNoLnJlc2V0KClcbiAgICBDdXJyZW50U2tldGNoLmluaXREcmF3KClcbiAgfSlcbiAgc2F2ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBpZiAoIUN1cnJlbnRTa2V0Y2gpIHJldHVyblxuICAgIHNhdmVOZXdQcmVzZXQoQ3VycmVudFNrZXRjaClcbiAgfSlcbn1cblxuY29uc3QgX3NldEdDb2RlSFRNTCA9IChzdHI6IHN0cmluZykgPT4gKGdjb2RlVGV4dGFyZWEuaW5uZXJIVE1MID0gc3RyKVxuY29uc3Qgc2V0R0NvZGVIVE1MID0gdGhyb3R0bGUoX3NldEdDb2RlSFRNTCwgMTAwMClcblxubGV0IGdDb2RlU3RyaW5nID0gJydcbmNvbnN0IHNldEdDb2RlID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIGdDb2RlU3RyaW5nID0gc3RyXG4gIHNldEdDb2RlSFRNTChnQ29kZVN0cmluZylcbn1cbmNvbnN0IGFwcGVuZEdDb2RlID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIGdDb2RlU3RyaW5nICs9IHN0ciArICdcXG4nXG4gIHNldEdDb2RlSFRNTChnQ29kZVN0cmluZylcbn1cblxuY29uc3QgaW5pdFNrZXRjaCA9IChTa2V0Y2hDbGFzczogdHlwZW9mIFNrZXRjaCkgPT4ge1xuICBjb25zb2xlLmNsZWFyKClcbiAgY29uc29sZS5sb2coJ0xvYWRpbmcgbmV3IHNrZXRjaCcsIFNrZXRjaENsYXNzLm5hbWUpXG5cbiAgYW5pbWF0ZUluY3JlbWVudCA9IDBcbiAgaWYgKHJhZlJlZikge1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShyYWZSZWYpXG4gICAgcmFmUmVmID0gMFxuICB9XG5cbiAgc2V0R0NvZGUoU2tldGNoQ2xhc3MuZ2VuZXJhdGVHQ29kZSA/ICcnIDogJyhHQ29kZSBkaXNhYmxlZCBmb3IgdGhpcyBza2V0Y2gpJylcblxuICAvLyBmb3Igbm93IGp1c3QgcmVjcmVhdGUgdGhpbmdzIGVhY2ggaW5pdFNrZXRjaCwgd2lsbCBwcm9iYWJseSBoYXZlIG1lbW9yeSBpc3N1ZSBsYXRlclxuICBjb25zdCBkcml2ZXIgPSAhU2tldGNoQ2xhc3MuZ2VuZXJhdGVHQ29kZVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiBuZXcgR0NvZGUoe1xuICAgICAgICByZXNldDogKCkgPT4geyBzZXRHQ29kZSgnJykgfSwgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIHdyaXRlOiAobGluZTogc3RyaW5nKSA9PiB7IGFwcGVuZEdDb2RlKGxpbmUpIH0sIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgfSlcbiAgY29uc3QgZ0NhbnZhcyA9IG5ldyBHQ2FudmFzKHtcbiAgICBjYW52YXMsXG4gICAgZHJpdmVyLFxuICAgIHdpZHRoOiBDQU5WQVNfV0lEVEgsXG4gICAgaGVpZ2h0OiBDQU5WQVNfSEVJR0hULFxuICAgIHZpcnR1YWxTY2FsZTogVklSVFVBTF9TQ0FMRSxcbiAgICBiYWNrZ3JvdW5kOiBDQU5WQVNfQkFDS0dST1VORCxcbiAgfSlcbiAgQ3VycmVudFNrZXRjaCA9IG5ldyBTa2V0Y2hDbGFzcyh7IGN0eDogZ0NhbnZhcywgd2lkdGg6IENBTlZBU19XSURUSCwgaGVpZ2h0OiBDQU5WQVNfSEVJR0hUIH0pXG4gIEN1cnJlbnRTa2V0Y2guaW5pdCgpXG4gIEN1cnJlbnRTa2V0Y2guaW5pdERyYXcoKVxuXG4gIC8vIGNyZWF0ZSBzbGlkZXJzIGZvciBhbGwgc2tldGNoIHBhcmFtZXRlcnNcbiAgcmVuZGVyU2tldGNoU2xpZGVycyhDdXJyZW50U2tldGNoLCAoKSA9PiB7XG4gICAgYW5pbWF0ZUluY3JlbWVudCA9IDBcbiAgfSlcblxuICAvLyBwb3B1bGF0ZSBzYXZlIHNsb3RzIGZyb20gbG9jYWxTdG9yYWdlXG4gIHJlbmRlclNrZXRjaFNhdmVTbG90cyhDdXJyZW50U2tldGNoLCAoKSA9PiB7XG4gICAgYW5pbWF0ZUluY3JlbWVudCA9IDBcbiAgfSlcblxuICAvLyBiZWdpbiBhbmltYXRpb24gbG9vcFxuICBhbmltYXRlKClcbn1cblxuY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBEUkFXX1NURVBTX1BFUl9GUkFNRTsgaSsrKSB7XG4gICAgYW5pbWF0ZUluY3JlbWVudCsrXG4gICAgQ3VycmVudFNrZXRjaC5kcmF3KGFuaW1hdGVJbmNyZW1lbnQpXG4gIH1cbiAgcmFmUmVmID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKVxufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGluaXQpXG4iLCJpbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuL1NrZXRjaCdcbmltcG9ydCB7IGZsb2F0U3RyaW5nIH0gZnJvbSAnLi91dGlscy9udW1iZXJVdGlscydcblxuY29uc3Qgc2xpZGVyQXJlYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbGlkZXItYXJlYScpXG5cbmludGVyZmFjZSBTbGlkZXJET00ge1xuICBzbGlkZXI6IEhUTUxJbnB1dEVsZW1lbnRcbiAgbGFiZWxTcGFuOiBIVE1MU3BhbkVsZW1lbnRcbiAgdmFsdWVTcGFuOiBIVE1MRWxlbWVudFxufVxuXG5sZXQgc2xpZGVyczogeyBba2V5OiBzdHJpbmddOiBTbGlkZXJET00gfSA9IHt9XG5cbmV4cG9ydCBjb25zdCByZW5kZXJTa2V0Y2hTbGlkZXJzID0gKHNrZXRjaDogU2tldGNoLCBvblVwZGF0ZT86ICgpID0+IHZvaWQpID0+IHtcbiAgc2xpZGVycyA9IHt9XG4gIHNsaWRlckFyZWEuaW5uZXJIVE1MID0gJydcbiAgT2JqZWN0LmtleXMoc2tldGNoLnZzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZVJhbmdlID0gc2tldGNoLnZzW2tleV1cbiAgICBjb25zdCBzbGlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpXG4gICAgc2xpZGVyLnR5cGUgPSAncmFuZ2UnXG4gICAgc2xpZGVyLm1pbiA9IFN0cmluZyh2YWx1ZVJhbmdlLm1pbilcbiAgICBzbGlkZXIubWF4ID0gU3RyaW5nKHZhbHVlUmFuZ2UubWF4KVxuICAgIHNsaWRlci5zdGVwID0gU3RyaW5nKHZhbHVlUmFuZ2Uuc3RlcClcbiAgICBzbGlkZXIudmFsdWUgPSBTdHJpbmcodmFsdWVSYW5nZS52YWx1ZSlcbiAgICBzbGlkZXIuc2V0QXR0cmlidXRlKGBkYXRhLXNsaWRlcmAsIGtleSlcblxuICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKVxuICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJylcbiAgICBjb25zdCB2YWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NtYWxsJylcblxuICAgIGNvbnN0IGhhbmRsZVVwZGF0ZSA9IChuZXdWYWx1ZT86IG51bWJlcikgPT4ge1xuICAgICAgY29uc3QgdiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyBOdW1iZXIoc2xpZGVyLnZhbHVlKSA6IG5ld1ZhbHVlXG4gICAgICB2YWx1ZS5pbm5lclRleHQgPSBmbG9hdFN0cmluZyh2LCA2KVxuICAgICAgc2tldGNoLnZzW2tleV0udmFsdWUgPSB2XG4gICAgICBza2V0Y2gucmVzZXQoKVxuICAgICAgc2tldGNoLmluaXREcmF3KClcbiAgICAgIG9uVXBkYXRlPy4oKVxuICAgIH1cbiAgICBzbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4gaGFuZGxlVXBkYXRlKCkpXG4gICAgc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiBoYW5kbGVVcGRhdGUoKSlcblxuICAgIHZhbHVlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgY29uc3QgbmV3VmFsdWUgPSB3aW5kb3cucHJvbXB0KGAke2tleX06IGAsIFN0cmluZyhzbGlkZXIudmFsdWUpKVxuICAgICAgaWYgKG5ld1ZhbHVlID09PSBudWxsKSByZXR1cm5cbiAgICAgIGNvbnN0IHBhcnNlZFZhbHVlID0gcGFyc2VGbG9hdChuZXdWYWx1ZSlcbiAgICAgIGlmIChpc05hTihwYXJzZWRWYWx1ZSkpIHJldHVyblxuICAgICAgaGFuZGxlVXBkYXRlKHBhcnNlZFZhbHVlKVxuICAgIH0pXG5cbiAgICB2YWx1ZS5pbm5lclRleHQgPSBmbG9hdFN0cmluZyhOdW1iZXIoc2xpZGVyLnZhbHVlKSlcbiAgICBzcGFuLmlubmVyVGV4dCA9IGtleVxuICAgIHNwYW4uYXBwZW5kQ2hpbGQodmFsdWUpXG4gICAgbGFiZWwuYXBwZW5kQ2hpbGQoc3BhbilcbiAgICBsYWJlbC5hcHBlbmRDaGlsZChzbGlkZXIpXG4gICAgc2xpZGVyQXJlYS5hcHBlbmRDaGlsZChsYWJlbClcbiAgICB2YWx1ZVJhbmdlLmlucHV0RWxlbSA9IHNsaWRlclxuXG4gICAgc2xpZGVyc1trZXldID0geyBzbGlkZXIsIGxhYmVsU3Bhbjogc3BhbiwgdmFsdWVTcGFuOiB2YWx1ZSB9XG4gIH0pXG59XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVTbGlkZXJWYWx1ZXMgPSAoc2tldGNoOiBTa2V0Y2gpID0+IHtcbiAgT2JqZWN0LmtleXMoc2xpZGVycykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgeyBzbGlkZXIsIHZhbHVlU3BhbiB9ID0gc2xpZGVyc1trZXldXG4gICAgc2xpZGVyLnZhbHVlID0gU3RyaW5nKHNrZXRjaC52c1trZXldLnZhbHVlKVxuICAgIHZhbHVlU3Bhbi5pbm5lclRleHQgPSBmbG9hdFN0cmluZyhza2V0Y2gudnNba2V5XS52YWx1ZSlcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJQYXRoIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2RlZmluZVByb3BlcnR5IiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJjbG9uZSIsImNvcHkiLCJzdWJQYXRocyIsInRoaXMiLCJzbGljZSIsIm1vdmVUbyIsIngiLCJ5Iiwic3ViUGF0aCIsIlN1YlBhdGgiLCJwdXNoIiwiY3VycmVudCIsImVuc3VyZSIsImxlbmd0aCIsImNsb3NlIiwibGluZVRvIiwiX3RoaXMkY3VycmVudCIsImFwcGx5IiwiYXJndW1lbnRzIiwiYXJjIiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJyYWRpdXMiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJhbnRpQ2xvY2t3aXNlIiwiZWxsaXBzZSIsIl90aGlzJGN1cnJlbnQyIiwiX2xlbjIiLCJfa2V5MiIsImFYIiwiYVkiLCJ4UmFkaXVzIiwiYVN0YXJ0QW5nbGUiLCJhRW5kQW5nbGUiLCJwb2ludHMiLCJhcmNUb1BvaW50cyIsInNhbWVQb3MiLCJsYXN0UG9pbnQiLCJzdGFydCIsInF1YWRyYXRpY0N1cnZlVG8iLCJfdGhpcyRjdXJyZW50MyIsImJlemllckN1cnZlVG8iLCJfdGhpcyRjdXJyZW50NCIsInJlY3QiLCJ3IiwiaCIsInRvUG9seXMiLCJzY2FsZSIsImRpdmlzaW9ucyIsIm1hcCIsInRvUG9seSIsImZyb21Qb2x5cyIsInBvbHlnb25zIiwiaSIsImwiLCJjbGlwIiwiY2xpcFJlZ2lvbiIsImNsaXBUeXBlIiwic3VialBvbHlzIiwiY2xpcFBvbHlzIiwiY3ByIiwiQ2xpcHBlckxpYiIsIkFkZFBhdGhzIiwicHRTdWJqZWN0IiwicHRDbGlwIiwiY2xpcHBlZCIsIkV4ZWN1dGUiLCJwYXRoIiwidHJhbnNsYXRlIiwicmVzdWx0IiwiZm9yRWFjaCIsInB0cyIsImdldFBvaW50cyIsInAiLCJjbGlwVG9Cb3VuZHMiLCJib3VuZHMiLCJwMXUiLCJwMCIsIlBvaW50IiwicDB1IiwicDEiLCJ0b3AiLCJtIiwicmlnaHQiLCJzaW1wbGlmeSIsIndpbmRpbmdSdWxlIiwicG9seXMiLCJ0eXBlIiwicGZ0Tm9uWmVybyIsInBmdEV2ZW5PZGQiLCJTaW1wbGlmeVBvbHlnb25zIiwiaXMiLCJhY3Rpb25UeXBlIiwiYWN0aW9ucyIsIm9mZnNldCIsImRlbHRhIiwiY28iLCJqdE1pdGVyIiwiZXRDbG9zZWRQb2x5Z29uIiwic29sdXRpb24iLCJlcnIiLCJyYW1wIiwiZGVwdGgiLCJhZGRQYXRoIiwicGF0aDIiLCJjb25jYXQiLCJlc3RpbWF0ZU1heE9mZnNldCIsImdldEJvdW5kcyIsIndpZHRoIiwiTWF0aCIsImFicyIsImxlZnQiLCJoZWlnaHQiLCJib3R0b20iLCJsdCIsIm1pbiIsImd0IiwidGVzdCIsImZpbGxQYXRoIiwiZGlhbWV0ZXIiLCJvdmVybGFwIiwic2luIiwiUEkiLCJtYXgiLCJvZmZzZXRQYXRoIiwicmV2ZXJzZSIsImZpbmlzaCIsImNvbm5lY3RFbmRzIiwic3AxIiwic3AyIiwibmVhcmVzdCIsIm5lYXJlc3RQb2ludCIsInAyIiwicG9pbnQiLCJkaXN0YW5jZSIsInNoaWZ0Iiwic3BsaWNlIiwic3AiLCJzb3J0IiwiYSIsImIiLCJmaXJzdFBvaW50IiwiZDEiLCJkMiIsIl90b0NvbnN1bWFibGVBcnJheSIsInJlcyIsInVuZGVmaW5lZCIsInoiLCJpc05hTiIsInJvdW5kIiwiZXF1YWxzIiwiYWRkIiwibWlkcG9pbnQiLCJzdWJ0cmFjdCIsIm1hZ25pdHVkZSIsInNxcnQiLCJhbmdsZSIsImF0YW4yIiwibXVsdGlwbHkiLCJkaXZpZGUiLCJub3JtYWxpemUiLCJzZXQiLCJkb3QiLCJtb3ZlQWxvbmdBbmdsZSIsImNvcyIsIm1vdmVUb3dhcmRzIiwiYW5nbGVUbyIsInJvdGF0ZSIsImRpc3RhbmNlVG8iLCJwb3ciLCJhbmdsZUJldHdlZW4iLCJhY29zIiwidG9Vbml0IiwicG9pbnQxIiwicG9pbnQyIiwiU2tldGNoIiwiY29uZmlnIiwiY3R4IiwiZW5hYmxlQ3V0b3V0cyIsImNhbnZhc1dpZHRoIiwiY3ciLCJjYW52YXNIZWlnaHQiLCJjaCIsImN4IiwiY3kiLCJpbml0IiwiaW5pdERyYXciLCJkcmF3IiwiaW5jcmVtZW50IiwicmVzZXQiLCJmcm9tUG9pbnRzIiwiaXNDbG9zZWQiLCJnZXQiLCJ0bXAiLCJ0b1BhdGgiLCJhZGRBY3Rpb24iLCJhY3Rpb24iLCJwb2ludHNDYWNoZSIsImVuZCIsInYiLCJ2TGVuIiwiZ2V0QWN0aW9uTGVuZ3RoIiwieDAiLCJ5MCIsIl9hY3Rpb24kYXJncyIsIl9zbGljZWRUb0FycmF5IiwieVJhZGl1cyIsInhvIiwieW8iLCJnZXRMZW5ndGgiLCJsZW4iLCJmaXJzdCIsIngxIiwieTEiLCJybiIsInJwIiwicmQiLCJJbmZpbml0eSIsIm4iLCJfYWN0aW9uJGFyZ3MyIiwiZCIsInBvaW50QXQiLCJpbmRleCIsInNoaWZ0VG9OZWFyZXN0IiwiYW4iLCJfbGVuMyIsIl9rZXkzIiwiX2xlbjQiLCJfa2V5NCIsIl9sZW41IiwiX2tleTUiLCJpbCIsImNweDAiLCJjcHkwIiwiX2FjdGlvbiRhcmdzMyIsImFDUHgiLCJhQ1B5IiwibGFzdEUiLCJsYXN0QWN0aW9uIiwiaiIsInQiLCJ0eCIsImIyIiwidHkiLCJfYWN0aW9uJGFyZ3M0IiwiYUNQMXgiLCJhQ1AxeSIsImFDUDJ4IiwiYUNQMnkiLCJiMyIsIl9hY3Rpb24kYXJnczUiLCJkZWx0YUFuZ2xlIiwiY2xvc2VkIiwiWCIsIlkiLCJwb2x5IiwiY3VyU3RhcnQiLCJNT1ZFX1RPIiwiTElORV9UTyIsIlFVQURSQVRJQ19DVVJWRV9UTyIsIkJFWklFUl9DVVJWRV9UTyIsIkVMTElQU0UiLCJiMnAwIiwiayIsImIycDEiLCJiMnAyIiwicDMiLCJiM3AwIiwiYjNwMSIsImIzcDIiLCJiM3AzIiwibmF2aWdhdG9yX2FwcE5hbWUiLCJpc05vZGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3aW5kb3ciLCJzZWxmIiwibmF2IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidG9TdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImFwcE5hbWUiLCJkYml0cyIsImJyb3dzZXIiLCJpbmRleE9mIiwiY2hyb21lIiwiY2hyb21pdW0iLCJzYWZhcmkiLCJmaXJlZm94IiwiZmlyZWZveDE3IiwiZmlyZWZveDE1IiwiZmlyZWZveDMiLCJvcGVyYSIsIm1zaWUxMCIsIm1zaWU5IiwibXNpZTgiLCJtc2llNyIsIm1zaWUiLCJiaWdpbnRlZ2VyX3VzZWQiLCJCaWdJbnRlZ2VyIiwiYyIsImZyb21JbnQiLCJmcm9tTnVtYmVyIiwiZnJvbVN0cmluZyIsIm5iaSIsInByb3RvdHlwZSIsImFtIiwiYW0yIiwieGwiLCJ4aCIsImFtMSIsImZsb29yIiwiYW0zIiwiREIiLCJETSIsIkRWIiwiRlYiLCJGMSIsIkYyIiwicnIiLCJ2diIsIkJJX1JNIiwiQklfUkMiLCJjaGFyQ29kZUF0IiwiaW50MmNoYXIiLCJjaGFyQXQiLCJpbnRBdCIsInMiLCJuYnYiLCJyIiwibmJpdHMiLCJDbGFzc2ljIiwiTW9udGdvbWVyeSIsIm1wIiwiaW52RGlnaXQiLCJtcGwiLCJtcGgiLCJ1bSIsIm10MiIsIm9wX2FuZCIsIm9wX29yIiwib3BfeG9yIiwib3BfYW5kbm90IiwibGJpdCIsImNiaXQiLCJOdWxsRXhwIiwibk5vcCIsIkJhcnJldHQiLCJyMiIsInEzIiwiT05FIiwiZGxTaGlmdFRvIiwibXUiLCJjb252ZXJ0IiwiY0NvbnZlcnQiLCJjb21wYXJlVG8iLCJtb2QiLCJyZXZlcnQiLCJjUmV2ZXJ0IiwicmVkdWNlIiwiY1JlZHVjZSIsImRpdlJlbVRvIiwibXVsVG8iLCJjTXVsVG8iLCJtdWx0aXBseVRvIiwic3FyVG8iLCJjU3FyVG8iLCJzcXVhcmVUbyIsIm1vbnRDb252ZXJ0IiwiWkVSTyIsInN1YlRvIiwibW9udFJldmVydCIsImNvcHlUbyIsIm1vbnRSZWR1Y2UiLCJ1MCIsImNsYW1wIiwiZHJTaGlmdFRvIiwibW9udE11bFRvIiwibW9udFNxclRvIiwiYm5wQ29weVRvIiwiYm5wRnJvbUludCIsImJucEZyb21TdHJpbmciLCJmcm9tUmFkaXgiLCJtaSIsInNoIiwiYm5wQ2xhbXAiLCJibnBETFNoaWZ0VG8iLCJibnBEUlNoaWZ0VG8iLCJsU2hpZnRUbyIsImJucExTaGlmdFRvIiwiYnMiLCJjYnMiLCJibSIsImRzIiwiclNoaWZ0VG8iLCJibnBSU2hpZnRUbyIsImJucFN1YlRvIiwiYm5wTXVsdGlwbHlUbyIsImJucFNxdWFyZVRvIiwiYm5wRGl2UmVtVG8iLCJxIiwicG0iLCJwdCIsInRzIiwibXMiLCJuc2giLCJ5cyIsInl0IiwiZSIsInFkIiwiYm5wSW52RGlnaXQiLCJpc0V2ZW4iLCJibnBJc0V2ZW4iLCJleHAiLCJibnBFeHAiLCJnIiwiYm5Ub1N0cmluZyIsIm5lZ2F0ZSIsInRvUmFkaXgiLCJrbSIsImJuTmVnYXRlIiwiYm5BYnMiLCJibkNvbXBhcmVUbyIsImJpdExlbmd0aCIsImJuQml0TGVuZ3RoIiwiYm5Nb2QiLCJtb2RQb3dJbnQiLCJibk1vZFBvd0ludCIsIm5NdWxUbyIsIm5TcXJUbyIsImJhcnJldHRDb252ZXJ0IiwiYmFycmV0dFJldmVydCIsImJhcnJldHRSZWR1Y2UiLCJtdWx0aXBseVVwcGVyVG8iLCJtdWx0aXBseUxvd2VyVG8iLCJkQWRkT2Zmc2V0IiwiYmFycmV0dE11bFRvIiwiYmFycmV0dFNxclRvIiwibG93cHJpbWVzIiwibHBsaW0iLCJjaHVua1NpemUiLCJibnBDaHVua1NpemUiLCJMTjIiLCJsb2ciLCJibnBUb1JhZGl4Iiwic2lnbnVtIiwiY3MiLCJpbnRWYWx1ZSIsInN1YnN0ciIsImJucEZyb21SYWRpeCIsImRNdWx0aXBseSIsImJucEZyb21OdW1iZXIiLCJ0ZXN0Qml0IiwiYml0d2lzZVRvIiwic2hpZnRMZWZ0IiwiaXNQcm9iYWJsZVByaW1lIiwibmV4dEJ5dGVzIiwiYm5wQml0d2lzZVRvIiwib3AiLCJmIiwiY2hhbmdlQml0IiwiYm5wQ2hhbmdlQml0IiwiYWRkVG8iLCJibnBBZGRUbyIsImJucERNdWx0aXBseSIsImJucERBZGRPZmZzZXQiLCJibnBNdWx0aXBseUxvd2VyVG8iLCJibnBNdWx0aXBseVVwcGVyVG8iLCJtb2RJbnQiLCJibnBNb2RJbnQiLCJtaWxsZXJSYWJpbiIsImJucE1pbGxlclJhYmluIiwibjEiLCJnZXRMb3dlc3RTZXRCaXQiLCJzaGlmdFJpZ2h0IiwicmFuZG9tIiwibW9kUG93IiwiYm5DbG9uZSIsImJuSW50VmFsdWUiLCJieXRlVmFsdWUiLCJibkJ5dGVWYWx1ZSIsInNob3J0VmFsdWUiLCJiblNob3J0VmFsdWUiLCJiblNpZ051bSIsInRvQnl0ZUFycmF5IiwiYm5Ub0J5dGVBcnJheSIsImJuRXF1YWxzIiwiYm5NaW4iLCJibk1heCIsImFuZCIsImJuQW5kIiwib3IiLCJibk9yIiwieG9yIiwiYm5Yb3IiLCJhbmROb3QiLCJibkFuZE5vdCIsIm5vdCIsImJuTm90IiwiYm5TaGlmdExlZnQiLCJiblNoaWZ0UmlnaHQiLCJibkdldExvd2VzdFNldEJpdCIsImJpdENvdW50IiwiYm5CaXRDb3VudCIsImJuVGVzdEJpdCIsInNldEJpdCIsImJuU2V0Qml0IiwiY2xlYXJCaXQiLCJibkNsZWFyQml0IiwiZmxpcEJpdCIsImJuRmxpcEJpdCIsImJuQWRkIiwiYm5TdWJ0cmFjdCIsImJuTXVsdGlwbHkiLCJibkRpdmlkZSIsInJlbWFpbmRlciIsImJuUmVtYWluZGVyIiwiZGl2aWRlQW5kUmVtYWluZGVyIiwiYm5EaXZpZGVBbmRSZW1haW5kZXIiLCJibk1vZFBvdyIsImsxIiwiZzIiLCJpczEiLCJtb2RJbnZlcnNlIiwiYm5Nb2RJbnZlcnNlIiwiYWMiLCJ1IiwiYm5Qb3ciLCJnY2QiLCJibkdDRCIsImJuSXNQcm9iYWJsZVByaW1lIiwic3F1YXJlIiwiYm5TcXVhcmUiLCJJbnQxMjgiLCJJc05lZ2F0aXZlIiwib3BfRXF1YWxpdHkiLCJ2YWwxIiwidmFsMiIsIm9wX0luZXF1YWxpdHkiLCJvcF9HcmVhdGVyVGhhbiIsIm9wX0xlc3NUaGFuIiwib3BfQWRkaXRpb24iLCJsaHMiLCJyaHMiLCJvcF9TdWJ0cmFjdGlvbiIsIkludDEyOE11bCIsIm9wX0RpdmlzaW9uIiwiVG9Eb3VibGUiLCJwYXJzZUZsb2F0IiwiSW5oZXJpdCIsImNlIiwiY2UyIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRiYXNlQ3RvciIsInByb3BzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVmaW5lUHJvcGVydHkiLCJQYXRocyIsIkRvdWJsZVBvaW50IiwiRG91YmxlUG9pbnQwIiwiRG91YmxlUG9pbnQxIiwiZHAiLCJEb3VibGVQb2ludDIiLCJQb2x5Tm9kZSIsIm1fUGFyZW50IiwibV9wb2x5Z29uIiwibV9JbmRleCIsIm1fam9pbnR5cGUiLCJtX2VuZHR5cGUiLCJtX0NoaWxkcyIsIklzT3BlbiIsIklzSG9sZU5vZGUiLCJub2RlIiwiQ2hpbGRDb3VudCIsIkNvbnRvdXIiLCJBZGRDaGlsZCIsIkNoaWxkIiwiY250IiwiR2V0TmV4dCIsIkdldE5leHRTaWJsaW5nVXAiLCJDaGlsZHMiLCJQYXJlbnQiLCJJc0hvbGUiLCJQb2x5VHJlZSIsIm1fQWxsUG9seXMiLCJjYWxsIiwiQ2xlYXIiLCJpbGVuIiwiR2V0Rmlyc3QiLCJUb3RhbCIsIk1hdGhfQWJzX0ludDY0IiwiTWF0aF9BYnNfSW50MzIiLCJNYXRoX0Fic19Eb3VibGUiLCJNYXRoX01heF9JbnQzMl9JbnQzMiIsIkNhc3RfSW50MzIiLCJOdW1iZXIiLCJ0b0ludGVnZXIiLCJDYXN0X0ludDY0IiwiY2VpbCIsInBhcnNlSW50IiwiUEkyIiwiSW50UG9pbnQiLCJhbGVuIiwidXNlX3h5eiIsIloiLCJDbGlwcGVyIiwiUm91bmQiLCJJbnRQb2ludDAiLCJJbnRQb2ludDEiLCJJbnRQb2ludDFkcCIsIkludFBvaW50MiIsIkludFJlY3QiLCJpciIsIkludFJlY3QwIiwiSW50UmVjdDEiLCJJbnRSZWN0NCIsIkNsaXBUeXBlIiwiY3RJbnRlcnNlY3Rpb24iLCJjdFVuaW9uIiwiY3REaWZmZXJlbmNlIiwiY3RYb3IiLCJQb2x5VHlwZSIsIlBvbHlGaWxsVHlwZSIsInBmdFBvc2l0aXZlIiwicGZ0TmVnYXRpdmUiLCJKb2luVHlwZSIsImp0U3F1YXJlIiwianRSb3VuZCIsIkVuZFR5cGUiLCJldE9wZW5TcXVhcmUiLCJldE9wZW5Sb3VuZCIsImV0T3BlbkJ1dHQiLCJldENsb3NlZExpbmUiLCJFZGdlU2lkZSIsImVzTGVmdCIsImVzUmlnaHQiLCJEaXJlY3Rpb24iLCJkUmlnaHRUb0xlZnQiLCJkTGVmdFRvUmlnaHQiLCJURWRnZSIsIkJvdCIsIkN1cnIiLCJUb3AiLCJEZWx0YSIsIkR4IiwiUG9seVR5cCIsIlNpZGUiLCJXaW5kRGVsdGEiLCJXaW5kQ250IiwiV2luZENudDIiLCJPdXRJZHgiLCJOZXh0IiwiUHJldiIsIk5leHRJbkxNTCIsIk5leHRJbkFFTCIsIlByZXZJbkFFTCIsIk5leHRJblNFTCIsIlByZXZJblNFTCIsIkludGVyc2VjdE5vZGUiLCJFZGdlMSIsIkVkZ2UyIiwiUHQiLCJNeUludGVyc2VjdE5vZGVTb3J0IiwiQ29tcGFyZSIsIm5vZGUxIiwibm9kZTIiLCJMb2NhbE1pbmltYSIsIkxlZnRCb3VuZCIsIlJpZ2h0Qm91bmQiLCJTY2FuYmVhbSIsIk1heGltYSIsIk91dFJlYyIsIklkeCIsIkZpcnN0TGVmdCIsIlB0cyIsIkJvdHRvbVB0IiwiT3V0UHQiLCJKb2luIiwiT3V0UHQxIiwiT3V0UHQyIiwiT2ZmUHQiLCJDbGlwcGVyQmFzZSIsIm1fTWluaW1hTGlzdCIsIm1fQ3VycmVudExNIiwibV9lZGdlcyIsIm1fVXNlRnVsbFJhbmdlIiwibV9IYXNPcGVuUGF0aHMiLCJQcmVzZXJ2ZUNvbGxpbmVhciIsIm1fU2NhbmJlYW0iLCJtX1BvbHlPdXRzIiwibV9BY3RpdmVFZGdlcyIsImhvcml6b250YWwiLCJTa2lwIiwiVW5hc3NpZ25lZCIsInRvbGVyYW5jZSIsImxvUmFuZ2UiLCJoaVJhbmdlIiwibmVhcl96ZXJvIiwidmFsIiwiSXNIb3Jpem9udGFsIiwiUG9pbnRJc1ZlcnRleCIsInBwIiwicHAyIiwiUG9pbnRPbkxpbmVTZWdtZW50IiwibGluZVB0MSIsImxpbmVQdDIiLCJVc2VGdWxsUmFuZ2UiLCJQb2ludE9uUG9seWdvbiIsIlNsb3Blc0VxdWFsIiwiZTEiLCJlMiIsInB0MSIsInB0MiIsInB0MyIsInB0NCIsIlNsb3Blc0VxdWFsMyIsIlNsb3Blc0VxdWFsNCIsIlNsb3Blc0VxdWFsNSIsIkRpc3Bvc2VMb2NhbE1pbmltYUxpc3QiLCJqbGVuIiwidG1wTG0iLCJSYW5nZVRlc3QiLCJ1c2VGdWxsUmFuZ2UiLCJWYWx1ZSIsIkVycm9yIiwiSW5pdEVkZ2UiLCJlTmV4dCIsImVQcmV2IiwiSW5pdEVkZ2UyIiwicG9seVR5cGUiLCJTZXREeCIsIkZpbmROZXh0TG9jTWluIiwiRSIsIkUyIiwiUHJvY2Vzc0JvdW5kIiwiTGVmdEJvdW5kSXNGb3J3YXJkIiwiRVN0YXJ0IiwiSG9yeiIsIlJlc3VsdCIsImxvY01pbiIsIkluc2VydExvY2FsTWluaW1hIiwiUmV2ZXJzZUhvcml6b250YWwiLCJBZGRQYXRoIiwicGciLCJDbG9zZWQiLCJ1c2VfbGluZXMiLCJoaWdoSSIsImVkZ2VzIiwiSXNGbGF0IiwiJDEiLCJsZWZ0Qm91bmRJc0ZvcndhcmQiLCJlU3RhcnQiLCJlTG9vcFN0b3AiLCJQdDJJc0JldHdlZW5QdDFBbmRQdDMiLCJSZW1vdmVFZGdlIiwiRU1pbiIsInBwZyIsIm5ld0xtIiwiUG9wTG9jYWxNaW5pbWEiLCJSZXNldCIsImxtIiwiSW5zZXJ0U2NhbmJlYW0iLCJuZXdTYiIsInNiMiIsIm5ld1NiMSIsIlBvcFNjYW5iZWFtIiwiTG9jYWxNaW5pbWFQZW5kaW5nIiwiQ3JlYXRlT3V0UmVjIiwiRGlzcG9zZU91dFJlYyIsIm91dFJlYyIsIlVwZGF0ZUVkZ2VJbnRvQUVMIiwiQWVsUHJldiIsIkFlbE5leHQiLCJTd2FwUG9zaXRpb25zSW5BRUwiLCJlZGdlMSIsImVkZ2UyIiwibmV4dCIsInByZXYiLCJuZXh0MSIsInByZXYxIiwibmV4dDIiLCJwcmV2MiIsIkRlbGV0ZUZyb21BRUwiLCJJbml0T3B0aW9ucyIsIm1fQ2xpcFR5cGUiLCJtX01heGltYSIsIm1fU29ydGVkRWRnZXMiLCJtX0ludGVyc2VjdExpc3QiLCJtX0ludGVyc2VjdE5vZGVDb21wYXJlciIsIm1fRXhlY3V0ZUxvY2tlZCIsIm1fQ2xpcEZpbGxUeXBlIiwibV9TdWJqRmlsbFR5cGUiLCJtX0pvaW5zIiwibV9HaG9zdEpvaW5zIiwibV9Vc2luZ1BvbHlUcmVlIiwiUmV2ZXJzZVNvbHV0aW9uIiwiU3RyaWN0bHlTaW1wbGUiLCJaRmlsbEZ1bmN0aW9uIiwiaW9SZXZlcnNlU29sdXRpb24iLCJpb1N0cmljdGx5U2ltcGxlIiwiaW9QcmVzZXJ2ZUNvbGxpbmVhciIsIkRpc3Bvc2VBbGxQb2x5UHRzIiwiSW5zZXJ0TWF4aW1hIiwibmV3TWF4IiwiaXNwb2x5dHJlZSIsInN1YmpGaWxsVHlwZSIsImNsaXBGaWxsVHlwZSIsInN1Y2NlZWRlZCIsIkV4ZWN1dGVJbnRlcm5hbCIsIkJ1aWxkUmVzdWx0IiwicG9seXRyZWUiLCJCdWlsZFJlc3VsdDIiLCJGaXhIb2xlTGlua2FnZSIsIm9yZmwiLCJib3RZIiwidG9wWSIsIkluc2VydExvY2FsTWluaW1hSW50b0FFTCIsIlByb2Nlc3NIb3Jpem9udGFscyIsIlByb2Nlc3NJbnRlcnNlY3Rpb25zIiwiUHJvY2Vzc0VkZ2VzQXRUb3BPZlNjYW5iZWFtIiwiQXJlYSQxIiwiUmV2ZXJzZVBvbHlQdExpbmtzIiwiSm9pbkNvbW1vbkVkZ2VzIiwiRml4dXBPdXRQb2x5bGluZSIsIkZpeHVwT3V0UG9seWdvbiIsIkRvU2ltcGxlUG9seWdvbnMiLCJBZGRKb2luIiwiT3AxIiwiT3AyIiwiQWRkR2hvc3RKb2luIiwiT3AiLCJTZXRaIiwibGIiLCJyYiIsIkluc2VydEVkZ2VJbnRvQUVMIiwiU2V0V2luZGluZ0NvdW50IiwiSXNDb250cmlidXRpbmciLCJBZGRPdXRQdCIsIkFkZExvY2FsTWluUG9seSIsIkFkZEVkZ2VUb1NFTCIsIkhvcnpTZWdtZW50c092ZXJsYXAiLCJJbnRlcnNlY3RFZGdlcyIsImVkZ2UiLCJzdGFydEVkZ2UiLCJFMkluc2VydHNCZWZvcmVFMSIsIlRvcFgiLCJJc0V2ZW5PZGRGaWxsVHlwZSIsIklzRXZlbk9kZEFsdEZpbGxUeXBlIiwicGZ0IiwicGZ0MiIsIkluc2lkZSIsIlBvcEVkZ2VGcm9tU0VMIiwib2xkRSIsIkNvcHlBRUxUb1NFTCIsIlN3YXBQb3NpdGlvbnNJblNFTCIsIkFkZExvY2FsTWF4UG9seSIsIkFwcGVuZFBvbHlnb24iLCJwcmV2RSIsInhQcmV2IiwieEUiLCJvdXRQdCIsIm5ld09wIiwiU2V0SG9sZVN0YXRlIiwiVG9Gcm9udCIsIkdldExhc3RPdXRQdCIsIlN3YXBQb2ludHMiLCJzZWcxYSIsInNlZzFiIiwic2VnMmEiLCJzZWcyYiIsImVUbXAiLCJHZXREeCIsIkZpcnN0SXNCb3R0b21QdCIsImJ0bVB0MSIsImJ0bVB0MiIsImR4MXAiLCJkeDFuIiwiZHgycCIsImR4Mm4iLCJBcmVhIiwiR2V0Qm90dG9tUHQiLCJkdXBzIiwiR2V0TG93ZXJtb3N0UmVjIiwib3V0UmVjMSIsIm91dFJlYzIiLCJiUHQxIiwiYlB0MiIsIk91dFJlYzFSaWdodE9mT3V0UmVjMiIsIkdldE91dFJlYyIsImlkeCIsIm91dHJlYyIsImhvbGVTdGF0ZVJlYyIsInAxX2xmdCIsInAxX3J0IiwicDJfbGZ0IiwicDJfcnQiLCJPS0lkeCIsIk9ic29sZXRlSWR4IiwicHAxIiwiU3dhcFNpZGVzIiwic2lkZSIsIlN3YXBQb2x5SW5kZXhlcyIsIm91dElkeCIsImUxQ29udHJpYnV0aW5nIiwiZTJDb250cmlidXRpbmciLCJvbGRFMVdpbmRDbnQiLCJlMUZpbGxUeXBlIiwiZTJGaWxsVHlwZSIsImUxRmlsbFR5cGUyIiwiZTJGaWxsVHlwZTIiLCJlMVdjIiwiZTJXYyIsImUxV2MyIiwiZTJXYzIiLCJEZWxldGVGcm9tU0VMIiwiU2VsUHJldiIsIlNlbE5leHQiLCJob3J6RWRnZSIsIlByb2Nlc3NIb3Jpem9udGFsIiwiR2V0SG9yekRpcmVjdGlvbiIsIkhvcnpFZGdlIiwiJHZhciIsIkxlZnQiLCJSaWdodCIsIkRpciIsImRpciIsImhvcnpMZWZ0IiwiaG9yelJpZ2h0IiwiZUxhc3RIb3J6IiwiZU1heFBhaXIiLCJHZXRNYXhpbWFQYWlyIiwiY3Vyck1heCIsIm9wMSIsIklzTGFzdEhvcnoiLCJHZXROZXh0SW5BRUwiLCJlTmV4dEhvcnoiLCJvcDIiLCJJc01pbmltYSIsIklzTWF4aW1hIiwiSXNJbnRlcm1lZGlhdGUiLCJHZXRNYXhpbWFQYWlyRXgiLCJCdWlsZEludGVyc2VjdExpc3QiLCJGaXh1cEludGVyc2VjdGlvbk9yZGVyIiwiUHJvY2Vzc0ludGVyc2VjdExpc3QiLCIkJGUyIiwiaXNNb2RpZmllZCIsIkludGVyc2VjdFBvaW50IiwibmV3Tm9kZSIsIkVkZ2VzQWRqYWNlbnQiLCJpbm9kZSIsIkludGVyc2VjdE5vZGVTb3J0IiwiaU5vZGUiLCJSMSIsIlIzIiwiUjQiLCJSMiIsImN1cnJlbnRZIiwiaXAiLCJiMSIsIklzTWF4aW1hRWRnZSIsIkRvTWF4aW1hIiwiZVByZXYyIiwiUmV2ZXJzZVBhdGhzIiwiT3JpZW50YXRpb24iLCJQb2ludENvdW50IiwicG9seWciLCJwbiIsImxhc3RQUCIsInRtcFBQIiwibGFzdE9LIiwicHJlc2VydmVDb2wiLCJEdXBPdXRQdCIsIkluc2VydEFmdGVyIiwiR2V0T3ZlcmxhcCIsImExIiwiYTIiLCIkdmFsIiwiSm9pbkhvcnoiLCJvcDFiIiwib3AyYiIsIkRpc2NhcmRMZWZ0IiwiRGlyMSIsIkRpcjIiLCJKb2luUG9pbnRzIiwiaXNIb3Jpem9udGFsIiwicmV2ZXJzZTEiLCJEaXNjYXJkTGVmdFNpZGUiLCJSZXZlcnNlMSIsIlJldmVyc2UyIiwiR2V0Qm91bmRzIiwicGF0aHMiLCJHZXRCb3VuZHMyIiwib3BzIiwib3BTdGFydCIsIlBvaW50SW5Qb2x5Z29uIiwiaXBOZXh0Iiwic3RhcnRPcCIsInB0eCIsInB0eSIsInBvbHkweCIsInBvbHkweSIsInBvbHkxeCIsInBvbHkxeSIsIlBvbHkyQ29udGFpbnNQb2x5MSIsIm91dFB0MSIsIm91dFB0MiIsIkZpeHVwRmlyc3RMZWZ0czEiLCJPbGRPdXRSZWMiLCJOZXdPdXRSZWMiLCJmaXJzdExlZnQiLCJQYXJzZUZpcnN0TGVmdCIsIkZpeHVwRmlyc3RMZWZ0czIiLCJpbm5lck91dFJlYyIsIm91dGVyT3V0UmVjIiwiRml4dXBGaXJzdExlZnRzMyIsImpvaW4iLCJVcGRhdGVPdXRQdElkeHMiLCJvcDMiLCJvcDQiLCJvdXRyZWMyIiwiaXNBcnJheSIsIm9wRmlyc3QiLCJTaW1wbGlmeVBvbHlnb24iLCJmaWxsVHlwZSIsIkRpc3RhbmNlU3FyZCIsImR4IiwiZHkiLCJEaXN0YW5jZUZyb21MaW5lU3FyZCIsImxuMSIsImxuMiIsIkEiLCJCIiwiQyIsIlNsb3Blc05lYXJDb2xsaW5lYXIiLCJkaXN0U3FyZCIsIlBvaW50c0FyZUNsb3NlIiwiRXhjbHVkZU9wIiwiQ2xlYW5Qb2x5Z29uIiwib3V0UHRzIiwiQ2xlYW5Qb2x5Z29ucyIsIk1pbmtvd3NraSIsInBhdHRlcm4iLCJJc1N1bSIsIklzQ2xvc2VkIiwicG9seUNudCIsInBhdGhDbnQiLCJxdWFkcyIsInF1YWQiLCJNaW5rb3dza2lTdW0iLCJwYXRoX29yX3BhdGhzIiwicGF0aElzQ2xvc2VkIiwiVHJhbnNsYXRlUGF0aCIsIm91dFBhdGgiLCJNaW5rb3dza2lEaWZmIiwicG9seTEiLCJwb2x5MiIsIlBvbHlUcmVlVG9QYXRocyIsIkFkZFBvbHlOb2RlVG9QYXRocyIsIk5vZGVUeXBlIiwibnRBbnkiLCJwb2x5bm9kZSIsIm50IiwibWF0Y2giLCJudE9wZW4iLCJudENsb3NlZCIsIiRpMyIsIiR0MyIsIiRsMyIsIk9wZW5QYXRoc0Zyb21Qb2x5VHJlZSIsIkNsb3NlZFBhdGhzRnJvbVBvbHlUcmVlIiwiQ2xpcHBlck9mZnNldCIsIm1pdGVyTGltaXQiLCJhcmNUb2xlcmFuY2UiLCJkZWZfYXJjX3RvbGVyYW5jZSIsIm1fZGVzdFBvbHlzIiwibV9zcmNQb2x5IiwibV9kZXN0UG9seSIsIm1fbm9ybWFscyIsIm1fZGVsdGEiLCJtX3NpbkEiLCJtX3NpbiIsIm1fY29zIiwibV9taXRlckxpbSIsIm1fU3RlcHNQZXJSYWQiLCJtX2xvd2VzdCIsIm1fcG9seU5vZGVzIiwiTWl0ZXJMaW1pdCIsIkFyY1RvbGVyYW5jZSIsInR3b19waSIsImpvaW5UeXBlIiwiZW5kVHlwZSIsIkZpeE9yaWVudGF0aW9ucyIsIkdldFVuaXROb3JtYWwiLCJEb09mZnNldCIsInN0ZXBzIiwiT2Zmc2V0UG9pbnQiLCJEb1NxdWFyZSIsIkRvUm91bmQiLCJYMiIsImNscHIiLCJvdXRlciIsIm91dGVyTm9kZSIsImpvaW50eXBlIiwiRG9NaXRlciIsInRhbiIsIm1lc3NhZ2UiLCJhbGVydCIsIkpTIiwiQXJlYU9mUG9seWdvbiIsIkFyZWFPZlBvbHlnb25zIiwiYXJlYSIsIkJvdW5kc09mUGF0aCIsIkJvdW5kc09mUGF0aHMiLCJDbGVhbiIsInBvbHlnb24iLCJpc1BvbHlnb25zIiwiQ2xvbmUiLCJrX2xlbmd0aCIsInJlc3VsdHMiLCJwbGVuIiwiTGlnaHRlbiIsIlAiLCJyZW0iLCJhZGRsYXN0IiwiYnhheCIsImJ5YXkiLCJheCIsImF5IiwidG9sZXJhbmNlU3EiLCJwb3AiLCJQZXJpbWV0ZXJPZlBhdGgiLCJwZXJpbWV0ZXIiLCJwMXgiLCJwMXkiLCJwMngiLCJwMnkiLCJQZXJpbWV0ZXJPZlBhdGhzIiwiU2NhbGVEb3duUGF0aCIsIlNjYWxlRG93blBhdGhzIiwiU2NhbGVVcFBhdGgiLCJTY2FsZVVwUGF0aHMiLCJFeFBvbHlnb25zIiwiRXhQb2x5Z29uIiwiaG9sZXMiLCJBZGRPdXRlclBvbHlOb2RlVG9FeFBvbHlnb25zIiwiZXhwb2x5Z29ucyIsImVwIiwiY2hpbGRzMiIsImNoaWxkcyIsIkV4UG9seWdvbnNUb1BhdGhzIiwiUG9seVRyZWVUb0V4UG9seWdvbnMiLCJJbml0aWFsU2tldGNoIiwiX1NrZXRjaCIsIl9pbmhlcml0cyIsIl9zdXBlciIsIl9jcmVhdGVTdXBlciIsInBvcyIsInZzIiwieERyaWZ0IiwiUmFuZ2UiLCJuYW1lIiwiaW5pdGlhbFZhbHVlIiwieURyaWZ0IiwiY2lyY2xlTWluUmFkaXVzIiwiY2lyY2xlTWF4UmFkaXVzIiwiY2lyY2xlRHJpZnQiLCJjaXJjbGVTcGF3blJhdGUiLCJzdGVwIiwiY2lyY2xlU3Bhd25DaGFuY2UiLCJzZXRWYWx1ZSIsIndyYXAiLCJzdHJva2VTdHlsZSIsInJhbmRJbnRSYW5nZSIsImJlZ2luUGF0aCIsInJhbmRGbG9hdCIsInN0cm9rZSIsImNsb3NlUGF0aCIsInByZXZGaWxsU3R5bGUiLCJmaWxsU3R5bGUiLCJwcmV2U3Ryb2tlU3R5bGUiLCJjaXJjbGUiLCJyYW5kSW50IiwiZmlsbCIsIkdDb2RlVGVzdCIsImRyaXZlciIsImNvbW1lbnQiLCJzdHJva2VSZWN0IiwiZmlsbFJlY3QiLCJBcmNzIiwiX3RoaXMiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX3RoaXMyIiwicHJlY2lzaW9uIiwic3BlZWRQb3cxIiwicmFkaXVzTWluIiwicmFkaXVzTWF4IiwicmFkaXVzVGhldGFNdWx0aSIsIm9zYyIsIk9zYyIsInNwZWVkIiwiY29uc29sZSIsImNvdW50Iiwic3RhcnRQb2ludCIsImNpcmNsZVBvaW50cyIsIkJlemllclNjcmliYmxlcyIsInN0b3BBZnRlciIsImRyaWZ0TWluIiwiZHJpZnRNYXgiLCJtaWRwb2ludERyaWZ0IiwibGFzdEFuY2hvclBvaW50IiwiZW5kUG9pbnQiLCJkaXN0IiwibWlkUG9pbnQiLCJTcGlyYWxpbmciLCJzY2FsZURvd24iLCJzcGVlZFVwIiwiZGlzYWJsZVJhbmRvbWl6ZSIsIm9zYzFzcGVlZCIsIm9zYzFkaXN0Iiwib3NjMXBoYXNlIiwib3NjMnNwZWVkIiwib3NjMmRpc3QiLCJvc2MycGhhc2UiLCJvc2Mzc3BlZWQiLCJvc2MzZGlzdCIsIm9zYzNwaGFzZSIsIm9zYzEiLCJwaGFzZSIsIm9zYzIiLCJvc2MzIiwibG9vcCIsIlNwaXJhbGluZ1Byb3BvcnRpb25hbCIsIm9zY1NwZWVkIiwib3NjU3BlZWRNdWx0aSIsIm9zY0Rpc3QiLCJDb25jZW50cmljQ2lyY2xlcyIsInNocmlua0Ftb3VudCIsInNocmlua0RpdiIsInNocmlua0ZhbGxvZmYiLCJzaHJpbmtWYXJpYW5jZSIsInNocmlua1Zhck9zYyIsInJvdGF0ZVNwZWVkIiwidGhldGEiLCJyZWFsSW5jcmVtZW50IiwibmV4dFJhZGl1cyIsInJhZERpZmYiLCJCdWJibGVzSW5DaXJjbGUiLCJzZWVkIiwiYXRMZWFzdCIsIm1heFJhZGl1cyIsIm1pblJhZGl1cyIsInNlZWRSYW5kb20iLCJyZW9yZGVyZWQiLCJyZWRyYXduQ291bnQiLCJjaXJjbGVzIiwicG9zaXRpb24iLCJjZW50ZXIiLCJuZXdSYWRpdXMiLCJhbGxvd2VkIiwiZGlzdFRvRWRnZSIsIl9zdGVwIiwicmFkaXVzZXMiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsImRvbmUiLCJHcmlkV2F2ZXMiLCJjb2xzIiwicm93cyIsImdhcCIsIm91dGVyR2FwIiwiZWZmZWN0aXZlV2lkdGgiLCJlZmZlY3RpdmVIZWlnaHQiLCJib3hXaWR0aCIsIlBlcmxpbkdyaWQiLCJzaGFwZSIsInNpemUiLCJwZXJsaW5EaXYiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInNlZWROb2lzZSIsImRyYXdDb3VudCIsIm1heERyYXdDb3VudCIsImNvbFdpZHRoIiwicm93SGVpZ2h0IiwicmVhbENvdW50IiwieFBvcyIsInlQb3MiLCJwZXJsaW4yIiwiUGVybGluTGluZXMiLCJwZXJsaW5EaXZYIiwicGVybGluRGl2WSIsInBlcmxpbk9mZnNldFgiLCJwZXJsaW5PZmZzZXRZIiwiZHJhd09mZnNldFN0YXJ0IiwiZHJhd09mZnNldEVuZCIsInNwYWNlWCIsInNwYWNlWSIsImFkanVzdGVkU2l6ZSIsIlRyZWUiLCJpbml0QnJhbmNoTGVuZ3RoIiwiYnJhbmNoTGVuZ3RoRmFsbG9mZiIsInNwbGl0UHJvYmFiaWxpdHkiLCJwcnVuZVByb2JhYmlsaXR5IiwiYmxvb21Qcm9iYWJpbGl0eSIsImJsb29tU2l6ZSIsInNwbGl0QW5nbGVSYW5nZSIsInNwbGl0QW5nbGVCcmFuY2hMZXZlbE11bHRpIiwic3BsaXRBbmdsZU1pblBlcmNlbnQiLCJjaGFvc0ZhY3RvciIsInNwbGl0Q291bnQiLCJtYXhCcmFuY2hMZXZlbHMiLCJicmFuY2hMZXZlbCIsImRyYXduQ3VycmVudFN0ZW1zIiwiY3VycmVudFN0ZW1zIiwibmV4dFN0ZW1zIiwiZHJhd0JyYW5jaCIsInN0ZW0iLCJzcGxpdEludG8iLCJhZGp1c3RlZFNwbGl0QW5nbGVSYW5nZSIsInNwbGl0QW5nbGVTcGFuIiwicmFuZEZsb2F0UmFuZ2UiLCJzcGxpdFNsaWNlIiwiZHJhd0Jsb29tIiwiTW9uZGF5TWF6ZSIsImdyaWRTaXplIiwicmFkaWFsRGl2cyIsIm9mZnNldEFuZyIsInhJIiwieUkiLCJvZmZzZXRBbmdsZSIsInNlZ21lbnRWYWx1ZSIsInNlZ0luZGV4Iiwibm9ybWFsaXplUmFkaWFuIiwiQ2hhc2VyIiwiZG93bnNjYWxlRHJhd2luZyIsImFuZ2xlRGlmZiIsIm1pbkFuZ2xlRGlmZiIsImFuZ2xlQ2hhbmdlU3BlZWQiLCJlYXNlVG9BbmdsZSIsImNlbnRlckZvcmNlIiwidHJhdmVsIiwiY2VudGVyRGlzdFJhdGlvIiwicG9pbnRBbmdsZSIsImFpbUFuZ2xlIiwiYW5nbGVDaGFuZ2VDb3VudGRvd24iLCJkZWdUb1JhZCIsInJhbmRBbmdsZSIsImNlbnRlckRpc3QiLCJLYWxlaWRvIiwiYW5nbGVPZmZzZXQiLCJzZWdtZW50cyIsIm1heEhlaWdodERpZmYiLCJzZWdBbmdsZSIsImxlbmd0aDEiLCJsZW5ndGgyIiwiS2FsZWlkb0N1cnZlIiwiY3VydmVSYW5nZSIsIm1heEN1cnZlU3RyZW5ndGgiLCJjdXJ2ZUFuZ2xlIiwiY3VydmVMZW5ndGgiLCJQZXJwZW5kaWN1bGFyaXR5Iiwic2VnbWVudEFuZ2xlV29uayIsInJhZGlhbFNwYXduUG9pbnRzIiwib2Zmc2V0UGVycEFuZ2xlIiwib2Zmc2V0UGVycEFuZ2xlV29uayIsImRyYXdMaW5lRnJvbVBvaW50QXRBbmdsZSIsIm9yaWdpbmFsTGluZSIsIl90aGlzJGN0eCIsImxpbmVBbmdsZSIsInN0YXJ0UHRBbmdsZUZyb21DZW50ZXIiLCJjcCIsInNhbWVGbG9hdCIsInRlc3RMaW5lIiwiaW50ZXJzZWN0aW9uUG9pbnRBbmRMaW5lcyIsImdldExpbmVJbnRlcnNlY3Rpb25Qb2ludHMiLCJkcmF3bkxpbmVzIiwiX3JlZiIsIl9yZWYyIiwiZmlsdGVyIiwiX3JlZjMiLCJfcmVmNSIsIl9yZWY2IiwiX3JlZjkiLCJfcmVmMTAiLCJfcmVmMTEiLCJfcmVmMTMiLCJfcmVmMTQiLCJfaW50ZXJzZWN0aW9uUG9pbnRBbmQiLCJjbG9zZXN0SW50ZXJzZWN0aW9uUG9pbnQiLCJjbG9zZXN0SW50ZXJzZWN0aW9uTGluZSIsIm5leHRTcGF3blBvaW50cyIsInN0cm9rZUxpbmUiLCJzZWdtZW50QW5nbGVzIiwic2VnbWVudHNMaW5lcyIsIm1pZFB0IiwiYW5nbGVXb25rQW1vdW50IiwibGluZSIsImNsb3NpbmdMaW5lIiwic3RhcnRQb2ludHMiLCJsaW5lVG9Qb2ludHMiLCJzcGF3blBvaW50cyIsIl9zdGVwJHZhbHVlIiwiUmF5cyIsImxpbmVzIiwibGluZUFuZ2xlV29uayIsInJlZnJhY3Rpb25JbmRleCIsInJlZmxlY3RpdmVDaXJjbGVzIiwiZHJhd2luZ1BvaW50cyIsInJhZCIsImNpcmNsZU92ZXJsYXBzQ2lyY2xlcyIsInN0YXJ0aW5nSW5zaWRlQ2lyY2xlIiwicG9pbnRJbkNpcmNsZXMiLCJkcmF3TGluZXMiLCJfbG9vcCIsIl9zdGVwMiIsImluc2lkZVNoYXBlIiwiaW50ZXJzZWN0aW9uUG9pbnRzIiwiX2l0ZXJhdG9yMiIsIl9zdGVwMiR2YWx1ZSIsImxpbmVBbmdsZUNpcmNsZVBvc0RpZmYiLCJfc3RlcDMiLCJfaXRlcmF0b3IzIiwiZ2V0UG9pbnRzV2hlcmVMaW5lSW50ZXJzZWN0c0NpcmNsZSIsImludGVyc2VjdGlvblBvaW50IiwiX3RoaXMyJGN0eCIsImNsb3Nlc3RQdCIsImdldENsb3Nlc3RCdXROb3RTYW1lUG9pbnQiLCJmaW5kIiwiX3JlZjQiLCJjaXJjbGVQb3MiLCJpbnRlcnNlY3Rpb25BbmdsZSIsImludGVyc2VjdGlvbkFuZ2xlRGlmZiIsInNtYWxsZXN0QW5nbGVEaWZmIiwicmVmcmFjdGlvbkFuZ2xlIiwiYXNpbiIsIkN1dG91dFRlc3QiLCJfdGhpcyRjdHgkcGF0aCIsIl90aGlzJGN0eCRwYXRoMiIsIl90aGlzJGN0eCRwYXRoMyIsIl90aGlzJGN0eCRwYXRoNCIsIl90aGlzJGN0eCRwYXRoNSIsIl90aGlzJGN0eCRwYXRoNiIsIl90aGlzJGN0eCRwYXRoNyIsIl90aGlzJGN0eCRwYXRoOCIsIl90aGlzJGN0eCRwYXRoOSIsImRlYnVnIiwic2F2ZSIsImN1dG91dCIsInJlc3RvcmUiLCJvcHRpb25zIiwic3BlZWRGdW5jIiwicmFkaXVzRnVuYyIsIm9mZnNldFBoYXNlIiwicHJvY2VzcyIsImNvdW50ZXIiLCJfdmFsdWUiLCJfZGlzYWJsZVJhbmRvbWl6ZSIsInVwZGF0ZUlucHV0IiwiaW5wdXRFbGVtIiwiU3RyaW5nIiwicmFuZG9taXplIiwicGllY2VzIiwiZ2V0TGluZUludGVyc2VjdGlvblBvaW50IiwibGluZTEiLCJsaW5lMiIsIl9saW5lMyIsImwxcDEiLCJsMXAyIiwiX2xpbmU0IiwibDJwMSIsImwycDIiLCJkZW5vbWluYXRvciIsInVhIiwidWIiLCJwb2ludHNBbmRMaW5lcyIsIl9pIiwiX2xpbmVzIiwiZ2V0RGlzdGFuY2VzVG9Qb2ludCIsIngyIiwiZHYiLCJkciIsIkQiLCJkaSIsInNpZ24iLCJwb2ludEluQ2lyY2xlIiwiX2kyIiwiX2NpcmNsZXMiLCJfY2lyY2xlcyRfaSIsImNpcmNsZU92ZXJsYXBzQ2lyY2xlIiwiX3JlZjciLCJjaXJjbGUxUG9zIiwiY2lyY2xlMVJhZCIsIl9yZWY4IiwiY2lyY2xlMlBvcyIsImNpcmNsZTJSYWQiLCJjaXJjbGVSYWQiLCJfbGVuNiIsIl9rZXk2IiwiX2kzIiwiX2NpcmNsZXMyIiwiX2NpcmNsZXMyJF9pIiwiR3JhZCIsImdyYWQzIiwicGVybSIsImdyYWRQIiwiZmFkZSIsImxlcnAiLCJuMDAiLCJkb3QyIiwibjAxIiwibjEwIiwibjExIiwicmFuZ2UiLCJmbG9hdFN0cmluZyIsIm51bWJlciIsImRlY2ltYWxzIiwiZGVjaW1hbHNDb3VudCIsImNvdW50RGVjaW1hbHMiLCJtb3N0IiwidG9GaXhlZCIsInJhZGlhbiIsInRvdGFsU2VnbWVudHMiLCJkZWciLCJFUFNJTE9OIiwiYVN0YXJ0IiwiYUVuZCIsInBvaW50c1RvQXJjIiwiZXBzaWxvbiIsImFic0EiLCJhYnNCIiwiZGlmZiIsIk1JTl9WQUxVRSIsImNvbnZlcnRQb2ludHNUb0VkZ2VzIiwibV93IiwibV96IiwibWFzayIsImludGVnZXIiLCJGVU5DX0VSUk9SX1RFWFQiLCJIQVNIX1VOREVGSU5FRCIsIlBMQUNFSE9MREVSIiwiV1JBUF9DVVJSWV9SSUdIVF9GTEFHIiwiV1JBUF9QQVJUSUFMX0ZMQUciLCJXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyIsIldSQVBfQVJZX0ZMQUciLCJXUkFQX1JFQVJHX0ZMQUciLCJJTkZJTklUWSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJOQU4iLCJNQVhfQVJSQVlfTEVOR1RIIiwid3JhcEZsYWdzIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYm9vbFRhZyIsImRhdGVUYWciLCJlcnJvclRhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJtYXBUYWciLCJudW1iZXJUYWciLCJvYmplY3RUYWciLCJwcm9taXNlVGFnIiwicmVnZXhwVGFnIiwic2V0VGFnIiwic3RyaW5nVGFnIiwic3ltYm9sVGFnIiwid2Vha01hcFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsIlJlZ0V4cCIsInNvdXJjZSIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbVN0YXJ0IiwicmVXaGl0ZXNwYWNlIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVGb3JiaWRkZW5JZGVudGlmaWVyQ2hhcnMiLCJyZUVzY2FwZUNoYXIiLCJyZUVzVGVtcGxhdGUiLCJyZUZsYWdzIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzSG9zdEN0b3IiLCJyZUlzT2N0YWwiLCJyZUlzVWludCIsInJlTGF0aW4iLCJyZU5vTWF0Y2giLCJyZVVuZXNjYXBlZFN0cmluZyIsInJzQXN0cmFsUmFuZ2UiLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzRGluZ2JhdFJhbmdlIiwicnNMb3dlclJhbmdlIiwicnNVcHBlclJhbmdlIiwicnNWYXJSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0Fwb3MiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc1pXSiIsInJzTWlzY0xvd2VyIiwicnNNaXNjVXBwZXIiLCJyc09wdENvbnRyTG93ZXIiLCJyc09wdENvbnRyVXBwZXIiLCJyZU9wdE1vZCIsInJzT3B0VmFyIiwicnNTZXEiLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsImZyZWVQYXJzZUZsb2F0IiwiZnJlZVBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwicm9vdCIsIkZ1bmN0aW9uIiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiZnJlZVByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJyYXlBZ2dyZWdhdG9yIiwiYXJyYXkiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiYXJyYXlQdXNoIiwidmFsdWVzIiwiYXJyYXlSZWR1Y2UiLCJpbml0QWNjdW0iLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb21lIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUZpbmRLZXkiLCJjb2xsZWN0aW9uIiwiZWFjaEZ1bmMiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsIm9iamVjdCIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImJhc2VUaW1lcyIsImJhc2VUcmltIiwic3RyaW5nIiwidHJpbW1lZEVuZEluZGV4IiwicmVwbGFjZSIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJjYWNoZUhhcyIsImNhY2hlIiwiaGFzIiwiY2hhcnNTdGFydEluZGV4Iiwic3RyU3ltYm9scyIsImNoclN5bWJvbHMiLCJjaGFyc0VuZEluZGV4IiwiZGVidXJyTGV0dGVyIiwiZXNjYXBlSHRtbENoYXIiLCJlc2NhcGVTdHJpbmdDaGFyIiwiY2hyIiwiaGFzVW5pY29kZSIsIm1hcFRvQXJyYXkiLCJvdmVyQXJnIiwidHJhbnNmb3JtIiwiYXJnIiwicmVwbGFjZUhvbGRlcnMiLCJwbGFjZWhvbGRlciIsInNldFRvQXJyYXkiLCJzZXRUb1BhaXJzIiwic3RyaW5nU2l6ZSIsInVuaWNvZGVTaXplIiwibGFzdEluZGV4Iiwic3RyaW5nVG9BcnJheSIsInVuaWNvZGVUb0FycmF5IiwiYXNjaWlUb0FycmF5Iiwic3BsaXQiLCJ1bmVzY2FwZUh0bWxDaGFyIiwiXyIsInJ1bkluQ29udGV4dCIsImNvbnRleHQiLCJ1aWQiLCJkZWZhdWx0cyIsInBpY2siLCJEYXRlIiwiVHlwZUVycm9yIiwiYXJyYXlQcm90byIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiY29yZUpzRGF0YSIsImZ1bmNUb1N0cmluZyIsImhhc093blByb3BlcnR5IiwiaWRDb3VudGVyIiwibWFza1NyY0tleSIsImV4ZWMiLCJrZXlzIiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsIkJ1ZmZlciIsIlN5bWJvbCIsIlVpbnQ4QXJyYXkiLCJhbGxvY1Vuc2FmZSIsImdldFByb3RvdHlwZSIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0Q3JlYXRlIiwiY3JlYXRlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ltSXRlcmF0b3IiLCJpdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJub3ciLCJjdHhTZXRUaW1lb3V0Iiwic2V0VGltZW91dCIsIm5hdGl2ZUNlaWwiLCJuYXRpdmVGbG9vciIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJuYXRpdmVJc0J1ZmZlciIsImlzQnVmZmVyIiwibmF0aXZlSXNGaW5pdGUiLCJpc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwiRGF0YVZpZXciLCJNYXAiLCJQcm9taXNlIiwiU2V0IiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJwcm90byIsImlzT2JqZWN0IiwiYmFzZUxvZGFzaCIsImNoYWluQWxsIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJTdGFjayIsImRhdGEiLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpc0luZGV4IiwiYXJyYXlTYW1wbGUiLCJiYXNlUmFuZG9tIiwiYXJyYXlTYW1wbGVTaXplIiwic2h1ZmZsZVNlbGYiLCJjb3B5QXJyYXkiLCJiYXNlQ2xhbXAiLCJhcnJheVNodWZmbGUiLCJhc3NpZ25NZXJnZVZhbHVlIiwiZXEiLCJiYXNlQXNzaWduVmFsdWUiLCJhc3NpZ25WYWx1ZSIsIm9ialZhbHVlIiwiYXNzb2NJbmRleE9mIiwiYmFzZUFnZ3JlZ2F0b3IiLCJiYXNlRWFjaCIsImJhc2VBc3NpZ24iLCJjb3B5T2JqZWN0IiwiYmFzZUF0Iiwic2tpcCIsImxvd2VyIiwidXBwZXIiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwiaW5pdENsb25lQXJyYXkiLCJjb25zdHJ1Y3RvciIsImlucHV0IiwidGFnIiwiZ2V0VGFnIiwiaXNGdW5jIiwiY2xvbmVCdWZmZXIiLCJpbml0Q2xvbmVPYmplY3QiLCJjb3B5U3ltYm9sc0luIiwiZ2V0U3ltYm9sc0luIiwiYmFzZUFzc2lnbkluIiwia2V5c0luIiwiY29weVN5bWJvbHMiLCJnZXRTeW1ib2xzIiwiaW5pdENsb25lQnlUYWciLCJDdG9yIiwiY2xvbmVBcnJheUJ1ZmZlciIsImNsb25lRGF0YVZpZXciLCJkYXRhVmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiY2xvbmVUeXBlZEFycmF5IiwiY2xvbmVSZWdFeHAiLCJyZWdleHAiLCJjbG9uZVN5bWJvbCIsInN5bWJvbCIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsImdldEFsbEtleXNJbiIsImdldEFsbEtleXMiLCJiYXNlQ29uZm9ybXNUbyIsImJhc2VEZWxheSIsIndhaXQiLCJiYXNlRGlmZmVyZW5jZSIsImluY2x1ZGVzIiwiaXNDb21tb24iLCJ2YWx1ZXNMZW5ndGgiLCJjb21wdXRlZCIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJsaXN0Q2FjaGVDbGVhciIsImxpc3RDYWNoZURlbGV0ZSIsImxpc3RDYWNoZUdldCIsImxpc3RDYWNoZUhhcyIsImxpc3RDYWNoZVNldCIsIm1hcENhY2hlQ2xlYXIiLCJtYXBDYWNoZURlbGV0ZSIsImdldE1hcERhdGEiLCJtYXBDYWNoZUdldCIsIm1hcENhY2hlSGFzIiwibWFwQ2FjaGVTZXQiLCJzZXRDYWNoZUFkZCIsInNldENhY2hlSGFzIiwic3RhY2tDbGVhciIsInN0YWNrRGVsZXRlIiwic3RhY2tHZXQiLCJzdGFja0hhcyIsInN0YWNrU2V0IiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiaXNTdHJpY3QiLCJpc0ZsYXR0ZW5hYmxlIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlRm9yUmlnaHQiLCJiYXNlRnVuY3Rpb25zIiwiaXNGdW5jdGlvbiIsImJhc2VHZXQiLCJjYXN0UGF0aCIsInRvS2V5IiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYmFzZUdldFRhZyIsImdldFJhd1RhZyIsImlzT3duIiwidW5tYXNrZWQiLCJvYmplY3RUb1N0cmluZyIsImJhc2VHdCIsIm90aGVyIiwiYmFzZUhhcyIsImJhc2VIYXNJbiIsImJhc2VJbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsInNlZW4iLCJiYXNlSW52b2tlIiwicGFyZW50IiwibGFzdCIsImJhc2VJc0FyZ3VtZW50cyIsImJhc2VJc0VxdWFsIiwiYmFzZUlzRXF1YWxEZWVwIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJlcXVhbEFycmF5cyIsImVxdWFsQnlUYWciLCJpc1BhcnRpYWwiLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJlcXVhbE9iamVjdHMiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsIm90aFByb3BzIiwib2JqU3RhY2tlZCIsIm90aFN0YWNrZWQiLCJza2lwQ3RvciIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvYmpDdG9yIiwib3RoQ3RvciIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImJhc2VJc05hdGl2ZSIsImlzTWFza2VkIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJwcm9wZXJ0eSIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwiYmFzZU1lcmdlRGVlcCIsIm1lcmdlRnVuYyIsInNhZmVHZXQiLCJuZXdWYWx1ZSIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ0b1BsYWluT2JqZWN0IiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjcml0ZXJpYSIsImJhc2VTb3J0QnkiLCJjb21wYXJlciIsImNvbXBhcmVNdWx0aXBsZSIsIm9iakNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJjb21wYXJlQXNjZW5kaW5nIiwiYmFzZVBpY2tCeSIsImJhc2VTZXQiLCJiYXNlUHVsbEFsbCIsImJhc2VQdWxsQXQiLCJpbmRleGVzIiwicHJldmlvdXMiLCJiYXNlVW5zZXQiLCJiYXNlUmVwZWF0IiwiYmFzZVJlc3QiLCJzZXRUb1N0cmluZyIsIm92ZXJSZXN0IiwiYmFzZVNhbXBsZSIsImJhc2VTYW1wbGVTaXplIiwibmVzdGVkIiwiYmFzZVNldERhdGEiLCJiYXNlU2V0VG9TdHJpbmciLCJjb25zdGFudCIsImJhc2VTaHVmZmxlIiwiYmFzZVNsaWNlIiwiYmFzZVNvbWUiLCJiYXNlU29ydGVkSW5kZXgiLCJyZXRIaWdoZXN0IiwibG93IiwiaGlnaCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJiYXNlWG9yIiwiYmFzZVppcE9iamVjdCIsImFzc2lnbkZ1bmMiLCJ2YWxzTGVuZ3RoIiwiY2FzdEFycmF5TGlrZU9iamVjdCIsImNhc3RGdW5jdGlvbiIsInN0cmluZ1RvUGF0aCIsImNhc3RSZXN0IiwiY2FzdFNsaWNlIiwiaWQiLCJhcnJheUJ1ZmZlciIsInR5cGVkQXJyYXkiLCJ2YWxJc0RlZmluZWQiLCJ2YWxJc1JlZmxleGl2ZSIsImNvbXBvc2VBcmdzIiwicGFydGlhbHMiLCJob2xkZXJzIiwiaXNDdXJyaWVkIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImhvbGRlcnNMZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJpc1VuY3VycmllZCIsImNvbXBvc2VBcmdzUmlnaHQiLCJob2xkZXJzSW5kZXgiLCJyaWdodEluZGV4IiwicmlnaHRMZW5ndGgiLCJpc05ldyIsImNyZWF0ZUFnZ3JlZ2F0b3IiLCJpbml0aWFsaXplciIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIml0ZXJhYmxlIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsImNhbGxiYWNrIiwid29yZHMiLCJkZWJ1cnIiLCJjcmVhdGVDdG9yIiwidGhpc0JpbmRpbmciLCJjcmVhdGVGaW5kIiwiZmluZEluZGV4RnVuYyIsImNyZWF0ZUZsb3ciLCJmbGF0UmVzdCIsImZ1bmNzIiwicHJlcmVxIiwidGhydSIsIndyYXBwZXIiLCJnZXRGdW5jTmFtZSIsImZ1bmNOYW1lIiwiZ2V0RGF0YSIsImlzTGF6aWFibGUiLCJwbGFudCIsImNyZWF0ZUh5YnJpZCIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJhcmdQb3MiLCJhcnkiLCJhcml0eSIsImlzQXJ5IiwiaXNCaW5kIiwiaXNCaW5kS2V5IiwiaXNGbGlwIiwiZ2V0SG9sZGVyIiwiaG9sZGVyc0NvdW50IiwiY291bnRIb2xkZXJzIiwibmV3SG9sZGVycyIsImNyZWF0ZVJlY3VycnkiLCJmbiIsInJlb3JkZXIiLCJhcnJMZW5ndGgiLCJvbGRBcnJheSIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImRlZmF1bHRWYWx1ZSIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJuZXdEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImNyZWF0ZVJvdW5kIiwicGFpciIsIm5vb3AiLCJjcmVhdGVUb1BhaXJzIiwiYmFzZVRvUGFpcnMiLCJjcmVhdGVXcmFwIiwibWVyZ2VEYXRhIiwic3JjQml0bWFzayIsIm5ld0JpdG1hc2siLCJpc0NvbWJvIiwiY3JlYXRlQ3VycnkiLCJjcmVhdGVQYXJ0aWFsIiwiY3JlYXRlQmluZCIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJjdXN0b21EZWZhdWx0c01lcmdlIiwiY3VzdG9tT21pdENsb25lIiwiYXJyU3RhY2tlZCIsImFyclZhbHVlIiwiZmxhdHRlbiIsIm90aGVyRnVuYyIsImlzS2V5YWJsZSIsImdldFZhbHVlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsIkFycmF5QnVmZmVyIiwicmVzb2x2ZSIsImN0b3JTdHJpbmciLCJpc01hc2thYmxlIiwic3R1YkZhbHNlIiwib3RoZXJBcmdzIiwic2hvcnRPdXQiLCJyZWZlcmVuY2UiLCJpbnNlcnRXcmFwRGV0YWlscyIsImRldGFpbHMiLCJ1cGRhdGVXcmFwRGV0YWlscyIsImdldFdyYXBEZXRhaWxzIiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwicmFuZCIsIm1lbW9pemVDYXBwZWQiLCJtZW1vaXplIiwicXVvdGUiLCJzdWJTdHJpbmciLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kSW5kZXgiLCJmaW5kTGFzdEluZGV4IiwiaGVhZCIsImludGVyc2VjdGlvbiIsIm1hcHBlZCIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsInB1bGwiLCJwdWxsQWxsIiwicHVsbEF0IiwidW5pb24iLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW56aXAiLCJncm91cCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbnZva2VNYXAiLCJrZXlCeSIsInBhcnRpdGlvbiIsInNvcnRCeSIsImJlZm9yZSIsImJpbmQiLCJiaW5kS2V5IiwiV1JBUF9CSU5EX0ZMQUciLCJkZWJvdW5jZSIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsImludm9rZUZ1bmMiLCJ0aW1lIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0aW1lckV4cGlyZWQiLCJ0cmFpbGluZ0VkZ2UiLCJyZW1haW5pbmdXYWl0IiwidGltZVdhaXRpbmciLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwibGVhZGluZ0VkZ2UiLCJjYW5jZWwiLCJmbHVzaCIsImRlZmVyIiwiZGVsYXkiLCJyZXNvbHZlciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJvdmVyQXJncyIsInRyYW5zZm9ybXMiLCJmdW5jc0xlbmd0aCIsInBhcnRpYWwiLCJwYXJ0aWFsUmlnaHQiLCJyZWFyZyIsImd0ZSIsImJhc2VJc0FycmF5QnVmZmVyIiwiYmFzZUlzRGF0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJiYXNlSXNNYXAiLCJpc051bWJlciIsImJhc2VJc1JlZ0V4cCIsImJhc2VJc1NldCIsImlzU3RyaW5nIiwiYmFzZUlzVHlwZWRBcnJheSIsImx0ZSIsInRvQXJyYXkiLCJpdGVyYXRvclRvQXJyYXkiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduIiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnQiLCJpbnZlcnRCeSIsImludm9rZSIsIm1lcmdlIiwib21pdCIsIkNMT05FX0RFRVBfRkxBRyIsImJhc2VQaWNrIiwicGlja0J5IiwicHJvcCIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJjYW1lbENhc2UiLCJ3b3JkIiwiY2FwaXRhbGl6ZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwidG9VcHBlckNhc2UiLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZCIsIm1ldGhvZE9mIiwibWl4aW4iLCJvdmVyIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGxpZXIiLCJtdWx0aXBsaWNhbmQiLCJtaW51ZW5kIiwic3VidHJhaGVuZCIsImFmdGVyIiwiY2FzdEFycmF5IiwiY2h1bmsiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwiYmFzZUNvbmZvcm1zIiwicHJvcGVydGllcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImJhc2VGaWxsIiwiZmxhdE1hcCIsImZsYXRNYXBEZWVwIiwiZmxhdE1hcERlcHRoIiwiZmxhdHRlbkRlZXAiLCJmbGF0dGVuRGVwdGgiLCJmbGlwIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJpbml0aWFsIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1hdGNoZXMiLCJtYXRjaGVzUHJvcGVydHkiLCJudGhBcmciLCJvbWl0QnkiLCJvbmNlIiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlamVjdCIsInJlbW92ZSIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic2VwYXJhdG9yIiwibGltaXQiLCJzcHJlYWQiLCJ0YWlsIiwidGFrZSIsInRha2VSaWdodCIsInRha2VSaWdodFdoaWxlIiwidGFrZVdoaWxlIiwidGFwIiwidGhyb3R0bGUiLCJpc0Fyckxpa2UiLCJ1bmFyeSIsInVuaXEiLCJ1bmlxQnkiLCJ1bmlxV2l0aCIsInVuc2V0IiwidXBkYXRlIiwidXBkYXRlV2l0aCIsInZhbHVlc0luIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZCIsImV4dGVuZFdpdGgiLCJjbG9uZURlZXAiLCJjbG9uZURlZXBXaXRoIiwiY2xvbmVXaXRoIiwiY29uZm9ybXNUbyIsImRlZmF1bHRUbyIsImVuZHNXaXRoIiwidGFyZ2V0IiwiZXNjYXBlIiwiZXNjYXBlUmVnRXhwIiwiZXZlcnkiLCJmaW5kS2V5IiwiZmluZExhc3RLZXkiLCJmb3JJbiIsImZvckluUmlnaHQiLCJmb3JPd24iLCJmb3JPd25SaWdodCIsImluUmFuZ2UiLCJiYXNlSW5SYW5nZSIsImlzQm9vbGVhbiIsImlzRWxlbWVudCIsImlzRW1wdHkiLCJpc0VxdWFsIiwiaXNFcXVhbFdpdGgiLCJpc01hdGNoIiwiaXNNYXRjaFdpdGgiLCJpc05hdGl2ZSIsImlzTmlsIiwiaXNOdWxsIiwiaXNTYWZlSW50ZWdlciIsImlzVW5kZWZpbmVkIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0IiwibGFzdEluZGV4T2YiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJwYWQiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJ0ZW1wIiwicmVkdWNlUmlnaHQiLCJyZXBlYXQiLCJzYW1wbGUiLCJzb21lIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsInNldHRpbmdzIiwiaXNFc2NhcGluZyIsImlzRXZhbHVhdGluZyIsImltcG9ydHMiLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJpbnRlcnBvbGF0ZSIsInJlRGVsaW1pdGVycyIsImV2YWx1YXRlIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInZhcmlhYmxlIiwidGltZXMiLCJ0b0xvd2VyIiwidG9TYWZlSW50ZWdlciIsInRvVXBwZXIiLCJ0cmltIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJnbG9iYWwiLCJuZXdFbmQiLCJ1bmVzY2FwZSIsInVuaXF1ZUlkIiwicHJlZml4IiwiZWFjaCIsImVhY2hSaWdodCIsIlZFUlNJT04iLCJpc0ZpbHRlciIsInRha2VOYW1lIiwiZHJvcE5hbWUiLCJjaGVja0l0ZXJhdGVlIiwiaXNUYWtlciIsImxvZGFzaEZ1bmMiLCJyZXRVbndyYXBwZWQiLCJpc0xhenkiLCJ1c2VMYXp5IiwiaXNIeWJyaWQiLCJpc1Vud3JhcHBlZCIsIm9ubHlMYXp5IiwiY2hhaW5OYW1lIiwibGF6eUNsb25lIiwibGF6eVJldmVyc2UiLCJsYXp5VmFsdWUiLCJpc1JpZ2h0IiwidmlldyIsImdldFZpZXciLCJpdGVyTGVuZ3RoIiwidGFrZUNvdW50IiwiaXRlckluZGV4Iiwid3JhcHBlckNoYWluIiwiY29tbWl0Iiwid3JhcHBlckNvbW1pdCIsIndyYXBwZXJOZXh0Iiwid3JhcHBlclBsYW50Iiwid3JhcHBlclJldmVyc2UiLCJ3cmFwcGVkIiwidG9KU09OIiwid3JhcHBlclZhbHVlIiwid3JhcHBlclRvSXRlcmF0b3IiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJvIiwiZW51bWVyYWJsZSIsImdsb2JhbFRoaXMiLCJvYmoiLCJubWQiLCJjaGlsZHJlbiIsIk1hdHJpeCIsIm1hdHJpeCIsImRlbHRhVHJhbnNmb3JtUG9pbnQiLCJpbnZlcnNlIiwiZGV0ZXJtaW5hbnQiLCJhYm91dFBvaW50Iiwicm90YXRpb24iLCJzeCIsInN5IiwidHJhbnNsYXRpb24iLCJ0cmFuc2Zvcm1Qb2ludCIsInNjYWxlTWF0cml4Iiwicm90YXRpb25NYXRyaXgiLCJNb3Rpb24iLCJjdXJyZW50VW5pdCIsImN1cnJlbnRUb29sRGlhbWV0ZXIiLCJjdXJyZW50U3BlZWQiLCJjdXJyZW50RmVlZCIsImN1cnJlbnRBdGMiLCJyZXRyYWN0Iiwic2VuZCIsInBsdW5nZSIsInplcm8iLCJwYXJhbXMiLCJyYXBpZCIsIm5ld1Bvc2l0aW9uIiwicG9zdFByb2Nlc3MiLCJsaW5lYXIiLCJhcmNDVyIsImFyY0NDVyIsImNjdyIsIl9vYmplY3RTcHJlYWQiLCJmZWVkIiwidW5pdCIsIm1ldGEiLCJ0b29sRGlhbWV0ZXIiLCJ2MSIsInYyIiwiekVuZCIsImN1ckxlbiIsInRvdGFsTGVuIiwielN0YXJ0IiwiZm9sbG93UGF0aCIsIl9lYWNoIiwibW90aW9uIiwicmFtcGluZyIsInNhbWVYWSIsImhlbGl4IiwicngiLCJyeSIsIkRyaXZlciIsInN0cmVhbSIsIndyaXRlIiwic3RyIiwiY29vbGFudCIsImF0YyIsIk51bGxEcml2ZXIiLCJfRHJpdmVyIiwiR0NhbnZhcyIsImN1dG91dFJlY3QiLCJ2aXJ0dWFsU2NhbGUiLCJjYW52YXMiLCJjYW52YXNFbGVtZW50IiwiZ2V0Q29udGV4dCIsIm91dHB1dCIsIm91dHB1dEVsZW1lbnQiLCJiYWNrZ3JvdW5kIiwiX2JhY2tncm91bmQiLCJmaWx0ZXJzIiwicmVzZXRUcmFuc2Zvcm0iLCJzZXRDdHhUcmFuc2Zvcm0iLCJsaW5lV2lkdGgiLCJfc3Ryb2tlU3R5bGUiLCJfZmlsbFN0eWxlIiwiX2ZvbnQiLCJmb250Iiwic2V0VHJhbnNmb3JtIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImRlcHRoT2ZDdXQiLCJhbGlnbiIsIndhcm4iLCJfdGhpcyRjdHgyIiwiX3RoaXMkY3R4MyIsIl90aGlzJGN0eDQiLCJfdGhpcyRjdHg1IiwiX3RoaXMkY3R4NiIsIl90aGlzJGN0eDciLCJfdGhpcyRjdHg4IiwiX3RoaXMkY3R4OSIsImVuc3VyZVBhdGgiLCJfeCIsIl95IiwiX3RoaXMkY3R4MTAiLCJfdGhpcyR0cmFuc2Zvcm1Qb2ludCIsIl90aGlzJGN0eDExIiwiX3RoaXMkdHJhbnNmb3JtUG9pbnQyIiwiYXJjVG8iLCJfeDEiLCJfeTEiLCJfeDIiLCJfeTIiLCJfdGhpcyRjdHgxMiIsIl90aGlzJHRyYW5zZm9ybVBvaW50MyIsIl90aGlzJHRyYW5zZm9ybVBvaW50NCIsInkyIiwidjAxIiwidjIxIiwiY3Jvc3MiLCJkMDEiLCJkMjEiLCJzcGFuIiwicmF0ZSIsInZtMSIsImRtMSIsImNlbnRlclBvaW50IiwiX3RoaXMkY3R4MTMiLCJfdGhpcyRjdHgxNCIsIl90aGlzJHRyYW5zZm9ybVBvaW50NSIsIl90aGlzJHRyYW5zZm9ybVBvaW50NiIsIl90aGlzJHRyYW5zZm9ybVBvaW50NyIsIl90aGlzJGN0eDE1IiwiX3RoaXMkdHJhbnNmb3JtUG9pbnQ4IiwiX3RoaXMkdHJhbnNmb3JtUG9pbnQ5IiwiX3RoaXMkY3R4MTYiLCJzdHJva2VDaXJjbGUiLCJmaWxsQ2lyY2xlIiwiX2xlbjciLCJfa2V5NyIsIl9sZW44IiwiX2tleTgiLCJtZWFzdXJlVGV4dCIsInRleHQiLCJpc09wYXF1ZSIsImNvbG9yIiwiX3RoaXMkY3R4MTciLCJfdGhpczMiLCJfcmVmJGFsaWduIiwiX3JlZiRkZXB0aCIsIm9yaWdTdHJva2VTdHlsZSIsInBhdGhIaXN0b3J5IiwiY3VycmVudExpbmVzIiwiY29tcGFyZUxpbmVzIiwibGF5ZXIiLCJfdGhpcyRjdHgxOCIsIl90aGlzNCIsImNsZWFyUmVjdCIsIl90aGlzJGN0eDE5IiwiX3RoaXMkY3R4MjAiLCJpbnZlcnRlZFoiLCJHQ29kZSIsImNvZGUiLCJjb21tYW5kIiwiaW5jaCIsIm1tIiwibG9hZFZhbHVlIiwiZmFsbGJhY2tTZXRWYWx1ZSIsImVuY29kZWRWYWx1ZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzYXZlVmFsdWUiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJzZXRJdGVtIiwiQ3VycmVudFNrZXRjaCIsInNhdmVTbG90QXJlYSIsImdldEVsZW1lbnRCeUlkIiwicmVuZGVyU2tldGNoU2F2ZVNsb3RzIiwic2tldGNoIiwib25Mb2FkIiwiaW5uZXJIVE1MIiwicHJlc2V0IiwiYnV0dG9uIiwiY3JlYXRlRWxlbWVudCIsImlubmVyVGV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhcHBlbmRDaGlsZCIsInNsaWRlckFyZWEiLCJzbGlkZXJzIiwiQ0FOVkFTX1dJRFRIIiwiQ0FOVkFTX0hFSUdIVCIsImNhbnZhc0FyZWEiLCJza2V0Y2hCdXR0b25zQXJlYSIsInNhdmVCdXR0b24iLCJyZXNldEJ1dHRvbiIsInJhbmRvbWl6ZUJ1dHRvbiIsImdjb2RlVGV4dGFyZWEiLCJjdXJyZW50U2tldGNoSW5kZXgiLCJyYWZSZWYiLCJhbmltYXRlSW5jcmVtZW50Iiwic2V0R0NvZGVIVE1MIiwiX3NldEdDb2RlSFRNTCIsImdDb2RlU3RyaW5nIiwic2V0R0NvZGUiLCJpbml0U2tldGNoIiwiU2tldGNoQ2xhc3MiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImdlbmVyYXRlR0NvZGUiLCJhcHBlbmRHQ29kZSIsImdDYW52YXMiLCJyZW5kZXJTa2V0Y2hTbGlkZXJzIiwib25VcGRhdGUiLCJ2YWx1ZVJhbmdlIiwic2xpZGVyIiwic2V0QXR0cmlidXRlIiwibGFiZWwiLCJoYW5kbGVVcGRhdGUiLCJwcm9tcHQiLCJwYXJzZWRWYWx1ZSIsImxhYmVsU3BhbiIsInZhbHVlU3BhbiIsImFuaW1hdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzdHlsZSIsImJvZHkiLCJza2V0Y2hlcyIsImNsYXNzTGlzdCIsImFsbEJ1dHRvbnMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIml0ZW0iLCJ1cGRhdGVTbGlkZXJWYWx1ZXMiLCJfc2xpZGVycyRrZXkiLCJzYXZlTmV3UHJlc2V0Iiwic2F2ZURhdGEiLCJhY2MiLCJza2V0Y2hOYW1lIiwic2tldGNoU2F2ZURhdGEiXSwic291cmNlUm9vdCI6IiJ9