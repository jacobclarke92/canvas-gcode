/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={563:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(73),a=i(132),l=i(604),u=i(323);function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var c=function(){function Path(){!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Path),_defineProperty(this,"subPaths",[])}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Path,[{key:"clone",value:function clone(){var t=new Path;return t.subPaths=this.subPaths.slice(0),t}},{key:"moveTo",value:function moveTo(t,r){var i=new o.Z;i.moveTo(t,r),this.subPaths.push(i),this.current=i}},{key:"ensure",value:function ensure(t,r){0===this.subPaths.length&&this.moveTo(t,r)}},{key:"close",value:function close(){if(!this.current)return!1;this.current.close()}},{key:"lineTo",value:function lineTo(){var t;this.ensure.apply(this,arguments),(t=this.current).lineTo.apply(t,arguments)}},{key:"arc",value:function arc(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var o=r[0],a=r[1],l=r[2],u=r[3],c=r[4],h=r[5];this.ellipse(o,a,l,l,u,c,h)}},{key:"ellipse",value:function ellipse(){for(var t,r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];var l=i[0],u=i[1],c=i[2],h=(i[3],i[4]),p=i[5],d=(i[6],(0,a.CS)(l,u,h,p,c));this.current&&(0,a.Bj)(this.current.lastPoint(),d.start)||this.moveTo(d.start.x,d.start.y),(t=this.current).ellipse.apply(t,i)}},{key:"quadraticCurveTo",value:function quadraticCurveTo(){var t;(t=this.current).quadraticCurveTo.apply(t,arguments)}},{key:"bezierCurveTo",value:function bezierCurveTo(){var t;(t=this.current).bezierCurveTo.apply(t,arguments)}},{key:"rect",value:function rect(t,r,i,o){this.moveTo(t,r),this.lineTo(t+i,r),this.lineTo(t+i,r+o),this.lineTo(t,r+o),this.lineTo(t,r)}},{key:"toPolys",value:function toPolys(t,r){if(!t)throw"NO SCALE!";return this.subPaths.map((function(i){return i.toPoly(t,r)}))}},{key:"fromPolys",value:function fromPolys(t,r){if(!r)throw"NO SCALE!";this.subPaths=[];for(var i=0,a=t.length;i<a;++i){var l=new o.Z;l.fromPolys(t[i],r),this.subPaths.push(l),this.current=l}return this}},{key:"clip",value:function clip(t,r,i){if(!t)return this;r=r||0;var o=1e3,a=this.toPolys(o,i),u=t.toPolys(o,i),c=new l.Clipper;c.AddPaths(a,l.PolyType.ptSubject,!0),c.AddPaths(u,l.PolyType.ptClip,!0);var h=[];c.Execute(r,h);var p=new Path;return p.fromPolys(h,o),p}},{key:"translate",value:function translate(t,r){var i=new Path;return this.subPaths.forEach((function(o){var a=o.getPoints();i.moveTo(a[0].x+t,a[0].y+r),a.slice(1).forEach((function(o){i.lineTo(o.x+t,o.y+r)}))})),i}},{key:"clipToBounds",value:function clipToBounds(t){var r,i=new Path,o=new u.Z,a=o.clone();return this.subPaths.forEach((function(l){l.getPoints().forEach((function(l,u){if(l=l.clone(),r=l.clone(),l.y<t.top){var c=(l.x-o.x)/(l.y-o.y);l.x+=c*(t.top-l.y)||0,l.y=t.top}else if(a.y<t.top){var h=(l.x-a.x)/(l.y-a.y)*(t.top-l.y)||0;i.moveTo(l.x+h,t.top)}if(l.x>t.right){var p=(l.y-o.y)/(l.x-o.x);l.y+=p*(t.right-l.x),l.x=t.right}else a.x,t.right;0===u?i.moveTo(l.x,l.y):i.lineTo(l.x,l.y),o=l,a=r}))})),i}},{key:"simplify",value:function simplify(t,r){var i=this.toPolys(1e3,r),o=l.PolyFillType.pftNonZero;"evenodd"===t&&(o=l.PolyFillType.pftEvenOdd),i=l.Clipper.SimplifyPolygons(i,o);var a=new Path;return a.fromPolys(i,1e3),a}},{key:"is",value:function is(t){return 1===this.subPaths.length&&2===this.subPaths[0].actions.length&&this.subPaths[0].actions[1].type===t}},{key:"offset",value:function offset(t,r){if(0===t)return this;if(this.is("ELLIPSE")){var i=new Path,o=this.subPaths[0].actions[1].args;return!(o[2]+t<0)&&(i.ellipse(o[0],o[1],o[2]+t,o[3]+t,o[4],o[5],o[6]),i)}var a=1e3,u=this.toPolys(a,r),c=new l.ClipperOffset;c.AddPaths(u,l.JoinType.jtMiter,l.EndType.etClosedPolygon);var h=[];try{c.Execute(h,t*a)}catch(t){return!1}if(!h||0===h.length||0===h[0].length)return!1;var p=new Path;return p.fromPolys(h,a),p.close(),p}},{key:"ramp",value:function ramp(t){}},{key:"addPath",value:function addPath(t){this.subPaths=this.subPaths.concat(t.subPaths)}},{key:"estimateMaxOffset",value:function estimateMaxOffset(t){for(var r=this.getBounds(),i=Math.abs(r.right-r.left),o=Math.abs(r.bottom-r.top),a=Math.min(i,o)/2,l=0,u=0;u<5;++u){var c=l+(a-l)/2;this.offset(-c,3)?l=c:a=c}return{lt:a,gt:l}}},{key:"fillPath",value:function fillPath(t,r){for(var i=new Path,o=Math.sin(Math.PI/4),a=this,l=a.estimateMaxOffset(5).lt,u=-(l-=t/2);u<-t/2;u+=t*o){var c=a.offset(u,r);if(!c)break;c=c.reverse(),i.addPath(c)}var h=a.offset(-t/2,r);return h&&i.addPath(h.reverse()),i}},{key:"connectEnds",value:function connectEnds(t){for(var r=this.subPaths.length-1;r>0;--r){var i=this.subPaths[r-1],o=this.subPaths[r],a=i.lastPoint(),l=o.nearestPoint(a),u=l.point;l.distance<2*t&&(o=o.shift(l.i),i.lineTo(u.x,u.y),o.actions[0].type="LINE_TO",i.actions=i.actions.concat(o.actions),this.subPaths.splice(r,1))}return this}},{key:"reverse",value:function reverse(){if(this.is("ELLIPSE")){var t=new Path,r=this.subPaths[0].actions[1].args;return t.ellipse(r[0],r[1],r[2],r[3],r[5],r[4],!r[6]),t}var i=new Path;return i.subPaths=this.subPaths.map((function(t){return t.reverse()})).reverse(),i}},{key:"sort",value:function sort(){if(0===this.subPaths.length)return this;var t=new Path,r=this.subPaths[0].lastPoint();return t.subPaths=this.subPaths.sort((function(t,i){var o=t.lastPoint(),a=i.firstPoint(),l=u.Z.distance(o,r),c=u.Z.distance(a,r);return r=i.lastPoint(),l<c?-1:l>c?1:0})),t}},{key:"firstPoint",value:function firstPoint(){return!!this.current&&this.subPaths[0].firstPoint()}},{key:"lastPoint",value:function lastPoint(){return!!this.current&&this.subPaths[this.subPaths.length-1].lastPoint()}},{key:"getPoints",value:function getPoints(t){var r=[];return this.subPaths.forEach((function(i){r.push.apply(r,_toConsumableArray(i.getPoints(t)))})),r}},{key:"getBounds",value:function getBounds(){var t=this.getPoints(),r=this.firstPoint()||new u.Z,i={left:r.x,top:r.y,right:r.x,bottom:r.y};return t.forEach((function(t){i.left=Math.min(i.left,t.x),i.top=Math.min(i.top,t.y),i.right=Math.max(i.right,t.x),i.bottom=Math.max(i.bottom,t.y)})),i}}]),Path}();_defineProperty(c,"actions",o.Z.actions)},323:(t,r,i)=>{"use strict";function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}i.d(r,{Z:()=>o});var o=function(){function Point(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2?arguments[2]:void 0,o=arguments.length>3?arguments[3]:void 0;_classCallCheck(this,Point),this.x=isNaN(t)?0:t,this.y=isNaN(r)?0:r,this.z=isNaN(i)?0:i,this.a=isNaN(o)?0:o}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Point,[{key:"clone",value:function clone(){return new Point(this.x,this.y)}},{key:"round",value:function round(){return new Point(Math.round(this.x),Math.round(this.y))}},{key:"equals",value:function equals(t){return this.x===t.x&&this.y===t.y}},{key:"add",value:function add(t){return new Point(this.x+t.x,this.y+t.y)}},{key:"midpoint",value:function midpoint(t){return new Point((this.x+t.x)/2,(this.y+t.y)/2)}},{key:"subtract",value:function subtract(t){return new Point(this.x-t.x,this.y-t.y)}},{key:"magnitude",value:function magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}},{key:"multiply",value:function multiply(t){return"number"==typeof t?new Point(this.x*t,this.y*t):new Point(this.x*t.x,this.y*t.y)}},{key:"scale",value:function scale(t){return this.multiply(t)}},{key:"divide",value:function divide(t){return new Point(this.x/t.x,this.y/t.y)}},{key:"normalize",value:function normalize(){return this.multiply(1/this.magnitude())}},{key:"set",value:function set(t,r){this.x=t,this.y=r}},{key:"dot",value:function dot(t){return this.x*t.x+this.y*t.y}},{key:"translate",value:function translate(t,r){return new Point(this.x+t,this.y+r)}},{key:"moveAlongAngle",value:function moveAlongAngle(t,r){return this.translate(Math.cos(t)*r,Math.sin(t)*r)}},{key:"rotate",value:function rotate(t){return new Point(this.x*Math.cos(t)-this.y*Math.sin(t),this.x*Math.sin(t)+this.y*Math.cos(t))}},{key:"angleTo",value:function angleTo(t){return Math.atan2(t.y-this.y,t.x-this.x)}},{key:"distanceTo",value:function distanceTo(t){return Math.sqrt(Math.pow(t.x-this.x,2)+Math.pow(t.y-this.y,2))}},{key:"angleBetween",value:function angleBetween(t){return Math.acos(this.dot(t)/(this.magnitude()*t.magnitude()))}},{key:"toUnit",value:function toUnit(){return this.multiply(1/this.magnitude())}}],[{key:"distance",value:function distance(t,r){return Math.sqrt(Math.pow(r.x-t.x,2)+Math.pow(r.y-t.y,2))}},{key:"angleBetween",value:function angleBetween(t,r){return Math.acos(t.dot(r)/(t.magnitude()*r.magnitude()))}}]),Point}()},204:(t,r,i)=>{"use strict";function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}i.d(r,{v:()=>o});var o=function(){function Sketch(t){!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Sketch),_defineProperty(this,"vs",{}),this.ctx=t.ctx,this.canvasWidth=this.cw=t.width,this.canvasHeight=this.ch=t.height,this.cx=this.canvasWidth/2,this.cy=this.canvasHeight/2}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Sketch,[{key:"init",value:function init(){}},{key:"initDraw",value:function initDraw(){}},{key:"draw",value:function draw(t){}},{key:"reset",value:function reset(){this.ctx.reset()}}]),Sketch}();_defineProperty(o,"generateGCode",!0)},73:(t,r,i)=>{"use strict";i.d(r,{Z:()=>u});var o=i(563),a=i(323),l=i(132);function _slicedToArray(t,r){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,r){var i=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==i)return;var o,a,l=[],u=!0,c=!1;try{for(i=i.call(t);!(u=(o=i.next()).done)&&(l.push(o.value),!r||l.length!==r);u=!0);}catch(t){c=!0,a=t}finally{try{u||null==i.return||i.return()}finally{if(c)throw a}}return l}(t,r)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t,r)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var u=function(){function SubPath(t){!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,SubPath),_defineProperty(this,"actions",[]),_defineProperty(this,"pointsCache",[]),t&&this.fromPoints(t)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(SubPath,[{key:"clone",value:function clone(){var t=new SubPath;return t.actions=this.actions.slice(0),t}},{key:"isClosed",value:function isClosed(){return(0,l.Bj)(this.firstPoint(),this.lastPoint())}},{key:"closed",get:function get(){return this.isClosed()}},{key:"offset",value:function offset(t){var r=this.toPath().offset(t);return!!r&&r.subPaths[0]}},{key:"simplify",value:function simplify(){var t=this.toPath().simplify();return!!t&&t.subPaths[0]}},{key:"toPath",value:function toPath(){var t=this.clone(),r=new o.Z;return r.subPaths.push(t),r.current=r.subPaths[r.subPaths.length-1],r}},{key:"addAction",value:function addAction(t){this.actions.push(t),this.pointsCache=[]}},{key:"firstPoint",value:function firstPoint(){var t=new a.Z(0,0),r=this.actions[0];if("ELLIPSE"===r.type)t=(0,l.CS)(r.args[0],r.args[1],r.args[4],r.args[5],r.args[2]).start;else t.x=r.args[r.args.length-2],t.y=r.args[r.args.length-1];return t}},{key:"lastPoint",value:function lastPoint(){var t=new a.Z(0,0),r=this.actions[this.actions.length-1];if("ELLIPSE"===r.type)t=(0,l.CS)(r.args[0],r.args[1],r.args[4],r.args[5],r.args[2]).end;else t.x=r.args[r.args.length-2],t.y=r.args[r.args.length-1];return t}},{key:"fromPoints",value:function fromPoints(t){this.moveTo(t[0].x,t[0].y);for(var r=1,i=t.length;r<i;r++)this.lineTo(t[r].x,t[r].y)}},{key:"getActionLength",value:function getActionLength(t,r,i){var o=this.actions[i];if("ELLIPSE"===o.type){var a=_slicedToArray(o.args,7),l=(a[0],a[1],a[2],a[3]),u=a[4],c=a[5];a[6];return o.args,(c-u)*l}var h=o.args,p=h[h.length-2]-t,d=h[h.length-1]-r;return Math.sqrt(p*p+d*d)}},{key:"getLength",value:function getLength(){for(var t=0,r=this.firstPoint(),i=this.getPoints(1e4),o=1,a=i.length;o<a;++o){var l=i[o],u=r.x,c=r.y,h=l.x-u,p=l.y-c;t+=Math.sqrt(h*h+p*p)}return t}},{key:"nearestPoint",value:function nearestPoint(t){var r,i,o=new a.Z,l=1/0;return this.actions.forEach((function(u,c){if("ELLIPSE"===u.type){var h=_slicedToArray(u.args,7),p=h[0],d=h[1],y=h[2],v=h[3],P=h[4];h[5],h[6];o.x=p+y*Math.cos(P),o.y=d+v*Math.sin(P)}else o.x=u.args[u.args.length-2],o.y=u.args[u.args.length-1];var m=a.Z.distance(t,o);m<l&&(r=c,i=o.clone(),l=m)})),{i:r,distance:l,point:i}}},{key:"pointAt",value:function pointAt(t){var r=new a.Z,i=this.actions[t];if("LINE_TO"===i.type)r.x=i.args[i.args.length-2],r.y=i.args[i.args.length-1];return r}},{key:"shiftToNearest",value:function shiftToNearest(t,r){var i=this.nearestPoint(new a.Z(t,r));return this.shift(i.i)}},{key:"shift",value:function shift(t){if(0===t)return this;var r=new SubPath;return r.actions=this.actions.slice(t).concat(this.actions.slice(0,t)),r.actions.forEach((function(t){t.type="LINE_TO"})),r.lineTo(r.actions[0].args[0],r.actions[0].args[1]),r}},{key:"moveTo",value:function moveTo(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"MOVE_TO",args:r})}},{key:"lineTo",value:function lineTo(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"LINE_TO",args:r})}},{key:"quadraticCurveTo",value:function quadraticCurveTo(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"QUADRATIC_CURVE_TO",args:r})}},{key:"bezierCurveTo",value:function bezierCurveTo(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"BEZIER_CURVE_TO",args:r})}},{key:"arc",value:function arc(){this.ellipse.apply(this,arguments)}},{key:"ellipse",value:function ellipse(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"ELLIPSE",args:r})}},{key:"getPoints",value:function getPoints(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:40,r=[],i=0,o=this.actions.length;i<o;i++){var l=this.actions[i];switch(l.type){case"MOVE_TO":case"LINE_TO":r.push(new a.Z(l.args[0],l.args[1]));break;case"QUADRATIC_CURVE_TO":var u=void 0,p=void 0,d=_slicedToArray(l.args,4),y=d[0],v=d[1],P=d[2],m=d[3];if(r.length>0){var g=r[r.length-1];u=g.x,p=g.y}else{var _=this.actions[i-1];if("ELLIPSE"!==_.type){var b=_.args;u=b[b.length-2],p=b[b.length-1]}else u=_.args[0],p=_.args[1]}for(var x=1;x<=t;x++){var I=x/t,C=c(I,u,y,P),O=c(I,p,v,m);r.push(new a.Z(C,O))}break;case"BEZIER_CURVE_TO":var w=void 0,S=void 0,T=_slicedToArray(l.args,6),E=T[0],L=T[1],A=T[2],M=T[3],k=T[4],R=T[5];if(r.length>0){var B=r[r.length-1];w=B.x,S=B.y}else{var N=this.actions[i-1];if("ELLIPSE"!==N.type){var D=N.args;w=D[D.length-2],S=D[D.length-1]}else w=N.args[0],S=N.args[1]}for(var X=1;X<=t;X++){var j=X/t,Y=h(j,w,E,A,k),z=h(j,S,L,M,R);r.push(new a.Z(Y,z))}break;case"ELLIPSE":var W=void 0,Z=void 0,q=_slicedToArray(l.args,7),G=q[0],V=q[1],U=q[2],H=q[3],J=q[4],K=q[5],$=q[6],Q=K-J,tt=void 0;for(W=0;W<=t;W++){Z=W/t,Q===2*-Math.PI&&(Q=2*Math.PI),Q<0&&(Q+=2*Math.PI),Q>2*Math.PI&&(Q-=2*Math.PI),$?(Q===2*Math.PI&&(Q=0),tt=K+(1-Z)*(2*Math.PI-Q)):tt=J+Z*Q;var et=G+U*Math.cos(tt),rt=V+H*Math.sin(tt);r.push(new a.Z(et,rt))}}}return this.closed&&r.push(r[0]),r}},{key:"toPoly",value:function toPoly(t,r){return this.getPoints(r).map((function(r){return{X:r.x*t,Y:r.y*t}}))}},{key:"fromPolys",value:function fromPolys(t,r){r=1/r,this.moveTo(t[0].X*r,t[0].Y*r);for(var i=1,o=t.length;i<o;++i)this.lineTo(t[i].X*r,t[i].Y*r);return this.close(),this}},{key:"close",value:function close(){if(!this.isClosed()){var t=this.actions[0].args;this.lineTo.apply(this,t)}}},{key:"reverse",value:function reverse(){var t=new SubPath,r=this.getPoints().reverse();if(0==r.length)return t;t.moveTo(r[0].x,r[0].y);for(var i=1,o=r.length;i<o;++i)t.lineTo(r[i].x,r[i].y);return t}}]),SubPath}();_defineProperty(u,"actions",{MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",ELLIPSE:"ellipse"});var c=function b2(t,r,i,o){return function b2p0(t,r){var i=1-t;return i*i*r}(t,r)+function b2p1(t,r){return 2*(1-t)*t*r}(t,i)+function b2p2(t,r){return t*t*r}(t,o)},h=function b3(t,r,i,o,a){return function b3p0(t,r){var i=1-t;return i*i*i*r}(t,r)+function b3p1(t,r){var i=1-t;return 3*i*i*t*r}(t,i)+function b3p2(t,r){return 3*(1-t)*t*t*r}(t,o)+function b3p3(t,r){return t*t*t*r}(t,a)}},604:t=>{!function(){"use strict";var r,i={version:"6.4.2.2",use_lines:!0,use_xyz:!1},o=!1;if(t.exports?(t.exports=i,o=!0):"undefined"!=typeof document?window.ClipperLib=i:self.ClipperLib=i,o){a="chrome";r="Netscape"}else{var a=navigator.userAgent.toString().toLowerCase();r=navigator.appName}var l,u={};-1!=a.indexOf("chrome")&&-1==a.indexOf("chromium")?u.chrome=1:u.chrome=0,-1!=a.indexOf("chromium")?u.chromium=1:u.chromium=0,-1!=a.indexOf("safari")&&-1==a.indexOf("chrome")&&-1==a.indexOf("chromium")?u.safari=1:u.safari=0,-1!=a.indexOf("firefox")?u.firefox=1:u.firefox=0,-1!=a.indexOf("firefox/17")?u.firefox17=1:u.firefox17=0,-1!=a.indexOf("firefox/15")?u.firefox15=1:u.firefox15=0,-1!=a.indexOf("firefox/3")?u.firefox3=1:u.firefox3=0,-1!=a.indexOf("opera")?u.opera=1:u.opera=0,-1!=a.indexOf("msie 10")?u.msie10=1:u.msie10=0,-1!=a.indexOf("msie 9")?u.msie9=1:u.msie9=0,-1!=a.indexOf("msie 8")?u.msie8=1:u.msie8=0,-1!=a.indexOf("msie 7")?u.msie7=1:u.msie7=0,-1!=a.indexOf("msie ")?u.msie=1:u.msie=0,i.biginteger_used=null;function BigInteger(t,r,o){i.biginteger_used=1,null!=t&&("number"==typeof t&&void 0===r?this.fromInt(t):"number"==typeof t?this.fromNumber(t,r,o):null==r&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,r))}function nbi(){return new BigInteger(null,void 0,void 0)}"Microsoft Internet Explorer"==r?(BigInteger.prototype.am=function am2(t,r,i,o,a,l){for(var u=32767&r,c=r>>15;--l>=0;){var h=32767&this[t],p=this[t++]>>15,d=c*h+p*u;a=((h=u*h+((32767&d)<<15)+i[o]+(1073741823&a))>>>30)+(d>>>15)+c*p+(a>>>30),i[o++]=1073741823&h}return a},l=30):"Netscape"!=r?(BigInteger.prototype.am=function am1(t,r,i,o,a,l){for(;--l>=0;){var u=r*this[t++]+i[o]+a;a=Math.floor(u/67108864),i[o++]=67108863&u}return a},l=26):(BigInteger.prototype.am=function am3(t,r,i,o,a,l){for(var u=16383&r,c=r>>14;--l>=0;){var h=16383&this[t],p=this[t++]>>14,d=c*h+p*u;a=((h=u*h+((16383&d)<<14)+i[o]+a)>>28)+(d>>14)+c*p,i[o++]=268435455&h}return a},l=28),BigInteger.prototype.DB=l,BigInteger.prototype.DM=(1<<l)-1,BigInteger.prototype.DV=1<<l;BigInteger.prototype.FV=Math.pow(2,52),BigInteger.prototype.F1=52-l,BigInteger.prototype.F2=2*l-52;var c,h,p=new Array;for(c="0".charCodeAt(0),h=0;h<=9;++h)p[c++]=h;for(c="a".charCodeAt(0),h=10;h<36;++h)p[c++]=h;for(c="A".charCodeAt(0),h=10;h<36;++h)p[c++]=h;function int2char(t){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(t)}function intAt(t,r){var i=p[t.charCodeAt(r)];return null==i?-1:i}function nbv(t){var r=nbi();return r.fromInt(t),r}function nbits(t){var r,i=1;return 0!=(r=t>>>16)&&(t=r,i+=16),0!=(r=t>>8)&&(t=r,i+=8),0!=(r=t>>4)&&(t=r,i+=4),0!=(r=t>>2)&&(t=r,i+=2),0!=(r=t>>1)&&(t=r,i+=1),i}function Classic(t){this.m=t}function Montgomery(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function op_and(t,r){return t&r}function op_or(t,r){return t|r}function op_xor(t,r){return t^r}function op_andnot(t,r){return t&~r}function lbit(t){if(0==t)return-1;var r=0;return 0==(65535&t)&&(t>>=16,r+=16),0==(255&t)&&(t>>=8,r+=8),0==(15&t)&&(t>>=4,r+=4),0==(3&t)&&(t>>=2,r+=2),0==(1&t)&&++r,r}function cbit(t){for(var r=0;0!=t;)t&=t-1,++r;return r}function NullExp(){}function nNop(t){return t}function Barrett(t){this.r2=nbi(),this.q3=nbi(),BigInteger.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}Classic.prototype.convert=function cConvert(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},Classic.prototype.revert=function cRevert(t){return t},Classic.prototype.reduce=function cReduce(t){t.divRemTo(this.m,null,t)},Classic.prototype.mulTo=function cMulTo(t,r,i){t.multiplyTo(r,i),this.reduce(i)},Classic.prototype.sqrTo=function cSqrTo(t,r){t.squareTo(r),this.reduce(r)},Montgomery.prototype.convert=function montConvert(t){var r=nbi();return t.abs().dlShiftTo(this.m.t,r),r.divRemTo(this.m,null,r),t.s<0&&r.compareTo(BigInteger.ZERO)>0&&this.m.subTo(r,r),r},Montgomery.prototype.revert=function montRevert(t){var r=nbi();return t.copyTo(r),this.reduce(r),r},Montgomery.prototype.reduce=function montReduce(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var r=0;r<this.m.t;++r){var i=32767&t[r],o=i*this.mpl+((i*this.mph+(t[r]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=r+this.m.t]+=this.m.am(0,o,t,r,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},Montgomery.prototype.mulTo=function montMulTo(t,r,i){t.multiplyTo(r,i),this.reduce(i)},Montgomery.prototype.sqrTo=function montSqrTo(t,r){t.squareTo(r),this.reduce(r)},BigInteger.prototype.copyTo=function bnpCopyTo(t){for(var r=this.t-1;r>=0;--r)t[r]=this[r];t.t=this.t,t.s=this.s},BigInteger.prototype.fromInt=function bnpFromInt(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},BigInteger.prototype.fromString=function bnpFromString(t,r){var i;if(16==r)i=4;else if(8==r)i=3;else if(256==r)i=8;else if(2==r)i=1;else if(32==r)i=5;else{if(4!=r)return void this.fromRadix(t,r);i=2}this.t=0,this.s=0;for(var o=t.length,a=!1,l=0;--o>=0;){var u=8==i?255&t[o]:intAt(t,o);u<0?"-"==t.charAt(o)&&(a=!0):(a=!1,0==l?this[this.t++]=u:l+i>this.DB?(this[this.t-1]|=(u&(1<<this.DB-l)-1)<<l,this[this.t++]=u>>this.DB-l):this[this.t-1]|=u<<l,(l+=i)>=this.DB&&(l-=this.DB))}8==i&&0!=(128&t[0])&&(this.s=-1,l>0&&(this[this.t-1]|=(1<<this.DB-l)-1<<l)),this.clamp(),a&&BigInteger.ZERO.subTo(this,this)},BigInteger.prototype.clamp=function bnpClamp(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},BigInteger.prototype.dlShiftTo=function bnpDLShiftTo(t,r){var i;for(i=this.t-1;i>=0;--i)r[i+t]=this[i];for(i=t-1;i>=0;--i)r[i]=0;r.t=this.t+t,r.s=this.s},BigInteger.prototype.drShiftTo=function bnpDRShiftTo(t,r){for(var i=t;i<this.t;++i)r[i-t]=this[i];r.t=Math.max(this.t-t,0),r.s=this.s},BigInteger.prototype.lShiftTo=function bnpLShiftTo(t,r){var i,o=t%this.DB,a=this.DB-o,l=(1<<a)-1,u=Math.floor(t/this.DB),c=this.s<<o&this.DM;for(i=this.t-1;i>=0;--i)r[i+u+1]=this[i]>>a|c,c=(this[i]&l)<<o;for(i=u-1;i>=0;--i)r[i]=0;r[u]=c,r.t=this.t+u+1,r.s=this.s,r.clamp()},BigInteger.prototype.rShiftTo=function bnpRShiftTo(t,r){r.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)r.t=0;else{var o=t%this.DB,a=this.DB-o,l=(1<<o)-1;r[0]=this[i]>>o;for(var u=i+1;u<this.t;++u)r[u-i-1]|=(this[u]&l)<<a,r[u-i]=this[u]>>o;o>0&&(r[this.t-i-1]|=(this.s&l)<<a),r.t=this.t-i,r.clamp()}},BigInteger.prototype.subTo=function bnpSubTo(t,r){for(var i=0,o=0,a=Math.min(t.t,this.t);i<a;)o+=this[i]-t[i],r[i++]=o&this.DM,o>>=this.DB;if(t.t<this.t){for(o-=t.s;i<this.t;)o+=this[i],r[i++]=o&this.DM,o>>=this.DB;o+=this.s}else{for(o+=this.s;i<t.t;)o-=t[i],r[i++]=o&this.DM,o>>=this.DB;o-=t.s}r.s=o<0?-1:0,o<-1?r[i++]=this.DV+o:o>0&&(r[i++]=o),r.t=i,r.clamp()},BigInteger.prototype.multiplyTo=function bnpMultiplyTo(t,r){var i=this.abs(),o=t.abs(),a=i.t;for(r.t=a+o.t;--a>=0;)r[a]=0;for(a=0;a<o.t;++a)r[a+i.t]=i.am(0,o[a],r,a,0,i.t);r.s=0,r.clamp(),this.s!=t.s&&BigInteger.ZERO.subTo(r,r)},BigInteger.prototype.squareTo=function bnpSquareTo(t){for(var r=this.abs(),i=t.t=2*r.t;--i>=0;)t[i]=0;for(i=0;i<r.t-1;++i){var o=r.am(i,r[i],t,2*i,0,1);(t[i+r.t]+=r.am(i+1,2*r[i],t,2*i+1,o,r.t-i-1))>=r.DV&&(t[i+r.t]-=r.DV,t[i+r.t+1]=1)}t.t>0&&(t[t.t-1]+=r.am(i,r[i],t,2*i,0,1)),t.s=0,t.clamp()},BigInteger.prototype.divRemTo=function bnpDivRemTo(t,r,i){var o=t.abs();if(!(o.t<=0)){var a=this.abs();if(a.t<o.t)return null!=r&&r.fromInt(0),void(null!=i&&this.copyTo(i));null==i&&(i=nbi());var l=nbi(),u=this.s,c=t.s,h=this.DB-nbits(o[o.t-1]);h>0?(o.lShiftTo(h,l),a.lShiftTo(h,i)):(o.copyTo(l),a.copyTo(i));var p=l.t,d=l[p-1];if(0!=d){var y=d*(1<<this.F1)+(p>1?l[p-2]>>this.F2:0),v=this.FV/y,P=(1<<this.F1)/y,m=1<<this.F2,g=i.t,_=g-p,b=null==r?nbi():r;for(l.dlShiftTo(_,b),i.compareTo(b)>=0&&(i[i.t++]=1,i.subTo(b,i)),BigInteger.ONE.dlShiftTo(p,b),b.subTo(l,l);l.t<p;)l[l.t++]=0;for(;--_>=0;){var x=i[--g]==d?this.DM:Math.floor(i[g]*v+(i[g-1]+m)*P);if((i[g]+=l.am(0,x,i,_,0,p))<x)for(l.dlShiftTo(_,b),i.subTo(b,i);i[g]<--x;)i.subTo(b,i)}null!=r&&(i.drShiftTo(p,r),u!=c&&BigInteger.ZERO.subTo(r,r)),i.t=p,i.clamp(),h>0&&i.rShiftTo(h,i),u<0&&BigInteger.ZERO.subTo(i,i)}}},BigInteger.prototype.invDigit=function bnpInvDigit(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var r=3&t;return(r=(r=(r=(r=r*(2-(15&t)*r)&15)*(2-(255&t)*r)&255)*(2-((65535&t)*r&65535))&65535)*(2-t*r%this.DV)%this.DV)>0?this.DV-r:-r},BigInteger.prototype.isEven=function bnpIsEven(){return 0==(this.t>0?1&this[0]:this.s)},BigInteger.prototype.exp=function bnpExp(t,r){if(t>4294967295||t<1)return BigInteger.ONE;var i=nbi(),o=nbi(),a=r.convert(this),l=nbits(t)-1;for(a.copyTo(i);--l>=0;)if(r.sqrTo(i,o),(t&1<<l)>0)r.mulTo(o,a,i);else{var u=i;i=o,o=u}return r.revert(i)},BigInteger.prototype.toString=function bnToString(t){if(this.s<0)return"-"+this.negate().toString(t);var r;if(16==t)r=4;else if(8==t)r=3;else if(2==t)r=1;else if(32==t)r=5;else{if(4!=t)return this.toRadix(t);r=2}var i,o=(1<<r)-1,a=!1,l="",u=this.t,c=this.DB-u*this.DB%r;if(u-- >0)for(c<this.DB&&(i=this[u]>>c)>0&&(a=!0,l=int2char(i));u>=0;)c<r?(i=(this[u]&(1<<c)-1)<<r-c,i|=this[--u]>>(c+=this.DB-r)):(i=this[u]>>(c-=r)&o,c<=0&&(c+=this.DB,--u)),i>0&&(a=!0),a&&(l+=int2char(i));return a?l:"0"},BigInteger.prototype.negate=function bnNegate(){var t=nbi();return BigInteger.ZERO.subTo(this,t),t},BigInteger.prototype.abs=function bnAbs(){return this.s<0?this.negate():this},BigInteger.prototype.compareTo=function bnCompareTo(t){var r=this.s-t.s;if(0!=r)return r;var i=this.t;if(0!=(r=i-t.t))return this.s<0?-r:r;for(;--i>=0;)if(0!=(r=this[i]-t[i]))return r;return 0},BigInteger.prototype.bitLength=function bnBitLength(){return this.t<=0?0:this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)},BigInteger.prototype.mod=function bnMod(t){var r=nbi();return this.abs().divRemTo(t,null,r),this.s<0&&r.compareTo(BigInteger.ZERO)>0&&t.subTo(r,r),r},BigInteger.prototype.modPowInt=function bnModPowInt(t,r){var i;return i=t<256||r.isEven()?new Classic(r):new Montgomery(r),this.exp(t,i)},BigInteger.ZERO=nbv(0),BigInteger.ONE=nbv(1),NullExp.prototype.convert=nNop,NullExp.prototype.revert=nNop,NullExp.prototype.mulTo=function nMulTo(t,r,i){t.multiplyTo(r,i)},NullExp.prototype.sqrTo=function nSqrTo(t,r){t.squareTo(r)},Barrett.prototype.convert=function barrettConvert(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var r=nbi();return t.copyTo(r),this.reduce(r),r},Barrett.prototype.revert=function barrettRevert(t){return t},Barrett.prototype.reduce=function barrettReduce(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},Barrett.prototype.mulTo=function barrettMulTo(t,r,i){t.multiplyTo(r,i),this.reduce(i)},Barrett.prototype.sqrTo=function barrettSqrTo(t,r){t.squareTo(r),this.reduce(r)};var d=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],y=(1<<26)/d[d.length-1];BigInteger.prototype.chunkSize=function bnpChunkSize(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},BigInteger.prototype.toRadix=function bnpToRadix(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var r=this.chunkSize(t),i=Math.pow(t,r),o=nbv(i),a=nbi(),l=nbi(),u="";for(this.divRemTo(o,a,l);a.signum()>0;)u=(i+l.intValue()).toString(t).substr(1)+u,a.divRemTo(o,a,l);return l.intValue().toString(t)+u},BigInteger.prototype.fromRadix=function bnpFromRadix(t,r){this.fromInt(0),null==r&&(r=10);for(var i=this.chunkSize(r),o=Math.pow(r,i),a=!1,l=0,u=0,c=0;c<t.length;++c){var h=intAt(t,c);h<0?"-"==t.charAt(c)&&0==this.signum()&&(a=!0):(u=r*u+h,++l>=i&&(this.dMultiply(o),this.dAddOffset(u,0),l=0,u=0))}l>0&&(this.dMultiply(Math.pow(r,l)),this.dAddOffset(u,0)),a&&BigInteger.ZERO.subTo(this,this)},BigInteger.prototype.fromNumber=function bnpFromNumber(t,r,i){if("number"==typeof r)if(t<2)this.fromInt(1);else for(this.fromNumber(t,i),this.testBit(t-1)||this.bitwiseTo(BigInteger.ONE.shiftLeft(t-1),op_or,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(r);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(BigInteger.ONE.shiftLeft(t-1),this);else{var o=new Array,a=7&t;o.length=1+(t>>3),r.nextBytes(o),a>0?o[0]&=(1<<a)-1:o[0]=0,this.fromString(o,256)}},BigInteger.prototype.bitwiseTo=function bnpBitwiseTo(t,r,i){var o,a,l=Math.min(t.t,this.t);for(o=0;o<l;++o)i[o]=r(this[o],t[o]);if(t.t<this.t){for(a=t.s&this.DM,o=l;o<this.t;++o)i[o]=r(this[o],a);i.t=this.t}else{for(a=this.s&this.DM,o=l;o<t.t;++o)i[o]=r(a,t[o]);i.t=t.t}i.s=r(this.s,t.s),i.clamp()},BigInteger.prototype.changeBit=function bnpChangeBit(t,r){var i=BigInteger.ONE.shiftLeft(t);return this.bitwiseTo(i,r,i),i},BigInteger.prototype.addTo=function bnpAddTo(t,r){for(var i=0,o=0,a=Math.min(t.t,this.t);i<a;)o+=this[i]+t[i],r[i++]=o&this.DM,o>>=this.DB;if(t.t<this.t){for(o+=t.s;i<this.t;)o+=this[i],r[i++]=o&this.DM,o>>=this.DB;o+=this.s}else{for(o+=this.s;i<t.t;)o+=t[i],r[i++]=o&this.DM,o>>=this.DB;o+=t.s}r.s=o<0?-1:0,o>0?r[i++]=o:o<-1&&(r[i++]=this.DV+o),r.t=i,r.clamp()},BigInteger.prototype.dMultiply=function bnpDMultiply(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},BigInteger.prototype.dAddOffset=function bnpDAddOffset(t,r){if(0!=t){for(;this.t<=r;)this[this.t++]=0;for(this[r]+=t;this[r]>=this.DV;)this[r]-=this.DV,++r>=this.t&&(this[this.t++]=0),++this[r]}},BigInteger.prototype.multiplyLowerTo=function bnpMultiplyLowerTo(t,r,i){var o,a=Math.min(this.t+t.t,r);for(i.s=0,i.t=a;a>0;)i[--a]=0;for(o=i.t-this.t;a<o;++a)i[a+this.t]=this.am(0,t[a],i,a,0,this.t);for(o=Math.min(t.t,r);a<o;++a)this.am(0,t[a],i,a,0,r-a);i.clamp()},BigInteger.prototype.multiplyUpperTo=function bnpMultiplyUpperTo(t,r,i){--r;var o=i.t=this.t+t.t-r;for(i.s=0;--o>=0;)i[o]=0;for(o=Math.max(r-this.t,0);o<t.t;++o)i[this.t+o-r]=this.am(r-o,t[o],i,0,0,this.t+o-r);i.clamp(),i.drShiftTo(1,i)},BigInteger.prototype.modInt=function bnpModInt(t){if(t<=0)return 0;var r=this.DV%t,i=this.s<0?t-1:0;if(this.t>0)if(0==r)i=this[0]%t;else for(var o=this.t-1;o>=0;--o)i=(r*i+this[o])%t;return i},BigInteger.prototype.millerRabin=function bnpMillerRabin(t){var r=this.subtract(BigInteger.ONE),i=r.getLowestSetBit();if(i<=0)return!1;var o=r.shiftRight(i);(t=t+1>>1)>d.length&&(t=d.length);for(var a=nbi(),l=0;l<t;++l){a.fromInt(d[Math.floor(Math.random()*d.length)]);var u=a.modPow(o,this);if(0!=u.compareTo(BigInteger.ONE)&&0!=u.compareTo(r)){for(var c=1;c++<i&&0!=u.compareTo(r);)if(0==(u=u.modPowInt(2,this)).compareTo(BigInteger.ONE))return!1;if(0!=u.compareTo(r))return!1}}return!0},BigInteger.prototype.clone=function bnClone(){var t=nbi();return this.copyTo(t),t},BigInteger.prototype.intValue=function bnIntValue(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},BigInteger.prototype.byteValue=function bnByteValue(){return 0==this.t?this.s:this[0]<<24>>24},BigInteger.prototype.shortValue=function bnShortValue(){return 0==this.t?this.s:this[0]<<16>>16},BigInteger.prototype.signum=function bnSigNum(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},BigInteger.prototype.toByteArray=function bnToByteArray(){var t=this.t,r=new Array;r[0]=this.s;var i,o=this.DB-t*this.DB%8,a=0;if(t-- >0)for(o<this.DB&&(i=this[t]>>o)!=(this.s&this.DM)>>o&&(r[a++]=i|this.s<<this.DB-o);t>=0;)o<8?(i=(this[t]&(1<<o)-1)<<8-o,i|=this[--t]>>(o+=this.DB-8)):(i=this[t]>>(o-=8)&255,o<=0&&(o+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==a&&(128&this.s)!=(128&i)&&++a,(a>0||i!=this.s)&&(r[a++]=i);return r},BigInteger.prototype.equals=function bnEquals(t){return 0==this.compareTo(t)},BigInteger.prototype.min=function bnMin(t){return this.compareTo(t)<0?this:t},BigInteger.prototype.max=function bnMax(t){return this.compareTo(t)>0?this:t},BigInteger.prototype.and=function bnAnd(t){var r=nbi();return this.bitwiseTo(t,op_and,r),r},BigInteger.prototype.or=function bnOr(t){var r=nbi();return this.bitwiseTo(t,op_or,r),r},BigInteger.prototype.xor=function bnXor(t){var r=nbi();return this.bitwiseTo(t,op_xor,r),r},BigInteger.prototype.andNot=function bnAndNot(t){var r=nbi();return this.bitwiseTo(t,op_andnot,r),r},BigInteger.prototype.not=function bnNot(){for(var t=nbi(),r=0;r<this.t;++r)t[r]=this.DM&~this[r];return t.t=this.t,t.s=~this.s,t},BigInteger.prototype.shiftLeft=function bnShiftLeft(t){var r=nbi();return t<0?this.rShiftTo(-t,r):this.lShiftTo(t,r),r},BigInteger.prototype.shiftRight=function bnShiftRight(t){var r=nbi();return t<0?this.lShiftTo(-t,r):this.rShiftTo(t,r),r},BigInteger.prototype.getLowestSetBit=function bnGetLowestSetBit(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+lbit(this[t]);return this.s<0?this.t*this.DB:-1},BigInteger.prototype.bitCount=function bnBitCount(){for(var t=0,r=this.s&this.DM,i=0;i<this.t;++i)t+=cbit(this[i]^r);return t},BigInteger.prototype.testBit=function bnTestBit(t){var r=Math.floor(t/this.DB);return r>=this.t?0!=this.s:0!=(this[r]&1<<t%this.DB)},BigInteger.prototype.setBit=function bnSetBit(t){return this.changeBit(t,op_or)},BigInteger.prototype.clearBit=function bnClearBit(t){return this.changeBit(t,op_andnot)},BigInteger.prototype.flipBit=function bnFlipBit(t){return this.changeBit(t,op_xor)},BigInteger.prototype.add=function bnAdd(t){var r=nbi();return this.addTo(t,r),r},BigInteger.prototype.subtract=function bnSubtract(t){var r=nbi();return this.subTo(t,r),r},BigInteger.prototype.multiply=function bnMultiply(t){var r=nbi();return this.multiplyTo(t,r),r},BigInteger.prototype.divide=function bnDivide(t){var r=nbi();return this.divRemTo(t,r,null),r},BigInteger.prototype.remainder=function bnRemainder(t){var r=nbi();return this.divRemTo(t,null,r),r},BigInteger.prototype.divideAndRemainder=function bnDivideAndRemainder(t){var r=nbi(),i=nbi();return this.divRemTo(t,r,i),new Array(r,i)},BigInteger.prototype.modPow=function bnModPow(t,r){var i,o,a=t.bitLength(),l=nbv(1);if(a<=0)return l;i=a<18?1:a<48?3:a<144?4:a<768?5:6,o=a<8?new Classic(r):r.isEven()?new Barrett(r):new Montgomery(r);var u=new Array,c=3,h=i-1,p=(1<<i)-1;if(u[1]=o.convert(this),i>1){var d=nbi();for(o.sqrTo(u[1],d);c<=p;)u[c]=nbi(),o.mulTo(d,u[c-2],u[c]),c+=2}var y,v,P=t.t-1,m=!0,g=nbi();for(a=nbits(t[P])-1;P>=0;){for(a>=h?y=t[P]>>a-h&p:(y=(t[P]&(1<<a+1)-1)<<h-a,P>0&&(y|=t[P-1]>>this.DB+a-h)),c=i;0==(1&y);)y>>=1,--c;if((a-=c)<0&&(a+=this.DB,--P),m)u[y].copyTo(l),m=!1;else{for(;c>1;)o.sqrTo(l,g),o.sqrTo(g,l),c-=2;c>0?o.sqrTo(l,g):(v=l,l=g,g=v),o.mulTo(g,u[y],l)}for(;P>=0&&0==(t[P]&1<<a);)o.sqrTo(l,g),v=l,l=g,g=v,--a<0&&(a=this.DB-1,--P)}return o.revert(l)},BigInteger.prototype.modInverse=function bnModInverse(t){var r=t.isEven();if(this.isEven()&&r||0==t.signum())return BigInteger.ZERO;for(var i=t.clone(),o=this.clone(),a=nbv(1),l=nbv(0),u=nbv(0),c=nbv(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),r?(a.isEven()&&l.isEven()||(a.addTo(this,a),l.subTo(t,l)),a.rShiftTo(1,a)):l.isEven()||l.subTo(t,l),l.rShiftTo(1,l);for(;o.isEven();)o.rShiftTo(1,o),r?(u.isEven()&&c.isEven()||(u.addTo(this,u),c.subTo(t,c)),u.rShiftTo(1,u)):c.isEven()||c.subTo(t,c),c.rShiftTo(1,c);i.compareTo(o)>=0?(i.subTo(o,i),r&&a.subTo(u,a),l.subTo(c,l)):(o.subTo(i,o),r&&u.subTo(a,u),c.subTo(l,c))}return 0!=o.compareTo(BigInteger.ONE)?BigInteger.ZERO:c.compareTo(t)>=0?c.subtract(t):c.signum()<0?(c.addTo(t,c),c.signum()<0?c.add(t):c):c},BigInteger.prototype.pow=function bnPow(t){return this.exp(t,new NullExp)},BigInteger.prototype.gcd=function bnGCD(t){var r=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(r.compareTo(i)<0){var o=r;r=i,i=o}var a=r.getLowestSetBit(),l=i.getLowestSetBit();if(l<0)return r;for(a<l&&(l=a),l>0&&(r.rShiftTo(l,r),i.rShiftTo(l,i));r.signum()>0;)(a=r.getLowestSetBit())>0&&r.rShiftTo(a,r),(a=i.getLowestSetBit())>0&&i.rShiftTo(a,i),r.compareTo(i)>=0?(r.subTo(i,r),r.rShiftTo(1,r)):(i.subTo(r,i),i.rShiftTo(1,i));return l>0&&i.lShiftTo(l,i),i},BigInteger.prototype.isProbablePrime=function bnIsProbablePrime(t){var r,i=this.abs();if(1==i.t&&i[0]<=d[d.length-1]){for(r=0;r<d.length;++r)if(i[0]==d[r])return!0;return!1}if(i.isEven())return!1;for(r=1;r<d.length;){for(var o=d[r],a=r+1;a<d.length&&o<y;)o*=d[a++];for(o=i.modInt(o);r<a;)if(o%d[r++]==0)return!1}return i.millerRabin(t)},BigInteger.prototype.square=function bnSquare(){var t=nbi();return this.squareTo(t),t};var v=BigInteger;v.prototype.IsNegative=function(){return-1==this.compareTo(v.ZERO)},v.op_Equality=function(t,r){return 0==t.compareTo(r)},v.op_Inequality=function(t,r){return 0!=t.compareTo(r)},v.op_GreaterThan=function(t,r){return t.compareTo(r)>0},v.op_LessThan=function(t,r){return t.compareTo(r)<0},v.op_Addition=function(t,r){return new v(t,void 0,void 0).add(new v(r,void 0,void 0))},v.op_Subtraction=function(t,r){return new v(t,void 0,void 0).subtract(new v(r,void 0,void 0))},v.Int128Mul=function(t,r){return new v(t,void 0,void 0).multiply(new v(r,void 0,void 0))},v.op_Division=function(t,r){return t.divide(r)},v.prototype.ToDouble=function(){return parseFloat(this.toString())};var P=function Inherit(t,r){var i;if(void 0===Object.getOwnPropertyNames){for(i in r.prototype)void 0!==t.prototype[i]&&t.prototype[i]!==Object.prototype[i]||(t.prototype[i]=r.prototype[i]);for(i in r)void 0===t[i]&&(t[i]=r[i]);t.$baseCtor=r}else{for(var o=Object.getOwnPropertyNames(r.prototype),a=0;a<o.length;a++)void 0===Object.getOwnPropertyDescriptor(t.prototype,o[a])&&Object.defineProperty(t.prototype,o[a],Object.getOwnPropertyDescriptor(r.prototype,o[a]));for(i in r)void 0===t[i]&&(t[i]=r[i]);t.$baseCtor=r}};i.Path=function(){return[]},i.Path.prototype.push=Array.prototype.push,i.Paths=function(){return[]},i.Paths.prototype.push=Array.prototype.push,i.DoublePoint=function(){var t=arguments;this.X=0,this.Y=0,1===t.length?(this.X=t[0].X,this.Y=t[0].Y):2===t.length&&(this.X=t[0],this.Y=t[1])},i.DoublePoint0=function(){this.X=0,this.Y=0},i.DoublePoint0.prototype=i.DoublePoint.prototype,i.DoublePoint1=function(t){this.X=t.X,this.Y=t.Y},i.DoublePoint1.prototype=i.DoublePoint.prototype,i.DoublePoint2=function(t,r){this.X=t,this.Y=r},i.DoublePoint2.prototype=i.DoublePoint.prototype,i.PolyNode=function(){this.m_Parent=null,this.m_polygon=new i.Path,this.m_Index=0,this.m_jointype=0,this.m_endtype=0,this.m_Childs=[],this.IsOpen=!1},i.PolyNode.prototype.IsHoleNode=function(){for(var t=!0,r=this.m_Parent;null!==r;)t=!t,r=r.m_Parent;return t},i.PolyNode.prototype.ChildCount=function(){return this.m_Childs.length},i.PolyNode.prototype.Contour=function(){return this.m_polygon},i.PolyNode.prototype.AddChild=function(t){var r=this.m_Childs.length;this.m_Childs.push(t),t.m_Parent=this,t.m_Index=r},i.PolyNode.prototype.GetNext=function(){return this.m_Childs.length>0?this.m_Childs[0]:this.GetNextSiblingUp()},i.PolyNode.prototype.GetNextSiblingUp=function(){return null===this.m_Parent?null:this.m_Index===this.m_Parent.m_Childs.length-1?this.m_Parent.GetNextSiblingUp():this.m_Parent.m_Childs[this.m_Index+1]},i.PolyNode.prototype.Childs=function(){return this.m_Childs},i.PolyNode.prototype.Parent=function(){return this.m_Parent},i.PolyNode.prototype.IsHole=function(){return this.IsHoleNode()},i.PolyTree=function(){this.m_AllPolys=[],i.PolyNode.call(this)},i.PolyTree.prototype.Clear=function(){for(var t=0,r=this.m_AllPolys.length;t<r;t++)this.m_AllPolys[t]=null;this.m_AllPolys.length=0,this.m_Childs.length=0},i.PolyTree.prototype.GetFirst=function(){return this.m_Childs.length>0?this.m_Childs[0]:null},i.PolyTree.prototype.Total=function(){var t=this.m_AllPolys.length;return t>0&&this.m_Childs[0]!==this.m_AllPolys[0]&&t--,t},P(i.PolyTree,i.PolyNode),i.Math_Abs_Int64=i.Math_Abs_Int32=i.Math_Abs_Double=function(t){return Math.abs(t)},i.Math_Max_Int32_Int32=function(t,r){return Math.max(t,r)},u.msie||u.opera||u.safari?i.Cast_Int32=function(t){return 0|t}:i.Cast_Int32=function(t){return~~t},void 0===Number.toInteger&&(Number.toInteger=null),u.chrome?i.Cast_Int64=function(t){return t<-2147483648||t>2147483647?t<0?Math.ceil(t):Math.floor(t):~~t}:u.firefox&&"function"==typeof Number.toInteger?i.Cast_Int64=function(t){return Number.toInteger(t)}:u.msie7||u.msie8?i.Cast_Int64=function(t){return parseInt(t,10)}:u.msie?i.Cast_Int64=function(t){return t<-2147483648||t>2147483647?t<0?Math.ceil(t):Math.floor(t):0|t}:i.Cast_Int64=function(t){return t<0?Math.ceil(t):Math.floor(t)},i.Clear=function(t){t.length=0},i.PI=3.141592653589793,i.PI2=6.283185307179586,i.IntPoint=function(){var t=arguments,r=t.length;if(this.X=0,this.Y=0,i.use_xyz)if(this.Z=0,3===r)this.X=t[0],this.Y=t[1],this.Z=t[2];else if(2===r)this.X=t[0],this.Y=t[1],this.Z=0;else if(1===r)if(t[0]instanceof i.DoublePoint){var o=t[0];this.X=i.Clipper.Round(o.X),this.Y=i.Clipper.Round(o.Y),this.Z=0}else{void 0===(a=t[0]).Z&&(a.Z=0),this.X=a.X,this.Y=a.Y,this.Z=a.Z}else this.X=0,this.Y=0,this.Z=0;else if(2===r)this.X=t[0],this.Y=t[1];else if(1===r)if(t[0]instanceof i.DoublePoint){o=t[0];this.X=i.Clipper.Round(o.X),this.Y=i.Clipper.Round(o.Y)}else{var a=t[0];this.X=a.X,this.Y=a.Y}else this.X=0,this.Y=0},i.IntPoint.op_Equality=function(t,r){return t.X===r.X&&t.Y===r.Y},i.IntPoint.op_Inequality=function(t,r){return t.X!==r.X||t.Y!==r.Y},i.IntPoint0=function(){this.X=0,this.Y=0,i.use_xyz&&(this.Z=0)},i.IntPoint0.prototype=i.IntPoint.prototype,i.IntPoint1=function(t){this.X=t.X,this.Y=t.Y,i.use_xyz&&(void 0===t.Z?this.Z=0:this.Z=t.Z)},i.IntPoint1.prototype=i.IntPoint.prototype,i.IntPoint1dp=function(t){this.X=i.Clipper.Round(t.X),this.Y=i.Clipper.Round(t.Y),i.use_xyz&&(this.Z=0)},i.IntPoint1dp.prototype=i.IntPoint.prototype,i.IntPoint2=function(t,r,o){this.X=t,this.Y=r,i.use_xyz&&(this.Z=void 0===o?0:o)},i.IntPoint2.prototype=i.IntPoint.prototype,i.IntRect=function(){var t=arguments,r=t.length;if(4===r)this.left=t[0],this.top=t[1],this.right=t[2],this.bottom=t[3];else if(1===r){var i=t[0];this.left=i.left,this.top=i.top,this.right=i.right,this.bottom=i.bottom}else this.left=0,this.top=0,this.right=0,this.bottom=0},i.IntRect0=function(){this.left=0,this.top=0,this.right=0,this.bottom=0},i.IntRect0.prototype=i.IntRect.prototype,i.IntRect1=function(t){this.left=t.left,this.top=t.top,this.right=t.right,this.bottom=t.bottom},i.IntRect1.prototype=i.IntRect.prototype,i.IntRect4=function(t,r,i,o){this.left=t,this.top=r,this.right=i,this.bottom=o},i.IntRect4.prototype=i.IntRect.prototype,i.ClipType={ctIntersection:0,ctUnion:1,ctDifference:2,ctXor:3},i.PolyType={ptSubject:0,ptClip:1},i.PolyFillType={pftEvenOdd:0,pftNonZero:1,pftPositive:2,pftNegative:3},i.JoinType={jtSquare:0,jtRound:1,jtMiter:2},i.EndType={etOpenSquare:0,etOpenRound:1,etOpenButt:2,etClosedLine:3,etClosedPolygon:4},i.EdgeSide={esLeft:0,esRight:1},i.Direction={dRightToLeft:0,dLeftToRight:1},i.TEdge=function(){this.Bot=new i.IntPoint0,this.Curr=new i.IntPoint0,this.Top=new i.IntPoint0,this.Delta=new i.IntPoint0,this.Dx=0,this.PolyTyp=i.PolyType.ptSubject,this.Side=i.EdgeSide.esLeft,this.WindDelta=0,this.WindCnt=0,this.WindCnt2=0,this.OutIdx=0,this.Next=null,this.Prev=null,this.NextInLML=null,this.NextInAEL=null,this.PrevInAEL=null,this.NextInSEL=null,this.PrevInSEL=null},i.IntersectNode=function(){this.Edge1=null,this.Edge2=null,this.Pt=new i.IntPoint0},i.MyIntersectNodeSort=function(){},i.MyIntersectNodeSort.Compare=function(t,r){var i=r.Pt.Y-t.Pt.Y;return i>0?1:i<0?-1:0},i.LocalMinima=function(){this.Y=0,this.LeftBound=null,this.RightBound=null,this.Next=null},i.Scanbeam=function(){this.Y=0,this.Next=null},i.Maxima=function(){this.X=0,this.Next=null,this.Prev=null},i.OutRec=function(){this.Idx=0,this.IsHole=!1,this.IsOpen=!1,this.FirstLeft=null,this.Pts=null,this.BottomPt=null,this.PolyNode=null},i.OutPt=function(){this.Idx=0,this.Pt=new i.IntPoint0,this.Next=null,this.Prev=null},i.Join=function(){this.OutPt1=null,this.OutPt2=null,this.OffPt=new i.IntPoint0},i.ClipperBase=function(){this.m_MinimaList=null,this.m_CurrentLM=null,this.m_edges=new Array,this.m_UseFullRange=!1,this.m_HasOpenPaths=!1,this.PreserveCollinear=!1,this.m_Scanbeam=null,this.m_PolyOuts=null,this.m_ActiveEdges=null},i.ClipperBase.horizontal=-9007199254740992,i.ClipperBase.Skip=-2,i.ClipperBase.Unassigned=-1,i.ClipperBase.tolerance=1e-20,i.ClipperBase.loRange=47453132,i.ClipperBase.hiRange=0xfffffffffffff,i.ClipperBase.near_zero=function(t){return t>-i.ClipperBase.tolerance&&t<i.ClipperBase.tolerance},i.ClipperBase.IsHorizontal=function(t){return 0===t.Delta.Y},i.ClipperBase.prototype.PointIsVertex=function(t,r){var o=r;do{if(i.IntPoint.op_Equality(o.Pt,t))return!0;o=o.Next}while(o!==r);return!1},i.ClipperBase.prototype.PointOnLineSegment=function(t,r,i,o){return o?t.X===r.X&&t.Y===r.Y||t.X===i.X&&t.Y===i.Y||t.X>r.X==t.X<i.X&&t.Y>r.Y==t.Y<i.Y&&v.op_Equality(v.Int128Mul(t.X-r.X,i.Y-r.Y),v.Int128Mul(i.X-r.X,t.Y-r.Y)):t.X===r.X&&t.Y===r.Y||t.X===i.X&&t.Y===i.Y||t.X>r.X==t.X<i.X&&t.Y>r.Y==t.Y<i.Y&&(t.X-r.X)*(i.Y-r.Y)==(i.X-r.X)*(t.Y-r.Y)},i.ClipperBase.prototype.PointOnPolygon=function(t,r,i){for(var o=r;;){if(this.PointOnLineSegment(t,o.Pt,o.Next.Pt,i))return!0;if((o=o.Next)===r)break}return!1},i.ClipperBase.prototype.SlopesEqual=i.ClipperBase.SlopesEqual=function(){var t,r,o,a,l,u,c=arguments,h=c.length;return 3===h?(t=c[0],r=c[1],c[2]?v.op_Equality(v.Int128Mul(t.Delta.Y,r.Delta.X),v.Int128Mul(t.Delta.X,r.Delta.Y)):i.Cast_Int64(t.Delta.Y*r.Delta.X)===i.Cast_Int64(t.Delta.X*r.Delta.Y)):4===h?(o=c[0],a=c[1],l=c[2],c[3]?v.op_Equality(v.Int128Mul(o.Y-a.Y,a.X-l.X),v.Int128Mul(o.X-a.X,a.Y-l.Y)):i.Cast_Int64((o.Y-a.Y)*(a.X-l.X))-i.Cast_Int64((o.X-a.X)*(a.Y-l.Y))==0):(o=c[0],a=c[1],l=c[2],u=c[3],c[4]?v.op_Equality(v.Int128Mul(o.Y-a.Y,l.X-u.X),v.Int128Mul(o.X-a.X,l.Y-u.Y)):i.Cast_Int64((o.Y-a.Y)*(l.X-u.X))-i.Cast_Int64((o.X-a.X)*(l.Y-u.Y))==0)},i.ClipperBase.SlopesEqual3=function(t,r,o){return o?v.op_Equality(v.Int128Mul(t.Delta.Y,r.Delta.X),v.Int128Mul(t.Delta.X,r.Delta.Y)):i.Cast_Int64(t.Delta.Y*r.Delta.X)===i.Cast_Int64(t.Delta.X*r.Delta.Y)},i.ClipperBase.SlopesEqual4=function(t,r,o,a){return a?v.op_Equality(v.Int128Mul(t.Y-r.Y,r.X-o.X),v.Int128Mul(t.X-r.X,r.Y-o.Y)):i.Cast_Int64((t.Y-r.Y)*(r.X-o.X))-i.Cast_Int64((t.X-r.X)*(r.Y-o.Y))==0},i.ClipperBase.SlopesEqual5=function(t,r,o,a,l){return l?v.op_Equality(v.Int128Mul(t.Y-r.Y,o.X-a.X),v.Int128Mul(t.X-r.X,o.Y-a.Y)):i.Cast_Int64((t.Y-r.Y)*(o.X-a.X))-i.Cast_Int64((t.X-r.X)*(o.Y-a.Y))==0},i.ClipperBase.prototype.Clear=function(){this.DisposeLocalMinimaList();for(var t=0,r=this.m_edges.length;t<r;++t){for(var o=0,a=this.m_edges[t].length;o<a;++o)this.m_edges[t][o]=null;i.Clear(this.m_edges[t])}i.Clear(this.m_edges),this.m_UseFullRange=!1,this.m_HasOpenPaths=!1},i.ClipperBase.prototype.DisposeLocalMinimaList=function(){for(;null!==this.m_MinimaList;){var t=this.m_MinimaList.Next;this.m_MinimaList=null,this.m_MinimaList=t}this.m_CurrentLM=null},i.ClipperBase.prototype.RangeTest=function(t,r){r.Value?(t.X>i.ClipperBase.hiRange||t.Y>i.ClipperBase.hiRange||-t.X>i.ClipperBase.hiRange||-t.Y>i.ClipperBase.hiRange)&&i.Error("Coordinate outside allowed range in RangeTest()."):(t.X>i.ClipperBase.loRange||t.Y>i.ClipperBase.loRange||-t.X>i.ClipperBase.loRange||-t.Y>i.ClipperBase.loRange)&&(r.Value=!0,this.RangeTest(t,r))},i.ClipperBase.prototype.InitEdge=function(t,r,o,a){t.Next=r,t.Prev=o,t.Curr.X=a.X,t.Curr.Y=a.Y,i.use_xyz&&(t.Curr.Z=a.Z),t.OutIdx=-1},i.ClipperBase.prototype.InitEdge2=function(t,r){t.Curr.Y>=t.Next.Curr.Y?(t.Bot.X=t.Curr.X,t.Bot.Y=t.Curr.Y,i.use_xyz&&(t.Bot.Z=t.Curr.Z),t.Top.X=t.Next.Curr.X,t.Top.Y=t.Next.Curr.Y,i.use_xyz&&(t.Top.Z=t.Next.Curr.Z)):(t.Top.X=t.Curr.X,t.Top.Y=t.Curr.Y,i.use_xyz&&(t.Top.Z=t.Curr.Z),t.Bot.X=t.Next.Curr.X,t.Bot.Y=t.Next.Curr.Y,i.use_xyz&&(t.Bot.Z=t.Next.Curr.Z)),this.SetDx(t),t.PolyTyp=r},i.ClipperBase.prototype.FindNextLocMin=function(t){for(var r;;){for(;i.IntPoint.op_Inequality(t.Bot,t.Prev.Bot)||i.IntPoint.op_Equality(t.Curr,t.Top);)t=t.Next;if(t.Dx!==i.ClipperBase.horizontal&&t.Prev.Dx!==i.ClipperBase.horizontal)break;for(;t.Prev.Dx===i.ClipperBase.horizontal;)t=t.Prev;for(r=t;t.Dx===i.ClipperBase.horizontal;)t=t.Next;if(t.Top.Y!==t.Prev.Bot.Y){r.Prev.Bot.X<t.Bot.X&&(t=r);break}}return t},i.ClipperBase.prototype.ProcessBound=function(t,r){var o,a,l=t;if(l.OutIdx===i.ClipperBase.Skip){if(t=l,r){for(;t.Top.Y===t.Next.Bot.Y;)t=t.Next;for(;t!==l&&t.Dx===i.ClipperBase.horizontal;)t=t.Prev}else{for(;t.Top.Y===t.Prev.Bot.Y;)t=t.Prev;for(;t!==l&&t.Dx===i.ClipperBase.horizontal;)t=t.Next}if(t===l)l=r?t.Next:t.Prev;else{t=r?l.Next:l.Prev;var u=new i.LocalMinima;u.Next=null,u.Y=t.Bot.Y,u.LeftBound=null,u.RightBound=t,t.WindDelta=0,l=this.ProcessBound(t,r),this.InsertLocalMinima(u)}return l}if(t.Dx===i.ClipperBase.horizontal&&((o=r?t.Prev:t.Next).Dx===i.ClipperBase.horizontal?o.Bot.X!==t.Bot.X&&o.Top.X!==t.Bot.X&&this.ReverseHorizontal(t):o.Bot.X!==t.Bot.X&&this.ReverseHorizontal(t)),o=t,r){for(;l.Top.Y===l.Next.Bot.Y&&l.Next.OutIdx!==i.ClipperBase.Skip;)l=l.Next;if(l.Dx===i.ClipperBase.horizontal&&l.Next.OutIdx!==i.ClipperBase.Skip){for(a=l;a.Prev.Dx===i.ClipperBase.horizontal;)a=a.Prev;a.Prev.Top.X>l.Next.Top.X&&(l=a.Prev)}for(;t!==l;)t.NextInLML=t.Next,t.Dx===i.ClipperBase.horizontal&&t!==o&&t.Bot.X!==t.Prev.Top.X&&this.ReverseHorizontal(t),t=t.Next;t.Dx===i.ClipperBase.horizontal&&t!==o&&t.Bot.X!==t.Prev.Top.X&&this.ReverseHorizontal(t),l=l.Next}else{for(;l.Top.Y===l.Prev.Bot.Y&&l.Prev.OutIdx!==i.ClipperBase.Skip;)l=l.Prev;if(l.Dx===i.ClipperBase.horizontal&&l.Prev.OutIdx!==i.ClipperBase.Skip){for(a=l;a.Next.Dx===i.ClipperBase.horizontal;)a=a.Next;(a.Next.Top.X===l.Prev.Top.X||a.Next.Top.X>l.Prev.Top.X)&&(l=a.Next)}for(;t!==l;)t.NextInLML=t.Prev,t.Dx===i.ClipperBase.horizontal&&t!==o&&t.Bot.X!==t.Next.Top.X&&this.ReverseHorizontal(t),t=t.Prev;t.Dx===i.ClipperBase.horizontal&&t!==o&&t.Bot.X!==t.Next.Top.X&&this.ReverseHorizontal(t),l=l.Prev}return l},i.ClipperBase.prototype.AddPath=function(t,r,o){i.use_lines?o||r!==i.PolyType.ptClip||i.Error("AddPath: Open paths must be subject."):o||i.Error("AddPath: Open paths have been disabled.");var a=t.length-1;if(o)for(;a>0&&i.IntPoint.op_Equality(t[a],t[0]);)--a;for(;a>0&&i.IntPoint.op_Equality(t[a],t[a-1]);)--a;if(o&&a<2||!o&&a<1)return!1;for(var l=new Array,u=0;u<=a;u++)l.push(new i.TEdge);var c=!0;l[1].Curr.X=t[1].X,l[1].Curr.Y=t[1].Y,i.use_xyz&&(l[1].Curr.Z=t[1].Z);var h={Value:this.m_UseFullRange};this.RangeTest(t[0],h),this.m_UseFullRange=h.Value,h.Value=this.m_UseFullRange,this.RangeTest(t[a],h),this.m_UseFullRange=h.Value,this.InitEdge(l[0],l[1],l[a],t[0]),this.InitEdge(l[a],l[0],l[a-1],t[a]);for(u=a-1;u>=1;--u)h.Value=this.m_UseFullRange,this.RangeTest(t[u],h),this.m_UseFullRange=h.Value,this.InitEdge(l[u],l[u+1],l[u-1],t[u]);for(var p,d=l[0],y=d,v=d;;)if(y.Curr!==y.Next.Curr||!o&&y.Next===d){if(y.Prev===y.Next)break;if(!o||!i.ClipperBase.SlopesEqual4(y.Prev.Curr,y.Curr,y.Next.Curr,this.m_UseFullRange)||this.PreserveCollinear&&this.Pt2IsBetweenPt1AndPt3(y.Prev.Curr,y.Curr,y.Next.Curr)){if((y=y.Next)===v||!o&&y.Next===d)break}else y===d&&(d=y.Next),v=y=(y=this.RemoveEdge(y)).Prev}else{if(y===y.Next)break;y===d&&(d=y.Next),v=y=this.RemoveEdge(y)}if(!o&&y===y.Next||o&&y.Prev===y.Next)return!1;o||(this.m_HasOpenPaths=!0,d.Prev.OutIdx=i.ClipperBase.Skip),y=d;do{this.InitEdge2(y,r),y=y.Next,c&&y.Curr.Y!==d.Curr.Y&&(c=!1)}while(y!==d);if(c){if(o)return!1;for(y.Prev.OutIdx=i.ClipperBase.Skip,(m=new i.LocalMinima).Next=null,m.Y=y.Bot.Y,m.LeftBound=null,m.RightBound=y,m.RightBound.Side=i.EdgeSide.esRight,m.RightBound.WindDelta=0;y.Bot.X!==y.Prev.Top.X&&this.ReverseHorizontal(y),y.Next.OutIdx!==i.ClipperBase.Skip;)y.NextInLML=y.Next,y=y.Next;return this.InsertLocalMinima(m),this.m_edges.push(l),!0}this.m_edges.push(l);var P=null;for(i.IntPoint.op_Equality(y.Prev.Bot,y.Prev.Top)&&(y=y.Next);(y=this.FindNextLocMin(y))!==P;){var m;null===P&&(P=y),(m=new i.LocalMinima).Next=null,m.Y=y.Bot.Y,y.Dx<y.Prev.Dx?(m.LeftBound=y.Prev,m.RightBound=y,p=!1):(m.LeftBound=y,m.RightBound=y.Prev,p=!0),m.LeftBound.Side=i.EdgeSide.esLeft,m.RightBound.Side=i.EdgeSide.esRight,o?m.LeftBound.Next===m.RightBound?m.LeftBound.WindDelta=-1:m.LeftBound.WindDelta=1:m.LeftBound.WindDelta=0,m.RightBound.WindDelta=-m.LeftBound.WindDelta,(y=this.ProcessBound(m.LeftBound,p)).OutIdx===i.ClipperBase.Skip&&(y=this.ProcessBound(y,p));var g=this.ProcessBound(m.RightBound,!p);g.OutIdx===i.ClipperBase.Skip&&(g=this.ProcessBound(g,!p)),m.LeftBound.OutIdx===i.ClipperBase.Skip?m.LeftBound=null:m.RightBound.OutIdx===i.ClipperBase.Skip&&(m.RightBound=null),this.InsertLocalMinima(m),p||(y=g)}return!0},i.ClipperBase.prototype.AddPaths=function(t,r,i){for(var o=!1,a=0,l=t.length;a<l;++a)this.AddPath(t[a],r,i)&&(o=!0);return o},i.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3=function(t,r,o){return!(i.IntPoint.op_Equality(t,o)||i.IntPoint.op_Equality(t,r)||i.IntPoint.op_Equality(o,r))&&(t.X!==o.X?r.X>t.X==r.X<o.X:r.Y>t.Y==r.Y<o.Y)},i.ClipperBase.prototype.RemoveEdge=function(t){t.Prev.Next=t.Next,t.Next.Prev=t.Prev;var r=t.Next;return t.Prev=null,r},i.ClipperBase.prototype.SetDx=function(t){t.Delta.X=t.Top.X-t.Bot.X,t.Delta.Y=t.Top.Y-t.Bot.Y,0===t.Delta.Y?t.Dx=i.ClipperBase.horizontal:t.Dx=t.Delta.X/t.Delta.Y},i.ClipperBase.prototype.InsertLocalMinima=function(t){if(null===this.m_MinimaList)this.m_MinimaList=t;else if(t.Y>=this.m_MinimaList.Y)t.Next=this.m_MinimaList,this.m_MinimaList=t;else{for(var r=this.m_MinimaList;null!==r.Next&&t.Y<r.Next.Y;)r=r.Next;t.Next=r.Next,r.Next=t}},i.ClipperBase.prototype.PopLocalMinima=function(t,r){return r.v=this.m_CurrentLM,null!==this.m_CurrentLM&&this.m_CurrentLM.Y===t&&(this.m_CurrentLM=this.m_CurrentLM.Next,!0)},i.ClipperBase.prototype.ReverseHorizontal=function(t){var r=t.Top.X;t.Top.X=t.Bot.X,t.Bot.X=r,i.use_xyz&&(r=t.Top.Z,t.Top.Z=t.Bot.Z,t.Bot.Z=r)},i.ClipperBase.prototype.Reset=function(){if(this.m_CurrentLM=this.m_MinimaList,null!==this.m_CurrentLM){this.m_Scanbeam=null;for(var t=this.m_MinimaList;null!==t;){this.InsertScanbeam(t.Y);var r=t.LeftBound;null!==r&&(r.Curr.X=r.Bot.X,r.Curr.Y=r.Bot.Y,i.use_xyz&&(r.Curr.Z=r.Bot.Z),r.OutIdx=i.ClipperBase.Unassigned),null!==(r=t.RightBound)&&(r.Curr.X=r.Bot.X,r.Curr.Y=r.Bot.Y,i.use_xyz&&(r.Curr.Z=r.Bot.Z),r.OutIdx=i.ClipperBase.Unassigned),t=t.Next}this.m_ActiveEdges=null}},i.ClipperBase.prototype.InsertScanbeam=function(t){if(null===this.m_Scanbeam)this.m_Scanbeam=new i.Scanbeam,this.m_Scanbeam.Next=null,this.m_Scanbeam.Y=t;else if(t>this.m_Scanbeam.Y){var r=new i.Scanbeam;r.Y=t,r.Next=this.m_Scanbeam,this.m_Scanbeam=r}else{for(var o=this.m_Scanbeam;null!==o.Next&&t<=o.Next.Y;)o=o.Next;if(t===o.Y)return;var a=new i.Scanbeam;a.Y=t,a.Next=o.Next,o.Next=a}},i.ClipperBase.prototype.PopScanbeam=function(t){return null===this.m_Scanbeam?(t.v=0,!1):(t.v=this.m_Scanbeam.Y,this.m_Scanbeam=this.m_Scanbeam.Next,!0)},i.ClipperBase.prototype.LocalMinimaPending=function(){return null!==this.m_CurrentLM},i.ClipperBase.prototype.CreateOutRec=function(){var t=new i.OutRec;return t.Idx=i.ClipperBase.Unassigned,t.IsHole=!1,t.IsOpen=!1,t.FirstLeft=null,t.Pts=null,t.BottomPt=null,t.PolyNode=null,this.m_PolyOuts.push(t),t.Idx=this.m_PolyOuts.length-1,t},i.ClipperBase.prototype.DisposeOutRec=function(t){var r=this.m_PolyOuts[t];r.Pts=null,r=null,this.m_PolyOuts[t]=null},i.ClipperBase.prototype.UpdateEdgeIntoAEL=function(t){null===t.NextInLML&&i.Error("UpdateEdgeIntoAEL: invalid call");var r=t.PrevInAEL,o=t.NextInAEL;return t.NextInLML.OutIdx=t.OutIdx,null!==r?r.NextInAEL=t.NextInLML:this.m_ActiveEdges=t.NextInLML,null!==o&&(o.PrevInAEL=t.NextInLML),t.NextInLML.Side=t.Side,t.NextInLML.WindDelta=t.WindDelta,t.NextInLML.WindCnt=t.WindCnt,t.NextInLML.WindCnt2=t.WindCnt2,(t=t.NextInLML).Curr.X=t.Bot.X,t.Curr.Y=t.Bot.Y,t.PrevInAEL=r,t.NextInAEL=o,i.ClipperBase.IsHorizontal(t)||this.InsertScanbeam(t.Top.Y),t},i.ClipperBase.prototype.SwapPositionsInAEL=function(t,r){if(t.NextInAEL!==t.PrevInAEL&&r.NextInAEL!==r.PrevInAEL){if(t.NextInAEL===r){var i=r.NextInAEL;null!==i&&(i.PrevInAEL=t);var o=t.PrevInAEL;null!==o&&(o.NextInAEL=r),r.PrevInAEL=o,r.NextInAEL=t,t.PrevInAEL=r,t.NextInAEL=i}else if(r.NextInAEL===t){var a=t.NextInAEL;null!==a&&(a.PrevInAEL=r);var l=r.PrevInAEL;null!==l&&(l.NextInAEL=t),t.PrevInAEL=l,t.NextInAEL=r,r.PrevInAEL=t,r.NextInAEL=a}else{var u=t.NextInAEL,c=t.PrevInAEL;t.NextInAEL=r.NextInAEL,null!==t.NextInAEL&&(t.NextInAEL.PrevInAEL=t),t.PrevInAEL=r.PrevInAEL,null!==t.PrevInAEL&&(t.PrevInAEL.NextInAEL=t),r.NextInAEL=u,null!==r.NextInAEL&&(r.NextInAEL.PrevInAEL=r),r.PrevInAEL=c,null!==r.PrevInAEL&&(r.PrevInAEL.NextInAEL=r)}null===t.PrevInAEL?this.m_ActiveEdges=t:null===r.PrevInAEL&&(this.m_ActiveEdges=r)}},i.ClipperBase.prototype.DeleteFromAEL=function(t){var r=t.PrevInAEL,i=t.NextInAEL;null===r&&null===i&&t!==this.m_ActiveEdges||(null!==r?r.NextInAEL=i:this.m_ActiveEdges=i,null!==i&&(i.PrevInAEL=r),t.NextInAEL=null,t.PrevInAEL=null)},i.Clipper=function(t){void 0===t&&(t=0),this.m_PolyOuts=null,this.m_ClipType=i.ClipType.ctIntersection,this.m_Scanbeam=null,this.m_Maxima=null,this.m_ActiveEdges=null,this.m_SortedEdges=null,this.m_IntersectList=null,this.m_IntersectNodeComparer=null,this.m_ExecuteLocked=!1,this.m_ClipFillType=i.PolyFillType.pftEvenOdd,this.m_SubjFillType=i.PolyFillType.pftEvenOdd,this.m_Joins=null,this.m_GhostJoins=null,this.m_UsingPolyTree=!1,this.ReverseSolution=!1,this.StrictlySimple=!1,i.ClipperBase.call(this),this.m_Scanbeam=null,this.m_Maxima=null,this.m_ActiveEdges=null,this.m_SortedEdges=null,this.m_IntersectList=new Array,this.m_IntersectNodeComparer=i.MyIntersectNodeSort.Compare,this.m_ExecuteLocked=!1,this.m_UsingPolyTree=!1,this.m_PolyOuts=new Array,this.m_Joins=new Array,this.m_GhostJoins=new Array,this.ReverseSolution=0!=(1&t),this.StrictlySimple=0!=(2&t),this.PreserveCollinear=0!=(4&t),i.use_xyz&&(this.ZFillFunction=null)},i.Clipper.ioReverseSolution=1,i.Clipper.ioStrictlySimple=2,i.Clipper.ioPreserveCollinear=4,i.Clipper.prototype.Clear=function(){0!==this.m_edges.length&&(this.DisposeAllPolyPts(),i.ClipperBase.prototype.Clear.call(this))},i.Clipper.prototype.InsertMaxima=function(t){var r=new i.Maxima;if(r.X=t,null===this.m_Maxima)this.m_Maxima=r,this.m_Maxima.Next=null,this.m_Maxima.Prev=null;else if(t<this.m_Maxima.X)r.Next=this.m_Maxima,r.Prev=null,this.m_Maxima=r;else{for(var o=this.m_Maxima;null!==o.Next&&t>=o.Next.X;)o=o.Next;if(t===o.X)return;r.Next=o.Next,r.Prev=o,null!==o.Next&&(o.Next.Prev=r),o.Next=r}},i.Clipper.prototype.Execute=function(){var t=arguments,r=t.length,o=t[1]instanceof i.PolyTree;if(4===r&&!o){var a=t[0],l=t[1],u=t[2],c=t[3];if(this.m_ExecuteLocked)return!1;this.m_HasOpenPaths&&i.Error("Error: PolyTree struct is needed for open path clipping."),this.m_ExecuteLocked=!0,i.Clear(l),this.m_SubjFillType=u,this.m_ClipFillType=c,this.m_ClipType=a,this.m_UsingPolyTree=!1;try{(p=this.ExecuteInternal())&&this.BuildResult(l)}finally{this.DisposeAllPolyPts(),this.m_ExecuteLocked=!1}return p}if(4===r&&o){a=t[0];var h=t[1];u=t[2],c=t[3];if(this.m_ExecuteLocked)return!1;this.m_ExecuteLocked=!0,this.m_SubjFillType=u,this.m_ClipFillType=c,this.m_ClipType=a,this.m_UsingPolyTree=!0;try{var p;(p=this.ExecuteInternal())&&this.BuildResult2(h)}finally{this.DisposeAllPolyPts(),this.m_ExecuteLocked=!1}return p}if(2===r&&!o){a=t[0],l=t[1];return this.Execute(a,l,i.PolyFillType.pftEvenOdd,i.PolyFillType.pftEvenOdd)}if(2===r&&o){a=t[0],h=t[1];return this.Execute(a,h,i.PolyFillType.pftEvenOdd,i.PolyFillType.pftEvenOdd)}},i.Clipper.prototype.FixHoleLinkage=function(t){if(null!==t.FirstLeft&&(t.IsHole===t.FirstLeft.IsHole||null===t.FirstLeft.Pts)){for(var r=t.FirstLeft;null!==r&&(r.IsHole===t.IsHole||null===r.Pts);)r=r.FirstLeft;t.FirstLeft=r}},i.Clipper.prototype.ExecuteInternal=function(){try{this.Reset(),this.m_SortedEdges=null,this.m_Maxima=null;var t,r,i,o={},a={};if(!this.PopScanbeam(o))return!1;for(this.InsertLocalMinimaIntoAEL(o.v);this.PopScanbeam(a)||this.LocalMinimaPending();){if(this.ProcessHorizontals(),this.m_GhostJoins.length=0,!this.ProcessIntersections(a.v))return!1;this.ProcessEdgesAtTopOfScanbeam(a.v),o.v=a.v,this.InsertLocalMinimaIntoAEL(o.v)}for(r=0,i=this.m_PolyOuts.length;r<i;r++)null===(t=this.m_PolyOuts[r]).Pts||t.IsOpen||(t.IsHole^this.ReverseSolution)==this.Area$1(t)>0&&this.ReversePolyPtLinks(t.Pts);for(this.JoinCommonEdges(),r=0,i=this.m_PolyOuts.length;r<i;r++)null!==(t=this.m_PolyOuts[r]).Pts&&(t.IsOpen?this.FixupOutPolyline(t):this.FixupOutPolygon(t));return this.StrictlySimple&&this.DoSimplePolygons(),!0}finally{this.m_Joins.length=0,this.m_GhostJoins.length=0}},i.Clipper.prototype.DisposeAllPolyPts=function(){for(var t=0,r=this.m_PolyOuts.length;t<r;++t)this.DisposeOutRec(t);i.Clear(this.m_PolyOuts)},i.Clipper.prototype.AddJoin=function(t,r,o){var a=new i.Join;a.OutPt1=t,a.OutPt2=r,a.OffPt.X=o.X,a.OffPt.Y=o.Y,i.use_xyz&&(a.OffPt.Z=o.Z),this.m_Joins.push(a)},i.Clipper.prototype.AddGhostJoin=function(t,r){var o=new i.Join;o.OutPt1=t,o.OffPt.X=r.X,o.OffPt.Y=r.Y,i.use_xyz&&(o.OffPt.Z=r.Z),this.m_GhostJoins.push(o)},i.Clipper.prototype.SetZ=function(t,r,o){if(null!==this.ZFillFunction){if(0!==t.Z||null===this.ZFillFunction)return;i.IntPoint.op_Equality(t,r.Bot)?t.Z=r.Bot.Z:i.IntPoint.op_Equality(t,r.Top)?t.Z=r.Top.Z:i.IntPoint.op_Equality(t,o.Bot)?t.Z=o.Bot.Z:i.IntPoint.op_Equality(t,o.Top)?t.Z=o.Top.Z:this.ZFillFunction(r.Bot,r.Top,o.Bot,o.Top,t)}},i.Clipper.prototype.InsertLocalMinimaIntoAEL=function(t){for(var r,o,a={};this.PopLocalMinima(t,a);){r=a.v.LeftBound,o=a.v.RightBound;var l=null;if(null===r?(this.InsertEdgeIntoAEL(o,null),this.SetWindingCount(o),this.IsContributing(o)&&(l=this.AddOutPt(o,o.Bot))):null===o?(this.InsertEdgeIntoAEL(r,null),this.SetWindingCount(r),this.IsContributing(r)&&(l=this.AddOutPt(r,r.Bot)),this.InsertScanbeam(r.Top.Y)):(this.InsertEdgeIntoAEL(r,null),this.InsertEdgeIntoAEL(o,r),this.SetWindingCount(r),o.WindCnt=r.WindCnt,o.WindCnt2=r.WindCnt2,this.IsContributing(r)&&(l=this.AddLocalMinPoly(r,o,r.Bot)),this.InsertScanbeam(r.Top.Y)),null!==o&&(i.ClipperBase.IsHorizontal(o)?(null!==o.NextInLML&&this.InsertScanbeam(o.NextInLML.Top.Y),this.AddEdgeToSEL(o)):this.InsertScanbeam(o.Top.Y)),null!==r&&null!==o){if(null!==l&&i.ClipperBase.IsHorizontal(o)&&this.m_GhostJoins.length>0&&0!==o.WindDelta)for(var u=0,c=this.m_GhostJoins.length;u<c;u++){var h=this.m_GhostJoins[u];this.HorzSegmentsOverlap(h.OutPt1.Pt.X,h.OffPt.X,o.Bot.X,o.Top.X)&&this.AddJoin(h.OutPt1,l,h.OffPt)}if(r.OutIdx>=0&&null!==r.PrevInAEL&&r.PrevInAEL.Curr.X===r.Bot.X&&r.PrevInAEL.OutIdx>=0&&i.ClipperBase.SlopesEqual5(r.PrevInAEL.Curr,r.PrevInAEL.Top,r.Curr,r.Top,this.m_UseFullRange)&&0!==r.WindDelta&&0!==r.PrevInAEL.WindDelta){var p=this.AddOutPt(r.PrevInAEL,r.Bot);this.AddJoin(l,p,r.Top)}if(r.NextInAEL!==o){if(o.OutIdx>=0&&o.PrevInAEL.OutIdx>=0&&i.ClipperBase.SlopesEqual5(o.PrevInAEL.Curr,o.PrevInAEL.Top,o.Curr,o.Top,this.m_UseFullRange)&&0!==o.WindDelta&&0!==o.PrevInAEL.WindDelta){p=this.AddOutPt(o.PrevInAEL,o.Bot);this.AddJoin(l,p,o.Top)}var d=r.NextInAEL;if(null!==d)for(;d!==o;)this.IntersectEdges(o,d,r.Curr),d=d.NextInAEL}}}},i.Clipper.prototype.InsertEdgeIntoAEL=function(t,r){if(null===this.m_ActiveEdges)t.PrevInAEL=null,t.NextInAEL=null,this.m_ActiveEdges=t;else if(null===r&&this.E2InsertsBeforeE1(this.m_ActiveEdges,t))t.PrevInAEL=null,t.NextInAEL=this.m_ActiveEdges,this.m_ActiveEdges.PrevInAEL=t,this.m_ActiveEdges=t;else{for(null===r&&(r=this.m_ActiveEdges);null!==r.NextInAEL&&!this.E2InsertsBeforeE1(r.NextInAEL,t);)r=r.NextInAEL;t.NextInAEL=r.NextInAEL,null!==r.NextInAEL&&(r.NextInAEL.PrevInAEL=t),t.PrevInAEL=r,r.NextInAEL=t}},i.Clipper.prototype.E2InsertsBeforeE1=function(t,r){return r.Curr.X===t.Curr.X?r.Top.Y>t.Top.Y?r.Top.X<i.Clipper.TopX(t,r.Top.Y):t.Top.X>i.Clipper.TopX(r,t.Top.Y):r.Curr.X<t.Curr.X},i.Clipper.prototype.IsEvenOddFillType=function(t){return t.PolyTyp===i.PolyType.ptSubject?this.m_SubjFillType===i.PolyFillType.pftEvenOdd:this.m_ClipFillType===i.PolyFillType.pftEvenOdd},i.Clipper.prototype.IsEvenOddAltFillType=function(t){return t.PolyTyp===i.PolyType.ptSubject?this.m_ClipFillType===i.PolyFillType.pftEvenOdd:this.m_SubjFillType===i.PolyFillType.pftEvenOdd},i.Clipper.prototype.IsContributing=function(t){var r,o;switch(t.PolyTyp===i.PolyType.ptSubject?(r=this.m_SubjFillType,o=this.m_ClipFillType):(r=this.m_ClipFillType,o=this.m_SubjFillType),r){case i.PolyFillType.pftEvenOdd:if(0===t.WindDelta&&1!==t.WindCnt)return!1;break;case i.PolyFillType.pftNonZero:if(1!==Math.abs(t.WindCnt))return!1;break;case i.PolyFillType.pftPositive:if(1!==t.WindCnt)return!1;break;default:if(-1!==t.WindCnt)return!1}switch(this.m_ClipType){case i.ClipType.ctIntersection:switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0!==t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2>0;default:return t.WindCnt2<0}case i.ClipType.ctUnion:switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0===t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}case i.ClipType.ctDifference:if(t.PolyTyp===i.PolyType.ptSubject)switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0===t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}else switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0!==t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2>0;default:return t.WindCnt2<0}case i.ClipType.ctXor:if(0!==t.WindDelta)return!0;switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0===t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}}return!0},i.Clipper.prototype.SetWindingCount=function(t){for(var r=t.PrevInAEL;null!==r&&(r.PolyTyp!==t.PolyTyp||0===r.WindDelta);)r=r.PrevInAEL;if(null===r){var o=t.PolyTyp===i.PolyType.ptSubject?this.m_SubjFillType:this.m_ClipFillType;0===t.WindDelta?t.WindCnt=o===i.PolyFillType.pftNegative?-1:1:t.WindCnt=t.WindDelta,t.WindCnt2=0,r=this.m_ActiveEdges}else if(0===t.WindDelta&&this.m_ClipType!==i.ClipType.ctUnion)t.WindCnt=1,t.WindCnt2=r.WindCnt2,r=r.NextInAEL;else if(this.IsEvenOddFillType(t)){if(0===t.WindDelta){for(var a=!0,l=r.PrevInAEL;null!==l;)l.PolyTyp===r.PolyTyp&&0!==l.WindDelta&&(a=!a),l=l.PrevInAEL;t.WindCnt=a?0:1}else t.WindCnt=t.WindDelta;t.WindCnt2=r.WindCnt2,r=r.NextInAEL}else r.WindCnt*r.WindDelta<0?Math.abs(r.WindCnt)>1?r.WindDelta*t.WindDelta<0?t.WindCnt=r.WindCnt:t.WindCnt=r.WindCnt+t.WindDelta:t.WindCnt=0===t.WindDelta?1:t.WindDelta:0===t.WindDelta?t.WindCnt=r.WindCnt<0?r.WindCnt-1:r.WindCnt+1:r.WindDelta*t.WindDelta<0?t.WindCnt=r.WindCnt:t.WindCnt=r.WindCnt+t.WindDelta,t.WindCnt2=r.WindCnt2,r=r.NextInAEL;if(this.IsEvenOddAltFillType(t))for(;r!==t;)0!==r.WindDelta&&(t.WindCnt2=0===t.WindCnt2?1:0),r=r.NextInAEL;else for(;r!==t;)t.WindCnt2+=r.WindDelta,r=r.NextInAEL},i.Clipper.prototype.AddEdgeToSEL=function(t){null===this.m_SortedEdges?(this.m_SortedEdges=t,t.PrevInSEL=null,t.NextInSEL=null):(t.NextInSEL=this.m_SortedEdges,t.PrevInSEL=null,this.m_SortedEdges.PrevInSEL=t,this.m_SortedEdges=t)},i.Clipper.prototype.PopEdgeFromSEL=function(t){if(t.v=this.m_SortedEdges,null===t.v)return!1;var r=t.v;return this.m_SortedEdges=t.v.NextInSEL,null!==this.m_SortedEdges&&(this.m_SortedEdges.PrevInSEL=null),r.NextInSEL=null,r.PrevInSEL=null,!0},i.Clipper.prototype.CopyAELToSEL=function(){var t=this.m_ActiveEdges;for(this.m_SortedEdges=t;null!==t;)t.PrevInSEL=t.PrevInAEL,t.NextInSEL=t.NextInAEL,t=t.NextInAEL},i.Clipper.prototype.SwapPositionsInSEL=function(t,r){if(!(null===t.NextInSEL&&null===t.PrevInSEL||null===r.NextInSEL&&null===r.PrevInSEL)){if(t.NextInSEL===r)null!==(i=r.NextInSEL)&&(i.PrevInSEL=t),null!==(o=t.PrevInSEL)&&(o.NextInSEL=r),r.PrevInSEL=o,r.NextInSEL=t,t.PrevInSEL=r,t.NextInSEL=i;else if(r.NextInSEL===t){null!==(i=t.NextInSEL)&&(i.PrevInSEL=r),null!==(o=r.PrevInSEL)&&(o.NextInSEL=t),t.PrevInSEL=o,t.NextInSEL=r,r.PrevInSEL=t,r.NextInSEL=i}else{var i=t.NextInSEL,o=t.PrevInSEL;t.NextInSEL=r.NextInSEL,null!==t.NextInSEL&&(t.NextInSEL.PrevInSEL=t),t.PrevInSEL=r.PrevInSEL,null!==t.PrevInSEL&&(t.PrevInSEL.NextInSEL=t),r.NextInSEL=i,null!==r.NextInSEL&&(r.NextInSEL.PrevInSEL=r),r.PrevInSEL=o,null!==r.PrevInSEL&&(r.PrevInSEL.NextInSEL=r)}null===t.PrevInSEL?this.m_SortedEdges=t:null===r.PrevInSEL&&(this.m_SortedEdges=r)}},i.Clipper.prototype.AddLocalMaxPoly=function(t,r,i){this.AddOutPt(t,i),0===r.WindDelta&&this.AddOutPt(r,i),t.OutIdx===r.OutIdx?(t.OutIdx=-1,r.OutIdx=-1):t.OutIdx<r.OutIdx?this.AppendPolygon(t,r):this.AppendPolygon(r,t)},i.Clipper.prototype.AddLocalMinPoly=function(t,r,o){var a,l,u;if(i.ClipperBase.IsHorizontal(r)||t.Dx>r.Dx?(a=this.AddOutPt(t,o),r.OutIdx=t.OutIdx,t.Side=i.EdgeSide.esLeft,r.Side=i.EdgeSide.esRight,u=(l=t).PrevInAEL===r?r.PrevInAEL:l.PrevInAEL):(a=this.AddOutPt(r,o),t.OutIdx=r.OutIdx,t.Side=i.EdgeSide.esRight,r.Side=i.EdgeSide.esLeft,u=(l=r).PrevInAEL===t?t.PrevInAEL:l.PrevInAEL),null!==u&&u.OutIdx>=0&&u.Top.Y<o.Y&&l.Top.Y<o.Y){var c=i.Clipper.TopX(u,o.Y),h=i.Clipper.TopX(l,o.Y);if(c===h&&0!==l.WindDelta&&0!==u.WindDelta&&i.ClipperBase.SlopesEqual5(new i.IntPoint2(c,o.Y),u.Top,new i.IntPoint2(h,o.Y),l.Top,this.m_UseFullRange)){var p=this.AddOutPt(u,o);this.AddJoin(a,p,l.Top)}}return a},i.Clipper.prototype.AddOutPt=function(t,r){if(t.OutIdx<0){(a=this.CreateOutRec()).IsOpen=0===t.WindDelta;var o=new i.OutPt;return a.Pts=o,o.Idx=a.Idx,o.Pt.X=r.X,o.Pt.Y=r.Y,i.use_xyz&&(o.Pt.Z=r.Z),o.Next=o,o.Prev=o,a.IsOpen||this.SetHoleState(t,a),t.OutIdx=a.Idx,o}var a,l=(a=this.m_PolyOuts[t.OutIdx]).Pts,u=t.Side===i.EdgeSide.esLeft;return u&&i.IntPoint.op_Equality(r,l.Pt)?l:!u&&i.IntPoint.op_Equality(r,l.Prev.Pt)?l.Prev:((o=new i.OutPt).Idx=a.Idx,o.Pt.X=r.X,o.Pt.Y=r.Y,i.use_xyz&&(o.Pt.Z=r.Z),o.Next=l,o.Prev=l.Prev,o.Prev.Next=o,l.Prev=o,u&&(a.Pts=o),o)},i.Clipper.prototype.GetLastOutPt=function(t){var r=this.m_PolyOuts[t.OutIdx];return t.Side===i.EdgeSide.esLeft?r.Pts:r.Pts.Prev},i.Clipper.prototype.SwapPoints=function(t,r){var o=new i.IntPoint1(t.Value);t.Value.X=r.Value.X,t.Value.Y=r.Value.Y,i.use_xyz&&(t.Value.Z=r.Value.Z),r.Value.X=o.X,r.Value.Y=o.Y,i.use_xyz&&(r.Value.Z=o.Z)},i.Clipper.prototype.HorzSegmentsOverlap=function(t,r,i,o){var a;return t>r&&(a=t,t=r,r=a),i>o&&(a=i,i=o,o=a),t<o&&i<r},i.Clipper.prototype.SetHoleState=function(t,r){for(var i=t.PrevInAEL,o=null;null!==i;)i.OutIdx>=0&&0!==i.WindDelta&&(null===o?o=i:o.OutIdx===i.OutIdx&&(o=null)),i=i.PrevInAEL;null===o?(r.FirstLeft=null,r.IsHole=!1):(r.FirstLeft=this.m_PolyOuts[o.OutIdx],r.IsHole=!r.FirstLeft.IsHole)},i.Clipper.prototype.GetDx=function(t,r){return t.Y===r.Y?i.ClipperBase.horizontal:(r.X-t.X)/(r.Y-t.Y)},i.Clipper.prototype.FirstIsBottomPt=function(t,r){for(var o=t.Prev;i.IntPoint.op_Equality(o.Pt,t.Pt)&&o!==t;)o=o.Prev;var a=Math.abs(this.GetDx(t.Pt,o.Pt));for(o=t.Next;i.IntPoint.op_Equality(o.Pt,t.Pt)&&o!==t;)o=o.Next;var l=Math.abs(this.GetDx(t.Pt,o.Pt));for(o=r.Prev;i.IntPoint.op_Equality(o.Pt,r.Pt)&&o!==r;)o=o.Prev;var u=Math.abs(this.GetDx(r.Pt,o.Pt));for(o=r.Next;i.IntPoint.op_Equality(o.Pt,r.Pt)&&o!==r;)o=o.Next;var c=Math.abs(this.GetDx(r.Pt,o.Pt));return Math.max(a,l)===Math.max(u,c)&&Math.min(a,l)===Math.min(u,c)?this.Area(t)>0:a>=u&&a>=c||l>=u&&l>=c},i.Clipper.prototype.GetBottomPt=function(t){for(var r=null,o=t.Next;o!==t;)o.Pt.Y>t.Pt.Y?(t=o,r=null):o.Pt.Y===t.Pt.Y&&o.Pt.X<=t.Pt.X&&(o.Pt.X<t.Pt.X?(r=null,t=o):o.Next!==t&&o.Prev!==t&&(r=o)),o=o.Next;if(null!==r)for(;r!==o;)for(this.FirstIsBottomPt(o,r)||(t=r),r=r.Next;i.IntPoint.op_Inequality(r.Pt,t.Pt);)r=r.Next;return t},i.Clipper.prototype.GetLowermostRec=function(t,r){null===t.BottomPt&&(t.BottomPt=this.GetBottomPt(t.Pts)),null===r.BottomPt&&(r.BottomPt=this.GetBottomPt(r.Pts));var i=t.BottomPt,o=r.BottomPt;return i.Pt.Y>o.Pt.Y?t:i.Pt.Y<o.Pt.Y?r:i.Pt.X<o.Pt.X?t:i.Pt.X>o.Pt.X||i.Next===i?r:o.Next===o||this.FirstIsBottomPt(i,o)?t:r},i.Clipper.prototype.OutRec1RightOfOutRec2=function(t,r){do{if((t=t.FirstLeft)===r)return!0}while(null!==t);return!1},i.Clipper.prototype.GetOutRec=function(t){for(var r=this.m_PolyOuts[t];r!==this.m_PolyOuts[r.Idx];)r=this.m_PolyOuts[r.Idx];return r},i.Clipper.prototype.AppendPolygon=function(t,r){var o,a=this.m_PolyOuts[t.OutIdx],l=this.m_PolyOuts[r.OutIdx];o=this.OutRec1RightOfOutRec2(a,l)?l:this.OutRec1RightOfOutRec2(l,a)?a:this.GetLowermostRec(a,l);var u=a.Pts,c=u.Prev,h=l.Pts,p=h.Prev;t.Side===i.EdgeSide.esLeft?r.Side===i.EdgeSide.esLeft?(this.ReversePolyPtLinks(h),h.Next=u,u.Prev=h,c.Next=p,p.Prev=c,a.Pts=p):(p.Next=u,u.Prev=p,h.Prev=c,c.Next=h,a.Pts=h):r.Side===i.EdgeSide.esRight?(this.ReversePolyPtLinks(h),c.Next=p,p.Prev=c,h.Next=u,u.Prev=h):(c.Next=h,h.Prev=c,u.Prev=p,p.Next=u),a.BottomPt=null,o===l&&(l.FirstLeft!==a&&(a.FirstLeft=l.FirstLeft),a.IsHole=l.IsHole),l.Pts=null,l.BottomPt=null,l.FirstLeft=a;var d=t.OutIdx,y=r.OutIdx;t.OutIdx=-1,r.OutIdx=-1;for(var v=this.m_ActiveEdges;null!==v;){if(v.OutIdx===y){v.OutIdx=d,v.Side=t.Side;break}v=v.NextInAEL}l.Idx=a.Idx},i.Clipper.prototype.ReversePolyPtLinks=function(t){if(null!==t){var r,i;r=t;do{i=r.Next,r.Next=r.Prev,r.Prev=i,r=i}while(r!==t)}},i.Clipper.SwapSides=function(t,r){var i=t.Side;t.Side=r.Side,r.Side=i},i.Clipper.SwapPolyIndexes=function(t,r){var i=t.OutIdx;t.OutIdx=r.OutIdx,r.OutIdx=i},i.Clipper.prototype.IntersectEdges=function(t,r,o){var a=t.OutIdx>=0,l=r.OutIdx>=0;if(i.use_xyz&&this.SetZ(o,t,r),!i.use_lines||0!==t.WindDelta&&0!==r.WindDelta){if(t.PolyTyp===r.PolyTyp)if(this.IsEvenOddFillType(t)){var u=t.WindCnt;t.WindCnt=r.WindCnt,r.WindCnt=u}else t.WindCnt+r.WindDelta===0?t.WindCnt=-t.WindCnt:t.WindCnt+=r.WindDelta,r.WindCnt-t.WindDelta==0?r.WindCnt=-r.WindCnt:r.WindCnt-=t.WindDelta;else this.IsEvenOddFillType(r)?t.WindCnt2=0===t.WindCnt2?1:0:t.WindCnt2+=r.WindDelta,this.IsEvenOddFillType(t)?r.WindCnt2=0===r.WindCnt2?1:0:r.WindCnt2-=t.WindDelta;var c,h,p,d,y,v;switch(t.PolyTyp===i.PolyType.ptSubject?(c=this.m_SubjFillType,p=this.m_ClipFillType):(c=this.m_ClipFillType,p=this.m_SubjFillType),r.PolyTyp===i.PolyType.ptSubject?(h=this.m_SubjFillType,d=this.m_ClipFillType):(h=this.m_ClipFillType,d=this.m_SubjFillType),c){case i.PolyFillType.pftPositive:y=t.WindCnt;break;case i.PolyFillType.pftNegative:y=-t.WindCnt;break;default:y=Math.abs(t.WindCnt)}switch(h){case i.PolyFillType.pftPositive:v=r.WindCnt;break;case i.PolyFillType.pftNegative:v=-r.WindCnt;break;default:v=Math.abs(r.WindCnt)}if(a&&l)0!==y&&1!==y||0!==v&&1!==v||t.PolyTyp!==r.PolyTyp&&this.m_ClipType!==i.ClipType.ctXor?this.AddLocalMaxPoly(t,r,o):(this.AddOutPt(t,o),this.AddOutPt(r,o),i.Clipper.SwapSides(t,r),i.Clipper.SwapPolyIndexes(t,r));else if(a)0!==v&&1!==v||(this.AddOutPt(t,o),i.Clipper.SwapSides(t,r),i.Clipper.SwapPolyIndexes(t,r));else if(l)0!==y&&1!==y||(this.AddOutPt(r,o),i.Clipper.SwapSides(t,r),i.Clipper.SwapPolyIndexes(t,r));else if(!(0!==y&&1!==y||0!==v&&1!==v)){var P,m;switch(p){case i.PolyFillType.pftPositive:P=t.WindCnt2;break;case i.PolyFillType.pftNegative:P=-t.WindCnt2;break;default:P=Math.abs(t.WindCnt2)}switch(d){case i.PolyFillType.pftPositive:m=r.WindCnt2;break;case i.PolyFillType.pftNegative:m=-r.WindCnt2;break;default:m=Math.abs(r.WindCnt2)}if(t.PolyTyp!==r.PolyTyp)this.AddLocalMinPoly(t,r,o);else if(1===y&&1===v)switch(this.m_ClipType){case i.ClipType.ctIntersection:P>0&&m>0&&this.AddLocalMinPoly(t,r,o);break;case i.ClipType.ctUnion:P<=0&&m<=0&&this.AddLocalMinPoly(t,r,o);break;case i.ClipType.ctDifference:(t.PolyTyp===i.PolyType.ptClip&&P>0&&m>0||t.PolyTyp===i.PolyType.ptSubject&&P<=0&&m<=0)&&this.AddLocalMinPoly(t,r,o);break;case i.ClipType.ctXor:this.AddLocalMinPoly(t,r,o)}else i.Clipper.SwapSides(t,r)}}else{if(0===t.WindDelta&&0===r.WindDelta)return;t.PolyTyp===r.PolyTyp&&t.WindDelta!==r.WindDelta&&this.m_ClipType===i.ClipType.ctUnion?0===t.WindDelta?l&&(this.AddOutPt(t,o),a&&(t.OutIdx=-1)):a&&(this.AddOutPt(r,o),l&&(r.OutIdx=-1)):t.PolyTyp!==r.PolyTyp&&(0!==t.WindDelta||1!==Math.abs(r.WindCnt)||this.m_ClipType===i.ClipType.ctUnion&&0!==r.WindCnt2?0!==r.WindDelta||1!==Math.abs(t.WindCnt)||this.m_ClipType===i.ClipType.ctUnion&&0!==t.WindCnt2||(this.AddOutPt(r,o),l&&(r.OutIdx=-1)):(this.AddOutPt(t,o),a&&(t.OutIdx=-1)))}},i.Clipper.prototype.DeleteFromSEL=function(t){var r=t.PrevInSEL,i=t.NextInSEL;null===r&&null===i&&t!==this.m_SortedEdges||(null!==r?r.NextInSEL=i:this.m_SortedEdges=i,null!==i&&(i.PrevInSEL=r),t.NextInSEL=null,t.PrevInSEL=null)},i.Clipper.prototype.ProcessHorizontals=function(){for(var t={};this.PopEdgeFromSEL(t);)this.ProcessHorizontal(t.v)},i.Clipper.prototype.GetHorzDirection=function(t,r){t.Bot.X<t.Top.X?(r.Left=t.Bot.X,r.Right=t.Top.X,r.Dir=i.Direction.dLeftToRight):(r.Left=t.Top.X,r.Right=t.Bot.X,r.Dir=i.Direction.dRightToLeft)},i.Clipper.prototype.ProcessHorizontal=function(t){var r={Dir:null,Left:null,Right:null};this.GetHorzDirection(t,r);for(var o=r.Dir,a=r.Left,l=r.Right,u=0===t.WindDelta,c=t,h=null;null!==c.NextInLML&&i.ClipperBase.IsHorizontal(c.NextInLML);)c=c.NextInLML;null===c.NextInLML&&(h=this.GetMaximaPair(c));var p=this.m_Maxima;if(null!==p)if(o===i.Direction.dLeftToRight){for(;null!==p&&p.X<=t.Bot.X;)p=p.Next;null!==p&&p.X>=c.Top.X&&(p=null)}else{for(;null!==p.Next&&p.Next.X<t.Bot.X;)p=p.Next;p.X<=c.Top.X&&(p=null)}for(var d=null;;){for(var y=t===c,v=this.GetNextInAEL(t,o);null!==v;){if(null!==p)if(o===i.Direction.dLeftToRight)for(;null!==p&&p.X<v.Curr.X;)t.OutIdx>=0&&!u&&this.AddOutPt(t,new i.IntPoint2(p.X,t.Bot.Y)),p=p.Next;else for(;null!==p&&p.X>v.Curr.X;)t.OutIdx>=0&&!u&&this.AddOutPt(t,new i.IntPoint2(p.X,t.Bot.Y)),p=p.Prev;if(o===i.Direction.dLeftToRight&&v.Curr.X>l||o===i.Direction.dRightToLeft&&v.Curr.X<a)break;if(v.Curr.X===t.Top.X&&null!==t.NextInLML&&v.Dx<t.NextInLML.Dx)break;if(t.OutIdx>=0&&!u){i.use_xyz&&(o===i.Direction.dLeftToRight?this.SetZ(v.Curr,t,v):this.SetZ(v.Curr,v,t)),d=this.AddOutPt(t,v.Curr);for(var P=this.m_SortedEdges;null!==P;){if(P.OutIdx>=0&&this.HorzSegmentsOverlap(t.Bot.X,t.Top.X,P.Bot.X,P.Top.X)){var m=this.GetLastOutPt(P);this.AddJoin(m,d,P.Top)}P=P.NextInSEL}this.AddGhostJoin(d,t.Bot)}if(v===h&&y)return t.OutIdx>=0&&this.AddLocalMaxPoly(t,h,t.Top),this.DeleteFromAEL(t),void this.DeleteFromAEL(h);if(o===i.Direction.dLeftToRight){var g=new i.IntPoint2(v.Curr.X,t.Curr.Y);this.IntersectEdges(t,v,g)}else{g=new i.IntPoint2(v.Curr.X,t.Curr.Y);this.IntersectEdges(v,t,g)}var _=this.GetNextInAEL(v,o);this.SwapPositionsInAEL(t,v),v=_}if(null===t.NextInLML||!i.ClipperBase.IsHorizontal(t.NextInLML))break;(t=this.UpdateEdgeIntoAEL(t)).OutIdx>=0&&this.AddOutPt(t,t.Bot),r={Dir:o,Left:a,Right:l},this.GetHorzDirection(t,r),o=r.Dir,a=r.Left,l=r.Right}if(t.OutIdx>=0&&null===d){d=this.GetLastOutPt(t);for(P=this.m_SortedEdges;null!==P;){if(P.OutIdx>=0&&this.HorzSegmentsOverlap(t.Bot.X,t.Top.X,P.Bot.X,P.Top.X)){m=this.GetLastOutPt(P);this.AddJoin(m,d,P.Top)}P=P.NextInSEL}this.AddGhostJoin(d,t.Top)}if(null!==t.NextInLML)if(t.OutIdx>=0){if(d=this.AddOutPt(t,t.Top),0===(t=this.UpdateEdgeIntoAEL(t)).WindDelta)return;var b=t.PrevInAEL;_=t.NextInAEL;if(null!==b&&b.Curr.X===t.Bot.X&&b.Curr.Y===t.Bot.Y&&0===b.WindDelta&&b.OutIdx>=0&&b.Curr.Y>b.Top.Y&&i.ClipperBase.SlopesEqual3(t,b,this.m_UseFullRange)){m=this.AddOutPt(b,t.Bot);this.AddJoin(d,m,t.Top)}else if(null!==_&&_.Curr.X===t.Bot.X&&_.Curr.Y===t.Bot.Y&&0!==_.WindDelta&&_.OutIdx>=0&&_.Curr.Y>_.Top.Y&&i.ClipperBase.SlopesEqual3(t,_,this.m_UseFullRange)){m=this.AddOutPt(_,t.Bot);this.AddJoin(d,m,t.Top)}}else t=this.UpdateEdgeIntoAEL(t);else t.OutIdx>=0&&this.AddOutPt(t,t.Top),this.DeleteFromAEL(t)},i.Clipper.prototype.GetNextInAEL=function(t,r){return r===i.Direction.dLeftToRight?t.NextInAEL:t.PrevInAEL},i.Clipper.prototype.IsMinima=function(t){return null!==t&&t.Prev.NextInLML!==t&&t.Next.NextInLML!==t},i.Clipper.prototype.IsMaxima=function(t,r){return null!==t&&t.Top.Y===r&&null===t.NextInLML},i.Clipper.prototype.IsIntermediate=function(t,r){return t.Top.Y===r&&null!==t.NextInLML},i.Clipper.prototype.GetMaximaPair=function(t){return i.IntPoint.op_Equality(t.Next.Top,t.Top)&&null===t.Next.NextInLML?t.Next:i.IntPoint.op_Equality(t.Prev.Top,t.Top)&&null===t.Prev.NextInLML?t.Prev:null},i.Clipper.prototype.GetMaximaPairEx=function(t){var r=this.GetMaximaPair(t);return null===r||r.OutIdx===i.ClipperBase.Skip||r.NextInAEL===r.PrevInAEL&&!i.ClipperBase.IsHorizontal(r)?null:r},i.Clipper.prototype.ProcessIntersections=function(t){if(null===this.m_ActiveEdges)return!0;try{if(this.BuildIntersectList(t),0===this.m_IntersectList.length)return!0;if(1!==this.m_IntersectList.length&&!this.FixupIntersectionOrder())return!1;this.ProcessIntersectList()}catch(t){this.m_SortedEdges=null,this.m_IntersectList.length=0,i.Error("ProcessIntersections error")}return this.m_SortedEdges=null,!0},i.Clipper.prototype.BuildIntersectList=function(t){if(null!==this.m_ActiveEdges){var r=this.m_ActiveEdges;for(this.m_SortedEdges=r;null!==r;)r.PrevInSEL=r.PrevInAEL,r.NextInSEL=r.NextInAEL,r.Curr.X=i.Clipper.TopX(r,t),r=r.NextInAEL;for(var o=!0;o&&null!==this.m_SortedEdges;){for(o=!1,r=this.m_SortedEdges;null!==r.NextInSEL;){var a=r.NextInSEL,l=new i.IntPoint0;if(r.Curr.X>a.Curr.X){this.IntersectPoint(r,a,l),l.Y<t&&(l=new i.IntPoint2(i.Clipper.TopX(r,t),t));var u=new i.IntersectNode;u.Edge1=r,u.Edge2=a,u.Pt.X=l.X,u.Pt.Y=l.Y,i.use_xyz&&(u.Pt.Z=l.Z),this.m_IntersectList.push(u),this.SwapPositionsInSEL(r,a),o=!0}else r=a}if(null===r.PrevInSEL)break;r.PrevInSEL.NextInSEL=null}this.m_SortedEdges=null}},i.Clipper.prototype.EdgesAdjacent=function(t){return t.Edge1.NextInSEL===t.Edge2||t.Edge1.PrevInSEL===t.Edge2},i.Clipper.IntersectNodeSort=function(t,r){return r.Pt.Y-t.Pt.Y},i.Clipper.prototype.FixupIntersectionOrder=function(){this.m_IntersectList.sort(this.m_IntersectNodeComparer),this.CopyAELToSEL();for(var t=this.m_IntersectList.length,r=0;r<t;r++){if(!this.EdgesAdjacent(this.m_IntersectList[r])){for(var i=r+1;i<t&&!this.EdgesAdjacent(this.m_IntersectList[i]);)i++;if(i===t)return!1;var o=this.m_IntersectList[r];this.m_IntersectList[r]=this.m_IntersectList[i],this.m_IntersectList[i]=o}this.SwapPositionsInSEL(this.m_IntersectList[r].Edge1,this.m_IntersectList[r].Edge2)}return!0},i.Clipper.prototype.ProcessIntersectList=function(){for(var t=0,r=this.m_IntersectList.length;t<r;t++){var i=this.m_IntersectList[t];this.IntersectEdges(i.Edge1,i.Edge2,i.Pt),this.SwapPositionsInAEL(i.Edge1,i.Edge2)}this.m_IntersectList.length=0};u.msie?i.Clipper.Round=function R1(t){return t<0?Math.ceil(t-.5):Math.round(t)}:u.chromium?i.Clipper.Round=function R3(t){return t<0?-Math.round(Math.abs(t)):Math.round(t)}:u.safari?i.Clipper.Round=function R4(t){return t<0?(t-=.5)<-2147483648?Math.ceil(t):0|t:(t+=.5)>2147483647?Math.floor(t):0|t}:i.Clipper.Round=function R2(t){return t<0?Math.ceil(t-.5):Math.floor(t+.5)},i.Clipper.TopX=function(t,r){return r===t.Top.Y?t.Top.X:t.Bot.X+i.Clipper.Round(t.Dx*(r-t.Bot.Y))},i.Clipper.prototype.IntersectPoint=function(t,r,o){var a,l;if(o.X=0,o.Y=0,t.Dx===r.Dx)return o.Y=t.Curr.Y,void(o.X=i.Clipper.TopX(t,o.Y));if(0===t.Delta.X)o.X=t.Bot.X,i.ClipperBase.IsHorizontal(r)?o.Y=r.Bot.Y:(l=r.Bot.Y-r.Bot.X/r.Dx,o.Y=i.Clipper.Round(o.X/r.Dx+l));else if(0===r.Delta.X)o.X=r.Bot.X,i.ClipperBase.IsHorizontal(t)?o.Y=t.Bot.Y:(a=t.Bot.Y-t.Bot.X/t.Dx,o.Y=i.Clipper.Round(o.X/t.Dx+a));else{a=t.Bot.X-t.Bot.Y*t.Dx;var u=((l=r.Bot.X-r.Bot.Y*r.Dx)-a)/(t.Dx-r.Dx);o.Y=i.Clipper.Round(u),Math.abs(t.Dx)<Math.abs(r.Dx)?o.X=i.Clipper.Round(t.Dx*u+a):o.X=i.Clipper.Round(r.Dx*u+l)}if(o.Y<t.Top.Y||o.Y<r.Top.Y){if(t.Top.Y>r.Top.Y)return o.Y=t.Top.Y,o.X=i.Clipper.TopX(r,t.Top.Y),o.X<t.Top.X;o.Y=r.Top.Y,Math.abs(t.Dx)<Math.abs(r.Dx)?o.X=i.Clipper.TopX(t,o.Y):o.X=i.Clipper.TopX(r,o.Y)}o.Y>t.Curr.Y&&(o.Y=t.Curr.Y,Math.abs(t.Dx)>Math.abs(r.Dx)?o.X=i.Clipper.TopX(r,o.Y):o.X=i.Clipper.TopX(t,o.Y))},i.Clipper.prototype.ProcessEdgesAtTopOfScanbeam=function(t){for(var r=this.m_ActiveEdges;null!==r;){var o=this.IsMaxima(r,t);if(o){var a=this.GetMaximaPairEx(r);o=null===a||!i.ClipperBase.IsHorizontal(a)}if(o){this.StrictlySimple&&this.InsertMaxima(r.Top.X);var l=r.PrevInAEL;this.DoMaxima(r),r=null===l?this.m_ActiveEdges:l.NextInAEL}else{if(this.IsIntermediate(r,t)&&i.ClipperBase.IsHorizontal(r.NextInLML)?((r=this.UpdateEdgeIntoAEL(r)).OutIdx>=0&&this.AddOutPt(r,r.Bot),this.AddEdgeToSEL(r)):(r.Curr.X=i.Clipper.TopX(r,t),r.Curr.Y=t),i.use_xyz&&(r.Top.Y===t?r.Curr.Z=r.Top.Z:r.Bot.Y===t?r.Curr.Z=r.Bot.Z:r.Curr.Z=0),this.StrictlySimple){l=r.PrevInAEL;if(r.OutIdx>=0&&0!==r.WindDelta&&null!==l&&l.OutIdx>=0&&l.Curr.X===r.Curr.X&&0!==l.WindDelta){var u=new i.IntPoint1(r.Curr);i.use_xyz&&this.SetZ(u,l,r);var c=this.AddOutPt(l,u),h=this.AddOutPt(r,u);this.AddJoin(c,h,u)}}r=r.NextInAEL}}for(this.ProcessHorizontals(),this.m_Maxima=null,r=this.m_ActiveEdges;null!==r;){if(this.IsIntermediate(r,t)){c=null;r.OutIdx>=0&&(c=this.AddOutPt(r,r.Top));l=(r=this.UpdateEdgeIntoAEL(r)).PrevInAEL;var p=r.NextInAEL;if(null!==l&&l.Curr.X===r.Bot.X&&l.Curr.Y===r.Bot.Y&&null!==c&&l.OutIdx>=0&&l.Curr.Y===l.Top.Y&&i.ClipperBase.SlopesEqual5(r.Curr,r.Top,l.Curr,l.Top,this.m_UseFullRange)&&0!==r.WindDelta&&0!==l.WindDelta){h=this.AddOutPt(ePrev2,r.Bot);this.AddJoin(c,h,r.Top)}else if(null!==p&&p.Curr.X===r.Bot.X&&p.Curr.Y===r.Bot.Y&&null!==c&&p.OutIdx>=0&&p.Curr.Y===p.Top.Y&&i.ClipperBase.SlopesEqual5(r.Curr,r.Top,p.Curr,p.Top,this.m_UseFullRange)&&0!==r.WindDelta&&0!==p.WindDelta){h=this.AddOutPt(p,r.Bot);this.AddJoin(c,h,r.Top)}}r=r.NextInAEL}},i.Clipper.prototype.DoMaxima=function(t){var r=this.GetMaximaPairEx(t);if(null===r)return t.OutIdx>=0&&this.AddOutPt(t,t.Top),void this.DeleteFromAEL(t);for(var o=t.NextInAEL;null!==o&&o!==r;)this.IntersectEdges(t,o,t.Top),this.SwapPositionsInAEL(t,o),o=t.NextInAEL;-1===t.OutIdx&&-1===r.OutIdx?(this.DeleteFromAEL(t),this.DeleteFromAEL(r)):t.OutIdx>=0&&r.OutIdx>=0?(t.OutIdx>=0&&this.AddLocalMaxPoly(t,r,t.Top),this.DeleteFromAEL(t),this.DeleteFromAEL(r)):i.use_lines&&0===t.WindDelta?(t.OutIdx>=0&&(this.AddOutPt(t,t.Top),t.OutIdx=i.ClipperBase.Unassigned),this.DeleteFromAEL(t),r.OutIdx>=0&&(this.AddOutPt(r,t.Top),r.OutIdx=i.ClipperBase.Unassigned),this.DeleteFromAEL(r)):i.Error("DoMaxima error")},i.Clipper.ReversePaths=function(t){for(var r=0,i=t.length;r<i;r++)t[r].reverse()},i.Clipper.Orientation=function(t){return i.Clipper.Area(t)>=0},i.Clipper.prototype.PointCount=function(t){if(null===t)return 0;var r=0,i=t;do{r++,i=i.Next}while(i!==t);return r},i.Clipper.prototype.BuildResult=function(t){i.Clear(t);for(var r=0,o=this.m_PolyOuts.length;r<o;r++){var a=this.m_PolyOuts[r];if(null!==a.Pts){var l=a.Pts.Prev,u=this.PointCount(l);if(!(u<2)){for(var c=new Array(u),h=0;h<u;h++)c[h]=l.Pt,l=l.Prev;t.push(c)}}}},i.Clipper.prototype.BuildResult2=function(t){t.Clear();for(var r=0,o=this.m_PolyOuts.length;r<o;r++){var a=this.m_PolyOuts[r],l=this.PointCount(a.Pts);if(!(a.IsOpen&&l<2||!a.IsOpen&&l<3)){this.FixHoleLinkage(a);var u=new i.PolyNode;t.m_AllPolys.push(u),a.PolyNode=u,u.m_polygon.length=l;for(var c=a.Pts.Prev,h=0;h<l;h++)u.m_polygon[h]=c.Pt,c=c.Prev}}for(r=0,o=this.m_PolyOuts.length;r<o;r++){null!==(a=this.m_PolyOuts[r]).PolyNode&&(a.IsOpen?(a.PolyNode.IsOpen=!0,t.AddChild(a.PolyNode)):null!==a.FirstLeft&&null!==a.FirstLeft.PolyNode?a.FirstLeft.PolyNode.AddChild(a.PolyNode):t.AddChild(a.PolyNode))}},i.Clipper.prototype.FixupOutPolyline=function(t){for(var r=t.Pts,o=r.Prev;r!==o;)if(r=r.Next,i.IntPoint.op_Equality(r.Pt,r.Prev.Pt)){r===o&&(o=r.Prev);var a=r.Prev;a.Next=r.Next,r.Next.Prev=a,r=a}r===r.Prev&&(t.Pts=null)},i.Clipper.prototype.FixupOutPolygon=function(t){var r=null;t.BottomPt=null;for(var o=t.Pts,a=this.PreserveCollinear||this.StrictlySimple;;){if(o.Prev===o||o.Prev===o.Next)return void(t.Pts=null);if(i.IntPoint.op_Equality(o.Pt,o.Next.Pt)||i.IntPoint.op_Equality(o.Pt,o.Prev.Pt)||i.ClipperBase.SlopesEqual4(o.Prev.Pt,o.Pt,o.Next.Pt,this.m_UseFullRange)&&(!a||!this.Pt2IsBetweenPt1AndPt3(o.Prev.Pt,o.Pt,o.Next.Pt)))r=null,o.Prev.Next=o.Next,o.Next.Prev=o.Prev,o=o.Prev;else{if(o===r)break;null===r&&(r=o),o=o.Next}}t.Pts=o},i.Clipper.prototype.DupOutPt=function(t,r){var o=new i.OutPt;return o.Pt.X=t.Pt.X,o.Pt.Y=t.Pt.Y,i.use_xyz&&(o.Pt.Z=t.Pt.Z),o.Idx=t.Idx,r?(o.Next=t.Next,o.Prev=t,t.Next.Prev=o,t.Next=o):(o.Prev=t.Prev,o.Next=t,t.Prev.Next=o,t.Prev=o),o},i.Clipper.prototype.GetOverlap=function(t,r,i,o,a){return t<r?i<o?(a.Left=Math.max(t,i),a.Right=Math.min(r,o)):(a.Left=Math.max(t,o),a.Right=Math.min(r,i)):i<o?(a.Left=Math.max(r,i),a.Right=Math.min(t,o)):(a.Left=Math.max(r,o),a.Right=Math.min(t,i)),a.Left<a.Right},i.Clipper.prototype.JoinHorz=function(t,r,o,a,l,u){var c=t.Pt.X>r.Pt.X?i.Direction.dRightToLeft:i.Direction.dLeftToRight,h=o.Pt.X>a.Pt.X?i.Direction.dRightToLeft:i.Direction.dLeftToRight;if(c===h)return!1;if(c===i.Direction.dLeftToRight){for(;t.Next.Pt.X<=l.X&&t.Next.Pt.X>=t.Pt.X&&t.Next.Pt.Y===l.Y;)t=t.Next;u&&t.Pt.X!==l.X&&(t=t.Next),r=this.DupOutPt(t,!u),i.IntPoint.op_Inequality(r.Pt,l)&&((t=r).Pt.X=l.X,t.Pt.Y=l.Y,i.use_xyz&&(t.Pt.Z=l.Z),r=this.DupOutPt(t,!u))}else{for(;t.Next.Pt.X>=l.X&&t.Next.Pt.X<=t.Pt.X&&t.Next.Pt.Y===l.Y;)t=t.Next;u||t.Pt.X===l.X||(t=t.Next),r=this.DupOutPt(t,u),i.IntPoint.op_Inequality(r.Pt,l)&&((t=r).Pt.X=l.X,t.Pt.Y=l.Y,i.use_xyz&&(t.Pt.Z=l.Z),r=this.DupOutPt(t,u))}if(h===i.Direction.dLeftToRight){for(;o.Next.Pt.X<=l.X&&o.Next.Pt.X>=o.Pt.X&&o.Next.Pt.Y===l.Y;)o=o.Next;u&&o.Pt.X!==l.X&&(o=o.Next),a=this.DupOutPt(o,!u),i.IntPoint.op_Inequality(a.Pt,l)&&((o=a).Pt.X=l.X,o.Pt.Y=l.Y,i.use_xyz&&(o.Pt.Z=l.Z),a=this.DupOutPt(o,!u))}else{for(;o.Next.Pt.X>=l.X&&o.Next.Pt.X<=o.Pt.X&&o.Next.Pt.Y===l.Y;)o=o.Next;u||o.Pt.X===l.X||(o=o.Next),a=this.DupOutPt(o,u),i.IntPoint.op_Inequality(a.Pt,l)&&((o=a).Pt.X=l.X,o.Pt.Y=l.Y,i.use_xyz&&(o.Pt.Z=l.Z),a=this.DupOutPt(o,u))}return c===i.Direction.dLeftToRight===u?(t.Prev=o,o.Next=t,r.Next=a,a.Prev=r):(t.Next=o,o.Prev=t,r.Prev=a,a.Next=r),!0},i.Clipper.prototype.JoinPoints=function(t,r,o){var a=t.OutPt1,l=new i.OutPt,u=t.OutPt2,c=new i.OutPt,h=t.OutPt1.Pt.Y===t.OffPt.Y;if(h&&i.IntPoint.op_Equality(t.OffPt,t.OutPt1.Pt)&&i.IntPoint.op_Equality(t.OffPt,t.OutPt2.Pt)){if(r!==o)return!1;for(l=t.OutPt1.Next;l!==a&&i.IntPoint.op_Equality(l.Pt,t.OffPt);)l=l.Next;var p=l.Pt.Y>t.OffPt.Y;for(c=t.OutPt2.Next;c!==u&&i.IntPoint.op_Equality(c.Pt,t.OffPt);)c=c.Next;return p!==c.Pt.Y>t.OffPt.Y&&(p?(l=this.DupOutPt(a,!1),c=this.DupOutPt(u,!0),a.Prev=u,u.Next=a,l.Next=c,c.Prev=l,t.OutPt1=a,t.OutPt2=l,!0):(l=this.DupOutPt(a,!0),c=this.DupOutPt(u,!1),a.Next=u,u.Prev=a,l.Prev=c,c.Next=l,t.OutPt1=a,t.OutPt2=l,!0))}if(h){for(l=a;a.Prev.Pt.Y===a.Pt.Y&&a.Prev!==l&&a.Prev!==u;)a=a.Prev;for(;l.Next.Pt.Y===l.Pt.Y&&l.Next!==a&&l.Next!==u;)l=l.Next;if(l.Next===a||l.Next===u)return!1;for(c=u;u.Prev.Pt.Y===u.Pt.Y&&u.Prev!==c&&u.Prev!==l;)u=u.Prev;for(;c.Next.Pt.Y===c.Pt.Y&&c.Next!==u&&c.Next!==a;)c=c.Next;if(c.Next===u||c.Next===a)return!1;var d={Left:null,Right:null};if(!this.GetOverlap(a.Pt.X,l.Pt.X,u.Pt.X,c.Pt.X,d))return!1;var y,v=d.Left,P=d.Right,m=new i.IntPoint0;return a.Pt.X>=v&&a.Pt.X<=P?(m.X=a.Pt.X,m.Y=a.Pt.Y,i.use_xyz&&(m.Z=a.Pt.Z),y=a.Pt.X>l.Pt.X):u.Pt.X>=v&&u.Pt.X<=P?(m.X=u.Pt.X,m.Y=u.Pt.Y,i.use_xyz&&(m.Z=u.Pt.Z),y=u.Pt.X>c.Pt.X):l.Pt.X>=v&&l.Pt.X<=P?(m.X=l.Pt.X,m.Y=l.Pt.Y,i.use_xyz&&(m.Z=l.Pt.Z),y=l.Pt.X>a.Pt.X):(m.X=c.Pt.X,m.Y=c.Pt.Y,i.use_xyz&&(m.Z=c.Pt.Z),y=c.Pt.X>u.Pt.X),t.OutPt1=a,t.OutPt2=u,this.JoinHorz(a,l,u,c,m,y)}for(l=a.Next;i.IntPoint.op_Equality(l.Pt,a.Pt)&&l!==a;)l=l.Next;var g=l.Pt.Y>a.Pt.Y||!i.ClipperBase.SlopesEqual4(a.Pt,l.Pt,t.OffPt,this.m_UseFullRange);if(g){for(l=a.Prev;i.IntPoint.op_Equality(l.Pt,a.Pt)&&l!==a;)l=l.Prev;if(l.Pt.Y>a.Pt.Y||!i.ClipperBase.SlopesEqual4(a.Pt,l.Pt,t.OffPt,this.m_UseFullRange))return!1}for(c=u.Next;i.IntPoint.op_Equality(c.Pt,u.Pt)&&c!==u;)c=c.Next;var _=c.Pt.Y>u.Pt.Y||!i.ClipperBase.SlopesEqual4(u.Pt,c.Pt,t.OffPt,this.m_UseFullRange);if(_){for(c=u.Prev;i.IntPoint.op_Equality(c.Pt,u.Pt)&&c!==u;)c=c.Prev;if(c.Pt.Y>u.Pt.Y||!i.ClipperBase.SlopesEqual4(u.Pt,c.Pt,t.OffPt,this.m_UseFullRange))return!1}return l!==a&&c!==u&&l!==c&&(r!==o||g!==_)&&(g?(l=this.DupOutPt(a,!1),c=this.DupOutPt(u,!0),a.Prev=u,u.Next=a,l.Next=c,c.Prev=l,t.OutPt1=a,t.OutPt2=l,!0):(l=this.DupOutPt(a,!0),c=this.DupOutPt(u,!1),a.Next=u,u.Prev=a,l.Prev=c,c.Next=l,t.OutPt1=a,t.OutPt2=l,!0))},i.Clipper.GetBounds=function(t){for(var r=0,o=t.length;r<o&&0===t[r].length;)r++;if(r===o)return new i.IntRect(0,0,0,0);var a=new i.IntRect;for(a.left=t[r][0].X,a.right=a.left,a.top=t[r][0].Y,a.bottom=a.top;r<o;r++)for(var l=0,u=t[r].length;l<u;l++)t[r][l].X<a.left?a.left=t[r][l].X:t[r][l].X>a.right&&(a.right=t[r][l].X),t[r][l].Y<a.top?a.top=t[r][l].Y:t[r][l].Y>a.bottom&&(a.bottom=t[r][l].Y);return a},i.Clipper.prototype.GetBounds2=function(t){var r=t,o=new i.IntRect;for(o.left=t.Pt.X,o.right=t.Pt.X,o.top=t.Pt.Y,o.bottom=t.Pt.Y,t=t.Next;t!==r;)t.Pt.X<o.left&&(o.left=t.Pt.X),t.Pt.X>o.right&&(o.right=t.Pt.X),t.Pt.Y<o.top&&(o.top=t.Pt.Y),t.Pt.Y>o.bottom&&(o.bottom=t.Pt.Y),t=t.Next;return o},i.Clipper.PointInPolygon=function(t,r){var i=0,o=r.length;if(o<3)return 0;for(var a=r[0],l=1;l<=o;++l){var u=l===o?r[0]:r[l];if(u.Y===t.Y&&(u.X===t.X||a.Y===t.Y&&u.X>t.X==a.X<t.X))return-1;if(a.Y<t.Y!=u.Y<t.Y)if(a.X>=t.X)if(u.X>t.X)i=1-i;else{if(0===(c=(a.X-t.X)*(u.Y-t.Y)-(u.X-t.X)*(a.Y-t.Y)))return-1;c>0==u.Y>a.Y&&(i=1-i)}else if(u.X>t.X){var c;if(0===(c=(a.X-t.X)*(u.Y-t.Y)-(u.X-t.X)*(a.Y-t.Y)))return-1;c>0==u.Y>a.Y&&(i=1-i)}a=u}return i},i.Clipper.prototype.PointInPolygon=function(t,r){var i=0,o=r,a=t.X,l=t.Y,u=r.Pt.X,c=r.Pt.Y;do{var h=(r=r.Next).Pt.X,p=r.Pt.Y;if(p===l&&(h===a||c===l&&h>a==u<a))return-1;if(c<l!=p<l)if(u>=a)if(h>a)i=1-i;else{if(0===(d=(u-a)*(p-l)-(h-a)*(c-l)))return-1;d>0==p>c&&(i=1-i)}else if(h>a){var d;if(0===(d=(u-a)*(p-l)-(h-a)*(c-l)))return-1;d>0==p>c&&(i=1-i)}u=h,c=p}while(o!==r);return i},i.Clipper.prototype.Poly2ContainsPoly1=function(t,r){var i=t;do{var o=this.PointInPolygon(i.Pt,r);if(o>=0)return o>0;i=i.Next}while(i!==t);return!0},i.Clipper.prototype.FixupFirstLefts1=function(t,r){for(var o,a,l=0,u=this.m_PolyOuts.length;l<u;l++)o=this.m_PolyOuts[l],a=i.Clipper.ParseFirstLeft(o.FirstLeft),null!==o.Pts&&a===t&&this.Poly2ContainsPoly1(o.Pts,r.Pts)&&(o.FirstLeft=r)},i.Clipper.prototype.FixupFirstLefts2=function(t,r){for(var o,a,l=r.FirstLeft,u=0,c=this.m_PolyOuts.length;u<c;u++)null!==(o=this.m_PolyOuts[u]).Pts&&o!==r&&o!==t&&((a=i.Clipper.ParseFirstLeft(o.FirstLeft))!==l&&a!==t&&a!==r||(this.Poly2ContainsPoly1(o.Pts,t.Pts)?o.FirstLeft=t:this.Poly2ContainsPoly1(o.Pts,r.Pts)?o.FirstLeft=r:o.FirstLeft!==t&&o.FirstLeft!==r||(o.FirstLeft=l)))},i.Clipper.prototype.FixupFirstLefts3=function(t,r){for(var o,a,l=0,u=this.m_PolyOuts.length;l<u;l++)o=this.m_PolyOuts[l],a=i.Clipper.ParseFirstLeft(o.FirstLeft),null!==o.Pts&&a===t&&(o.FirstLeft=r)},i.Clipper.ParseFirstLeft=function(t){for(;null!==t&&null===t.Pts;)t=t.FirstLeft;return t},i.Clipper.prototype.JoinCommonEdges=function(){for(var t=0,r=this.m_Joins.length;t<r;t++){var i,o=this.m_Joins[t],a=this.GetOutRec(o.OutPt1.Idx),l=this.GetOutRec(o.OutPt2.Idx);if(null!==a.Pts&&null!==l.Pts)if(!a.IsOpen&&!l.IsOpen)i=a===l?a:this.OutRec1RightOfOutRec2(a,l)?l:this.OutRec1RightOfOutRec2(l,a)?a:this.GetLowermostRec(a,l),this.JoinPoints(o,a,l)&&(a===l?(a.Pts=o.OutPt1,a.BottomPt=null,(l=this.CreateOutRec()).Pts=o.OutPt2,this.UpdateOutPtIdxs(l),this.Poly2ContainsPoly1(l.Pts,a.Pts)?(l.IsHole=!a.IsHole,l.FirstLeft=a,this.m_UsingPolyTree&&this.FixupFirstLefts2(l,a),(l.IsHole^this.ReverseSolution)==this.Area$1(l)>0&&this.ReversePolyPtLinks(l.Pts)):this.Poly2ContainsPoly1(a.Pts,l.Pts)?(l.IsHole=a.IsHole,a.IsHole=!l.IsHole,l.FirstLeft=a.FirstLeft,a.FirstLeft=l,this.m_UsingPolyTree&&this.FixupFirstLefts2(a,l),(a.IsHole^this.ReverseSolution)==this.Area$1(a)>0&&this.ReversePolyPtLinks(a.Pts)):(l.IsHole=a.IsHole,l.FirstLeft=a.FirstLeft,this.m_UsingPolyTree&&this.FixupFirstLefts1(a,l))):(l.Pts=null,l.BottomPt=null,l.Idx=a.Idx,a.IsHole=i.IsHole,i===l&&(a.FirstLeft=l.FirstLeft),l.FirstLeft=a,this.m_UsingPolyTree&&this.FixupFirstLefts3(l,a)))}},i.Clipper.prototype.UpdateOutPtIdxs=function(t){var r=t.Pts;do{r.Idx=t.Idx,r=r.Prev}while(r!==t.Pts)},i.Clipper.prototype.DoSimplePolygons=function(){for(var t=0;t<this.m_PolyOuts.length;){var r=this.m_PolyOuts[t++],o=r.Pts;if(null!==o&&!r.IsOpen)do{for(var a=o.Next;a!==r.Pts;){if(i.IntPoint.op_Equality(o.Pt,a.Pt)&&a.Next!==o&&a.Prev!==o){var l=o.Prev,u=a.Prev;o.Prev=u,u.Next=o,a.Prev=l,l.Next=a,r.Pts=o;var c=this.CreateOutRec();c.Pts=a,this.UpdateOutPtIdxs(c),this.Poly2ContainsPoly1(c.Pts,r.Pts)?(c.IsHole=!r.IsHole,c.FirstLeft=r,this.m_UsingPolyTree&&this.FixupFirstLefts2(c,r)):this.Poly2ContainsPoly1(r.Pts,c.Pts)?(c.IsHole=r.IsHole,r.IsHole=!c.IsHole,c.FirstLeft=r.FirstLeft,r.FirstLeft=c,this.m_UsingPolyTree&&this.FixupFirstLefts2(r,c)):(c.IsHole=r.IsHole,c.FirstLeft=r.FirstLeft,this.m_UsingPolyTree&&this.FixupFirstLefts1(r,c)),a=o}a=a.Next}o=o.Next}while(o!==r.Pts)}},i.Clipper.Area=function(t){if(!Array.isArray(t))return 0;var r=t.length;if(r<3)return 0;for(var i=0,o=0,a=r-1;o<r;++o)i+=(t[a].X+t[o].X)*(t[a].Y-t[o].Y),a=o;return.5*-i},i.Clipper.prototype.Area=function(t){var r=t;if(null===t)return 0;var i=0;do{i+=(t.Prev.Pt.X+t.Pt.X)*(t.Prev.Pt.Y-t.Pt.Y),t=t.Next}while(t!==r);return.5*i},i.Clipper.prototype.Area$1=function(t){return this.Area(t.Pts)},i.Clipper.SimplifyPolygon=function(t,r){var o=new Array,a=new i.Clipper(0);return a.StrictlySimple=!0,a.AddPath(t,i.PolyType.ptSubject,!0),a.Execute(i.ClipType.ctUnion,o,r,r),o},i.Clipper.SimplifyPolygons=function(t,r){void 0===r&&(r=i.PolyFillType.pftEvenOdd);var o=new Array,a=new i.Clipper(0);return a.StrictlySimple=!0,a.AddPaths(t,i.PolyType.ptSubject,!0),a.Execute(i.ClipType.ctUnion,o,r,r),o},i.Clipper.DistanceSqrd=function(t,r){var i=t.X-r.X,o=t.Y-r.Y;return i*i+o*o},i.Clipper.DistanceFromLineSqrd=function(t,r,i){var o=r.Y-i.Y,a=i.X-r.X,l=o*r.X+a*r.Y;return(l=o*t.X+a*t.Y-l)*l/(o*o+a*a)},i.Clipper.SlopesNearCollinear=function(t,r,o,a){return Math.abs(t.X-r.X)>Math.abs(t.Y-r.Y)?t.X>r.X==t.X<o.X?i.Clipper.DistanceFromLineSqrd(t,r,o)<a:r.X>t.X==r.X<o.X?i.Clipper.DistanceFromLineSqrd(r,t,o)<a:i.Clipper.DistanceFromLineSqrd(o,t,r)<a:t.Y>r.Y==t.Y<o.Y?i.Clipper.DistanceFromLineSqrd(t,r,o)<a:r.Y>t.Y==r.Y<o.Y?i.Clipper.DistanceFromLineSqrd(r,t,o)<a:i.Clipper.DistanceFromLineSqrd(o,t,r)<a},i.Clipper.PointsAreClose=function(t,r,i){var o=t.X-r.X,a=t.Y-r.Y;return o*o+a*a<=i},i.Clipper.ExcludeOp=function(t){var r=t.Prev;return r.Next=t.Next,t.Next.Prev=r,r.Idx=0,r},i.Clipper.CleanPolygon=function(t,r){void 0===r&&(r=1.415);var o=t.length;if(0===o)return new Array;for(var a=new Array(o),l=0;l<o;++l)a[l]=new i.OutPt;for(l=0;l<o;++l)a[l].Pt=t[l],a[l].Next=a[(l+1)%o],a[l].Next.Prev=a[l],a[l].Idx=0;for(var u=r*r,c=a[0];0===c.Idx&&c.Next!==c.Prev;)i.Clipper.PointsAreClose(c.Pt,c.Prev.Pt,u)?(c=i.Clipper.ExcludeOp(c),o--):i.Clipper.PointsAreClose(c.Prev.Pt,c.Next.Pt,u)?(i.Clipper.ExcludeOp(c.Next),c=i.Clipper.ExcludeOp(c),o-=2):i.Clipper.SlopesNearCollinear(c.Prev.Pt,c.Pt,c.Next.Pt,u)?(c=i.Clipper.ExcludeOp(c),o--):(c.Idx=1,c=c.Next);o<3&&(o=0);var h=new Array(o);for(l=0;l<o;++l)h[l]=new i.IntPoint1(c.Pt),c=c.Next;return a=null,h},i.Clipper.CleanPolygons=function(t,r){for(var o=new Array(t.length),a=0,l=t.length;a<l;a++)o[a]=i.Clipper.CleanPolygon(t[a],r);return o},i.Clipper.Minkowski=function(t,r,o,a){var l=a?1:0,u=t.length,c=r.length,h=new Array;if(o)for(var p=0;p<c;p++){for(var d=new Array(u),y=0,v=t.length,P=t[y];y<v;P=t[++y])d[y]=new i.IntPoint2(r[p].X+P.X,r[p].Y+P.Y);h.push(d)}else for(p=0;p<c;p++){for(d=new Array(u),y=0,v=t.length,P=t[y];y<v;P=t[++y])d[y]=new i.IntPoint2(r[p].X-P.X,r[p].Y-P.Y);h.push(d)}var m=new Array;for(p=0;p<c-1+l;p++)for(y=0;y<u;y++){var g=new Array;g.push(h[p%c][y%u]),g.push(h[(p+1)%c][y%u]),g.push(h[(p+1)%c][(y+1)%u]),g.push(h[p%c][(y+1)%u]),i.Clipper.Orientation(g)||g.reverse(),m.push(g)}return m},i.Clipper.MinkowskiSum=function(t,r,o){if(r[0]instanceof Array){p=r;for(var a=new i.Paths,l=(c=new i.Clipper,0);l<p.length;++l){var u=i.Clipper.Minkowski(t,p[l],!0,o);if(c.AddPaths(u,i.PolyType.ptSubject,!0),o){h=i.Clipper.TranslatePath(p[l],t[0]);c.AddPath(h,i.PolyType.ptClip,!0)}}return c.Execute(i.ClipType.ctUnion,a,i.PolyFillType.pftNonZero,i.PolyFillType.pftNonZero),a}var c,h=r,p=i.Clipper.Minkowski(t,h,!0,o);return(c=new i.Clipper).AddPaths(p,i.PolyType.ptSubject,!0),c.Execute(i.ClipType.ctUnion,p,i.PolyFillType.pftNonZero,i.PolyFillType.pftNonZero),p},i.Clipper.TranslatePath=function(t,r){for(var o=new i.Path,a=0;a<t.length;a++)o.push(new i.IntPoint2(t[a].X+r.X,t[a].Y+r.Y));return o},i.Clipper.MinkowskiDiff=function(t,r){var o=i.Clipper.Minkowski(t,r,!1,!0),a=new i.Clipper;return a.AddPaths(o,i.PolyType.ptSubject,!0),a.Execute(i.ClipType.ctUnion,o,i.PolyFillType.pftNonZero,i.PolyFillType.pftNonZero),o},i.Clipper.PolyTreeToPaths=function(t){var r=new Array;return i.Clipper.AddPolyNodeToPaths(t,i.Clipper.NodeType.ntAny,r),r},i.Clipper.AddPolyNodeToPaths=function(t,r,o){var a=!0;switch(r){case i.Clipper.NodeType.ntOpen:return;case i.Clipper.NodeType.ntClosed:a=!t.IsOpen}t.m_polygon.length>0&&a&&o.push(t.m_polygon);for(var l=0,u=t.Childs(),c=u.length,h=u[l];l<c;h=u[++l])i.Clipper.AddPolyNodeToPaths(h,r,o)},i.Clipper.OpenPathsFromPolyTree=function(t){for(var r=new i.Paths,o=0,a=t.ChildCount();o<a;o++)t.Childs()[o].IsOpen&&r.push(t.Childs()[o].m_polygon);return r},i.Clipper.ClosedPathsFromPolyTree=function(t){var r=new i.Paths;return i.Clipper.AddPolyNodeToPaths(t,i.Clipper.NodeType.ntClosed,r),r},P(i.Clipper,i.ClipperBase),i.Clipper.NodeType={ntAny:0,ntOpen:1,ntClosed:2},i.ClipperOffset=function(t,r){void 0===t&&(t=2),void 0===r&&(r=i.ClipperOffset.def_arc_tolerance),this.m_destPolys=new i.Paths,this.m_srcPoly=new i.Path,this.m_destPoly=new i.Path,this.m_normals=new Array,this.m_delta=0,this.m_sinA=0,this.m_sin=0,this.m_cos=0,this.m_miterLim=0,this.m_StepsPerRad=0,this.m_lowest=new i.IntPoint0,this.m_polyNodes=new i.PolyNode,this.MiterLimit=t,this.ArcTolerance=r,this.m_lowest.X=-1},i.ClipperOffset.two_pi=6.28318530717959,i.ClipperOffset.def_arc_tolerance=.25,i.ClipperOffset.prototype.Clear=function(){i.Clear(this.m_polyNodes.Childs()),this.m_lowest.X=-1},i.ClipperOffset.Round=i.Clipper.Round,i.ClipperOffset.prototype.AddPath=function(t,r,o){var a=t.length-1;if(!(a<0)){var l=new i.PolyNode;if(l.m_jointype=r,l.m_endtype=o,o===i.EndType.etClosedLine||o===i.EndType.etClosedPolygon)for(;a>0&&i.IntPoint.op_Equality(t[0],t[a]);)a--;l.m_polygon.push(t[0]);for(var u=0,c=0,h=1;h<=a;h++)i.IntPoint.op_Inequality(l.m_polygon[u],t[h])&&(u++,l.m_polygon.push(t[h]),(t[h].Y>l.m_polygon[c].Y||t[h].Y===l.m_polygon[c].Y&&t[h].X<l.m_polygon[c].X)&&(c=u));if(!(o===i.EndType.etClosedPolygon&&u<2)&&(this.m_polyNodes.AddChild(l),o===i.EndType.etClosedPolygon))if(this.m_lowest.X<0)this.m_lowest=new i.IntPoint2(this.m_polyNodes.ChildCount()-1,c);else{var p=this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];(l.m_polygon[c].Y>p.Y||l.m_polygon[c].Y===p.Y&&l.m_polygon[c].X<p.X)&&(this.m_lowest=new i.IntPoint2(this.m_polyNodes.ChildCount()-1,c))}}},i.ClipperOffset.prototype.AddPaths=function(t,r,i){for(var o=0,a=t.length;o<a;o++)this.AddPath(t[o],r,i)},i.ClipperOffset.prototype.FixOrientations=function(){if(this.m_lowest.X>=0&&!i.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))for(var t=0;t<this.m_polyNodes.ChildCount();t++){((r=this.m_polyNodes.Childs()[t]).m_endtype===i.EndType.etClosedPolygon||r.m_endtype===i.EndType.etClosedLine&&i.Clipper.Orientation(r.m_polygon))&&r.m_polygon.reverse()}else for(t=0;t<this.m_polyNodes.ChildCount();t++){var r;(r=this.m_polyNodes.Childs()[t]).m_endtype!==i.EndType.etClosedLine||i.Clipper.Orientation(r.m_polygon)||r.m_polygon.reverse()}},i.ClipperOffset.GetUnitNormal=function(t,r){var o=r.X-t.X,a=r.Y-t.Y;if(0===o&&0===a)return new i.DoublePoint2(0,0);var l=1/Math.sqrt(o*o+a*a);return o*=l,a*=l,new i.DoublePoint2(a,-o)},i.ClipperOffset.prototype.DoOffset=function(t){if(this.m_destPolys=new Array,this.m_delta=t,i.ClipperBase.near_zero(t))for(var r=0;r<this.m_polyNodes.ChildCount();r++){(l=this.m_polyNodes.Childs()[r]).m_endtype===i.EndType.etClosedPolygon&&this.m_destPolys.push(l.m_polygon)}else{var o;this.MiterLimit>2?this.m_miterLim=2/(this.MiterLimit*this.MiterLimit):this.m_miterLim=.5,o=this.ArcTolerance<=0?i.ClipperOffset.def_arc_tolerance:this.ArcTolerance>Math.abs(t)*i.ClipperOffset.def_arc_tolerance?Math.abs(t)*i.ClipperOffset.def_arc_tolerance:this.ArcTolerance;var a=3.14159265358979/Math.acos(1-o/Math.abs(t));this.m_sin=Math.sin(i.ClipperOffset.two_pi/a),this.m_cos=Math.cos(i.ClipperOffset.two_pi/a),this.m_StepsPerRad=a/i.ClipperOffset.two_pi,t<0&&(this.m_sin=-this.m_sin);for(r=0;r<this.m_polyNodes.ChildCount();r++){var l=this.m_polyNodes.Childs()[r];this.m_srcPoly=l.m_polygon;var u=this.m_srcPoly.length;if(!(0===u||t<=0&&(u<3||l.m_endtype!==i.EndType.etClosedPolygon)))if(this.m_destPoly=new Array,1!==u){this.m_normals.length=0;for(v=0;v<u-1;v++)this.m_normals.push(i.ClipperOffset.GetUnitNormal(this.m_srcPoly[v],this.m_srcPoly[v+1]));if(l.m_endtype===i.EndType.etClosedLine||l.m_endtype===i.EndType.etClosedPolygon?this.m_normals.push(i.ClipperOffset.GetUnitNormal(this.m_srcPoly[u-1],this.m_srcPoly[0])):this.m_normals.push(new i.DoublePoint1(this.m_normals[u-2])),l.m_endtype===i.EndType.etClosedPolygon){var c=u-1;for(v=0;v<u;v++)c=this.OffsetPoint(v,c,l.m_jointype);this.m_destPolys.push(this.m_destPoly)}else if(l.m_endtype===i.EndType.etClosedLine){for(c=u-1,v=0;v<u;v++)c=this.OffsetPoint(v,c,l.m_jointype);this.m_destPolys.push(this.m_destPoly),this.m_destPoly=new Array;var h=this.m_normals[u-1];for(v=u-1;v>0;v--)this.m_normals[v]=new i.DoublePoint2(-this.m_normals[v-1].X,-this.m_normals[v-1].Y);this.m_normals[0]=new i.DoublePoint2(-h.X,-h.Y),c=0;for(v=u-1;v>=0;v--)c=this.OffsetPoint(v,c,l.m_jointype);this.m_destPolys.push(this.m_destPoly)}else{var p;for(c=0,v=1;v<u-1;++v)c=this.OffsetPoint(v,c,l.m_jointype);if(l.m_endtype===i.EndType.etOpenButt){v=u-1;p=new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[v].X+this.m_normals[v].X*t),i.ClipperOffset.Round(this.m_srcPoly[v].Y+this.m_normals[v].Y*t)),this.m_destPoly.push(p),p=new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[v].X-this.m_normals[v].X*t),i.ClipperOffset.Round(this.m_srcPoly[v].Y-this.m_normals[v].Y*t)),this.m_destPoly.push(p)}else{v=u-1;c=u-2,this.m_sinA=0,this.m_normals[v]=new i.DoublePoint2(-this.m_normals[v].X,-this.m_normals[v].Y),l.m_endtype===i.EndType.etOpenSquare?this.DoSquare(v,c):this.DoRound(v,c)}for(v=u-1;v>0;v--)this.m_normals[v]=new i.DoublePoint2(-this.m_normals[v-1].X,-this.m_normals[v-1].Y);this.m_normals[0]=new i.DoublePoint2(-this.m_normals[1].X,-this.m_normals[1].Y);for(v=(c=u-1)-1;v>0;--v)c=this.OffsetPoint(v,c,l.m_jointype);l.m_endtype===i.EndType.etOpenButt?(p=new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[0].X-this.m_normals[0].X*t),i.ClipperOffset.Round(this.m_srcPoly[0].Y-this.m_normals[0].Y*t)),this.m_destPoly.push(p),p=new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[0].X+this.m_normals[0].X*t),i.ClipperOffset.Round(this.m_srcPoly[0].Y+this.m_normals[0].Y*t)),this.m_destPoly.push(p)):(c=1,this.m_sinA=0,l.m_endtype===i.EndType.etOpenSquare?this.DoSquare(0,1):this.DoRound(0,1)),this.m_destPolys.push(this.m_destPoly)}}else{if(l.m_jointype===i.JoinType.jtRound)for(var d=1,y=0,v=1;v<=a;v++){this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[0].X+d*t),i.ClipperOffset.Round(this.m_srcPoly[0].Y+y*t)));var P=d;d=d*this.m_cos-this.m_sin*y,y=P*this.m_sin+y*this.m_cos}else{d=-1,y=-1;for(var v=0;v<4;++v)this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[0].X+d*t),i.ClipperOffset.Round(this.m_srcPoly[0].Y+y*t))),d<0?d=1:y<0?y=1:d=-1}this.m_destPolys.push(this.m_destPoly)}}}},i.ClipperOffset.prototype.Execute=function(){var t=arguments,r=t[0]instanceof i.PolyTree;if(r){u=t[0],c=t[1];if(u.Clear(),this.FixOrientations(),this.DoOffset(c),(l=new i.Clipper(0)).AddPaths(this.m_destPolys,i.PolyType.ptSubject,!0),c>0)l.Execute(i.ClipType.ctUnion,u,i.PolyFillType.pftPositive,i.PolyFillType.pftPositive);else{p=i.Clipper.GetBounds(this.m_destPolys);if((h=new i.Path).push(new i.IntPoint2(p.left-10,p.bottom+10)),h.push(new i.IntPoint2(p.right+10,p.bottom+10)),h.push(new i.IntPoint2(p.right+10,p.top-10)),h.push(new i.IntPoint2(p.left-10,p.top-10)),l.AddPath(h,i.PolyType.ptSubject,!0),l.ReverseSolution=!0,l.Execute(i.ClipType.ctUnion,u,i.PolyFillType.pftNegative,i.PolyFillType.pftNegative),1===u.ChildCount()&&u.Childs()[0].ChildCount()>0){var o=u.Childs()[0];u.Childs()[0]=o.Childs()[0],u.Childs()[0].m_Parent=u;for(var a=1;a<o.ChildCount();a++)u.AddChild(o.Childs()[a])}else u.Clear()}}else{var l,u=t[0],c=t[1];if(i.Clear(u),this.FixOrientations(),this.DoOffset(c),(l=new i.Clipper(0)).AddPaths(this.m_destPolys,i.PolyType.ptSubject,!0),c>0)l.Execute(i.ClipType.ctUnion,u,i.PolyFillType.pftPositive,i.PolyFillType.pftPositive);else{var h,p=i.Clipper.GetBounds(this.m_destPolys);(h=new i.Path).push(new i.IntPoint2(p.left-10,p.bottom+10)),h.push(new i.IntPoint2(p.right+10,p.bottom+10)),h.push(new i.IntPoint2(p.right+10,p.top-10)),h.push(new i.IntPoint2(p.left-10,p.top-10)),l.AddPath(h,i.PolyType.ptSubject,!0),l.ReverseSolution=!0,l.Execute(i.ClipType.ctUnion,u,i.PolyFillType.pftNegative,i.PolyFillType.pftNegative),u.length>0&&u.splice(0,1)}}},i.ClipperOffset.prototype.OffsetPoint=function(t,r,o){if(this.m_sinA=this.m_normals[r].X*this.m_normals[t].Y-this.m_normals[t].X*this.m_normals[r].Y,Math.abs(this.m_sinA*this.m_delta)<1){if(this.m_normals[r].X*this.m_normals[t].X+this.m_normals[t].Y*this.m_normals[r].Y>0)return this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[r].X*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[r].Y*this.m_delta))),r}else this.m_sinA>1?this.m_sinA=1:this.m_sinA<-1&&(this.m_sinA=-1);if(this.m_sinA*this.m_delta<0)this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[r].X*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[r].Y*this.m_delta))),this.m_destPoly.push(new i.IntPoint1(this.m_srcPoly[t])),this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[t].X*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[t].Y*this.m_delta)));else switch(o){case i.JoinType.jtMiter:var a=this.m_normals[t].X*this.m_normals[r].X+this.m_normals[t].Y*this.m_normals[r].Y+1;a>=this.m_miterLim?this.DoMiter(t,r,a):this.DoSquare(t,r);break;case i.JoinType.jtSquare:this.DoSquare(t,r);break;case i.JoinType.jtRound:this.DoRound(t,r)}return r=t},i.ClipperOffset.prototype.DoSquare=function(t,r){var o=Math.tan(Math.atan2(this.m_sinA,this.m_normals[r].X*this.m_normals[t].X+this.m_normals[r].Y*this.m_normals[t].Y)/4);this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_delta*(this.m_normals[r].X-this.m_normals[r].Y*o)),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_delta*(this.m_normals[r].Y+this.m_normals[r].X*o)))),this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_delta*(this.m_normals[t].X+this.m_normals[t].Y*o)),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_delta*(this.m_normals[t].Y-this.m_normals[t].X*o))))},i.ClipperOffset.prototype.DoMiter=function(t,r,o){var a=this.m_delta/o;this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+(this.m_normals[r].X+this.m_normals[t].X)*a),i.ClipperOffset.Round(this.m_srcPoly[t].Y+(this.m_normals[r].Y+this.m_normals[t].Y)*a)))},i.ClipperOffset.prototype.DoRound=function(t,r){for(var o,a=Math.atan2(this.m_sinA,this.m_normals[r].X*this.m_normals[t].X+this.m_normals[r].Y*this.m_normals[t].Y),l=Math.max(i.Cast_Int32(i.ClipperOffset.Round(this.m_StepsPerRad*Math.abs(a))),1),u=this.m_normals[r].X,c=this.m_normals[r].Y,h=0;h<l;++h)this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+u*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+c*this.m_delta))),o=u,u=u*this.m_cos-this.m_sin*c,c=o*this.m_sin+c*this.m_cos;this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[t].X*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[t].Y*this.m_delta)))},i.Error=function(t){try{throw new Error(t)}catch(t){alert(t.message)}},i.JS={},i.JS.AreaOfPolygon=function(t,r){return r||(r=1),i.Clipper.Area(t)/(r*r)},i.JS.AreaOfPolygons=function(t,r){r||(r=1);for(var o=0,a=0;a<t.length;a++)o+=i.Clipper.Area(t[a]);return o/(r*r)},i.JS.BoundsOfPath=function(t,r){return i.JS.BoundsOfPaths([t],r)},i.JS.BoundsOfPaths=function(t,r){r||(r=1);var o=i.Clipper.GetBounds(t);return o.left/=r,o.bottom/=r,o.right/=r,o.top/=r,o},i.JS.Clean=function(t,r){if(!(t instanceof Array))return[];var o=t[0]instanceof Array;t=i.JS.Clone(t);if("number"!=typeof r||null===r)return i.Error("Delta is not a number in Clean()."),t;if(0===t.length||1===t.length&&0===t[0].length||r<0)return t;o||(t=[t]);for(var a,l,u,c,h,p,d,y=t.length,v=[],P=0;P<y;P++)if(0!==(a=(l=t[P]).length))if(a<3)u=l,v.push(u);else{for(u=l,c=r*r,h=l[0],p=1,d=1;d<a;d++)(l[d].X-h.X)*(l[d].X-h.X)+(l[d].Y-h.Y)*(l[d].Y-h.Y)<=c||(u[p]=l[d],h=l[d],p++);h=l[p-1],(l[0].X-h.X)*(l[0].X-h.X)+(l[0].Y-h.Y)*(l[0].Y-h.Y)<=c&&p--,p<a&&u.splice(p,a-p),u.length&&v.push(u)}return!o&&v.length?v=v[0]:o||0!==v.length?o&&0===v.length&&(v=[[]]):v=[],v},i.JS.Clone=function(t){if(!(t instanceof Array))return[];if(0===t.length)return[];if(1===t.length&&0===t[0].length)return[[]];var r=t[0]instanceof Array;r||(t=[t]);var i,o,a,l,u=t.length,c=new Array(u);for(o=0;o<u;o++){for(i=t[o].length,l=new Array(i),a=0;a<i;a++)l[a]={X:t[o][a].X,Y:t[o][a].Y};c[o]=l}return r||(c=c[0]),c},i.JS.Lighten=function(t,r){if(!(t instanceof Array))return[];if("number"!=typeof r||null===r)return i.Error("Tolerance is not a number in Lighten()."),i.JS.Clone(t);if(0===t.length||1===t.length&&0===t[0].length||r<0)return i.JS.Clone(t);var o,a,l,u,c,h,p,d,y,v,P,m,g,_,b,x,I=t[0]instanceof Array;I||(t=[t]);var C=t.length,O=r*r,w=[];for(o=0;o<C;o++)if(0!==(h=(l=t[o]).length)){for(u=0;u<1e6;u++){for(c=[],l[(h=l.length)-1].X!==l[0].X||l[h-1].Y!==l[0].Y?(P=1,l.push({X:l[0].X,Y:l[0].Y}),h=l.length):P=0,v=[],a=0;a<h-2;a++)p=l[a],y=l[a+1],d=l[a+2],b=p.X,x=p.Y,m=d.X-b,g=d.Y-x,0===m&&0===g||((_=((y.X-b)*m+(y.Y-x)*g)/(m*m+g*g))>1?(b=d.X,x=d.Y):_>0&&(b+=m*_,x+=g*_)),(m=y.X-b)*m+(g=y.Y-x)*g<=O&&(v[a+1]=1,a++);for(c.push({X:l[0].X,Y:l[0].Y}),a=1;a<h-1;a++)v[a]||c.push({X:l[a].X,Y:l[a].Y});if(c.push({X:l[h-1].X,Y:l[h-1].Y}),P&&l.pop(),!v.length)break;l=c}c[(h=c.length)-1].X===c[0].X&&c[h-1].Y===c[0].Y&&c.pop(),c.length>2&&w.push(c)}return I||(w=w[0]),void 0===w&&(w=[]),w},i.JS.PerimeterOfPath=function(t,r,i){if(void 0===t)return 0;var o,a,l=Math.sqrt,u=0,c=0,h=0,p=0,d=0,y=t.length;if(y<2)return 0;for(r&&(t[y]=t[0],y++);--y;)c=(o=t[y]).X,h=o.Y,u+=l((c-(p=(a=t[y-1]).X))*(c-p)+(h-(d=a.Y))*(h-d));return r&&t.pop(),u/i},i.JS.PerimeterOfPaths=function(t,r,o){o||(o=1);for(var a=0,l=0;l<t.length;l++)a+=i.JS.PerimeterOfPath(t[l],r,o);return a},i.JS.ScaleDownPath=function(t,r){var i,o;for(r||(r=1),i=t.length;i--;)(o=t[i]).X=o.X/r,o.Y=o.Y/r},i.JS.ScaleDownPaths=function(t,r){var i,o,a;for(r||(r=1),i=t.length;i--;)for(o=t[i].length;o--;)(a=t[i][o]).X=a.X/r,a.Y=a.Y/r},i.JS.ScaleUpPath=function(t,r){var i,o,a=Math.round;for(r||(r=1),i=t.length;i--;)(o=t[i]).X=a(o.X*r),o.Y=a(o.Y*r)},i.JS.ScaleUpPaths=function(t,r){var i,o,a,l=Math.round;for(r||(r=1),i=t.length;i--;)for(o=t[i].length;o--;)(a=t[i][o]).X=l(a.X*r),a.Y=l(a.Y*r)},i.ExPolygons=function(){return[]},i.ExPolygon=function(){this.outer=null,this.holes=null},i.JS.AddOuterPolyNodeToExPolygons=function(t,r){var o=new i.ExPolygon;o.outer=t.Contour();var a,l,u,c,h,p,d=t.Childs(),y=d.length;for(o.holes=new Array(y),u=0;u<y;u++)for(a=d[u],o.holes[u]=a.Contour(),c=0,p=(h=a.Childs()).length;c<p;c++)l=h[c],i.JS.AddOuterPolyNodeToExPolygons(l,r);r.push(o)},i.JS.ExPolygonsToPaths=function(t){var r,o,a,l,u=new i.Paths;for(r=0,a=t.length;r<a;r++)for(u.push(t[r].outer),o=0,l=t[r].holes.length;o<l;o++)u.push(t[r].holes[o]);return u},i.JS.PolyTreeToExPolygons=function(t){var r,o,a,l,u=new i.ExPolygons;for(o=0,l=(a=t.Childs()).length;o<l;o++)r=a[o],i.JS.AddOuterPolyNodeToExPolygons(r,u);return u}}()},899:(t,r,i)=>{"use strict";i.d(r,{Z:()=>u});var o=i(204),a=i(561),l=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var u=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(InitialSketch,t);var r=_createSuper(InitialSketch);function InitialSketch(){return _classCallCheck(this,InitialSketch),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(InitialSketch,[{key:"init",value:function init(){this.pos={x:this.canvasWidth/2,y:this.canvasHeight/2},this.vs.xDrift=new l.Z({name:"x Drift",min:0,max:20,initialValue:5}),this.vs.yDrift=new l.Z({name:"y Drift",min:0,max:20,initialValue:5}),this.vs.circleMinRadius=new l.Z({name:"Min rad",min:0,max:25,initialValue:3}),this.vs.circleMaxRadius=new l.Z({name:"Max rad",min:0,max:50,initialValue:12}),this.vs.circleDrift=new l.Z({name:"Circle Drift",min:0,max:100,initialValue:30}),this.vs.circleSpawnRate=new l.Z({name:"Spawn rate",min:1,max:300,step:1,initialValue:150}),this.vs.circleSpawnChance=new l.Z({name:"Spawn chance",min:0,max:1,initialValue:.5})}},{key:"initDraw",value:function initDraw(){this.vs.circleMaxRadius.value<this.vs.circleMinRadius.value&&this.vs.circleMaxRadius.setValue(this.vs.circleMinRadius.value,!0)}},{key:"draw",value:function draw(t){if(this.pos.x=(0,a.re)(this.pos.x,this.canvasWidth),this.pos.y=(0,a.re)(this.pos.y,this.canvasHeight),t%100==0&&(this.ctx.strokeStyle="#".concat((65793*(0,a.c4)(128)).toString(16))),this.ctx.beginPath(),this.ctx.moveTo(this.pos.x,this.pos.y),this.pos.x+=(0,a.Qy)(this.vs.xDrift.value),this.pos.y+=(0,a.Qy)(this.vs.yDrift.value),this.ctx.lineTo(this.pos.x,this.pos.y),this.ctx.stroke(),this.ctx.closePath(),t%this.vs.circleSpawnRate.value==0&&Math.random()<this.vs.circleSpawnChance.value){var r=this.ctx.fillStyle,i=this.ctx.strokeStyle;this.ctx.strokeStyle="#000",this.ctx.fillStyle="#".concat(Math.floor(8388607.5+(0,a.c4)(8388607.5)).toString(16)),this.ctx.beginPath(),this.ctx.circle(this.pos.x+(0,a.rO)(this.vs.circleDrift.value),this.pos.y+(0,a.rO)(this.vs.circleDrift.value),(0,a.c4)(this.vs.circleMaxRadius.value,this.vs.circleMinRadius.value)),this.ctx.fill(),this.ctx.stroke(),this.ctx.closePath(),this.ctx.strokeStyle=i,this.ctx.fillStyle=r}}}]),InitialSketch}(o.v);!function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}(u,"generateGCode",!1)},715:(t,r,i)=>{"use strict";function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}i.d(r,{Z:()=>o});var o=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(GCodeTest,t);var r=_createSuper(GCodeTest);function GCodeTest(){return _classCallCheck(this,GCodeTest),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(GCodeTest,[{key:"init",value:function init(){this.ctx.driver.comment("Drawing single line"),this.ctx.beginPath(),this.ctx.moveTo(10,10),this.ctx.lineTo(20,10),this.ctx.stroke(),this.ctx.closePath(),this.ctx.driver.comment("Drawing joined line"),this.ctx.beginPath(),this.ctx.moveTo(20,40),this.ctx.lineTo(25,40),this.ctx.lineTo(30,45),this.ctx.stroke(),this.ctx.closePath(),this.ctx.driver.comment("Drawing rect outline"),this.ctx.strokeRect(20,20,5,5),this.ctx.driver.comment("Drawing rect fill"),this.ctx.fillRect(30,20,5,5),this.ctx.driver.comment("Drawing circle"),this.ctx.beginPath(),"circle"in this.ctx&&this.ctx.circle(40,40,5),this.ctx.stroke(),this.ctx.closePath()}}]),GCodeTest}(i(204).v)},798:(t,r,i)=>{"use strict";i.d(r,{Z:()=>p});var o=i(563),a=i(323),l=i(204),u=i(132),c=i(286),h=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var p=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Arcs,t);var r=_createSuper(Arcs);function Arcs(){var t;_classCallCheck(this,Arcs);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"count",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Arcs,[{key:"init",value:function init(){var t=this;this.vs.precision=new h.Z({initialValue:180,min:2,max:1440,step:1}),this.vs.speedPow1=new h.Z({initialValue:.5,min:.001,max:10,step:.001}),this.vs.radiusMin=new h.Z({initialValue:.1,min:1,max:20,step:.1}),this.vs.radiusMax=new h.Z({initialValue:.5,min:1,max:20,step:.1}),this.vs.radiusThetaMulti=new h.Z({initialValue:1,min:.001,max:5,step:.001}),this.osc=new c.Z({speed:function speed(r){var i=Math.sqrt(r)/-Math.pow(Math.sqrt(r),t.vs.speedPow1.value);return isNaN(i)?0:i},radius:function radius(r){return new a.Z(t.vs.radiusMin.value+Math.cos(r*t.vs.radiusThetaMulti.value)*t.vs.radiusMax.value,t.vs.radiusMin.value+Math.sin(r*t.vs.radiusThetaMulti.value)*t.vs.radiusMax.value)}})}},{key:"initDraw",value:function initDraw(){this.vs.radiusMin.value>this.vs.radiusMax.value&&this.vs.radiusMax.setValue(this.vs.radiusMin.value,!0),console.log({precision:this.vs.precision.value,speedPow1:this.vs.speedPow1.value,radiusMin:this.vs.radiusMin.value,radiusMax:this.vs.radiusMax.value,radiusThetaMulti:this.vs.radiusThetaMulti.value}),this.count=0,this.lastPoint=void 0,this.osc.reset();var t=Math.min(this.cw,this.ch)/2-(this.vs.radiusMax.value+10),r=(0,u.CS)(this.cx,this.cy,0,2*Math.PI,t).start,i=new o.Z;i.moveTo(r.x,r.y),i.arc(this.cx,this.cy,t,0,2*Math.PI,!1),this.circlePoints=i.getPoints(this.vs.precision.value)}},{key:"draw",value:function draw(t){if(!(this.count>=this.circlePoints.length)){this.osc.step(this.count+1);var r=this.circlePoints[this.count],i=new a.Z(r.x+this.osc.x,r.y+this.osc.y);this.lastPoint&&r&&(this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.lineTo(i.x,i.y),this.ctx.stroke(),this.ctx.closePath()),this.lastPoint=i.clone(),this.count++}}}]),Arcs}(l.v)},613:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),l=i(561),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(BezierScribbles,t);var r=_createSuper(BezierScribbles);function BezierScribbles(){return _classCallCheck(this,BezierScribbles),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(BezierScribbles,[{key:"init",value:function init(){this.vs.stopAfter=new u.Z({initialValue:5,min:1,max:200,step:1}),this.vs.driftMin=new u.Z({initialValue:20,min:0,max:100,step:1}),this.vs.driftMax=new u.Z({initialValue:50,min:0,max:100,step:1}),this.vs.midpointDrift=new u.Z({initialValue:30,min:0,max:100,step:1})}},{key:"initDraw",value:function initDraw(){var t=Math.random()*Math.PI*2;this.lastPoint=new o.Z(this.cx+100*Math.cos(t),this.cy+100*+Math.sin(t)),this.lastAnchorPoint=this.lastPoint.clone()}},{key:"draw",value:function draw(t){if(!(t>this.vs.stopAfter.value)){var r=new o.Z(this.lastPoint.x+Math.cos(Math.random()*Math.PI*2)*(this.vs.driftMin.value+Math.random()*(this.vs.driftMax.value-this.vs.driftMin.value)),this.lastPoint.y+Math.sin(Math.random()*Math.PI*2)*(this.vs.driftMin.value+Math.random()*(this.vs.driftMax.value-this.vs.driftMin.value)));r.x+=(this.cx-r.x)/15,r.y+=(this.cy-r.y)/15;var i=this.lastAnchorPoint.angleTo(this.lastPoint),a=this.lastAnchorPoint.distanceTo(this.lastPoint),u=this.lastAnchorPoint.add(new o.Z(Math.cos(i)*(2*a),Math.sin(i)*(2*a))).add(new o.Z((0,l.rO)(this.vs.midpointDrift.value),(0,l.rO)(this.vs.midpointDrift.value)));u.x+=(this.cx-u.x)/15,u.y+=(this.cy-u.y)/15,this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.bezierCurveTo(u.x,u.y,u.x,u.y,r.x,r.y),this.ctx.stroke(),this.ctx.closePath(),this.lastPoint=r.clone(),this.lastAnchorPoint=u.clone()}}}]),BezierScribbles}(a.v);!function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}(c,"generateGCode",!1)},918:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),l=i(286),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Spiraling,t);var r=_createSuper(Spiraling);function Spiraling(){return _classCallCheck(this,Spiraling),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Spiraling,[{key:"init",value:function init(){var t=this,r=15;this.vs.speedUp=new u.Z({initialValue:10,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new u.Z({initialValue:5e4,min:1,max:12e4,step:1,disableRandomize:!0}),this.vs.osc1speed=new u.Z({initialValue:.1,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.osc1dist=new u.Z({initialValue:Math.PI/4/r,min:Math.PI/8/r,max:16*Math.PI/r,step:Math.PI/32/r}),this.vs.osc1phase=new u.Z({initialValue:0,min:0,max:2*Math.PI,step:Math.PI/16}),this.vs.osc2speed=new u.Z({initialValue:.1,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.osc2dist=new u.Z({initialValue:Math.PI/4/r,min:Math.PI/8/r,max:16*Math.PI/r,step:Math.PI/32/r}),this.vs.osc2phase=new u.Z({initialValue:0,min:0,max:2*Math.PI,step:Math.PI/16}),this.vs.osc3speed=new u.Z({initialValue:.1,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.osc3dist=new u.Z({initialValue:Math.PI/4/r,min:Math.PI/8/r,max:16*Math.PI/r,step:Math.PI/32/r}),this.vs.osc3phase=new u.Z({initialValue:0,min:0,max:2*Math.PI,step:Math.PI/16}),this.osc1=new l.Z({speed:function speed(r){return t.vs.osc1speed.value},radius:function radius(r){return t.vs.osc1dist.value},phase:0}),this.osc2=new l.Z({speed:function speed(r){return t.vs.osc2speed.value},radius:function radius(r){return t.vs.osc2dist.value},phase:0}),this.osc3=new l.Z({speed:function speed(r){return t.vs.osc3speed.value},radius:function radius(r){return t.vs.osc3dist.value},phase:0})}},{key:"initDraw",value:function initDraw(){this.lastPoint=new o.Z(this.cx,this.cy),this.vs.stopAfter.step=this.vs.speedUp.value,this.osc1.phase=this.vs.osc1phase.value,this.osc2.phase=this.vs.osc2phase.value,this.osc3.phase=this.vs.osc3phase.value,this.osc1.reset(),this.osc2.reset(),this.osc3.reset()}},{key:"draw",value:function draw(t){var r=this.vs.speedUp.value;if(!(t*r>this.vs.stopAfter.value))for(var i=0;i<r;i++){this.osc1.step(t),this.osc2.step(t),this.osc3.step(t);var o=this.lastPoint.clone().add(this.osc1.value.add(this.osc2.value).add(this.osc3.value));this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.lineTo(o.x,o.y),this.ctx.stroke(),this.ctx.closePath(),this.lastPoint=o}}}]),Spiraling}(a.v)},511:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),l=i(286),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(SpiralingProportional,t);var r=_createSuper(SpiralingProportional);function SpiralingProportional(){return _classCallCheck(this,SpiralingProportional),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(SpiralingProportional,[{key:"init",value:function init(){var t=this;this.vs.speedUp=new u.Z({initialValue:15,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new u.Z({initialValue:1e3,min:1,max:2e4,step:1,disableRandomize:!0}),this.vs.oscSpeed=new u.Z({initialValue:.1825,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.oscSpeedMulti=new u.Z({initialValue:2.994,min:.5,max:5,step:1e-5}),this.vs.oscDist=new u.Z({initialValue:50,min:1,max:20,step:.25}),this.vs.osc1phase=new u.Z({initialValue:5.9,min:0,max:2*Math.PI,step:Math.PI/32}),this.vs.osc2phase=new u.Z({initialValue:1.8,min:0,max:2*Math.PI,step:Math.PI/32}),this.vs.osc3phase=new u.Z({initialValue:2,min:0,max:2*Math.PI,step:Math.PI/32}),this.osc1=new l.Z({speed:function speed(r){return t.vs.oscSpeed.value*t.vs.oscSpeedMulti.value/2},radius:function radius(r){return t.vs.oscDist.value},phase:0}),this.osc2=new l.Z({speed:function speed(r){return t.vs.oscSpeed.value*Math.pow(t.vs.oscSpeedMulti.value,2)/2},radius:function radius(r){return t.vs.oscDist.value},phase:0}),this.osc3=new l.Z({speed:function speed(r){return t.vs.oscSpeed.value*Math.pow(t.vs.oscSpeedMulti.value,3)/3},radius:function radius(r){return t.vs.oscDist.value},phase:0})}},{key:"initDraw",value:function initDraw(){this.lastPoint=new o.Z(this.cx,this.cy),this.vs.stopAfter.step=this.vs.speedUp.value,this.osc1.phase=this.vs.osc1phase.value,this.osc2.phase=this.vs.osc2phase.value,this.osc3.phase=this.vs.osc3phase.value,this.osc1.reset(),this.osc2.reset(),this.osc3.reset()}},{key:"draw",value:function draw(t){var r=this.vs.speedUp.value;if(!(t*r>this.vs.stopAfter.value))for(var i=0;i<r;i++){this.osc1.step(t),this.osc2.step(t),this.osc3.step(t);var o=this.lastPoint.clone().add(this.osc1.value.add(this.osc2.value).add(this.osc3.value));this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.lineTo(o.x,o.y),this.ctx.stroke(),this.ctx.closePath(),this.lastPoint=o}}}]),SpiralingProportional}(a.v)},166:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),l=i(286),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(ConcentricCircles,t);var r=_createSuper(ConcentricCircles);function ConcentricCircles(){return _classCallCheck(this,ConcentricCircles),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(ConcentricCircles,[{key:"init",value:function init(){var t=this;this.vs.speedUp=new u.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new u.Z({initialValue:100,min:1,max:1e3,step:1,disableRandomize:!0}),this.vs.shrinkAmount=new u.Z({initialValue:15,min:1,max:12,step:.1}),this.vs.shrinkDiv=new u.Z({initialValue:1,min:0,max:1.8,step:.01}),this.vs.shrinkFalloff=new u.Z({initialValue:1,min:.9,max:1.1,step:.005}),this.vs.shrinkVariance=new u.Z({initialValue:0,min:0,max:50,step:.01}),this.vs.shrinkVarOsc=new u.Z({initialValue:Math.PI/32,min:0,max:Math.PI/4,step:.001}),this.vs.rotateSpeed=new u.Z({initialValue:Math.PI/32,min:-Math.PI/4,max:Math.PI/4,step:.001}),this.osc1=new l.Z({radius:function radius(r){return t.vs.shrinkVariance.value},speed:function speed(r){return t.vs.shrinkVarOsc.value},phase:0})}},{key:"initDraw",value:function initDraw(){this.lastPoint=new o.Z(this.cx,this.cy),this.radius=.45*Math.min(this.cw,this.ch),this.theta=0,this.osc1.reset()}},{key:"draw",value:function draw(t){var r=this.vs.speedUp.value;if(!(t*r>this.vs.stopAfter.value))for(var i=0;i<r;i++){var o=t*r+i;this.osc1.step(o),this.radius>0&&(this.ctx.beginPath(),this.ctx.circle(this.lastPoint.x,this.lastPoint.y,this.radius),this.ctx.stroke(),this.ctx.closePath()),this.theta+=this.vs.rotateSpeed.value;var a=this.radius-(this.vs.shrinkAmount.value+this.osc1.x)*Math.pow(this.vs.shrinkFalloff.value,o),l=this.radius-a;this.lastPoint=this.lastPoint.moveAlongAngle(this.theta,l*this.vs.shrinkDiv.value),this.radius=a}}}]),ConcentricCircles}(a.v)},703:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),l=i(497),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _createForOfIteratorHelper(t,r){var i="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!i){if(Array.isArray(t)||(i=function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t))||r&&t&&"number"==typeof t.length){i&&(t=i);var o=0,a=function F(){};return{s:a,n:function n(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function e(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var l,u=!0,c=!1;return{s:function s(){i=i.call(t)},n:function n(){var t=i.next();return u=t.done,t},e:function e(t){c=!0,l=t},f:function f(){try{u||null==i.return||i.return()}finally{if(c)throw l}}}}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(BubblesInCircle,t);var r=_createSuper(BubblesInCircle);function BubblesInCircle(){return _classCallCheck(this,BubblesInCircle),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(BubblesInCircle,[{key:"init",value:function init(){this.vs.seed=new u.Z({initialValue:1391,min:1e3,max:5e3,step:1}),this.vs.atLeast=new u.Z({initialValue:777,min:1,max:5e3,step:1,disableRandomize:!0}),this.vs.maxRadius=new u.Z({initialValue:300,min:.5,max:45,step:.5,disableRandomize:!0}),this.vs.minRadius=new u.Z({initialValue:.2,min:.1,max:5,step:.05,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){(0,l.b)(this.vs.seed.value),this.reordered=!1,this.redrawnCount=0,this.circles=[],this.radius=.45*Math.min(this.cw,this.ch),this.ctx.beginPath(),this.ctx.circle(this.cx,this.cy,this.radius),this.ctx.stroke(),this.ctx.closePath()}},{key:"draw",value:function draw(t){if(this.circles.length>this.vs.atLeast.value)if(this.reordered){if(this.redrawnCount<this.circles.length){var r=this.circles[this.redrawnCount];this.ctx.beginPath(),this.ctx.circle(r.position.x,r.position.y,r.radius),this.ctx.stroke(),this.ctx.closePath(),this.redrawnCount++}}else{var i=new o.Z(this.cx,this.cy);this.circles.sort((function(t,r){return o.Z.distance(i,r.position)-o.Z.distance(i,t.position)})),this.ctx.reset(),this.ctx.beginPath(),this.ctx.circle(this.cx,this.cy,this.radius),this.ctx.stroke(),this.ctx.closePath(),this.reordered=!0}else{var a=(0,l.M)()*Math.PI*2,u=(0,l.M)()*this.radius,c=new o.Z(this.cx+Math.cos(a)*u,this.cy+Math.sin(a)*u),h=0,p=!0,d=this.radius-o.Z.distance(new o.Z(this.cx,this.cy),c);if(this.circles.length){var y,v=[],P=_createForOfIteratorHelper(this.circles);try{for(P.s();!(y=P.n()).done;){var m=y.value,g=o.Z.distance(m.position,c);g<=m.radius?p=!1:v.push(g-m.radius)}}catch(t){P.e(t)}finally{P.f()}v.sort((function(t,r){return t-r})),h=v[0],p&&h>d&&(h=d)}else h=d;(h>this.vs.maxRadius.value||h<this.vs.minRadius.value)&&(p=!1),p&&h>0&&(this.circles.push({position:c,radius:h}),this.ctx.beginPath(),this.ctx.circle(c.x,c.y,h),this.ctx.stroke(),this.ctx.closePath())}}}]),BubblesInCircle}(a.v);!function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}(c,"generateGCode",!1)},139:(t,r,i)=>{"use strict";i.d(r,{Z:()=>l});var o=i(204),a=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var l=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(GridWaves,t);var r=_createSuper(GridWaves);function GridWaves(){return _classCallCheck(this,GridWaves),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(GridWaves,[{key:"init",value:function init(){this.vs.cols=new a.Z({initialValue:3,min:1,max:10,step:1,disableRandomize:!0}),this.vs.rows=new a.Z({initialValue:4,min:1,max:10,step:1,disableRandomize:!0}),this.vs.gap=new a.Z({initialValue:2,min:0,max:25,step:1,disableRandomize:!0}),this.vs.outerGap=new a.Z({initialValue:5,min:0,max:25,step:1,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){var t=this.vs.cols.value,r=this.vs.rows.value,i=this.vs.gap.value,o=this.vs.outerGap.value;this.effectiveWidth=this.cw-2*o,this.effectiveHeight=this.ch-2*o;for(var a=(this.effectiveWidth-i*(t-1))/t,l=o,u=o,c=0;c<r;c++){l=o;for(var h=0;h<t;h++)this.ctx.beginPath(),this.ctx.rect(l,u,a,a),this.ctx.stroke(),this.ctx.closePath(),l+=a+i;u+=a+i}}},{key:"draw",value:function draw(t){}}]),GridWaves}(o.v)},97:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(204),a=i(393),l=i(497),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(PerlinGrid,t);var r=_createSuper(PerlinGrid);function PerlinGrid(){var t;_classCallCheck(this,PerlinGrid);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"drawCount",0),_defineProperty(_assertThisInitialized(t),"maxDrawCount",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(PerlinGrid,[{key:"init",value:function init(){this.vs.speedUp=new u.Z({initialValue:10,min:1,max:100,step:1,disableRandomize:!0}),this.vs.seed=new u.Z({initialValue:1e3,min:1e3,max:5e3,step:1}),this.vs.cols=new u.Z({initialValue:90,min:1,max:200,step:1,disableRandomize:!0}),this.vs.rows=new u.Z({initialValue:90,min:1,max:200,step:1,disableRandomize:!0}),this.vs.shape=new u.Z({initialValue:1,min:0,max:1,step:1,disableRandomize:!0}),this.vs.size=new u.Z({initialValue:18,min:.1,max:64,step:.1}),this.vs.perlinDiv=new u.Z({initialValue:25,min:1,max:100,step:1,disableRandomize:!0}),this.vs.offsetX=new u.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.offsetY=new u.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.outerGap=new u.Z({initialValue:12,min:0,max:25,step:1,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){(0,l.b)(this.vs.seed.value),(0,a.ii)(this.vs.seed.value);var t=this.vs.cols.value,r=this.vs.rows.value,i=this.vs.outerGap.value;this.effectiveWidth=this.cw-2*i,this.effectiveHeight=this.ch-2*i,this.drawCount=0,this.maxDrawCount=r*t}},{key:"draw",value:function draw(t){if(!(this.drawCount>=this.maxDrawCount)){var r=this.vs.speedUp.value,i=this.vs.cols.value,o=this.vs.rows.value,l=this.vs.outerGap.value,u=this.vs.size.value,c=this.vs.shape.value,h=this.vs.perlinDiv.value,p=this.vs.offsetX.value,d=this.vs.offsetY.value,y=this.effectiveWidth/i,v=this.effectiveHeight/o;0===c&&(r=Math.max(1,Math.floor(r/4)));for(var P=0;P<this.vs.speedUp.value;P++){var m=this.drawCount+P;if(m>=this.maxDrawCount)break;var g=m%i,_=Math.floor(m/i),b=l+g*y,x=l+_*v,I=Math.abs((0,a.tv)((g+p)/h,(_+d)/h))*u;this.ctx.beginPath(),0===c?this.ctx.circle(b,x,I):1===c&&this.ctx.rect(b-I/2,x-I/2,I,I),this.ctx.stroke(),this.ctx.closePath()}this.drawCount+=this.vs.speedUp.value}}}]),PerlinGrid}(o.v)},165:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(204),a=i(393),l=i(497),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(PerlinLines,t);var r=_createSuper(PerlinLines);function PerlinLines(){var t;_classCallCheck(this,PerlinLines);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"drawCount",0),_defineProperty(_assertThisInitialized(t),"maxDrawCount",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(PerlinLines,[{key:"init",value:function init(){this.vs.speedUp=new u.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.seed=new u.Z({initialValue:9275,min:1e3,max:5e3,step:1}),this.vs.cols=new u.Z({initialValue:150,min:1,max:300,step:1}),this.vs.rows=new u.Z({initialValue:120,min:1,max:300,step:1}),this.vs.size=new u.Z({initialValue:.5,min:.1,max:8,step:.1}),this.vs.perlinDivX=new u.Z({initialValue:75,min:1,max:100,step:1}),this.vs.perlinDivY=new u.Z({initialValue:75,min:1,max:100,step:1}),this.vs.perlinOffsetX=new u.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.perlinOffsetY=new u.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.drawOffsetStart=new u.Z({initialValue:1,min:-5,max:5,step:.1}),this.vs.drawOffsetEnd=new u.Z({initialValue:-4.5,min:-5,max:5,step:.1}),this.vs.outerGap=new u.Z({initialValue:18,min:0,max:25,step:1,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){(0,l.b)(this.vs.seed.value),(0,a.ii)(this.vs.seed.value);var t=this.vs.cols.value,r=this.vs.rows.value,i=this.vs.outerGap.value;this.effectiveWidth=this.cw-2*i,this.effectiveHeight=this.ch-2*i,this.drawCount=0,this.maxDrawCount=r*t}},{key:"draw",value:function draw(t){if(!(this.drawCount>=this.maxDrawCount)){for(var r=this.vs.cols.value,i=this.vs.rows.value,o=this.vs.outerGap.value,l=this.vs.size.value,u=this.vs.perlinDivX.value,c=this.vs.perlinDivY.value,h=this.vs.perlinOffsetX.value,p=this.vs.perlinOffsetY.value,d=this.vs.drawOffsetStart.value,y=this.vs.drawOffsetEnd.value,v=this.effectiveWidth/r,P=this.effectiveHeight/i,m=l/(1+(this.vs.size.max-(r+i)/2)/500),g=0;g<this.vs.speedUp.value;g++){var _=this.drawCount+g;if(_>=this.maxDrawCount)break;var b=_%r,x=Math.floor(_/r),I=o+b*v,C=o+x*P,O=(0,a.tv)((b+h)/u,(x+p)/c)*Math.PI*2,w={x:I+Math.cos(O)*(m+d),y:C+Math.sin(O)*(m+d)},S={x:I+Math.cos(O+Math.PI)*(m+y),y:C+Math.sin(O+Math.PI)*(m+y)};this.ctx.beginPath(),_%2==0?(this.ctx.moveTo(w.x,w.y),this.ctx.lineTo(S.x,S.y)):(this.ctx.moveTo(S.x,S.y),this.ctx.lineTo(w.x,w.y)),this.ctx.stroke(),this.ctx.closePath()}this.drawCount+=this.vs.speedUp.value}}}]),PerlinLines}(o.v)},52:(t,r,i)=>{"use strict";i.d(r,{Z:()=>h});var o=i(323),a=i(204),l=i(561),u=i(497),c=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var h=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Tree,t);var r=_createSuper(Tree);function Tree(){var t;_classCallCheck(this,Tree);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"branchLevel",0),_defineProperty(_assertThisInitialized(t),"drawnCurrentStems",0),_defineProperty(_assertThisInitialized(t),"currentStems",[]),_defineProperty(_assertThisInitialized(t),"nextStems",[]),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Tree,[{key:"init",value:function init(){this.vs.seed=new c.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.initBranchLength=new c.Z({initialValue:8,min:5,max:10,step:.1}),this.vs.branchLengthFalloff=new c.Z({initialValue:.83,min:.4,max:.9,step:.005}),this.vs.splitProbability=new c.Z({initialValue:.6,min:0,max:1,step:.005}),this.vs.pruneProbability=new c.Z({initialValue:.95,min:0,max:1,step:.05}),this.vs.bloomProbability=new c.Z({initialValue:.6,min:0,max:1,step:.05}),this.vs.bloomSize=new c.Z({initialValue:.3,min:.2,max:1.2,step:.1}),this.vs.splitAngleRange=new c.Z({initialValue:.44,min:0,max:Math.PI/2,step:Math.PI/256}),this.vs.splitAngleBranchLevelMulti=new c.Z({initialValue:.1,min:-1,max:1,step:.05}),this.vs.splitAngleMinPercent=new c.Z({initialValue:.5,min:0,max:1,step:.05}),this.vs.chaosFactor=new c.Z({initialValue:.85,min:0,max:2,step:.01}),this.vs.splitCount=new c.Z({initialValue:2,min:2,max:5,step:1,disableRandomize:!0}),this.vs.maxBranchLevels=new c.Z({initialValue:14,min:1,max:24,step:1,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){(0,u.b)(this.vs.seed.value),this.branchLevel=0,this.drawnCurrentStems=0,this.currentStems=[],this.nextStems=[];var t=this.vs.branchLengthFalloff.value,r=this.vs.initBranchLength.value/t,i=-Math.PI/2,a=this.drawBranch(new o.Z(this.cx,this.ch-10),i,r);this.currentStems.push({position:a,angle:i,length:r})}},{key:"draw",value:function draw(t){if(!(this.branchLevel>this.vs.maxBranchLevels.value))if(this.drawnCurrentStems>=this.currentStems.length)this.currentStems=_toConsumableArray(this.nextStems),this.nextStems=[],this.branchLevel++,this.drawnCurrentStems=0;else{var r=this.currentStems[this.drawnCurrentStems],i=this.vs.branchLengthFalloff.value,o=this.branchLevel<3?1:this.vs.splitProbability.value,a=this.vs.splitAngleRange.value,c=this.vs.splitAngleBranchLevelMulti.value,h=this.vs.splitAngleMinPercent.value,p=this.vs.pruneProbability.value,d=this.vs.bloomProbability.value,y=this.vs.chaosFactor.value;if((0,u.M)()<=o)for(var v=this.vs.splitCount.value,P=a*(1+c*this.branchLevel/4),m=P*h+(0,l.EA)(P*(1-h))+(0,l.Qy)(y)*Math.PI/8,g=2*m/v,_=0;_<v;_++){var b=r.length*i*(1+(0,l.Qy)(y/8)),x=r.angle-m/2+g*_+(0,l.Qy)(Math.PI*y/10),I=this.drawBranch(r.position,x,b);this.nextStems.push({position:I,angle:x,length:b})}else{var C=r.angle+(0,l.Qy)(Math.PI*y/10),O=r.length*i*(1+(0,l.Qy)(y/8)),w=this.drawBranch(r.position,C,O);this.branchLevel!==this.vs.maxBranchLevels.value&&(0,u.M)()>p?this.nextStems.push({position:w,angle:C,length:O}):(0,u.M)()<d&&this.drawBloom(w,C)}this.drawnCurrentStems++}}},{key:"drawBranch",value:function drawBranch(t,r,i){this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y);var a=t.clone().add(new o.Z(Math.cos(r)*i,Math.sin(r)*i));return this.ctx.lineTo(a.x,a.y),this.ctx.stroke(),this.ctx.closePath(),a}},{key:"drawBloom",value:function drawBloom(t,r){var i=this.vs.bloomSize.value;this.ctx.beginPath(),this.ctx.circle(t.x+Math.cos(r)*i,t.y+Math.sin(r)*i,i),this.ctx.stroke(),this.ctx.closePath()}}]),Tree}(a.v)},404:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(204),a=i(561),l=i(497),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(MondayMaze,t);var r=_createSuper(MondayMaze);function MondayMaze(){return _classCallCheck(this,MondayMaze),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(MondayMaze,[{key:"init",value:function init(){this.vs.speedUp=new u.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.seed=new u.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.gridSize=new u.Z({initialValue:2,min:1,max:8,step:.25}),this.vs.radialDivs=new u.Z({initialValue:2,min:1,max:4,step:1}),this.vs.offsetAng=new u.Z({initialValue:0,min:0,max:360,step:15})}},{key:"initDraw",value:function initDraw(){(0,l.b)(this.vs.seed.value),this.i=0,this.rows=Math.ceil(this.cw/this.vs.gridSize.value)+1,this.cols=Math.ceil(this.ch/this.vs.gridSize.value)+1}},{key:"draw",value:function draw(t){if(!(this.i>=this.rows*this.cols))for(var r=0;r<this.vs.speedUp.value&&!(this.i>=this.rows*this.cols);r++){var i=this.i%this.rows,o=Math.floor(this.i/this.rows),l=i*this.vs.gridSize.value,u=o*this.vs.gridSize.value,c=(0,a.Cn)(this.vs.offsetAng.value,this.vs.offsetAng.max,2*Math.PI),h=(0,a.rO)(this.vs.radialDivs.value),p=Math.PI/this.vs.radialDivs.value*h;(p=(0,a.mb)(p))>Math.PI/2&&(p-=Math.PI),p<Math.PI/2&&(p+=Math.PI),p+=c,this.ctx.beginPath(),this.ctx.moveTo(l,u);var d=Math.min(Math.abs(this.vs.gridSize.value/Math.cos(p)),Math.abs(this.vs.gridSize.value/Math.sin(p)));this.ctx.lineTo(l+Math.cos(p)*d,u+Math.sin(p)*d),this.ctx.stroke(),this.ctx.closePath(),this.i++}}}]),MondayMaze}(o.v)},286:(t,r,i)=>{"use strict";i.d(r,{Z:()=>a});var o=i(323);function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var a=function(){function Osc(t){if(function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Osc),_defineProperty(this,"value",new o.Z),_defineProperty(this,"offsetPhase",-Math.PI/2),"function"==typeof t.speed?(this.speedFunc=t.speed,this.speed=this.speedFunc(0)):this.speed=t.speed||Math.PI/180,void 0===t.radius)this.radius=new o.Z(1,1);else if("function"==typeof t.radius){this.radiusFunc=t.radius;var r=this.radiusFunc(0);this.radius="number"==typeof r?new o.Z(r,r):r}else this.radius="number"==typeof t.radius?new o.Z(t.radius,t.radius):t.radius.clone();this.offset=t.offset?t.offset.clone():new o.Z(0,0),this.offsetPhase=t.offsetPhase||0,this.phase=t.phase||0,this.theta=new o.Z(this.phase,this.phase),this.process()}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Osc,[{key:"x",get:function get(){return this.value.x}},{key:"y",get:function get(){return this.value.y}},{key:"reset",value:function reset(){this.theta=new o.Z(this.phase,this.phase)}},{key:"step",value:function step(t){if(this.speedFunc){var r=this.speedFunc(t);"number"!=typeof r||isNaN(r)||(this.speed=r)}if(this.radiusFunc){var i=this.radiusFunc(t);this.radius="number"==typeof i?new o.Z(i,i):i}this.theta.x=this.theta.x+this.speed,this.theta.y=this.theta.y+this.speed,this.process()}},{key:"process",value:function process(){this.value.x=this.offset.x+Math.cos(this.offsetPhase+this.theta.x)*this.radius.x,this.value.y=this.offset.y+Math.sin(this.offsetPhase+this.theta.y)*this.radius.y,isNaN(this.value.x)}}]),Osc}()},109:(t,r,i)=>{"use strict";i.d(r,{Z:()=>l});var o=i(561);function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var a=0,l=function(){function Range(t){!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Range),this.name=t.name||"Var-".concat(a++),this.min=t.min,this.max=t.max,this.step=t.step||.01,this._value=t.initialValue||t.min,this._disableRandomize=t.disableRandomize||!1}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Range,[{key:"value",get:function get(){return this._value},set:function set(t){this._value=(0,o.re)(t,this.max,this.min)}},{key:"setValue",value:function setValue(t){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.value=t,r&&(this.inputElem.value=String(this.value))}},{key:"randomize",value:function randomize(){if(!this._disableRandomize){var t=Math.round((this.max-this.min)/this.step),r=this.min+(0,o.c4)(t)*this.step;this.step>=1&&(r=Math.round(r)),this.setValue(r,!0)}}}]),Range}()},393:(t,r,i)=>{"use strict";function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}i.d(r,{ii:()=>h,tv:()=>y});var o=_createClass((function Grad(t,r,i){var o=this;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Grad),_defineProperty(this,"dot2",(function(t,r){return o.x*t+o.y*r})),_defineProperty(this,"dot3",(function(t,r,i){return o.x*t+o.y*r+o.z*i})),this.x=t,this.y=r,this.z=i})),a=[new o(1,1,0),new o(-1,1,0),new o(1,-1,0),new o(-1,-1,0),new o(1,0,1),new o(-1,0,1),new o(1,0,-1),new o(-1,0,-1),new o(0,1,1),new o(0,-1,1),new o(0,1,-1),new o(0,-1,-1)],l=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],u=new Array(512),c=new Array(512),h=function seedNoise(t){t>0&&t<1&&(t*=65536),(t=Math.floor(t))<256&&(t|=t<<8);for(var r=0;r<256;r++){var i=1&r?l[r]^255&t:l[r]^t>>8&255;u[r]=u[r+256]=i,c[r]=c[r+256]=a[i%12]}};h(0);Math.sqrt(3),Math.sqrt(3);var p=function fade(t){return t*t*t*(t*(6*t-15)+10)},d=function lerp(t,r,i){return(1-i)*t+i*r},y=function perlin2(t,r){var i=Math.floor(t),o=Math.floor(r);t-=i,r-=o;var a=c[(i&=255)+u[o&=255]].dot2(t,r),l=c[i+u[o+1]].dot2(t,r-1),h=c[i+1+u[o]].dot2(t-1,r),y=c[i+1+u[o+1]].dot2(t-1,r-1),v=p(t);return d(d(a,h,v),d(l,y,v),p(r))}},561:(t,r,i)=>{"use strict";i.d(r,{Cn:()=>v,EA:()=>l,Qy:()=>c,c4:()=>a,iH:()=>d,mb:()=>y,rO:()=>u,re:()=>h});var o=i(497),a=function randIntRange(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Math.round((0,o.M)()*(t-r)+r)},l=function randFloatRange(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return(0,o.M)()*(t-r)+r},u=function randInt(t){return Math.round((0,o.M)()*(2*t)-t)},c=function randFloat(t){return(0,o.M)()*(2*t)-t},h=function wrap(t,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return t<i?r:t>r?i:t},p=function countDecimals(t){for(var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:8,i=1,o=0;o<r;o++,i/=10)if(t%i==0)return o;return r},d=function floatString(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;if(t%1==0)return String(t);var i=Math.min(p(t,r),r);return 0===i?String(Math.round(t)):t.toFixed(i)},y=function normalizeRadian(t){return(t+Math.PI)%(2*Math.PI)-Math.PI},v=function segmentValue(t,r,i){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return(i-o)/r*t}},132:(t,r,i)=>{"use strict";i.d(r,{Bj:()=>h,CS:()=>l,S3:()=>c,mb:()=>u});var o=i(323),a=1e-6,l=function arcToPoints(t,r,i,a,l){return i%=2*Math.PI,a%=2*Math.PI,{start:new o.Z(l*Math.cos(i)+t,l*Math.sin(i)+r),end:new o.Z(l*Math.cos(a)+t,l*Math.sin(a)+r)}},u=function pointsToArc(t,r,i){t=t.clone(),r=r.clone(),i=i.clone();var o=Math.atan2(r.y-t.y,r.x-t.x),a=Math.atan2(i.y-t.y,i.x-t.x),l=t.subtract(r).magnitude();return a===o&&(a+=2*Math.PI),{start:o,end:a,radius:l}},c=function sameFloat(t,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a;if(Math.abs(t-r)<a)return!0;var o=Math.abs(t),l=Math.abs(r),u=Math.abs(t-r);return t==r||(0===t||0===r||u<Number.MIN_VALUE?u<i*Number.MIN_VALUE:u/(o+l)<i)},h=function samePos(t,r){return c(t.x,r.x)&&c(t.y,r.y)}},497:(t,r,i)=>{"use strict";i.d(r,{M:()=>c,b:()=>u});var o=123456789,a=987654321,l=4294967295,u=function seedRandom(t){o=123456789+t&l,a=987654321-t&l},c=function random(){return(((a=36969*(65535&a)+(a>>16)&l)<<16)+(65535&(o=18e3*(65535&o)+(o>>16)&l))>>>0)/4294967296};u(0)},486:function(t,r,i){var o;t=i.nmd(t),function(){var a,l="Expected a function",u="__lodash_hash_undefined__",c="__lodash_placeholder__",h=16,p=32,d=64,y=128,v=256,P=1/0,m=9007199254740991,g=NaN,_=4294967295,b=[["ary",y],["bind",1],["bindKey",2],["curry",8],["curryRight",h],["flip",512],["partial",p],["partialRight",d],["rearg",v]],x="[object Arguments]",I="[object Array]",C="[object Boolean]",O="[object Date]",w="[object Error]",S="[object Function]",T="[object GeneratorFunction]",E="[object Map]",L="[object Number]",A="[object Object]",M="[object Promise]",k="[object RegExp]",R="[object Set]",B="[object String]",N="[object Symbol]",D="[object WeakMap]",X="[object ArrayBuffer]",j="[object DataView]",Y="[object Float32Array]",z="[object Float64Array]",W="[object Int8Array]",Z="[object Int16Array]",q="[object Int32Array]",G="[object Uint8Array]",V="[object Uint8ClampedArray]",U="[object Uint16Array]",H="[object Uint32Array]",J=/\b__p \+= '';/g,K=/\b(__p \+=) '' \+/g,$=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Q=/&(?:amp|lt|gt|quot|#39);/g,tt=/[&<>"']/g,et=RegExp(Q.source),rt=RegExp(tt.source),nt=/<%-([\s\S]+?)%>/g,it=/<%([\s\S]+?)%>/g,ot=/<%=([\s\S]+?)%>/g,st=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,at=/^\w*$/,lt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ut=/[\\^$.*+?()[\]{}|]/g,ct=RegExp(ut.source),ht=/^\s+/,ft=/\s/,pt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,dt=/\{\n\/\* \[wrapped with (.+)\] \*/,yt=/,? & /,vt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Pt=/[()=,{}\[\]\/\s]/,mt=/\\(\\)?/g,gt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,_t=/\w*$/,bt=/^[-+]0x[0-9a-f]+$/i,xt=/^0b[01]+$/i,It=/^\[object .+?Constructor\]$/,Ct=/^0o[0-7]+$/i,Ot=/^(?:0|[1-9]\d*)$/,wt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,St=/($^)/,Tt=/['\n\r\u2028\u2029\\]/g,Et="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Lt="\\u2700-\\u27bf",At="a-z\\xdf-\\xf6\\xf8-\\xff",Mt="A-Z\\xc0-\\xd6\\xd8-\\xde",kt="\\ufe0e\\ufe0f",Rt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Bt="['’]",Nt="[\\ud800-\\udfff]",Dt="["+Rt+"]",Xt="["+Et+"]",jt="\\d+",Yt="[\\u2700-\\u27bf]",Ft="["+At+"]",zt="[^\\ud800-\\udfff"+Rt+jt+Lt+At+Mt+"]",Wt="\\ud83c[\\udffb-\\udfff]",Zt="[^\\ud800-\\udfff]",qt="(?:\\ud83c[\\udde6-\\uddff]){2}",Gt="[\\ud800-\\udbff][\\udc00-\\udfff]",Vt="["+Mt+"]",Ut="(?:"+Ft+"|"+zt+")",Ht="(?:"+Vt+"|"+zt+")",Jt="(?:['’](?:d|ll|m|re|s|t|ve))?",Kt="(?:['’](?:D|LL|M|RE|S|T|VE))?",$t="(?:"+Xt+"|"+Wt+")"+"?",Qt="[\\ufe0e\\ufe0f]?",te=Qt+$t+("(?:\\u200d(?:"+[Zt,qt,Gt].join("|")+")"+Qt+$t+")*"),ee="(?:"+[Yt,qt,Gt].join("|")+")"+te,re="(?:"+[Zt+Xt+"?",Xt,qt,Gt,Nt].join("|")+")",ne=RegExp(Bt,"g"),ie=RegExp(Xt,"g"),oe=RegExp(Wt+"(?="+Wt+")|"+re+te,"g"),se=RegExp([Vt+"?"+Ft+"+"+Jt+"(?="+[Dt,Vt,"$"].join("|")+")",Ht+"+"+Kt+"(?="+[Dt,Vt+Ut,"$"].join("|")+")",Vt+"?"+Ut+"+"+Jt,Vt+"+"+Kt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",jt,ee].join("|"),"g"),ae=RegExp("[\\u200d\\ud800-\\udfff"+Et+kt+"]"),le=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ue=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ce=-1,he={};he[Y]=he[z]=he[W]=he[Z]=he[q]=he[G]=he[V]=he[U]=he[H]=!0,he[x]=he[I]=he[X]=he[C]=he[j]=he[O]=he[w]=he[S]=he[E]=he[L]=he[A]=he[k]=he[R]=he[B]=he[D]=!1;var fe={};fe[x]=fe[I]=fe[X]=fe[j]=fe[C]=fe[O]=fe[Y]=fe[z]=fe[W]=fe[Z]=fe[q]=fe[E]=fe[L]=fe[A]=fe[k]=fe[R]=fe[B]=fe[N]=fe[G]=fe[V]=fe[U]=fe[H]=!0,fe[w]=fe[S]=fe[D]=!1;var pe={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},de=parseFloat,ye=parseInt,ve="object"==typeof i.g&&i.g&&i.g.Object===Object&&i.g,Pe="object"==typeof self&&self&&self.Object===Object&&self,me=ve||Pe||Function("return this")(),ge=r&&!r.nodeType&&r,_e=ge&&t&&!t.nodeType&&t,be=_e&&_e.exports===ge,xe=be&&ve.process,Ie=function(){try{var t=_e&&_e.require&&_e.require("util").types;return t||xe&&xe.binding&&xe.binding("util")}catch(t){}}(),Ce=Ie&&Ie.isArrayBuffer,Oe=Ie&&Ie.isDate,we=Ie&&Ie.isMap,Se=Ie&&Ie.isRegExp,Te=Ie&&Ie.isSet,Ee=Ie&&Ie.isTypedArray;function apply(t,r,i){switch(i.length){case 0:return t.call(r);case 1:return t.call(r,i[0]);case 2:return t.call(r,i[0],i[1]);case 3:return t.call(r,i[0],i[1],i[2])}return t.apply(r,i)}function arrayAggregator(t,r,i,o){for(var a=-1,l=null==t?0:t.length;++a<l;){var u=t[a];r(o,u,i(u),t)}return o}function arrayEach(t,r){for(var i=-1,o=null==t?0:t.length;++i<o&&!1!==r(t[i],i,t););return t}function arrayEachRight(t,r){for(var i=null==t?0:t.length;i--&&!1!==r(t[i],i,t););return t}function arrayEvery(t,r){for(var i=-1,o=null==t?0:t.length;++i<o;)if(!r(t[i],i,t))return!1;return!0}function arrayFilter(t,r){for(var i=-1,o=null==t?0:t.length,a=0,l=[];++i<o;){var u=t[i];r(u,i,t)&&(l[a++]=u)}return l}function arrayIncludes(t,r){return!!(null==t?0:t.length)&&baseIndexOf(t,r,0)>-1}function arrayIncludesWith(t,r,i){for(var o=-1,a=null==t?0:t.length;++o<a;)if(i(r,t[o]))return!0;return!1}function arrayMap(t,r){for(var i=-1,o=null==t?0:t.length,a=Array(o);++i<o;)a[i]=r(t[i],i,t);return a}function arrayPush(t,r){for(var i=-1,o=r.length,a=t.length;++i<o;)t[a+i]=r[i];return t}function arrayReduce(t,r,i,o){var a=-1,l=null==t?0:t.length;for(o&&l&&(i=t[++a]);++a<l;)i=r(i,t[a],a,t);return i}function arrayReduceRight(t,r,i,o){var a=null==t?0:t.length;for(o&&a&&(i=t[--a]);a--;)i=r(i,t[a],a,t);return i}function arraySome(t,r){for(var i=-1,o=null==t?0:t.length;++i<o;)if(r(t[i],i,t))return!0;return!1}var Le=baseProperty("length");function baseFindKey(t,r,i){var o;return i(t,(function(t,i,a){if(r(t,i,a))return o=i,!1})),o}function baseFindIndex(t,r,i,o){for(var a=t.length,l=i+(o?1:-1);o?l--:++l<a;)if(r(t[l],l,t))return l;return-1}function baseIndexOf(t,r,i){return r==r?function strictIndexOf(t,r,i){var o=i-1,a=t.length;for(;++o<a;)if(t[o]===r)return o;return-1}(t,r,i):baseFindIndex(t,baseIsNaN,i)}function baseIndexOfWith(t,r,i,o){for(var a=i-1,l=t.length;++a<l;)if(o(t[a],r))return a;return-1}function baseIsNaN(t){return t!=t}function baseMean(t,r){var i=null==t?0:t.length;return i?baseSum(t,r)/i:g}function baseProperty(t){return function(r){return null==r?a:r[t]}}function basePropertyOf(t){return function(r){return null==t?a:t[r]}}function baseReduce(t,r,i,o,a){return a(t,(function(t,a,l){i=o?(o=!1,t):r(i,t,a,l)})),i}function baseSum(t,r){for(var i,o=-1,l=t.length;++o<l;){var u=r(t[o]);u!==a&&(i=i===a?u:i+u)}return i}function baseTimes(t,r){for(var i=-1,o=Array(t);++i<t;)o[i]=r(i);return o}function baseTrim(t){return t?t.slice(0,trimmedEndIndex(t)+1).replace(ht,""):t}function baseUnary(t){return function(r){return t(r)}}function baseValues(t,r){return arrayMap(r,(function(r){return t[r]}))}function cacheHas(t,r){return t.has(r)}function charsStartIndex(t,r){for(var i=-1,o=t.length;++i<o&&baseIndexOf(r,t[i],0)>-1;);return i}function charsEndIndex(t,r){for(var i=t.length;i--&&baseIndexOf(r,t[i],0)>-1;);return i}function countHolders(t,r){for(var i=t.length,o=0;i--;)t[i]===r&&++o;return o}var Ae=basePropertyOf({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Me=basePropertyOf({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function escapeStringChar(t){return"\\"+pe[t]}function hasUnicode(t){return ae.test(t)}function mapToArray(t){var r=-1,i=Array(t.size);return t.forEach((function(t,o){i[++r]=[o,t]})),i}function overArg(t,r){return function(i){return t(r(i))}}function replaceHolders(t,r){for(var i=-1,o=t.length,a=0,l=[];++i<o;){var u=t[i];u!==r&&u!==c||(t[i]=c,l[a++]=i)}return l}function setToArray(t){var r=-1,i=Array(t.size);return t.forEach((function(t){i[++r]=t})),i}function setToPairs(t){var r=-1,i=Array(t.size);return t.forEach((function(t){i[++r]=[t,t]})),i}function stringSize(t){return hasUnicode(t)?function unicodeSize(t){var r=oe.lastIndex=0;for(;oe.test(t);)++r;return r}(t):Le(t)}function stringToArray(t){return hasUnicode(t)?function unicodeToArray(t){return t.match(oe)||[]}(t):function asciiToArray(t){return t.split("")}(t)}function trimmedEndIndex(t){for(var r=t.length;r--&&ft.test(t.charAt(r)););return r}var ke=basePropertyOf({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Re=function runInContext(t){var r,i=(t=null==t?me:Re.defaults(me.Object(),t,Re.pick(me,ue))).Array,o=t.Date,ft=t.Error,Et=t.Function,Lt=t.Math,At=t.Object,Mt=t.RegExp,kt=t.String,Rt=t.TypeError,Bt=i.prototype,Nt=Et.prototype,Dt=At.prototype,Xt=t["__core-js_shared__"],jt=Nt.toString,Yt=Dt.hasOwnProperty,Ft=0,zt=(r=/[^.]+$/.exec(Xt&&Xt.keys&&Xt.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"",Wt=Dt.toString,Zt=jt.call(At),qt=me._,Gt=Mt("^"+jt.call(Yt).replace(ut,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Vt=be?t.Buffer:a,Ut=t.Symbol,Ht=t.Uint8Array,Jt=Vt?Vt.allocUnsafe:a,Kt=overArg(At.getPrototypeOf,At),$t=At.create,Qt=Dt.propertyIsEnumerable,te=Bt.splice,ee=Ut?Ut.isConcatSpreadable:a,re=Ut?Ut.iterator:a,oe=Ut?Ut.toStringTag:a,ae=function(){try{var t=getNative(At,"defineProperty");return t({},"",{}),t}catch(t){}}(),pe=t.clearTimeout!==me.clearTimeout&&t.clearTimeout,ve=o&&o.now!==me.Date.now&&o.now,Pe=t.setTimeout!==me.setTimeout&&t.setTimeout,ge=Lt.ceil,_e=Lt.floor,xe=At.getOwnPropertySymbols,Ie=Vt?Vt.isBuffer:a,Le=t.isFinite,Be=Bt.join,Ne=overArg(At.keys,At),De=Lt.max,Xe=Lt.min,je=o.now,Ye=t.parseInt,Fe=Lt.random,ze=Bt.reverse,We=getNative(t,"DataView"),Ze=getNative(t,"Map"),qe=getNative(t,"Promise"),Ge=getNative(t,"Set"),Ve=getNative(t,"WeakMap"),Ue=getNative(At,"create"),He=Ve&&new Ve,Je={},Ke=toSource(We),$e=toSource(Ze),Qe=toSource(qe),tr=toSource(Ge),er=toSource(Ve),rr=Ut?Ut.prototype:a,nr=rr?rr.valueOf:a,ir=rr?rr.toString:a;function lodash(t){if(isObjectLike(t)&&!un(t)&&!(t instanceof LazyWrapper)){if(t instanceof LodashWrapper)return t;if(Yt.call(t,"__wrapped__"))return wrapperClone(t)}return new LodashWrapper(t)}var or=function(){function object(){}return function(t){if(!isObject(t))return{};if($t)return $t(t);object.prototype=t;var r=new object;return object.prototype=a,r}}();function baseLodash(){}function LodashWrapper(t,r){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!r,this.__index__=0,this.__values__=a}function LazyWrapper(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=_,this.__views__=[]}function Hash(t){var r=-1,i=null==t?0:t.length;for(this.clear();++r<i;){var o=t[r];this.set(o[0],o[1])}}function ListCache(t){var r=-1,i=null==t?0:t.length;for(this.clear();++r<i;){var o=t[r];this.set(o[0],o[1])}}function MapCache(t){var r=-1,i=null==t?0:t.length;for(this.clear();++r<i;){var o=t[r];this.set(o[0],o[1])}}function SetCache(t){var r=-1,i=null==t?0:t.length;for(this.__data__=new MapCache;++r<i;)this.add(t[r])}function Stack(t){var r=this.__data__=new ListCache(t);this.size=r.size}function arrayLikeKeys(t,r){var i=un(t),o=!i&&ln(t),a=!i&&!o&&hn(t),l=!i&&!o&&!a&&vn(t),u=i||o||a||l,c=u?baseTimes(t.length,kt):[],h=c.length;for(var p in t)!r&&!Yt.call(t,p)||u&&("length"==p||a&&("offset"==p||"parent"==p)||l&&("buffer"==p||"byteLength"==p||"byteOffset"==p)||isIndex(p,h))||c.push(p);return c}function arraySample(t){var r=t.length;return r?t[baseRandom(0,r-1)]:a}function arraySampleSize(t,r){return shuffleSelf(copyArray(t),baseClamp(r,0,t.length))}function arrayShuffle(t){return shuffleSelf(copyArray(t))}function assignMergeValue(t,r,i){(i!==a&&!eq(t[r],i)||i===a&&!(r in t))&&baseAssignValue(t,r,i)}function assignValue(t,r,i){var o=t[r];Yt.call(t,r)&&eq(o,i)&&(i!==a||r in t)||baseAssignValue(t,r,i)}function assocIndexOf(t,r){for(var i=t.length;i--;)if(eq(t[i][0],r))return i;return-1}function baseAggregator(t,r,i,o){return sr(t,(function(t,a,l){r(o,t,i(t),l)})),o}function baseAssign(t,r){return t&&copyObject(r,keys(r),t)}function baseAssignValue(t,r,i){"__proto__"==r&&ae?ae(t,r,{configurable:!0,enumerable:!0,value:i,writable:!0}):t[r]=i}function baseAt(t,r){for(var o=-1,l=r.length,u=i(l),c=null==t;++o<l;)u[o]=c?a:get(t,r[o]);return u}function baseClamp(t,r,i){return t==t&&(i!==a&&(t=t<=i?t:i),r!==a&&(t=t>=r?t:r)),t}function baseClone(t,r,i,o,l,u){var c,h=1&r,p=2&r,d=4&r;if(i&&(c=l?i(t,o,l,u):i(t)),c!==a)return c;if(!isObject(t))return t;var y=un(t);if(y){if(c=function initCloneArray(t){var r=t.length,i=new t.constructor(r);r&&"string"==typeof t[0]&&Yt.call(t,"index")&&(i.index=t.index,i.input=t.input);return i}(t),!h)return copyArray(t,c)}else{var v=mr(t),P=v==S||v==T;if(hn(t))return cloneBuffer(t,h);if(v==A||v==x||P&&!l){if(c=p||P?{}:initCloneObject(t),!h)return p?function copySymbolsIn(t,r){return copyObject(t,Pr(t),r)}(t,function baseAssignIn(t,r){return t&&copyObject(r,keysIn(r),t)}(c,t)):function copySymbols(t,r){return copyObject(t,vr(t),r)}(t,baseAssign(c,t))}else{if(!fe[v])return l?t:{};c=function initCloneByTag(t,r,i){var o=t.constructor;switch(r){case X:return cloneArrayBuffer(t);case C:case O:return new o(+t);case j:return function cloneDataView(t,r){var i=r?cloneArrayBuffer(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.byteLength)}(t,i);case Y:case z:case W:case Z:case q:case G:case V:case U:case H:return cloneTypedArray(t,i);case E:return new o;case L:case B:return new o(t);case k:return function cloneRegExp(t){var r=new t.constructor(t.source,_t.exec(t));return r.lastIndex=t.lastIndex,r}(t);case R:return new o;case N:return function cloneSymbol(t){return nr?At(nr.call(t)):{}}(t)}}(t,v,h)}}u||(u=new Stack);var m=u.get(t);if(m)return m;u.set(t,c),yn(t)?t.forEach((function(o){c.add(baseClone(o,r,i,o,t,u))})):pn(t)&&t.forEach((function(o,a){c.set(a,baseClone(o,r,i,a,t,u))}));var g=y?a:(d?p?getAllKeysIn:getAllKeys:p?keysIn:keys)(t);return arrayEach(g||t,(function(o,a){g&&(o=t[a=o]),assignValue(c,a,baseClone(o,r,i,a,t,u))})),c}function baseConformsTo(t,r,i){var o=i.length;if(null==t)return!o;for(t=At(t);o--;){var l=i[o],u=r[l],c=t[l];if(c===a&&!(l in t)||!u(c))return!1}return!0}function baseDelay(t,r,i){if("function"!=typeof t)throw new Rt(l);return br((function(){t.apply(a,i)}),r)}function baseDifference(t,r,i,o){var a=-1,l=arrayIncludes,u=!0,c=t.length,h=[],p=r.length;if(!c)return h;i&&(r=arrayMap(r,baseUnary(i))),o?(l=arrayIncludesWith,u=!1):r.length>=200&&(l=cacheHas,u=!1,r=new SetCache(r));t:for(;++a<c;){var d=t[a],y=null==i?d:i(d);if(d=o||0!==d?d:0,u&&y==y){for(var v=p;v--;)if(r[v]===y)continue t;h.push(d)}else l(r,y,o)||h.push(d)}return h}lodash.templateSettings={escape:nt,evaluate:it,interpolate:ot,variable:"",imports:{_:lodash}},lodash.prototype=baseLodash.prototype,lodash.prototype.constructor=lodash,LodashWrapper.prototype=or(baseLodash.prototype),LodashWrapper.prototype.constructor=LodashWrapper,LazyWrapper.prototype=or(baseLodash.prototype),LazyWrapper.prototype.constructor=LazyWrapper,Hash.prototype.clear=function hashClear(){this.__data__=Ue?Ue(null):{},this.size=0},Hash.prototype.delete=function hashDelete(t){var r=this.has(t)&&delete this.__data__[t];return this.size-=r?1:0,r},Hash.prototype.get=function hashGet(t){var r=this.__data__;if(Ue){var i=r[t];return i===u?a:i}return Yt.call(r,t)?r[t]:a},Hash.prototype.has=function hashHas(t){var r=this.__data__;return Ue?r[t]!==a:Yt.call(r,t)},Hash.prototype.set=function hashSet(t,r){var i=this.__data__;return this.size+=this.has(t)?0:1,i[t]=Ue&&r===a?u:r,this},ListCache.prototype.clear=function listCacheClear(){this.__data__=[],this.size=0},ListCache.prototype.delete=function listCacheDelete(t){var r=this.__data__,i=assocIndexOf(r,t);return!(i<0)&&(i==r.length-1?r.pop():te.call(r,i,1),--this.size,!0)},ListCache.prototype.get=function listCacheGet(t){var r=this.__data__,i=assocIndexOf(r,t);return i<0?a:r[i][1]},ListCache.prototype.has=function listCacheHas(t){return assocIndexOf(this.__data__,t)>-1},ListCache.prototype.set=function listCacheSet(t,r){var i=this.__data__,o=assocIndexOf(i,t);return o<0?(++this.size,i.push([t,r])):i[o][1]=r,this},MapCache.prototype.clear=function mapCacheClear(){this.size=0,this.__data__={hash:new Hash,map:new(Ze||ListCache),string:new Hash}},MapCache.prototype.delete=function mapCacheDelete(t){var r=getMapData(this,t).delete(t);return this.size-=r?1:0,r},MapCache.prototype.get=function mapCacheGet(t){return getMapData(this,t).get(t)},MapCache.prototype.has=function mapCacheHas(t){return getMapData(this,t).has(t)},MapCache.prototype.set=function mapCacheSet(t,r){var i=getMapData(this,t),o=i.size;return i.set(t,r),this.size+=i.size==o?0:1,this},SetCache.prototype.add=SetCache.prototype.push=function setCacheAdd(t){return this.__data__.set(t,u),this},SetCache.prototype.has=function setCacheHas(t){return this.__data__.has(t)},Stack.prototype.clear=function stackClear(){this.__data__=new ListCache,this.size=0},Stack.prototype.delete=function stackDelete(t){var r=this.__data__,i=r.delete(t);return this.size=r.size,i},Stack.prototype.get=function stackGet(t){return this.__data__.get(t)},Stack.prototype.has=function stackHas(t){return this.__data__.has(t)},Stack.prototype.set=function stackSet(t,r){var i=this.__data__;if(i instanceof ListCache){var o=i.__data__;if(!Ze||o.length<199)return o.push([t,r]),this.size=++i.size,this;i=this.__data__=new MapCache(o)}return i.set(t,r),this.size=i.size,this};var sr=createBaseEach(baseForOwn),ar=createBaseEach(baseForOwnRight,!0);function baseEvery(t,r){var i=!0;return sr(t,(function(t,o,a){return i=!!r(t,o,a)})),i}function baseExtremum(t,r,i){for(var o=-1,l=t.length;++o<l;){var u=t[o],c=r(u);if(null!=c&&(h===a?c==c&&!isSymbol(c):i(c,h)))var h=c,p=u}return p}function baseFilter(t,r){var i=[];return sr(t,(function(t,o,a){r(t,o,a)&&i.push(t)})),i}function baseFlatten(t,r,i,o,a){var l=-1,u=t.length;for(i||(i=isFlattenable),a||(a=[]);++l<u;){var c=t[l];r>0&&i(c)?r>1?baseFlatten(c,r-1,i,o,a):arrayPush(a,c):o||(a[a.length]=c)}return a}var lr=createBaseFor(),ur=createBaseFor(!0);function baseForOwn(t,r){return t&&lr(t,r,keys)}function baseForOwnRight(t,r){return t&&ur(t,r,keys)}function baseFunctions(t,r){return arrayFilter(r,(function(r){return isFunction(t[r])}))}function baseGet(t,r){for(var i=0,o=(r=castPath(r,t)).length;null!=t&&i<o;)t=t[toKey(r[i++])];return i&&i==o?t:a}function baseGetAllKeys(t,r,i){var o=r(t);return un(t)?o:arrayPush(o,i(t))}function baseGetTag(t){return null==t?t===a?"[object Undefined]":"[object Null]":oe&&oe in At(t)?function getRawTag(t){var r=Yt.call(t,oe),i=t[oe];try{t[oe]=a;var o=!0}catch(t){}var l=Wt.call(t);o&&(r?t[oe]=i:delete t[oe]);return l}(t):function objectToString(t){return Wt.call(t)}(t)}function baseGt(t,r){return t>r}function baseHas(t,r){return null!=t&&Yt.call(t,r)}function baseHasIn(t,r){return null!=t&&r in At(t)}function baseIntersection(t,r,o){for(var l=o?arrayIncludesWith:arrayIncludes,u=t[0].length,c=t.length,h=c,p=i(c),d=1/0,y=[];h--;){var v=t[h];h&&r&&(v=arrayMap(v,baseUnary(r))),d=Xe(v.length,d),p[h]=!o&&(r||u>=120&&v.length>=120)?new SetCache(h&&v):a}v=t[0];var P=-1,m=p[0];t:for(;++P<u&&y.length<d;){var g=v[P],_=r?r(g):g;if(g=o||0!==g?g:0,!(m?cacheHas(m,_):l(y,_,o))){for(h=c;--h;){var b=p[h];if(!(b?cacheHas(b,_):l(t[h],_,o)))continue t}m&&m.push(_),y.push(g)}}return y}function baseInvoke(t,r,i){var o=null==(t=parent(t,r=castPath(r,t)))?t:t[toKey(last(r))];return null==o?a:apply(o,t,i)}function baseIsArguments(t){return isObjectLike(t)&&baseGetTag(t)==x}function baseIsEqual(t,r,i,o,l){return t===r||(null==t||null==r||!isObjectLike(t)&&!isObjectLike(r)?t!=t&&r!=r:function baseIsEqualDeep(t,r,i,o,l,u){var c=un(t),h=un(r),p=c?I:mr(t),d=h?I:mr(r),y=(p=p==x?A:p)==A,v=(d=d==x?A:d)==A,P=p==d;if(P&&hn(t)){if(!hn(r))return!1;c=!0,y=!1}if(P&&!y)return u||(u=new Stack),c||vn(t)?equalArrays(t,r,i,o,l,u):function equalByTag(t,r,i,o,a,l,u){switch(i){case j:if(t.byteLength!=r.byteLength||t.byteOffset!=r.byteOffset)return!1;t=t.buffer,r=r.buffer;case X:return!(t.byteLength!=r.byteLength||!l(new Ht(t),new Ht(r)));case C:case O:case L:return eq(+t,+r);case w:return t.name==r.name&&t.message==r.message;case k:case B:return t==r+"";case E:var c=mapToArray;case R:var h=1&o;if(c||(c=setToArray),t.size!=r.size&&!h)return!1;var p=u.get(t);if(p)return p==r;o|=2,u.set(t,r);var d=equalArrays(c(t),c(r),o,a,l,u);return u.delete(t),d;case N:if(nr)return nr.call(t)==nr.call(r)}return!1}(t,r,p,i,o,l,u);if(!(1&i)){var m=y&&Yt.call(t,"__wrapped__"),g=v&&Yt.call(r,"__wrapped__");if(m||g){var _=m?t.value():t,b=g?r.value():r;return u||(u=new Stack),l(_,b,i,o,u)}}if(!P)return!1;return u||(u=new Stack),function equalObjects(t,r,i,o,l,u){var c=1&i,h=getAllKeys(t),p=h.length,d=getAllKeys(r).length;if(p!=d&&!c)return!1;var y=p;for(;y--;){var v=h[y];if(!(c?v in r:Yt.call(r,v)))return!1}var P=u.get(t),m=u.get(r);if(P&&m)return P==r&&m==t;var g=!0;u.set(t,r),u.set(r,t);var _=c;for(;++y<p;){var b=t[v=h[y]],x=r[v];if(o)var I=c?o(x,b,v,r,t,u):o(b,x,v,t,r,u);if(!(I===a?b===x||l(b,x,i,o,u):I)){g=!1;break}_||(_="constructor"==v)}if(g&&!_){var C=t.constructor,O=r.constructor;C==O||!("constructor"in t)||!("constructor"in r)||"function"==typeof C&&C instanceof C&&"function"==typeof O&&O instanceof O||(g=!1)}return u.delete(t),u.delete(r),g}(t,r,i,o,l,u)}(t,r,i,o,baseIsEqual,l))}function baseIsMatch(t,r,i,o){var l=i.length,u=l,c=!o;if(null==t)return!u;for(t=At(t);l--;){var h=i[l];if(c&&h[2]?h[1]!==t[h[0]]:!(h[0]in t))return!1}for(;++l<u;){var p=(h=i[l])[0],d=t[p],y=h[1];if(c&&h[2]){if(d===a&&!(p in t))return!1}else{var v=new Stack;if(o)var P=o(d,y,p,t,r,v);if(!(P===a?baseIsEqual(y,d,3,o,v):P))return!1}}return!0}function baseIsNative(t){return!(!isObject(t)||function isMasked(t){return!!zt&&zt in t}(t))&&(isFunction(t)?Gt:It).test(toSource(t))}function baseIteratee(t){return"function"==typeof t?t:null==t?identity:"object"==typeof t?un(t)?baseMatchesProperty(t[0],t[1]):baseMatches(t):property(t)}function baseKeys(t){if(!isPrototype(t))return Ne(t);var r=[];for(var i in At(t))Yt.call(t,i)&&"constructor"!=i&&r.push(i);return r}function baseKeysIn(t){if(!isObject(t))return function nativeKeysIn(t){var r=[];if(null!=t)for(var i in At(t))r.push(i);return r}(t);var r=isPrototype(t),i=[];for(var o in t)("constructor"!=o||!r&&Yt.call(t,o))&&i.push(o);return i}function baseLt(t,r){return t<r}function baseMap(t,r){var o=-1,a=isArrayLike(t)?i(t.length):[];return sr(t,(function(t,i,l){a[++o]=r(t,i,l)})),a}function baseMatches(t){var r=getMatchData(t);return 1==r.length&&r[0][2]?matchesStrictComparable(r[0][0],r[0][1]):function(i){return i===t||baseIsMatch(i,t,r)}}function baseMatchesProperty(t,r){return isKey(t)&&isStrictComparable(r)?matchesStrictComparable(toKey(t),r):function(i){var o=get(i,t);return o===a&&o===r?hasIn(i,t):baseIsEqual(r,o,3)}}function baseMerge(t,r,i,o,l){t!==r&&lr(r,(function(u,c){if(l||(l=new Stack),isObject(u))!function baseMergeDeep(t,r,i,o,l,u,c){var h=safeGet(t,i),p=safeGet(r,i),d=c.get(p);if(d)return void assignMergeValue(t,i,d);var y=u?u(h,p,i+"",t,r,c):a,v=y===a;if(v){var P=un(p),m=!P&&hn(p),g=!P&&!m&&vn(p);y=p,P||m||g?un(h)?y=h:isArrayLikeObject(h)?y=copyArray(h):m?(v=!1,y=cloneBuffer(p,!0)):g?(v=!1,y=cloneTypedArray(p,!0)):y=[]:isPlainObject(p)||ln(p)?(y=h,ln(h)?y=toPlainObject(h):isObject(h)&&!isFunction(h)||(y=initCloneObject(p))):v=!1}v&&(c.set(p,y),l(y,p,o,u,c),c.delete(p));assignMergeValue(t,i,y)}(t,r,c,i,baseMerge,o,l);else{var h=o?o(safeGet(t,c),u,c+"",t,r,l):a;h===a&&(h=u),assignMergeValue(t,c,h)}}),keysIn)}function baseNth(t,r){var i=t.length;if(i)return isIndex(r+=r<0?i:0,i)?t[r]:a}function baseOrderBy(t,r,i){r=r.length?arrayMap(r,(function(t){return un(t)?function(r){return baseGet(r,1===t.length?t[0]:t)}:t})):[identity];var o=-1;r=arrayMap(r,baseUnary(getIteratee()));var a=baseMap(t,(function(t,i,a){var l=arrayMap(r,(function(r){return r(t)}));return{criteria:l,index:++o,value:t}}));return function baseSortBy(t,r){var i=t.length;for(t.sort(r);i--;)t[i]=t[i].value;return t}(a,(function(t,r){return function compareMultiple(t,r,i){var o=-1,a=t.criteria,l=r.criteria,u=a.length,c=i.length;for(;++o<u;){var h=compareAscending(a[o],l[o]);if(h)return o>=c?h:h*("desc"==i[o]?-1:1)}return t.index-r.index}(t,r,i)}))}function basePickBy(t,r,i){for(var o=-1,a=r.length,l={};++o<a;){var u=r[o],c=baseGet(t,u);i(c,u)&&baseSet(l,castPath(u,t),c)}return l}function basePullAll(t,r,i,o){var a=o?baseIndexOfWith:baseIndexOf,l=-1,u=r.length,c=t;for(t===r&&(r=copyArray(r)),i&&(c=arrayMap(t,baseUnary(i)));++l<u;)for(var h=0,p=r[l],d=i?i(p):p;(h=a(c,d,h,o))>-1;)c!==t&&te.call(c,h,1),te.call(t,h,1);return t}function basePullAt(t,r){for(var i=t?r.length:0,o=i-1;i--;){var a=r[i];if(i==o||a!==l){var l=a;isIndex(a)?te.call(t,a,1):baseUnset(t,a)}}return t}function baseRandom(t,r){return t+_e(Fe()*(r-t+1))}function baseRepeat(t,r){var i="";if(!t||r<1||r>m)return i;do{r%2&&(i+=t),(r=_e(r/2))&&(t+=t)}while(r);return i}function baseRest(t,r){return xr(overRest(t,r,identity),t+"")}function baseSample(t){return arraySample(values(t))}function baseSampleSize(t,r){var i=values(t);return shuffleSelf(i,baseClamp(r,0,i.length))}function baseSet(t,r,i,o){if(!isObject(t))return t;for(var l=-1,u=(r=castPath(r,t)).length,c=u-1,h=t;null!=h&&++l<u;){var p=toKey(r[l]),d=i;if("__proto__"===p||"constructor"===p||"prototype"===p)return t;if(l!=c){var y=h[p];(d=o?o(y,p,h):a)===a&&(d=isObject(y)?y:isIndex(r[l+1])?[]:{})}assignValue(h,p,d),h=h[p]}return t}var cr=He?function(t,r){return He.set(t,r),t}:identity,hr=ae?function(t,r){return ae(t,"toString",{configurable:!0,enumerable:!1,value:constant(r),writable:!0})}:identity;function baseShuffle(t){return shuffleSelf(values(t))}function baseSlice(t,r,o){var a=-1,l=t.length;r<0&&(r=-r>l?0:l+r),(o=o>l?l:o)<0&&(o+=l),l=r>o?0:o-r>>>0,r>>>=0;for(var u=i(l);++a<l;)u[a]=t[a+r];return u}function baseSome(t,r){var i;return sr(t,(function(t,o,a){return!(i=r(t,o,a))})),!!i}function baseSortedIndex(t,r,i){var o=0,a=null==t?o:t.length;if("number"==typeof r&&r==r&&a<=2147483647){for(;o<a;){var l=o+a>>>1,u=t[l];null!==u&&!isSymbol(u)&&(i?u<=r:u<r)?o=l+1:a=l}return a}return baseSortedIndexBy(t,r,identity,i)}function baseSortedIndexBy(t,r,i,o){var l=0,u=null==t?0:t.length;if(0===u)return 0;for(var c=(r=i(r))!=r,h=null===r,p=isSymbol(r),d=r===a;l<u;){var y=_e((l+u)/2),v=i(t[y]),P=v!==a,m=null===v,g=v==v,_=isSymbol(v);if(c)var b=o||g;else b=d?g&&(o||P):h?g&&P&&(o||!m):p?g&&P&&!m&&(o||!_):!m&&!_&&(o?v<=r:v<r);b?l=y+1:u=y}return Xe(u,4294967294)}function baseSortedUniq(t,r){for(var i=-1,o=t.length,a=0,l=[];++i<o;){var u=t[i],c=r?r(u):u;if(!i||!eq(c,h)){var h=c;l[a++]=0===u?0:u}}return l}function baseToNumber(t){return"number"==typeof t?t:isSymbol(t)?g:+t}function baseToString(t){if("string"==typeof t)return t;if(un(t))return arrayMap(t,baseToString)+"";if(isSymbol(t))return ir?ir.call(t):"";var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}function baseUniq(t,r,i){var o=-1,a=arrayIncludes,l=t.length,u=!0,c=[],h=c;if(i)u=!1,a=arrayIncludesWith;else if(l>=200){var p=r?null:dr(t);if(p)return setToArray(p);u=!1,a=cacheHas,h=new SetCache}else h=r?[]:c;t:for(;++o<l;){var d=t[o],y=r?r(d):d;if(d=i||0!==d?d:0,u&&y==y){for(var v=h.length;v--;)if(h[v]===y)continue t;r&&h.push(y),c.push(d)}else a(h,y,i)||(h!==c&&h.push(y),c.push(d))}return c}function baseUnset(t,r){return null==(t=parent(t,r=castPath(r,t)))||delete t[toKey(last(r))]}function baseUpdate(t,r,i,o){return baseSet(t,r,i(baseGet(t,r)),o)}function baseWhile(t,r,i,o){for(var a=t.length,l=o?a:-1;(o?l--:++l<a)&&r(t[l],l,t););return i?baseSlice(t,o?0:l,o?l+1:a):baseSlice(t,o?l+1:0,o?a:l)}function baseWrapperValue(t,r){var i=t;return i instanceof LazyWrapper&&(i=i.value()),arrayReduce(r,(function(t,r){return r.func.apply(r.thisArg,arrayPush([t],r.args))}),i)}function baseXor(t,r,o){var a=t.length;if(a<2)return a?baseUniq(t[0]):[];for(var l=-1,u=i(a);++l<a;)for(var c=t[l],h=-1;++h<a;)h!=l&&(u[l]=baseDifference(u[l]||c,t[h],r,o));return baseUniq(baseFlatten(u,1),r,o)}function baseZipObject(t,r,i){for(var o=-1,l=t.length,u=r.length,c={};++o<l;){var h=o<u?r[o]:a;i(c,t[o],h)}return c}function castArrayLikeObject(t){return isArrayLikeObject(t)?t:[]}function castFunction(t){return"function"==typeof t?t:identity}function castPath(t,r){return un(t)?t:isKey(t,r)?[t]:Ir(toString(t))}var fr=baseRest;function castSlice(t,r,i){var o=t.length;return i=i===a?o:i,!r&&i>=o?t:baseSlice(t,r,i)}var pr=pe||function(t){return me.clearTimeout(t)};function cloneBuffer(t,r){if(r)return t.slice();var i=t.length,o=Jt?Jt(i):new t.constructor(i);return t.copy(o),o}function cloneArrayBuffer(t){var r=new t.constructor(t.byteLength);return new Ht(r).set(new Ht(t)),r}function cloneTypedArray(t,r){var i=r?cloneArrayBuffer(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}function compareAscending(t,r){if(t!==r){var i=t!==a,o=null===t,l=t==t,u=isSymbol(t),c=r!==a,h=null===r,p=r==r,d=isSymbol(r);if(!h&&!d&&!u&&t>r||u&&c&&p&&!h&&!d||o&&c&&p||!i&&p||!l)return 1;if(!o&&!u&&!d&&t<r||d&&i&&l&&!o&&!u||h&&i&&l||!c&&l||!p)return-1}return 0}function composeArgs(t,r,o,a){for(var l=-1,u=t.length,c=o.length,h=-1,p=r.length,d=De(u-c,0),y=i(p+d),v=!a;++h<p;)y[h]=r[h];for(;++l<c;)(v||l<u)&&(y[o[l]]=t[l]);for(;d--;)y[h++]=t[l++];return y}function composeArgsRight(t,r,o,a){for(var l=-1,u=t.length,c=-1,h=o.length,p=-1,d=r.length,y=De(u-h,0),v=i(y+d),P=!a;++l<y;)v[l]=t[l];for(var m=l;++p<d;)v[m+p]=r[p];for(;++c<h;)(P||l<u)&&(v[m+o[c]]=t[l++]);return v}function copyArray(t,r){var o=-1,a=t.length;for(r||(r=i(a));++o<a;)r[o]=t[o];return r}function copyObject(t,r,i,o){var l=!i;i||(i={});for(var u=-1,c=r.length;++u<c;){var h=r[u],p=o?o(i[h],t[h],h,i,t):a;p===a&&(p=t[h]),l?baseAssignValue(i,h,p):assignValue(i,h,p)}return i}function createAggregator(t,r){return function(i,o){var a=un(i)?arrayAggregator:baseAggregator,l=r?r():{};return a(i,t,getIteratee(o,2),l)}}function createAssigner(t){return baseRest((function(r,i){var o=-1,l=i.length,u=l>1?i[l-1]:a,c=l>2?i[2]:a;for(u=t.length>3&&"function"==typeof u?(l--,u):a,c&&isIterateeCall(i[0],i[1],c)&&(u=l<3?a:u,l=1),r=At(r);++o<l;){var h=i[o];h&&t(r,h,o,u)}return r}))}function createBaseEach(t,r){return function(i,o){if(null==i)return i;if(!isArrayLike(i))return t(i,o);for(var a=i.length,l=r?a:-1,u=At(i);(r?l--:++l<a)&&!1!==o(u[l],l,u););return i}}function createBaseFor(t){return function(r,i,o){for(var a=-1,l=At(r),u=o(r),c=u.length;c--;){var h=u[t?c:++a];if(!1===i(l[h],h,l))break}return r}}function createCaseFirst(t){return function(r){var i=hasUnicode(r=toString(r))?stringToArray(r):a,o=i?i[0]:r.charAt(0),l=i?castSlice(i,1).join(""):r.slice(1);return o[t]()+l}}function createCompounder(t){return function(r){return arrayReduce(words(deburr(r).replace(ne,"")),t,"")}}function createCtor(t){return function(){var r=arguments;switch(r.length){case 0:return new t;case 1:return new t(r[0]);case 2:return new t(r[0],r[1]);case 3:return new t(r[0],r[1],r[2]);case 4:return new t(r[0],r[1],r[2],r[3]);case 5:return new t(r[0],r[1],r[2],r[3],r[4]);case 6:return new t(r[0],r[1],r[2],r[3],r[4],r[5]);case 7:return new t(r[0],r[1],r[2],r[3],r[4],r[5],r[6])}var i=or(t.prototype),o=t.apply(i,r);return isObject(o)?o:i}}function createFind(t){return function(r,i,o){var l=At(r);if(!isArrayLike(r)){var u=getIteratee(i,3);r=keys(r),i=function(t){return u(l[t],t,l)}}var c=t(r,i,o);return c>-1?l[u?r[c]:c]:a}}function createFlow(t){return flatRest((function(r){var i=r.length,o=i,u=LodashWrapper.prototype.thru;for(t&&r.reverse();o--;){var c=r[o];if("function"!=typeof c)throw new Rt(l);if(u&&!h&&"wrapper"==getFuncName(c))var h=new LodashWrapper([],!0)}for(o=h?o:i;++o<i;){var p=getFuncName(c=r[o]),d="wrapper"==p?yr(c):a;h=d&&isLaziable(d[0])&&424==d[1]&&!d[4].length&&1==d[9]?h[getFuncName(d[0])].apply(h,d[3]):1==c.length&&isLaziable(c)?h[p]():h.thru(c)}return function(){var t=arguments,o=t[0];if(h&&1==t.length&&un(o))return h.plant(o).value();for(var a=0,l=i?r[a].apply(this,t):o;++a<i;)l=r[a].call(this,l);return l}}))}function createHybrid(t,r,o,l,u,c,h,p,d,v){var P=r&y,m=1&r,g=2&r,_=24&r,b=512&r,x=g?a:createCtor(t);return function wrapper(){for(var a=arguments.length,y=i(a),I=a;I--;)y[I]=arguments[I];if(_)var C=getHolder(wrapper),O=countHolders(y,C);if(l&&(y=composeArgs(y,l,u,_)),c&&(y=composeArgsRight(y,c,h,_)),a-=O,_&&a<v){var w=replaceHolders(y,C);return createRecurry(t,r,createHybrid,wrapper.placeholder,o,y,w,p,d,v-a)}var S=m?o:this,T=g?S[t]:t;return a=y.length,p?y=reorder(y,p):b&&a>1&&y.reverse(),P&&d<a&&(y.length=d),this&&this!==me&&this instanceof wrapper&&(T=x||createCtor(T)),T.apply(S,y)}}function createInverter(t,r){return function(i,o){return function baseInverter(t,r,i,o){return baseForOwn(t,(function(t,a,l){r(o,i(t),a,l)})),o}(i,t,r(o),{})}}function createMathOperation(t,r){return function(i,o){var l;if(i===a&&o===a)return r;if(i!==a&&(l=i),o!==a){if(l===a)return o;"string"==typeof i||"string"==typeof o?(i=baseToString(i),o=baseToString(o)):(i=baseToNumber(i),o=baseToNumber(o)),l=t(i,o)}return l}}function createOver(t){return flatRest((function(r){return r=arrayMap(r,baseUnary(getIteratee())),baseRest((function(i){var o=this;return t(r,(function(t){return apply(t,o,i)}))}))}))}function createPadding(t,r){var i=(r=r===a?" ":baseToString(r)).length;if(i<2)return i?baseRepeat(r,t):r;var o=baseRepeat(r,ge(t/stringSize(r)));return hasUnicode(r)?castSlice(stringToArray(o),0,t).join(""):o.slice(0,t)}function createRange(t){return function(r,o,l){return l&&"number"!=typeof l&&isIterateeCall(r,o,l)&&(o=l=a),r=toFinite(r),o===a?(o=r,r=0):o=toFinite(o),function baseRange(t,r,o,a){for(var l=-1,u=De(ge((r-t)/(o||1)),0),c=i(u);u--;)c[a?u:++l]=t,t+=o;return c}(r,o,l=l===a?r<o?1:-1:toFinite(l),t)}}function createRelationalOperation(t){return function(r,i){return"string"==typeof r&&"string"==typeof i||(r=toNumber(r),i=toNumber(i)),t(r,i)}}function createRecurry(t,r,i,o,l,u,c,h,y,v){var P=8&r;r|=P?p:d,4&(r&=~(P?d:p))||(r&=-4);var m=[t,r,l,P?u:a,P?c:a,P?a:u,P?a:c,h,y,v],g=i.apply(a,m);return isLaziable(t)&&_r(g,m),g.placeholder=o,setWrapToString(g,t,r)}function createRound(t){var r=Lt[t];return function(t,i){if(t=toNumber(t),(i=null==i?0:Xe(toInteger(i),292))&&Le(t)){var o=(toString(t)+"e").split("e");return+((o=(toString(r(o[0]+"e"+(+o[1]+i)))+"e").split("e"))[0]+"e"+(+o[1]-i))}return r(t)}}var dr=Ge&&1/setToArray(new Ge([,-0]))[1]==P?function(t){return new Ge(t)}:noop;function createToPairs(t){return function(r){var i=mr(r);return i==E?mapToArray(r):i==R?setToPairs(r):function baseToPairs(t,r){return arrayMap(r,(function(r){return[r,t[r]]}))}(r,t(r))}}function createWrap(t,r,o,u,P,m,g,_){var b=2&r;if(!b&&"function"!=typeof t)throw new Rt(l);var x=u?u.length:0;if(x||(r&=-97,u=P=a),g=g===a?g:De(toInteger(g),0),_=_===a?_:toInteger(_),x-=P?P.length:0,r&d){var I=u,C=P;u=P=a}var O=b?a:yr(t),w=[t,r,o,u,P,I,C,m,g,_];if(O&&function mergeData(t,r){var i=t[1],o=r[1],a=i|o,l=a<131,u=o==y&&8==i||o==y&&i==v&&t[7].length<=r[8]||384==o&&r[7].length<=r[8]&&8==i;if(!l&&!u)return t;1&o&&(t[2]=r[2],a|=1&i?0:4);var h=r[3];if(h){var p=t[3];t[3]=p?composeArgs(p,h,r[4]):h,t[4]=p?replaceHolders(t[3],c):r[4]}(h=r[5])&&(p=t[5],t[5]=p?composeArgsRight(p,h,r[6]):h,t[6]=p?replaceHolders(t[5],c):r[6]);(h=r[7])&&(t[7]=h);o&y&&(t[8]=null==t[8]?r[8]:Xe(t[8],r[8]));null==t[9]&&(t[9]=r[9]);return t[0]=r[0],t[1]=a,t}(w,O),t=w[0],r=w[1],o=w[2],u=w[3],P=w[4],!(_=w[9]=w[9]===a?b?0:t.length:De(w[9]-x,0))&&24&r&&(r&=-25),r&&1!=r)S=8==r||r==h?function createCurry(t,r,o){var l=createCtor(t);return function wrapper(){for(var u=arguments.length,c=i(u),h=u,p=getHolder(wrapper);h--;)c[h]=arguments[h];var d=u<3&&c[0]!==p&&c[u-1]!==p?[]:replaceHolders(c,p);return(u-=d.length)<o?createRecurry(t,r,createHybrid,wrapper.placeholder,a,c,d,a,a,o-u):apply(this&&this!==me&&this instanceof wrapper?l:t,this,c)}}(t,r,_):r!=p&&33!=r||P.length?createHybrid.apply(a,w):function createPartial(t,r,o,a){var l=1&r,u=createCtor(t);return function wrapper(){for(var r=-1,c=arguments.length,h=-1,p=a.length,d=i(p+c),y=this&&this!==me&&this instanceof wrapper?u:t;++h<p;)d[h]=a[h];for(;c--;)d[h++]=arguments[++r];return apply(y,l?o:this,d)}}(t,r,o,u);else var S=function createBind(t,r,i){var o=1&r,a=createCtor(t);return function wrapper(){return(this&&this!==me&&this instanceof wrapper?a:t).apply(o?i:this,arguments)}}(t,r,o);return setWrapToString((O?cr:_r)(S,w),t,r)}function customDefaultsAssignIn(t,r,i,o){return t===a||eq(t,Dt[i])&&!Yt.call(o,i)?r:t}function customDefaultsMerge(t,r,i,o,l,u){return isObject(t)&&isObject(r)&&(u.set(r,t),baseMerge(t,r,a,customDefaultsMerge,u),u.delete(r)),t}function customOmitClone(t){return isPlainObject(t)?a:t}function equalArrays(t,r,i,o,l,u){var c=1&i,h=t.length,p=r.length;if(h!=p&&!(c&&p>h))return!1;var d=u.get(t),y=u.get(r);if(d&&y)return d==r&&y==t;var v=-1,P=!0,m=2&i?new SetCache:a;for(u.set(t,r),u.set(r,t);++v<h;){var g=t[v],_=r[v];if(o)var b=c?o(_,g,v,r,t,u):o(g,_,v,t,r,u);if(b!==a){if(b)continue;P=!1;break}if(m){if(!arraySome(r,(function(t,r){if(!cacheHas(m,r)&&(g===t||l(g,t,i,o,u)))return m.push(r)}))){P=!1;break}}else if(g!==_&&!l(g,_,i,o,u)){P=!1;break}}return u.delete(t),u.delete(r),P}function flatRest(t){return xr(overRest(t,a,flatten),t+"")}function getAllKeys(t){return baseGetAllKeys(t,keys,vr)}function getAllKeysIn(t){return baseGetAllKeys(t,keysIn,Pr)}var yr=He?function(t){return He.get(t)}:noop;function getFuncName(t){for(var r=t.name+"",i=Je[r],o=Yt.call(Je,r)?i.length:0;o--;){var a=i[o],l=a.func;if(null==l||l==t)return a.name}return r}function getHolder(t){return(Yt.call(lodash,"placeholder")?lodash:t).placeholder}function getIteratee(){var t=lodash.iteratee||iteratee;return t=t===iteratee?baseIteratee:t,arguments.length?t(arguments[0],arguments[1]):t}function getMapData(t,r){var i=t.__data__;return function isKeyable(t){var r=typeof t;return"string"==r||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==t:null===t}(r)?i["string"==typeof r?"string":"hash"]:i.map}function getMatchData(t){for(var r=keys(t),i=r.length;i--;){var o=r[i],a=t[o];r[i]=[o,a,isStrictComparable(a)]}return r}function getNative(t,r){var i=function getValue(t,r){return null==t?a:t[r]}(t,r);return baseIsNative(i)?i:a}var vr=xe?function(t){return null==t?[]:(t=At(t),arrayFilter(xe(t),(function(r){return Qt.call(t,r)})))}:stubArray,Pr=xe?function(t){for(var r=[];t;)arrayPush(r,vr(t)),t=Kt(t);return r}:stubArray,mr=baseGetTag;function hasPath(t,r,i){for(var o=-1,a=(r=castPath(r,t)).length,l=!1;++o<a;){var u=toKey(r[o]);if(!(l=null!=t&&i(t,u)))break;t=t[u]}return l||++o!=a?l:!!(a=null==t?0:t.length)&&isLength(a)&&isIndex(u,a)&&(un(t)||ln(t))}function initCloneObject(t){return"function"!=typeof t.constructor||isPrototype(t)?{}:or(Kt(t))}function isFlattenable(t){return un(t)||ln(t)||!!(ee&&t&&t[ee])}function isIndex(t,r){var i=typeof t;return!!(r=null==r?m:r)&&("number"==i||"symbol"!=i&&Ot.test(t))&&t>-1&&t%1==0&&t<r}function isIterateeCall(t,r,i){if(!isObject(i))return!1;var o=typeof r;return!!("number"==o?isArrayLike(i)&&isIndex(r,i.length):"string"==o&&r in i)&&eq(i[r],t)}function isKey(t,r){if(un(t))return!1;var i=typeof t;return!("number"!=i&&"symbol"!=i&&"boolean"!=i&&null!=t&&!isSymbol(t))||(at.test(t)||!st.test(t)||null!=r&&t in At(r))}function isLaziable(t){var r=getFuncName(t),i=lodash[r];if("function"!=typeof i||!(r in LazyWrapper.prototype))return!1;if(t===i)return!0;var o=yr(i);return!!o&&t===o[0]}(We&&mr(new We(new ArrayBuffer(1)))!=j||Ze&&mr(new Ze)!=E||qe&&mr(qe.resolve())!=M||Ge&&mr(new Ge)!=R||Ve&&mr(new Ve)!=D)&&(mr=function(t){var r=baseGetTag(t),i=r==A?t.constructor:a,o=i?toSource(i):"";if(o)switch(o){case Ke:return j;case $e:return E;case Qe:return M;case tr:return R;case er:return D}return r});var gr=Xt?isFunction:stubFalse;function isPrototype(t){var r=t&&t.constructor;return t===("function"==typeof r&&r.prototype||Dt)}function isStrictComparable(t){return t==t&&!isObject(t)}function matchesStrictComparable(t,r){return function(i){return null!=i&&(i[t]===r&&(r!==a||t in At(i)))}}function overRest(t,r,o){return r=De(r===a?t.length-1:r,0),function(){for(var a=arguments,l=-1,u=De(a.length-r,0),c=i(u);++l<u;)c[l]=a[r+l];l=-1;for(var h=i(r+1);++l<r;)h[l]=a[l];return h[r]=o(c),apply(t,this,h)}}function parent(t,r){return r.length<2?t:baseGet(t,baseSlice(r,0,-1))}function reorder(t,r){for(var i=t.length,o=Xe(r.length,i),l=copyArray(t);o--;){var u=r[o];t[o]=isIndex(u,i)?l[u]:a}return t}function safeGet(t,r){if(("constructor"!==r||"function"!=typeof t[r])&&"__proto__"!=r)return t[r]}var _r=shortOut(cr),br=Pe||function(t,r){return me.setTimeout(t,r)},xr=shortOut(hr);function setWrapToString(t,r,i){var o=r+"";return xr(t,function insertWrapDetails(t,r){var i=r.length;if(!i)return t;var o=i-1;return r[o]=(i>1?"& ":"")+r[o],r=r.join(i>2?", ":" "),t.replace(pt,"{\n/* [wrapped with "+r+"] */\n")}(o,function updateWrapDetails(t,r){return arrayEach(b,(function(i){var o="_."+i[0];r&i[1]&&!arrayIncludes(t,o)&&t.push(o)})),t.sort()}(function getWrapDetails(t){var r=t.match(dt);return r?r[1].split(yt):[]}(o),i)))}function shortOut(t){var r=0,i=0;return function(){var o=je(),l=16-(o-i);if(i=o,l>0){if(++r>=800)return arguments[0]}else r=0;return t.apply(a,arguments)}}function shuffleSelf(t,r){var i=-1,o=t.length,l=o-1;for(r=r===a?o:r;++i<r;){var u=baseRandom(i,l),c=t[u];t[u]=t[i],t[i]=c}return t.length=r,t}var Ir=function memoizeCapped(t){var r=memoize(t,(function(t){return 500===i.size&&i.clear(),t})),i=r.cache;return r}((function(t){var r=[];return 46===t.charCodeAt(0)&&r.push(""),t.replace(lt,(function(t,i,o,a){r.push(o?a.replace(mt,"$1"):i||t)})),r}));function toKey(t){if("string"==typeof t||isSymbol(t))return t;var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}function toSource(t){if(null!=t){try{return jt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function wrapperClone(t){if(t instanceof LazyWrapper)return t.clone();var r=new LodashWrapper(t.__wrapped__,t.__chain__);return r.__actions__=copyArray(t.__actions__),r.__index__=t.__index__,r.__values__=t.__values__,r}var Cr=baseRest((function(t,r){return isArrayLikeObject(t)?baseDifference(t,baseFlatten(r,1,isArrayLikeObject,!0)):[]})),Or=baseRest((function(t,r){var i=last(r);return isArrayLikeObject(i)&&(i=a),isArrayLikeObject(t)?baseDifference(t,baseFlatten(r,1,isArrayLikeObject,!0),getIteratee(i,2)):[]})),wr=baseRest((function(t,r){var i=last(r);return isArrayLikeObject(i)&&(i=a),isArrayLikeObject(t)?baseDifference(t,baseFlatten(r,1,isArrayLikeObject,!0),a,i):[]}));function findIndex(t,r,i){var o=null==t?0:t.length;if(!o)return-1;var a=null==i?0:toInteger(i);return a<0&&(a=De(o+a,0)),baseFindIndex(t,getIteratee(r,3),a)}function findLastIndex(t,r,i){var o=null==t?0:t.length;if(!o)return-1;var l=o-1;return i!==a&&(l=toInteger(i),l=i<0?De(o+l,0):Xe(l,o-1)),baseFindIndex(t,getIteratee(r,3),l,!0)}function flatten(t){return(null==t?0:t.length)?baseFlatten(t,1):[]}function head(t){return t&&t.length?t[0]:a}var Sr=baseRest((function(t){var r=arrayMap(t,castArrayLikeObject);return r.length&&r[0]===t[0]?baseIntersection(r):[]})),Tr=baseRest((function(t){var r=last(t),i=arrayMap(t,castArrayLikeObject);return r===last(i)?r=a:i.pop(),i.length&&i[0]===t[0]?baseIntersection(i,getIteratee(r,2)):[]})),Er=baseRest((function(t){var r=last(t),i=arrayMap(t,castArrayLikeObject);return(r="function"==typeof r?r:a)&&i.pop(),i.length&&i[0]===t[0]?baseIntersection(i,a,r):[]}));function last(t){var r=null==t?0:t.length;return r?t[r-1]:a}var Lr=baseRest(pullAll);function pullAll(t,r){return t&&t.length&&r&&r.length?basePullAll(t,r):t}var Ar=flatRest((function(t,r){var i=null==t?0:t.length,o=baseAt(t,r);return basePullAt(t,arrayMap(r,(function(t){return isIndex(t,i)?+t:t})).sort(compareAscending)),o}));function reverse(t){return null==t?t:ze.call(t)}var Mr=baseRest((function(t){return baseUniq(baseFlatten(t,1,isArrayLikeObject,!0))})),kr=baseRest((function(t){var r=last(t);return isArrayLikeObject(r)&&(r=a),baseUniq(baseFlatten(t,1,isArrayLikeObject,!0),getIteratee(r,2))})),Rr=baseRest((function(t){var r=last(t);return r="function"==typeof r?r:a,baseUniq(baseFlatten(t,1,isArrayLikeObject,!0),a,r)}));function unzip(t){if(!t||!t.length)return[];var r=0;return t=arrayFilter(t,(function(t){if(isArrayLikeObject(t))return r=De(t.length,r),!0})),baseTimes(r,(function(r){return arrayMap(t,baseProperty(r))}))}function unzipWith(t,r){if(!t||!t.length)return[];var i=unzip(t);return null==r?i:arrayMap(i,(function(t){return apply(r,a,t)}))}var Br=baseRest((function(t,r){return isArrayLikeObject(t)?baseDifference(t,r):[]})),Nr=baseRest((function(t){return baseXor(arrayFilter(t,isArrayLikeObject))})),Dr=baseRest((function(t){var r=last(t);return isArrayLikeObject(r)&&(r=a),baseXor(arrayFilter(t,isArrayLikeObject),getIteratee(r,2))})),Xr=baseRest((function(t){var r=last(t);return r="function"==typeof r?r:a,baseXor(arrayFilter(t,isArrayLikeObject),a,r)})),jr=baseRest(unzip);var Yr=baseRest((function(t){var r=t.length,i=r>1?t[r-1]:a;return i="function"==typeof i?(t.pop(),i):a,unzipWith(t,i)}));function chain(t){var r=lodash(t);return r.__chain__=!0,r}function thru(t,r){return r(t)}var Fr=flatRest((function(t){var r=t.length,i=r?t[0]:0,o=this.__wrapped__,interceptor=function(r){return baseAt(r,t)};return!(r>1||this.__actions__.length)&&o instanceof LazyWrapper&&isIndex(i)?((o=o.slice(i,+i+(r?1:0))).__actions__.push({func:thru,args:[interceptor],thisArg:a}),new LodashWrapper(o,this.__chain__).thru((function(t){return r&&!t.length&&t.push(a),t}))):this.thru(interceptor)}));var zr=createAggregator((function(t,r,i){Yt.call(t,i)?++t[i]:baseAssignValue(t,i,1)}));var Wr=createFind(findIndex),Zr=createFind(findLastIndex);function forEach(t,r){return(un(t)?arrayEach:sr)(t,getIteratee(r,3))}function forEachRight(t,r){return(un(t)?arrayEachRight:ar)(t,getIteratee(r,3))}var qr=createAggregator((function(t,r,i){Yt.call(t,i)?t[i].push(r):baseAssignValue(t,i,[r])}));var Gr=baseRest((function(t,r,o){var a=-1,l="function"==typeof r,u=isArrayLike(t)?i(t.length):[];return sr(t,(function(t){u[++a]=l?apply(r,t,o):baseInvoke(t,r,o)})),u})),Vr=createAggregator((function(t,r,i){baseAssignValue(t,i,r)}));function map(t,r){return(un(t)?arrayMap:baseMap)(t,getIteratee(r,3))}var Ur=createAggregator((function(t,r,i){t[i?0:1].push(r)}),(function(){return[[],[]]}));var Hr=baseRest((function(t,r){if(null==t)return[];var i=r.length;return i>1&&isIterateeCall(t,r[0],r[1])?r=[]:i>2&&isIterateeCall(r[0],r[1],r[2])&&(r=[r[0]]),baseOrderBy(t,baseFlatten(r,1),[])})),Jr=ve||function(){return me.Date.now()};function ary(t,r,i){return r=i?a:r,r=t&&null==r?t.length:r,createWrap(t,y,a,a,a,a,r)}function before(t,r){var i;if("function"!=typeof r)throw new Rt(l);return t=toInteger(t),function(){return--t>0&&(i=r.apply(this,arguments)),t<=1&&(r=a),i}}var Kr=baseRest((function(t,r,i){var o=1;if(i.length){var a=replaceHolders(i,getHolder(Kr));o|=p}return createWrap(t,o,r,i,a)})),$r=baseRest((function(t,r,i){var o=3;if(i.length){var a=replaceHolders(i,getHolder($r));o|=p}return createWrap(r,o,t,i,a)}));function debounce(t,r,i){var o,u,c,h,p,d,y=0,v=!1,P=!1,m=!0;if("function"!=typeof t)throw new Rt(l);function invokeFunc(r){var i=o,l=u;return o=u=a,y=r,h=t.apply(l,i)}function leadingEdge(t){return y=t,p=br(timerExpired,r),v?invokeFunc(t):h}function shouldInvoke(t){var i=t-d;return d===a||i>=r||i<0||P&&t-y>=c}function timerExpired(){var t=Jr();if(shouldInvoke(t))return trailingEdge(t);p=br(timerExpired,function remainingWait(t){var i=r-(t-d);return P?Xe(i,c-(t-y)):i}(t))}function trailingEdge(t){return p=a,m&&o?invokeFunc(t):(o=u=a,h)}function debounced(){var t=Jr(),i=shouldInvoke(t);if(o=arguments,u=this,d=t,i){if(p===a)return leadingEdge(d);if(P)return pr(p),p=br(timerExpired,r),invokeFunc(d)}return p===a&&(p=br(timerExpired,r)),h}return r=toNumber(r)||0,isObject(i)&&(v=!!i.leading,c=(P="maxWait"in i)?De(toNumber(i.maxWait)||0,r):c,m="trailing"in i?!!i.trailing:m),debounced.cancel=function cancel(){p!==a&&pr(p),y=0,o=d=u=p=a},debounced.flush=function flush(){return p===a?h:trailingEdge(Jr())},debounced}var Qr=baseRest((function(t,r){return baseDelay(t,1,r)})),tn=baseRest((function(t,r,i){return baseDelay(t,toNumber(r)||0,i)}));function memoize(t,r){if("function"!=typeof t||null!=r&&"function"!=typeof r)throw new Rt(l);var memoized=function(){var i=arguments,o=r?r.apply(this,i):i[0],a=memoized.cache;if(a.has(o))return a.get(o);var l=t.apply(this,i);return memoized.cache=a.set(o,l)||a,l};return memoized.cache=new(memoize.Cache||MapCache),memoized}function negate(t){if("function"!=typeof t)throw new Rt(l);return function(){var r=arguments;switch(r.length){case 0:return!t.call(this);case 1:return!t.call(this,r[0]);case 2:return!t.call(this,r[0],r[1]);case 3:return!t.call(this,r[0],r[1],r[2])}return!t.apply(this,r)}}memoize.Cache=MapCache;var en=fr((function(t,r){var i=(r=1==r.length&&un(r[0])?arrayMap(r[0],baseUnary(getIteratee())):arrayMap(baseFlatten(r,1),baseUnary(getIteratee()))).length;return baseRest((function(o){for(var a=-1,l=Xe(o.length,i);++a<l;)o[a]=r[a].call(this,o[a]);return apply(t,this,o)}))})),rn=baseRest((function(t,r){var i=replaceHolders(r,getHolder(rn));return createWrap(t,p,a,r,i)})),nn=baseRest((function(t,r){var i=replaceHolders(r,getHolder(nn));return createWrap(t,d,a,r,i)})),on=flatRest((function(t,r){return createWrap(t,v,a,a,a,r)}));function eq(t,r){return t===r||t!=t&&r!=r}var sn=createRelationalOperation(baseGt),an=createRelationalOperation((function(t,r){return t>=r})),ln=baseIsArguments(function(){return arguments}())?baseIsArguments:function(t){return isObjectLike(t)&&Yt.call(t,"callee")&&!Qt.call(t,"callee")},un=i.isArray,cn=Ce?baseUnary(Ce):function baseIsArrayBuffer(t){return isObjectLike(t)&&baseGetTag(t)==X};function isArrayLike(t){return null!=t&&isLength(t.length)&&!isFunction(t)}function isArrayLikeObject(t){return isObjectLike(t)&&isArrayLike(t)}var hn=Ie||stubFalse,fn=Oe?baseUnary(Oe):function baseIsDate(t){return isObjectLike(t)&&baseGetTag(t)==O};function isError(t){if(!isObjectLike(t))return!1;var r=baseGetTag(t);return r==w||"[object DOMException]"==r||"string"==typeof t.message&&"string"==typeof t.name&&!isPlainObject(t)}function isFunction(t){if(!isObject(t))return!1;var r=baseGetTag(t);return r==S||r==T||"[object AsyncFunction]"==r||"[object Proxy]"==r}function isInteger(t){return"number"==typeof t&&t==toInteger(t)}function isLength(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=m}function isObject(t){var r=typeof t;return null!=t&&("object"==r||"function"==r)}function isObjectLike(t){return null!=t&&"object"==typeof t}var pn=we?baseUnary(we):function baseIsMap(t){return isObjectLike(t)&&mr(t)==E};function isNumber(t){return"number"==typeof t||isObjectLike(t)&&baseGetTag(t)==L}function isPlainObject(t){if(!isObjectLike(t)||baseGetTag(t)!=A)return!1;var r=Kt(t);if(null===r)return!0;var i=Yt.call(r,"constructor")&&r.constructor;return"function"==typeof i&&i instanceof i&&jt.call(i)==Zt}var dn=Se?baseUnary(Se):function baseIsRegExp(t){return isObjectLike(t)&&baseGetTag(t)==k};var yn=Te?baseUnary(Te):function baseIsSet(t){return isObjectLike(t)&&mr(t)==R};function isString(t){return"string"==typeof t||!un(t)&&isObjectLike(t)&&baseGetTag(t)==B}function isSymbol(t){return"symbol"==typeof t||isObjectLike(t)&&baseGetTag(t)==N}var vn=Ee?baseUnary(Ee):function baseIsTypedArray(t){return isObjectLike(t)&&isLength(t.length)&&!!he[baseGetTag(t)]};var Pn=createRelationalOperation(baseLt),mn=createRelationalOperation((function(t,r){return t<=r}));function toArray(t){if(!t)return[];if(isArrayLike(t))return isString(t)?stringToArray(t):copyArray(t);if(re&&t[re])return function iteratorToArray(t){for(var r,i=[];!(r=t.next()).done;)i.push(r.value);return i}(t[re]());var r=mr(t);return(r==E?mapToArray:r==R?setToArray:values)(t)}function toFinite(t){return t?(t=toNumber(t))===P||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function toInteger(t){var r=toFinite(t),i=r%1;return r==r?i?r-i:r:0}function toLength(t){return t?baseClamp(toInteger(t),0,_):0}function toNumber(t){if("number"==typeof t)return t;if(isSymbol(t))return g;if(isObject(t)){var r="function"==typeof t.valueOf?t.valueOf():t;t=isObject(r)?r+"":r}if("string"!=typeof t)return 0===t?t:+t;t=baseTrim(t);var i=xt.test(t);return i||Ct.test(t)?ye(t.slice(2),i?2:8):bt.test(t)?g:+t}function toPlainObject(t){return copyObject(t,keysIn(t))}function toString(t){return null==t?"":baseToString(t)}var gn=createAssigner((function(t,r){if(isPrototype(r)||isArrayLike(r))copyObject(r,keys(r),t);else for(var i in r)Yt.call(r,i)&&assignValue(t,i,r[i])})),_n=createAssigner((function(t,r){copyObject(r,keysIn(r),t)})),bn=createAssigner((function(t,r,i,o){copyObject(r,keysIn(r),t,o)})),xn=createAssigner((function(t,r,i,o){copyObject(r,keys(r),t,o)})),In=flatRest(baseAt);var Cn=baseRest((function(t,r){t=At(t);var i=-1,o=r.length,l=o>2?r[2]:a;for(l&&isIterateeCall(r[0],r[1],l)&&(o=1);++i<o;)for(var u=r[i],c=keysIn(u),h=-1,p=c.length;++h<p;){var d=c[h],y=t[d];(y===a||eq(y,Dt[d])&&!Yt.call(t,d))&&(t[d]=u[d])}return t})),On=baseRest((function(t){return t.push(a,customDefaultsMerge),apply(Ln,a,t)}));function get(t,r,i){var o=null==t?a:baseGet(t,r);return o===a?i:o}function hasIn(t,r){return null!=t&&hasPath(t,r,baseHasIn)}var wn=createInverter((function(t,r,i){null!=r&&"function"!=typeof r.toString&&(r=Wt.call(r)),t[r]=i}),constant(identity)),Sn=createInverter((function(t,r,i){null!=r&&"function"!=typeof r.toString&&(r=Wt.call(r)),Yt.call(t,r)?t[r].push(i):t[r]=[i]}),getIteratee),Tn=baseRest(baseInvoke);function keys(t){return isArrayLike(t)?arrayLikeKeys(t):baseKeys(t)}function keysIn(t){return isArrayLike(t)?arrayLikeKeys(t,!0):baseKeysIn(t)}var En=createAssigner((function(t,r,i){baseMerge(t,r,i)})),Ln=createAssigner((function(t,r,i,o){baseMerge(t,r,i,o)})),An=flatRest((function(t,r){var i={};if(null==t)return i;var o=!1;r=arrayMap(r,(function(r){return r=castPath(r,t),o||(o=r.length>1),r})),copyObject(t,getAllKeysIn(t),i),o&&(i=baseClone(i,7,customOmitClone));for(var a=r.length;a--;)baseUnset(i,r[a]);return i}));var Mn=flatRest((function(t,r){return null==t?{}:function basePick(t,r){return basePickBy(t,r,(function(r,i){return hasIn(t,i)}))}(t,r)}));function pickBy(t,r){if(null==t)return{};var i=arrayMap(getAllKeysIn(t),(function(t){return[t]}));return r=getIteratee(r),basePickBy(t,i,(function(t,i){return r(t,i[0])}))}var kn=createToPairs(keys),Rn=createToPairs(keysIn);function values(t){return null==t?[]:baseValues(t,keys(t))}var Bn=createCompounder((function(t,r,i){return r=r.toLowerCase(),t+(i?capitalize(r):r)}));function capitalize(t){return zn(toString(t).toLowerCase())}function deburr(t){return(t=toString(t))&&t.replace(wt,Ae).replace(ie,"")}var Nn=createCompounder((function(t,r,i){return t+(i?"-":"")+r.toLowerCase()})),Dn=createCompounder((function(t,r,i){return t+(i?" ":"")+r.toLowerCase()})),Xn=createCaseFirst("toLowerCase");var jn=createCompounder((function(t,r,i){return t+(i?"_":"")+r.toLowerCase()}));var Yn=createCompounder((function(t,r,i){return t+(i?" ":"")+zn(r)}));var Fn=createCompounder((function(t,r,i){return t+(i?" ":"")+r.toUpperCase()})),zn=createCaseFirst("toUpperCase");function words(t,r,i){return t=toString(t),(r=i?a:r)===a?function hasUnicodeWord(t){return le.test(t)}(t)?function unicodeWords(t){return t.match(se)||[]}(t):function asciiWords(t){return t.match(vt)||[]}(t):t.match(r)||[]}var Wn=baseRest((function(t,r){try{return apply(t,a,r)}catch(t){return isError(t)?t:new ft(t)}})),Zn=flatRest((function(t,r){return arrayEach(r,(function(r){r=toKey(r),baseAssignValue(t,r,Kr(t[r],t))})),t}));function constant(t){return function(){return t}}var qn=createFlow(),Gn=createFlow(!0);function identity(t){return t}function iteratee(t){return baseIteratee("function"==typeof t?t:baseClone(t,1))}var Vn=baseRest((function(t,r){return function(i){return baseInvoke(i,t,r)}})),Un=baseRest((function(t,r){return function(i){return baseInvoke(t,i,r)}}));function mixin(t,r,i){var o=keys(r),a=baseFunctions(r,o);null!=i||isObject(r)&&(a.length||!o.length)||(i=r,r=t,t=this,a=baseFunctions(r,keys(r)));var l=!(isObject(i)&&"chain"in i&&!i.chain),u=isFunction(t);return arrayEach(a,(function(i){var o=r[i];t[i]=o,u&&(t.prototype[i]=function(){var r=this.__chain__;if(l||r){var i=t(this.__wrapped__),a=i.__actions__=copyArray(this.__actions__);return a.push({func:o,args:arguments,thisArg:t}),i.__chain__=r,i}return o.apply(t,arrayPush([this.value()],arguments))})})),t}function noop(){}var Hn=createOver(arrayMap),Jn=createOver(arrayEvery),Kn=createOver(arraySome);function property(t){return isKey(t)?baseProperty(toKey(t)):function basePropertyDeep(t){return function(r){return baseGet(r,t)}}(t)}var $n=createRange(),Qn=createRange(!0);function stubArray(){return[]}function stubFalse(){return!1}var ti=createMathOperation((function(t,r){return t+r}),0),ei=createRound("ceil"),ri=createMathOperation((function(t,r){return t/r}),1),ni=createRound("floor");var ii,oi=createMathOperation((function(t,r){return t*r}),1),si=createRound("round"),ai=createMathOperation((function(t,r){return t-r}),0);return lodash.after=function after(t,r){if("function"!=typeof r)throw new Rt(l);return t=toInteger(t),function(){if(--t<1)return r.apply(this,arguments)}},lodash.ary=ary,lodash.assign=gn,lodash.assignIn=_n,lodash.assignInWith=bn,lodash.assignWith=xn,lodash.at=In,lodash.before=before,lodash.bind=Kr,lodash.bindAll=Zn,lodash.bindKey=$r,lodash.castArray=function castArray(){if(!arguments.length)return[];var t=arguments[0];return un(t)?t:[t]},lodash.chain=chain,lodash.chunk=function chunk(t,r,o){r=(o?isIterateeCall(t,r,o):r===a)?1:De(toInteger(r),0);var l=null==t?0:t.length;if(!l||r<1)return[];for(var u=0,c=0,h=i(ge(l/r));u<l;)h[c++]=baseSlice(t,u,u+=r);return h},lodash.compact=function compact(t){for(var r=-1,i=null==t?0:t.length,o=0,a=[];++r<i;){var l=t[r];l&&(a[o++]=l)}return a},lodash.concat=function concat(){var t=arguments.length;if(!t)return[];for(var r=i(t-1),o=arguments[0],a=t;a--;)r[a-1]=arguments[a];return arrayPush(un(o)?copyArray(o):[o],baseFlatten(r,1))},lodash.cond=function cond(t){var r=null==t?0:t.length,i=getIteratee();return t=r?arrayMap(t,(function(t){if("function"!=typeof t[1])throw new Rt(l);return[i(t[0]),t[1]]})):[],baseRest((function(i){for(var o=-1;++o<r;){var a=t[o];if(apply(a[0],this,i))return apply(a[1],this,i)}}))},lodash.conforms=function conforms(t){return function baseConforms(t){var r=keys(t);return function(i){return baseConformsTo(i,t,r)}}(baseClone(t,1))},lodash.constant=constant,lodash.countBy=zr,lodash.create=function create(t,r){var i=or(t);return null==r?i:baseAssign(i,r)},lodash.curry=function curry(t,r,i){var o=createWrap(t,8,a,a,a,a,a,r=i?a:r);return o.placeholder=curry.placeholder,o},lodash.curryRight=function curryRight(t,r,i){var o=createWrap(t,h,a,a,a,a,a,r=i?a:r);return o.placeholder=curryRight.placeholder,o},lodash.debounce=debounce,lodash.defaults=Cn,lodash.defaultsDeep=On,lodash.defer=Qr,lodash.delay=tn,lodash.difference=Cr,lodash.differenceBy=Or,lodash.differenceWith=wr,lodash.drop=function drop(t,r,i){var o=null==t?0:t.length;return o?baseSlice(t,(r=i||r===a?1:toInteger(r))<0?0:r,o):[]},lodash.dropRight=function dropRight(t,r,i){var o=null==t?0:t.length;return o?baseSlice(t,0,(r=o-(r=i||r===a?1:toInteger(r)))<0?0:r):[]},lodash.dropRightWhile=function dropRightWhile(t,r){return t&&t.length?baseWhile(t,getIteratee(r,3),!0,!0):[]},lodash.dropWhile=function dropWhile(t,r){return t&&t.length?baseWhile(t,getIteratee(r,3),!0):[]},lodash.fill=function fill(t,r,i,o){var l=null==t?0:t.length;return l?(i&&"number"!=typeof i&&isIterateeCall(t,r,i)&&(i=0,o=l),function baseFill(t,r,i,o){var l=t.length;for((i=toInteger(i))<0&&(i=-i>l?0:l+i),(o=o===a||o>l?l:toInteger(o))<0&&(o+=l),o=i>o?0:toLength(o);i<o;)t[i++]=r;return t}(t,r,i,o)):[]},lodash.filter=function filter(t,r){return(un(t)?arrayFilter:baseFilter)(t,getIteratee(r,3))},lodash.flatMap=function flatMap(t,r){return baseFlatten(map(t,r),1)},lodash.flatMapDeep=function flatMapDeep(t,r){return baseFlatten(map(t,r),P)},lodash.flatMapDepth=function flatMapDepth(t,r,i){return i=i===a?1:toInteger(i),baseFlatten(map(t,r),i)},lodash.flatten=flatten,lodash.flattenDeep=function flattenDeep(t){return(null==t?0:t.length)?baseFlatten(t,P):[]},lodash.flattenDepth=function flattenDepth(t,r){return(null==t?0:t.length)?baseFlatten(t,r=r===a?1:toInteger(r)):[]},lodash.flip=function flip(t){return createWrap(t,512)},lodash.flow=qn,lodash.flowRight=Gn,lodash.fromPairs=function fromPairs(t){for(var r=-1,i=null==t?0:t.length,o={};++r<i;){var a=t[r];o[a[0]]=a[1]}return o},lodash.functions=function functions(t){return null==t?[]:baseFunctions(t,keys(t))},lodash.functionsIn=function functionsIn(t){return null==t?[]:baseFunctions(t,keysIn(t))},lodash.groupBy=qr,lodash.initial=function initial(t){return(null==t?0:t.length)?baseSlice(t,0,-1):[]},lodash.intersection=Sr,lodash.intersectionBy=Tr,lodash.intersectionWith=Er,lodash.invert=wn,lodash.invertBy=Sn,lodash.invokeMap=Gr,lodash.iteratee=iteratee,lodash.keyBy=Vr,lodash.keys=keys,lodash.keysIn=keysIn,lodash.map=map,lodash.mapKeys=function mapKeys(t,r){var i={};return r=getIteratee(r,3),baseForOwn(t,(function(t,o,a){baseAssignValue(i,r(t,o,a),t)})),i},lodash.mapValues=function mapValues(t,r){var i={};return r=getIteratee(r,3),baseForOwn(t,(function(t,o,a){baseAssignValue(i,o,r(t,o,a))})),i},lodash.matches=function matches(t){return baseMatches(baseClone(t,1))},lodash.matchesProperty=function matchesProperty(t,r){return baseMatchesProperty(t,baseClone(r,1))},lodash.memoize=memoize,lodash.merge=En,lodash.mergeWith=Ln,lodash.method=Vn,lodash.methodOf=Un,lodash.mixin=mixin,lodash.negate=negate,lodash.nthArg=function nthArg(t){return t=toInteger(t),baseRest((function(r){return baseNth(r,t)}))},lodash.omit=An,lodash.omitBy=function omitBy(t,r){return pickBy(t,negate(getIteratee(r)))},lodash.once=function once(t){return before(2,t)},lodash.orderBy=function orderBy(t,r,i,o){return null==t?[]:(un(r)||(r=null==r?[]:[r]),un(i=o?a:i)||(i=null==i?[]:[i]),baseOrderBy(t,r,i))},lodash.over=Hn,lodash.overArgs=en,lodash.overEvery=Jn,lodash.overSome=Kn,lodash.partial=rn,lodash.partialRight=nn,lodash.partition=Ur,lodash.pick=Mn,lodash.pickBy=pickBy,lodash.property=property,lodash.propertyOf=function propertyOf(t){return function(r){return null==t?a:baseGet(t,r)}},lodash.pull=Lr,lodash.pullAll=pullAll,lodash.pullAllBy=function pullAllBy(t,r,i){return t&&t.length&&r&&r.length?basePullAll(t,r,getIteratee(i,2)):t},lodash.pullAllWith=function pullAllWith(t,r,i){return t&&t.length&&r&&r.length?basePullAll(t,r,a,i):t},lodash.pullAt=Ar,lodash.range=$n,lodash.rangeRight=Qn,lodash.rearg=on,lodash.reject=function reject(t,r){return(un(t)?arrayFilter:baseFilter)(t,negate(getIteratee(r,3)))},lodash.remove=function remove(t,r){var i=[];if(!t||!t.length)return i;var o=-1,a=[],l=t.length;for(r=getIteratee(r,3);++o<l;){var u=t[o];r(u,o,t)&&(i.push(u),a.push(o))}return basePullAt(t,a),i},lodash.rest=function rest(t,r){if("function"!=typeof t)throw new Rt(l);return baseRest(t,r=r===a?r:toInteger(r))},lodash.reverse=reverse,lodash.sampleSize=function sampleSize(t,r,i){return r=(i?isIterateeCall(t,r,i):r===a)?1:toInteger(r),(un(t)?arraySampleSize:baseSampleSize)(t,r)},lodash.set=function set(t,r,i){return null==t?t:baseSet(t,r,i)},lodash.setWith=function setWith(t,r,i,o){return o="function"==typeof o?o:a,null==t?t:baseSet(t,r,i,o)},lodash.shuffle=function shuffle(t){return(un(t)?arrayShuffle:baseShuffle)(t)},lodash.slice=function slice(t,r,i){var o=null==t?0:t.length;return o?(i&&"number"!=typeof i&&isIterateeCall(t,r,i)?(r=0,i=o):(r=null==r?0:toInteger(r),i=i===a?o:toInteger(i)),baseSlice(t,r,i)):[]},lodash.sortBy=Hr,lodash.sortedUniq=function sortedUniq(t){return t&&t.length?baseSortedUniq(t):[]},lodash.sortedUniqBy=function sortedUniqBy(t,r){return t&&t.length?baseSortedUniq(t,getIteratee(r,2)):[]},lodash.split=function split(t,r,i){return i&&"number"!=typeof i&&isIterateeCall(t,r,i)&&(r=i=a),(i=i===a?_:i>>>0)?(t=toString(t))&&("string"==typeof r||null!=r&&!dn(r))&&!(r=baseToString(r))&&hasUnicode(t)?castSlice(stringToArray(t),0,i):t.split(r,i):[]},lodash.spread=function spread(t,r){if("function"!=typeof t)throw new Rt(l);return r=null==r?0:De(toInteger(r),0),baseRest((function(i){var o=i[r],a=castSlice(i,0,r);return o&&arrayPush(a,o),apply(t,this,a)}))},lodash.tail=function tail(t){var r=null==t?0:t.length;return r?baseSlice(t,1,r):[]},lodash.take=function take(t,r,i){return t&&t.length?baseSlice(t,0,(r=i||r===a?1:toInteger(r))<0?0:r):[]},lodash.takeRight=function takeRight(t,r,i){var o=null==t?0:t.length;return o?baseSlice(t,(r=o-(r=i||r===a?1:toInteger(r)))<0?0:r,o):[]},lodash.takeRightWhile=function takeRightWhile(t,r){return t&&t.length?baseWhile(t,getIteratee(r,3),!1,!0):[]},lodash.takeWhile=function takeWhile(t,r){return t&&t.length?baseWhile(t,getIteratee(r,3)):[]},lodash.tap=function tap(t,r){return r(t),t},lodash.throttle=function throttle(t,r,i){var o=!0,a=!0;if("function"!=typeof t)throw new Rt(l);return isObject(i)&&(o="leading"in i?!!i.leading:o,a="trailing"in i?!!i.trailing:a),debounce(t,r,{leading:o,maxWait:r,trailing:a})},lodash.thru=thru,lodash.toArray=toArray,lodash.toPairs=kn,lodash.toPairsIn=Rn,lodash.toPath=function toPath(t){return un(t)?arrayMap(t,toKey):isSymbol(t)?[t]:copyArray(Ir(toString(t)))},lodash.toPlainObject=toPlainObject,lodash.transform=function transform(t,r,i){var o=un(t),a=o||hn(t)||vn(t);if(r=getIteratee(r,4),null==i){var l=t&&t.constructor;i=a?o?new l:[]:isObject(t)&&isFunction(l)?or(Kt(t)):{}}return(a?arrayEach:baseForOwn)(t,(function(t,o,a){return r(i,t,o,a)})),i},lodash.unary=function unary(t){return ary(t,1)},lodash.union=Mr,lodash.unionBy=kr,lodash.unionWith=Rr,lodash.uniq=function uniq(t){return t&&t.length?baseUniq(t):[]},lodash.uniqBy=function uniqBy(t,r){return t&&t.length?baseUniq(t,getIteratee(r,2)):[]},lodash.uniqWith=function uniqWith(t,r){return r="function"==typeof r?r:a,t&&t.length?baseUniq(t,a,r):[]},lodash.unset=function unset(t,r){return null==t||baseUnset(t,r)},lodash.unzip=unzip,lodash.unzipWith=unzipWith,lodash.update=function update(t,r,i){return null==t?t:baseUpdate(t,r,castFunction(i))},lodash.updateWith=function updateWith(t,r,i,o){return o="function"==typeof o?o:a,null==t?t:baseUpdate(t,r,castFunction(i),o)},lodash.values=values,lodash.valuesIn=function valuesIn(t){return null==t?[]:baseValues(t,keysIn(t))},lodash.without=Br,lodash.words=words,lodash.wrap=function wrap(t,r){return rn(castFunction(r),t)},lodash.xor=Nr,lodash.xorBy=Dr,lodash.xorWith=Xr,lodash.zip=jr,lodash.zipObject=function zipObject(t,r){return baseZipObject(t||[],r||[],assignValue)},lodash.zipObjectDeep=function zipObjectDeep(t,r){return baseZipObject(t||[],r||[],baseSet)},lodash.zipWith=Yr,lodash.entries=kn,lodash.entriesIn=Rn,lodash.extend=_n,lodash.extendWith=bn,mixin(lodash,lodash),lodash.add=ti,lodash.attempt=Wn,lodash.camelCase=Bn,lodash.capitalize=capitalize,lodash.ceil=ei,lodash.clamp=function clamp(t,r,i){return i===a&&(i=r,r=a),i!==a&&(i=(i=toNumber(i))==i?i:0),r!==a&&(r=(r=toNumber(r))==r?r:0),baseClamp(toNumber(t),r,i)},lodash.clone=function clone(t){return baseClone(t,4)},lodash.cloneDeep=function cloneDeep(t){return baseClone(t,5)},lodash.cloneDeepWith=function cloneDeepWith(t,r){return baseClone(t,5,r="function"==typeof r?r:a)},lodash.cloneWith=function cloneWith(t,r){return baseClone(t,4,r="function"==typeof r?r:a)},lodash.conformsTo=function conformsTo(t,r){return null==r||baseConformsTo(t,r,keys(r))},lodash.deburr=deburr,lodash.defaultTo=function defaultTo(t,r){return null==t||t!=t?r:t},lodash.divide=ri,lodash.endsWith=function endsWith(t,r,i){t=toString(t),r=baseToString(r);var o=t.length,l=i=i===a?o:baseClamp(toInteger(i),0,o);return(i-=r.length)>=0&&t.slice(i,l)==r},lodash.eq=eq,lodash.escape=function escape(t){return(t=toString(t))&&rt.test(t)?t.replace(tt,Me):t},lodash.escapeRegExp=function escapeRegExp(t){return(t=toString(t))&&ct.test(t)?t.replace(ut,"\\$&"):t},lodash.every=function every(t,r,i){var o=un(t)?arrayEvery:baseEvery;return i&&isIterateeCall(t,r,i)&&(r=a),o(t,getIteratee(r,3))},lodash.find=Wr,lodash.findIndex=findIndex,lodash.findKey=function findKey(t,r){return baseFindKey(t,getIteratee(r,3),baseForOwn)},lodash.findLast=Zr,lodash.findLastIndex=findLastIndex,lodash.findLastKey=function findLastKey(t,r){return baseFindKey(t,getIteratee(r,3),baseForOwnRight)},lodash.floor=ni,lodash.forEach=forEach,lodash.forEachRight=forEachRight,lodash.forIn=function forIn(t,r){return null==t?t:lr(t,getIteratee(r,3),keysIn)},lodash.forInRight=function forInRight(t,r){return null==t?t:ur(t,getIteratee(r,3),keysIn)},lodash.forOwn=function forOwn(t,r){return t&&baseForOwn(t,getIteratee(r,3))},lodash.forOwnRight=function forOwnRight(t,r){return t&&baseForOwnRight(t,getIteratee(r,3))},lodash.get=get,lodash.gt=sn,lodash.gte=an,lodash.has=function has(t,r){return null!=t&&hasPath(t,r,baseHas)},lodash.hasIn=hasIn,lodash.head=head,lodash.identity=identity,lodash.includes=function includes(t,r,i,o){t=isArrayLike(t)?t:values(t),i=i&&!o?toInteger(i):0;var a=t.length;return i<0&&(i=De(a+i,0)),isString(t)?i<=a&&t.indexOf(r,i)>-1:!!a&&baseIndexOf(t,r,i)>-1},lodash.indexOf=function indexOf(t,r,i){var o=null==t?0:t.length;if(!o)return-1;var a=null==i?0:toInteger(i);return a<0&&(a=De(o+a,0)),baseIndexOf(t,r,a)},lodash.inRange=function inRange(t,r,i){return r=toFinite(r),i===a?(i=r,r=0):i=toFinite(i),function baseInRange(t,r,i){return t>=Xe(r,i)&&t<De(r,i)}(t=toNumber(t),r,i)},lodash.invoke=Tn,lodash.isArguments=ln,lodash.isArray=un,lodash.isArrayBuffer=cn,lodash.isArrayLike=isArrayLike,lodash.isArrayLikeObject=isArrayLikeObject,lodash.isBoolean=function isBoolean(t){return!0===t||!1===t||isObjectLike(t)&&baseGetTag(t)==C},lodash.isBuffer=hn,lodash.isDate=fn,lodash.isElement=function isElement(t){return isObjectLike(t)&&1===t.nodeType&&!isPlainObject(t)},lodash.isEmpty=function isEmpty(t){if(null==t)return!0;if(isArrayLike(t)&&(un(t)||"string"==typeof t||"function"==typeof t.splice||hn(t)||vn(t)||ln(t)))return!t.length;var r=mr(t);if(r==E||r==R)return!t.size;if(isPrototype(t))return!baseKeys(t).length;for(var i in t)if(Yt.call(t,i))return!1;return!0},lodash.isEqual=function isEqual(t,r){return baseIsEqual(t,r)},lodash.isEqualWith=function isEqualWith(t,r,i){var o=(i="function"==typeof i?i:a)?i(t,r):a;return o===a?baseIsEqual(t,r,a,i):!!o},lodash.isError=isError,lodash.isFinite=function isFinite(t){return"number"==typeof t&&Le(t)},lodash.isFunction=isFunction,lodash.isInteger=isInteger,lodash.isLength=isLength,lodash.isMap=pn,lodash.isMatch=function isMatch(t,r){return t===r||baseIsMatch(t,r,getMatchData(r))},lodash.isMatchWith=function isMatchWith(t,r,i){return i="function"==typeof i?i:a,baseIsMatch(t,r,getMatchData(r),i)},lodash.isNaN=function isNaN(t){return isNumber(t)&&t!=+t},lodash.isNative=function isNative(t){if(gr(t))throw new ft("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return baseIsNative(t)},lodash.isNil=function isNil(t){return null==t},lodash.isNull=function isNull(t){return null===t},lodash.isNumber=isNumber,lodash.isObject=isObject,lodash.isObjectLike=isObjectLike,lodash.isPlainObject=isPlainObject,lodash.isRegExp=dn,lodash.isSafeInteger=function isSafeInteger(t){return isInteger(t)&&t>=-9007199254740991&&t<=m},lodash.isSet=yn,lodash.isString=isString,lodash.isSymbol=isSymbol,lodash.isTypedArray=vn,lodash.isUndefined=function isUndefined(t){return t===a},lodash.isWeakMap=function isWeakMap(t){return isObjectLike(t)&&mr(t)==D},lodash.isWeakSet=function isWeakSet(t){return isObjectLike(t)&&"[object WeakSet]"==baseGetTag(t)},lodash.join=function join(t,r){return null==t?"":Be.call(t,r)},lodash.kebabCase=Nn,lodash.last=last,lodash.lastIndexOf=function lastIndexOf(t,r,i){var o=null==t?0:t.length;if(!o)return-1;var l=o;return i!==a&&(l=(l=toInteger(i))<0?De(o+l,0):Xe(l,o-1)),r==r?function strictLastIndexOf(t,r,i){for(var o=i+1;o--;)if(t[o]===r)return o;return o}(t,r,l):baseFindIndex(t,baseIsNaN,l,!0)},lodash.lowerCase=Dn,lodash.lowerFirst=Xn,lodash.lt=Pn,lodash.lte=mn,lodash.max=function max(t){return t&&t.length?baseExtremum(t,identity,baseGt):a},lodash.maxBy=function maxBy(t,r){return t&&t.length?baseExtremum(t,getIteratee(r,2),baseGt):a},lodash.mean=function mean(t){return baseMean(t,identity)},lodash.meanBy=function meanBy(t,r){return baseMean(t,getIteratee(r,2))},lodash.min=function min(t){return t&&t.length?baseExtremum(t,identity,baseLt):a},lodash.minBy=function minBy(t,r){return t&&t.length?baseExtremum(t,getIteratee(r,2),baseLt):a},lodash.stubArray=stubArray,lodash.stubFalse=stubFalse,lodash.stubObject=function stubObject(){return{}},lodash.stubString=function stubString(){return""},lodash.stubTrue=function stubTrue(){return!0},lodash.multiply=oi,lodash.nth=function nth(t,r){return t&&t.length?baseNth(t,toInteger(r)):a},lodash.noConflict=function noConflict(){return me._===this&&(me._=qt),this},lodash.noop=noop,lodash.now=Jr,lodash.pad=function pad(t,r,i){t=toString(t);var o=(r=toInteger(r))?stringSize(t):0;if(!r||o>=r)return t;var a=(r-o)/2;return createPadding(_e(a),i)+t+createPadding(ge(a),i)},lodash.padEnd=function padEnd(t,r,i){t=toString(t);var o=(r=toInteger(r))?stringSize(t):0;return r&&o<r?t+createPadding(r-o,i):t},lodash.padStart=function padStart(t,r,i){t=toString(t);var o=(r=toInteger(r))?stringSize(t):0;return r&&o<r?createPadding(r-o,i)+t:t},lodash.parseInt=function parseInt(t,r,i){return i||null==r?r=0:r&&(r=+r),Ye(toString(t).replace(ht,""),r||0)},lodash.random=function random(t,r,i){if(i&&"boolean"!=typeof i&&isIterateeCall(t,r,i)&&(r=i=a),i===a&&("boolean"==typeof r?(i=r,r=a):"boolean"==typeof t&&(i=t,t=a)),t===a&&r===a?(t=0,r=1):(t=toFinite(t),r===a?(r=t,t=0):r=toFinite(r)),t>r){var o=t;t=r,r=o}if(i||t%1||r%1){var l=Fe();return Xe(t+l*(r-t+de("1e-"+((l+"").length-1))),r)}return baseRandom(t,r)},lodash.reduce=function reduce(t,r,i){var o=un(t)?arrayReduce:baseReduce,a=arguments.length<3;return o(t,getIteratee(r,4),i,a,sr)},lodash.reduceRight=function reduceRight(t,r,i){var o=un(t)?arrayReduceRight:baseReduce,a=arguments.length<3;return o(t,getIteratee(r,4),i,a,ar)},lodash.repeat=function repeat(t,r,i){return r=(i?isIterateeCall(t,r,i):r===a)?1:toInteger(r),baseRepeat(toString(t),r)},lodash.replace=function replace(){var t=arguments,r=toString(t[0]);return t.length<3?r:r.replace(t[1],t[2])},lodash.result=function result(t,r,i){var o=-1,l=(r=castPath(r,t)).length;for(l||(l=1,t=a);++o<l;){var u=null==t?a:t[toKey(r[o])];u===a&&(o=l,u=i),t=isFunction(u)?u.call(t):u}return t},lodash.round=si,lodash.runInContext=runInContext,lodash.sample=function sample(t){return(un(t)?arraySample:baseSample)(t)},lodash.size=function size(t){if(null==t)return 0;if(isArrayLike(t))return isString(t)?stringSize(t):t.length;var r=mr(t);return r==E||r==R?t.size:baseKeys(t).length},lodash.snakeCase=jn,lodash.some=function some(t,r,i){var o=un(t)?arraySome:baseSome;return i&&isIterateeCall(t,r,i)&&(r=a),o(t,getIteratee(r,3))},lodash.sortedIndex=function sortedIndex(t,r){return baseSortedIndex(t,r)},lodash.sortedIndexBy=function sortedIndexBy(t,r,i){return baseSortedIndexBy(t,r,getIteratee(i,2))},lodash.sortedIndexOf=function sortedIndexOf(t,r){var i=null==t?0:t.length;if(i){var o=baseSortedIndex(t,r);if(o<i&&eq(t[o],r))return o}return-1},lodash.sortedLastIndex=function sortedLastIndex(t,r){return baseSortedIndex(t,r,!0)},lodash.sortedLastIndexBy=function sortedLastIndexBy(t,r,i){return baseSortedIndexBy(t,r,getIteratee(i,2),!0)},lodash.sortedLastIndexOf=function sortedLastIndexOf(t,r){if(null==t?0:t.length){var i=baseSortedIndex(t,r,!0)-1;if(eq(t[i],r))return i}return-1},lodash.startCase=Yn,lodash.startsWith=function startsWith(t,r,i){return t=toString(t),i=null==i?0:baseClamp(toInteger(i),0,t.length),r=baseToString(r),t.slice(i,i+r.length)==r},lodash.subtract=ai,lodash.sum=function sum(t){return t&&t.length?baseSum(t,identity):0},lodash.sumBy=function sumBy(t,r){return t&&t.length?baseSum(t,getIteratee(r,2)):0},lodash.template=function template(t,r,i){var o=lodash.templateSettings;i&&isIterateeCall(t,r,i)&&(r=a),t=toString(t),r=bn({},r,o,customDefaultsAssignIn);var l,u,c=bn({},r.imports,o.imports,customDefaultsAssignIn),h=keys(c),p=baseValues(c,h),d=0,y=r.interpolate||St,v="__p += '",P=Mt((r.escape||St).source+"|"+y.source+"|"+(y===ot?gt:St).source+"|"+(r.evaluate||St).source+"|$","g"),m="//# sourceURL="+(Yt.call(r,"sourceURL")?(r.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++ce+"]")+"\n";t.replace(P,(function(r,i,o,a,c,h){return o||(o=a),v+=t.slice(d,h).replace(Tt,escapeStringChar),i&&(l=!0,v+="' +\n__e("+i+") +\n'"),c&&(u=!0,v+="';\n"+c+";\n__p += '"),o&&(v+="' +\n((__t = ("+o+")) == null ? '' : __t) +\n'"),d=h+r.length,r})),v+="';\n";var g=Yt.call(r,"variable")&&r.variable;if(g){if(Pt.test(g))throw new ft("Invalid `variable` option passed into `_.template`")}else v="with (obj) {\n"+v+"\n}\n";v=(u?v.replace(J,""):v).replace(K,"$1").replace($,"$1;"),v="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(l?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+v+"return __p\n}";var _=Wn((function(){return Et(h,m+"return "+v).apply(a,p)}));if(_.source=v,isError(_))throw _;return _},lodash.times=function times(t,r){if((t=toInteger(t))<1||t>m)return[];var i=_,o=Xe(t,_);r=getIteratee(r),t-=_;for(var a=baseTimes(o,r);++i<t;)r(i);return a},lodash.toFinite=toFinite,lodash.toInteger=toInteger,lodash.toLength=toLength,lodash.toLower=function toLower(t){return toString(t).toLowerCase()},lodash.toNumber=toNumber,lodash.toSafeInteger=function toSafeInteger(t){return t?baseClamp(toInteger(t),-9007199254740991,m):0===t?t:0},lodash.toString=toString,lodash.toUpper=function toUpper(t){return toString(t).toUpperCase()},lodash.trim=function trim(t,r,i){if((t=toString(t))&&(i||r===a))return baseTrim(t);if(!t||!(r=baseToString(r)))return t;var o=stringToArray(t),l=stringToArray(r);return castSlice(o,charsStartIndex(o,l),charsEndIndex(o,l)+1).join("")},lodash.trimEnd=function trimEnd(t,r,i){if((t=toString(t))&&(i||r===a))return t.slice(0,trimmedEndIndex(t)+1);if(!t||!(r=baseToString(r)))return t;var o=stringToArray(t);return castSlice(o,0,charsEndIndex(o,stringToArray(r))+1).join("")},lodash.trimStart=function trimStart(t,r,i){if((t=toString(t))&&(i||r===a))return t.replace(ht,"");if(!t||!(r=baseToString(r)))return t;var o=stringToArray(t);return castSlice(o,charsStartIndex(o,stringToArray(r))).join("")},lodash.truncate=function truncate(t,r){var i=30,o="...";if(isObject(r)){var l="separator"in r?r.separator:l;i="length"in r?toInteger(r.length):i,o="omission"in r?baseToString(r.omission):o}var u=(t=toString(t)).length;if(hasUnicode(t)){var c=stringToArray(t);u=c.length}if(i>=u)return t;var h=i-stringSize(o);if(h<1)return o;var p=c?castSlice(c,0,h).join(""):t.slice(0,h);if(l===a)return p+o;if(c&&(h+=p.length-h),dn(l)){if(t.slice(h).search(l)){var d,y=p;for(l.global||(l=Mt(l.source,toString(_t.exec(l))+"g")),l.lastIndex=0;d=l.exec(y);)var v=d.index;p=p.slice(0,v===a?h:v)}}else if(t.indexOf(baseToString(l),h)!=h){var P=p.lastIndexOf(l);P>-1&&(p=p.slice(0,P))}return p+o},lodash.unescape=function unescape(t){return(t=toString(t))&&et.test(t)?t.replace(Q,ke):t},lodash.uniqueId=function uniqueId(t){var r=++Ft;return toString(t)+r},lodash.upperCase=Fn,lodash.upperFirst=zn,lodash.each=forEach,lodash.eachRight=forEachRight,lodash.first=head,mixin(lodash,(ii={},baseForOwn(lodash,(function(t,r){Yt.call(lodash.prototype,r)||(ii[r]=t)})),ii),{chain:!1}),lodash.VERSION="4.17.21",arrayEach(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){lodash[t].placeholder=lodash})),arrayEach(["drop","take"],(function(t,r){LazyWrapper.prototype[t]=function(i){i=i===a?1:De(toInteger(i),0);var o=this.__filtered__&&!r?new LazyWrapper(this):this.clone();return o.__filtered__?o.__takeCount__=Xe(i,o.__takeCount__):o.__views__.push({size:Xe(i,_),type:t+(o.__dir__<0?"Right":"")}),o},LazyWrapper.prototype[t+"Right"]=function(r){return this.reverse()[t](r).reverse()}})),arrayEach(["filter","map","takeWhile"],(function(t,r){var i=r+1,o=1==i||3==i;LazyWrapper.prototype[t]=function(t){var r=this.clone();return r.__iteratees__.push({iteratee:getIteratee(t,3),type:i}),r.__filtered__=r.__filtered__||o,r}})),arrayEach(["head","last"],(function(t,r){var i="take"+(r?"Right":"");LazyWrapper.prototype[t]=function(){return this[i](1).value()[0]}})),arrayEach(["initial","tail"],(function(t,r){var i="drop"+(r?"":"Right");LazyWrapper.prototype[t]=function(){return this.__filtered__?new LazyWrapper(this):this[i](1)}})),LazyWrapper.prototype.compact=function(){return this.filter(identity)},LazyWrapper.prototype.find=function(t){return this.filter(t).head()},LazyWrapper.prototype.findLast=function(t){return this.reverse().find(t)},LazyWrapper.prototype.invokeMap=baseRest((function(t,r){return"function"==typeof t?new LazyWrapper(this):this.map((function(i){return baseInvoke(i,t,r)}))})),LazyWrapper.prototype.reject=function(t){return this.filter(negate(getIteratee(t)))},LazyWrapper.prototype.slice=function(t,r){t=toInteger(t);var i=this;return i.__filtered__&&(t>0||r<0)?new LazyWrapper(i):(t<0?i=i.takeRight(-t):t&&(i=i.drop(t)),r!==a&&(i=(r=toInteger(r))<0?i.dropRight(-r):i.take(r-t)),i)},LazyWrapper.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},LazyWrapper.prototype.toArray=function(){return this.take(_)},baseForOwn(LazyWrapper.prototype,(function(t,r){var i=/^(?:filter|find|map|reject)|While$/.test(r),o=/^(?:head|last)$/.test(r),l=lodash[o?"take"+("last"==r?"Right":""):r],u=o||/^find/.test(r);l&&(lodash.prototype[r]=function(){var r=this.__wrapped__,c=o?[1]:arguments,h=r instanceof LazyWrapper,p=c[0],d=h||un(r),interceptor=function(t){var r=l.apply(lodash,arrayPush([t],c));return o&&y?r[0]:r};d&&i&&"function"==typeof p&&1!=p.length&&(h=d=!1);var y=this.__chain__,v=!!this.__actions__.length,P=u&&!y,m=h&&!v;if(!u&&d){r=m?r:new LazyWrapper(this);var g=t.apply(r,c);return g.__actions__.push({func:thru,args:[interceptor],thisArg:a}),new LodashWrapper(g,y)}return P&&m?t.apply(this,c):(g=this.thru(interceptor),P?o?g.value()[0]:g.value():g)})})),arrayEach(["pop","push","shift","sort","splice","unshift"],(function(t){var r=Bt[t],i=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",o=/^(?:pop|shift)$/.test(t);lodash.prototype[t]=function(){var t=arguments;if(o&&!this.__chain__){var a=this.value();return r.apply(un(a)?a:[],t)}return this[i]((function(i){return r.apply(un(i)?i:[],t)}))}})),baseForOwn(LazyWrapper.prototype,(function(t,r){var i=lodash[r];if(i){var o=i.name+"";Yt.call(Je,o)||(Je[o]=[]),Je[o].push({name:r,func:i})}})),Je[createHybrid(a,2).name]=[{name:"wrapper",func:a}],LazyWrapper.prototype.clone=function lazyClone(){var t=new LazyWrapper(this.__wrapped__);return t.__actions__=copyArray(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=copyArray(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=copyArray(this.__views__),t},LazyWrapper.prototype.reverse=function lazyReverse(){if(this.__filtered__){var t=new LazyWrapper(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},LazyWrapper.prototype.value=function lazyValue(){var t=this.__wrapped__.value(),r=this.__dir__,i=un(t),o=r<0,a=i?t.length:0,l=function getView(t,r,i){var o=-1,a=i.length;for(;++o<a;){var l=i[o],u=l.size;switch(l.type){case"drop":t+=u;break;case"dropRight":r-=u;break;case"take":r=Xe(r,t+u);break;case"takeRight":t=De(t,r-u)}}return{start:t,end:r}}(0,a,this.__views__),u=l.start,c=l.end,h=c-u,p=o?c:u-1,d=this.__iteratees__,y=d.length,v=0,P=Xe(h,this.__takeCount__);if(!i||!o&&a==h&&P==h)return baseWrapperValue(t,this.__actions__);var m=[];t:for(;h--&&v<P;){for(var g=-1,_=t[p+=r];++g<y;){var b=d[g],x=b.iteratee,I=b.type,C=x(_);if(2==I)_=C;else if(!C){if(1==I)continue t;break t}}m[v++]=_}return m},lodash.prototype.at=Fr,lodash.prototype.chain=function wrapperChain(){return chain(this)},lodash.prototype.commit=function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__)},lodash.prototype.next=function wrapperNext(){this.__values__===a&&(this.__values__=toArray(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?a:this.__values__[this.__index__++]}},lodash.prototype.plant=function wrapperPlant(t){for(var r,i=this;i instanceof baseLodash;){var o=wrapperClone(i);o.__index__=0,o.__values__=a,r?l.__wrapped__=o:r=o;var l=o;i=i.__wrapped__}return l.__wrapped__=t,r},lodash.prototype.reverse=function wrapperReverse(){var t=this.__wrapped__;if(t instanceof LazyWrapper){var r=t;return this.__actions__.length&&(r=new LazyWrapper(this)),(r=r.reverse()).__actions__.push({func:thru,args:[reverse],thisArg:a}),new LodashWrapper(r,this.__chain__)}return this.thru(reverse)},lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__)},lodash.prototype.first=lodash.prototype.head,re&&(lodash.prototype[re]=function wrapperToIterator(){return this}),lodash}();me._=Re,(o=function(){return Re}.call(r,i,r,t))===a||(t.exports=o)}.call(this)}},r={};function __webpack_require__(i){var o=r[i];if(void 0!==o)return o.exports;var a=r[i]={id:i,loaded:!1,exports:{}};return t[i].call(a.exports,a,a.exports,__webpack_require__),a.loaded=!0,a.exports}__webpack_require__.n=t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(r,{a:r}),r},__webpack_require__.d=(t,r)=>{for(var i in r)__webpack_require__.o(r,i)&&!__webpack_require__.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),__webpack_require__.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t=__webpack_require__(323);function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var r=function(){function Matrix(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;_classCallCheck(this,Matrix),this.a=t,this.b=r,this.c=i,this.d=o,this.tx=a,this.ty=l}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Matrix,[{key:"clone",value:function clone(){return new Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty)}},{key:"concat",value:function concat(t){return new Matrix(this.a*t.a+this.c*t.b,this.b*t.a+this.d*t.b,this.a*t.c+this.c*t.d,this.b*t.c+this.d*t.d,this.a*t.tx+this.c*t.ty+this.tx,this.b*t.tx+this.d*t.ty+this.ty)}},{key:"deltaTransformPoint",value:function deltaTransformPoint(r){return new t.Z(this.a*r.x+this.c*r.y,this.b*r.x+this.d*r.y)}},{key:"inverse",value:function inverse(){var t=this.a*this.d-this.b*this.c;return new Matrix(this.d/t,-this.b/t,-this.c/t,this.a/t,(this.c*this.ty-this.d*this.tx)/t,(this.b*this.tx-this.a*this.ty)/t)}},{key:"rotate",value:function rotate(t,r){return this.concat(Matrix.rotation(t,r))}},{key:"scale",value:function scale(t,r,i){return this.concat(Matrix.scale(t,r,i))}},{key:"translate",value:function translate(t,r){return this.concat(Matrix.translation(t,r))}},{key:"transformPoint",value:function transformPoint(r){return new t.Z(this.a*r.x+this.c*r.y+this.tx,this.b*r.x+this.d*r.y+this.ty)}}],[{key:"translation",value:function translation(t,r){return new Matrix(1,0,0,1,t,r)}},{key:"scale",value:function scale(t,r,i){void 0===r&&(r=t);var o=new Matrix(t,0,0,r);return i&&(o=Matrix.translation(i.x,i.y).concat(o).concat(Matrix.translation(-i.x,-i.y))),o}},{key:"rotation",value:function rotation(t,r){var i=new Matrix(Math.cos(t),Math.sin(t),-Math.sin(t),Math.cos(t));return r&&(i=Matrix.translation(r.x,r.y).concat(i).concat(Matrix.translation(-r.x,-r.y))),i}}]),Matrix}(),i=__webpack_require__(563),o=__webpack_require__(132),a=__webpack_require__(73);function ownKeys(t,r){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),i.push.apply(i,o)}return i}function _objectSpread(t){for(var r=1;r<arguments.length;r++){var i=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(i),!0).forEach((function(r){_defineProperty(t,r,i[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):ownKeys(Object(i)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(i,r))}))}return t}function Motion_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var l=function(){function Motion(r){!function Motion_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Motion),_defineProperty(this,"position",new t.Z),this.ctx=r}return function Motion_createClass(t,r,i){return r&&Motion_defineProperties(t.prototype,r),i&&Motion_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Motion,[{key:"reset",value:function reset(){this.currentUnit=void 0,this.currentToolDiameter=void 0,this.currentSpeed=void 0,this.currentFeed=void 0,this.currentAtc=void 0,this.position=new t.Z}},{key:"retract",value:function retract(){this.ctx.driver.send("M03 S090")}},{key:"plunge",value:function plunge(){this.ctx.driver.send("M03 S070")}},{key:"zero",value:function zero(t){this.ctx.driver.zero(t)}},{key:"rapid",value:function rapid(t){var r=this.postProcess(t);r&&(this.ctx.driver.rapid(t),this.position=r)}},{key:"linear",value:function linear(t){var r=this.postProcess(t);r&&(this.ctx.driver.linear(t),this.position=r)}},{key:"arcCW",value:function arcCW(t){return this.arc(t,!1)}},{key:"arcCCW",value:function arcCCW(t){return this.arc(t,!0)}},{key:"arc",value:function arc(r){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=this.postProcess(_objectSpread(_objectSpread({},r),{},{z:this.position.z||0})),l=this.position.x+(r.i||0),u=this.position.y+(r.j||0),arc=(0,o.mb)(new t.Z(l,u),this.position,new t.Z(r.x,r.y)),c=arc.radius*(arc.end-arc.start),h=c/(1/this.ctx.feed);(h=Math.round(1e6*h)/1e6)&&(r.f=Math.abs(h)),!i&&this.ctx.driver.arcCW?this.ctx.driver.arcCW(r):i&&this.ctx.driver.arcCCW?this.ctx.driver.arcCCW(r):this.interpolate("arc",[l,u,arc.radius,arc.start,arc.end,i],r.z||0),a&&(this.position=a)}},{key:"postProcess",value:function postProcess(r){this.ctx.driver.unit&&this.ctx.unit!=this.currentUnit&&(this.ctx.driver.unit(this.ctx.unit),this.currentUnit=this.ctx.unit),this.ctx.driver.meta&&this.ctx.toolDiameter!=this.currentToolDiameter&&(this.ctx.driver.meta({toolDiameter:this.ctx.toolDiameter}),this.currentToolDiameter=this.ctx.toolDiameter),this.ctx.driver.speed&&this.ctx.speed!=this.currentSpeed&&(this.ctx.driver.speed(this.ctx.speed),this.currentSpeed=this.ctx.speed),this.ctx.driver.feed&&this.ctx.feed!=this.currentFeed&&(this.ctx.driver.send("G93 (inverse time mode)"),this.currentFeed=this.ctx.feed);var i=new t.Z("x"in r?r.x:this.position.x,"y"in r?r.y:this.position.y,"z"in r?r.z:this.position.z,"a"in r?r.a:this.position.a),a=this.position,l=Math.sqrt(Math.pow(a.x-i.x,2)+Math.pow(a.y-i.y,2));if(!r.f){var u=l/(1/this.ctx.feed);(u=Math.round(1e6*u)/1e6)&&(r.f=Math.abs(u))}if((0,o.Bj)(this.position,i))return!1;for(var c in r){var h=c;"number"==typeof r[h]&&(r[h]=Math.round(1e5*r[h])/1e5)}return i}},{key:"interpolate",value:function interpolate(t,r,i){var o=new a.Z,l=o[t];"function"==typeof l&&l.apply(o,r);var u=0,c=o.getLength(),h=this.position.z;for(var p=o.getPoints(40),d=0,y=p.length;d<y;++d){var v=p[d],P=v.x-this.position.x,m=v.y-this.position.y;u+=Math.sqrt(P*P+m*m),this.linear({x:v.x,y:v.y,z:h+u/c*(i-h)})}}},{key:"followPath",value:function followPath(t,r){var i,l=this;if(!t)return!1;if("subPaths"in t)t.subPaths.forEach((function(t){l.followPath(t,r)}));else for(var u=this.position.z,c=t.getLength(),h=0,p=this,d=this.ctx,y=t.isClosed()&&0!=d.ramping,v=(_defineProperty(i={},"MOVE_TO",(function(){for(var t=arguments.length,i=new Array(t),a=0;a<t;a++)i[a]=arguments[a];var c=i[0],h=i[1],d=(0,o.S3)(c,l.position.x)&&(0,o.S3)(h,l.position.y);y&&d||(d||p.retract(),p.rapid({x:c,y:h}),d||p.plunge(),y||p.linear({z:r}),u=p.position.z)})),_defineProperty(i,"LINE_TO",(function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var o=r[0],a=r[1];p.linear({x:o,y:a,z:helix()})})),_defineProperty(i,"ELLIPSE",(function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var a=r[0],l=r[1],u=r[2],c=r[3],h=r[4],d=r[5],y=r[6];if((0,o.S3)(u,c)){var v=(0,o.CS)(a,l,h,d,u),P={x:v.end.x,y:v.end.y,i:a-v.start.x,j:l-v.start.y,z:helix()};p.arc(P,y)}else interpolate("ellipse",r)})),_defineProperty(i,"BEZIER_CURVE_TO",(function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];interpolate("bezierCurveTo",r)})),_defineProperty(i,"QUADRATIC_CURVE_TO",(function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];interpolate("quadraticCurveTo",r)})),i),P=0,m=t.actions.length;P<m;++P){var g=t.actions[P];if(0!=P){var _=this.position.x,b=this.position.y;h+=t.getActionLength(_,b,P)}v[g.type].apply(this,g.args)}function helix(){return y?0===c?0:u+(r-u)*(h/c):r}function interpolate(t,r){var i=new a.Z;i.moveTo(p.position.x,p.position.y);var o=i[t];"function"==typeof o&&o.apply(i,r);for(var l=i.getPoints(40),u=0,c=l.length;u<c;++u){var h=l[u];p.linear({x:h.x,y:h.y,z:helix()})}}}}]),Motion}();function Driver_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var u=function(){function Driver(t){!function Driver_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Driver),this.stream=t||{write:function write(t){return console.log(t)},reset:function reset(){}}}return function Driver_createClass(t,r,i){return r&&Driver_defineProperties(t.prototype,r),i&&Driver_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Driver,[{key:"reset",value:function reset(){this.stream.reset()}},{key:"send",value:function send(){}},{key:"init",value:function init(){}},{key:"unit",value:function unit(t){}},{key:"speed",value:function speed(t){}},{key:"feed",value:function feed(t){}},{key:"coolant",value:function coolant(t){}},{key:"zero",value:function zero(t){}},{key:"atc",value:function atc(t){}},{key:"rapid",value:function rapid(t){}},{key:"linear",value:function linear(t){}},{key:"arcCW",value:function arcCW(t){}},{key:"arcCCW",value:function arcCCW(t){}},{key:"comment",value:function comment(t){}},{key:"meta",value:function meta(t){}}]),Driver}();function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function NullDriver_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function NullDriver_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(NullDriver,t);var r=_createSuper(NullDriver);function NullDriver(){return NullDriver_classCallCheck(this,NullDriver),r.apply(this,arguments)}return function NullDriver_createClass(t,r,i){return r&&NullDriver_defineProperties(t.prototype,r),i&&NullDriver_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(NullDriver)}(u);function GCanvas_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function GCanvas_defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var h=function(){function GCanvas(t){!function GCanvas_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,GCanvas),GCanvas_defineProperty(this,"precision",20),GCanvas_defineProperty(this,"align","center"),GCanvas_defineProperty(this,"ramping",!0),GCanvas_defineProperty(this,"depth",0),GCanvas_defineProperty(this,"depthOfCut",0),GCanvas_defineProperty(this,"retract",0),GCanvas_defineProperty(this,"speed",500),GCanvas_defineProperty(this,"feed",1e3),GCanvas_defineProperty(this,"act",0),GCanvas_defineProperty(this,"unit","mm"),GCanvas_defineProperty(this,"top",0),GCanvas_defineProperty(this,"toolDiameter",.15),GCanvas_defineProperty(this,"matrix",new r),GCanvas_defineProperty(this,"subPaths",[]),GCanvas_defineProperty(this,"filters",[]),GCanvas_defineProperty(this,"stack",[]),GCanvas_defineProperty(this,"_strokeStyle","#000000"),GCanvas_defineProperty(this,"_fillStyle","#000000"),GCanvas_defineProperty(this,"_font","7pt Helvetica"),GCanvas_defineProperty(this,"_background","#ffffff"),this.driver=t.driver||new c,this.motion=new l(this),this.canvasWidth=t.width,this.canvasHeight=t.height,this.virtualScale=t.virtualScale||1,t.canvas&&(this.canvasElement=t.canvas,this.ctx=this.canvasElement.getContext("2d")),t.output&&(this.outputElement=t.output),t.background&&(this._background=t.background),this.reset()}return function GCanvas_createClass(t,r,i){return r&&GCanvas_defineProperties(t.prototype,r),i&&GCanvas_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(GCanvas,[{key:"reset",value:function reset(){console.clear(),this.driver.reset(),this.motion.reset(),this.path=void 0,this.clipRegion=void 0,this.subPaths=[],this.filters=[],this.stack=[],this.matrix=new r,this.ctx&&(this.ctx.resetTransform(),this.ctx.scale(window.devicePixelRatio,window.devicePixelRatio),this.ctx.scale(this.virtualScale,this.virtualScale),this.ctx.fillStyle=this._background,this.ctx.fillRect(0,0,this.canvasWidth,this.canvasHeight),this.ctx.lineWidth=1/this.virtualScale)}},{key:"strokeStyle",get:function get(){return this._strokeStyle},set:function set(t){this._strokeStyle=t,this.ctx&&(this.ctx.strokeStyle=t)}},{key:"fillStyle",get:function get(){return this._fillStyle},set:function set(t){this._fillStyle=t,this.ctx&&(this.ctx.fillStyle=t)}},{key:"font",get:function get(){return this._fillStyle},set:function set(t){this._font=t,this.ctx&&(this.ctx.font=t)}},{key:"save",value:function save(){this.stack.push({matrix:this.matrix,font:this.font,depth:this.depth,depthOfCut:this.depthOfCut,toolDiameter:this.toolDiameter,align:this.align,top:this.top,strokeStyle:this.strokeStyle,fillStyle:this.fillStyle,filters:this.filters.slice()})}},{key:"restore",value:function restore(){var t=this,r=this.stack.pop();Object.keys(r).forEach((function(i){t[i]=r[i]}))}},{key:"beginPath",value:function beginPath(){var t;this.path=new i.Z,null===(t=this.ctx)||void 0===t||t.beginPath()}},{key:"transform",value:function transform(t,i,o,a,l,u){var c;this.matrix=this.matrix.concat(new r(t,i,o,a,l,u)),null===(c=this.ctx)||void 0===c||c.transform(t,i,o,a,l,u)}},{key:"setTransform",value:function setTransform(t,i,o,a,l,u){var c;this.matrix=new r(t,i,o,a,l,u),null===(c=this.ctx)||void 0===c||c.setTransform(t,i,o,a,l,u)}},{key:"resetTransform",value:function resetTransform(){var t;this.matrix=new r,null===(t=this.ctx)||void 0===t||t.resetTransform()}},{key:"rotate",value:function rotate(t){var r;this.matrix=this.matrix.rotate(t),null===(r=this.ctx)||void 0===r||r.rotate(t)}},{key:"translate",value:function translate(t,r){var i;this.matrix=this.matrix.translate(t,r),null===(i=this.ctx)||void 0===i||i.translate(t,r)}},{key:"scale",value:function scale(t,r){var i;this.matrix=this.matrix.scale(t,r),null===(i=this.ctx)||void 0===i||i.scale(t,r)}},{key:"transformPoint",value:function transformPoint(r){if(r instanceof Array){var i=this.matrix.transformPoint(new t.Z(r[0],r[1]));return new t.Z(i.x,i.y)}if(void 0!==r.x){var o=new t.Z(r.x,r.y);return o=this.matrix.transformPoint(o),r.x=o.x,r.y=o.y,o}}},{key:"ensurePath",value:function ensurePath(t,r){this.path&&0===this.path.subPaths.length&&this.path.moveTo(t,r)}},{key:"moveTo",value:function moveTo(t,r){var i,o=this.transformPoint([t,r]),a=o.x,l=o.y;this.path.moveTo(a,l),null===(i=this.ctx)||void 0===i||i.moveTo(a,l)}},{key:"lineTo",value:function lineTo(t,r){var i,o=this.transformPoint([t,r]),a=o.x,l=o.y;this.ensurePath(a,l),this.path.lineTo(a,l),null===(i=this.ctx)||void 0===i||i.lineTo(a,l)}},{key:"arcTo",value:function arcTo(r,i,a,l,u){var c,h=this.transformPoint([r,i]),p=h.x,d=h.y,y=this.transformPoint([a,l]),v=y.x,P=y.y;this.ensurePath(p,d);var m=this.path.lastPoint()||new t.Z,g=new t.Z(p,d),_=new t.Z(v,P),b=m.subtract(g),x=_.subtract(g),I=b.x*x.y-b.y*x.x;if(Math.abs(I)<1e-10)this.lineTo(p,d);else{var C=b.magnitude(),O=x.magnitude(),w=(Math.PI-Math.abs(Math.asin(I/(C*O))))/2,S=u*Math.tan(w),T=S/C,E=new t.Z(g.x+b.x*T,g.y+b.y*T);T=S/O;var L=new t.Z(g.x+x.x*T,g.y+x.y*T),A=new t.Z((E.x+L.x)/2,(E.y+L.y)/2).subtract(g),M=A.magnitude(),k=Math.sqrt(u*u+S*S),R=new t.Z;T=k/M,R.x=g.x+A.x*T,R.y=g.y+A.y*T;var B=(0,o.mb)(R,E,L);this.path.lineTo(E.x,E.y),this.path.arc(R.x,R.y,B.radius,B.start,B.end,I>0),null===(c=this.ctx)||void 0===c||c.arcTo(p,d,v,P,u)}}},{key:"arc",value:function arc(){for(var r,i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];var u=a[0],c=a[1],h=a[2],p=a[3],d=a[4],y=a[5];if(p-d!=0){d-p==2*-Math.PI&&(d=2*Math.PI);var v=new t.Z(u,c),P=(0,o.CS)(u,c,p,d,h);this.transformPoint(v),this.transformPoint(P.start),this.transformPoint(P.end);var m=(0,o.mb)(v,P.start,P.end);if(!this.path)throw"beginPath not called yet";this.path.arc(v.x,v.y,m.radius,m.start,m.end,y),null===(r=this.ctx)||void 0===r||r.arc(u,c,h,p,d,y)}}},{key:"bezierCurveTo",value:function bezierCurveTo(){var t,r=this.transformPoint([arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1]]),i=r.x,o=r.y,a=this.transformPoint([arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3]]),l=a.x,u=a.y,c=this.transformPoint([arguments.length<=4?void 0:arguments[4],arguments.length<=5?void 0:arguments[5]]),h=c.x,p=c.y;this.path.bezierCurveTo(i,o,l,u,h,p),null===(t=this.ctx)||void 0===t||t.bezierCurveTo(i,o,l,u,h,p)}},{key:"quadraticCurveTo",value:function quadraticCurveTo(){var t,r=this.transformPoint([arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1]]),i=r.x,o=r.y,a=this.transformPoint([arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3]]),l=a.x,u=a.y;this.path.quadraticCurveTo(i,o,l,u),null===(t=this.ctx)||void 0===t||t.quadraticCurveTo(i,o,l,u)}},{key:"clip",value:function clip(){var t;this.clipRegion=this.path,null===(t=this.ctx)||void 0===t||t.clip()}},{key:"rect",value:function rect(t,r,i,o){this.moveTo(t,r),this.lineTo(t+i,r),this.lineTo(t+i,r+o),this.lineTo(t,r+o),this.lineTo(t,r)}},{key:"strokeRect",value:function strokeRect(t,r,i,o){this.beginPath(),this.rect(t,r,i,o),this.stroke(),this.closePath()}},{key:"fillRect",value:function fillRect(t,r,i,o){this.beginPath(),this.rect(t,r,i,o),this.fill(),this.closePath()}},{key:"circle",value:function circle(t,r,i){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];this.arc(t,r,i,0,2*Math.PI,o)}},{key:"strokeCircle",value:function strokeCircle(t,r,i){this.beginPath(),this.circle(t,r,i),this.fill(),this.closePath()}},{key:"fillCircle",value:function fillCircle(t,r,i){this.beginPath(),this.circle(t,r,i),this.fill(),this.closePath()}},{key:"clone",value:function clone(){}},{key:"measureText",value:function measureText(t){return{top:0,left:0,right:0,bottom:0}}},{key:"isOpaque",value:function isOpaque(t){return"transparent"!=t&&("none"!=t&&("string"!=typeof t||!t.match(/rgba\((?:.*,){3}[0\.]*\)/)))}},{key:"stroke",value:function stroke(){var t,r=this,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.align;arguments.length>1&&void 0!==arguments[1]||this.depth;if(this.isOpaque(this.strokeStyle)){this.save();var o=0;"outer"===i&&(o=this.toolDiameter/2),"inner"===i&&(o=-this.toolDiameter/2);var a=this.path;"center"!=i&&(a=(a=a.simplify("evenodd",this.precision)).offset(o)||a),a.subPaths&&a.subPaths.forEach((function(t){"inner"==i&&(t=t.reverse()),r.layer(t,(function(i){r.motion.followPath(t,i)}))})),this.restore(),null===(t=this.ctx)||void 0===t||t.stroke()}}},{key:"fill",value:function fill(t){var r,i=this;if(this.isOpaque(this.fillStyle)){if(this.save(),!this.toolDiameter)throw"You must set context.toolDiameter to use fill()";var o=this.path;(o=(o=(o=o.simplify(t,this.precision)).clip(this.clipRegion,0,this.precision)).fillPath(this.toolDiameter,this.precision)).subPaths&&o.subPaths.forEach((function(t){i.layer(t,(function(r){i.motion.followPath(t,r)}))}),this),this.restore(),null===(r=this.ctx)||void 0===r||r.fill()}}},{key:"clearRect",value:function clearRect(t,r,i,o){var a;null===(a=this.ctx)||void 0===a||a.clearRect(t,r,i,o)}},{key:"closePath",value:function closePath(){var t;this.path.close(),null===(t=this.ctx)||void 0===t||t.closePath()}},{key:"layer",value:function layer(t,r){var i=this.depthOfCut||this.depth;if(0!==i){var o=this.depth<0;o&&i>0&&(i=-i);for(var a=Math.ceil(Math.abs(this.depth/i)),l=-this.top;a--;)l-=i,l=o?Math.max(l,this.top+this.depth):Math.max(l,-this.top-this.depth),r.call(this,l);this.ramping&&t.isClosed()&&r.call(this,l)}else r.call(this,-this.top)}}]),GCanvas}();function GCodeDriver_typeof(t){return GCodeDriver_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},GCodeDriver_typeof(t)}function GCodeDriver_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function GCodeDriver_setPrototypeOf(t,r){return GCodeDriver_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},GCodeDriver_setPrototypeOf(t,r)}function GCodeDriver_createSuper(t){var r=function GCodeDriver_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=GCodeDriver_getPrototypeOf(t);if(r){var a=GCodeDriver_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return GCodeDriver_possibleConstructorReturn(this,i)}}function GCodeDriver_possibleConstructorReturn(t,r){if(r&&("object"===GCodeDriver_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function GCodeDriver_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function GCodeDriver_getPrototypeOf(t){return GCodeDriver_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},GCodeDriver_getPrototypeOf(t)}var p=function(t){!function GCodeDriver_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&GCodeDriver_setPrototypeOf(t,r)}(GCode,t);var r=GCodeDriver_createSuper(GCode);function GCode(t){var i;return function GCodeDriver_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,GCode),(i=r.call(this,t)).stream=t||{write:function write(t){return console.log(t)},reset:function reset(){}},i}return function GCodeDriver_createClass(t,r,i){return r&&GCodeDriver_defineProperties(t.prototype,r),i&&GCodeDriver_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(GCode,[{key:"reset",value:function reset(){this.stream.reset(),this.init()}},{key:"send",value:function send(t,r){var i="".concat(t);r&&"xyzabcijkft".split("").forEach((function(t){void 0===r[t]||null===r[t]||isNaN(r[t])||(i+=" ".concat(t.toUpperCase()).concat(r[t]))}));this.stream.write(i)}},{key:"init",value:function init(){this.send("G17 (select the xy plane)"),this.send("M3 S0 (activate servo)")}},{key:"unit",value:function unit(t){this.send({inch:"G20",mm:"G21"}[t]+" (select ".concat(t," unit)"))}},{key:"speed",value:function speed(t){this.send("S".concat(t," (set speed to ").concat(t,")"))}},{key:"feed",value:function feed(t){this.send("F"+t)}},{key:"coolant",value:function coolant(t){"mist"===t?this.send("M07"):t?this.send("M08"):this.send("M09")}},{key:"zero",value:function zero(t){this.send("G28.3",t)}},{key:"atc",value:function atc(t){this.send("M6",{t})}},{key:"rapid",value:function rapid(t){this.send("G0",t)}},{key:"linear",value:function linear(t){this.send("G1",t)}},{key:"arcCW",value:function arcCW(t){this.send("G2",t)}},{key:"arcCCW",value:function arcCCW(t){this.send("G3",t)}},{key:"comment",value:function comment(t){this.send("(".concat(t,")"))}},{key:"meta",value:function meta(t){var r="(";for(var i in t)r+="".concat(i,"=").concat(t[i]);r+=")",this.send(r)}}]),GCode}(u);const d=[__webpack_require__(899).Z,__webpack_require__(715).Z,__webpack_require__(798).Z,__webpack_require__(613).Z,__webpack_require__(918).Z,__webpack_require__(511).Z,__webpack_require__(166).Z,__webpack_require__(703).Z,__webpack_require__(139).Z,__webpack_require__(97).Z,__webpack_require__(165).Z,__webpack_require__(52).Z,__webpack_require__(404).Z];var y=function loadValue(t,r){var i=localStorage.getItem(t);return null===i?void 0!==r?(v(t,r),r):null:JSON.parse(i)},v=function saveValue(t,r){var i=JSON.stringify(r);return localStorage.setItem(t,i),r},P=__webpack_require__(486);function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function saveSlots_ownKeys(t,r){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),i.push.apply(i,o)}return i}function saveSlots_objectSpread(t){for(var r=1;r<arguments.length;r++){var i=null!=arguments[r]?arguments[r]:{};r%2?saveSlots_ownKeys(Object(i),!0).forEach((function(r){saveSlots_defineProperty(t,r,i[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):saveSlots_ownKeys(Object(i)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(i,r))}))}return t}function saveSlots_defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var m,g=document.getElementById("save-slots"),_=function renderSketchSaveSlots(t,r){g.innerHTML="",y(t.constructor.name,[]).forEach((function(i,o){var a=document.createElement("button");a.type="button",a.innerText="".concat(o+1),a.addEventListener("click",(function(){null==r||r(),t.reset(),console.log("Loading:",i),Object.keys(i).forEach((function(r){t.vs[r].setValue(i[r],!0)})),t.initDraw()})),g.appendChild(a)}))},b=__webpack_require__(561),x=document.getElementById("slider-area"),I={},C=140,O=100,w=document.createElement("canvas"),S=document.getElementById("canvas-area"),T=document.getElementById("sketch-buttons-area"),E=document.getElementById("save-button"),L=document.getElementById("reset"),A=document.getElementById("randomize"),M=document.getElementById("gcode"),k=y("sketchIndex",0),R=0,B=0,N=(0,P.throttle)((function _setGCodeHTML(t){return M.innerHTML=t}),1e3),D="",X=function setGCode(t){N(D=t)},j=function initSketch(t){console.clear(),console.log("Loading new sketch",t.name),B=0,R&&(window.cancelAnimationFrame(R),R=0),X(t.generateGCode?"":"(GCode disabled for this sketch)");var r=t.generateGCode?new p({reset:function reset(){X("")},write:function write(t){!function appendGCode(t){N(D+=t+"\n")}(t)}}):void 0,i=new h({canvas:w,driver:r,width:C,height:O,virtualScale:8,background:"#fff"});(m=new t({ctx:i,width:C,height:O})).init(),m.initDraw(),function renderSketchSliders(t,r){I={},x.innerHTML="",Object.keys(t.vs).forEach((function(i){var o=t.vs[i],a=document.createElement("input");a.type="range",a.min=String(o.min),a.max=String(o.max),a.step=String(o.step),a.value=String(o.value),a.setAttribute("data-slider",i);var l=document.createElement("label"),u=document.createElement("span"),c=document.createElement("small"),h=function handleUpdate(o){var l=void 0===o?Number(a.value):o;c.innerText=(0,b.iH)(l,6),t.vs[i].value=l,t.reset(),t.initDraw(),null==r||r()};a.addEventListener("input",(function(t){return h()})),a.addEventListener("change",(function(t){return h()})),c.addEventListener("click",(function(){var t=window.prompt("".concat(i,": "),String(a.value));if(null!==t){var r=parseFloat(t);isNaN(r)||h(r)}})),c.innerText=(0,b.iH)(Number(a.value)),u.innerText=i,u.appendChild(c),l.appendChild(u),l.appendChild(a),x.appendChild(l),o.inputElem=a,I[i]={slider:a,labelSpan:u,valueSpan:c}}))}(m,(function(){B=0})),_(m,(function(){B=0})),Y()},Y=function animate(){for(var t=0;t<100;t++)B++,m.draw(B);R=window.requestAnimationFrame(animate)};window.addEventListener("load",(function init(){w.width=1120*window.devicePixelRatio,w.height=800*window.devicePixelRatio,w.style.width="".concat(1120,"px"),w.style.height="".concat(800,"px"),S?S.appendChild(w):document.body.appendChild(w),d.forEach((function(t,r){var i=document.createElement("button");i.type="button",i.innerText="".concat(r+1," ").concat(t.name),k===r&&i.classList.add("active"),i.addEventListener("click",(function(){for(var o=T.getElementsByTagName("button"),a=0;a<o.length;a++)o.item(a).classList.remove("active");i.classList.add("active"),k=v("sketchIndex",r),j(t)})),T.appendChild(i)})),j(d[k]),L.addEventListener("click",(function(){m&&(B=0,m.reset(),m.initDraw())})),A.addEventListener("click",(function(){m&&(B=0,Object.keys(m.vs).forEach((function(t){m.vs[t].randomize()})),function updateSliderValues(t){Object.keys(I).forEach((function(r){var i=I[r],o=i.slider,a=i.valueSpan;o.value=String(t.vs[r].value),a.innerText=(0,b.iH)(t.vs[r].value)}))}(m),m.reset(),m.initDraw())})),E.addEventListener("click",(function(){m&&function saveNewPreset(t){var r=Object.keys(t.vs).reduce((function(r,i){return saveSlots_objectSpread(saveSlots_objectSpread({},r),{},saveSlots_defineProperty({},i,t.vs[i].value))}),{}),i=t.constructor.name,o=y(i,[]);v(i,[].concat(_toConsumableArray(o),[r])),_(t)}(m)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RyxHQUNqQixJQUFJQSxFQUFLLEVBQUcsRUFBRyxHQUNmLElBQUlBLEdBQU0sRUFBRyxFQUFHLEdBQ2hCLElBQUlBLEVBQUssRUFBRyxHQUFJLEdBQ2hCLElBQUlBLEdBQU0sRUFBRyxHQUFJLEdBQ2pCLElBQUlBLEVBQUssRUFBRyxFQUFHLEdBQ2YsSUFBSUEsRUFBSyxHQUFJLEVBQUcsR0FDaEIsSUFBSUEsRUFBSyxFQUFHLEdBQUksR0FDaEIsSUFBSUEsRUFBSyxHQUFJLEdBQUksSUFHYmp1QyxFQUFJLENBQ1IsSUFBSyxJQUFLLElBQUssR0FBSSxHQUFJLEdBQUksSUFBSyxHQUFJLElBQUssR0FBSSxHQUFJLEdBQUksSUFBSyxJQUFLLEVBQUcsSUFBSyxJQUFLLEdBQUksSUFBSyxHQUFJLEdBQUksSUFBSyxFQUFHLEdBQUksR0FBSSxJQUFLLEdBQ2xILEdBQUksR0FBSSxJQUFLLEVBQUcsSUFBSyxJQUFLLElBQUssSUFBSyxHQUFJLEVBQUcsR0FBSSxJQUFLLEdBQUksR0FBSSxJQUFLLElBQUssSUFBSyxJQUFLLEdBQUksR0FBSSxHQUFJLEdBQUksSUFBSyxHQUFJLEdBQUksSUFBSyxJQUNsSCxHQUFJLEdBQUksSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLEdBQUksSUFBSyxHQUFJLElBQUssSUFBSyxHQUFJLEdBQUksSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxJQUM5RyxJQUFLLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEdBQUksR0FBSSxHQUFJLEdBQUksSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksR0FBSSxHQUFJLEdBQUksSUFBSyxFQUFHLElBQUssR0FBSSxHQUFJLElBQy9HLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxHQUFJLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEVBQUcsR0FBSSxHQUFJLElBQ2hILElBQUssSUFBSyxJ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QUssRUFBUSxJQUNuQyxFQUFRLEtBQU0sRUFBUSxLQUN0QixFQUFRLEtBQU0sRUFBUSxLQUN0QixFQUFRLEtBRVIsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQ3pDLEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDeEQsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN2RSxFQUFVLElBQU0sRUFBVSxJQUMxQixFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUFLLEVBQVUsSUFDdkUsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFVLElBQUssRUFBVSxJQUN4RCxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFBSyxFQUFVLElBQ3hELEVBQVUsSUFBTSxFQUFVLElBQUssRUFBVSxJQUN6QyxFQUFVLElBQU0sRUFBVSxJQUFLLEVBQVUsSUFDekMsRUFBVSxJQUFNLEVBQVUsSUFBSyxFQUFV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SzVYLFVES2pEZzlDLENBQW1CMUQsR0FDbkJBLEVBQWNuMkUsUUFDZG0yRSxFQUFjdDJFLGVBRWhCeTNFLEVBQVdSLGlCQUFpQixTQUFTLFdBQzlCWCxHRHhFb0IsU0FBaEIyRCxjQUFpQnZELEdBQzVCLElBQU13RCxFQUFXaGtFLE9BQU8yaUMsS0FBSzY5QixFQUFPdDZDLElBQUlueUIsUUFDdEMsU0FBQ2t3RSxFQUFLdmxDLEdBQU4sOEJBQUMsMEJBQW1CdWxDLEdBQXBCLCtCQUEwQnZsQyxFQUFNOGhDLEVBQU90NkMsR0FBR3dZLEdBQUs1WCxVQUMvQyxJQUVJbzlDLEVBQWExRCxFQUFPMTFCLFlBQVl6a0IsS0FDaEM4OUMsRUFBaUJ6RSxFQUFVd0UsRUFBWSxJQUM3Q25FLEVBQVVtRSxFQUFELDZCQUFpQkMsR0FBakIsQ0FBaUNILEtBQzFDekQsRUFBc0JDLEdDaUVwQnVELENBQWMzRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9QYXRoLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9Qb2ludC50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvU2tldGNoLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9TdWJQYXRoLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9jbGlwcGVyX3VubWluaWZpZWQuanMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3NrZXRjaGVzLzAxX0luaXRpYWxTa2V0Y2gudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3NrZXRjaGVzLzAyX0dDb2RlVGVzdC50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMDNfQXJjcy50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMDRfQmV6aWVyU2NyaWJibGVzLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy8wNV9TcGlyYWxpbmcudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3NrZXRjaGVzLzA2X1NwaXJhbGluZ1Byb3BvcnRpb25hbC50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMDdfQ29uY2VudHJpY0NpcmNsZXMudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3NrZXRjaGVzLzA4X0J1YmJsZXNJbkNpcmNsZS50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMDlfR3JpZFdhdmVzLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy8xMF9QZXJsaW5HcmlkLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy8xMV9QZXJsaW5MaW5lcy50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMTJfVHJlZS50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvMTNfTW9uZGF5TWF6ZS50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvc2tldGNoZXMvdG9vbHMvT3NjLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy90b29scy9SYW5nZS50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvdXRpbHMvbm9pc2UudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3V0aWxzL251bWJlclV0aWxzLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy91dGlscy9wYXRoVXRpbHMudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3V0aWxzL3JhbmRvbS50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2xvZGFzaC5qcyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2NhbnZhcy1nY29kZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL01hdHJpeC50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvTW90aW9uLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9kcml2ZXJzL0RyaXZlci50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvZHJpdmVycy9OdWxsRHJpdmVyLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9HQ2FudmFzLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9kcml2ZXJzL0dDb2RlRHJpdmVyLnRzIiwid2VicGFjazovL2NhbnZhcy1nY29kZS8uL3NyYy9za2V0Y2hlcy9pbmRleC50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvdXRpbHMvbG9jYWxTdG9yYWdlVXRpbHMudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3NhdmVTbG90cy50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2NvZGUvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdjb2RlLy4vc3JjL3NsaWRlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN1YlBhdGgsIHtcbiAgQWN0aW9uLFxuICBBcmNBY3Rpb24sXG4gIEJlemllckN1cnZlVG9BY3Rpb24sXG4gIEVsbGlwc2VBY3Rpb24sXG4gIExpbmVUb0FjdGlvbixcbiAgUXVhZHJhdGljQ3VydmVUb0FjdGlvbixcbn0gZnJvbSAnLi9TdWJQYXRoJ1xuaW1wb3J0IHsgYXJjVG9Qb2ludHMsIHNhbWVQb3MgfSBmcm9tICcuL3V0aWxzL3BhdGhVdGlscydcblxuaW1wb3J0ICogYXMgQ2xpcHBlckxpYiBmcm9tICcuL2NsaXBwZXJfdW5taW5pZmllZCdcbmltcG9ydCBQb2ludCBmcm9tICcuL1BvaW50J1xuXG5leHBvcnQgdHlwZSBCb3VuZHMgPSB7XG4gIGxlZnQ6IG51bWJlclxuICB0b3A6IG51bWJlclxuICByaWdodDogbnVtYmVyXG4gIGJvdHRvbTogbnVtYmVyXG59XG5cbmV4cG9ydCB0eXBlIFdpbmRpbmdSdWxlID0gJ2V2ZW5vZGQnIHwgJ25vbnplcm8nIHwgJ3Bvc2l0aXZlJyB8ICduZWdhdGl2ZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF0aCB7XG4gIHB1YmxpYyBzdWJQYXRoczogU3ViUGF0aFtdID0gW11cbiAgc3RhdGljIGFjdGlvbnMgPSBTdWJQYXRoLmFjdGlvbnNcblxuICBwdWJsaWMgY3VycmVudDogU3ViUGF0aFxuXG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICBjb25zdCBjb3B5ID0gbmV3IFBhdGgoKVxuICAgIGNvcHkuc3ViUGF0aHMgPSB0aGlzLnN1YlBhdGhzLnNsaWNlKDApXG4gICAgcmV0dXJuIGNvcHlcbiAgfVxuXG4gIHB1YmxpYyBtb3ZlVG8oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICBjb25zdCBzdWJQYXRoID0gbmV3IFN1YlBhdGgoKVxuICAgIHN1YlBhdGgubW92ZVRvKHgsIHkpXG4gICAgdGhpcy5zdWJQYXRocy5wdXNoKHN1YlBhdGgpXG4gICAgdGhpcy5jdXJyZW50ID0gc3ViUGF0aFxuICB9XG5cbiAgcHJpdmF0ZSBlbnN1cmUoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5zdWJQYXRocy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMubW92ZVRvKHgsIHkpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNsb3NlKCkge1xuICAgIGlmICghdGhpcy5jdXJyZW50KSByZXR1cm4gZmFsc2VcbiAgICB0aGlzLmN1cnJlbnQuY2xvc2UoKVxuICB9XG5cbiAgLyoqXG4gICAqIFBhc3MgYWxsIGN1cnZlcyBzdHJhaWdodCB0aHJvdWdoXG4gICAqICovXG4gIHB1YmxpYyBsaW5lVG8oLi4uYXJnczogTGluZVRvQWN0aW9uWydhcmdzJ10pIHtcbiAgICB0aGlzLmVuc3VyZSguLi5hcmdzKVxuICAgIHRoaXMuY3VycmVudC5saW5lVG8oLi4uYXJncylcbiAgfVxuICBwdWJsaWMgYXJjKC4uLmFyZ3M6IEFyY0FjdGlvblsnYXJncyddKSB7XG4gICAgY29uc3QgW3gsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGlDbG9ja3dpc2VdID0gYXJnc1xuICAgIHRoaXMuZWxsaXBzZSh4LCB5LCByYWRpdXMsIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGlDbG9ja3dpc2UpXG4gIH1cbiAgcHVibGljIGVsbGlwc2UoLi4uYXJnczogRWxsaXBzZUFjdGlvblsnYXJncyddKSB7XG4gICAgY29uc3QgW2FYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYW50aUNsb2Nrd2lzZV0gPSBhcmdzXG4gICAgY29uc3QgcG9pbnRzID0gYXJjVG9Qb2ludHMoYVgsIGFZLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCB4UmFkaXVzKVxuXG4gICAgLy8gdGhpcy5lbnN1cmUocG9pbnRzLnN0YXJ0LngsIHBvaW50cy5zdGFydC55KTtcblxuICAgIGlmICghdGhpcy5jdXJyZW50IHx8ICFzYW1lUG9zKHRoaXMuY3VycmVudC5sYXN0UG9pbnQoKSwgcG9pbnRzLnN0YXJ0KSkge1xuICAgICAgdGhpcy5tb3ZlVG8ocG9pbnRzLnN0YXJ0LngsIHBvaW50cy5zdGFydC55KVxuICAgIH1cblxuICAgIHRoaXMuY3VycmVudC5lbGxpcHNlKC4uLmFyZ3MpXG4gIH1cbiAgcHVibGljIHF1YWRyYXRpY0N1cnZlVG8oLi4uYXJnczogUXVhZHJhdGljQ3VydmVUb0FjdGlvblsnYXJncyddKSB7XG4gICAgdGhpcy5jdXJyZW50LnF1YWRyYXRpY0N1cnZlVG8oLi4uYXJncylcbiAgfVxuICBwdWJsaWMgYmV6aWVyQ3VydmVUbyguLi5hcmdzOiBCZXppZXJDdXJ2ZVRvQWN0aW9uWydhcmdzJ10pIHtcbiAgICB0aGlzLmN1cnJlbnQuYmV6aWVyQ3VydmVUbyguLi5hcmdzKVxuICB9XG4gIHB1YmxpYyByZWN0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlcikge1xuICAgIHRoaXMubW92ZVRvKHgsIHkpXG4gICAgdGhpcy5saW5lVG8oeCArIHcsIHkpXG4gICAgdGhpcy5saW5lVG8oeCArIHcsIHkgKyBoKVxuICAgIHRoaXMubGluZVRvKHgsIHkgKyBoKVxuICAgIHRoaXMubGluZVRvKHgsIHkpXG4gIH1cblxuICBwdWJsaWMgdG9Qb2x5cyhzY2FsZTogbnVtYmVyLCBkaXZpc2lvbnM/OiBudW1iZXIpIHtcbiAgICBpZiAoIXNjYWxlKSB0aHJvdyAnTk8gU0NBTEUhJ1xuICAgIHJldHVybiB0aGlzLnN1YlBhdGhzLm1hcCgoc3ViUGF0aCkgPT4gc3ViUGF0aC50b1BvbHkoc2NhbGUsIGRpdmlzaW9ucykpXG4gIH1cbiAgcHVibGljIGZyb21Qb2x5cyhwb2x5Z29uczogeyBYOiBudW1iZXI7IFk6IG51bWJlciB9W11bXSwgc2NhbGU6IG51bWJlcikge1xuICAgIGlmICghc2NhbGUpIHRocm93ICdOTyBTQ0FMRSEnXG5cbiAgICB0aGlzLnN1YlBhdGhzID0gW11cblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gcG9seWdvbnMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICBjb25zdCBzdWJQYXRoID0gbmV3IFN1YlBhdGgoKVxuICAgICAgc3ViUGF0aC5mcm9tUG9seXMocG9seWdvbnNbaV0sIHNjYWxlKVxuICAgICAgdGhpcy5zdWJQYXRocy5wdXNoKHN1YlBhdGgpXG4gICAgICB0aGlzLmN1cnJlbnQgPSBzdWJQYXRoXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICBwdWJsaWMgY2xpcChjbGlwUmVnaW9uOiBQYXRoLCBjbGlwVHlwZT86IENsaXBwZXJMaWIuQ2xpcFR5cGUsIGRpdmlzaW9ucz86IG51bWJlcikge1xuICAgIGlmICghY2xpcFJlZ2lvbikgcmV0dXJuIHRoaXNcblxuICAgIGNsaXBUeXBlID0gY2xpcFR5cGUgfHwgMFxuXG4gICAgY29uc3Qgc2NhbGUgPSAxMDAwXG4gICAgY29uc3Qgc3VialBvbHlzID0gdGhpcy50b1BvbHlzKHNjYWxlLCBkaXZpc2lvbnMpXG4gICAgY29uc3QgY2xpcFBvbHlzID0gY2xpcFJlZ2lvbi50b1BvbHlzKHNjYWxlLCBkaXZpc2lvbnMpXG5cbiAgICAvLyBDbGVhbiBib3RoXG4gICAgLy8gY29uc3Qgc3VialBvbHlzID0gQ2xpcHBlckxpYi5DbGlwcGVyLkNsZWFuUG9seWdvbnMoc3VialBvbHlzLCAxKTtcbiAgICAvLyBjb25zdCBjbGlwUG9seXMgPSBDbGlwcGVyTGliLkNsaXBwZXIuQ2xlYW5Qb2x5Z29ucyhjbGlwUG9seXMsIDEpO1xuICAgIC8vIGNvbnN0IHN1YmpQb2x5cyA9IENsaXBwZXJMaWIuQ2xpcHBlci5TaW1wbGlmeVBvbHlnb25zKHN1YmpQb2x5cywgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0Tm9uWmVybyk7XG4gICAgLy8gY29uc3QgY2xpcFBvbHlzID0gQ2xpcHBlckxpYi5DbGlwcGVyLlNpbXBsaWZ5UG9seWdvbnMoY2xpcFBvbHlzLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvKTtcblxuICAgIGNvbnN0IGNwciA9IG5ldyBDbGlwcGVyTGliLkNsaXBwZXIoKVxuICAgIC8vIGNvbnN0IGNwciA9IG5ldyBDbGlwcGVyKClcbiAgICAvLyBjcHIuUHJlc2VydmVDb2xsaW5lYXIgPSB0cnVlO1xuICAgIC8vIGNwci5SZXZlcnNlU29sdXRpb24gPSB0cnVlO1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNwci5BZGRQYXRocyhzdWJqUG9seXMsIENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0LCB0cnVlKVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjcHIuQWRkUGF0aHMoY2xpcFBvbHlzLCBDbGlwcGVyTGliLlBvbHlUeXBlLnB0Q2xpcCwgdHJ1ZSlcblxuICAgIGNvbnN0IGNsaXBwZWQ6IGFueVtdID0gW11cbiAgICBjcHIuRXhlY3V0ZShjbGlwVHlwZSwgY2xpcHBlZClcblxuICAgIGNvbnN0IHBhdGggPSBuZXcgUGF0aCgpXG4gICAgcGF0aC5mcm9tUG9seXMoY2xpcHBlZCwgc2NhbGUpXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxuXG4gIHB1YmxpYyB0cmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgUGF0aCgpXG4gICAgdGhpcy5zdWJQYXRocy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJQYXRoKSB7XG4gICAgICBjb25zdCBwdHMgPSBzdWJQYXRoLmdldFBvaW50cygpXG4gICAgICByZXN1bHQubW92ZVRvKHB0c1swXS54ICsgeCwgcHRzWzBdLnkgKyB5KVxuICAgICAgcHRzLnNsaWNlKDEpLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgcmVzdWx0LmxpbmVUbyhwLnggKyB4LCBwLnkgKyB5KVxuICAgICAgfSlcbiAgICB9KVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHB1YmxpYyBjbGlwVG9Cb3VuZHMoYm91bmRzOiBCb3VuZHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgUGF0aCgpXG4gICAgbGV0IHAwID0gbmV3IFBvaW50KClcbiAgICBsZXQgcDB1ID0gcDAuY2xvbmUoKVxuICAgIGxldCBwMXU6IFBvaW50XG5cbiAgICB0aGlzLnN1YlBhdGhzLmZvckVhY2goKHN1YlBhdGgpID0+IHtcbiAgICAgIGNvbnN0IHB0cyA9IHN1YlBhdGguZ2V0UG9pbnRzKClcblxuICAgICAgcHRzLmZvckVhY2goZnVuY3Rpb24gKHAxLCBpKSB7XG4gICAgICAgIHAxID0gcDEuY2xvbmUoKVxuICAgICAgICBwMXUgPSBwMS5jbG9uZSgpXG5cbiAgICAgICAgLy8gaWYocDEueSA8IGJvdW5kcy50b3AgJiYgcDAueSA8IGJvdW5kcy50b3ApIHtcbiAgICAgICAgLy8gICByZXR1cm47XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gaWYocDEueCA+IGJvdW5kcy5yaWdodCAmJiBwMC54ID4gYm91bmRzLnJpZ2h0KSB7XG4gICAgICAgIC8vICAgcmV0dXJuO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgaWYgKHAxLnkgPCBib3VuZHMudG9wKSB7XG4gICAgICAgICAgY29uc3QgbSA9IChwMS54IC0gcDAueCkgLyAocDEueSAtIHAwLnkpXG4gICAgICAgICAgcDEueCArPSBtICogKGJvdW5kcy50b3AgLSBwMS55KSB8fCAwXG4gICAgICAgICAgcDEueSA9IGJvdW5kcy50b3BcbiAgICAgICAgfSBlbHNlIGlmIChwMHUueSA8IGJvdW5kcy50b3ApIHtcbiAgICAgICAgICBjb25zdCBtID0gKHAxLnggLSBwMHUueCkgLyAocDEueSAtIHAwdS55KVxuICAgICAgICAgIGNvbnN0IHggPSBtICogKGJvdW5kcy50b3AgLSBwMS55KSB8fCAwXG5cbiAgICAgICAgICByZXN1bHQubW92ZVRvKHAxLnggKyB4LCBib3VuZHMudG9wKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYocDEueCA8IGJvdW5kcy5sZWZ0KSB7XG4gICAgICAgIC8vICAgY29uc3QgbSA9IChwMS55IC0gcDAueSkgLyAocDEueCAtIHAwLngpO1xuICAgICAgICAvLyAgIHAxLnkgKz0gbSAqIChib3VuZHMubGVmdCAtIHAxLngpO1xuICAgICAgICAvLyAgIHAxLnggPSBib3VuZHMubGVmdDtcbiAgICAgICAgLy8gfVxuICAgICAgICAvLyBlbHNlIGlmKHAwdS54IDwgYm91bmRzLmxlZnQpIHtcbiAgICAgICAgLy8gICBjb25zdCBtID0gKHAxLnkgLSBwMHUueSkgLyAocDEueCAtIHAwdS54KTtcbiAgICAgICAgLy8gICBjb25zdCB5ID0gbSAqIChib3VuZHMubGVmdCAtIHAxLngpO1xuICAgICAgICAvLyAgIC8vIHJlc3VsdC5tb3ZlVG8oYm91bmRzLmxlZnQsIGJvdW5kcy50b3ApO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgaWYgKHAxLnggPiBib3VuZHMucmlnaHQpIHtcbiAgICAgICAgICBjb25zdCBtID0gKHAxLnkgLSBwMC55KSAvIChwMS54IC0gcDAueClcbiAgICAgICAgICBwMS55ICs9IG0gKiAoYm91bmRzLnJpZ2h0IC0gcDEueClcbiAgICAgICAgICBwMS54ID0gYm91bmRzLnJpZ2h0XG4gICAgICAgIH0gZWxzZSBpZiAocDB1LnggPiBib3VuZHMucmlnaHQpIHtcbiAgICAgICAgICAvLyBjb25zdCBtID0gKHAxLnkgLSBwMHUueSkgLyAocDEueCAtIHAwdS54KVxuICAgICAgICAgIC8vIGNvbnN0IHkgPSBtICogKGJvdW5kcy5yaWdodCAtIHAxLngpXG4gICAgICAgICAgLy8gcmVzdWx0Lm1vdmVUbyhib3VuZHMucmlnaHQsIHAxLnkteSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaSA9PT0gMCkgcmVzdWx0Lm1vdmVUbyhwMS54LCBwMS55KVxuICAgICAgICBlbHNlIHJlc3VsdC5saW5lVG8ocDEueCwgcDEueSlcblxuICAgICAgICBwMCA9IHAxXG4gICAgICAgIHAwdSA9IHAxdVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgcHVibGljIHNpbXBsaWZ5KHdpbmRpbmdSdWxlPzogV2luZGluZ1J1bGUsIGRpdmlzaW9ucz86IG51bWJlcikge1xuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3Igc2luZ2xlIGVsbGlwc2UganVzdCBjaGFuZ2UgdGhlIHJhZGl1cy5cbiAgICAvLyBpZih0aGlzLmlzKCdlbGxpcHNlJykpIHtcbiAgICAvLyAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFBhdGgoKTtcbiAgICAvLyAgICAgY29uc3QgYXJncyA9IHRoaXMuc3ViUGF0aHNbMF0uYWN0aW9uc1sxXS5hcmdzO1xuICAgIC8vICAgICByZXN1bHQuZWxsaXBzZShcbiAgICAvLyAgICAgICBhcmdzWzBdLFxuICAgIC8vICAgICAgIGFyZ3NbMV0sXG4gICAgLy8gICAgICAgYXJnc1syXSxcbiAgICAvLyAgICAgICBhcmdzWzNdLFxuICAgIC8vICAgICAgIGFyZ3NbNF0sXG4gICAgLy8gICAgICAgYXJnc1s1XSxcbiAgICAvLyAgICAgICBhcmdzWzZdXG4gICAgLy8gICAgICk7XG4gICAgLy8gICAgIHJldHVybiByZXN1bHQ7XG4gICAgLy8gfVxuXG4gICAgY29uc3Qgc2NhbGUgPSAxMDAwXG4gICAgbGV0IHBvbHlzID0gdGhpcy50b1BvbHlzKHNjYWxlLCBkaXZpc2lvbnMpXG4gICAgbGV0IHR5cGUgPSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROb25aZXJvXG5cbiAgICBpZiAod2luZGluZ1J1bGUgPT09ICdldmVub2RkJykge1xuICAgICAgdHlwZSA9IENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGRcbiAgICB9XG5cbiAgICBwb2x5cyA9IENsaXBwZXJMaWIuQ2xpcHBlci5TaW1wbGlmeVBvbHlnb25zKHBvbHlzLCB0eXBlKVxuXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFBhdGgoKVxuICAgIHJlc3VsdC5mcm9tUG9seXMocG9seXMsIHNjYWxlKVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgcHVibGljIGlzKGFjdGlvblR5cGU6IEFjdGlvblsndHlwZSddKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5zdWJQYXRocy5sZW5ndGggPT09IDEgJiZcbiAgICAgIHRoaXMuc3ViUGF0aHNbMF0uYWN0aW9ucy5sZW5ndGggPT09IDIgJiZcbiAgICAgIHRoaXMuc3ViUGF0aHNbMF0uYWN0aW9uc1sxXS50eXBlID09PSBhY3Rpb25UeXBlXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcHVibGljIG9mZnNldChkZWx0YTogbnVtYmVyLCBkaXZpc2lvbnM/OiBudW1iZXIpIHtcbiAgICBpZiAoZGVsdGEgPT09IDApIHJldHVybiB0aGlzXG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHNpbmdsZSBlbGxpcHNlXG4gICAgLy8ganVzdCBjaGFuZ2UgdGhlIHJhZGl1cy5cbiAgICBpZiAodGhpcy5pcygnRUxMSVBTRScpKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBuZXcgUGF0aCgpXG4gICAgICBjb25zdCBhY3Rpb24gPSB0aGlzLnN1YlBhdGhzWzBdLmFjdGlvbnNbMV0gYXMgRWxsaXBzZUFjdGlvblxuICAgICAgY29uc3QgYXJncyA9IGFjdGlvbi5hcmdzXG4gICAgICBpZiAoYXJnc1syXSArIGRlbHRhIDwgMCkgcmV0dXJuIGZhbHNlXG4gICAgICByZXN1bHQuZWxsaXBzZShhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdICsgZGVsdGEsIGFyZ3NbM10gKyBkZWx0YSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSlcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG5cbiAgICBjb25zdCBzY2FsZSA9IDEwMDBcblxuICAgIGNvbnN0IHBvbHlnb25zID0gdGhpcy50b1BvbHlzKHNjYWxlLCBkaXZpc2lvbnMpXG5cbiAgICAvLyBvZmZzZXRcbiAgICAvLyBjb25zdCBtaXRlckxpbWl0ID0gMTAwMCAqIHNjYWxlXG5cbiAgICBjb25zdCBjbyA9IG5ldyBDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQoKVxuICAgIC8vIGNvLlByZXNlcnZlQ29sbGluZWFyID0gdHJ1ZTtcbiAgICAvLyBjby5SZXZlcnNlU29sdXRpb24gPSB0cnVlO1xuXG4gICAgY28uQWRkUGF0aHMocG9seWdvbnMsIENsaXBwZXJMaWIuSm9pblR5cGUuanRNaXRlciwgQ2xpcHBlckxpYi5FbmRUeXBlLmV0Q2xvc2VkUG9seWdvbilcblxuICAgIC8vIFRPRE86XG4gICAgY29uc3Qgc29sdXRpb246IGFueVtdID0gW11cblxuICAgIHRyeSB7XG4gICAgICBjby5FeGVjdXRlKHNvbHV0aW9uLCBkZWx0YSAqIHNjYWxlKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCFzb2x1dGlvbiB8fCBzb2x1dGlvbi5sZW5ndGggPT09IDAgfHwgc29sdXRpb25bMF0ubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2VcblxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBQYXRoKClcbiAgICByZXN1bHQuZnJvbVBvbHlzKHNvbHV0aW9uLCBzY2FsZSlcblxuICAgIHJlc3VsdC5jbG9zZSgpIC8vIE5vdCBzdXJlIHdoeSBJIG5lZWQgdG8gZG8gdGhpcyBub3dcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBwdWJsaWMgcmFtcChkZXB0aDogbnVtYmVyKSB7fVxuXG4gIHB1YmxpYyBhZGRQYXRoKHBhdGgyOiBQYXRoKSB7XG4gICAgdGhpcy5zdWJQYXRocyA9IHRoaXMuc3ViUGF0aHMuY29uY2F0KHBhdGgyLnN1YlBhdGhzKVxuICB9XG5cbiAgcHVibGljIGVzdGltYXRlTWF4T2Zmc2V0KGRpdmlzaW9uczogbnVtYmVyKSB7XG4gICAgY29uc3QgYm91bmRzID0gdGhpcy5nZXRCb3VuZHMoKVxuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5hYnMoYm91bmRzLnJpZ2h0IC0gYm91bmRzLmxlZnQpXG4gICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5hYnMoYm91bmRzLmJvdHRvbSAtIGJvdW5kcy50b3ApXG4gICAgbGV0IGx0ID0gTWF0aC5taW4od2lkdGgsIGhlaWdodCkgLyAyXG4gICAgbGV0IGd0ID0gMFxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyArK2kpIHtcbiAgICAgIGNvbnN0IHRlc3QgPSBndCArIChsdCAtIGd0KSAvIDJcbiAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMub2Zmc2V0KC10ZXN0LCAzKVxuXG4gICAgICBpZiAob2Zmc2V0KSBndCA9IHRlc3RcbiAgICAgIGVsc2UgbHQgPSB0ZXN0XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgbHQ6IGx0LCBndDogZ3QgfVxuICB9XG5cbiAgcHVibGljIGZpbGxQYXRoKGRpYW1ldGVyOiBudW1iZXIsIGRpdmlzaW9uczogbnVtYmVyKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFBhdGgoKVxuICAgIGNvbnN0IG92ZXJsYXAgPSBNYXRoLnNpbihNYXRoLlBJIC8gNClcbiAgICBjb25zdCBwYXRoID0gdGhpc1xuXG4gICAgbGV0IG1heCA9IHBhdGguZXN0aW1hdGVNYXhPZmZzZXQoNSkubHRcbiAgICBtYXggLT0gZGlhbWV0ZXIgLyAyXG5cbiAgICBmb3IgKGxldCBpID0gLW1heDsgaSA8IC1kaWFtZXRlciAvIDI7IGkgKz0gZGlhbWV0ZXIgKiBvdmVybGFwKSB7XG4gICAgICBsZXQgb2Zmc2V0UGF0aCA9IHBhdGgub2Zmc2V0KGksIGRpdmlzaW9ucylcbiAgICAgIGlmICghb2Zmc2V0UGF0aCkgYnJlYWtcbiAgICAgIG9mZnNldFBhdGggPSBvZmZzZXRQYXRoLnJldmVyc2UoKVxuICAgICAgcmVzdWx0LmFkZFBhdGgob2Zmc2V0UGF0aClcbiAgICB9XG5cbiAgICAvLyBGaW5pc2hpbmcgcGFzc1xuICAgIGNvbnN0IGZpbmlzaCA9IHBhdGgub2Zmc2V0KC1kaWFtZXRlciAvIDIsIGRpdmlzaW9ucylcbiAgICBpZiAoZmluaXNoKSByZXN1bHQuYWRkUGF0aChmaW5pc2gucmV2ZXJzZSgpKVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgcHVibGljIGNvbm5lY3RFbmRzKGRpYW1ldGVyOiBudW1iZXIpIHtcbiAgICBmb3IgKGxldCBpID0gdGhpcy5zdWJQYXRocy5sZW5ndGggLSAxOyBpID4gMDsgLS1pKSB7XG4gICAgICBsZXQgc3AxID0gdGhpcy5zdWJQYXRoc1tpIC0gMV1cbiAgICAgIGxldCBzcDIgPSB0aGlzLnN1YlBhdGhzW2ldXG5cbiAgICAgIGNvbnN0IHAxID0gc3AxLmxhc3RQb2ludCgpXG4gICAgICBjb25zdCBuZWFyZXN0ID0gc3AyLm5lYXJlc3RQb2ludChwMSlcbiAgICAgIGNvbnN0IHAyID0gbmVhcmVzdC5wb2ludFxuXG4gICAgICBpZiAobmVhcmVzdC5kaXN0YW5jZSA8IGRpYW1ldGVyICogMikge1xuICAgICAgICBzcDIgPSBzcDIuc2hpZnQobmVhcmVzdC5pKVxuICAgICAgICBzcDEubGluZVRvKHAyLngsIHAyLnkpXG4gICAgICAgIHNwMi5hY3Rpb25zWzBdLnR5cGUgPSAnTElORV9UTydcbiAgICAgICAgc3AxLmFjdGlvbnMgPSBzcDEuYWN0aW9ucy5jb25jYXQoc3AyLmFjdGlvbnMpXG4gICAgICAgIHRoaXMuc3ViUGF0aHMuc3BsaWNlKGksIDEpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHB1YmxpYyByZXZlcnNlKCkge1xuICAgIGlmICh0aGlzLmlzKCdFTExJUFNFJykpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBQYXRoKClcbiAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMuc3ViUGF0aHNbMF0uYWN0aW9uc1sxXSBhcyBFbGxpcHNlQWN0aW9uXG4gICAgICBjb25zdCBhcmdzID0gYWN0aW9uLmFyZ3NcblxuICAgICAgcmVzdWx0LmVsbGlwc2UoXG4gICAgICAgIGFyZ3NbMF0sXG4gICAgICAgIGFyZ3NbMV0sXG4gICAgICAgIGFyZ3NbMl0sXG4gICAgICAgIGFyZ3NbM10sXG4gICAgICAgIGFyZ3NbNV0sIC8vIGVuZCBhcyBzdGFydFxuICAgICAgICBhcmdzWzRdLCAvLyBzdGFydCBhcyBlbmRcbiAgICAgICAgIWFyZ3NbNl0gLy8gaW52ZXJ0IGNjd1xuICAgICAgKVxuXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFBhdGgoKVxuXG4gICAgcmVzdWx0LnN1YlBhdGhzID0gdGhpcy5zdWJQYXRocy5tYXAoKHNwKSA9PiBzcC5yZXZlcnNlKCkpLnJldmVyc2UoKVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgcHVibGljIHNvcnQoKSB7XG4gICAgaWYgKHRoaXMuc3ViUGF0aHMubGVuZ3RoID09PSAwKSByZXR1cm4gdGhpc1xuXG4gICAgY29uc3QgY29weSA9IG5ldyBQYXRoKClcblxuICAgIGxldCBwMCA9IHRoaXMuc3ViUGF0aHNbMF0ubGFzdFBvaW50KClcblxuICAgIGNvcHkuc3ViUGF0aHMgPSB0aGlzLnN1YlBhdGhzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IHAxID0gYS5sYXN0UG9pbnQoKVxuICAgICAgY29uc3QgcDIgPSBiLmZpcnN0UG9pbnQoKVxuICAgICAgY29uc3QgZDEgPSBQb2ludC5kaXN0YW5jZShwMSwgcDApXG4gICAgICBjb25zdCBkMiA9IFBvaW50LmRpc3RhbmNlKHAyLCBwMClcblxuICAgICAgLy8gTW92aW5nIHRhcmdldFxuICAgICAgcDAgPSBiLmxhc3RQb2ludCgpXG5cbiAgICAgIGlmIChkMSA8IGQyKSByZXR1cm4gLTFcbiAgICAgIGlmIChkMSA+IGQyKSByZXR1cm4gMVxuXG4gICAgICByZXR1cm4gMFxuICAgIH0pXG5cbiAgICByZXR1cm4gY29weVxuICB9XG5cbiAgcHVibGljIGZpcnN0UG9pbnQoKSB7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnQpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiB0aGlzLnN1YlBhdGhzWzBdLmZpcnN0UG9pbnQoKVxuICB9XG5cbiAgcHVibGljIGxhc3RQb2ludCgpIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudCkgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRoaXMuc3ViUGF0aHNbdGhpcy5zdWJQYXRocy5sZW5ndGggLSAxXS5sYXN0UG9pbnQoKVxuICB9XG5cbiAgcHVibGljIGdldFBvaW50cyhkaXZpc2lvbnM/OiBudW1iZXIpOiBQb2ludFtdIHtcbiAgICBjb25zdCBwdHM6IFBvaW50W10gPSBbXVxuICAgIHRoaXMuc3ViUGF0aHMuZm9yRWFjaCgoc3ApID0+IHtcbiAgICAgIHB0cy5wdXNoKC4uLnNwLmdldFBvaW50cyhkaXZpc2lvbnMpKVxuICAgIH0pXG4gICAgcmV0dXJuIHB0c1xuICB9XG5cbiAgcHVibGljIGdldEJvdW5kcygpOiBCb3VuZHMge1xuICAgIGNvbnN0IHB0cyA9IHRoaXMuZ2V0UG9pbnRzKClcbiAgICBjb25zdCBwMCA9IHRoaXMuZmlyc3RQb2ludCgpIHx8IG5ldyBQb2ludCgpXG4gICAgY29uc3QgcmVzOiBCb3VuZHMgPSB7XG4gICAgICBsZWZ0OiBwMC54LFxuICAgICAgdG9wOiBwMC55LFxuICAgICAgcmlnaHQ6IHAwLngsXG4gICAgICBib3R0b206IHAwLnksXG4gICAgfVxuXG4gICAgcHRzLmZvckVhY2goKHApID0+IHtcbiAgICAgIHJlcy5sZWZ0ID0gTWF0aC5taW4ocmVzLmxlZnQsIHAueClcbiAgICAgIHJlcy50b3AgPSBNYXRoLm1pbihyZXMudG9wLCBwLnkpXG4gICAgICByZXMucmlnaHQgPSBNYXRoLm1heChyZXMucmlnaHQsIHAueClcbiAgICAgIHJlcy5ib3R0b20gPSBNYXRoLm1heChyZXMuYm90dG9tLCBwLnkpXG4gICAgfSlcblxuICAgIHJldHVybiByZXNcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9pbnQge1xuICBwdWJsaWMgeDogbnVtYmVyXG4gIHB1YmxpYyB5OiBudW1iZXJcbiAgcHVibGljIHo6IG51bWJlclxuICBwdWJsaWMgYTogbnVtYmVyXG4gIGNvbnN0cnVjdG9yKHg6IG51bWJlciA9IDAsIHk6IG51bWJlciA9IDAsIHo/OiBudW1iZXIsIGE/OiBudW1iZXIpIHtcbiAgICB0aGlzLnggPSBpc05hTih4KSA/IDAgOiB4XG4gICAgdGhpcy55ID0gaXNOYU4oeSkgPyAwIDogeVxuICAgIHRoaXMueiA9IGlzTmFOKHopID8gMCA6IHpcbiAgICB0aGlzLmEgPSBpc05hTihhKSA/IDAgOiBhXG4gIH1cbiAgc3RhdGljIGRpc3RhbmNlKHBvaW50MTogUG9pbnQsIHBvaW50MjogUG9pbnQpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHBvaW50Mi54IC0gcG9pbnQxLngsIDIpICsgTWF0aC5wb3cocG9pbnQyLnkgLSBwb2ludDEueSwgMikpXG4gIH1cbiAgc3RhdGljIGFuZ2xlQmV0d2Vlbihwb2ludDE6IFBvaW50LCBwb2ludDI6IFBvaW50KSB7XG4gICAgcmV0dXJuIE1hdGguYWNvcyhwb2ludDEuZG90KHBvaW50MikgLyAocG9pbnQxLm1hZ25pdHVkZSgpICogcG9pbnQyLm1hZ25pdHVkZSgpKSlcbiAgfVxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCwgdGhpcy55KVxuICB9XG4gIHJvdW5kKCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQoTWF0aC5yb3VuZCh0aGlzLngpLCBNYXRoLnJvdW5kKHRoaXMueSkpXG4gIH1cbiAgZXF1YWxzKHBvaW50OiBQb2ludCkge1xuICAgIHJldHVybiB0aGlzLnggPT09IHBvaW50LnggJiYgdGhpcy55ID09PSBwb2ludC55XG4gIH1cbiAgYWRkKHBvaW50OiBQb2ludCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54ICsgcG9pbnQueCwgdGhpcy55ICsgcG9pbnQueSlcbiAgfVxuICBtaWRwb2ludChwb2ludDogUG9pbnQpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KCh0aGlzLnggKyBwb2ludC54KSAvIDIsICh0aGlzLnkgKyBwb2ludC55KSAvIDIpXG4gIH1cbiAgc3VidHJhY3QocG9pbnQ6IFBvaW50KSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnggLSBwb2ludC54LCB0aGlzLnkgLSBwb2ludC55KVxuICB9XG4gIG1hZ25pdHVkZSgpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSlcbiAgfVxuICBtdWx0aXBseShwb2ludDogUG9pbnQgfCBudW1iZXIpIHtcbiAgICByZXR1cm4gdHlwZW9mIHBvaW50ID09PSAnbnVtYmVyJ1xuICAgICAgPyBuZXcgUG9pbnQodGhpcy54ICogcG9pbnQsIHRoaXMueSAqIHBvaW50KVxuICAgICAgOiBuZXcgUG9pbnQodGhpcy54ICogcG9pbnQueCwgdGhpcy55ICogcG9pbnQueSlcbiAgfVxuICBzY2FsZShzY2FsZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsdGlwbHkoc2NhbGUpXG4gIH1cbiAgZGl2aWRlKHBvaW50OiBQb2ludCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54IC8gcG9pbnQueCwgdGhpcy55IC8gcG9pbnQueSlcbiAgfVxuICBub3JtYWxpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsdGlwbHkoMSAvIHRoaXMubWFnbml0dWRlKCkpXG4gIH1cbiAgc2V0KHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgdGhpcy54ID0geFxuICAgIHRoaXMueSA9IHlcbiAgfVxuICBkb3QocG9pbnQ6IFBvaW50KTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy54ICogcG9pbnQueCArIHRoaXMueSAqIHBvaW50LnlcbiAgfVxuICB0cmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCArIHgsIHRoaXMueSArIHkpXG4gIH1cbiAgbW92ZUFsb25nQW5nbGUoYW5nbGU6IG51bWJlciwgZGlzdGFuY2U6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZShNYXRoLmNvcyhhbmdsZSkgKiBkaXN0YW5jZSwgTWF0aC5zaW4oYW5nbGUpICogZGlzdGFuY2UpXG4gIH1cbiAgcm90YXRlKGFuZ2xlOiBudW1iZXIpIHtcbiAgICBjb25zdCB4ID0gdGhpcy54ICogTWF0aC5jb3MoYW5nbGUpIC0gdGhpcy55ICogTWF0aC5zaW4oYW5nbGUpXG4gICAgY29uc3QgeSA9IHRoaXMueCAqIE1hdGguc2luKGFuZ2xlKSArIHRoaXMueSAqIE1hdGguY29zKGFuZ2xlKVxuICAgIHJldHVybiBuZXcgUG9pbnQoeCwgeSlcbiAgfVxuICBhbmdsZVRvKHBvaW50OiBQb2ludCkge1xuICAgIHJldHVybiBNYXRoLmF0YW4yKHBvaW50LnkgLSB0aGlzLnksIHBvaW50LnggLSB0aGlzLngpXG4gIH1cbiAgZGlzdGFuY2VUbyhwb2ludDogUG9pbnQpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHBvaW50LnggLSB0aGlzLngsIDIpICsgTWF0aC5wb3cocG9pbnQueSAtIHRoaXMueSwgMikpXG4gIH1cbiAgYW5nbGVCZXR3ZWVuKHBvaW50OiBQb2ludCkge1xuICAgIHJldHVybiBNYXRoLmFjb3ModGhpcy5kb3QocG9pbnQpIC8gKHRoaXMubWFnbml0dWRlKCkgKiBwb2ludC5tYWduaXR1ZGUoKSkpXG4gIH1cbiAgdG9Vbml0KCkge1xuICAgIHJldHVybiB0aGlzLm11bHRpcGx5KDEgLyB0aGlzLm1hZ25pdHVkZSgpKVxuICB9XG59XG4iLCJpbXBvcnQgR0NhbnZhcyBmcm9tICcuL0dDYW52YXMnXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi9za2V0Y2hlcy90b29scy9SYW5nZSdcblxuZXhwb3J0IGludGVyZmFjZSBTa2V0Y2hDb25maWcge1xuICBjdHg6IEdDYW52YXNcbiAgd2lkdGg6IG51bWJlclxuICBoZWlnaHQ6IG51bWJlclxufVxuXG5leHBvcnQgY2xhc3MgU2tldGNoIHtcbiAgcHVibGljIGN0eDogR0NhbnZhc1xuICBwdWJsaWMgY2FudmFzV2lkdGg6IG51bWJlclxuICBwdWJsaWMgY2FudmFzSGVpZ2h0OiBudW1iZXJcbiAgcHVibGljIGN3OiBudW1iZXJcbiAgcHVibGljIGNoOiBudW1iZXJcbiAgcHVibGljIGN4OiBudW1iZXJcbiAgcHVibGljIGN5OiBudW1iZXJcbiAgcHVibGljIHZzOiB7IFtrZXk6IHN0cmluZ106IFJhbmdlIH0gPSB7fVxuICBzdGF0aWMgZ2VuZXJhdGVHQ29kZTogYm9vbGVhbiA9IHRydWVcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFNrZXRjaENvbmZpZykge1xuICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eFxuICAgIHRoaXMuY2FudmFzV2lkdGggPSB0aGlzLmN3ID0gY29uZmlnLndpZHRoXG4gICAgdGhpcy5jYW52YXNIZWlnaHQgPSB0aGlzLmNoID0gY29uZmlnLmhlaWdodFxuICAgIHRoaXMuY3ggPSB0aGlzLmNhbnZhc1dpZHRoIC8gMlxuICAgIHRoaXMuY3kgPSB0aGlzLmNhbnZhc0hlaWdodCAvIDJcbiAgfVxuXG4gIGluaXQoKTogdm9pZCB7fVxuICBpbml0RHJhdygpOiB2b2lkIHt9XG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHt9XG4gIHJlc2V0KCk6IHZvaWQge1xuICAgIC8vIE9iamVjdC5rZXlzKHRoaXMudnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIC8vICAgdGhpcy52c1trZXldLnJhbmRvbWl6ZSgpXG4gICAgLy8gfSlcbiAgICB0aGlzLmN0eC5yZXNldCgpXG4gIH1cbn1cbiIsIi8qKlxuICogRGVyaXZlZCBmcm9tIGNvZGUgb3JpZ2luYWxseSB3cml0dGVuIGJ5IHp6ODUgZm9yIHRocmVlLmpzXG4gKiBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBUaGFua3Mgeno4NSFcbiAqKi9cblxuaW1wb3J0IFBhdGggZnJvbSAnLi9QYXRoJ1xuaW1wb3J0IFBvaW50IGZyb20gJy4vUG9pbnQnXG5pbXBvcnQgeyBhcmNUb1BvaW50cywgc2FtZVBvcyB9IGZyb20gJy4vdXRpbHMvcGF0aFV0aWxzJ1xuXG5leHBvcnQgdHlwZSBNb3ZlVG9BY3Rpb24gPSB7XG4gIHR5cGU6ICdNT1ZFX1RPJ1xuICBhcmdzOiBbeDogbnVtYmVyLCB5OiBudW1iZXJdXG59XG5cbmV4cG9ydCB0eXBlIExpbmVUb0FjdGlvbiA9IHtcbiAgdHlwZTogJ0xJTkVfVE8nXG4gIGFyZ3M6IFt4OiBudW1iZXIsIHk6IG51bWJlcl1cbn1cblxuZXhwb3J0IHR5cGUgUXVhZHJhdGljQ3VydmVUb0FjdGlvbiA9IHtcbiAgdHlwZTogJ1FVQURSQVRJQ19DVVJWRV9UTydcbiAgYXJnczogW2FDUHg6IG51bWJlciwgYUNQeTogbnVtYmVyLCBhWDogbnVtYmVyLCBhWTogbnVtYmVyXVxufVxuXG5leHBvcnQgdHlwZSBCZXppZXJDdXJ2ZVRvQWN0aW9uID0ge1xuICB0eXBlOiAnQkVaSUVSX0NVUlZFX1RPJ1xuICBhcmdzOiBbYUNQMXg6IG51bWJlciwgYUNQMXk6IG51bWJlciwgYUNQMng6IG51bWJlciwgYUNQMnk6IG51bWJlciwgYVg6IG51bWJlciwgYVk6IG51bWJlcl1cbn1cblxuZXhwb3J0IHR5cGUgQXJjQWN0aW9uID0ge1xuICB0eXBlOiAnQVJDJ1xuICBhcmdzOiBbYVg6IG51bWJlciwgYVk6IG51bWJlciwgYVJhZGl1czogbnVtYmVyLCBhU3RhcnRBbmdsZTogbnVtYmVyLCBhRW5kQW5nbGU6IG51bWJlciwgYW50aUNsb2Nrd2lzZTogYm9vbGVhbl1cbn1cblxuZXhwb3J0IHR5cGUgRWxsaXBzZUFjdGlvbiA9IHtcbiAgdHlwZTogJ0VMTElQU0UnXG4gIGFyZ3M6IFtcbiAgICBhWDogbnVtYmVyLFxuICAgIGFZOiBudW1iZXIsXG4gICAgeFJhZGl1czogbnVtYmVyLFxuICAgIHlSYWRpdXM6IG51bWJlcixcbiAgICBhU3RhcnRBbmdsZTogbnVtYmVyLFxuICAgIGFFbmRBbmdsZTogbnVtYmVyLFxuICAgIGFudGlDbG9ja3dpc2U6IGJvb2xlYW5cbiAgXVxufVxuXG5leHBvcnQgdHlwZSBBY3Rpb24gPVxuICB8IE1vdmVUb0FjdGlvblxuICB8IExpbmVUb0FjdGlvblxuICB8IFF1YWRyYXRpY0N1cnZlVG9BY3Rpb25cbiAgfCBCZXppZXJDdXJ2ZVRvQWN0aW9uXG4gIC8vIHwgQXJjQWN0aW9uXG4gIHwgRWxsaXBzZUFjdGlvblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdWJQYXRoIHtcbiAgcHVibGljIGFjdGlvbnM6IEFjdGlvbltdID0gW11cbiAgcHVibGljIHBvaW50c0NhY2hlOiBQb2ludFtdID0gW11cblxuICBzdGF0aWMgYWN0aW9ucyA9IHtcbiAgICBNT1ZFX1RPOiAnbW92ZVRvJyxcbiAgICBMSU5FX1RPOiAnbGluZVRvJyxcbiAgICBRVUFEUkFUSUNfQ1VSVkVfVE86ICdxdWFkcmF0aWNDdXJ2ZVRvJyxcbiAgICBCRVpJRVJfQ1VSVkVfVE86ICdiZXppZXJDdXJ2ZVRvJyxcbiAgICBFTExJUFNFOiAnZWxsaXBzZScsXG4gIH0gYXMgY29uc3RcblxuICBjb25zdHJ1Y3Rvcihwb2ludHM/OiBQb2ludFtdKSB7XG4gICAgaWYgKHBvaW50cykgdGhpcy5mcm9tUG9pbnRzKHBvaW50cylcbiAgfVxuXG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICBjb25zdCBwYXRoID0gbmV3IFN1YlBhdGgoKVxuICAgIHBhdGguYWN0aW9ucyA9IHRoaXMuYWN0aW9ucy5zbGljZSgwKVxuICAgIHJldHVybiBwYXRoXG4gIH1cblxuICBwdWJsaWMgaXNDbG9zZWQoKSB7XG4gICAgcmV0dXJuIHNhbWVQb3ModGhpcy5maXJzdFBvaW50KCksIHRoaXMubGFzdFBvaW50KCkpXG4gIH1cblxuICBwdWJsaWMgZ2V0IGNsb3NlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0Nsb3NlZCgpXG4gIH1cblxuICBwdWJsaWMgb2Zmc2V0KGRlbHRhOiBudW1iZXIpIHtcbiAgICBjb25zdCB0bXAgPSB0aGlzLnRvUGF0aCgpLm9mZnNldChkZWx0YSlcbiAgICBpZiAoIXRtcCkgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRtcC5zdWJQYXRoc1swXVxuICB9XG5cbiAgcHVibGljIHNpbXBsaWZ5KCkge1xuICAgIGNvbnN0IHRtcCA9IHRoaXMudG9QYXRoKCkuc2ltcGxpZnkoKVxuICAgIGlmICghdG1wKSByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gdG1wLnN1YlBhdGhzWzBdXG4gIH1cblxuICBwdWJsaWMgdG9QYXRoKCkge1xuICAgIGNvbnN0IGNsb25lID0gdGhpcy5jbG9uZSgpXG4gICAgY29uc3QgcGF0aCA9IG5ldyBQYXRoKClcbiAgICBwYXRoLnN1YlBhdGhzLnB1c2goY2xvbmUpXG4gICAgcGF0aC5jdXJyZW50ID0gcGF0aC5zdWJQYXRoc1twYXRoLnN1YlBhdGhzLmxlbmd0aCAtIDFdXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxuXG4gIHB1YmxpYyBhZGRBY3Rpb24oYWN0aW9uOiBBY3Rpb24pIHtcbiAgICB0aGlzLmFjdGlvbnMucHVzaChhY3Rpb24pXG4gICAgdGhpcy5wb2ludHNDYWNoZSA9IFtdXG4gIH1cblxuICBwdWJsaWMgZmlyc3RQb2ludCgpIHtcbiAgICBsZXQgcCA9IG5ldyBQb2ludCgwLCAwKVxuICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMuYWN0aW9uc1swXVxuXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSAnRUxMSVBTRSc6XG4gICAgICAgIHAgPSBhcmNUb1BvaW50cyhhY3Rpb24uYXJnc1swXSwgYWN0aW9uLmFyZ3NbMV0sIGFjdGlvbi5hcmdzWzRdLCBhY3Rpb24uYXJnc1s1XSwgYWN0aW9uLmFyZ3NbMl0pLnN0YXJ0XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHAueCA9IGFjdGlvbi5hcmdzW2FjdGlvbi5hcmdzLmxlbmd0aCAtIDJdXG4gICAgICAgIHAueSA9IGFjdGlvbi5hcmdzW2FjdGlvbi5hcmdzLmxlbmd0aCAtIDFdXG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgcmV0dXJuIHBcbiAgfVxuXG4gIHB1YmxpYyBsYXN0UG9pbnQoKSB7XG4gICAgbGV0IHAgPSBuZXcgUG9pbnQoMCwgMClcbiAgICBjb25zdCBhY3Rpb24gPSB0aGlzLmFjdGlvbnNbdGhpcy5hY3Rpb25zLmxlbmd0aCAtIDFdXG5cbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICBjYXNlICdFTExJUFNFJzpcbiAgICAgICAgcCA9IGFyY1RvUG9pbnRzKGFjdGlvbi5hcmdzWzBdLCBhY3Rpb24uYXJnc1sxXSwgYWN0aW9uLmFyZ3NbNF0sIGFjdGlvbi5hcmdzWzVdLCBhY3Rpb24uYXJnc1syXSkuZW5kXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHAueCA9IGFjdGlvbi5hcmdzW2FjdGlvbi5hcmdzLmxlbmd0aCAtIDJdXG4gICAgICAgIHAueSA9IGFjdGlvbi5hcmdzW2FjdGlvbi5hcmdzLmxlbmd0aCAtIDFdXG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgcmV0dXJuIHBcbiAgfVxuXG4gIHB1YmxpYyBmcm9tUG9pbnRzKHBvaW50czogUG9pbnRbXSkge1xuICAgIHRoaXMubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSlcblxuICAgIGZvciAobGV0IHYgPSAxLCB2TGVuID0gcG9pbnRzLmxlbmd0aDsgdiA8IHZMZW47IHYrKykge1xuICAgICAgdGhpcy5saW5lVG8ocG9pbnRzW3ZdLngsIHBvaW50c1t2XS55KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRBY3Rpb25MZW5ndGgoeDA6IG51bWJlciwgeTA6IG51bWJlciwgaTogbnVtYmVyKSB7XG4gICAgY29uc3QgYWN0aW9uID0gdGhpcy5hY3Rpb25zW2ldXG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSAnRUxMSVBTRSc6IHtcbiAgICAgICAgY29uc3QgW2FYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYW50aUNsb2Nrd2lzZV0gPSBhY3Rpb24uYXJnc1xuICAgICAgICBhY3Rpb24uYXJnc1xuICAgICAgICAvLyBUT0RPOiB0aGlzIHNlZW1zIGEgYml0IHRvbyBzaW1wbGlzdGljIHRvIGJlIHJlYWxcbiAgICAgICAgcmV0dXJuIChhRW5kQW5nbGUgLSBhU3RhcnRBbmdsZSkgKiB5UmFkaXVzXG4gICAgICB9XG4gICAgICAvLyBjYXNlICdBUkMnOiB7XG4gICAgICAvLyAgIGNvbnN0IFthWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFudGlDbG9ja3dpc2VdID0gYWN0aW9uLmFyZ3NcbiAgICAgIC8vICAgLy8gVE9ETzogdGhpcyBzZWVtcyBhIGJpdCB0b28gc2ltcGxpc3RpYyB0byBiZSByZWFsXG4gICAgICAvLyAgIHJldHVybiAoYUVuZEFuZ2xlIC0gYVN0YXJ0QW5nbGUpICogYVJhZGl1c1xuICAgICAgLy8gfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBjb25zdCBhcmdzID0gYWN0aW9uLmFyZ3NcbiAgICAgICAgY29uc3QgeCA9IGFyZ3NbYXJncy5sZW5ndGggLSAyXVxuICAgICAgICBjb25zdCB5ID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdXG4gICAgICAgIGNvbnN0IHhvID0geCAtIHgwXG4gICAgICAgIGNvbnN0IHlvID0geSAtIHkwXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoeG8gKiB4byArIHlvICogeW8pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldExlbmd0aCgpIHtcbiAgICBsZXQgbGVuID0gMFxuICAgIGNvbnN0IGZpcnN0ID0gdGhpcy5maXJzdFBvaW50KClcbiAgICBjb25zdCBwdHMgPSB0aGlzLmdldFBvaW50cygxMDAwMClcbiAgICBmb3IgKGxldCBpID0gMSwgbCA9IHB0cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIGNvbnN0IHAgPSBwdHNbaV1cbiAgICAgIGNvbnN0IHgxID0gZmlyc3QueFxuICAgICAgY29uc3QgeTEgPSBmaXJzdC55XG4gICAgICBjb25zdCB4MiA9IHAueFxuICAgICAgY29uc3QgeTIgPSBwLnlcbiAgICAgIGNvbnN0IHhvID0geDIgLSB4MVxuICAgICAgY29uc3QgeW8gPSB5MiAtIHkxXG4gICAgICBsZW4gKz0gTWF0aC5zcXJ0KHhvICogeG8gKyB5byAqIHlvKVxuICAgIH1cbiAgICByZXR1cm4gbGVuXG4gIH1cblxuICBwdWJsaWMgbmVhcmVzdFBvaW50KHAxOiBQb2ludCkge1xuICAgIGxldCBwMiA9IG5ldyBQb2ludCgpXG4gICAgbGV0IHJuOiBudW1iZXJcbiAgICBsZXQgcnA6IFBvaW50XG4gICAgbGV0IHJkOiBudW1iZXIgPSBJbmZpbml0eVxuXG4gICAgdGhpcy5hY3Rpb25zLmZvckVhY2goKGFjdGlvbiwgbikgPT4ge1xuICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdFTExJUFNFJzoge1xuICAgICAgICAgIGNvbnN0IFthWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFudGlDbG9ja3dpc2VdID0gYWN0aW9uLmFyZ3NcbiAgICAgICAgICBwMi54ID0gYVggKyB4UmFkaXVzICogTWF0aC5jb3MoYVN0YXJ0QW5nbGUpIC8vIGNvcGlsb3Qgc3VnZ2VzdGVkIHRoZSByYWQqY29zXG4gICAgICAgICAgcDIueSA9IGFZICsgeVJhZGl1cyAqIE1hdGguc2luKGFTdGFydEFuZ2xlKSAvLyBjb3BpbG90IHN1Z2dlc3RlZCB0aGUgcmFkKnNpblxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FzZSAnQVJDJzoge1xuICAgICAgICAvLyAgIGNvbnN0IFthWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFudGlDbG9ja3dpc2VdID0gYWN0aW9uLmFyZ3NcbiAgICAgICAgLy8gICBwMi54ID0gYVggKyBhUmFkaXVzICogTWF0aC5jb3MoYVN0YXJ0QW5nbGUpIC8vIGNvcGlsb3Qgc3VnZ2VzdGVkIHRoZSByYWQqY29zXG4gICAgICAgIC8vICAgcDIueSA9IGFZICsgYVJhZGl1cyAqIE1hdGguc2luKGFTdGFydEFuZ2xlKSAvLyBjb3BpbG90IHN1Z2dlc3RlZCB0aGUgcmFkKnNpblxuICAgICAgICAvLyAgIGJyZWFrXG4gICAgICAgIC8vIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIHAyLnggPSBhY3Rpb24uYXJnc1thY3Rpb24uYXJncy5sZW5ndGggLSAyXVxuICAgICAgICAgIHAyLnkgPSBhY3Rpb24uYXJnc1thY3Rpb24uYXJncy5sZW5ndGggLSAxXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGQgPSBQb2ludC5kaXN0YW5jZShwMSwgcDIpXG4gICAgICBpZiAoZCA8IHJkKSB7XG4gICAgICAgIHJuID0gblxuICAgICAgICBycCA9IHAyLmNsb25lKClcbiAgICAgICAgcmQgPSBkXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiB7XG4gICAgICBpOiBybixcbiAgICAgIGRpc3RhbmNlOiByZCxcbiAgICAgIHBvaW50OiBycCxcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcG9pbnRBdChpbmRleDogbnVtYmVyKSB7XG4gICAgY29uc3QgcCA9IG5ldyBQb2ludCgpXG4gICAgY29uc3QgYWN0aW9uID0gdGhpcy5hY3Rpb25zW2luZGV4XVxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgJ0xJTkVfVE8nOlxuICAgICAgICBwLnggPSBhY3Rpb24uYXJnc1thY3Rpb24uYXJncy5sZW5ndGggLSAyXVxuICAgICAgICBwLnkgPSBhY3Rpb24uYXJnc1thY3Rpb24uYXJncy5sZW5ndGggLSAxXVxuICAgICAgICBicmVha1xuICAgICAgLy9UT0RPOiBUSEVSRSBzaG91bGQgYmUgbW9yZSBjYXNlcyBubz8/XG4gICAgfVxuICAgIHJldHVybiBwXG4gIH1cblxuICBwdWJsaWMgc2hpZnRUb05lYXJlc3QoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICBjb25zdCBuZWFyZXN0ID0gdGhpcy5uZWFyZXN0UG9pbnQobmV3IFBvaW50KHgsIHkpKVxuICAgIHJldHVybiB0aGlzLnNoaWZ0KG5lYXJlc3QuaSlcbiAgfVxuXG4gIHB1YmxpYyBzaGlmdChhbjogbnVtYmVyKSB7XG4gICAgaWYgKGFuID09PSAwKSByZXR1cm4gdGhpc1xuXG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFN1YlBhdGgoKVxuXG4gICAgcmVzdWx0LmFjdGlvbnMgPSB0aGlzLmFjdGlvbnMuc2xpY2UoYW4pLmNvbmNhdCh0aGlzLmFjdGlvbnMuc2xpY2UoMCwgYW4pKVxuXG4gICAgcmVzdWx0LmFjdGlvbnMuZm9yRWFjaCgoYWN0aW9uKSA9PiB7XG4gICAgICBhY3Rpb24udHlwZSA9ICdMSU5FX1RPJ1xuICAgIH0pXG5cbiAgICByZXN1bHQubGluZVRvKHJlc3VsdC5hY3Rpb25zWzBdLmFyZ3NbMF0sIHJlc3VsdC5hY3Rpb25zWzBdLmFyZ3NbMV0pXG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBwdWJsaWMgbW92ZVRvKC4uLmFyZ3M6IE1vdmVUb0FjdGlvblsnYXJncyddKSB7XG4gICAgdGhpcy5hZGRBY3Rpb24oeyB0eXBlOiAnTU9WRV9UTycsIGFyZ3MgfSlcbiAgfVxuXG4gIHB1YmxpYyBsaW5lVG8oLi4uYXJnczogTGluZVRvQWN0aW9uWydhcmdzJ10pIHtcbiAgICB0aGlzLmFkZEFjdGlvbih7IHR5cGU6ICdMSU5FX1RPJywgYXJncyB9KVxuICB9XG5cbiAgcHVibGljIHF1YWRyYXRpY0N1cnZlVG8oLi4uYXJnczogUXVhZHJhdGljQ3VydmVUb0FjdGlvblsnYXJncyddKSB7XG4gICAgdGhpcy5hZGRBY3Rpb24oeyB0eXBlOiAnUVVBRFJBVElDX0NVUlZFX1RPJywgYXJncyB9KVxuICB9XG5cbiAgcHVibGljIGJlemllckN1cnZlVG8oLi4uYXJnczogQmV6aWVyQ3VydmVUb0FjdGlvblsnYXJncyddKSB7XG4gICAgdGhpcy5hZGRBY3Rpb24oeyB0eXBlOiAnQkVaSUVSX0NVUlZFX1RPJywgYXJncyB9KVxuICB9XG5cbiAgcHVibGljIGFyYyguLi5hcmdzOiBFbGxpcHNlQWN0aW9uWydhcmdzJ10pIHtcbiAgICB0aGlzLmVsbGlwc2UoLi4uYXJncylcbiAgfVxuXG4gIHB1YmxpYyBlbGxpcHNlKC4uLmFyZ3M6IEVsbGlwc2VBY3Rpb25bJ2FyZ3MnXSkge1xuICAgIHRoaXMuYWRkQWN0aW9uKHsgdHlwZTogJ0VMTElQU0UnLCBhcmdzIH0pXG4gIH1cblxuICBwdWJsaWMgZ2V0UG9pbnRzKGRpdmlzaW9uczogbnVtYmVyID0gNDApOiBQb2ludFtdIHtcbiAgICAvLyBUT0RPOiBJIGRvbid0IHVuZGVyc3RhbmQgd2hhdCB0aGlzIGRvZXNcbiAgICAvLyBpZiAodGhpcy5wb2ludHNDYWNoZVtkaXZpc2lvbnNdKSByZXR1cm4gdGhpcy5wb2ludHNDYWNoZVtkaXZpc2lvbnNdXG5cbiAgICBjb25zdCBwb2ludHM6IFBvaW50W10gPSBbXVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGlsID0gdGhpcy5hY3Rpb25zLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMuYWN0aW9uc1tpXVxuXG4gICAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ01PVkVfVE8nOlxuICAgICAgICAgIHBvaW50cy5wdXNoKG5ldyBQb2ludChhY3Rpb24uYXJnc1swXSwgYWN0aW9uLmFyZ3NbMV0pKVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSAnTElORV9UTyc6XG4gICAgICAgICAgcG9pbnRzLnB1c2gobmV3IFBvaW50KGFjdGlvbi5hcmdzWzBdLCBhY3Rpb24uYXJnc1sxXSkpXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICdRVUFEUkFUSUNfQ1VSVkVfVE8nOiB7XG4gICAgICAgICAgbGV0IGNweDA6IG51bWJlciwgY3B5MDogbnVtYmVyXG4gICAgICAgICAgY29uc3QgW2FDUHgsIGFDUHksIGFYLCBhWV0gPSBhY3Rpb24uYXJnc1xuXG4gICAgICAgICAgaWYgKHBvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0RSA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV1cblxuICAgICAgICAgICAgY3B4MCA9IGxhc3RFLnhcbiAgICAgICAgICAgIGNweTAgPSBsYXN0RS55XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHRoaXMgZG9lc24ndCBtYWtlIG11Y2ggc2Vuc2UgLi4uLlxuICAgICAgICAgICAgY29uc3QgbGFzdEFjdGlvbiA9IHRoaXMuYWN0aW9uc1tpIC0gMV1cblxuICAgICAgICAgICAgaWYgKC8qbGFzdEFjdGlvbi50eXBlICE9PSAnQVJDJyAmJiAqLyBsYXN0QWN0aW9uLnR5cGUgIT09ICdFTExJUFNFJykge1xuICAgICAgICAgICAgICBjb25zdCBsYXN0RSA9IGxhc3RBY3Rpb24uYXJnc1xuXG4gICAgICAgICAgICAgIGNweDAgPSBsYXN0RVtsYXN0RS5sZW5ndGggLSAyXVxuICAgICAgICAgICAgICBjcHkwID0gbGFzdEVbbGFzdEUubGVuZ3RoIC0gMV1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFRPRE86IEkgR1VFU1NFRCBUSEVTRVxuICAgICAgICAgICAgICBjcHgwID0gbGFzdEFjdGlvbi5hcmdzWzBdXG4gICAgICAgICAgICAgIGNweTAgPSBsYXN0QWN0aW9uLmFyZ3NbMV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKGxldCBqID0gMTsgaiA8PSBkaXZpc2lvbnM7IGorKykge1xuICAgICAgICAgICAgY29uc3QgdCA9IGogLyBkaXZpc2lvbnNcblxuICAgICAgICAgICAgY29uc3QgdHggPSBiMih0LCBjcHgwLCBhQ1B4LCBhWClcbiAgICAgICAgICAgIGNvbnN0IHR5ID0gYjIodCwgY3B5MCwgYUNQeSwgYVkpXG5cbiAgICAgICAgICAgIHBvaW50cy5wdXNoKG5ldyBQb2ludCh0eCwgdHkpKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cblxuICAgICAgICBjYXNlICdCRVpJRVJfQ1VSVkVfVE8nOiB7XG4gICAgICAgICAgbGV0IGNweDA6IG51bWJlciwgY3B5MDogbnVtYmVyXG4gICAgICAgICAgLy8gICBsZXQgY3B4LCBjcHksIGNweDIsIGNweTIsIGNweDEsIGNweTEsICwgbGFzdEUsIGosIHQsIHR4LCB0eVxuICAgICAgICAgIGNvbnN0IFthQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZXSA9IGFjdGlvbi5hcmdzXG5cbiAgICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RFID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXVxuXG4gICAgICAgICAgICBjcHgwID0gbGFzdEUueFxuICAgICAgICAgICAgY3B5MCA9IGxhc3RFLnlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbGFzdEFjdGlvbiA9IHRoaXMuYWN0aW9uc1tpIC0gMV1cbiAgICAgICAgICAgIGlmICgvKmxhc3RBY3Rpb24udHlwZSAhPT0gJ0FSQycgJiYgKi8gbGFzdEFjdGlvbi50eXBlICE9PSAnRUxMSVBTRScpIHtcbiAgICAgICAgICAgICAgY29uc3QgbGFzdEUgPSBsYXN0QWN0aW9uLmFyZ3NcblxuICAgICAgICAgICAgICBjcHgwID0gbGFzdEVbbGFzdEUubGVuZ3RoIC0gMl1cbiAgICAgICAgICAgICAgY3B5MCA9IGxhc3RFW2xhc3RFLmxlbmd0aCAtIDFdXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBUT0RPOiBJIEdVRVNTRUQgVEhFU0VcbiAgICAgICAgICAgICAgY3B4MCA9IGxhc3RBY3Rpb24uYXJnc1swXVxuICAgICAgICAgICAgICBjcHkwID0gbGFzdEFjdGlvbi5hcmdzWzFdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDE7IGogPD0gZGl2aXNpb25zOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBqIC8gZGl2aXNpb25zXG5cbiAgICAgICAgICAgIGNvbnN0IHR4ID0gYjModCwgY3B4MCwgYUNQMXgsIGFDUDJ4LCBhWClcbiAgICAgICAgICAgIGNvbnN0IHR5ID0gYjModCwgY3B5MCwgYUNQMXksIGFDUDJ5LCBhWSlcblxuICAgICAgICAgICAgcG9pbnRzLnB1c2gobmV3IFBvaW50KHR4LCB0eSkpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgJ0VMTElQU0UnOiB7XG4gICAgICAgICAgbGV0IGosIHRcbiAgICAgICAgICBjb25zdCBbYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhbnRpQ2xvY2t3aXNlXSA9IGFjdGlvbi5hcmdzXG5cbiAgICAgICAgICBsZXQgZGVsdGFBbmdsZSA9IGFFbmRBbmdsZSAtIGFTdGFydEFuZ2xlXG4gICAgICAgICAgbGV0IGFuZ2xlXG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDw9IGRpdmlzaW9uczsgaisrKSB7XG4gICAgICAgICAgICB0ID0gaiAvIGRpdmlzaW9uc1xuXG4gICAgICAgICAgICBpZiAoZGVsdGFBbmdsZSA9PT0gLU1hdGguUEkgKiAyKSBkZWx0YUFuZ2xlID0gTWF0aC5QSSAqIDJcbiAgICAgICAgICAgIGlmIChkZWx0YUFuZ2xlIDwgMCkgZGVsdGFBbmdsZSArPSBNYXRoLlBJICogMlxuICAgICAgICAgICAgaWYgKGRlbHRhQW5nbGUgPiBNYXRoLlBJICogMikgZGVsdGFBbmdsZSAtPSBNYXRoLlBJICogMlxuXG4gICAgICAgICAgICBpZiAoYW50aUNsb2Nrd2lzZSkge1xuICAgICAgICAgICAgICAvLyBzaW4ocGkpIGFuZCBzaW4oMCkgYXJlIHRoZSBzYW1lXG4gICAgICAgICAgICAgIC8vIFNvIHdlIGhhdmUgdG8gc3BlY2lhbCBjYXNlIGZvciBmdWxsIGNpcmNsZXNcbiAgICAgICAgICAgICAgaWYgKGRlbHRhQW5nbGUgPT09IE1hdGguUEkgKiAyKSBkZWx0YUFuZ2xlID0gMFxuICAgICAgICAgICAgICBhbmdsZSA9IGFFbmRBbmdsZSArICgxIC0gdCkgKiAoTWF0aC5QSSAqIDIgLSBkZWx0YUFuZ2xlKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYW5nbGUgPSBhU3RhcnRBbmdsZSArIHQgKiBkZWx0YUFuZ2xlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHR4ID0gYVggKyB4UmFkaXVzICogTWF0aC5jb3MoYW5nbGUpXG4gICAgICAgICAgICBjb25zdCB0eSA9IGFZICsgeVJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKVxuXG4gICAgICAgICAgICBwb2ludHMucHVzaChuZXcgUG9pbnQodHgsIHR5KSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2xvc2VkKSBwb2ludHMucHVzaChwb2ludHNbMF0pXG5cbiAgICAvLyB0aGlzLnBvaW50c0NhY2hlW2RpdmlzaW9uc10gPSBwb2ludHM7XG4gICAgcmV0dXJuIHBvaW50c1xuICB9XG5cbiAgcHVibGljIHRvUG9seShzY2FsZTogbnVtYmVyLCBkaXZpc2lvbnM/OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQb2ludHMoZGl2aXNpb25zKS5tYXAoKHApID0+IHtcbiAgICAgIHJldHVybiB7IFg6IHAueCAqIHNjYWxlLCBZOiBwLnkgKiBzY2FsZSB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIHB1YmxpYyBmcm9tUG9seShwb2x5OiB7WDogbnVtYmVyOyBZOiBudW1iZXJ9LCBzY2FsZTogbnVtYmVyKSB7XG4gIC8vICAgc2NhbGUgPSAxL3NjYWxlXG4gIC8vIH1cblxuICBwdWJsaWMgZnJvbVBvbHlzKHBvbHk6IHsgWDogbnVtYmVyOyBZOiBudW1iZXIgfVtdLCBzY2FsZTogbnVtYmVyKSB7XG4gICAgc2NhbGUgPSAxIC8gc2NhbGVcblxuICAgIHRoaXMubW92ZVRvKHBvbHlbMF0uWCAqIHNjYWxlLCBwb2x5WzBdLlkgKiBzY2FsZSlcblxuICAgIGZvciAobGV0IGkgPSAxLCBsID0gcG9seS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgIHRoaXMubGluZVRvKHBvbHlbaV0uWCAqIHNjYWxlLCBwb2x5W2ldLlkgKiBzY2FsZSlcbiAgICB9XG5cbiAgICB0aGlzLmNsb3NlKClcbiAgICAvLyB0b2RvOiBjbG9zZSBwcm9wZXJseSAoY2xvc2VQYXRoKCkpXG4gICAgLy8gdGhpcy5saW5lVG8ocG9seVswXS5YKnNjYWxlLCBwb2x5WzBdLlkqc2NhbGUpO1xuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgcHVibGljIGNsb3NlKCkge1xuICAgIGlmICh0aGlzLmlzQ2xvc2VkKCkpIHJldHVyblxuXG4gICAgY29uc3QgY3VyU3RhcnQgPSB0aGlzLmFjdGlvbnNbMF0uYXJnc1xuICAgIHRoaXMubGluZVRvLmFwcGx5KHRoaXMsIGN1clN0YXJ0KVxuICB9XG4gIHB1YmxpYyByZXZlcnNlKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTdWJQYXRoKClcbiAgICBjb25zdCBwdHMgPSB0aGlzLmdldFBvaW50cygpLnJldmVyc2UoKVxuICAgIGlmIChwdHMubGVuZ3RoID09IDApIHJldHVybiByZXN1bHRcbiAgICByZXN1bHQubW92ZVRvKHB0c1swXS54LCBwdHNbMF0ueSlcbiAgICBmb3IgKGxldCBpID0gMSwgbCA9IHB0cy5sZW5ndGg7IGkgPCBsOyArK2kpIHJlc3VsdC5saW5lVG8ocHRzW2ldLngsIHB0c1tpXS55KVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vLyBCZXppZXIgQ3VydmVzIGZvcm11bGFzIG9idGFpbmVkIGZyb21cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQiVDMyVBOXppZXJfY3VydmVcblxuLy8gUXVhZCBCZXppZXIgRnVuY3Rpb25zXG5jb25zdCBiMnAwID0gKHQ6IG51bWJlciwgcDogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IGsgPSAxIC0gdFxuICByZXR1cm4gayAqIGsgKiBwXG59XG5jb25zdCBiMnAxID0gKHQ6IG51bWJlciwgcDogbnVtYmVyKSA9PiAyICogKDEgLSB0KSAqIHQgKiBwXG5jb25zdCBiMnAyID0gKHQ6IG51bWJlciwgcDogbnVtYmVyKSA9PiB0ICogdCAqIHBcbmNvbnN0IGIyID0gKHQ6IG51bWJlciwgcDA6IG51bWJlciwgcDE6IG51bWJlciwgcDI6IG51bWJlcikgPT4gYjJwMCh0LCBwMCkgKyBiMnAxKHQsIHAxKSArIGIycDIodCwgcDIpXG5cbi8vIEN1YmljIEJlemllciBGdW5jdGlvbnNcbmNvbnN0IGIzcDAgPSAodDogbnVtYmVyLCBwOiBudW1iZXIpID0+IHtcbiAgY29uc3QgayA9IDEgLSB0XG4gIHJldHVybiBrICogayAqIGsgKiBwXG59XG5jb25zdCBiM3AxID0gKHQ6IG51bWJlciwgcDogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IGsgPSAxIC0gdFxuICByZXR1cm4gMyAqIGsgKiBrICogdCAqIHBcbn1cbmNvbnN0IGIzcDIgPSAodDogbnVtYmVyLCBwOiBudW1iZXIpID0+IHtcbiAgY29uc3QgayA9IDEgLSB0XG4gIHJldHVybiAzICogayAqIHQgKiB0ICogcFxufVxuY29uc3QgYjNwMyA9ICh0OiBudW1iZXIsIHA6IG51bWJlcikgPT4gdCAqIHQgKiB0ICogcFxuY29uc3QgYjMgPSAodDogbnVtYmVyLCBwMDogbnVtYmVyLCBwMTogbnVtYmVyLCBwMjogbnVtYmVyLCBwMzogbnVtYmVyKSA9PlxuICBiM3AwKHQsIHAwKSArIGIzcDEodCwgcDEpICsgYjNwMih0LCBwMikgKyBiM3AzKHQsIHAzKVxuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogQXV0aG9yICAgIDogIEFuZ3VzIEpvaG5zb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBWZXJzaW9uICAgOiAgNi40LjIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIERhdGUgICAgICA6ICAyNyBGZWJydWFyeSAyMDE3ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogV2Vic2l0ZSAgIDogIGh0dHA6Ly93d3cuYW5ndXNqLmNvbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBDb3B5cmlnaHQgOiAgQW5ndXMgSm9obnNvbiAyMDEwLTIwMTcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogTGljZW5zZTogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBVc2UsIG1vZGlmaWNhdGlvbiAmIGRpc3RyaWJ1dGlvbiBpcyBzdWJqZWN0IHRvIEJvb3N0IFNvZnR3YXJlIExpY2Vuc2UgVmVyIDEuICpcbiAqIGh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBBdHRyaWJ1dGlvbnM6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFRoZSBjb2RlIGluIHRoaXMgbGlicmFyeSBpcyBhbiBleHRlbnNpb24gb2YgQmFsYSBWYXR0aSdzIGNsaXBwaW5nIGFsZ29yaXRobTogKlxuICogXCJBIGdlbmVyaWMgc29sdXRpb24gdG8gcG9seWdvbiBjbGlwcGluZ1wiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIENvbW11bmljYXRpb25zIG9mIHRoZSBBQ00sIFZvbCAzNSwgSXNzdWUgNyAoSnVseSAxOTkyKSBwcCA1Ni02My4gICAgICAgICAgICAgKlxuICogaHR0cDovL3BvcnRhbC5hY20ub3JnL2NpdGF0aW9uLmNmbT9pZD0xMjk5MDYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIENvbXB1dGVyIGdyYXBoaWNzIGFuZCBnZW9tZXRyaWMgbW9kZWxpbmc6IGltcGxlbWVudGF0aW9uIGFuZCBhbGdvcml0aG1zICAgICAgKlxuICogQnkgTWF4IEsuIEFnb3N0b24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBTcHJpbmdlcjsgMSBlZGl0aW9uIChKYW51YXJ5IDQsIDIwMDUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIGh0dHA6Ly9ib29rcy5nb29nbGUuY29tL2Jvb2tzP3E9dmF0dGkrY2xpcHBpbmcrYWdvc3RvbiAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBTZWUgYWxzbzogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFwiUG9seWdvbiBPZmZzZXR0aW5nIGJ5IENvbXB1dGluZyBXaW5kaW5nIE51bWJlcnNcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBQYXBlciBuby4gREVUQzIwMDUtODU1MTMgcHAuIDU2NS01NzUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIEFTTUUgMjAwNSBJbnRlcm5hdGlvbmFsIERlc2lnbiBFbmdpbmVlcmluZyBUZWNobmljYWwgQ29uZmVyZW5jZXMgICAgICAgICAgICAgKlxuICogYW5kIENvbXB1dGVycyBhbmQgSW5mb3JtYXRpb24gaW4gRW5naW5lZXJpbmcgQ29uZmVyZW5jZSAoSURFVEMvQ0lFMjAwNSkgICAgICAqXG4gKiBTZXB0ZW1iZXIgMjQtMjgsIDIwMDUgLCBMb25nIEJlYWNoLCBDYWxpZm9ybmlhLCBVU0EgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIGh0dHA6Ly93d3cubWUuYmVya2VsZXkuZWR1L35tY21haW5zL3B1YnMvREFDMDVPZmZzZXRQb2x5Z29uLnBkZiAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIEF1dGhvciAgICA6ICBUaW1vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogVmVyc2lvbiAgIDogIDYuNC4yLjIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBEYXRlICAgICAgOiAgOCBTZXB0ZW1iZXIgMjAxNyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFRoaXMgaXMgYSB0cmFuc2xhdGlvbiBvZiB0aGUgQyMgQ2xpcHBlciBsaWJyYXJ5IHRvIEphdmFzY3JpcHQuICAgICAgICAgICAgICAgKlxuICogSW50MTI4IHN0cnVjdCBvZiBDIyBpcyBpbXBsZW1lbnRlZCB1c2luZyBKU0JOIG9mIFRvbSBXdS4gICAgICAgICAgICAgICAgICAgICAqXG4gKiBCZWNhdXNlIEphdmFzY3JpcHQgbGFja3Mgc3VwcG9ydCBmb3IgNjQtYml0IGludGVnZXJzLCB0aGUgc3BhY2UgICAgICAgICAgICAgICpcbiAqIGlzIGEgbGl0dGxlIG1vcmUgcmVzdHJpY3RlZCB0aGFuIGluIEMjIHZlcnNpb24uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBDIyB2ZXJzaW9uIGhhcyBzdXBwb3J0IGZvciBjb29yZGluYXRlIHNwYWNlOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICstNDYxMTY4NjAxODQyNzM4NzkwMyAoIHNxcnQoMl4xMjcgLTEpLzIgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogd2hpbGUgSmF2YXNjcmlwdCB2ZXJzaW9uIGhhcyBzdXBwb3J0IGZvciBzcGFjZTogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiArLTQ1MDM1OTk2MjczNzA0OTUgKCBzcXJ0KDJeMTA2IC0xKS8yICkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogVG9tIFd1J3MgSlNCTiBwcm92ZWQgdG8gYmUgdGhlIGZhc3Rlc3QgYmlnIGludGVnZXIgbGlicmFyeTogICAgICAgICAgICAgICAgICAqXG4gKiBodHRwOi8vanNwZXJmLmNvbS9iaWctaW50ZWdlci1saWJyYXJ5LXRlc3QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogVGhpcyBjbGFzcyBjYW4gYmUgbWFkZSBzaW1wbGVyIHdoZW4gKGlmIGV2ZXIpIDY0LWJpdCBpbnRlZ2VyIHN1cHBvcnQgY29tZXMgICAqXG4gKiBvciBmbG9hdGluZyBwb2ludCBDbGlwcGVyIGlzIHJlbGVhc2VkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBCYXNpYyBKYXZhU2NyaXB0IEJOIGxpYnJhcnkgLSBzdWJzZXQgdXNlZnVsIGZvciBSU0EgZW5jcnlwdGlvbi4gICAgICAgICAgICAgICpcbiAqIGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogQ29weXJpZ2h0IChjKSAyMDA1ICBUb20gV3UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBBbGwgUmlnaHRzIFJlc2VydmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIFNlZSBcIkxJQ0VOU0VcIiBmb3IgZGV0YWlsczogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vTElDRU5TRSAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4oZnVuY3Rpb24gKClcbntcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBDbGlwcGVyTGliID0ge307XG5cdENsaXBwZXJMaWIudmVyc2lvbiA9ICc2LjQuMi4yJztcblxuXHQvL1VzZUxpbmVzOiBFbmFibGVzIG9wZW4gcGF0aCBjbGlwcGluZy4gQWRkcyBhIHZlcnkgbWlub3IgY29zdCB0byBwZXJmb3JtYW5jZS5cblx0Q2xpcHBlckxpYi51c2VfbGluZXMgPSB0cnVlO1xuXG5cdC8vQ2xpcHBlckxpYi51c2VfeHl6OiBhZGRzIGEgWiBtZW1iZXIgdG8gSW50UG9pbnQuIEFkZHMgYSBtaW5vciBjb3N0IHRvIHBlcmZvcm1hbmNlLlxuXHRDbGlwcGVyTGliLnVzZV94eXogPSBmYWxzZTtcblxuXHR2YXIgaXNOb2RlID0gZmFsc2U7XG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cylcblx0e1xuXHRcdG1vZHVsZS5leHBvcnRzID0gQ2xpcHBlckxpYjtcblx0XHRpc05vZGUgPSB0cnVlO1xuXHR9XG5cdGVsc2Vcblx0e1xuXHRcdGlmICh0eXBlb2YgKGRvY3VtZW50KSAhPT0gXCJ1bmRlZmluZWRcIikgd2luZG93LkNsaXBwZXJMaWIgPSBDbGlwcGVyTGliO1xuXHRcdGVsc2Ugc2VsZlsnQ2xpcHBlckxpYiddID0gQ2xpcHBlckxpYjtcblx0fVxuXHR2YXIgbmF2aWdhdG9yX2FwcE5hbWU7XG5cdGlmICghaXNOb2RlKVxuXHR7XG5cdFx0dmFyIG5hdiA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xuXHRcdG5hdmlnYXRvcl9hcHBOYW1lID0gbmF2aWdhdG9yLmFwcE5hbWU7XG5cdH1cblx0ZWxzZVxuXHR7XG5cdFx0dmFyIG5hdiA9IFwiY2hyb21lXCI7IC8vIE5vZGUuanMgdXNlcyBDaHJvbWUncyBWOCBlbmdpbmVcblx0XHRuYXZpZ2F0b3JfYXBwTmFtZSA9IFwiTmV0c2NhcGVcIjsgLy8gRmlyZWZveCwgQ2hyb21lIGFuZCBTYWZhcmkgcmV0dXJucyBcIk5ldHNjYXBlXCIsIHNvIE5vZGUuanMgc2hvdWxkIGFsc29cblx0fVxuXHQvLyBCcm93c2VyIHRlc3QgdG8gc3BlZWR1cCBwZXJmb3JtYW5jZSBjcml0aWNhbCBmdW5jdGlvbnNcblx0dmFyIGJyb3dzZXIgPSB7fTtcblxuXHRpZiAobmF2LmluZGV4T2YoXCJjaHJvbWVcIikgIT0gLTEgJiYgbmF2LmluZGV4T2YoXCJjaHJvbWl1bVwiKSA9PSAtMSkgYnJvd3Nlci5jaHJvbWUgPSAxO1xuXHRlbHNlIGJyb3dzZXIuY2hyb21lID0gMDtcblx0aWYgKG5hdi5pbmRleE9mKFwiY2hyb21pdW1cIikgIT0gLTEpIGJyb3dzZXIuY2hyb21pdW0gPSAxO1xuXHRlbHNlIGJyb3dzZXIuY2hyb21pdW0gPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJzYWZhcmlcIikgIT0gLTEgJiYgbmF2LmluZGV4T2YoXCJjaHJvbWVcIikgPT0gLTEgJiYgbmF2LmluZGV4T2YoXCJjaHJvbWl1bVwiKSA9PSAtMSkgYnJvd3Nlci5zYWZhcmkgPSAxO1xuXHRlbHNlIGJyb3dzZXIuc2FmYXJpID0gMDtcblx0aWYgKG5hdi5pbmRleE9mKFwiZmlyZWZveFwiKSAhPSAtMSkgYnJvd3Nlci5maXJlZm94ID0gMTtcblx0ZWxzZSBicm93c2VyLmZpcmVmb3ggPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJmaXJlZm94LzE3XCIpICE9IC0xKSBicm93c2VyLmZpcmVmb3gxNyA9IDE7XG5cdGVsc2UgYnJvd3Nlci5maXJlZm94MTcgPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJmaXJlZm94LzE1XCIpICE9IC0xKSBicm93c2VyLmZpcmVmb3gxNSA9IDE7XG5cdGVsc2UgYnJvd3Nlci5maXJlZm94MTUgPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJmaXJlZm94LzNcIikgIT0gLTEpIGJyb3dzZXIuZmlyZWZveDMgPSAxO1xuXHRlbHNlIGJyb3dzZXIuZmlyZWZveDMgPSAwO1xuXHRpZiAobmF2LmluZGV4T2YoXCJvcGVyYVwiKSAhPSAtMSkgYnJvd3Nlci5vcGVyYSA9IDE7XG5cdGVsc2UgYnJvd3Nlci5vcGVyYSA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgMTBcIikgIT0gLTEpIGJyb3dzZXIubXNpZTEwID0gMTtcblx0ZWxzZSBicm93c2VyLm1zaWUxMCA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgOVwiKSAhPSAtMSkgYnJvd3Nlci5tc2llOSA9IDE7XG5cdGVsc2UgYnJvd3Nlci5tc2llOSA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgOFwiKSAhPSAtMSkgYnJvd3Nlci5tc2llOCA9IDE7XG5cdGVsc2UgYnJvd3Nlci5tc2llOCA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgN1wiKSAhPSAtMSkgYnJvd3Nlci5tc2llNyA9IDE7XG5cdGVsc2UgYnJvd3Nlci5tc2llNyA9IDA7XG5cdGlmIChuYXYuaW5kZXhPZihcIm1zaWUgXCIpICE9IC0xKSBicm93c2VyLm1zaWUgPSAxO1xuXHRlbHNlIGJyb3dzZXIubXNpZSA9IDA7XG5cdENsaXBwZXJMaWIuYmlnaW50ZWdlcl91c2VkID0gbnVsbDtcblxuXHQvLyBDb3B5cmlnaHQgKGMpIDIwMDUgIFRvbSBXdVxuXHQvLyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXHQvLyBTZWUgXCJMSUNFTlNFXCIgZm9yIGRldGFpbHMuXG5cdC8vIEJhc2ljIEphdmFTY3JpcHQgQk4gbGlicmFyeSAtIHN1YnNldCB1c2VmdWwgZm9yIFJTQSBlbmNyeXB0aW9uLlxuXHQvLyBCaXRzIHBlciBkaWdpdFxuXHR2YXIgZGJpdHM7XG5cdC8vIEphdmFTY3JpcHQgZW5naW5lIGFuYWx5c2lzXG5cdHZhciBjYW5hcnkgPSAweGRlYWRiZWVmY2FmZTtcblx0dmFyIGpfbG0gPSAoKGNhbmFyeSAmIDB4ZmZmZmZmKSA9PSAweGVmY2FmZSk7XG5cdC8vIChwdWJsaWMpIENvbnN0cnVjdG9yXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRmdW5jdGlvbiBCaWdJbnRlZ2VyKGEsIGIsIGMpXG5cdHtcblx0XHQvLyBUaGlzIHRlc3QgdmFyaWFibGUgY2FuIGJlIHJlbW92ZWQsXG5cdFx0Ly8gYnV0IGF0IGxlYXN0IGZvciBwZXJmb3JtYW5jZSB0ZXN0cyBpdCBpcyB1c2VmdWwgcGllY2Ugb2Yga25vd2xlZGdlXG5cdFx0Ly8gVGhpcyBpcyB0aGUgb25seSBDbGlwcGVyTGliIHJlbGF0ZWQgdmFyaWFibGUgaW4gQmlnSW50ZWdlciBsaWJyYXJ5XG5cdFx0Q2xpcHBlckxpYi5iaWdpbnRlZ2VyX3VzZWQgPSAxO1xuXHRcdGlmIChhICE9IG51bGwpXG5cdFx0XHRpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYSAmJiBcInVuZGVmaW5lZFwiID09IHR5cGVvZiAoYikpIHRoaXMuZnJvbUludChhKTsgLy8gZmFzdGVyIGNvbnZlcnNpb25cblx0XHRcdGVsc2UgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIGEpIHRoaXMuZnJvbU51bWJlcihhLCBiLCBjKTtcblx0XHRlbHNlIGlmIChiID09IG51bGwgJiYgXCJzdHJpbmdcIiAhPSB0eXBlb2YgYSkgdGhpcy5mcm9tU3RyaW5nKGEsIDI1Nik7XG5cdFx0ZWxzZSB0aGlzLmZyb21TdHJpbmcoYSwgYik7XG5cdH1cblx0Ly8gcmV0dXJuIG5ldywgdW5zZXQgQmlnSW50ZWdlclxuXHRmdW5jdGlvbiBuYmkoKVxuXHR7XG5cdFx0cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKG51bGwsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcblx0fVxuXHQvLyBhbTogQ29tcHV0ZSB3X2ogKz0gKHgqdGhpc19pKSwgcHJvcGFnYXRlIGNhcnJpZXMsXG5cdC8vIGMgaXMgaW5pdGlhbCBjYXJyeSwgcmV0dXJucyBmaW5hbCBjYXJyeS5cblx0Ly8gYyA8IDMqZHZhbHVlLCB4IDwgMipkdmFsdWUsIHRoaXNfaSA8IGR2YWx1ZVxuXHQvLyBXZSBuZWVkIHRvIHNlbGVjdCB0aGUgZmFzdGVzdCBvbmUgdGhhdCB3b3JrcyBpbiB0aGlzIGVudmlyb25tZW50LlxuXHQvLyBhbTE6IHVzZSBhIHNpbmdsZSBtdWx0IGFuZCBkaXZpZGUgdG8gZ2V0IHRoZSBoaWdoIGJpdHMsXG5cdC8vIG1heCBkaWdpdCBiaXRzIHNob3VsZCBiZSAyNiBiZWNhdXNlXG5cdC8vIG1heCBpbnRlcm5hbCB2YWx1ZSA9IDIqZHZhbHVlXjItMipkdmFsdWUgKDwgMl41Mylcblx0ZnVuY3Rpb24gYW0xKGksIHgsIHcsIGosIGMsIG4pXG5cdHtcblx0XHR3aGlsZSAoLS1uID49IDApXG5cdFx0e1xuXHRcdFx0dmFyIHYgPSB4ICogdGhpc1tpKytdICsgd1tqXSArIGM7XG5cdFx0XHRjID0gTWF0aC5mbG9vcih2IC8gMHg0MDAwMDAwKTtcblx0XHRcdHdbaisrXSA9IHYgJiAweDNmZmZmZmY7XG5cdFx0fVxuXHRcdHJldHVybiBjO1xuXHR9XG5cdC8vIGFtMiBhdm9pZHMgYSBiaWcgbXVsdC1hbmQtZXh0cmFjdCBjb21wbGV0ZWx5LlxuXHQvLyBNYXggZGlnaXQgYml0cyBzaG91bGQgYmUgPD0gMzAgYmVjYXVzZSB3ZSBkbyBiaXR3aXNlIG9wc1xuXHQvLyBvbiB2YWx1ZXMgdXAgdG8gMipoZHZhbHVlXjItaGR2YWx1ZS0xICg8IDJeMzEpXG5cdGZ1bmN0aW9uIGFtMihpLCB4LCB3LCBqLCBjLCBuKVxuXHR7XG5cdFx0dmFyIHhsID0geCAmIDB4N2ZmZixcblx0XHRcdHhoID0geCA+PiAxNTtcblx0XHR3aGlsZSAoLS1uID49IDApXG5cdFx0e1xuXHRcdFx0dmFyIGwgPSB0aGlzW2ldICYgMHg3ZmZmO1xuXHRcdFx0dmFyIGggPSB0aGlzW2krK10gPj4gMTU7XG5cdFx0XHR2YXIgbSA9IHhoICogbCArIGggKiB4bDtcblx0XHRcdGwgPSB4bCAqIGwgKyAoKG0gJiAweDdmZmYpIDw8IDE1KSArIHdbal0gKyAoYyAmIDB4M2ZmZmZmZmYpO1xuXHRcdFx0YyA9IChsID4+PiAzMCkgKyAobSA+Pj4gMTUpICsgeGggKiBoICsgKGMgPj4+IDMwKTtcblx0XHRcdHdbaisrXSA9IGwgJiAweDNmZmZmZmZmO1xuXHRcdH1cblx0XHRyZXR1cm4gYztcblx0fVxuXHQvLyBBbHRlcm5hdGVseSwgc2V0IG1heCBkaWdpdCBiaXRzIHRvIDI4IHNpbmNlIHNvbWVcblx0Ly8gYnJvd3NlcnMgc2xvdyBkb3duIHdoZW4gZGVhbGluZyB3aXRoIDMyLWJpdCBudW1iZXJzLlxuXHRmdW5jdGlvbiBhbTMoaSwgeCwgdywgaiwgYywgbilcblx0e1xuXHRcdHZhciB4bCA9IHggJiAweDNmZmYsXG5cdFx0XHR4aCA9IHggPj4gMTQ7XG5cdFx0d2hpbGUgKC0tbiA+PSAwKVxuXHRcdHtcblx0XHRcdHZhciBsID0gdGhpc1tpXSAmIDB4M2ZmZjtcblx0XHRcdHZhciBoID0gdGhpc1tpKytdID4+IDE0O1xuXHRcdFx0dmFyIG0gPSB4aCAqIGwgKyBoICogeGw7XG5cdFx0XHRsID0geGwgKiBsICsgKChtICYgMHgzZmZmKSA8PCAxNCkgKyB3W2pdICsgYztcblx0XHRcdGMgPSAobCA+PiAyOCkgKyAobSA+PiAxNCkgKyB4aCAqIGg7XG5cdFx0XHR3W2orK10gPSBsICYgMHhmZmZmZmZmO1xuXHRcdH1cblx0XHRyZXR1cm4gYztcblx0fVxuXHRpZiAoal9sbSAmJiAobmF2aWdhdG9yX2FwcE5hbWUgPT0gXCJNaWNyb3NvZnQgSW50ZXJuZXQgRXhwbG9yZXJcIikpXG5cdHtcblx0XHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGFtMjtcblx0XHRkYml0cyA9IDMwO1xuXHR9XG5cdGVsc2UgaWYgKGpfbG0gJiYgKG5hdmlnYXRvcl9hcHBOYW1lICE9IFwiTmV0c2NhcGVcIikpXG5cdHtcblx0XHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGFtMTtcblx0XHRkYml0cyA9IDI2O1xuXHR9XG5cdGVsc2Vcblx0eyAvLyBNb3ppbGxhL05ldHNjYXBlIHNlZW1zIHRvIHByZWZlciBhbTNcblx0XHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbSA9IGFtMztcblx0XHRkYml0cyA9IDI4O1xuXHR9XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLkRCID0gZGJpdHM7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLkRNID0gKCgxIDw8IGRiaXRzKSAtIDEpO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5EViA9ICgxIDw8IGRiaXRzKTtcblx0dmFyIEJJX0ZQID0gNTI7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLkZWID0gTWF0aC5wb3coMiwgQklfRlApO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5GMSA9IEJJX0ZQIC0gZGJpdHM7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLkYyID0gMiAqIGRiaXRzIC0gQklfRlA7XG5cdC8vIERpZ2l0IGNvbnZlcnNpb25zXG5cdHZhciBCSV9STSA9IFwiMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XG5cdHZhciBCSV9SQyA9IG5ldyBBcnJheSgpO1xuXHR2YXIgcnIsIHZ2O1xuXHRyciA9IFwiMFwiLmNoYXJDb2RlQXQoMCk7XG5cdGZvciAodnYgPSAwOyB2diA8PSA5OyArK3Z2KSBCSV9SQ1tycisrXSA9IHZ2O1xuXHRyciA9IFwiYVwiLmNoYXJDb2RlQXQoMCk7XG5cdGZvciAodnYgPSAxMDsgdnYgPCAzNjsgKyt2dikgQklfUkNbcnIrK10gPSB2djtcblx0cnIgPSBcIkFcIi5jaGFyQ29kZUF0KDApO1xuXHRmb3IgKHZ2ID0gMTA7IHZ2IDwgMzY7ICsrdnYpIEJJX1JDW3JyKytdID0gdnY7XG5cblx0ZnVuY3Rpb24gaW50MmNoYXIobilcblx0e1xuXHRcdHJldHVybiBCSV9STS5jaGFyQXQobik7XG5cdH1cblxuXHRmdW5jdGlvbiBpbnRBdChzLCBpKVxuXHR7XG5cdFx0dmFyIGMgPSBCSV9SQ1tzLmNoYXJDb2RlQXQoaSldO1xuXHRcdHJldHVybiAoYyA9PSBudWxsKSA/IC0xIDogYztcblx0fVxuXHQvLyAocHJvdGVjdGVkKSBjb3B5IHRoaXMgdG8gclxuXHRmdW5jdGlvbiBibnBDb3B5VG8ocilcblx0e1xuXHRcdGZvciAodmFyIGkgPSB0aGlzLnQgLSAxOyBpID49IDA7IC0taSkgcltpXSA9IHRoaXNbaV07XG5cdFx0ci50ID0gdGhpcy50O1xuXHRcdHIucyA9IHRoaXMucztcblx0fVxuXHQvLyAocHJvdGVjdGVkKSBzZXQgZnJvbSBpbnRlZ2VyIHZhbHVlIHgsIC1EViA8PSB4IDwgRFZcblx0ZnVuY3Rpb24gYm5wRnJvbUludCh4KVxuXHR7XG5cdFx0dGhpcy50ID0gMTtcblx0XHR0aGlzLnMgPSAoeCA8IDApID8gLTEgOiAwO1xuXHRcdGlmICh4ID4gMCkgdGhpc1swXSA9IHg7XG5cdFx0ZWxzZSBpZiAoeCA8IC0xKSB0aGlzWzBdID0geCArIHRoaXMuRFY7XG5cdFx0ZWxzZSB0aGlzLnQgPSAwO1xuXHR9XG5cdC8vIHJldHVybiBiaWdpbnQgaW5pdGlhbGl6ZWQgdG8gdmFsdWVcblx0ZnVuY3Rpb24gbmJ2KGkpXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdHIuZnJvbUludChpKTtcblx0XHRyZXR1cm4gcjtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSBzZXQgZnJvbSBzdHJpbmcgYW5kIHJhZGl4XG5cdGZ1bmN0aW9uIGJucEZyb21TdHJpbmcocywgYilcblx0e1xuXHRcdHZhciBrO1xuXHRcdGlmIChiID09IDE2KSBrID0gNDtcblx0XHRlbHNlIGlmIChiID09IDgpIGsgPSAzO1xuXHRcdGVsc2UgaWYgKGIgPT0gMjU2KSBrID0gODsgLy8gYnl0ZSBhcnJheVxuXHRcdGVsc2UgaWYgKGIgPT0gMikgayA9IDE7XG5cdFx0ZWxzZSBpZiAoYiA9PSAzMikgayA9IDU7XG5cdFx0ZWxzZSBpZiAoYiA9PSA0KSBrID0gMjtcblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dGhpcy5mcm9tUmFkaXgocywgYik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMudCA9IDA7XG5cdFx0dGhpcy5zID0gMDtcblx0XHR2YXIgaSA9IHMubGVuZ3RoLFxuXHRcdFx0bWkgPSBmYWxzZSxcblx0XHRcdHNoID0gMDtcblx0XHR3aGlsZSAoLS1pID49IDApXG5cdFx0e1xuXHRcdFx0dmFyIHggPSAoayA9PSA4KSA/IHNbaV0gJiAweGZmIDogaW50QXQocywgaSk7XG5cdFx0XHRpZiAoeCA8IDApXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChzLmNoYXJBdChpKSA9PSBcIi1cIikgbWkgPSB0cnVlO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdG1pID0gZmFsc2U7XG5cdFx0XHRpZiAoc2ggPT0gMClcblx0XHRcdFx0dGhpc1t0aGlzLnQrK10gPSB4O1xuXHRcdFx0ZWxzZSBpZiAoc2ggKyBrID4gdGhpcy5EQilcblx0XHRcdHtcblx0XHRcdFx0dGhpc1t0aGlzLnQgLSAxXSB8PSAoeCAmICgoMSA8PCAodGhpcy5EQiAtIHNoKSkgLSAxKSkgPDwgc2g7XG5cdFx0XHRcdHRoaXNbdGhpcy50KytdID0gKHggPj4gKHRoaXMuREIgLSBzaCkpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHR0aGlzW3RoaXMudCAtIDFdIHw9IHggPDwgc2g7XG5cdFx0XHRzaCArPSBrO1xuXHRcdFx0aWYgKHNoID49IHRoaXMuREIpIHNoIC09IHRoaXMuREI7XG5cdFx0fVxuXHRcdGlmIChrID09IDggJiYgKHNbMF0gJiAweDgwKSAhPSAwKVxuXHRcdHtcblx0XHRcdHRoaXMucyA9IC0xO1xuXHRcdFx0aWYgKHNoID4gMCkgdGhpc1t0aGlzLnQgLSAxXSB8PSAoKDEgPDwgKHRoaXMuREIgLSBzaCkpIC0gMSkgPDwgc2g7XG5cdFx0fVxuXHRcdHRoaXMuY2xhbXAoKTtcblx0XHRpZiAobWkpIEJpZ0ludGVnZXIuWkVSTy5zdWJUbyh0aGlzLCB0aGlzKTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSBjbGFtcCBvZmYgZXhjZXNzIGhpZ2ggd29yZHNcblx0ZnVuY3Rpb24gYm5wQ2xhbXAoKVxuXHR7XG5cdFx0dmFyIGMgPSB0aGlzLnMgJiB0aGlzLkRNO1xuXHRcdHdoaWxlICh0aGlzLnQgPiAwICYmIHRoaXNbdGhpcy50IC0gMV0gPT0gYykgLS10aGlzLnQ7XG5cdH1cblx0Ly8gKHB1YmxpYykgcmV0dXJuIHN0cmluZyByZXByZXNlbnRhdGlvbiBpbiBnaXZlbiByYWRpeFxuXHRmdW5jdGlvbiBiblRvU3RyaW5nKGIpXG5cdHtcblx0XHRpZiAodGhpcy5zIDwgMCkgcmV0dXJuIFwiLVwiICsgdGhpcy5uZWdhdGUoKS50b1N0cmluZyhiKTtcblx0XHR2YXIgaztcblx0XHRpZiAoYiA9PSAxNikgayA9IDQ7XG5cdFx0ZWxzZSBpZiAoYiA9PSA4KSBrID0gMztcblx0XHRlbHNlIGlmIChiID09IDIpIGsgPSAxO1xuXHRcdGVsc2UgaWYgKGIgPT0gMzIpIGsgPSA1O1xuXHRcdGVsc2UgaWYgKGIgPT0gNCkgayA9IDI7XG5cdFx0ZWxzZSByZXR1cm4gdGhpcy50b1JhZGl4KGIpO1xuXHRcdHZhciBrbSA9ICgxIDw8IGspIC0gMSxcblx0XHRcdGQsIG0gPSBmYWxzZSxcblx0XHRcdHIgPSBcIlwiLFxuXHRcdFx0aSA9IHRoaXMudDtcblx0XHR2YXIgcCA9IHRoaXMuREIgLSAoaSAqIHRoaXMuREIpICUgaztcblx0XHRpZiAoaS0tID4gMClcblx0XHR7XG5cdFx0XHRpZiAocCA8IHRoaXMuREIgJiYgKGQgPSB0aGlzW2ldID4+IHApID4gMClcblx0XHRcdHtcblx0XHRcdFx0bSA9IHRydWU7XG5cdFx0XHRcdHIgPSBpbnQyY2hhcihkKTtcblx0XHRcdH1cblx0XHRcdHdoaWxlIChpID49IDApXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChwIDwgaylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGQgPSAodGhpc1tpXSAmICgoMSA8PCBwKSAtIDEpKSA8PCAoayAtIHApO1xuXHRcdFx0XHRcdGQgfD0gdGhpc1stLWldID4+IChwICs9IHRoaXMuREIgLSBrKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRkID0gKHRoaXNbaV0gPj4gKHAgLT0gaykpICYga207XG5cdFx0XHRcdFx0aWYgKHAgPD0gMClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRwICs9IHRoaXMuREI7XG5cdFx0XHRcdFx0XHQtLWk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChkID4gMCkgbSA9IHRydWU7XG5cdFx0XHRcdGlmIChtKSByICs9IGludDJjaGFyKGQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbSA/IHIgOiBcIjBcIjtcblx0fVxuXHQvLyAocHVibGljKSAtdGhpc1xuXHRmdW5jdGlvbiBibk5lZ2F0ZSgpXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdEJpZ0ludGVnZXIuWkVSTy5zdWJUbyh0aGlzLCByKTtcblx0XHRyZXR1cm4gcjtcblx0fVxuXHQvLyAocHVibGljKSB8dGhpc3xcblx0ZnVuY3Rpb24gYm5BYnMoKVxuXHR7XG5cdFx0cmV0dXJuICh0aGlzLnMgPCAwKSA/IHRoaXMubmVnYXRlKCkgOiB0aGlzO1xuXHR9XG5cdC8vIChwdWJsaWMpIHJldHVybiArIGlmIHRoaXMgPiBhLCAtIGlmIHRoaXMgPCBhLCAwIGlmIGVxdWFsXG5cdGZ1bmN0aW9uIGJuQ29tcGFyZVRvKGEpXG5cdHtcblx0XHR2YXIgciA9IHRoaXMucyAtIGEucztcblx0XHRpZiAociAhPSAwKSByZXR1cm4gcjtcblx0XHR2YXIgaSA9IHRoaXMudDtcblx0XHRyID0gaSAtIGEudDtcblx0XHRpZiAociAhPSAwKSByZXR1cm4gKHRoaXMucyA8IDApID8gLXIgOiByO1xuXHRcdHdoaWxlICgtLWkgPj0gMClcblx0XHRcdGlmICgociA9IHRoaXNbaV0gLSBhW2ldKSAhPSAwKSByZXR1cm4gcjtcblx0XHRyZXR1cm4gMDtcblx0fVxuXHQvLyByZXR1cm5zIGJpdCBsZW5ndGggb2YgdGhlIGludGVnZXIgeFxuXHRmdW5jdGlvbiBuYml0cyh4KVxuXHR7XG5cdFx0dmFyIHIgPSAxLFxuXHRcdFx0dDtcblx0XHRpZiAoKHQgPSB4ID4+PiAxNikgIT0gMClcblx0XHR7XG5cdFx0XHR4ID0gdDtcblx0XHRcdHIgKz0gMTY7XG5cdFx0fVxuXHRcdGlmICgodCA9IHggPj4gOCkgIT0gMClcblx0XHR7XG5cdFx0XHR4ID0gdDtcblx0XHRcdHIgKz0gODtcblx0XHR9XG5cdFx0aWYgKCh0ID0geCA+PiA0KSAhPSAwKVxuXHRcdHtcblx0XHRcdHggPSB0O1xuXHRcdFx0ciArPSA0O1xuXHRcdH1cblx0XHRpZiAoKHQgPSB4ID4+IDIpICE9IDApXG5cdFx0e1xuXHRcdFx0eCA9IHQ7XG5cdFx0XHRyICs9IDI7XG5cdFx0fVxuXHRcdGlmICgodCA9IHggPj4gMSkgIT0gMClcblx0XHR7XG5cdFx0XHR4ID0gdDtcblx0XHRcdHIgKz0gMTtcblx0XHR9XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgcmV0dXJuIHRoZSBudW1iZXIgb2YgYml0cyBpbiBcInRoaXNcIlxuXHRmdW5jdGlvbiBibkJpdExlbmd0aCgpXG5cdHtcblx0XHRpZiAodGhpcy50IDw9IDApIHJldHVybiAwO1xuXHRcdHJldHVybiB0aGlzLkRCICogKHRoaXMudCAtIDEpICsgbmJpdHModGhpc1t0aGlzLnQgLSAxXSBeICh0aGlzLnMgJiB0aGlzLkRNKSk7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgciA9IHRoaXMgPDwgbipEQlxuXHRmdW5jdGlvbiBibnBETFNoaWZ0VG8obiwgcilcblx0e1xuXHRcdHZhciBpO1xuXHRcdGZvciAoaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSByW2kgKyBuXSA9IHRoaXNbaV07XG5cdFx0Zm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSByW2ldID0gMDtcblx0XHRyLnQgPSB0aGlzLnQgKyBuO1xuXHRcdHIucyA9IHRoaXMucztcblx0fVxuXHQvLyAocHJvdGVjdGVkKSByID0gdGhpcyA+PiBuKkRCXG5cdGZ1bmN0aW9uIGJucERSU2hpZnRUbyhuLCByKVxuXHR7XG5cdFx0Zm9yICh2YXIgaSA9IG47IGkgPCB0aGlzLnQ7ICsraSkgcltpIC0gbl0gPSB0aGlzW2ldO1xuXHRcdHIudCA9IE1hdGgubWF4KHRoaXMudCAtIG4sIDApO1xuXHRcdHIucyA9IHRoaXMucztcblx0fVxuXHQvLyAocHJvdGVjdGVkKSByID0gdGhpcyA8PCBuXG5cdGZ1bmN0aW9uIGJucExTaGlmdFRvKG4sIHIpXG5cdHtcblx0XHR2YXIgYnMgPSBuICUgdGhpcy5EQjtcblx0XHR2YXIgY2JzID0gdGhpcy5EQiAtIGJzO1xuXHRcdHZhciBibSA9ICgxIDw8IGNicykgLSAxO1xuXHRcdHZhciBkcyA9IE1hdGguZmxvb3IobiAvIHRoaXMuREIpLFxuXHRcdFx0YyA9ICh0aGlzLnMgPDwgYnMpICYgdGhpcy5ETSxcblx0XHRcdGk7XG5cdFx0Zm9yIChpID0gdGhpcy50IC0gMTsgaSA+PSAwOyAtLWkpXG5cdFx0e1xuXHRcdFx0cltpICsgZHMgKyAxXSA9ICh0aGlzW2ldID4+IGNicykgfCBjO1xuXHRcdFx0YyA9ICh0aGlzW2ldICYgYm0pIDw8IGJzO1xuXHRcdH1cblx0XHRmb3IgKGkgPSBkcyAtIDE7IGkgPj0gMDsgLS1pKSByW2ldID0gMDtcblx0XHRyW2RzXSA9IGM7XG5cdFx0ci50ID0gdGhpcy50ICsgZHMgKyAxO1xuXHRcdHIucyA9IHRoaXMucztcblx0XHRyLmNsYW1wKCk7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgciA9IHRoaXMgPj4gblxuXHRmdW5jdGlvbiBibnBSU2hpZnRUbyhuLCByKVxuXHR7XG5cdFx0ci5zID0gdGhpcy5zO1xuXHRcdHZhciBkcyA9IE1hdGguZmxvb3IobiAvIHRoaXMuREIpO1xuXHRcdGlmIChkcyA+PSB0aGlzLnQpXG5cdFx0e1xuXHRcdFx0ci50ID0gMDtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dmFyIGJzID0gbiAlIHRoaXMuREI7XG5cdFx0dmFyIGNicyA9IHRoaXMuREIgLSBicztcblx0XHR2YXIgYm0gPSAoMSA8PCBicykgLSAxO1xuXHRcdHJbMF0gPSB0aGlzW2RzXSA+PiBicztcblx0XHRmb3IgKHZhciBpID0gZHMgKyAxOyBpIDwgdGhpcy50OyArK2kpXG5cdFx0e1xuXHRcdFx0cltpIC0gZHMgLSAxXSB8PSAodGhpc1tpXSAmIGJtKSA8PCBjYnM7XG5cdFx0XHRyW2kgLSBkc10gPSB0aGlzW2ldID4+IGJzO1xuXHRcdH1cblx0XHRpZiAoYnMgPiAwKSByW3RoaXMudCAtIGRzIC0gMV0gfD0gKHRoaXMucyAmIGJtKSA8PCBjYnM7XG5cdFx0ci50ID0gdGhpcy50IC0gZHM7XG5cdFx0ci5jbGFtcCgpO1xuXHR9XG5cdC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzIC0gYVxuXHRmdW5jdGlvbiBibnBTdWJUbyhhLCByKVxuXHR7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0YyA9IDAsXG5cdFx0XHRtID0gTWF0aC5taW4oYS50LCB0aGlzLnQpO1xuXHRcdHdoaWxlIChpIDwgbSlcblx0XHR7XG5cdFx0XHRjICs9IHRoaXNbaV0gLSBhW2ldO1xuXHRcdFx0cltpKytdID0gYyAmIHRoaXMuRE07XG5cdFx0XHRjID4+PSB0aGlzLkRCO1xuXHRcdH1cblx0XHRpZiAoYS50IDwgdGhpcy50KVxuXHRcdHtcblx0XHRcdGMgLT0gYS5zO1xuXHRcdFx0d2hpbGUgKGkgPCB0aGlzLnQpXG5cdFx0XHR7XG5cdFx0XHRcdGMgKz0gdGhpc1tpXTtcblx0XHRcdFx0cltpKytdID0gYyAmIHRoaXMuRE07XG5cdFx0XHRcdGMgPj49IHRoaXMuREI7XG5cdFx0XHR9XG5cdFx0XHRjICs9IHRoaXMucztcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGMgKz0gdGhpcy5zO1xuXHRcdFx0d2hpbGUgKGkgPCBhLnQpXG5cdFx0XHR7XG5cdFx0XHRcdGMgLT0gYVtpXTtcblx0XHRcdFx0cltpKytdID0gYyAmIHRoaXMuRE07XG5cdFx0XHRcdGMgPj49IHRoaXMuREI7XG5cdFx0XHR9XG5cdFx0XHRjIC09IGEucztcblx0XHR9XG5cdFx0ci5zID0gKGMgPCAwKSA/IC0xIDogMDtcblx0XHRpZiAoYyA8IC0xKSByW2krK10gPSB0aGlzLkRWICsgYztcblx0XHRlbHNlIGlmIChjID4gMCkgcltpKytdID0gYztcblx0XHRyLnQgPSBpO1xuXHRcdHIuY2xhbXAoKTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSByID0gdGhpcyAqIGEsIHIgIT0gdGhpcyxhIChIQUMgMTQuMTIpXG5cdC8vIFwidGhpc1wiIHNob3VsZCBiZSB0aGUgbGFyZ2VyIG9uZSBpZiBhcHByb3ByaWF0ZS5cblx0ZnVuY3Rpb24gYm5wTXVsdGlwbHlUbyhhLCByKVxuXHR7XG5cdFx0dmFyIHggPSB0aGlzLmFicygpLFxuXHRcdFx0eSA9IGEuYWJzKCk7XG5cdFx0dmFyIGkgPSB4LnQ7XG5cdFx0ci50ID0gaSArIHkudDtcblx0XHR3aGlsZSAoLS1pID49IDApIHJbaV0gPSAwO1xuXHRcdGZvciAoaSA9IDA7IGkgPCB5LnQ7ICsraSkgcltpICsgeC50XSA9IHguYW0oMCwgeVtpXSwgciwgaSwgMCwgeC50KTtcblx0XHRyLnMgPSAwO1xuXHRcdHIuY2xhbXAoKTtcblx0XHRpZiAodGhpcy5zICE9IGEucykgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHIsIHIpO1xuXHR9XG5cdC8vIChwcm90ZWN0ZWQpIHIgPSB0aGlzXjIsIHIgIT0gdGhpcyAoSEFDIDE0LjE2KVxuXHRmdW5jdGlvbiBibnBTcXVhcmVUbyhyKVxuXHR7XG5cdFx0dmFyIHggPSB0aGlzLmFicygpO1xuXHRcdHZhciBpID0gci50ID0gMiAqIHgudDtcblx0XHR3aGlsZSAoLS1pID49IDApIHJbaV0gPSAwO1xuXHRcdGZvciAoaSA9IDA7IGkgPCB4LnQgLSAxOyArK2kpXG5cdFx0e1xuXHRcdFx0dmFyIGMgPSB4LmFtKGksIHhbaV0sIHIsIDIgKiBpLCAwLCAxKTtcblx0XHRcdGlmICgocltpICsgeC50XSArPSB4LmFtKGkgKyAxLCAyICogeFtpXSwgciwgMiAqIGkgKyAxLCBjLCB4LnQgLSBpIC0gMSkpID49IHguRFYpXG5cdFx0XHR7XG5cdFx0XHRcdHJbaSArIHgudF0gLT0geC5EVjtcblx0XHRcdFx0cltpICsgeC50ICsgMV0gPSAxO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoci50ID4gMCkgcltyLnQgLSAxXSArPSB4LmFtKGksIHhbaV0sIHIsIDIgKiBpLCAwLCAxKTtcblx0XHRyLnMgPSAwO1xuXHRcdHIuY2xhbXAoKTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSBkaXZpZGUgdGhpcyBieSBtLCBxdW90aWVudCBhbmQgcmVtYWluZGVyIHRvIHEsIHIgKEhBQyAxNC4yMClcblx0Ly8gciAhPSBxLCB0aGlzICE9IG0uICBxIG9yIHIgbWF5IGJlIG51bGwuXG5cdGZ1bmN0aW9uIGJucERpdlJlbVRvKG0sIHEsIHIpXG5cdHtcblx0XHR2YXIgcG0gPSBtLmFicygpO1xuXHRcdGlmIChwbS50IDw9IDApIHJldHVybjtcblx0XHR2YXIgcHQgPSB0aGlzLmFicygpO1xuXHRcdGlmIChwdC50IDwgcG0udClcblx0XHR7XG5cdFx0XHRpZiAocSAhPSBudWxsKSBxLmZyb21JbnQoMCk7XG5cdFx0XHRpZiAociAhPSBudWxsKSB0aGlzLmNvcHlUbyhyKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKHIgPT0gbnVsbCkgciA9IG5iaSgpO1xuXHRcdHZhciB5ID0gbmJpKCksXG5cdFx0XHR0cyA9IHRoaXMucyxcblx0XHRcdG1zID0gbS5zO1xuXHRcdHZhciBuc2ggPSB0aGlzLkRCIC0gbmJpdHMocG1bcG0udCAtIDFdKTsgLy8gbm9ybWFsaXplIG1vZHVsdXNcblx0XHRpZiAobnNoID4gMClcblx0XHR7XG5cdFx0XHRwbS5sU2hpZnRUbyhuc2gsIHkpO1xuXHRcdFx0cHQubFNoaWZ0VG8obnNoLCByKTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHBtLmNvcHlUbyh5KTtcblx0XHRcdHB0LmNvcHlUbyhyKTtcblx0XHR9XG5cdFx0dmFyIHlzID0geS50O1xuXHRcdHZhciB5MCA9IHlbeXMgLSAxXTtcblx0XHRpZiAoeTAgPT0gMCkgcmV0dXJuO1xuXHRcdHZhciB5dCA9IHkwICogKDEgPDwgdGhpcy5GMSkgKyAoKHlzID4gMSkgPyB5W3lzIC0gMl0gPj4gdGhpcy5GMiA6IDApO1xuXHRcdHZhciBkMSA9IHRoaXMuRlYgLyB5dCxcblx0XHRcdGQyID0gKDEgPDwgdGhpcy5GMSkgLyB5dCxcblx0XHRcdGUgPSAxIDw8IHRoaXMuRjI7XG5cdFx0dmFyIGkgPSByLnQsXG5cdFx0XHRqID0gaSAtIHlzLFxuXHRcdFx0dCA9IChxID09IG51bGwpID8gbmJpKCkgOiBxO1xuXHRcdHkuZGxTaGlmdFRvKGosIHQpO1xuXHRcdGlmIChyLmNvbXBhcmVUbyh0KSA+PSAwKVxuXHRcdHtcblx0XHRcdHJbci50KytdID0gMTtcblx0XHRcdHIuc3ViVG8odCwgcik7XG5cdFx0fVxuXHRcdEJpZ0ludGVnZXIuT05FLmRsU2hpZnRUbyh5cywgdCk7XG5cdFx0dC5zdWJUbyh5LCB5KTsgLy8gXCJuZWdhdGl2ZVwiIHkgc28gd2UgY2FuIHJlcGxhY2Ugc3ViIHdpdGggYW0gbGF0ZXJcblx0XHR3aGlsZSAoeS50IDwgeXMpIHlbeS50KytdID0gMDtcblx0XHR3aGlsZSAoLS1qID49IDApXG5cdFx0e1xuXHRcdFx0Ly8gRXN0aW1hdGUgcXVvdGllbnQgZGlnaXRcblx0XHRcdHZhciBxZCA9IChyWy0taV0gPT0geTApID8gdGhpcy5ETSA6IE1hdGguZmxvb3IocltpXSAqIGQxICsgKHJbaSAtIDFdICsgZSkgKiBkMik7XG5cdFx0XHRpZiAoKHJbaV0gKz0geS5hbSgwLCBxZCwgciwgaiwgMCwgeXMpKSA8IHFkKVxuXHRcdFx0eyAvLyBUcnkgaXQgb3V0XG5cdFx0XHRcdHkuZGxTaGlmdFRvKGosIHQpO1xuXHRcdFx0XHRyLnN1YlRvKHQsIHIpO1xuXHRcdFx0XHR3aGlsZSAocltpXSA8IC0tcWQpIHIuc3ViVG8odCwgcik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChxICE9IG51bGwpXG5cdFx0e1xuXHRcdFx0ci5kclNoaWZ0VG8oeXMsIHEpO1xuXHRcdFx0aWYgKHRzICE9IG1zKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8ocSwgcSk7XG5cdFx0fVxuXHRcdHIudCA9IHlzO1xuXHRcdHIuY2xhbXAoKTtcblx0XHRpZiAobnNoID4gMCkgci5yU2hpZnRUbyhuc2gsIHIpOyAvLyBEZW5vcm1hbGl6ZSByZW1haW5kZXJcblx0XHRpZiAodHMgPCAwKSBCaWdJbnRlZ2VyLlpFUk8uc3ViVG8ociwgcik7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpcyBtb2QgYVxuXHRmdW5jdGlvbiBibk1vZChhKVxuXHR7XG5cdFx0dmFyIHIgPSBuYmkoKTtcblx0XHR0aGlzLmFicygpLmRpdlJlbVRvKGEsIG51bGwsIHIpO1xuXHRcdGlmICh0aGlzLnMgPCAwICYmIHIuY29tcGFyZVRvKEJpZ0ludGVnZXIuWkVSTykgPiAwKSBhLnN1YlRvKHIsIHIpO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIE1vZHVsYXIgcmVkdWN0aW9uIHVzaW5nIFwiY2xhc3NpY1wiIGFsZ29yaXRobVxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0ZnVuY3Rpb24gQ2xhc3NpYyhtKVxuXHR7XG5cdFx0dGhpcy5tID0gbTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNDb252ZXJ0KHgpXG5cdHtcblx0XHRpZiAoeC5zIDwgMCB8fCB4LmNvbXBhcmVUbyh0aGlzLm0pID49IDApIHJldHVybiB4Lm1vZCh0aGlzLm0pO1xuXHRcdGVsc2UgcmV0dXJuIHg7XG5cdH1cblxuXHRmdW5jdGlvbiBjUmV2ZXJ0KHgpXG5cdHtcblx0XHRyZXR1cm4geDtcblx0fVxuXG5cdGZ1bmN0aW9uIGNSZWR1Y2UoeClcblx0e1xuXHRcdHguZGl2UmVtVG8odGhpcy5tLCBudWxsLCB4KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNNdWxUbyh4LCB5LCByKVxuXHR7XG5cdFx0eC5tdWx0aXBseVRvKHksIHIpO1xuXHRcdHRoaXMucmVkdWNlKHIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gY1NxclRvKHgsIHIpXG5cdHtcblx0XHR4LnNxdWFyZVRvKHIpO1xuXHRcdHRoaXMucmVkdWNlKHIpO1xuXHR9XG5cdENsYXNzaWMucHJvdG90eXBlLmNvbnZlcnQgPSBjQ29udmVydDtcblx0Q2xhc3NpYy5wcm90b3R5cGUucmV2ZXJ0ID0gY1JldmVydDtcblx0Q2xhc3NpYy5wcm90b3R5cGUucmVkdWNlID0gY1JlZHVjZTtcblx0Q2xhc3NpYy5wcm90b3R5cGUubXVsVG8gPSBjTXVsVG87XG5cdENsYXNzaWMucHJvdG90eXBlLnNxclRvID0gY1NxclRvO1xuXHQvLyAocHJvdGVjdGVkKSByZXR1cm4gXCItMS90aGlzICUgMl5EQlwiOyB1c2VmdWwgZm9yIE1vbnQuIHJlZHVjdGlvblxuXHQvLyBqdXN0aWZpY2F0aW9uOlxuXHQvLyAgICAgICAgIHh5ID09IDEgKG1vZCBtKVxuXHQvLyAgICAgICAgIHh5ID0gIDEra21cblx0Ly8gICB4eSgyLXh5KSA9ICgxK2ttKSgxLWttKVxuXHQvLyB4W3koMi14eSldID0gMS1rXjJtXjJcblx0Ly8geFt5KDIteHkpXSA9PSAxIChtb2QgbV4yKVxuXHQvLyBpZiB5IGlzIDEveCBtb2QgbSwgdGhlbiB5KDIteHkpIGlzIDEveCBtb2QgbV4yXG5cdC8vIHNob3VsZCByZWR1Y2UgeCBhbmQgeSgyLXh5KSBieSBtXjIgYXQgZWFjaCBzdGVwIHRvIGtlZXAgc2l6ZSBib3VuZGVkLlxuXHQvLyBKUyBtdWx0aXBseSBcIm92ZXJmbG93c1wiIGRpZmZlcmVudGx5IGZyb20gQy9DKyssIHNvIGNhcmUgaXMgbmVlZGVkIGhlcmUuXG5cdGZ1bmN0aW9uIGJucEludkRpZ2l0KClcblx0e1xuXHRcdGlmICh0aGlzLnQgPCAxKSByZXR1cm4gMDtcblx0XHR2YXIgeCA9IHRoaXNbMF07XG5cdFx0aWYgKCh4ICYgMSkgPT0gMCkgcmV0dXJuIDA7XG5cdFx0dmFyIHkgPSB4ICYgMzsgLy8geSA9PSAxL3ggbW9kIDJeMlxuXHRcdHkgPSAoeSAqICgyIC0gKHggJiAweGYpICogeSkpICYgMHhmOyAvLyB5ID09IDEveCBtb2QgMl40XG5cdFx0eSA9ICh5ICogKDIgLSAoeCAmIDB4ZmYpICogeSkpICYgMHhmZjsgLy8geSA9PSAxL3ggbW9kIDJeOFxuXHRcdHkgPSAoeSAqICgyIC0gKCgoeCAmIDB4ZmZmZikgKiB5KSAmIDB4ZmZmZikpKSAmIDB4ZmZmZjsgLy8geSA9PSAxL3ggbW9kIDJeMTZcblx0XHQvLyBsYXN0IHN0ZXAgLSBjYWxjdWxhdGUgaW52ZXJzZSBtb2QgRFYgZGlyZWN0bHk7XG5cdFx0Ly8gYXNzdW1lcyAxNiA8IERCIDw9IDMyIGFuZCBhc3N1bWVzIGFiaWxpdHkgdG8gaGFuZGxlIDQ4LWJpdCBpbnRzXG5cdFx0eSA9ICh5ICogKDIgLSB4ICogeSAlIHRoaXMuRFYpKSAlIHRoaXMuRFY7IC8vIHkgPT0gMS94IG1vZCAyXmRiaXRzXG5cdFx0Ly8gd2UgcmVhbGx5IHdhbnQgdGhlIG5lZ2F0aXZlIGludmVyc2UsIGFuZCAtRFYgPCB5IDwgRFZcblx0XHRyZXR1cm4gKHkgPiAwKSA/IHRoaXMuRFYgLSB5IDogLXk7XG5cdH1cblx0Ly8gTW9udGdvbWVyeSByZWR1Y3Rpb25cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdGZ1bmN0aW9uIE1vbnRnb21lcnkobSlcblx0e1xuXHRcdHRoaXMubSA9IG07XG5cdFx0dGhpcy5tcCA9IG0uaW52RGlnaXQoKTtcblx0XHR0aGlzLm1wbCA9IHRoaXMubXAgJiAweDdmZmY7XG5cdFx0dGhpcy5tcGggPSB0aGlzLm1wID4+IDE1O1xuXHRcdHRoaXMudW0gPSAoMSA8PCAobS5EQiAtIDE1KSkgLSAxO1xuXHRcdHRoaXMubXQyID0gMiAqIG0udDtcblx0fVxuXHQvLyB4UiBtb2QgbVxuXHRmdW5jdGlvbiBtb250Q29udmVydCh4KVxuXHR7XG5cdFx0dmFyIHIgPSBuYmkoKTtcblx0XHR4LmFicygpLmRsU2hpZnRUbyh0aGlzLm0udCwgcik7XG5cdFx0ci5kaXZSZW1Ubyh0aGlzLm0sIG51bGwsIHIpO1xuXHRcdGlmICh4LnMgPCAwICYmIHIuY29tcGFyZVRvKEJpZ0ludGVnZXIuWkVSTykgPiAwKSB0aGlzLm0uc3ViVG8ociwgcik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8geC9SIG1vZCBtXG5cdGZ1bmN0aW9uIG1vbnRSZXZlcnQoeClcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0eC5jb3B5VG8ocik7XG5cdFx0dGhpcy5yZWR1Y2Uocik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8geCA9IHgvUiBtb2QgbSAoSEFDIDE0LjMyKVxuXHRmdW5jdGlvbiBtb250UmVkdWNlKHgpXG5cdHtcblx0XHR3aGlsZSAoeC50IDw9IHRoaXMubXQyKSAvLyBwYWQgeCBzbyBhbSBoYXMgZW5vdWdoIHJvb20gbGF0ZXJcblx0XHRcdHhbeC50KytdID0gMDtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubS50OyArK2kpXG5cdFx0e1xuXHRcdFx0Ly8gZmFzdGVyIHdheSBvZiBjYWxjdWxhdGluZyB1MCA9IHhbaV0qbXAgbW9kIERWXG5cdFx0XHR2YXIgaiA9IHhbaV0gJiAweDdmZmY7XG5cdFx0XHR2YXIgdTAgPSAoaiAqIHRoaXMubXBsICsgKCgoaiAqIHRoaXMubXBoICsgKHhbaV0gPj4gMTUpICogdGhpcy5tcGwpICYgdGhpcy51bSkgPDwgMTUpKSAmIHguRE07XG5cdFx0XHQvLyB1c2UgYW0gdG8gY29tYmluZSB0aGUgbXVsdGlwbHktc2hpZnQtYWRkIGludG8gb25lIGNhbGxcblx0XHRcdGogPSBpICsgdGhpcy5tLnQ7XG5cdFx0XHR4W2pdICs9IHRoaXMubS5hbSgwLCB1MCwgeCwgaSwgMCwgdGhpcy5tLnQpO1xuXHRcdFx0Ly8gcHJvcGFnYXRlIGNhcnJ5XG5cdFx0XHR3aGlsZSAoeFtqXSA+PSB4LkRWKVxuXHRcdFx0e1xuXHRcdFx0XHR4W2pdIC09IHguRFY7XG5cdFx0XHRcdHhbKytqXSsrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR4LmNsYW1wKCk7XG5cdFx0eC5kclNoaWZ0VG8odGhpcy5tLnQsIHgpO1xuXHRcdGlmICh4LmNvbXBhcmVUbyh0aGlzLm0pID49IDApIHguc3ViVG8odGhpcy5tLCB4KTtcblx0fVxuXHQvLyByID0gXCJ4XjIvUiBtb2QgbVwiOyB4ICE9IHJcblx0ZnVuY3Rpb24gbW9udFNxclRvKHgsIHIpXG5cdHtcblx0XHR4LnNxdWFyZVRvKHIpO1xuXHRcdHRoaXMucmVkdWNlKHIpO1xuXHR9XG5cdC8vIHIgPSBcInh5L1IgbW9kIG1cIjsgeCx5ICE9IHJcblx0ZnVuY3Rpb24gbW9udE11bFRvKHgsIHksIHIpXG5cdHtcblx0XHR4Lm11bHRpcGx5VG8oeSwgcik7XG5cdFx0dGhpcy5yZWR1Y2Uocik7XG5cdH1cblx0TW9udGdvbWVyeS5wcm90b3R5cGUuY29udmVydCA9IG1vbnRDb252ZXJ0O1xuXHRNb250Z29tZXJ5LnByb3RvdHlwZS5yZXZlcnQgPSBtb250UmV2ZXJ0O1xuXHRNb250Z29tZXJ5LnByb3RvdHlwZS5yZWR1Y2UgPSBtb250UmVkdWNlO1xuXHRNb250Z29tZXJ5LnByb3RvdHlwZS5tdWxUbyA9IG1vbnRNdWxUbztcblx0TW9udGdvbWVyeS5wcm90b3R5cGUuc3FyVG8gPSBtb250U3FyVG87XG5cdC8vIChwcm90ZWN0ZWQpIHRydWUgaWZmIHRoaXMgaXMgZXZlblxuXHRmdW5jdGlvbiBibnBJc0V2ZW4oKVxuXHR7XG5cdFx0cmV0dXJuICgodGhpcy50ID4gMCkgPyAodGhpc1swXSAmIDEpIDogdGhpcy5zKSA9PSAwO1xuXHR9XG5cdC8vIChwcm90ZWN0ZWQpIHRoaXNeZSwgZSA8IDJeMzIsIGRvaW5nIHNxciBhbmQgbXVsIHdpdGggXCJyXCIgKEhBQyAxNC43OSlcblx0ZnVuY3Rpb24gYm5wRXhwKGUsIHopXG5cdHtcblx0XHRpZiAoZSA+IDB4ZmZmZmZmZmYgfHwgZSA8IDEpIHJldHVybiBCaWdJbnRlZ2VyLk9ORTtcblx0XHR2YXIgciA9IG5iaSgpLFxuXHRcdFx0cjIgPSBuYmkoKSxcblx0XHRcdGcgPSB6LmNvbnZlcnQodGhpcyksXG5cdFx0XHRpID0gbmJpdHMoZSkgLSAxO1xuXHRcdGcuY29weVRvKHIpO1xuXHRcdHdoaWxlICgtLWkgPj0gMClcblx0XHR7XG5cdFx0XHR6LnNxclRvKHIsIHIyKTtcblx0XHRcdGlmICgoZSAmICgxIDw8IGkpKSA+IDApIHoubXVsVG8ocjIsIGcsIHIpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgdCA9IHI7XG5cdFx0XHRcdHIgPSByMjtcblx0XHRcdFx0cjIgPSB0O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gei5yZXZlcnQocik7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpc15lICUgbSwgMCA8PSBlIDwgMl4zMlxuXHRmdW5jdGlvbiBibk1vZFBvd0ludChlLCBtKVxuXHR7XG5cdFx0dmFyIHo7XG5cdFx0aWYgKGUgPCAyNTYgfHwgbS5pc0V2ZW4oKSkgeiA9IG5ldyBDbGFzc2ljKG0pO1xuXHRcdGVsc2UgeiA9IG5ldyBNb250Z29tZXJ5KG0pO1xuXHRcdHJldHVybiB0aGlzLmV4cChlLCB6KTtcblx0fVxuXHQvLyBwcm90ZWN0ZWRcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuY29weVRvID0gYm5wQ29weVRvO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tSW50ID0gYm5wRnJvbUludDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVN0cmluZyA9IGJucEZyb21TdHJpbmc7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmNsYW1wID0gYm5wQ2xhbXA7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmRsU2hpZnRUbyA9IGJucERMU2hpZnRUbztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuZHJTaGlmdFRvID0gYm5wRFJTaGlmdFRvO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5sU2hpZnRUbyA9IGJucExTaGlmdFRvO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5yU2hpZnRUbyA9IGJucFJTaGlmdFRvO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5zdWJUbyA9IGJucFN1YlRvO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseVRvID0gYm5wTXVsdGlwbHlUbztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlVG8gPSBibnBTcXVhcmVUbztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuZGl2UmVtVG8gPSBibnBEaXZSZW1Ubztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuaW52RGlnaXQgPSBibnBJbnZEaWdpdDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuaXNFdmVuID0gYm5wSXNFdmVuO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5leHAgPSBibnBFeHA7XG5cdC8vIHB1YmxpY1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS50b1N0cmluZyA9IGJuVG9TdHJpbmc7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLm5lZ2F0ZSA9IGJuTmVnYXRlO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5hYnMgPSBibkFicztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuY29tcGFyZVRvID0gYm5Db21wYXJlVG87XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdExlbmd0aCA9IGJuQml0TGVuZ3RoO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2QgPSBibk1vZDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUubW9kUG93SW50ID0gYm5Nb2RQb3dJbnQ7XG5cdC8vIFwiY29uc3RhbnRzXCJcblx0QmlnSW50ZWdlci5aRVJPID0gbmJ2KDApO1xuXHRCaWdJbnRlZ2VyLk9ORSA9IG5idigxKTtcblx0Ly8gQ29weXJpZ2h0IChjKSAyMDA1LTIwMDkgIFRvbSBXdVxuXHQvLyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXHQvLyBTZWUgXCJMSUNFTlNFXCIgZm9yIGRldGFpbHMuXG5cdC8vIEV4dGVuZGVkIEphdmFTY3JpcHQgQk4gZnVuY3Rpb25zLCByZXF1aXJlZCBmb3IgUlNBIHByaXZhdGUgb3BzLlxuXHQvLyBWZXJzaW9uIDEuMTogbmV3IEJpZ0ludGVnZXIoXCIwXCIsIDEwKSByZXR1cm5zIFwicHJvcGVyXCIgemVyb1xuXHQvLyBWZXJzaW9uIDEuMjogc3F1YXJlKCkgQVBJLCBpc1Byb2JhYmxlUHJpbWUgZml4XG5cdC8vIChwdWJsaWMpXG5cdGZ1bmN0aW9uIGJuQ2xvbmUoKVxuXHR7XG5cdFx0dmFyIHIgPSBuYmkoKTtcblx0XHR0aGlzLmNvcHlUbyhyKTtcblx0XHRyZXR1cm4gcjtcblx0fVxuXHQvLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgaW50ZWdlclxuXHRmdW5jdGlvbiBibkludFZhbHVlKClcblx0e1xuXHRcdGlmICh0aGlzLnMgPCAwKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLnQgPT0gMSkgcmV0dXJuIHRoaXNbMF0gLSB0aGlzLkRWO1xuXHRcdFx0ZWxzZSBpZiAodGhpcy50ID09IDApIHJldHVybiAtMTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAodGhpcy50ID09IDEpIHJldHVybiB0aGlzWzBdO1xuXHRcdGVsc2UgaWYgKHRoaXMudCA9PSAwKSByZXR1cm4gMDtcblx0XHQvLyBhc3N1bWVzIDE2IDwgREIgPCAzMlxuXHRcdHJldHVybiAoKHRoaXNbMV0gJiAoKDEgPDwgKDMyIC0gdGhpcy5EQikpIC0gMSkpIDw8IHRoaXMuREIpIHwgdGhpc1swXTtcblx0fVxuXHQvLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgYnl0ZVxuXHRmdW5jdGlvbiBibkJ5dGVWYWx1ZSgpXG5cdHtcblx0XHRyZXR1cm4gKHRoaXMudCA9PSAwKSA/IHRoaXMucyA6ICh0aGlzWzBdIDw8IDI0KSA+PiAyNDtcblx0fVxuXHQvLyAocHVibGljKSByZXR1cm4gdmFsdWUgYXMgc2hvcnQgKGFzc3VtZXMgREI+PTE2KVxuXHRmdW5jdGlvbiBiblNob3J0VmFsdWUoKVxuXHR7XG5cdFx0cmV0dXJuICh0aGlzLnQgPT0gMCkgPyB0aGlzLnMgOiAodGhpc1swXSA8PCAxNikgPj4gMTY7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgcmV0dXJuIHggcy50LiByXnggPCBEVlxuXHRmdW5jdGlvbiBibnBDaHVua1NpemUocilcblx0e1xuXHRcdHJldHVybiBNYXRoLmZsb29yKE1hdGguTE4yICogdGhpcy5EQiAvIE1hdGgubG9nKHIpKTtcblx0fVxuXHQvLyAocHVibGljKSAwIGlmIHRoaXMgPT0gMCwgMSBpZiB0aGlzID4gMFxuXHRmdW5jdGlvbiBiblNpZ051bSgpXG5cdHtcblx0XHRpZiAodGhpcy5zIDwgMCkgcmV0dXJuIC0xO1xuXHRcdGVsc2UgaWYgKHRoaXMudCA8PSAwIHx8ICh0aGlzLnQgPT0gMSAmJiB0aGlzWzBdIDw9IDApKSByZXR1cm4gMDtcblx0XHRlbHNlIHJldHVybiAxO1xuXHR9XG5cdC8vIChwcm90ZWN0ZWQpIGNvbnZlcnQgdG8gcmFkaXggc3RyaW5nXG5cdGZ1bmN0aW9uIGJucFRvUmFkaXgoYilcblx0e1xuXHRcdGlmIChiID09IG51bGwpIGIgPSAxMDtcblx0XHRpZiAodGhpcy5zaWdudW0oKSA9PSAwIHx8IGIgPCAyIHx8IGIgPiAzNikgcmV0dXJuIFwiMFwiO1xuXHRcdHZhciBjcyA9IHRoaXMuY2h1bmtTaXplKGIpO1xuXHRcdHZhciBhID0gTWF0aC5wb3coYiwgY3MpO1xuXHRcdHZhciBkID0gbmJ2KGEpLFxuXHRcdFx0eSA9IG5iaSgpLFxuXHRcdFx0eiA9IG5iaSgpLFxuXHRcdFx0ciA9IFwiXCI7XG5cdFx0dGhpcy5kaXZSZW1UbyhkLCB5LCB6KTtcblx0XHR3aGlsZSAoeS5zaWdudW0oKSA+IDApXG5cdFx0e1xuXHRcdFx0ciA9IChhICsgei5pbnRWYWx1ZSgpKS50b1N0cmluZyhiKS5zdWJzdHIoMSkgKyByO1xuXHRcdFx0eS5kaXZSZW1UbyhkLCB5LCB6KTtcblx0XHR9XG5cdFx0cmV0dXJuIHouaW50VmFsdWUoKS50b1N0cmluZyhiKSArIHI7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgY29udmVydCBmcm9tIHJhZGl4IHN0cmluZ1xuXHRmdW5jdGlvbiBibnBGcm9tUmFkaXgocywgYilcblx0e1xuXHRcdHRoaXMuZnJvbUludCgwKTtcblx0XHRpZiAoYiA9PSBudWxsKSBiID0gMTA7XG5cdFx0dmFyIGNzID0gdGhpcy5jaHVua1NpemUoYik7XG5cdFx0dmFyIGQgPSBNYXRoLnBvdyhiLCBjcyksXG5cdFx0XHRtaSA9IGZhbHNlLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHR3ID0gMDtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHMubGVuZ3RoOyArK2kpXG5cdFx0e1xuXHRcdFx0dmFyIHggPSBpbnRBdChzLCBpKTtcblx0XHRcdGlmICh4IDwgMClcblx0XHRcdHtcblx0XHRcdFx0aWYgKHMuY2hhckF0KGkpID09IFwiLVwiICYmIHRoaXMuc2lnbnVtKCkgPT0gMCkgbWkgPSB0cnVlO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdHcgPSBiICogdyArIHg7XG5cdFx0XHRpZiAoKytqID49IGNzKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLmRNdWx0aXBseShkKTtcblx0XHRcdFx0dGhpcy5kQWRkT2Zmc2V0KHcsIDApO1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0dyA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChqID4gMClcblx0XHR7XG5cdFx0XHR0aGlzLmRNdWx0aXBseShNYXRoLnBvdyhiLCBqKSk7XG5cdFx0XHR0aGlzLmRBZGRPZmZzZXQodywgMCk7XG5cdFx0fVxuXHRcdGlmIChtaSkgQmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsIHRoaXMpO1xuXHR9XG5cdC8vIChwcm90ZWN0ZWQpIGFsdGVybmF0ZSBjb25zdHJ1Y3RvclxuXHRmdW5jdGlvbiBibnBGcm9tTnVtYmVyKGEsIGIsIGMpXG5cdHtcblx0XHRpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgYilcblx0XHR7XG5cdFx0XHQvLyBuZXcgQmlnSW50ZWdlcihpbnQsaW50LFJORylcblx0XHRcdGlmIChhIDwgMikgdGhpcy5mcm9tSW50KDEpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLmZyb21OdW1iZXIoYSwgYyk7XG5cdFx0XHRcdGlmICghdGhpcy50ZXN0Qml0KGEgLSAxKSkgLy8gZm9yY2UgTVNCIHNldFxuXHRcdFx0XHRcdHRoaXMuYml0d2lzZVRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhIC0gMSksIG9wX29yLCB0aGlzKTtcblx0XHRcdFx0aWYgKHRoaXMuaXNFdmVuKCkpIHRoaXMuZEFkZE9mZnNldCgxLCAwKTsgLy8gZm9yY2Ugb2RkXG5cdFx0XHRcdHdoaWxlICghdGhpcy5pc1Byb2JhYmxlUHJpbWUoYikpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0aGlzLmRBZGRPZmZzZXQoMiwgMCk7XG5cdFx0XHRcdFx0aWYgKHRoaXMuYml0TGVuZ3RoKCkgPiBhKSB0aGlzLnN1YlRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChhIC0gMSksIHRoaXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHQvLyBuZXcgQmlnSW50ZWdlcihpbnQsUk5HKVxuXHRcdFx0dmFyIHggPSBuZXcgQXJyYXkoKSxcblx0XHRcdFx0dCA9IGEgJiA3O1xuXHRcdFx0eC5sZW5ndGggPSAoYSA+PiAzKSArIDE7XG5cdFx0XHRiLm5leHRCeXRlcyh4KTtcblx0XHRcdGlmICh0ID4gMCkgeFswXSAmPSAoKDEgPDwgdCkgLSAxKTtcblx0XHRcdGVsc2UgeFswXSA9IDA7XG5cdFx0XHR0aGlzLmZyb21TdHJpbmcoeCwgMjU2KTtcblx0XHR9XG5cdH1cblx0Ly8gKHB1YmxpYykgY29udmVydCB0byBiaWdlbmRpYW4gYnl0ZSBhcnJheVxuXHRmdW5jdGlvbiBiblRvQnl0ZUFycmF5KClcblx0e1xuXHRcdHZhciBpID0gdGhpcy50LFxuXHRcdFx0ciA9IG5ldyBBcnJheSgpO1xuXHRcdHJbMF0gPSB0aGlzLnM7XG5cdFx0dmFyIHAgPSB0aGlzLkRCIC0gKGkgKiB0aGlzLkRCKSAlIDgsXG5cdFx0XHRkLCBrID0gMDtcblx0XHRpZiAoaS0tID4gMClcblx0XHR7XG5cdFx0XHRpZiAocCA8IHRoaXMuREIgJiYgKGQgPSB0aGlzW2ldID4+IHApICE9ICh0aGlzLnMgJiB0aGlzLkRNKSA+PiBwKVxuXHRcdFx0XHRyW2srK10gPSBkIHwgKHRoaXMucyA8PCAodGhpcy5EQiAtIHApKTtcblx0XHRcdHdoaWxlIChpID49IDApXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChwIDwgOClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGQgPSAodGhpc1tpXSAmICgoMSA8PCBwKSAtIDEpKSA8PCAoOCAtIHApO1xuXHRcdFx0XHRcdGQgfD0gdGhpc1stLWldID4+IChwICs9IHRoaXMuREIgLSA4KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRkID0gKHRoaXNbaV0gPj4gKHAgLT0gOCkpICYgMHhmZjtcblx0XHRcdFx0XHRpZiAocCA8PSAwKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHAgKz0gdGhpcy5EQjtcblx0XHRcdFx0XHRcdC0taTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKChkICYgMHg4MCkgIT0gMCkgZCB8PSAtMjU2O1xuXHRcdFx0XHRpZiAoayA9PSAwICYmICh0aGlzLnMgJiAweDgwKSAhPSAoZCAmIDB4ODApKSArK2s7XG5cdFx0XHRcdGlmIChrID4gMCB8fCBkICE9IHRoaXMucykgcltrKytdID0gZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHI7XG5cdH1cblxuXHRmdW5jdGlvbiBibkVxdWFscyhhKVxuXHR7XG5cdFx0cmV0dXJuICh0aGlzLmNvbXBhcmVUbyhhKSA9PSAwKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJuTWluKGEpXG5cdHtcblx0XHRyZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpIDwgMCkgPyB0aGlzIDogYTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJuTWF4KGEpXG5cdHtcblx0XHRyZXR1cm4gKHRoaXMuY29tcGFyZVRvKGEpID4gMCkgPyB0aGlzIDogYTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSByID0gdGhpcyBvcCBhIChiaXR3aXNlKVxuXHRmdW5jdGlvbiBibnBCaXR3aXNlVG8oYSwgb3AsIHIpXG5cdHtcblx0XHR2YXIgaSwgZiwgbSA9IE1hdGgubWluKGEudCwgdGhpcy50KTtcblx0XHRmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSByW2ldID0gb3AodGhpc1tpXSwgYVtpXSk7XG5cdFx0aWYgKGEudCA8IHRoaXMudClcblx0XHR7XG5cdFx0XHRmID0gYS5zICYgdGhpcy5ETTtcblx0XHRcdGZvciAoaSA9IG07IGkgPCB0aGlzLnQ7ICsraSkgcltpXSA9IG9wKHRoaXNbaV0sIGYpO1xuXHRcdFx0ci50ID0gdGhpcy50O1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0ZiA9IHRoaXMucyAmIHRoaXMuRE07XG5cdFx0XHRmb3IgKGkgPSBtOyBpIDwgYS50OyArK2kpIHJbaV0gPSBvcChmLCBhW2ldKTtcblx0XHRcdHIudCA9IGEudDtcblx0XHR9XG5cdFx0ci5zID0gb3AodGhpcy5zLCBhLnMpO1xuXHRcdHIuY2xhbXAoKTtcblx0fVxuXHQvLyAocHVibGljKSB0aGlzICYgYVxuXHRmdW5jdGlvbiBvcF9hbmQoeCwgeSlcblx0e1xuXHRcdHJldHVybiB4ICYgeTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJuQW5kKGEpXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdHRoaXMuYml0d2lzZVRvKGEsIG9wX2FuZCwgcik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpcyB8IGFcblx0ZnVuY3Rpb24gb3Bfb3IoeCwgeSlcblx0e1xuXHRcdHJldHVybiB4IHwgeTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJuT3IoYSlcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0dGhpcy5iaXR3aXNlVG8oYSwgb3Bfb3IsIHIpO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIHRoaXMgXiBhXG5cdGZ1bmN0aW9uIG9wX3hvcih4LCB5KVxuXHR7XG5cdFx0cmV0dXJuIHggXiB5O1xuXHR9XG5cblx0ZnVuY3Rpb24gYm5Yb3IoYSlcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0dGhpcy5iaXR3aXNlVG8oYSwgb3BfeG9yLCByKTtcblx0XHRyZXR1cm4gcjtcblx0fVxuXHQvLyAocHVibGljKSB0aGlzICYgfmFcblx0ZnVuY3Rpb24gb3BfYW5kbm90KHgsIHkpXG5cdHtcblx0XHRyZXR1cm4geCAmIH55O1xuXHR9XG5cblx0ZnVuY3Rpb24gYm5BbmROb3QoYSlcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0dGhpcy5iaXR3aXNlVG8oYSwgb3BfYW5kbm90LCByKTtcblx0XHRyZXR1cm4gcjtcblx0fVxuXHQvLyAocHVibGljKSB+dGhpc1xuXHRmdW5jdGlvbiBibk5vdCgpXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50OyArK2kpIHJbaV0gPSB0aGlzLkRNICYgfnRoaXNbaV07XG5cdFx0ci50ID0gdGhpcy50O1xuXHRcdHIucyA9IH50aGlzLnM7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpcyA8PCBuXG5cdGZ1bmN0aW9uIGJuU2hpZnRMZWZ0KG4pXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdGlmIChuIDwgMCkgdGhpcy5yU2hpZnRUbygtbiwgcik7XG5cdFx0ZWxzZSB0aGlzLmxTaGlmdFRvKG4sIHIpO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIHRoaXMgPj4gblxuXHRmdW5jdGlvbiBiblNoaWZ0UmlnaHQobilcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0aWYgKG4gPCAwKSB0aGlzLmxTaGlmdFRvKC1uLCByKTtcblx0XHRlbHNlIHRoaXMuclNoaWZ0VG8obiwgcik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gcmV0dXJuIGluZGV4IG9mIGxvd2VzdCAxLWJpdCBpbiB4LCB4IDwgMl4zMVxuXHRmdW5jdGlvbiBsYml0KHgpXG5cdHtcblx0XHRpZiAoeCA9PSAwKSByZXR1cm4gLTE7XG5cdFx0dmFyIHIgPSAwO1xuXHRcdGlmICgoeCAmIDB4ZmZmZikgPT0gMClcblx0XHR7XG5cdFx0XHR4ID4+PSAxNjtcblx0XHRcdHIgKz0gMTY7XG5cdFx0fVxuXHRcdGlmICgoeCAmIDB4ZmYpID09IDApXG5cdFx0e1xuXHRcdFx0eCA+Pj0gODtcblx0XHRcdHIgKz0gODtcblx0XHR9XG5cdFx0aWYgKCh4ICYgMHhmKSA9PSAwKVxuXHRcdHtcblx0XHRcdHggPj49IDQ7XG5cdFx0XHRyICs9IDQ7XG5cdFx0fVxuXHRcdGlmICgoeCAmIDMpID09IDApXG5cdFx0e1xuXHRcdFx0eCA+Pj0gMjtcblx0XHRcdHIgKz0gMjtcblx0XHR9XG5cdFx0aWYgKCh4ICYgMSkgPT0gMCkgKytyO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIHJldHVybnMgaW5kZXggb2YgbG93ZXN0IDEtYml0IChvciAtMSBpZiBub25lKVxuXHRmdW5jdGlvbiBibkdldExvd2VzdFNldEJpdCgpXG5cdHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudDsgKytpKVxuXHRcdFx0aWYgKHRoaXNbaV0gIT0gMCkgcmV0dXJuIGkgKiB0aGlzLkRCICsgbGJpdCh0aGlzW2ldKTtcblx0XHRpZiAodGhpcy5zIDwgMCkgcmV0dXJuIHRoaXMudCAqIHRoaXMuREI7XG5cdFx0cmV0dXJuIC0xO1xuXHR9XG5cdC8vIHJldHVybiBudW1iZXIgb2YgMSBiaXRzIGluIHhcblx0ZnVuY3Rpb24gY2JpdCh4KVxuXHR7XG5cdFx0dmFyIHIgPSAwO1xuXHRcdHdoaWxlICh4ICE9IDApXG5cdFx0e1xuXHRcdFx0eCAmPSB4IC0gMTtcblx0XHRcdCsrcjtcblx0XHR9XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgcmV0dXJuIG51bWJlciBvZiBzZXQgYml0c1xuXHRmdW5jdGlvbiBibkJpdENvdW50KClcblx0e1xuXHRcdHZhciByID0gMCxcblx0XHRcdHggPSB0aGlzLnMgJiB0aGlzLkRNO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50OyArK2kpIHIgKz0gY2JpdCh0aGlzW2ldIF4geCk7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgdHJ1ZSBpZmYgbnRoIGJpdCBpcyBzZXRcblx0ZnVuY3Rpb24gYm5UZXN0Qml0KG4pXG5cdHtcblx0XHR2YXIgaiA9IE1hdGguZmxvb3IobiAvIHRoaXMuREIpO1xuXHRcdGlmIChqID49IHRoaXMudCkgcmV0dXJuICh0aGlzLnMgIT0gMCk7XG5cdFx0cmV0dXJuICgodGhpc1tqXSAmICgxIDw8IChuICUgdGhpcy5EQikpKSAhPSAwKTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSB0aGlzIG9wICgxPDxuKVxuXHRmdW5jdGlvbiBibnBDaGFuZ2VCaXQobiwgb3ApXG5cdHtcblx0XHR2YXIgciA9IEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChuKTtcblx0XHR0aGlzLmJpdHdpc2VUbyhyLCBvcCwgcik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpcyB8ICgxPDxuKVxuXHRmdW5jdGlvbiBiblNldEJpdChuKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX29yKTtcblx0fVxuXHQvLyAocHVibGljKSB0aGlzICYgfigxPDxuKVxuXHRmdW5jdGlvbiBibkNsZWFyQml0KG4pXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5jaGFuZ2VCaXQobiwgb3BfYW5kbm90KTtcblx0fVxuXHQvLyAocHVibGljKSB0aGlzIF4gKDE8PG4pXG5cdGZ1bmN0aW9uIGJuRmxpcEJpdChuKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuY2hhbmdlQml0KG4sIG9wX3hvcik7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgciA9IHRoaXMgKyBhXG5cdGZ1bmN0aW9uIGJucEFkZFRvKGEsIHIpXG5cdHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRjID0gMCxcblx0XHRcdG0gPSBNYXRoLm1pbihhLnQsIHRoaXMudCk7XG5cdFx0d2hpbGUgKGkgPCBtKVxuXHRcdHtcblx0XHRcdGMgKz0gdGhpc1tpXSArIGFbaV07XG5cdFx0XHRyW2krK10gPSBjICYgdGhpcy5ETTtcblx0XHRcdGMgPj49IHRoaXMuREI7XG5cdFx0fVxuXHRcdGlmIChhLnQgPCB0aGlzLnQpXG5cdFx0e1xuXHRcdFx0YyArPSBhLnM7XG5cdFx0XHR3aGlsZSAoaSA8IHRoaXMudClcblx0XHRcdHtcblx0XHRcdFx0YyArPSB0aGlzW2ldO1xuXHRcdFx0XHRyW2krK10gPSBjICYgdGhpcy5ETTtcblx0XHRcdFx0YyA+Pj0gdGhpcy5EQjtcblx0XHRcdH1cblx0XHRcdGMgKz0gdGhpcy5zO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0YyArPSB0aGlzLnM7XG5cdFx0XHR3aGlsZSAoaSA8IGEudClcblx0XHRcdHtcblx0XHRcdFx0YyArPSBhW2ldO1xuXHRcdFx0XHRyW2krK10gPSBjICYgdGhpcy5ETTtcblx0XHRcdFx0YyA+Pj0gdGhpcy5EQjtcblx0XHRcdH1cblx0XHRcdGMgKz0gYS5zO1xuXHRcdH1cblx0XHRyLnMgPSAoYyA8IDApID8gLTEgOiAwO1xuXHRcdGlmIChjID4gMCkgcltpKytdID0gYztcblx0XHRlbHNlIGlmIChjIDwgLTEpIHJbaSsrXSA9IHRoaXMuRFYgKyBjO1xuXHRcdHIudCA9IGk7XG5cdFx0ci5jbGFtcCgpO1xuXHR9XG5cdC8vIChwdWJsaWMpIHRoaXMgKyBhXG5cdGZ1bmN0aW9uIGJuQWRkKGEpXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdHRoaXMuYWRkVG8oYSwgcik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpcyAtIGFcblx0ZnVuY3Rpb24gYm5TdWJ0cmFjdChhKVxuXHR7XG5cdFx0dmFyIHIgPSBuYmkoKTtcblx0XHR0aGlzLnN1YlRvKGEsIHIpO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIHRoaXMgKiBhXG5cdGZ1bmN0aW9uIGJuTXVsdGlwbHkoYSlcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0dGhpcy5tdWx0aXBseVRvKGEsIHIpO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIHRoaXNeMlxuXHRmdW5jdGlvbiBiblNxdWFyZSgpXG5cdHtcblx0XHR2YXIgciA9IG5iaSgpO1xuXHRcdHRoaXMuc3F1YXJlVG8ocik7XG5cdFx0cmV0dXJuIHI7XG5cdH1cblx0Ly8gKHB1YmxpYykgdGhpcyAvIGFcblx0ZnVuY3Rpb24gYm5EaXZpZGUoYSlcblx0e1xuXHRcdHZhciByID0gbmJpKCk7XG5cdFx0dGhpcy5kaXZSZW1UbyhhLCByLCBudWxsKTtcblx0XHRyZXR1cm4gcjtcblx0fVxuXHQvLyAocHVibGljKSB0aGlzICUgYVxuXHRmdW5jdGlvbiBiblJlbWFpbmRlcihhKVxuXHR7XG5cdFx0dmFyIHIgPSBuYmkoKTtcblx0XHR0aGlzLmRpdlJlbVRvKGEsIG51bGwsIHIpO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIFt0aGlzL2EsdGhpcyVhXVxuXHRmdW5jdGlvbiBibkRpdmlkZUFuZFJlbWFpbmRlcihhKVxuXHR7XG5cdFx0dmFyIHEgPSBuYmkoKSxcblx0XHRcdHIgPSBuYmkoKTtcblx0XHR0aGlzLmRpdlJlbVRvKGEsIHEsIHIpO1xuXHRcdHJldHVybiBuZXcgQXJyYXkocSwgcik7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgdGhpcyAqPSBuLCB0aGlzID49IDAsIDEgPCBuIDwgRFZcblx0ZnVuY3Rpb24gYm5wRE11bHRpcGx5KG4pXG5cdHtcblx0XHR0aGlzW3RoaXMudF0gPSB0aGlzLmFtKDAsIG4gLSAxLCB0aGlzLCAwLCAwLCB0aGlzLnQpO1xuXHRcdCsrdGhpcy50O1xuXHRcdHRoaXMuY2xhbXAoKTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSB0aGlzICs9IG4gPDwgdyB3b3JkcywgdGhpcyA+PSAwXG5cdGZ1bmN0aW9uIGJucERBZGRPZmZzZXQobiwgdylcblx0e1xuXHRcdGlmIChuID09IDApIHJldHVybjtcblx0XHR3aGlsZSAodGhpcy50IDw9IHcpIHRoaXNbdGhpcy50KytdID0gMDtcblx0XHR0aGlzW3ddICs9IG47XG5cdFx0d2hpbGUgKHRoaXNbd10gPj0gdGhpcy5EVilcblx0XHR7XG5cdFx0XHR0aGlzW3ddIC09IHRoaXMuRFY7XG5cdFx0XHRpZiAoKyt3ID49IHRoaXMudCkgdGhpc1t0aGlzLnQrK10gPSAwO1xuXHRcdFx0Kyt0aGlzW3ddO1xuXHRcdH1cblx0fVxuXHQvLyBBIFwibnVsbFwiIHJlZHVjZXJcblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdGZ1bmN0aW9uIE51bGxFeHAoKVxuXHR7fVxuXG5cdGZ1bmN0aW9uIG5Ob3AoeClcblx0e1xuXHRcdHJldHVybiB4O1xuXHR9XG5cblx0ZnVuY3Rpb24gbk11bFRvKHgsIHksIHIpXG5cdHtcblx0XHR4Lm11bHRpcGx5VG8oeSwgcik7XG5cdH1cblxuXHRmdW5jdGlvbiBuU3FyVG8oeCwgcilcblx0e1xuXHRcdHguc3F1YXJlVG8ocik7XG5cdH1cblx0TnVsbEV4cC5wcm90b3R5cGUuY29udmVydCA9IG5Ob3A7XG5cdE51bGxFeHAucHJvdG90eXBlLnJldmVydCA9IG5Ob3A7XG5cdE51bGxFeHAucHJvdG90eXBlLm11bFRvID0gbk11bFRvO1xuXHROdWxsRXhwLnByb3RvdHlwZS5zcXJUbyA9IG5TcXJUbztcblx0Ly8gKHB1YmxpYykgdGhpc15lXG5cdGZ1bmN0aW9uIGJuUG93KGUpXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5leHAoZSwgbmV3IE51bGxFeHAoKSk7XG5cdH1cblx0Ly8gKHByb3RlY3RlZCkgciA9IGxvd2VyIG4gd29yZHMgb2YgXCJ0aGlzICogYVwiLCBhLnQgPD0gblxuXHQvLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG5cdGZ1bmN0aW9uIGJucE11bHRpcGx5TG93ZXJUbyhhLCBuLCByKVxuXHR7XG5cdFx0dmFyIGkgPSBNYXRoLm1pbih0aGlzLnQgKyBhLnQsIG4pO1xuXHRcdHIucyA9IDA7IC8vIGFzc3VtZXMgYSx0aGlzID49IDBcblx0XHRyLnQgPSBpO1xuXHRcdHdoaWxlIChpID4gMCkgclstLWldID0gMDtcblx0XHR2YXIgajtcblx0XHRmb3IgKGogPSByLnQgLSB0aGlzLnQ7IGkgPCBqOyArK2kpIHJbaSArIHRoaXMudF0gPSB0aGlzLmFtKDAsIGFbaV0sIHIsIGksIDAsIHRoaXMudCk7XG5cdFx0Zm9yIChqID0gTWF0aC5taW4oYS50LCBuKTsgaSA8IGo7ICsraSkgdGhpcy5hbSgwLCBhW2ldLCByLCBpLCAwLCBuIC0gaSk7XG5cdFx0ci5jbGFtcCgpO1xuXHR9XG5cdC8vIChwcm90ZWN0ZWQpIHIgPSBcInRoaXMgKiBhXCIgd2l0aG91dCBsb3dlciBuIHdvcmRzLCBuID4gMFxuXHQvLyBcInRoaXNcIiBzaG91bGQgYmUgdGhlIGxhcmdlciBvbmUgaWYgYXBwcm9wcmlhdGUuXG5cdGZ1bmN0aW9uIGJucE11bHRpcGx5VXBwZXJUbyhhLCBuLCByKVxuXHR7XG5cdFx0LS1uO1xuXHRcdHZhciBpID0gci50ID0gdGhpcy50ICsgYS50IC0gbjtcblx0XHRyLnMgPSAwOyAvLyBhc3N1bWVzIGEsdGhpcyA+PSAwXG5cdFx0d2hpbGUgKC0taSA+PSAwKSByW2ldID0gMDtcblx0XHRmb3IgKGkgPSBNYXRoLm1heChuIC0gdGhpcy50LCAwKTsgaSA8IGEudDsgKytpKVxuXHRcdFx0clt0aGlzLnQgKyBpIC0gbl0gPSB0aGlzLmFtKG4gLSBpLCBhW2ldLCByLCAwLCAwLCB0aGlzLnQgKyBpIC0gbik7XG5cdFx0ci5jbGFtcCgpO1xuXHRcdHIuZHJTaGlmdFRvKDEsIHIpO1xuXHR9XG5cdC8vIEJhcnJldHQgbW9kdWxhciByZWR1Y3Rpb25cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdGZ1bmN0aW9uIEJhcnJldHQobSlcblx0e1xuXHRcdC8vIHNldHVwIEJhcnJldHRcblx0XHR0aGlzLnIyID0gbmJpKCk7XG5cdFx0dGhpcy5xMyA9IG5iaSgpO1xuXHRcdEJpZ0ludGVnZXIuT05FLmRsU2hpZnRUbygyICogbS50LCB0aGlzLnIyKTtcblx0XHR0aGlzLm11ID0gdGhpcy5yMi5kaXZpZGUobSk7XG5cdFx0dGhpcy5tID0gbTtcblx0fVxuXG5cdGZ1bmN0aW9uIGJhcnJldHRDb252ZXJ0KHgpXG5cdHtcblx0XHRpZiAoeC5zIDwgMCB8fCB4LnQgPiAyICogdGhpcy5tLnQpIHJldHVybiB4Lm1vZCh0aGlzLm0pO1xuXHRcdGVsc2UgaWYgKHguY29tcGFyZVRvKHRoaXMubSkgPCAwKSByZXR1cm4geDtcblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIHIgPSBuYmkoKTtcblx0XHRcdHguY29weVRvKHIpO1xuXHRcdFx0dGhpcy5yZWR1Y2Uocik7XG5cdFx0XHRyZXR1cm4gcjtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBiYXJyZXR0UmV2ZXJ0KHgpXG5cdHtcblx0XHRyZXR1cm4geDtcblx0fVxuXHQvLyB4ID0geCBtb2QgbSAoSEFDIDE0LjQyKVxuXHRmdW5jdGlvbiBiYXJyZXR0UmVkdWNlKHgpXG5cdHtcblx0XHR4LmRyU2hpZnRUbyh0aGlzLm0udCAtIDEsIHRoaXMucjIpO1xuXHRcdGlmICh4LnQgPiB0aGlzLm0udCArIDEpXG5cdFx0e1xuXHRcdFx0eC50ID0gdGhpcy5tLnQgKyAxO1xuXHRcdFx0eC5jbGFtcCgpO1xuXHRcdH1cblx0XHR0aGlzLm11Lm11bHRpcGx5VXBwZXJUbyh0aGlzLnIyLCB0aGlzLm0udCArIDEsIHRoaXMucTMpO1xuXHRcdHRoaXMubS5tdWx0aXBseUxvd2VyVG8odGhpcy5xMywgdGhpcy5tLnQgKyAxLCB0aGlzLnIyKTtcblx0XHR3aGlsZSAoeC5jb21wYXJlVG8odGhpcy5yMikgPCAwKSB4LmRBZGRPZmZzZXQoMSwgdGhpcy5tLnQgKyAxKTtcblx0XHR4LnN1YlRvKHRoaXMucjIsIHgpO1xuXHRcdHdoaWxlICh4LmNvbXBhcmVUbyh0aGlzLm0pID49IDApIHguc3ViVG8odGhpcy5tLCB4KTtcblx0fVxuXHQvLyByID0geF4yIG1vZCBtOyB4ICE9IHJcblx0ZnVuY3Rpb24gYmFycmV0dFNxclRvKHgsIHIpXG5cdHtcblx0XHR4LnNxdWFyZVRvKHIpO1xuXHRcdHRoaXMucmVkdWNlKHIpO1xuXHR9XG5cdC8vIHIgPSB4KnkgbW9kIG07IHgseSAhPSByXG5cdGZ1bmN0aW9uIGJhcnJldHRNdWxUbyh4LCB5LCByKVxuXHR7XG5cdFx0eC5tdWx0aXBseVRvKHksIHIpO1xuXHRcdHRoaXMucmVkdWNlKHIpO1xuXHR9XG5cdEJhcnJldHQucHJvdG90eXBlLmNvbnZlcnQgPSBiYXJyZXR0Q29udmVydDtcblx0QmFycmV0dC5wcm90b3R5cGUucmV2ZXJ0ID0gYmFycmV0dFJldmVydDtcblx0QmFycmV0dC5wcm90b3R5cGUucmVkdWNlID0gYmFycmV0dFJlZHVjZTtcblx0QmFycmV0dC5wcm90b3R5cGUubXVsVG8gPSBiYXJyZXR0TXVsVG87XG5cdEJhcnJldHQucHJvdG90eXBlLnNxclRvID0gYmFycmV0dFNxclRvO1xuXHQvLyAocHVibGljKSB0aGlzXmUgJSBtIChIQUMgMTQuODUpXG5cdGZ1bmN0aW9uIGJuTW9kUG93KGUsIG0pXG5cdHtcblx0XHR2YXIgaSA9IGUuYml0TGVuZ3RoKCksXG5cdFx0XHRrLCByID0gbmJ2KDEpLFxuXHRcdFx0ejtcblx0XHRpZiAoaSA8PSAwKSByZXR1cm4gcjtcblx0XHRlbHNlIGlmIChpIDwgMTgpIGsgPSAxO1xuXHRcdGVsc2UgaWYgKGkgPCA0OCkgayA9IDM7XG5cdFx0ZWxzZSBpZiAoaSA8IDE0NCkgayA9IDQ7XG5cdFx0ZWxzZSBpZiAoaSA8IDc2OCkgayA9IDU7XG5cdFx0ZWxzZSBrID0gNjtcblx0XHRpZiAoaSA8IDgpXG5cdFx0XHR6ID0gbmV3IENsYXNzaWMobSk7XG5cdFx0ZWxzZSBpZiAobS5pc0V2ZW4oKSlcblx0XHRcdHogPSBuZXcgQmFycmV0dChtKTtcblx0XHRlbHNlXG5cdFx0XHR6ID0gbmV3IE1vbnRnb21lcnkobSk7XG5cdFx0Ly8gcHJlY29tcHV0YXRpb25cblx0XHR2YXIgZyA9IG5ldyBBcnJheSgpLFxuXHRcdFx0biA9IDMsXG5cdFx0XHRrMSA9IGsgLSAxLFxuXHRcdFx0a20gPSAoMSA8PCBrKSAtIDE7XG5cdFx0Z1sxXSA9IHouY29udmVydCh0aGlzKTtcblx0XHRpZiAoayA+IDEpXG5cdFx0e1xuXHRcdFx0dmFyIGcyID0gbmJpKCk7XG5cdFx0XHR6LnNxclRvKGdbMV0sIGcyKTtcblx0XHRcdHdoaWxlIChuIDw9IGttKVxuXHRcdFx0e1xuXHRcdFx0XHRnW25dID0gbmJpKCk7XG5cdFx0XHRcdHoubXVsVG8oZzIsIGdbbiAtIDJdLCBnW25dKTtcblx0XHRcdFx0biArPSAyO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgaiA9IGUudCAtIDEsXG5cdFx0XHR3LCBpczEgPSB0cnVlLFxuXHRcdFx0cjIgPSBuYmkoKSxcblx0XHRcdHQ7XG5cdFx0aSA9IG5iaXRzKGVbal0pIC0gMTtcblx0XHR3aGlsZSAoaiA+PSAwKVxuXHRcdHtcblx0XHRcdGlmIChpID49IGsxKSB3ID0gKGVbal0gPj4gKGkgLSBrMSkpICYga207XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHcgPSAoZVtqXSAmICgoMSA8PCAoaSArIDEpKSAtIDEpKSA8PCAoazEgLSBpKTtcblx0XHRcdFx0aWYgKGogPiAwKSB3IHw9IGVbaiAtIDFdID4+ICh0aGlzLkRCICsgaSAtIGsxKTtcblx0XHRcdH1cblx0XHRcdG4gPSBrO1xuXHRcdFx0d2hpbGUgKCh3ICYgMSkgPT0gMClcblx0XHRcdHtcblx0XHRcdFx0dyA+Pj0gMTtcblx0XHRcdFx0LS1uO1xuXHRcdFx0fVxuXHRcdFx0aWYgKChpIC09IG4pIDwgMClcblx0XHRcdHtcblx0XHRcdFx0aSArPSB0aGlzLkRCO1xuXHRcdFx0XHQtLWo7XG5cdFx0XHR9XG5cdFx0XHRpZiAoaXMxKVxuXHRcdFx0eyAvLyByZXQgPT0gMSwgZG9uJ3QgYm90aGVyIHNxdWFyaW5nIG9yIG11bHRpcGx5aW5nIGl0XG5cdFx0XHRcdGdbd10uY29weVRvKHIpO1xuXHRcdFx0XHRpczEgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0d2hpbGUgKG4gPiAxKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ei5zcXJUbyhyLCByMik7XG5cdFx0XHRcdFx0ei5zcXJUbyhyMiwgcik7XG5cdFx0XHRcdFx0biAtPSAyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChuID4gMCkgei5zcXJUbyhyLCByMik7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHQgPSByO1xuXHRcdFx0XHRcdHIgPSByMjtcblx0XHRcdFx0XHRyMiA9IHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0ei5tdWxUbyhyMiwgZ1t3XSwgcik7XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAoaiA+PSAwICYmIChlW2pdICYgKDEgPDwgaSkpID09IDApXG5cdFx0XHR7XG5cdFx0XHRcdHouc3FyVG8ociwgcjIpO1xuXHRcdFx0XHR0ID0gcjtcblx0XHRcdFx0ciA9IHIyO1xuXHRcdFx0XHRyMiA9IHQ7XG5cdFx0XHRcdGlmICgtLWkgPCAwKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aSA9IHRoaXMuREIgLSAxO1xuXHRcdFx0XHRcdC0tajtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gei5yZXZlcnQocik7XG5cdH1cblx0Ly8gKHB1YmxpYykgZ2NkKHRoaXMsYSkgKEhBQyAxNC41NClcblx0ZnVuY3Rpb24gYm5HQ0QoYSlcblx0e1xuXHRcdHZhciB4ID0gKHRoaXMucyA8IDApID8gdGhpcy5uZWdhdGUoKSA6IHRoaXMuY2xvbmUoKTtcblx0XHR2YXIgeSA9IChhLnMgPCAwKSA/IGEubmVnYXRlKCkgOiBhLmNsb25lKCk7XG5cdFx0aWYgKHguY29tcGFyZVRvKHkpIDwgMClcblx0XHR7XG5cdFx0XHR2YXIgdCA9IHg7XG5cdFx0XHR4ID0geTtcblx0XHRcdHkgPSB0O1xuXHRcdH1cblx0XHR2YXIgaSA9IHguZ2V0TG93ZXN0U2V0Qml0KCksXG5cdFx0XHRnID0geS5nZXRMb3dlc3RTZXRCaXQoKTtcblx0XHRpZiAoZyA8IDApIHJldHVybiB4O1xuXHRcdGlmIChpIDwgZykgZyA9IGk7XG5cdFx0aWYgKGcgPiAwKVxuXHRcdHtcblx0XHRcdHguclNoaWZ0VG8oZywgeCk7XG5cdFx0XHR5LnJTaGlmdFRvKGcsIHkpO1xuXHRcdH1cblx0XHR3aGlsZSAoeC5zaWdudW0oKSA+IDApXG5cdFx0e1xuXHRcdFx0aWYgKChpID0geC5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB4LnJTaGlmdFRvKGksIHgpO1xuXHRcdFx0aWYgKChpID0geS5nZXRMb3dlc3RTZXRCaXQoKSkgPiAwKSB5LnJTaGlmdFRvKGksIHkpO1xuXHRcdFx0aWYgKHguY29tcGFyZVRvKHkpID49IDApXG5cdFx0XHR7XG5cdFx0XHRcdHguc3ViVG8oeSwgeCk7XG5cdFx0XHRcdHguclNoaWZ0VG8oMSwgeCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHkuc3ViVG8oeCwgeSk7XG5cdFx0XHRcdHkuclNoaWZ0VG8oMSwgeSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChnID4gMCkgeS5sU2hpZnRUbyhnLCB5KTtcblx0XHRyZXR1cm4geTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSB0aGlzICUgbiwgbiA8IDJeMjZcblx0ZnVuY3Rpb24gYm5wTW9kSW50KG4pXG5cdHtcblx0XHRpZiAobiA8PSAwKSByZXR1cm4gMDtcblx0XHR2YXIgZCA9IHRoaXMuRFYgJSBuLFxuXHRcdFx0ciA9ICh0aGlzLnMgPCAwKSA/IG4gLSAxIDogMDtcblx0XHRpZiAodGhpcy50ID4gMClcblx0XHRcdGlmIChkID09IDApIHIgPSB0aGlzWzBdICUgbjtcblx0XHRcdGVsc2Vcblx0XHRcdFx0Zm9yICh2YXIgaSA9IHRoaXMudCAtIDE7IGkgPj0gMDsgLS1pKSByID0gKGQgKiByICsgdGhpc1tpXSkgJSBuO1xuXHRcdHJldHVybiByO1xuXHR9XG5cdC8vIChwdWJsaWMpIDEvdGhpcyAlIG0gKEhBQyAxNC42MSlcblx0ZnVuY3Rpb24gYm5Nb2RJbnZlcnNlKG0pXG5cdHtcblx0XHR2YXIgYWMgPSBtLmlzRXZlbigpO1xuXHRcdGlmICgodGhpcy5pc0V2ZW4oKSAmJiBhYykgfHwgbS5zaWdudW0oKSA9PSAwKSByZXR1cm4gQmlnSW50ZWdlci5aRVJPO1xuXHRcdHZhciB1ID0gbS5jbG9uZSgpLFxuXHRcdFx0diA9IHRoaXMuY2xvbmUoKTtcblx0XHR2YXIgYSA9IG5idigxKSxcblx0XHRcdGIgPSBuYnYoMCksXG5cdFx0XHRjID0gbmJ2KDApLFxuXHRcdFx0ZCA9IG5idigxKTtcblx0XHR3aGlsZSAodS5zaWdudW0oKSAhPSAwKVxuXHRcdHtcblx0XHRcdHdoaWxlICh1LmlzRXZlbigpKVxuXHRcdFx0e1xuXHRcdFx0XHR1LnJTaGlmdFRvKDEsIHUpO1xuXHRcdFx0XHRpZiAoYWMpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoIWEuaXNFdmVuKCkgfHwgIWIuaXNFdmVuKCkpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YS5hZGRUbyh0aGlzLCBhKTtcblx0XHRcdFx0XHRcdGIuc3ViVG8obSwgYik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGEuclNoaWZ0VG8oMSwgYSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAoIWIuaXNFdmVuKCkpIGIuc3ViVG8obSwgYik7XG5cdFx0XHRcdGIuclNoaWZ0VG8oMSwgYik7XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAodi5pc0V2ZW4oKSlcblx0XHRcdHtcblx0XHRcdFx0di5yU2hpZnRUbygxLCB2KTtcblx0XHRcdFx0aWYgKGFjKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKCFjLmlzRXZlbigpIHx8ICFkLmlzRXZlbigpKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGMuYWRkVG8odGhpcywgYyk7XG5cdFx0XHRcdFx0XHRkLnN1YlRvKG0sIGQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjLnJTaGlmdFRvKDEsIGMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgaWYgKCFkLmlzRXZlbigpKSBkLnN1YlRvKG0sIGQpO1xuXHRcdFx0XHRkLnJTaGlmdFRvKDEsIGQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHUuY29tcGFyZVRvKHYpID49IDApXG5cdFx0XHR7XG5cdFx0XHRcdHUuc3ViVG8odiwgdSk7XG5cdFx0XHRcdGlmIChhYykgYS5zdWJUbyhjLCBhKTtcblx0XHRcdFx0Yi5zdWJUbyhkLCBiKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0di5zdWJUbyh1LCB2KTtcblx0XHRcdFx0aWYgKGFjKSBjLnN1YlRvKGEsIGMpO1xuXHRcdFx0XHRkLnN1YlRvKGIsIGQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAodi5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpICE9IDApIHJldHVybiBCaWdJbnRlZ2VyLlpFUk87XG5cdFx0aWYgKGQuY29tcGFyZVRvKG0pID49IDApIHJldHVybiBkLnN1YnRyYWN0KG0pO1xuXHRcdGlmIChkLnNpZ251bSgpIDwgMCkgZC5hZGRUbyhtLCBkKTtcblx0XHRlbHNlIHJldHVybiBkO1xuXHRcdGlmIChkLnNpZ251bSgpIDwgMCkgcmV0dXJuIGQuYWRkKG0pO1xuXHRcdGVsc2UgcmV0dXJuIGQ7XG5cdH1cblx0dmFyIGxvd3ByaW1lcyA9IFsyLCAzLCA1LCA3LCAxMSwgMTMsIDE3LCAxOSwgMjMsIDI5LCAzMSwgMzcsIDQxLCA0MywgNDcsIDUzLCA1OSwgNjEsIDY3LCA3MSwgNzMsIDc5LCA4MywgODksIDk3LCAxMDEsIDEwMywgMTA3LCAxMDksIDExMywgMTI3LCAxMzEsIDEzNywgMTM5LCAxNDksIDE1MSwgMTU3LCAxNjMsIDE2NywgMTczLCAxNzksIDE4MSwgMTkxLCAxOTMsIDE5NywgMTk5LCAyMTEsIDIyMywgMjI3LCAyMjksIDIzMywgMjM5LCAyNDEsIDI1MSwgMjU3LCAyNjMsIDI2OSwgMjcxLCAyNzcsIDI4MSwgMjgzLCAyOTMsIDMwNywgMzExLCAzMTMsIDMxNywgMzMxLCAzMzcsIDM0NywgMzQ5LCAzNTMsIDM1OSwgMzY3LCAzNzMsIDM3OSwgMzgzLCAzODksIDM5NywgNDAxLCA0MDksIDQxOSwgNDIxLCA0MzEsIDQzMywgNDM5LCA0NDMsIDQ0OSwgNDU3LCA0NjEsIDQ2MywgNDY3LCA0NzksIDQ4NywgNDkxLCA0OTksIDUwMywgNTA5LCA1MjEsIDUyMywgNTQxLCA1NDcsIDU1NywgNTYzLCA1NjksIDU3MSwgNTc3LCA1ODcsIDU5MywgNTk5LCA2MDEsIDYwNywgNjEzLCA2MTcsIDYxOSwgNjMxLCA2NDEsIDY0MywgNjQ3LCA2NTMsIDY1OSwgNjYxLCA2NzMsIDY3NywgNjgzLCA2OTEsIDcwMSwgNzA5LCA3MTksIDcyNywgNzMzLCA3MzksIDc0MywgNzUxLCA3NTcsIDc2MSwgNzY5LCA3NzMsIDc4NywgNzk3LCA4MDksIDgxMSwgODIxLCA4MjMsIDgyNywgODI5LCA4MzksIDg1MywgODU3LCA4NTksIDg2MywgODc3LCA4ODEsIDg4MywgODg3LCA5MDcsIDkxMSwgOTE5LCA5MjksIDkzNywgOTQxLCA5NDcsIDk1MywgOTY3LCA5NzEsIDk3NywgOTgzLCA5OTEsIDk5N107XG5cdHZhciBscGxpbSA9ICgxIDw8IDI2KSAvIGxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoIC0gMV07XG5cdC8vIChwdWJsaWMpIHRlc3QgcHJpbWFsaXR5IHdpdGggY2VydGFpbnR5ID49IDEtLjVedFxuXHRmdW5jdGlvbiBibklzUHJvYmFibGVQcmltZSh0KVxuXHR7XG5cdFx0dmFyIGksIHggPSB0aGlzLmFicygpO1xuXHRcdGlmICh4LnQgPT0gMSAmJiB4WzBdIDw9IGxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoIC0gMV0pXG5cdFx0e1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGxvd3ByaW1lcy5sZW5ndGg7ICsraSlcblx0XHRcdFx0aWYgKHhbMF0gPT0gbG93cHJpbWVzW2ldKSByZXR1cm4gdHJ1ZTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKHguaXNFdmVuKCkpIHJldHVybiBmYWxzZTtcblx0XHRpID0gMTtcblx0XHR3aGlsZSAoaSA8IGxvd3ByaW1lcy5sZW5ndGgpXG5cdFx0e1xuXHRcdFx0dmFyIG0gPSBsb3dwcmltZXNbaV0sXG5cdFx0XHRcdGogPSBpICsgMTtcblx0XHRcdHdoaWxlIChqIDwgbG93cHJpbWVzLmxlbmd0aCAmJiBtIDwgbHBsaW0pIG0gKj0gbG93cHJpbWVzW2orK107XG5cdFx0XHRtID0geC5tb2RJbnQobSk7XG5cdFx0XHR3aGlsZSAoaSA8IGopXG5cdFx0XHRcdGlmIChtICUgbG93cHJpbWVzW2krK10gPT0gMCkgcmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4geC5taWxsZXJSYWJpbih0KTtcblx0fVxuXHQvLyAocHJvdGVjdGVkKSB0cnVlIGlmIHByb2JhYmx5IHByaW1lIChIQUMgNC4yNCwgTWlsbGVyLVJhYmluKVxuXHRmdW5jdGlvbiBibnBNaWxsZXJSYWJpbih0KVxuXHR7XG5cdFx0dmFyIG4xID0gdGhpcy5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSk7XG5cdFx0dmFyIGsgPSBuMS5nZXRMb3dlc3RTZXRCaXQoKTtcblx0XHRpZiAoayA8PSAwKSByZXR1cm4gZmFsc2U7XG5cdFx0dmFyIHIgPSBuMS5zaGlmdFJpZ2h0KGspO1xuXHRcdHQgPSAodCArIDEpID4+IDE7XG5cdFx0aWYgKHQgPiBsb3dwcmltZXMubGVuZ3RoKSB0ID0gbG93cHJpbWVzLmxlbmd0aDtcblx0XHR2YXIgYSA9IG5iaSgpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdDsgKytpKVxuXHRcdHtcblx0XHRcdC8vUGljayBiYXNlcyBhdCByYW5kb20sIGluc3RlYWQgb2Ygc3RhcnRpbmcgYXQgMlxuXHRcdFx0YS5mcm9tSW50KGxvd3ByaW1lc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBsb3dwcmltZXMubGVuZ3RoKV0pO1xuXHRcdFx0dmFyIHkgPSBhLm1vZFBvdyhyLCB0aGlzKTtcblx0XHRcdGlmICh5LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkgIT0gMCAmJiB5LmNvbXBhcmVUbyhuMSkgIT0gMClcblx0XHRcdHtcblx0XHRcdFx0dmFyIGogPSAxO1xuXHRcdFx0XHR3aGlsZSAoaisrIDwgayAmJiB5LmNvbXBhcmVUbyhuMSkgIT0gMClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHkgPSB5Lm1vZFBvd0ludCgyLCB0aGlzKTtcblx0XHRcdFx0XHRpZiAoeS5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpID09IDApIHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoeS5jb21wYXJlVG8objEpICE9IDApIHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0Ly8gcHJvdGVjdGVkXG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmNodW5rU2l6ZSA9IGJucENodW5rU2l6ZTtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUudG9SYWRpeCA9IGJucFRvUmFkaXg7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmZyb21SYWRpeCA9IGJucEZyb21SYWRpeDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbU51bWJlciA9IGJucEZyb21OdW1iZXI7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdHdpc2VUbyA9IGJucEJpdHdpc2VUbztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuY2hhbmdlQml0ID0gYm5wQ2hhbmdlQml0O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5hZGRUbyA9IGJucEFkZFRvO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5kTXVsdGlwbHkgPSBibnBETXVsdGlwbHk7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmRBZGRPZmZzZXQgPSBibnBEQWRkT2Zmc2V0O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseUxvd2VyVG8gPSBibnBNdWx0aXBseUxvd2VyVG87XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5VXBwZXJUbyA9IGJucE11bHRpcGx5VXBwZXJUbztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUubW9kSW50ID0gYm5wTW9kSW50O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5taWxsZXJSYWJpbiA9IGJucE1pbGxlclJhYmluO1xuXHQvLyBwdWJsaWNcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuY2xvbmUgPSBibkNsb25lO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5pbnRWYWx1ZSA9IGJuSW50VmFsdWU7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmJ5dGVWYWx1ZSA9IGJuQnl0ZVZhbHVlO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaG9ydFZhbHVlID0gYm5TaG9ydFZhbHVlO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaWdudW0gPSBiblNpZ051bTtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUudG9CeXRlQXJyYXkgPSBiblRvQnl0ZUFycmF5O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5lcXVhbHMgPSBibkVxdWFscztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUubWluID0gYm5NaW47XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLm1heCA9IGJuTWF4O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbmQgPSBibkFuZDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUub3IgPSBibk9yO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS54b3IgPSBiblhvcjtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuYW5kTm90ID0gYm5BbmROb3Q7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLm5vdCA9IGJuTm90O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaGlmdExlZnQgPSBiblNoaWZ0TGVmdDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuc2hpZnRSaWdodCA9IGJuU2hpZnRSaWdodDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuZ2V0TG93ZXN0U2V0Qml0ID0gYm5HZXRMb3dlc3RTZXRCaXQ7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmJpdENvdW50ID0gYm5CaXRDb3VudDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUudGVzdEJpdCA9IGJuVGVzdEJpdDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuc2V0Qml0ID0gYm5TZXRCaXQ7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmNsZWFyQml0ID0gYm5DbGVhckJpdDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuZmxpcEJpdCA9IGJuRmxpcEJpdDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUuYWRkID0gYm5BZGQ7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLnN1YnRyYWN0ID0gYm5TdWJ0cmFjdDtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHkgPSBibk11bHRpcGx5O1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZpZGUgPSBibkRpdmlkZTtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUucmVtYWluZGVyID0gYm5SZW1haW5kZXI7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmRpdmlkZUFuZFJlbWFpbmRlciA9IGJuRGl2aWRlQW5kUmVtYWluZGVyO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RQb3cgPSBibk1vZFBvdztcblx0QmlnSW50ZWdlci5wcm90b3R5cGUubW9kSW52ZXJzZSA9IGJuTW9kSW52ZXJzZTtcblx0QmlnSW50ZWdlci5wcm90b3R5cGUucG93ID0gYm5Qb3c7XG5cdEJpZ0ludGVnZXIucHJvdG90eXBlLmdjZCA9IGJuR0NEO1xuXHRCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc1Byb2JhYmxlUHJpbWUgPSBibklzUHJvYmFibGVQcmltZTtcblx0Ly8gSlNCTi1zcGVjaWZpYyBleHRlbnNpb25cblx0QmlnSW50ZWdlci5wcm90b3R5cGUuc3F1YXJlID0gYm5TcXVhcmU7XG5cdHZhciBJbnQxMjggPSBCaWdJbnRlZ2VyO1xuXHQvLyBCaWdJbnRlZ2VyIGludGVyZmFjZXMgbm90IGltcGxlbWVudGVkIGluIGpzYm46XG5cdC8vIEJpZ0ludGVnZXIoaW50IHNpZ251bSwgYnl0ZVtdIG1hZ25pdHVkZSlcblx0Ly8gZG91YmxlIGRvdWJsZVZhbHVlKClcblx0Ly8gZmxvYXQgZmxvYXRWYWx1ZSgpXG5cdC8vIGludCBoYXNoQ29kZSgpXG5cdC8vIGxvbmcgbG9uZ1ZhbHVlKClcblx0Ly8gc3RhdGljIEJpZ0ludGVnZXIgdmFsdWVPZihsb25nIHZhbClcblx0Ly8gSGVscGVyIGZ1bmN0aW9ucyB0byBtYWtlIEJpZ0ludGVnZXIgZnVuY3Rpb25zIGNhbGxhYmxlIHdpdGggdHdvIHBhcmFtZXRlcnNcblx0Ly8gYXMgaW4gb3JpZ2luYWwgQyMgQ2xpcHBlclxuXHRJbnQxMjgucHJvdG90eXBlLklzTmVnYXRpdmUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0aWYgKHRoaXMuY29tcGFyZVRvKEludDEyOC5aRVJPKSA9PSAtMSkgcmV0dXJuIHRydWU7XG5cdFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0SW50MTI4Lm9wX0VxdWFsaXR5ID0gZnVuY3Rpb24gKHZhbDEsIHZhbDIpXG5cdHtcblx0XHRpZiAodmFsMS5jb21wYXJlVG8odmFsMikgPT0gMCkgcmV0dXJuIHRydWU7XG5cdFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0SW50MTI4Lm9wX0luZXF1YWxpdHkgPSBmdW5jdGlvbiAodmFsMSwgdmFsMilcblx0e1xuXHRcdGlmICh2YWwxLmNvbXBhcmVUbyh2YWwyKSAhPSAwKSByZXR1cm4gdHJ1ZTtcblx0XHRlbHNlIHJldHVybiBmYWxzZTtcblx0fTtcblxuXHRJbnQxMjgub3BfR3JlYXRlclRoYW4gPSBmdW5jdGlvbiAodmFsMSwgdmFsMilcblx0e1xuXHRcdGlmICh2YWwxLmNvbXBhcmVUbyh2YWwyKSA+IDApIHJldHVybiB0cnVlO1xuXHRcdGVsc2UgcmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdEludDEyOC5vcF9MZXNzVGhhbiA9IGZ1bmN0aW9uICh2YWwxLCB2YWwyKVxuXHR7XG5cdFx0aWYgKHZhbDEuY29tcGFyZVRvKHZhbDIpIDwgMCkgcmV0dXJuIHRydWU7XG5cdFx0ZWxzZSByZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0SW50MTI4Lm9wX0FkZGl0aW9uID0gZnVuY3Rpb24gKGxocywgcmhzKVxuXHR7XG5cdFx0cmV0dXJuIG5ldyBJbnQxMjgobGhzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkuYWRkKG5ldyBJbnQxMjgocmhzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkpO1xuXHR9O1xuXG5cdEludDEyOC5vcF9TdWJ0cmFjdGlvbiA9IGZ1bmN0aW9uIChsaHMsIHJocylcblx0e1xuXHRcdHJldHVybiBuZXcgSW50MTI4KGxocywgdW5kZWZpbmVkLCB1bmRlZmluZWQpLnN1YnRyYWN0KG5ldyBJbnQxMjgocmhzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkpO1xuXHR9O1xuXG5cdEludDEyOC5JbnQxMjhNdWwgPSBmdW5jdGlvbiAobGhzLCByaHMpXG5cdHtcblx0XHRyZXR1cm4gbmV3IEludDEyOChsaHMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKS5tdWx0aXBseShuZXcgSW50MTI4KHJocywgdW5kZWZpbmVkLCB1bmRlZmluZWQpKTtcblx0fTtcblxuXHRJbnQxMjgub3BfRGl2aXNpb24gPSBmdW5jdGlvbiAobGhzLCByaHMpXG5cdHtcblx0XHRyZXR1cm4gbGhzLmRpdmlkZShyaHMpO1xuXHR9O1xuXG5cdEludDEyOC5wcm90b3R5cGUuVG9Eb3VibGUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0cmV0dXJuIHBhcnNlRmxvYXQodGhpcy50b1N0cmluZygpKTsgLy8gVGhpcyBjb3VsZCBiZSBzb21ldGhpbmcgZmFzdGVyXG5cdH07XG5cblx0Ly8gZW5kIG9mIEludDEyOCBzZWN0aW9uXG5cdC8qXG5cdC8vIFVuY29tbWVudCB0aGUgZm9sbG93aW5nIHR3byBsaW5lcyBpZiB5b3Ugd2FudCB0byB1c2UgSW50MTI4IG91dHNpZGUgQ2xpcHBlckxpYlxuXHRpZiAodHlwZW9mKGRvY3VtZW50KSAhPT0gXCJ1bmRlZmluZWRcIikgd2luZG93LkludDEyOCA9IEludDEyODtcblx0ZWxzZSBzZWxmLkludDEyOCA9IEludDEyODtcblx0Ki9cblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHQvLyBIZXJlIHN0YXJ0cyB0aGUgYWN0dWFsIENsaXBwZXIgbGlicmFyeTpcblx0Ly8gSGVscGVyIGZ1bmN0aW9uIHRvIHN1cHBvcnQgSW5oZXJpdGFuY2UgaW4gSmF2YXNjcmlwdFxuXHR2YXIgSW5oZXJpdCA9IGZ1bmN0aW9uIChjZSwgY2UyKVxuXHR7XG5cdFx0dmFyIHA7XG5cdFx0aWYgKHR5cGVvZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpID09PSAndW5kZWZpbmVkJylcblx0XHR7XG5cdFx0XHRmb3IgKHAgaW4gY2UyLnByb3RvdHlwZSlcblx0XHRcdFx0aWYgKHR5cGVvZiAoY2UucHJvdG90eXBlW3BdKSA9PT0gJ3VuZGVmaW5lZCcgfHwgY2UucHJvdG90eXBlW3BdID09PSBPYmplY3QucHJvdG90eXBlW3BdKSBjZS5wcm90b3R5cGVbcF0gPSBjZTIucHJvdG90eXBlW3BdO1xuXHRcdFx0Zm9yIChwIGluIGNlMilcblx0XHRcdFx0aWYgKHR5cGVvZiAoY2VbcF0pID09PSAndW5kZWZpbmVkJykgY2VbcF0gPSBjZTJbcF07XG5cdFx0XHRjZS4kYmFzZUN0b3IgPSBjZTI7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR2YXIgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjZTIucHJvdG90eXBlKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspXG5cdFx0XHRcdGlmICh0eXBlb2YgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY2UucHJvdG90eXBlLCBwcm9wc1tpXSkpID09PSAndW5kZWZpbmVkJykgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNlLnByb3RvdHlwZSwgcHJvcHNbaV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY2UyLnByb3RvdHlwZSwgcHJvcHNbaV0pKTtcblx0XHRcdGZvciAocCBpbiBjZTIpXG5cdFx0XHRcdGlmICh0eXBlb2YgKGNlW3BdKSA9PT0gJ3VuZGVmaW5lZCcpIGNlW3BdID0gY2UyW3BdO1xuXHRcdFx0Y2UuJGJhc2VDdG9yID0gY2UyO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5QYXRoID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiBbXTtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBhdGgucHJvdG90eXBlLnB1c2ggPSBBcnJheS5wcm90b3R5cGUucHVzaDtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5QYXRocyA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHRyZXR1cm4gW107IC8vIFdhcyBwcmV2aW91c2x5IFtbXV0sIGJ1dCBjYXVzZWQgcHJvYmxlbXMgd2hlbiBwdXNoZWRcblx0fTtcblxuXHRDbGlwcGVyTGliLlBhdGhzLnByb3RvdHlwZS5wdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG5cblx0Ly8gUHJlc2VydmVzIHRoZSBjYWxsaW5nIHdheSBvZiBvcmlnaW5hbCBDIyBDbGlwcGVyXG5cdC8vIElzIGVzc2VudGlhbCBkdWUgdG8gY29tcGF0aWJpbGl0eSwgYmVjYXVzZSBEb3VibGVQb2ludCBpcyBwdWJsaWMgY2xhc3MgaW4gb3JpZ2luYWwgQyMgdmVyc2lvblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5Eb3VibGVQb2ludCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR2YXIgYSA9IGFyZ3VtZW50cztcblx0XHR0aGlzLlggPSAwO1xuXHRcdHRoaXMuWSA9IDA7XG5cdFx0Ly8gcHVibGljIERvdWJsZVBvaW50KERvdWJsZVBvaW50IGRwKVxuXHRcdC8vIHB1YmxpYyBEb3VibGVQb2ludChJbnRQb2ludCBpcClcblx0XHRpZiAoYS5sZW5ndGggPT09IDEpXG5cdFx0e1xuXHRcdFx0dGhpcy5YID0gYVswXS5YO1xuXHRcdFx0dGhpcy5ZID0gYVswXS5ZO1xuXHRcdH1cblx0XHRlbHNlIGlmIChhLmxlbmd0aCA9PT0gMilcblx0XHR7XG5cdFx0XHR0aGlzLlggPSBhWzBdO1xuXHRcdFx0dGhpcy5ZID0gYVsxXTtcblx0XHR9XG5cdH07IC8vIFRoaXMgaXMgaW50ZXJuYWwgZmFzdGVyIGZ1bmN0aW9uIHdoZW4gY2FsbGVkIHdpdGhvdXQgYXJndW1lbnRzXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkRvdWJsZVBvaW50MCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLlggPSAwO1xuXHRcdHRoaXMuWSA9IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5Eb3VibGVQb2ludDAucHJvdG90eXBlID0gQ2xpcHBlckxpYi5Eb3VibGVQb2ludC5wcm90b3R5cGU7XG5cblx0Ly8gVGhpcyBpcyBpbnRlcm5hbCBmYXN0ZXIgZnVuY3Rpb24gd2hlbiBjYWxsZWQgd2l0aCAxIGFyZ3VtZW50IChkcCBvciBpcClcblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuRG91YmxlUG9pbnQxID0gZnVuY3Rpb24gKGRwKVxuXHR7XG5cdFx0dGhpcy5YID0gZHAuWDtcblx0XHR0aGlzLlkgPSBkcC5ZO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuRG91YmxlUG9pbnQxLnByb3RvdHlwZSA9IENsaXBwZXJMaWIuRG91YmxlUG9pbnQucHJvdG90eXBlO1xuXG5cdC8vIFRoaXMgaXMgaW50ZXJuYWwgZmFzdGVyIGZ1bmN0aW9uIHdoZW4gY2FsbGVkIHdpdGggMiBhcmd1bWVudHMgKHggYW5kIHkpXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkRvdWJsZVBvaW50MiA9IGZ1bmN0aW9uICh4LCB5KVxuXHR7XG5cdFx0dGhpcy5YID0geDtcblx0XHR0aGlzLlkgPSB5O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuRG91YmxlUG9pbnQyLnByb3RvdHlwZSA9IENsaXBwZXJMaWIuRG91YmxlUG9pbnQucHJvdG90eXBlO1xuXG5cdC8vIFBvbHlUcmVlICYgUG9seU5vZGUgc3RhcnRcblx0LyoqXG5cdCogQHN1cHByZXNzIHttaXNzaW5nUHJvcGVydGllc31cblx0Ki9cblx0Q2xpcHBlckxpYi5Qb2x5Tm9kZSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLm1fUGFyZW50ID0gbnVsbDtcblx0XHR0aGlzLm1fcG9seWdvbiA9IG5ldyBDbGlwcGVyTGliLlBhdGgoKTtcblx0XHR0aGlzLm1fSW5kZXggPSAwO1xuXHRcdHRoaXMubV9qb2ludHlwZSA9IDA7XG5cdFx0dGhpcy5tX2VuZHR5cGUgPSAwO1xuXHRcdHRoaXMubV9DaGlsZHMgPSBbXTtcblx0XHR0aGlzLklzT3BlbiA9IGZhbHNlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuUG9seU5vZGUucHJvdG90eXBlLklzSG9sZU5vZGUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IHRydWU7XG5cdFx0dmFyIG5vZGUgPSB0aGlzLm1fUGFyZW50O1xuXHRcdHdoaWxlIChub2RlICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdHJlc3VsdCA9ICFyZXN1bHQ7XG5cdFx0XHRub2RlID0gbm9kZS5tX1BhcmVudDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5DaGlsZENvdW50ID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiB0aGlzLm1fQ2hpbGRzLmxlbmd0aDtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5Db250b3VyID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiB0aGlzLm1fcG9seWdvbjtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5BZGRDaGlsZCA9IGZ1bmN0aW9uIChDaGlsZClcblx0e1xuXHRcdHZhciBjbnQgPSB0aGlzLm1fQ2hpbGRzLmxlbmd0aDtcblx0XHR0aGlzLm1fQ2hpbGRzLnB1c2goQ2hpbGQpO1xuXHRcdENoaWxkLm1fUGFyZW50ID0gdGhpcztcblx0XHRDaGlsZC5tX0luZGV4ID0gY250O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuUG9seU5vZGUucHJvdG90eXBlLkdldE5leHQgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0aWYgKHRoaXMubV9DaGlsZHMubGVuZ3RoID4gMClcblx0XHRcdHJldHVybiB0aGlzLm1fQ2hpbGRzWzBdO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiB0aGlzLkdldE5leHRTaWJsaW5nVXAoKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5HZXROZXh0U2libGluZ1VwID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdGlmICh0aGlzLm1fUGFyZW50ID09PSBudWxsKVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0ZWxzZSBpZiAodGhpcy5tX0luZGV4ID09PSB0aGlzLm1fUGFyZW50Lm1fQ2hpbGRzLmxlbmd0aCAtIDEpXG5cdFx0XHRyZXR1cm4gdGhpcy5tX1BhcmVudC5HZXROZXh0U2libGluZ1VwKCk7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHRoaXMubV9QYXJlbnQubV9DaGlsZHNbdGhpcy5tX0luZGV4ICsgMV07XG5cdH07XG5cblx0Q2xpcHBlckxpYi5Qb2x5Tm9kZS5wcm90b3R5cGUuQ2hpbGRzID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiB0aGlzLm1fQ2hpbGRzO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuUG9seU5vZGUucHJvdG90eXBlLlBhcmVudCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5tX1BhcmVudDtcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlOb2RlLnByb3RvdHlwZS5Jc0hvbGUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuSXNIb2xlTm9kZSgpO1xuXHR9O1xuXG5cdC8vIFBvbHlUcmVlIDogUG9seU5vZGVcblx0LyoqXG5cdCAqIEBzdXBwcmVzcyB7bWlzc2luZ1Byb3BlcnRpZXN9XG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0Q2xpcHBlckxpYi5Qb2x5VHJlZSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLm1fQWxsUG9seXMgPSBbXTtcblx0XHRDbGlwcGVyTGliLlBvbHlOb2RlLmNhbGwodGhpcyk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5Qb2x5VHJlZS5wcm90b3R5cGUuQ2xlYXIgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fQWxsUG9seXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdFx0dGhpcy5tX0FsbFBvbHlzW2ldID0gbnVsbDtcblx0XHR0aGlzLm1fQWxsUG9seXMubGVuZ3RoID0gMDtcblx0XHR0aGlzLm1fQ2hpbGRzLmxlbmd0aCA9IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5Qb2x5VHJlZS5wcm90b3R5cGUuR2V0Rmlyc3QgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0aWYgKHRoaXMubV9DaGlsZHMubGVuZ3RoID4gMClcblx0XHRcdHJldHVybiB0aGlzLm1fQ2hpbGRzWzBdO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBudWxsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuUG9seVRyZWUucHJvdG90eXBlLlRvdGFsID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHZhciByZXN1bHQgPSB0aGlzLm1fQWxsUG9seXMubGVuZ3RoO1xuXHRcdC8vd2l0aCBuZWdhdGl2ZSBvZmZzZXRzLCBpZ25vcmUgdGhlIGhpZGRlbiBvdXRlciBwb2x5Z29uIC4uLlxuXHRcdGlmIChyZXN1bHQgPiAwICYmIHRoaXMubV9DaGlsZHNbMF0gIT09IHRoaXMubV9BbGxQb2x5c1swXSkgcmVzdWx0LS07XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRJbmhlcml0KENsaXBwZXJMaWIuUG9seVRyZWUsIENsaXBwZXJMaWIuUG9seU5vZGUpO1xuXG5cdC8vIFBvbHlUcmVlICYgUG9seU5vZGUgZW5kXG5cblx0Q2xpcHBlckxpYi5NYXRoX0Fic19JbnQ2NCA9IENsaXBwZXJMaWIuTWF0aF9BYnNfSW50MzIgPSBDbGlwcGVyTGliLk1hdGhfQWJzX0RvdWJsZSA9IGZ1bmN0aW9uIChhKVxuXHR7XG5cdFx0cmV0dXJuIE1hdGguYWJzKGEpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuTWF0aF9NYXhfSW50MzJfSW50MzIgPSBmdW5jdGlvbiAoYSwgYilcblx0e1xuXHRcdHJldHVybiBNYXRoLm1heChhLCBiKTtcblx0fTtcblxuXHQvKlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRjYXN0XzMyIHNwZWVkdGVzdDogaHR0cDovL2pzcGVyZi5jb20vdHJ1bmNhdGUtZmxvYXQtdG8taW50ZWdlci8yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCovXG5cdGlmIChicm93c2VyLm1zaWUgfHwgYnJvd3Nlci5vcGVyYSB8fCBicm93c2VyLnNhZmFyaSkgQ2xpcHBlckxpYi5DYXN0X0ludDMyID0gZnVuY3Rpb24gKGEpXG5cdHtcblx0XHRyZXR1cm4gYSB8IDA7XG5cdH07XG5cblx0ZWxzZSBDbGlwcGVyTGliLkNhc3RfSW50MzIgPSBmdW5jdGlvbiAoYSlcblx0eyAvLyBlZy4gYnJvd3Nlci5jaHJvbWUgfHwgYnJvd3Nlci5jaHJvbWl1bSB8fCBicm93c2VyLmZpcmVmb3hcblx0XHRyZXR1cm4gfn5hO1xuXHR9O1xuXG5cdC8qXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdGNhc3RfNjQgc3BlZWR0ZXN0czogaHR0cDovL2pzcGVyZi5jb20vdHJ1bmNhdGUtZmxvYXQtdG8taW50ZWdlclxuXHRDaHJvbWU6IGJpdHdpc2Vfbm90X2Zsb29yXG5cdEZpcmVmb3gxNzogdG9JbnRlZ2VyICh0eXBlb2YgdGVzdClcblx0SUU5OiBiaXR3aXNlX29yX2Zsb29yXG5cdElFNyBhbmQgSUU4OiB0b19wYXJzZWludFxuXHRDaHJvbWl1bTogdG9fZmxvb3Jfb3JfY2VpbFxuXHRGaXJlZm94MzogdG9fZmxvb3Jfb3JfY2VpbFxuXHRGaXJlZm94MTU6IHRvX2Zsb29yX29yX2NlaWxcblx0T3BlcmE6IHRvX2Zsb29yX29yX2NlaWxcblx0U2FmYXJpOiB0b19mbG9vcl9vcl9jZWlsXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdCovXG5cdGlmICh0eXBlb2YgTnVtYmVyLnRvSW50ZWdlciA9PT0gXCJ1bmRlZmluZWRcIilcblx0XHROdW1iZXIudG9JbnRlZ2VyID0gbnVsbDtcblxuXHRpZiAoYnJvd3Nlci5jaHJvbWUpIENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCA9IGZ1bmN0aW9uIChhKVxuXHR7XG5cdFx0aWYgKGEgPCAtMjE0NzQ4MzY0OCB8fCBhID4gMjE0NzQ4MzY0Nylcblx0XHRcdHJldHVybiBhIDwgMCA/IE1hdGguY2VpbChhKSA6IE1hdGguZmxvb3IoYSk7XG5cdFx0ZWxzZSByZXR1cm4gfn5hO1xuXHR9O1xuXG5cdGVsc2UgaWYgKGJyb3dzZXIuZmlyZWZveCAmJiB0eXBlb2YgKE51bWJlci50b0ludGVnZXIpID09PSBcImZ1bmN0aW9uXCIpIENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCA9IGZ1bmN0aW9uIChhKVxuXHR7XG5cdFx0cmV0dXJuIE51bWJlci50b0ludGVnZXIoYSk7XG5cdH07XG5cblx0ZWxzZSBpZiAoYnJvd3Nlci5tc2llNyB8fCBicm93c2VyLm1zaWU4KSBDbGlwcGVyTGliLkNhc3RfSW50NjQgPSBmdW5jdGlvbiAoYSlcblx0e1xuXHRcdHJldHVybiBwYXJzZUludChhLCAxMCk7XG5cdH07XG5cblx0ZWxzZSBpZiAoYnJvd3Nlci5tc2llKSBDbGlwcGVyTGliLkNhc3RfSW50NjQgPSBmdW5jdGlvbiAoYSlcblx0e1xuXHRcdGlmIChhIDwgLTIxNDc0ODM2NDggfHwgYSA+IDIxNDc0ODM2NDcpXG5cdFx0XHRyZXR1cm4gYSA8IDAgPyBNYXRoLmNlaWwoYSkgOiBNYXRoLmZsb29yKGEpO1xuXHRcdHJldHVybiBhIHwgMDtcblx0fTtcblxuXHQvLyBlZy4gYnJvd3Nlci5jaHJvbWl1bSB8fCBicm93c2VyLmZpcmVmb3ggfHwgYnJvd3Nlci5vcGVyYSB8fCBicm93c2VyLnNhZmFyaVxuXHRlbHNlIENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCA9IGZ1bmN0aW9uIChhKVxuXHR7XG5cdFx0cmV0dXJuIGEgPCAwID8gTWF0aC5jZWlsKGEpIDogTWF0aC5mbG9vcihhKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsZWFyID0gZnVuY3Rpb24gKGEpXG5cdHtcblx0XHRhLmxlbmd0aCA9IDA7XG5cdH07XG5cblx0Ly9DbGlwcGVyTGliLk1heFN0ZXBzID0gNjQ7IC8vIEhvdyBtYW55IHN0ZXBzIGF0IG1heGltdW0gaW4gYXJjIGluIEJ1aWxkQXJjKCkgZnVuY3Rpb25cblx0Q2xpcHBlckxpYi5QSSA9IDMuMTQxNTkyNjUzNTg5NzkzO1xuXHRDbGlwcGVyTGliLlBJMiA9IDIgKiAzLjE0MTU5MjY1MzU4OTc5Mztcblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuSW50UG9pbnQgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIGEgPSBhcmd1bWVudHMsXG5cdFx0XHRhbGVuID0gYS5sZW5ndGg7XG5cdFx0dGhpcy5YID0gMDtcblx0XHR0aGlzLlkgPSAwO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopXG5cdFx0e1xuXHRcdFx0dGhpcy5aID0gMDtcblx0XHRcdGlmIChhbGVuID09PSAzKSAvLyBwdWJsaWMgSW50UG9pbnQoY0ludCB4LCBjSW50IHksIGNJbnQgeiA9IDApXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuWCA9IGFbMF07XG5cdFx0XHRcdHRoaXMuWSA9IGFbMV07XG5cdFx0XHRcdHRoaXMuWiA9IGFbMl07XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChhbGVuID09PSAyKSAvLyBwdWJsaWMgSW50UG9pbnQoY0ludCB4LCBjSW50IHkpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuWCA9IGFbMF07XG5cdFx0XHRcdHRoaXMuWSA9IGFbMV07XG5cdFx0XHRcdHRoaXMuWiA9IDA7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChhbGVuID09PSAxKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoYVswXSBpbnN0YW5jZW9mIENsaXBwZXJMaWIuRG91YmxlUG9pbnQpIC8vIHB1YmxpYyBJbnRQb2ludChEb3VibGVQb2ludCBkcClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBkcCA9IGFbMF07XG5cdFx0XHRcdFx0dGhpcy5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlJvdW5kKGRwLlgpO1xuXHRcdFx0XHRcdHRoaXMuWSA9IENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZChkcC5ZKTtcblx0XHRcdFx0XHR0aGlzLlogPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgLy8gcHVibGljIEludFBvaW50KEludFBvaW50IHB0KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIHB0ID0gYVswXTtcblx0XHRcdFx0XHRpZiAodHlwZW9mIChwdC5aKSA9PT0gXCJ1bmRlZmluZWRcIikgcHQuWiA9IDA7XG5cdFx0XHRcdFx0dGhpcy5YID0gcHQuWDtcblx0XHRcdFx0XHR0aGlzLlkgPSBwdC5ZO1xuXHRcdFx0XHRcdHRoaXMuWiA9IHB0Llo7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2UgLy8gcHVibGljIEludFBvaW50KClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5YID0gMDtcblx0XHRcdFx0dGhpcy5ZID0gMDtcblx0XHRcdFx0dGhpcy5aID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSAvLyBpZiAoIUNsaXBwZXJMaWIudXNlX3h5eilcblx0XHR7XG5cdFx0XHRpZiAoYWxlbiA9PT0gMikgLy8gcHVibGljIEludFBvaW50KGNJbnQgWCwgY0ludCBZKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLlggPSBhWzBdO1xuXHRcdFx0XHR0aGlzLlkgPSBhWzFdO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoYWxlbiA9PT0gMSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKGFbMF0gaW5zdGFuY2VvZiBDbGlwcGVyTGliLkRvdWJsZVBvaW50KSAvLyBwdWJsaWMgSW50UG9pbnQoRG91YmxlUG9pbnQgZHApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgZHAgPSBhWzBdO1xuXHRcdFx0XHRcdHRoaXMuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZChkcC5YKTtcblx0XHRcdFx0XHR0aGlzLlkgPSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQoZHAuWSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSAvLyBwdWJsaWMgSW50UG9pbnQoSW50UG9pbnQgcHQpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgcHQgPSBhWzBdO1xuXHRcdFx0XHRcdHRoaXMuWCA9IHB0Llg7XG5cdFx0XHRcdFx0dGhpcy5ZID0gcHQuWTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSAvLyBwdWJsaWMgSW50UG9pbnQoSW50UG9pbnQgcHQpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuWCA9IDA7XG5cdFx0XHRcdHRoaXMuWSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkgPSBmdW5jdGlvbiAoYSwgYilcblx0e1xuXHRcdC8vcmV0dXJuIGEgPT0gYjtcblx0XHRyZXR1cm4gYS5YID09PSBiLlggJiYgYS5ZID09PSBiLlk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRQb2ludC5vcF9JbmVxdWFsaXR5ID0gZnVuY3Rpb24gKGEsIGIpXG5cdHtcblx0XHQvL3JldHVybiBhICE9PSBiO1xuXHRcdHJldHVybiBhLlggIT09IGIuWCB8fCBhLlkgIT09IGIuWTtcblx0fTtcblxuXHQvKlxuICBDbGlwcGVyTGliLkludFBvaW50LnByb3RvdHlwZS5FcXVhbHMgPSBmdW5jdGlvbiAob2JqKVxuICB7XG4gICAgaWYgKG9iaiA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChvYmogaW5zdGFuY2VvZiBDbGlwcGVyTGliLkludFBvaW50KVxuICAgIHtcbiAgICAgICAgdmFyIGEgPSBDYXN0KG9iaiwgQ2xpcHBlckxpYi5JbnRQb2ludCk7XG4gICAgICAgIHJldHVybiAodGhpcy5YID09IGEuWCkgJiYgKHRoaXMuWSA9PSBhLlkpO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuXHQqL1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkludFBvaW50MCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLlggPSAwO1xuXHRcdHRoaXMuWSA9IDA7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eilcblx0XHRcdHRoaXMuWiA9IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRQb2ludDAucHJvdG90eXBlID0gQ2xpcHBlckxpYi5JbnRQb2ludC5wcm90b3R5cGU7XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuSW50UG9pbnQxID0gZnVuY3Rpb24gKHB0KVxuXHR7XG5cdFx0dGhpcy5YID0gcHQuWDtcblx0XHR0aGlzLlkgPSBwdC5ZO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopXG5cdFx0e1xuXHRcdFx0aWYgKHR5cGVvZiBwdC5aID09PSBcInVuZGVmaW5lZFwiKSB0aGlzLlogPSAwO1xuXHRcdFx0ZWxzZSB0aGlzLlogPSBwdC5aO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkludFBvaW50MS5wcm90b3R5cGUgPSBDbGlwcGVyTGliLkludFBvaW50LnByb3RvdHlwZTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5JbnRQb2ludDFkcCA9IGZ1bmN0aW9uIChkcClcblx0e1xuXHRcdHRoaXMuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZChkcC5YKTtcblx0XHR0aGlzLlkgPSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQoZHAuWSk7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eilcblx0XHRcdHRoaXMuWiA9IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRQb2ludDFkcC5wcm90b3R5cGUgPSBDbGlwcGVyTGliLkludFBvaW50LnByb3RvdHlwZTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5JbnRQb2ludDIgPSBmdW5jdGlvbiAoeCwgeSwgeilcblx0e1xuXHRcdHRoaXMuWCA9IHg7XG5cdFx0dGhpcy5ZID0geTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdHtcblx0XHRcdGlmICh0eXBlb2YgeiA9PT0gXCJ1bmRlZmluZWRcIikgdGhpcy5aID0gMDtcblx0XHRcdGVsc2UgdGhpcy5aID0gejtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRQb2ludDIucHJvdG90eXBlID0gQ2xpcHBlckxpYi5JbnRQb2ludC5wcm90b3R5cGU7XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuSW50UmVjdCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR2YXIgYSA9IGFyZ3VtZW50cyxcblx0XHRcdGFsZW4gPSBhLmxlbmd0aDtcblx0XHRpZiAoYWxlbiA9PT0gNCkgLy8gZnVuY3Rpb24gKGwsIHQsIHIsIGIpXG5cdFx0e1xuXHRcdFx0dGhpcy5sZWZ0ID0gYVswXTtcblx0XHRcdHRoaXMudG9wID0gYVsxXTtcblx0XHRcdHRoaXMucmlnaHQgPSBhWzJdO1xuXHRcdFx0dGhpcy5ib3R0b20gPSBhWzNdO1xuXHRcdH1cblx0XHRlbHNlIGlmIChhbGVuID09PSAxKSAvLyBmdW5jdGlvbiAoaXIpXG5cdFx0e1xuXHRcdFx0dmFyIGlyID0gYVswXTtcblx0XHRcdHRoaXMubGVmdCA9IGlyLmxlZnQ7XG5cdFx0XHR0aGlzLnRvcCA9IGlyLnRvcDtcblx0XHRcdHRoaXMucmlnaHQgPSBpci5yaWdodDtcblx0XHRcdHRoaXMuYm90dG9tID0gaXIuYm90dG9tO1xuXHRcdH1cblx0XHRlbHNlIC8vIGZ1bmN0aW9uICgpXG5cdFx0e1xuXHRcdFx0dGhpcy5sZWZ0ID0gMDtcblx0XHRcdHRoaXMudG9wID0gMDtcblx0XHRcdHRoaXMucmlnaHQgPSAwO1xuXHRcdFx0dGhpcy5ib3R0b20gPSAwO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5JbnRSZWN0MCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLmxlZnQgPSAwO1xuXHRcdHRoaXMudG9wID0gMDtcblx0XHR0aGlzLnJpZ2h0ID0gMDtcblx0XHR0aGlzLmJvdHRvbSA9IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRSZWN0MC5wcm90b3R5cGUgPSBDbGlwcGVyTGliLkludFJlY3QucHJvdG90eXBlO1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkludFJlY3QxID0gZnVuY3Rpb24gKGlyKVxuXHR7XG5cdFx0dGhpcy5sZWZ0ID0gaXIubGVmdDtcblx0XHR0aGlzLnRvcCA9IGlyLnRvcDtcblx0XHR0aGlzLnJpZ2h0ID0gaXIucmlnaHQ7XG5cdFx0dGhpcy5ib3R0b20gPSBpci5ib3R0b207XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRSZWN0MS5wcm90b3R5cGUgPSBDbGlwcGVyTGliLkludFJlY3QucHJvdG90eXBlO1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkludFJlY3Q0ID0gZnVuY3Rpb24gKGwsIHQsIHIsIGIpXG5cdHtcblx0XHR0aGlzLmxlZnQgPSBsO1xuXHRcdHRoaXMudG9wID0gdDtcblx0XHR0aGlzLnJpZ2h0ID0gcjtcblx0XHR0aGlzLmJvdHRvbSA9IGI7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5JbnRSZWN0NC5wcm90b3R5cGUgPSBDbGlwcGVyTGliLkludFJlY3QucHJvdG90eXBlO1xuXG5cdENsaXBwZXJMaWIuQ2xpcFR5cGUgPSB7XG5cdFx0Y3RJbnRlcnNlY3Rpb246IDAsXG5cdFx0Y3RVbmlvbjogMSxcblx0XHRjdERpZmZlcmVuY2U6IDIsXG5cdFx0Y3RYb3I6IDNcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlUeXBlID0ge1xuXHRcdHB0U3ViamVjdDogMCxcblx0XHRwdENsaXA6IDFcblx0fTtcblxuXHRDbGlwcGVyTGliLlBvbHlGaWxsVHlwZSA9IHtcblx0XHRwZnRFdmVuT2RkOiAwLFxuXHRcdHBmdE5vblplcm86IDEsXG5cdFx0cGZ0UG9zaXRpdmU6IDIsXG5cdFx0cGZ0TmVnYXRpdmU6IDNcblx0fTtcblxuXHRDbGlwcGVyTGliLkpvaW5UeXBlID0ge1xuXHRcdGp0U3F1YXJlOiAwLFxuXHRcdGp0Um91bmQ6IDEsXG5cdFx0anRNaXRlcjogMlxuXHR9O1xuXG5cdENsaXBwZXJMaWIuRW5kVHlwZSA9IHtcblx0XHRldE9wZW5TcXVhcmU6IDAsXG5cdFx0ZXRPcGVuUm91bmQ6IDEsXG5cdFx0ZXRPcGVuQnV0dDogMixcblx0XHRldENsb3NlZExpbmU6IDMsXG5cdFx0ZXRDbG9zZWRQb2x5Z29uOiA0XG5cdH07XG5cblx0Q2xpcHBlckxpYi5FZGdlU2lkZSA9IHtcblx0XHRlc0xlZnQ6IDAsXG5cdFx0ZXNSaWdodDogMVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuRGlyZWN0aW9uID0ge1xuXHRcdGRSaWdodFRvTGVmdDogMCxcblx0XHRkTGVmdFRvUmlnaHQ6IDFcblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5URWRnZSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLkJvdCA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MCgpO1xuXHRcdHRoaXMuQ3VyciA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MCgpOyAvL2N1cnJlbnQgKHVwZGF0ZWQgZm9yIGV2ZXJ5IG5ldyBzY2FuYmVhbSlcblx0XHR0aGlzLlRvcCA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MCgpO1xuXHRcdHRoaXMuRGVsdGEgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDAoKTtcblx0XHR0aGlzLkR4ID0gMDtcblx0XHR0aGlzLlBvbHlUeXAgPSBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdDtcblx0XHR0aGlzLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzTGVmdDsgLy9zaWRlIG9ubHkgcmVmZXJzIHRvIGN1cnJlbnQgc2lkZSBvZiBzb2x1dGlvbiBwb2x5XG5cdFx0dGhpcy5XaW5kRGVsdGEgPSAwOyAvLzEgb3IgLTEgZGVwZW5kaW5nIG9uIHdpbmRpbmcgZGlyZWN0aW9uXG5cdFx0dGhpcy5XaW5kQ250ID0gMDtcblx0XHR0aGlzLldpbmRDbnQyID0gMDsgLy93aW5kaW5nIGNvdW50IG9mIHRoZSBvcHBvc2l0ZSBwb2x5dHlwZVxuXHRcdHRoaXMuT3V0SWR4ID0gMDtcblx0XHR0aGlzLk5leHQgPSBudWxsO1xuXHRcdHRoaXMuUHJldiA9IG51bGw7XG5cdFx0dGhpcy5OZXh0SW5MTUwgPSBudWxsO1xuXHRcdHRoaXMuTmV4dEluQUVMID0gbnVsbDtcblx0XHR0aGlzLlByZXZJbkFFTCA9IG51bGw7XG5cdFx0dGhpcy5OZXh0SW5TRUwgPSBudWxsO1xuXHRcdHRoaXMuUHJldkluU0VMID0gbnVsbDtcblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5JbnRlcnNlY3ROb2RlID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRoaXMuRWRnZTEgPSBudWxsO1xuXHRcdHRoaXMuRWRnZTIgPSBudWxsO1xuXHRcdHRoaXMuUHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDAoKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLk15SW50ZXJzZWN0Tm9kZVNvcnQgPSBmdW5jdGlvbiAoKSB7fTtcblxuXHRDbGlwcGVyTGliLk15SW50ZXJzZWN0Tm9kZVNvcnQuQ29tcGFyZSA9IGZ1bmN0aW9uIChub2RlMSwgbm9kZTIpXG5cdHtcblx0XHR2YXIgaSA9IG5vZGUyLlB0LlkgLSBub2RlMS5QdC5ZO1xuXHRcdGlmIChpID4gMCkgcmV0dXJuIDE7XG5cdFx0ZWxzZSBpZiAoaSA8IDApIHJldHVybiAtMTtcblx0XHRlbHNlIHJldHVybiAwO1xuXHR9O1xuXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLkxvY2FsTWluaW1hID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRoaXMuWSA9IDA7XG5cdFx0dGhpcy5MZWZ0Qm91bmQgPSBudWxsO1xuXHRcdHRoaXMuUmlnaHRCb3VuZCA9IG51bGw7XG5cdFx0dGhpcy5OZXh0ID0gbnVsbDtcblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5TY2FuYmVhbSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLlkgPSAwO1xuXHRcdHRoaXMuTmV4dCA9IG51bGw7XG5cdH07XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuTWF4aW1hID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRoaXMuWCA9IDA7XG5cdFx0dGhpcy5OZXh0ID0gbnVsbDtcblx0XHR0aGlzLlByZXYgPSBudWxsO1xuXHR9O1xuXG5cdC8vT3V0UmVjOiBjb250YWlucyBhIHBhdGggaW4gdGhlIGNsaXBwaW5nIHNvbHV0aW9uLiBFZGdlcyBpbiB0aGUgQUVMIHdpbGxcblx0Ly9jYXJyeSBhIHBvaW50ZXIgdG8gYW4gT3V0UmVjIHdoZW4gdGhleSBhcmUgcGFydCBvZiB0aGUgY2xpcHBpbmcgc29sdXRpb24uXG5cdC8qKlxuXHQqIEBjb25zdHJ1Y3RvclxuXHQqL1xuXHRDbGlwcGVyTGliLk91dFJlYyA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLklkeCA9IDA7XG5cdFx0dGhpcy5Jc0hvbGUgPSBmYWxzZTtcblx0XHR0aGlzLklzT3BlbiA9IGZhbHNlO1xuXHRcdHRoaXMuRmlyc3RMZWZ0ID0gbnVsbDsgLy9zZWUgY29tbWVudHMgaW4gY2xpcHBlci5wYXNcblx0XHR0aGlzLlB0cyA9IG51bGw7XG5cdFx0dGhpcy5Cb3R0b21QdCA9IG51bGw7XG5cdFx0dGhpcy5Qb2x5Tm9kZSA9IG51bGw7XG5cdH07XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuT3V0UHQgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dGhpcy5JZHggPSAwO1xuXHRcdHRoaXMuUHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDAoKTtcblx0XHR0aGlzLk5leHQgPSBudWxsO1xuXHRcdHRoaXMuUHJldiA9IG51bGw7XG5cdH07XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuSm9pbiA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR0aGlzLk91dFB0MSA9IG51bGw7XG5cdFx0dGhpcy5PdXRQdDIgPSBudWxsO1xuXHRcdHRoaXMuT2ZmUHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDAoKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRoaXMubV9NaW5pbWFMaXN0ID0gbnVsbDtcblx0XHR0aGlzLm1fQ3VycmVudExNID0gbnVsbDtcblx0XHR0aGlzLm1fZWRnZXMgPSBuZXcgQXJyYXkoKTtcblx0XHR0aGlzLm1fVXNlRnVsbFJhbmdlID0gZmFsc2U7XG5cdFx0dGhpcy5tX0hhc09wZW5QYXRocyA9IGZhbHNlO1xuXHRcdHRoaXMuUHJlc2VydmVDb2xsaW5lYXIgPSBmYWxzZTtcblx0XHR0aGlzLm1fU2NhbmJlYW0gPSBudWxsO1xuXHRcdHRoaXMubV9Qb2x5T3V0cyA9IG51bGw7XG5cdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gbnVsbDtcblx0fTtcblxuXHQvLyBSYW5nZXMgYXJlIGluIG9yaWdpbmFsIEMjIHRvbyBoaWdoIGZvciBKYXZhc2NyaXB0IChpbiBjdXJyZW50IHN0YXRlIDIwMTMgc2VwdGVtYmVyKTpcblx0Ly8gcHJvdGVjdGVkIGNvbnN0IGRvdWJsZSBob3Jpem9udGFsID0gLTMuNEUrMzg7XG5cdC8vIGludGVybmFsIGNvbnN0IGNJbnQgbG9SYW5nZSA9IDB4M0ZGRkZGRkY7IC8vID0gMTA3Mzc0MTgyMyA9IHNxcnQoMl42MyAtMSkvMlxuXHQvLyBpbnRlcm5hbCBjb25zdCBjSW50IGhpUmFuZ2UgPSAweDNGRkZGRkZGRkZGRkZGRkZMOyAvLyA9IDQ2MTE2ODYwMTg0MjczODc5MDMgPSBzcXJ0KDJeMTI3IC0xKS8yXG5cdC8vIFNvIGhhZCB0byBhZGp1c3QgdGhlbSB0byBtb3JlIHN1aXRhYmxlIGZvciBKYXZhc2NyaXB0LlxuXHQvLyBJZiBKUyBzb21lIGRheSBzdXBwb3J0cyB0cnVseSA2NC1iaXQgaW50ZWdlcnMsIHRoZW4gdGhlc2UgcmFuZ2VzIGNhbiBiZSBhcyBpbiBDI1xuXHQvLyBhbmQgYmlnaW50ZWdlciBsaWJyYXJ5IGNhbiBiZSBtb3JlIHNpbXBsZXIgKGFzIHRoZW4gMTI4Yml0IGNhbiBiZSByZXByZXNlbnRlZCBhcyB0d28gNjRiaXQgbnVtYmVycylcblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsID0gLTkwMDcxOTkyNTQ3NDA5OTI7IC8vLTJeNTNcblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwID0gLTI7XG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuVW5hc3NpZ25lZCA9IC0xO1xuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnRvbGVyYW5jZSA9IDFFLTIwO1xuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmxvUmFuZ2UgPSA0NzQ1MzEzMjsgLy8gc3FydCgyXjUzIC0xKS8yXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaGlSYW5nZSA9IDQ1MDM1OTk2MjczNzA0OTU7IC8vIHNxcnQoMl4xMDYgLTEpLzJcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLm5lYXJfemVybyA9IGZ1bmN0aW9uICh2YWwpXG5cdHtcblx0XHRyZXR1cm4gKHZhbCA+IC1DbGlwcGVyTGliLkNsaXBwZXJCYXNlLnRvbGVyYW5jZSkgJiYgKHZhbCA8IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UudG9sZXJhbmNlKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbCA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0cmV0dXJuIGUuRGVsdGEuWSA9PT0gMDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Qb2ludElzVmVydGV4ID0gZnVuY3Rpb24gKHB0LCBwcClcblx0e1xuXHRcdHZhciBwcDIgPSBwcDtcblx0XHRkbyB7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShwcDIuUHQsIHB0KSlcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRwcDIgPSBwcDIuTmV4dDtcblx0XHR9XG5cdFx0d2hpbGUgKHBwMiAhPT0gcHApXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlBvaW50T25MaW5lU2VnbWVudCA9IGZ1bmN0aW9uIChwdCwgbGluZVB0MSwgbGluZVB0MiwgVXNlRnVsbFJhbmdlKVxuXHR7XG5cdFx0aWYgKFVzZUZ1bGxSYW5nZSlcblx0XHRcdHJldHVybiAoKHB0LlggPT09IGxpbmVQdDEuWCkgJiYgKHB0LlkgPT09IGxpbmVQdDEuWSkpIHx8XG5cdFx0XHRcdCgocHQuWCA9PT0gbGluZVB0Mi5YKSAmJiAocHQuWSA9PT0gbGluZVB0Mi5ZKSkgfHxcblx0XHRcdFx0KCgocHQuWCA+IGxpbmVQdDEuWCkgPT09IChwdC5YIDwgbGluZVB0Mi5YKSkgJiZcblx0XHRcdFx0XHQoKHB0LlkgPiBsaW5lUHQxLlkpID09PSAocHQuWSA8IGxpbmVQdDIuWSkpICYmXG5cdFx0XHRcdFx0KEludDEyOC5vcF9FcXVhbGl0eShJbnQxMjguSW50MTI4TXVsKChwdC5YIC0gbGluZVB0MS5YKSwgKGxpbmVQdDIuWSAtIGxpbmVQdDEuWSkpLFxuXHRcdFx0XHRcdFx0SW50MTI4LkludDEyOE11bCgobGluZVB0Mi5YIC0gbGluZVB0MS5YKSwgKHB0LlkgLSBsaW5lUHQxLlkpKSkpKTtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gKChwdC5YID09PSBsaW5lUHQxLlgpICYmIChwdC5ZID09PSBsaW5lUHQxLlkpKSB8fCAoKHB0LlggPT09IGxpbmVQdDIuWCkgJiYgKHB0LlkgPT09IGxpbmVQdDIuWSkpIHx8ICgoKHB0LlggPiBsaW5lUHQxLlgpID09PSAocHQuWCA8IGxpbmVQdDIuWCkpICYmICgocHQuWSA+IGxpbmVQdDEuWSkgPT09IChwdC5ZIDwgbGluZVB0Mi5ZKSkgJiYgKChwdC5YIC0gbGluZVB0MS5YKSAqIChsaW5lUHQyLlkgLSBsaW5lUHQxLlkpID09PSAobGluZVB0Mi5YIC0gbGluZVB0MS5YKSAqIChwdC5ZIC0gbGluZVB0MS5ZKSkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlBvaW50T25Qb2x5Z29uID0gZnVuY3Rpb24gKHB0LCBwcCwgVXNlRnVsbFJhbmdlKVxuXHR7XG5cdFx0dmFyIHBwMiA9IHBwO1xuXHRcdHdoaWxlICh0cnVlKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLlBvaW50T25MaW5lU2VnbWVudChwdCwgcHAyLlB0LCBwcDIuTmV4dC5QdCwgVXNlRnVsbFJhbmdlKSlcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRwcDIgPSBwcDIuTmV4dDtcblx0XHRcdGlmIChwcDIgPT09IHBwKVxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlNsb3Blc0VxdWFsID0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR2YXIgYSA9IGFyZ3VtZW50cyxcblx0XHRcdGFsZW4gPSBhLmxlbmd0aDtcblx0XHR2YXIgZTEsIGUyLCBwdDEsIHB0MiwgcHQzLCBwdDQsIFVzZUZ1bGxSYW5nZTtcblx0XHRpZiAoYWxlbiA9PT0gMykgLy8gZnVuY3Rpb24gKGUxLCBlMiwgVXNlRnVsbFJhbmdlKVxuXHRcdHtcblx0XHRcdGUxID0gYVswXTtcblx0XHRcdGUyID0gYVsxXTtcblx0XHRcdFVzZUZ1bGxSYW5nZSA9IGFbMl07XG5cdFx0XHRpZiAoVXNlRnVsbFJhbmdlKVxuXHRcdFx0XHRyZXR1cm4gSW50MTI4Lm9wX0VxdWFsaXR5KEludDEyOC5JbnQxMjhNdWwoZTEuRGVsdGEuWSwgZTIuRGVsdGEuWCksIEludDEyOC5JbnQxMjhNdWwoZTEuRGVsdGEuWCwgZTIuRGVsdGEuWSkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DYXN0X0ludDY0KChlMS5EZWx0YS5ZKSAqIChlMi5EZWx0YS5YKSkgPT09IENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCgoZTEuRGVsdGEuWCkgKiAoZTIuRGVsdGEuWSkpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChhbGVuID09PSA0KSAvLyBmdW5jdGlvbiAocHQxLCBwdDIsIHB0MywgVXNlRnVsbFJhbmdlKVxuXHRcdHtcblx0XHRcdHB0MSA9IGFbMF07XG5cdFx0XHRwdDIgPSBhWzFdO1xuXHRcdFx0cHQzID0gYVsyXTtcblx0XHRcdFVzZUZ1bGxSYW5nZSA9IGFbM107XG5cdFx0XHRpZiAoVXNlRnVsbFJhbmdlKVxuXHRcdFx0XHRyZXR1cm4gSW50MTI4Lm9wX0VxdWFsaXR5KEludDEyOC5JbnQxMjhNdWwocHQxLlkgLSBwdDIuWSwgcHQyLlggLSBwdDMuWCksIEludDEyOC5JbnQxMjhNdWwocHQxLlggLSBwdDIuWCwgcHQyLlkgLSBwdDMuWSkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DYXN0X0ludDY0KChwdDEuWSAtIHB0Mi5ZKSAqIChwdDIuWCAtIHB0My5YKSkgLSBDbGlwcGVyTGliLkNhc3RfSW50NjQoKHB0MS5YIC0gcHQyLlgpICogKHB0Mi5ZIC0gcHQzLlkpKSA9PT0gMDtcblx0XHR9XG5cdFx0ZWxzZSAvLyBmdW5jdGlvbiAocHQxLCBwdDIsIHB0MywgcHQ0LCBVc2VGdWxsUmFuZ2UpXG5cdFx0e1xuXHRcdFx0cHQxID0gYVswXTtcblx0XHRcdHB0MiA9IGFbMV07XG5cdFx0XHRwdDMgPSBhWzJdO1xuXHRcdFx0cHQ0ID0gYVszXTtcblx0XHRcdFVzZUZ1bGxSYW5nZSA9IGFbNF07XG5cdFx0XHRpZiAoVXNlRnVsbFJhbmdlKVxuXHRcdFx0XHRyZXR1cm4gSW50MTI4Lm9wX0VxdWFsaXR5KEludDEyOC5JbnQxMjhNdWwocHQxLlkgLSBwdDIuWSwgcHQzLlggLSBwdDQuWCksIEludDEyOC5JbnQxMjhNdWwocHQxLlggLSBwdDIuWCwgcHQzLlkgLSBwdDQuWSkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DYXN0X0ludDY0KChwdDEuWSAtIHB0Mi5ZKSAqIChwdDMuWCAtIHB0NC5YKSkgLSBDbGlwcGVyTGliLkNhc3RfSW50NjQoKHB0MS5YIC0gcHQyLlgpICogKHB0My5ZIC0gcHQ0LlkpKSA9PT0gMDtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbDMgPSBmdW5jdGlvbiAoZTEsIGUyLCBVc2VGdWxsUmFuZ2UpXG5cdHtcblx0XHRpZiAoVXNlRnVsbFJhbmdlKVxuXHRcdFx0cmV0dXJuIEludDEyOC5vcF9FcXVhbGl0eShJbnQxMjguSW50MTI4TXVsKGUxLkRlbHRhLlksIGUyLkRlbHRhLlgpLCBJbnQxMjguSW50MTI4TXVsKGUxLkRlbHRhLlgsIGUyLkRlbHRhLlkpKTtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DYXN0X0ludDY0KChlMS5EZWx0YS5ZKSAqIChlMi5EZWx0YS5YKSkgPT09IENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCgoZTEuRGVsdGEuWCkgKiAoZTIuRGVsdGEuWSkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw0ID0gZnVuY3Rpb24gKHB0MSwgcHQyLCBwdDMsIFVzZUZ1bGxSYW5nZSlcblx0e1xuXHRcdGlmIChVc2VGdWxsUmFuZ2UpXG5cdFx0XHRyZXR1cm4gSW50MTI4Lm9wX0VxdWFsaXR5KEludDEyOC5JbnQxMjhNdWwocHQxLlkgLSBwdDIuWSwgcHQyLlggLSBwdDMuWCksIEludDEyOC5JbnQxMjhNdWwocHQxLlggLSBwdDIuWCwgcHQyLlkgLSBwdDMuWSkpO1xuXHRcdGVsc2Vcblx0XHRcdHJldHVybiBDbGlwcGVyTGliLkNhc3RfSW50NjQoKHB0MS5ZIC0gcHQyLlkpICogKHB0Mi5YIC0gcHQzLlgpKSAtIENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCgocHQxLlggLSBwdDIuWCkgKiAocHQyLlkgLSBwdDMuWSkpID09PSAwO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw1ID0gZnVuY3Rpb24gKHB0MSwgcHQyLCBwdDMsIHB0NCwgVXNlRnVsbFJhbmdlKVxuXHR7XG5cdFx0aWYgKFVzZUZ1bGxSYW5nZSlcblx0XHRcdHJldHVybiBJbnQxMjgub3BfRXF1YWxpdHkoSW50MTI4LkludDEyOE11bChwdDEuWSAtIHB0Mi5ZLCBwdDMuWCAtIHB0NC5YKSwgSW50MTI4LkludDEyOE11bChwdDEuWCAtIHB0Mi5YLCBwdDMuWSAtIHB0NC5ZKSk7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIENsaXBwZXJMaWIuQ2FzdF9JbnQ2NCgocHQxLlkgLSBwdDIuWSkgKiAocHQzLlggLSBwdDQuWCkpIC0gQ2xpcHBlckxpYi5DYXN0X0ludDY0KChwdDEuWCAtIHB0Mi5YKSAqIChwdDMuWSAtIHB0NC5ZKSkgPT09IDA7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuQ2xlYXIgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dGhpcy5EaXNwb3NlTG9jYWxNaW5pbWFMaXN0KCk7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fZWRnZXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKVxuXHRcdHtcblx0XHRcdGZvciAodmFyIGogPSAwLCBqbGVuID0gdGhpcy5tX2VkZ2VzW2ldLmxlbmd0aDsgaiA8IGpsZW47ICsrailcblx0XHRcdFx0dGhpcy5tX2VkZ2VzW2ldW2pdID0gbnVsbDtcblx0XHRcdENsaXBwZXJMaWIuQ2xlYXIodGhpcy5tX2VkZ2VzW2ldKTtcblx0XHR9XG5cdFx0Q2xpcHBlckxpYi5DbGVhcih0aGlzLm1fZWRnZXMpO1xuXHRcdHRoaXMubV9Vc2VGdWxsUmFuZ2UgPSBmYWxzZTtcblx0XHR0aGlzLm1fSGFzT3BlblBhdGhzID0gZmFsc2U7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuRGlzcG9zZUxvY2FsTWluaW1hTGlzdCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR3aGlsZSAodGhpcy5tX01pbmltYUxpc3QgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dmFyIHRtcExtID0gdGhpcy5tX01pbmltYUxpc3QuTmV4dDtcblx0XHRcdHRoaXMubV9NaW5pbWFMaXN0ID0gbnVsbDtcblx0XHRcdHRoaXMubV9NaW5pbWFMaXN0ID0gdG1wTG07XG5cdFx0fVxuXHRcdHRoaXMubV9DdXJyZW50TE0gPSBudWxsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlJhbmdlVGVzdCA9IGZ1bmN0aW9uIChQdCwgdXNlRnVsbFJhbmdlKVxuXHR7XG5cdFx0aWYgKHVzZUZ1bGxSYW5nZS5WYWx1ZSlcblx0XHR7XG5cdFx0XHRpZiAoUHQuWCA+IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaGlSYW5nZSB8fCBQdC5ZID4gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5oaVJhbmdlIHx8IC1QdC5YID4gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5oaVJhbmdlIHx8IC1QdC5ZID4gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5oaVJhbmdlKVxuXHRcdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiQ29vcmRpbmF0ZSBvdXRzaWRlIGFsbG93ZWQgcmFuZ2UgaW4gUmFuZ2VUZXN0KCkuXCIpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChQdC5YID4gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5sb1JhbmdlIHx8IFB0LlkgPiBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmxvUmFuZ2UgfHwgLVB0LlggPiBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmxvUmFuZ2UgfHwgLVB0LlkgPiBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmxvUmFuZ2UpXG5cdFx0e1xuXHRcdFx0dXNlRnVsbFJhbmdlLlZhbHVlID0gdHJ1ZTtcblx0XHRcdHRoaXMuUmFuZ2VUZXN0KFB0LCB1c2VGdWxsUmFuZ2UpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Jbml0RWRnZSA9IGZ1bmN0aW9uIChlLCBlTmV4dCwgZVByZXYsIHB0KVxuXHR7XG5cdFx0ZS5OZXh0ID0gZU5leHQ7XG5cdFx0ZS5QcmV2ID0gZVByZXY7XG5cdFx0Ly9lLkN1cnIgPSBwdDtcblx0XHRlLkN1cnIuWCA9IHB0Llg7XG5cdFx0ZS5DdXJyLlkgPSBwdC5ZO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIGUuQ3Vyci5aID0gcHQuWjtcblx0XHRlLk91dElkeCA9IC0xO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkluaXRFZGdlMiA9IGZ1bmN0aW9uIChlLCBwb2x5VHlwZSlcblx0e1xuXHRcdGlmIChlLkN1cnIuWSA+PSBlLk5leHQuQ3Vyci5ZKVxuXHRcdHtcblx0XHRcdC8vZS5Cb3QgPSBlLkN1cnI7XG5cdFx0XHRlLkJvdC5YID0gZS5DdXJyLlg7XG5cdFx0XHRlLkJvdC5ZID0gZS5DdXJyLlk7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBlLkJvdC5aID0gZS5DdXJyLlo7XG5cdFx0XHQvL2UuVG9wID0gZS5OZXh0LkN1cnI7XG5cdFx0XHRlLlRvcC5YID0gZS5OZXh0LkN1cnIuWDtcblx0XHRcdGUuVG9wLlkgPSBlLk5leHQuQ3Vyci5ZO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgZS5Ub3AuWiA9IGUuTmV4dC5DdXJyLlo7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHQvL2UuVG9wID0gZS5DdXJyO1xuXHRcdFx0ZS5Ub3AuWCA9IGUuQ3Vyci5YO1xuXHRcdFx0ZS5Ub3AuWSA9IGUuQ3Vyci5ZO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgZS5Ub3AuWiA9IGUuQ3Vyci5aO1xuXHRcdFx0Ly9lLkJvdCA9IGUuTmV4dC5DdXJyO1xuXHRcdFx0ZS5Cb3QuWCA9IGUuTmV4dC5DdXJyLlg7XG5cdFx0XHRlLkJvdC5ZID0gZS5OZXh0LkN1cnIuWTtcblx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIGUuQm90LlogPSBlLk5leHQuQ3Vyci5aO1xuXHRcdH1cblx0XHR0aGlzLlNldER4KGUpO1xuXHRcdGUuUG9seVR5cCA9IHBvbHlUeXBlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkZpbmROZXh0TG9jTWluID0gZnVuY3Rpb24gKEUpXG5cdHtcblx0XHR2YXIgRTI7XG5cdFx0Zm9yICg7Oylcblx0XHR7XG5cdFx0XHR3aGlsZSAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9JbmVxdWFsaXR5KEUuQm90LCBFLlByZXYuQm90KSB8fCBDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KEUuQ3VyciwgRS5Ub3ApKVxuXHRcdFx0XHRFID0gRS5OZXh0O1xuXHRcdFx0aWYgKEUuRHggIT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbCAmJiBFLlByZXYuRHggIT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbClcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR3aGlsZSAoRS5QcmV2LkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwpXG5cdFx0XHRcdEUgPSBFLlByZXY7XG5cdFx0XHRFMiA9IEU7XG5cdFx0XHR3aGlsZSAoRS5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsKVxuXHRcdFx0XHRFID0gRS5OZXh0O1xuXHRcdFx0aWYgKEUuVG9wLlkgPT09IEUuUHJldi5Cb3QuWSlcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHQvL2llIGp1c3QgYW4gaW50ZXJtZWRpYXRlIGhvcnouXG5cdFx0XHRpZiAoRTIuUHJldi5Cb3QuWCA8IEUuQm90LlgpXG5cdFx0XHRcdEUgPSBFMjtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRyZXR1cm4gRTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Qcm9jZXNzQm91bmQgPSBmdW5jdGlvbiAoRSwgTGVmdEJvdW5kSXNGb3J3YXJkKVxuXHR7XG5cdFx0dmFyIEVTdGFydDtcblx0XHR2YXIgUmVzdWx0ID0gRTtcblx0XHR2YXIgSG9yejtcblxuXHRcdGlmIChSZXN1bHQuT3V0SWR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNraXApXG5cdFx0e1xuXHRcdFx0Ly9jaGVjayBpZiB0aGVyZSBhcmUgZWRnZXMgYmV5b25kIHRoZSBza2lwIGVkZ2UgaW4gdGhlIGJvdW5kIGFuZCBpZiBzb1xuXHRcdFx0Ly9jcmVhdGUgYW5vdGhlciBMb2NNaW4gYW5kIGNhbGxpbmcgUHJvY2Vzc0JvdW5kIG9uY2UgbW9yZSAuLi5cblx0XHRcdEUgPSBSZXN1bHQ7XG5cdFx0XHRpZiAoTGVmdEJvdW5kSXNGb3J3YXJkKVxuXHRcdFx0e1xuXHRcdFx0XHR3aGlsZSAoRS5Ub3AuWSA9PT0gRS5OZXh0LkJvdC5ZKSBFID0gRS5OZXh0O1xuXHRcdFx0XHR3aGlsZSAoRSAhPT0gUmVzdWx0ICYmIEUuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbCkgRSA9IEUuUHJldjtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0d2hpbGUgKEUuVG9wLlkgPT09IEUuUHJldi5Cb3QuWSkgRSA9IEUuUHJldjtcblx0XHRcdFx0d2hpbGUgKEUgIT09IFJlc3VsdCAmJiBFLkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwpIEUgPSBFLk5leHQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoRSA9PT0gUmVzdWx0KVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoTGVmdEJvdW5kSXNGb3J3YXJkKSBSZXN1bHQgPSBFLk5leHQ7XG5cdFx0XHRcdGVsc2UgUmVzdWx0ID0gRS5QcmV2O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQvL3RoZXJlIGFyZSBtb3JlIGVkZ2VzIGluIHRoZSBib3VuZCBiZXlvbmQgcmVzdWx0IHN0YXJ0aW5nIHdpdGggRVxuXHRcdFx0XHRpZiAoTGVmdEJvdW5kSXNGb3J3YXJkKVxuXHRcdFx0XHRcdEUgPSBSZXN1bHQuTmV4dDtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdEUgPSBSZXN1bHQuUHJldjtcblx0XHRcdFx0dmFyIGxvY01pbiA9IG5ldyBDbGlwcGVyTGliLkxvY2FsTWluaW1hKCk7XG5cdFx0XHRcdGxvY01pbi5OZXh0ID0gbnVsbDtcblx0XHRcdFx0bG9jTWluLlkgPSBFLkJvdC5ZO1xuXHRcdFx0XHRsb2NNaW4uTGVmdEJvdW5kID0gbnVsbDtcblx0XHRcdFx0bG9jTWluLlJpZ2h0Qm91bmQgPSBFO1xuXHRcdFx0XHRFLldpbmREZWx0YSA9IDA7XG5cdFx0XHRcdFJlc3VsdCA9IHRoaXMuUHJvY2Vzc0JvdW5kKEUsIExlZnRCb3VuZElzRm9yd2FyZCk7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0TG9jYWxNaW5pbWEobG9jTWluKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBSZXN1bHQ7XG5cdFx0fVxuXG5cdFx0aWYgKEUuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbClcblx0XHR7XG5cdFx0XHQvL1dlIG5lZWQgdG8gYmUgY2FyZWZ1bCB3aXRoIG9wZW4gcGF0aHMgYmVjYXVzZSB0aGlzIG1heSBub3QgYmUgYVxuXHRcdFx0Ly90cnVlIGxvY2FsIG1pbmltYSAoaWUgRSBtYXkgYmUgZm9sbG93aW5nIGEgc2tpcCBlZGdlKS5cblx0XHRcdC8vQWxzbywgY29uc2VjdXRpdmUgaG9yei4gZWRnZXMgbWF5IHN0YXJ0IGhlYWRpbmcgbGVmdCBiZWZvcmUgZ29pbmcgcmlnaHQuXG5cdFx0XHRpZiAoTGVmdEJvdW5kSXNGb3J3YXJkKSBFU3RhcnQgPSBFLlByZXY7XG5cdFx0XHRlbHNlIEVTdGFydCA9IEUuTmV4dDtcblxuXHRcdFx0aWYgKEVTdGFydC5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsKSAvL2llIGFuIGFkam9pbmluZyBob3Jpem9udGFsIHNraXAgZWRnZVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoRVN0YXJ0LkJvdC5YICE9PSBFLkJvdC5YICYmIEVTdGFydC5Ub3AuWCAhPT0gRS5Cb3QuWClcblx0XHRcdFx0XHR0aGlzLlJldmVyc2VIb3Jpem9udGFsKEUpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoRVN0YXJ0LkJvdC5YICE9PSBFLkJvdC5YKVxuXHRcdFx0XHR0aGlzLlJldmVyc2VIb3Jpem9udGFsKEUpO1xuXHRcdH1cblxuXHRcdEVTdGFydCA9IEU7XG5cdFx0aWYgKExlZnRCb3VuZElzRm9yd2FyZClcblx0XHR7XG5cdFx0XHR3aGlsZSAoUmVzdWx0LlRvcC5ZID09PSBSZXN1bHQuTmV4dC5Cb3QuWSAmJiBSZXN1bHQuTmV4dC5PdXRJZHggIT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcClcblx0XHRcdFx0UmVzdWx0ID0gUmVzdWx0Lk5leHQ7XG5cdFx0XHRpZiAoUmVzdWx0LkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwgJiYgUmVzdWx0Lk5leHQuT3V0SWR4ICE9PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNraXApXG5cdFx0XHR7XG5cdFx0XHRcdC8vbmI6IGF0IHRoZSB0b3Agb2YgYSBib3VuZCwgaG9yaXpvbnRhbHMgYXJlIGFkZGVkIHRvIHRoZSBib3VuZFxuXHRcdFx0XHQvL29ubHkgd2hlbiB0aGUgcHJlY2VkaW5nIGVkZ2UgYXR0YWNoZXMgdG8gdGhlIGhvcml6b250YWwncyBsZWZ0IHZlcnRleFxuXHRcdFx0XHQvL3VubGVzcyBhIFNraXAgZWRnZSBpcyBlbmNvdW50ZXJlZCB3aGVuIHRoYXQgYmVjb21lcyB0aGUgdG9wIGRpdmlkZVxuXHRcdFx0XHRIb3J6ID0gUmVzdWx0O1xuXHRcdFx0XHR3aGlsZSAoSG9yei5QcmV2LkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwpXG5cdFx0XHRcdFx0SG9yeiA9IEhvcnouUHJldjtcblx0XHRcdFx0aWYgKEhvcnouUHJldi5Ub3AuWCA+IFJlc3VsdC5OZXh0LlRvcC5YKVxuXHRcdFx0XHRcdFJlc3VsdCA9IEhvcnouUHJldjtcblx0XHRcdH1cblx0XHRcdHdoaWxlIChFICE9PSBSZXN1bHQpXG5cdFx0XHR7XG5cdFx0XHRcdEUuTmV4dEluTE1MID0gRS5OZXh0O1xuXHRcdFx0XHRpZiAoRS5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsICYmIEUgIT09IEVTdGFydCAmJiBFLkJvdC5YICE9PSBFLlByZXYuVG9wLlgpXG5cdFx0XHRcdFx0dGhpcy5SZXZlcnNlSG9yaXpvbnRhbChFKTtcblx0XHRcdFx0RSA9IEUuTmV4dDtcblx0XHRcdH1cblx0XHRcdGlmIChFLkR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmhvcml6b250YWwgJiYgRSAhPT0gRVN0YXJ0ICYmIEUuQm90LlggIT09IEUuUHJldi5Ub3AuWClcblx0XHRcdFx0dGhpcy5SZXZlcnNlSG9yaXpvbnRhbChFKTtcblx0XHRcdFJlc3VsdCA9IFJlc3VsdC5OZXh0O1xuXHRcdFx0Ly9tb3ZlIHRvIHRoZSBlZGdlIGp1c3QgYmV5b25kIGN1cnJlbnQgYm91bmRcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHdoaWxlIChSZXN1bHQuVG9wLlkgPT09IFJlc3VsdC5QcmV2LkJvdC5ZICYmIFJlc3VsdC5QcmV2Lk91dElkeCAhPT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwKVxuXHRcdFx0XHRSZXN1bHQgPSBSZXN1bHQuUHJldjtcblx0XHRcdGlmIChSZXN1bHQuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbCAmJiBSZXN1bHQuUHJldi5PdXRJZHggIT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcClcblx0XHRcdHtcblx0XHRcdFx0SG9yeiA9IFJlc3VsdDtcblx0XHRcdFx0d2hpbGUgKEhvcnouTmV4dC5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsKVxuXHRcdFx0XHRcdEhvcnogPSBIb3J6Lk5leHQ7XG5cdFx0XHRcdGlmIChIb3J6Lk5leHQuVG9wLlggPT09IFJlc3VsdC5QcmV2LlRvcC5YIHx8IEhvcnouTmV4dC5Ub3AuWCA+IFJlc3VsdC5QcmV2LlRvcC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0UmVzdWx0ID0gSG9yei5OZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAoRSAhPT0gUmVzdWx0KVxuXHRcdFx0e1xuXHRcdFx0XHRFLk5leHRJbkxNTCA9IEUuUHJldjtcblx0XHRcdFx0aWYgKEUuRHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbCAmJiBFICE9PSBFU3RhcnQgJiYgRS5Cb3QuWCAhPT0gRS5OZXh0LlRvcC5YKVxuXHRcdFx0XHRcdHRoaXMuUmV2ZXJzZUhvcml6b250YWwoRSk7XG5cdFx0XHRcdEUgPSBFLlByZXY7XG5cdFx0XHR9XG5cdFx0XHRpZiAoRS5EeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5ob3Jpem9udGFsICYmIEUgIT09IEVTdGFydCAmJiBFLkJvdC5YICE9PSBFLk5leHQuVG9wLlgpXG5cdFx0XHRcdHRoaXMuUmV2ZXJzZUhvcml6b250YWwoRSk7XG5cdFx0XHRSZXN1bHQgPSBSZXN1bHQuUHJldjtcblx0XHRcdC8vbW92ZSB0byB0aGUgZWRnZSBqdXN0IGJleW9uZCBjdXJyZW50IGJvdW5kXG5cdFx0fVxuXG5cdFx0cmV0dXJuIFJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5BZGRQYXRoID0gZnVuY3Rpb24gKHBnLCBwb2x5VHlwZSwgQ2xvc2VkKVxuXHR7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX2xpbmVzKVxuXHRcdHtcblx0XHRcdGlmICghQ2xvc2VkICYmIHBvbHlUeXBlID09PSBDbGlwcGVyTGliLlBvbHlUeXBlLnB0Q2xpcClcblx0XHRcdFx0Q2xpcHBlckxpYi5FcnJvcihcIkFkZFBhdGg6IE9wZW4gcGF0aHMgbXVzdCBiZSBzdWJqZWN0LlwiKTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmICghQ2xvc2VkKVxuXHRcdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiQWRkUGF0aDogT3BlbiBwYXRocyBoYXZlIGJlZW4gZGlzYWJsZWQuXCIpO1xuXHRcdH1cblx0XHR2YXIgaGlnaEkgPSBwZy5sZW5ndGggLSAxO1xuXHRcdGlmIChDbG9zZWQpXG5cdFx0XHR3aGlsZSAoaGlnaEkgPiAwICYmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHBnW2hpZ2hJXSwgcGdbMF0pKSlcblx0XHRcdFx0LS1oaWdoSTtcblx0XHR3aGlsZSAoaGlnaEkgPiAwICYmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHBnW2hpZ2hJXSwgcGdbaGlnaEkgLSAxXSkpKVxuXHRcdFx0LS1oaWdoSTtcblx0XHRpZiAoKENsb3NlZCAmJiBoaWdoSSA8IDIpIHx8ICghQ2xvc2VkICYmIGhpZ2hJIDwgMSkpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0Ly9jcmVhdGUgYSBuZXcgZWRnZSBhcnJheSAuLi5cblx0XHR2YXIgZWRnZXMgPSBuZXcgQXJyYXkoKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBoaWdoSTsgaSsrKVxuXHRcdFx0ZWRnZXMucHVzaChuZXcgQ2xpcHBlckxpYi5URWRnZSgpKTtcblx0XHR2YXIgSXNGbGF0ID0gdHJ1ZTtcblx0XHQvLzEuIEJhc2ljIChmaXJzdCkgZWRnZSBpbml0aWFsaXphdGlvbiAuLi5cblxuXHRcdC8vZWRnZXNbMV0uQ3VyciA9IHBnWzFdO1xuXHRcdGVkZ2VzWzFdLkN1cnIuWCA9IHBnWzFdLlg7XG5cdFx0ZWRnZXNbMV0uQ3Vyci5ZID0gcGdbMV0uWTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBlZGdlc1sxXS5DdXJyLlogPSBwZ1sxXS5aO1xuXG5cdFx0dmFyICQxID0ge1xuXHRcdFx0VmFsdWU6IHRoaXMubV9Vc2VGdWxsUmFuZ2Vcblx0XHR9O1xuXG5cdFx0dGhpcy5SYW5nZVRlc3QocGdbMF0sICQxKTtcblx0XHR0aGlzLm1fVXNlRnVsbFJhbmdlID0gJDEuVmFsdWU7XG5cblx0XHQkMS5WYWx1ZSA9IHRoaXMubV9Vc2VGdWxsUmFuZ2U7XG5cdFx0dGhpcy5SYW5nZVRlc3QocGdbaGlnaEldLCAkMSk7XG5cdFx0dGhpcy5tX1VzZUZ1bGxSYW5nZSA9ICQxLlZhbHVlO1xuXG5cdFx0dGhpcy5Jbml0RWRnZShlZGdlc1swXSwgZWRnZXNbMV0sIGVkZ2VzW2hpZ2hJXSwgcGdbMF0pO1xuXHRcdHRoaXMuSW5pdEVkZ2UoZWRnZXNbaGlnaEldLCBlZGdlc1swXSwgZWRnZXNbaGlnaEkgLSAxXSwgcGdbaGlnaEldKTtcblx0XHRmb3IgKHZhciBpID0gaGlnaEkgLSAxOyBpID49IDE7IC0taSlcblx0XHR7XG5cdFx0XHQkMS5WYWx1ZSA9IHRoaXMubV9Vc2VGdWxsUmFuZ2U7XG5cdFx0XHR0aGlzLlJhbmdlVGVzdChwZ1tpXSwgJDEpO1xuXHRcdFx0dGhpcy5tX1VzZUZ1bGxSYW5nZSA9ICQxLlZhbHVlO1xuXG5cdFx0XHR0aGlzLkluaXRFZGdlKGVkZ2VzW2ldLCBlZGdlc1tpICsgMV0sIGVkZ2VzW2kgLSAxXSwgcGdbaV0pO1xuXHRcdH1cblxuXHRcdHZhciBlU3RhcnQgPSBlZGdlc1swXTtcblx0XHQvLzIuIFJlbW92ZSBkdXBsaWNhdGUgdmVydGljZXMsIGFuZCAod2hlbiBjbG9zZWQpIGNvbGxpbmVhciBlZGdlcyAuLi5cblx0XHR2YXIgRSA9IGVTdGFydCxcblx0XHRcdGVMb29wU3RvcCA9IGVTdGFydDtcblx0XHRmb3IgKDs7KVxuXHRcdHtcblx0XHRcdC8vY29uc29sZS5sb2coRS5OZXh0LCBlU3RhcnQpO1xuXHRcdFx0Ly9uYjogYWxsb3dzIG1hdGNoaW5nIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIHdoZW4gbm90IENsb3NlZCAuLi5cblx0XHRcdGlmIChFLkN1cnIgPT09IEUuTmV4dC5DdXJyICYmIChDbG9zZWQgfHwgRS5OZXh0ICE9PSBlU3RhcnQpKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoRSA9PT0gRS5OZXh0KVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRpZiAoRSA9PT0gZVN0YXJ0KVxuXHRcdFx0XHRcdGVTdGFydCA9IEUuTmV4dDtcblx0XHRcdFx0RSA9IHRoaXMuUmVtb3ZlRWRnZShFKTtcblx0XHRcdFx0ZUxvb3BTdG9wID0gRTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoRS5QcmV2ID09PSBFLk5leHQpXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZWxzZSBpZiAoQ2xvc2VkICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw0KEUuUHJldi5DdXJyLCBFLkN1cnIsIEUuTmV4dC5DdXJyLCB0aGlzLm1fVXNlRnVsbFJhbmdlKSAmJiAoIXRoaXMuUHJlc2VydmVDb2xsaW5lYXIgfHwgIXRoaXMuUHQySXNCZXR3ZWVuUHQxQW5kUHQzKEUuUHJldi5DdXJyLCBFLkN1cnIsIEUuTmV4dC5DdXJyKSkpXG5cdFx0XHR7XG5cdFx0XHRcdC8vQ29sbGluZWFyIGVkZ2VzIGFyZSBhbGxvd2VkIGZvciBvcGVuIHBhdGhzIGJ1dCBpbiBjbG9zZWQgcGF0aHNcblx0XHRcdFx0Ly90aGUgZGVmYXVsdCBpcyB0byBtZXJnZSBhZGphY2VudCBjb2xsaW5lYXIgZWRnZXMgaW50byBhIHNpbmdsZSBlZGdlLlxuXHRcdFx0XHQvL0hvd2V2ZXIsIGlmIHRoZSBQcmVzZXJ2ZUNvbGxpbmVhciBwcm9wZXJ0eSBpcyBlbmFibGVkLCBvbmx5IG92ZXJsYXBwaW5nXG5cdFx0XHRcdC8vY29sbGluZWFyIGVkZ2VzIChpZSBzcGlrZXMpIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIGNsb3NlZCBwYXRocy5cblx0XHRcdFx0aWYgKEUgPT09IGVTdGFydClcblx0XHRcdFx0XHRlU3RhcnQgPSBFLk5leHQ7XG5cdFx0XHRcdEUgPSB0aGlzLlJlbW92ZUVkZ2UoRSk7XG5cdFx0XHRcdEUgPSBFLlByZXY7XG5cdFx0XHRcdGVMb29wU3RvcCA9IEU7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0RSA9IEUuTmV4dDtcblx0XHRcdGlmICgoRSA9PT0gZUxvb3BTdG9wKSB8fCAoIUNsb3NlZCAmJiBFLk5leHQgPT09IGVTdGFydCkpIGJyZWFrO1xuXHRcdH1cblx0XHRpZiAoKCFDbG9zZWQgJiYgKEUgPT09IEUuTmV4dCkpIHx8IChDbG9zZWQgJiYgKEUuUHJldiA9PT0gRS5OZXh0KSkpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0aWYgKCFDbG9zZWQpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX0hhc09wZW5QYXRocyA9IHRydWU7XG5cdFx0XHRlU3RhcnQuUHJldi5PdXRJZHggPSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNraXA7XG5cdFx0fVxuXHRcdC8vMy4gRG8gc2Vjb25kIHN0YWdlIG9mIGVkZ2UgaW5pdGlhbGl6YXRpb24gLi4uXG5cdFx0RSA9IGVTdGFydDtcblx0XHRkbyB7XG5cdFx0XHR0aGlzLkluaXRFZGdlMihFLCBwb2x5VHlwZSk7XG5cdFx0XHRFID0gRS5OZXh0O1xuXHRcdFx0aWYgKElzRmxhdCAmJiBFLkN1cnIuWSAhPT0gZVN0YXJ0LkN1cnIuWSlcblx0XHRcdFx0SXNGbGF0ID0gZmFsc2U7XG5cdFx0fVxuXHRcdHdoaWxlIChFICE9PSBlU3RhcnQpXG5cdFx0Ly80LiBGaW5hbGx5LCBhZGQgZWRnZSBib3VuZHMgdG8gTG9jYWxNaW5pbWEgbGlzdCAuLi5cblx0XHQvL1RvdGFsbHkgZmxhdCBwYXRocyBtdXN0IGJlIGhhbmRsZWQgZGlmZmVyZW50bHkgd2hlbiBhZGRpbmcgdGhlbVxuXHRcdC8vdG8gTG9jYWxNaW5pbWEgbGlzdCB0byBhdm9pZCBlbmRsZXNzIGxvb3BzIGV0YyAuLi5cblx0XHRpZiAoSXNGbGF0KVxuXHRcdHtcblx0XHRcdGlmIChDbG9zZWQpXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0RS5QcmV2Lk91dElkeCA9IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcDtcblxuXHRcdFx0dmFyIGxvY01pbiA9IG5ldyBDbGlwcGVyTGliLkxvY2FsTWluaW1hKCk7XG5cdFx0XHRsb2NNaW4uTmV4dCA9IG51bGw7XG5cdFx0XHRsb2NNaW4uWSA9IEUuQm90Llk7XG5cdFx0XHRsb2NNaW4uTGVmdEJvdW5kID0gbnVsbDtcblx0XHRcdGxvY01pbi5SaWdodEJvdW5kID0gRTtcblx0XHRcdGxvY01pbi5SaWdodEJvdW5kLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzUmlnaHQ7XG5cdFx0XHRsb2NNaW4uUmlnaHRCb3VuZC5XaW5kRGVsdGEgPSAwO1xuXG5cdFx0XHRmb3IgKDs7KVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoRS5Cb3QuWCAhPT0gRS5QcmV2LlRvcC5YKSB0aGlzLlJldmVyc2VIb3Jpem9udGFsKEUpO1xuXHRcdFx0XHRpZiAoRS5OZXh0Lk91dElkeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwKSBicmVhaztcblx0XHRcdFx0RS5OZXh0SW5MTUwgPSBFLk5leHQ7XG5cdFx0XHRcdEUgPSBFLk5leHQ7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLkluc2VydExvY2FsTWluaW1hKGxvY01pbik7XG5cdFx0XHR0aGlzLm1fZWRnZXMucHVzaChlZGdlcyk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0dGhpcy5tX2VkZ2VzLnB1c2goZWRnZXMpO1xuXHRcdHZhciBsZWZ0Qm91bmRJc0ZvcndhcmQ7XG5cdFx0dmFyIEVNaW4gPSBudWxsO1xuXG5cdFx0Ly93b3JrYXJvdW5kIHRvIGF2b2lkIGFuIGVuZGxlc3MgbG9vcCBpbiB0aGUgd2hpbGUgbG9vcCBiZWxvdyB3aGVuXG5cdFx0Ly9vcGVuIHBhdGhzIGhhdmUgbWF0Y2hpbmcgc3RhcnQgYW5kIGVuZCBwb2ludHMgLi4uXG5cdFx0aWYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkoRS5QcmV2LkJvdCwgRS5QcmV2LlRvcCkpXG5cdFx0XHRFID0gRS5OZXh0O1xuXG5cdFx0Zm9yICg7Oylcblx0XHR7XG5cdFx0XHRFID0gdGhpcy5GaW5kTmV4dExvY01pbihFKTtcblx0XHRcdGlmIChFID09PSBFTWluKVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGVsc2UgaWYgKEVNaW4gPT09IG51bGwpXG5cdFx0XHRcdEVNaW4gPSBFO1xuXHRcdFx0Ly9FIGFuZCBFLlByZXYgbm93IHNoYXJlIGEgbG9jYWwgbWluaW1hIChsZWZ0IGFsaWduZWQgaWYgaG9yaXpvbnRhbCkuXG5cdFx0XHQvL0NvbXBhcmUgdGhlaXIgc2xvcGVzIHRvIGZpbmQgd2hpY2ggc3RhcnRzIHdoaWNoIGJvdW5kIC4uLlxuXHRcdFx0dmFyIGxvY01pbiA9IG5ldyBDbGlwcGVyTGliLkxvY2FsTWluaW1hKCk7XG5cdFx0XHRsb2NNaW4uTmV4dCA9IG51bGw7XG5cdFx0XHRsb2NNaW4uWSA9IEUuQm90Llk7XG5cdFx0XHRpZiAoRS5EeCA8IEUuUHJldi5EeClcblx0XHRcdHtcblx0XHRcdFx0bG9jTWluLkxlZnRCb3VuZCA9IEUuUHJldjtcblx0XHRcdFx0bG9jTWluLlJpZ2h0Qm91bmQgPSBFO1xuXHRcdFx0XHRsZWZ0Qm91bmRJc0ZvcndhcmQgPSBmYWxzZTtcblx0XHRcdFx0Ly9RLm5leHRJbkxNTCA9IFEucHJldlxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRsb2NNaW4uTGVmdEJvdW5kID0gRTtcblx0XHRcdFx0bG9jTWluLlJpZ2h0Qm91bmQgPSBFLlByZXY7XG5cdFx0XHRcdGxlZnRCb3VuZElzRm9yd2FyZCA9IHRydWU7XG5cdFx0XHRcdC8vUS5uZXh0SW5MTUwgPSBRLm5leHRcblx0XHRcdH1cblx0XHRcdGxvY01pbi5MZWZ0Qm91bmQuU2lkZSA9IENsaXBwZXJMaWIuRWRnZVNpZGUuZXNMZWZ0O1xuXHRcdFx0bG9jTWluLlJpZ2h0Qm91bmQuU2lkZSA9IENsaXBwZXJMaWIuRWRnZVNpZGUuZXNSaWdodDtcblx0XHRcdGlmICghQ2xvc2VkKVxuXHRcdFx0XHRsb2NNaW4uTGVmdEJvdW5kLldpbmREZWx0YSA9IDA7XG5cdFx0XHRlbHNlIGlmIChsb2NNaW4uTGVmdEJvdW5kLk5leHQgPT09IGxvY01pbi5SaWdodEJvdW5kKVxuXHRcdFx0XHRsb2NNaW4uTGVmdEJvdW5kLldpbmREZWx0YSA9IC0xO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRsb2NNaW4uTGVmdEJvdW5kLldpbmREZWx0YSA9IDE7XG5cdFx0XHRsb2NNaW4uUmlnaHRCb3VuZC5XaW5kRGVsdGEgPSAtbG9jTWluLkxlZnRCb3VuZC5XaW5kRGVsdGE7XG5cdFx0XHRFID0gdGhpcy5Qcm9jZXNzQm91bmQobG9jTWluLkxlZnRCb3VuZCwgbGVmdEJvdW5kSXNGb3J3YXJkKTtcblx0XHRcdGlmIChFLk91dElkeCA9PT0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Ta2lwKVxuXHRcdFx0XHRFID0gdGhpcy5Qcm9jZXNzQm91bmQoRSwgbGVmdEJvdW5kSXNGb3J3YXJkKTtcblx0XHRcdHZhciBFMiA9IHRoaXMuUHJvY2Vzc0JvdW5kKGxvY01pbi5SaWdodEJvdW5kLCAhbGVmdEJvdW5kSXNGb3J3YXJkKTtcblx0XHRcdGlmIChFMi5PdXRJZHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcCkgRTIgPSB0aGlzLlByb2Nlc3NCb3VuZChFMiwgIWxlZnRCb3VuZElzRm9yd2FyZCk7XG5cdFx0XHRpZiAobG9jTWluLkxlZnRCb3VuZC5PdXRJZHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcClcblx0XHRcdFx0bG9jTWluLkxlZnRCb3VuZCA9IG51bGw7XG5cdFx0XHRlbHNlIGlmIChsb2NNaW4uUmlnaHRCb3VuZC5PdXRJZHggPT09IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2tpcClcblx0XHRcdFx0bG9jTWluLlJpZ2h0Qm91bmQgPSBudWxsO1xuXHRcdFx0dGhpcy5JbnNlcnRMb2NhbE1pbmltYShsb2NNaW4pO1xuXHRcdFx0aWYgKCFsZWZ0Qm91bmRJc0ZvcndhcmQpXG5cdFx0XHRcdEUgPSBFMjtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuQWRkUGF0aHMgPSBmdW5jdGlvbiAocHBnLCBwb2x5VHlwZSwgY2xvc2VkKVxuXHR7XG5cdFx0Ly8gIGNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwiKTtcblx0XHQvLyAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocHBnKSk7XG5cdFx0dmFyIHJlc3VsdCA9IGZhbHNlO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gcHBnLmxlbmd0aDsgaSA8IGlsZW47ICsraSlcblx0XHRcdGlmICh0aGlzLkFkZFBhdGgocHBnW2ldLCBwb2x5VHlwZSwgY2xvc2VkKSlcblx0XHRcdFx0cmVzdWx0ID0gdHJ1ZTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlB0MklzQmV0d2VlblB0MUFuZFB0MyA9IGZ1bmN0aW9uIChwdDEsIHB0MiwgcHQzKVxuXHR7XG5cdFx0aWYgKChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHB0MSwgcHQzKSkgfHwgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocHQxLCBwdDIpKSB8fCAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShwdDMsIHB0MikpKVxuXG5cdFx0XHQvL2lmICgocHQxID09IHB0MykgfHwgKHB0MSA9PSBwdDIpIHx8IChwdDMgPT0gcHQyKSlcblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdGVsc2UgaWYgKHB0MS5YICE9PSBwdDMuWClcblx0XHRcdHJldHVybiAocHQyLlggPiBwdDEuWCkgPT09IChwdDIuWCA8IHB0My5YKTtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gKHB0Mi5ZID4gcHQxLlkpID09PSAocHQyLlkgPCBwdDMuWSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuUmVtb3ZlRWRnZSA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0Ly9yZW1vdmVzIGUgZnJvbSBkb3VibGVfbGlua2VkX2xpc3QgKGJ1dCB3aXRob3V0IHJlbW92aW5nIGZyb20gbWVtb3J5KVxuXHRcdGUuUHJldi5OZXh0ID0gZS5OZXh0O1xuXHRcdGUuTmV4dC5QcmV2ID0gZS5QcmV2O1xuXHRcdHZhciByZXN1bHQgPSBlLk5leHQ7XG5cdFx0ZS5QcmV2ID0gbnVsbDsgLy9mbGFnIGFzIHJlbW92ZWQgKHNlZSBDbGlwcGVyQmFzZS5DbGVhcilcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLlNldER4ID0gZnVuY3Rpb24gKGUpXG5cdHtcblx0XHRlLkRlbHRhLlggPSAoZS5Ub3AuWCAtIGUuQm90LlgpO1xuXHRcdGUuRGVsdGEuWSA9IChlLlRvcC5ZIC0gZS5Cb3QuWSk7XG5cdFx0aWYgKGUuRGVsdGEuWSA9PT0gMCkgZS5EeCA9IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbDtcblx0XHRlbHNlIGUuRHggPSAoZS5EZWx0YS5YKSAvIChlLkRlbHRhLlkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkluc2VydExvY2FsTWluaW1hID0gZnVuY3Rpb24gKG5ld0xtKVxuXHR7XG5cdFx0aWYgKHRoaXMubV9NaW5pbWFMaXN0ID09PSBudWxsKVxuXHRcdHtcblx0XHRcdHRoaXMubV9NaW5pbWFMaXN0ID0gbmV3TG07XG5cdFx0fVxuXHRcdGVsc2UgaWYgKG5ld0xtLlkgPj0gdGhpcy5tX01pbmltYUxpc3QuWSlcblx0XHR7XG5cdFx0XHRuZXdMbS5OZXh0ID0gdGhpcy5tX01pbmltYUxpc3Q7XG5cdFx0XHR0aGlzLm1fTWluaW1hTGlzdCA9IG5ld0xtO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIHRtcExtID0gdGhpcy5tX01pbmltYUxpc3Q7XG5cdFx0XHR3aGlsZSAodG1wTG0uTmV4dCAhPT0gbnVsbCAmJiAobmV3TG0uWSA8IHRtcExtLk5leHQuWSkpXG5cdFx0XHRcdHRtcExtID0gdG1wTG0uTmV4dDtcblx0XHRcdG5ld0xtLk5leHQgPSB0bXBMbS5OZXh0O1xuXHRcdFx0dG1wTG0uTmV4dCA9IG5ld0xtO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5Qb3BMb2NhbE1pbmltYSA9IGZ1bmN0aW9uIChZLCBjdXJyZW50KVxuXHR7XG5cdFx0Y3VycmVudC52ID0gdGhpcy5tX0N1cnJlbnRMTTtcblx0XHRpZiAodGhpcy5tX0N1cnJlbnRMTSAhPT0gbnVsbCAmJiB0aGlzLm1fQ3VycmVudExNLlkgPT09IFkpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX0N1cnJlbnRMTSA9IHRoaXMubV9DdXJyZW50TE0uTmV4dDtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuUmV2ZXJzZUhvcml6b250YWwgPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdC8vc3dhcCBob3Jpem9udGFsIGVkZ2VzJyB0b3AgYW5kIGJvdHRvbSB4J3Mgc28gdGhleSBmb2xsb3cgdGhlIG5hdHVyYWxcblx0XHQvL3Byb2dyZXNzaW9uIG9mIHRoZSBib3VuZHMgLSBpZSBzbyB0aGVpciB4Ym90cyB3aWxsIGFsaWduIHdpdGggdGhlXG5cdFx0Ly9hZGpvaW5pbmcgbG93ZXIgZWRnZS4gW0hlbHBmdWwgaW4gdGhlIFByb2Nlc3NIb3Jpem9udGFsKCkgbWV0aG9kLl1cblx0XHR2YXIgdG1wID0gZS5Ub3AuWDtcblx0XHRlLlRvcC5YID0gZS5Cb3QuWDtcblx0XHRlLkJvdC5YID0gdG1wO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopXG5cdFx0e1xuXHRcdFx0dG1wID0gZS5Ub3AuWjtcblx0XHRcdGUuVG9wLlogPSBlLkJvdC5aO1xuXHRcdFx0ZS5Cb3QuWiA9IHRtcDtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuUmVzZXQgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dGhpcy5tX0N1cnJlbnRMTSA9IHRoaXMubV9NaW5pbWFMaXN0O1xuXHRcdGlmICh0aGlzLm1fQ3VycmVudExNID09PSBudWxsKSAvL2llIG5vdGhpbmcgdG8gcHJvY2Vzc1xuXHRcdFx0cmV0dXJuO1xuXHRcdC8vcmVzZXQgYWxsIGVkZ2VzIC4uLlxuXHRcdHRoaXMubV9TY2FuYmVhbSA9IG51bGw7XG5cdFx0dmFyIGxtID0gdGhpcy5tX01pbmltYUxpc3Q7XG5cdFx0d2hpbGUgKGxtICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdHRoaXMuSW5zZXJ0U2NhbmJlYW0obG0uWSk7XG5cdFx0XHR2YXIgZSA9IGxtLkxlZnRCb3VuZDtcblx0XHRcdGlmIChlICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHQvL2UuQ3VyciA9IGUuQm90O1xuXHRcdFx0XHRlLkN1cnIuWCA9IGUuQm90Llg7XG5cdFx0XHRcdGUuQ3Vyci5ZID0gZS5Cb3QuWTtcblx0XHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgZS5DdXJyLlogPSBlLkJvdC5aO1xuXHRcdFx0XHRlLk91dElkeCA9IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuVW5hc3NpZ25lZDtcblx0XHRcdH1cblx0XHRcdGUgPSBsbS5SaWdodEJvdW5kO1xuXHRcdFx0aWYgKGUgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdC8vZS5DdXJyID0gZS5Cb3Q7XG5cdFx0XHRcdGUuQ3Vyci5YID0gZS5Cb3QuWDtcblx0XHRcdFx0ZS5DdXJyLlkgPSBlLkJvdC5ZO1xuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBlLkN1cnIuWiA9IGUuQm90Llo7XG5cdFx0XHRcdGUuT3V0SWR4ID0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5VbmFzc2lnbmVkO1xuXHRcdFx0fVxuXHRcdFx0bG0gPSBsbS5OZXh0O1xuXHRcdH1cblx0XHR0aGlzLm1fQWN0aXZlRWRnZXMgPSBudWxsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkluc2VydFNjYW5iZWFtID0gZnVuY3Rpb24gKFkpXG5cdHtcblx0XHQvL3NpbmdsZS1saW5rZWQgbGlzdDogc29ydGVkIGRlc2NlbmRpbmcsIGlnbm9yaW5nIGR1cHMuXG5cdFx0aWYgKHRoaXMubV9TY2FuYmVhbSA9PT0gbnVsbClcblx0XHR7XG5cdFx0XHR0aGlzLm1fU2NhbmJlYW0gPSBuZXcgQ2xpcHBlckxpYi5TY2FuYmVhbSgpO1xuXHRcdFx0dGhpcy5tX1NjYW5iZWFtLk5leHQgPSBudWxsO1xuXHRcdFx0dGhpcy5tX1NjYW5iZWFtLlkgPSBZO1xuXHRcdH1cblx0XHRlbHNlIGlmIChZID4gdGhpcy5tX1NjYW5iZWFtLlkpXG5cdFx0e1xuXHRcdFx0dmFyIG5ld1NiID0gbmV3IENsaXBwZXJMaWIuU2NhbmJlYW0oKTtcblx0XHRcdG5ld1NiLlkgPSBZO1xuXHRcdFx0bmV3U2IuTmV4dCA9IHRoaXMubV9TY2FuYmVhbTtcblx0XHRcdHRoaXMubV9TY2FuYmVhbSA9IG5ld1NiO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIHNiMiA9IHRoaXMubV9TY2FuYmVhbTtcblx0XHRcdHdoaWxlIChzYjIuTmV4dCAhPT0gbnVsbCAmJiBZIDw9IHNiMi5OZXh0LlkpXG5cdFx0XHR7XG5cdFx0XHRcdHNiMiA9IHNiMi5OZXh0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKFkgPT09IHNiMi5ZKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9IC8vaWUgaWdub3JlcyBkdXBsaWNhdGVzXG5cdFx0XHR2YXIgbmV3U2IxID0gbmV3IENsaXBwZXJMaWIuU2NhbmJlYW0oKTtcblx0XHRcdG5ld1NiMS5ZID0gWTtcblx0XHRcdG5ld1NiMS5OZXh0ID0gc2IyLk5leHQ7XG5cdFx0XHRzYjIuTmV4dCA9IG5ld1NiMTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuUG9wU2NhbmJlYW0gPSBmdW5jdGlvbiAoWSlcblx0e1xuXHRcdGlmICh0aGlzLm1fU2NhbmJlYW0gPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0WS52ID0gMDtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0WS52ID0gdGhpcy5tX1NjYW5iZWFtLlk7XG5cdFx0dGhpcy5tX1NjYW5iZWFtID0gdGhpcy5tX1NjYW5iZWFtLk5leHQ7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuTG9jYWxNaW5pbWFQZW5kaW5nID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiAodGhpcy5tX0N1cnJlbnRMTSAhPT0gbnVsbCk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuQ3JlYXRlT3V0UmVjID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQ2xpcHBlckxpYi5PdXRSZWMoKTtcblx0XHRyZXN1bHQuSWR4ID0gQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5VbmFzc2lnbmVkO1xuXHRcdHJlc3VsdC5Jc0hvbGUgPSBmYWxzZTtcblx0XHRyZXN1bHQuSXNPcGVuID0gZmFsc2U7XG5cdFx0cmVzdWx0LkZpcnN0TGVmdCA9IG51bGw7XG5cdFx0cmVzdWx0LlB0cyA9IG51bGw7XG5cdFx0cmVzdWx0LkJvdHRvbVB0ID0gbnVsbDtcblx0XHRyZXN1bHQuUG9seU5vZGUgPSBudWxsO1xuXHRcdHRoaXMubV9Qb2x5T3V0cy5wdXNoKHJlc3VsdCk7XG5cdFx0cmVzdWx0LklkeCA9IHRoaXMubV9Qb2x5T3V0cy5sZW5ndGggLSAxO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuRGlzcG9zZU91dFJlYyA9IGZ1bmN0aW9uIChpbmRleClcblx0e1xuXHRcdHZhciBvdXRSZWMgPSB0aGlzLm1fUG9seU91dHNbaW5kZXhdO1xuXHRcdG91dFJlYy5QdHMgPSBudWxsO1xuXHRcdG91dFJlYyA9IG51bGw7XG5cdFx0dGhpcy5tX1BvbHlPdXRzW2luZGV4XSA9IG51bGw7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuVXBkYXRlRWRnZUludG9BRUwgPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdGlmIChlLk5leHRJbkxNTCA9PT0gbnVsbClcblx0XHR7XG5cdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiVXBkYXRlRWRnZUludG9BRUw6IGludmFsaWQgY2FsbFwiKTtcblx0XHR9XG5cdFx0dmFyIEFlbFByZXYgPSBlLlByZXZJbkFFTDtcblx0XHR2YXIgQWVsTmV4dCA9IGUuTmV4dEluQUVMO1xuXHRcdGUuTmV4dEluTE1MLk91dElkeCA9IGUuT3V0SWR4O1xuXHRcdGlmIChBZWxQcmV2ICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdEFlbFByZXYuTmV4dEluQUVMID0gZS5OZXh0SW5MTUw7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR0aGlzLm1fQWN0aXZlRWRnZXMgPSBlLk5leHRJbkxNTDtcblx0XHR9XG5cdFx0aWYgKEFlbE5leHQgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0QWVsTmV4dC5QcmV2SW5BRUwgPSBlLk5leHRJbkxNTDtcblx0XHR9XG5cdFx0ZS5OZXh0SW5MTUwuU2lkZSA9IGUuU2lkZTtcblx0XHRlLk5leHRJbkxNTC5XaW5kRGVsdGEgPSBlLldpbmREZWx0YTtcblx0XHRlLk5leHRJbkxNTC5XaW5kQ250ID0gZS5XaW5kQ250O1xuXHRcdGUuTmV4dEluTE1MLldpbmRDbnQyID0gZS5XaW5kQ250Mjtcblx0XHRlID0gZS5OZXh0SW5MTUw7XG5cdFx0ZS5DdXJyLlggPSBlLkJvdC5YO1xuXHRcdGUuQ3Vyci5ZID0gZS5Cb3QuWTtcblx0XHRlLlByZXZJbkFFTCA9IEFlbFByZXY7XG5cdFx0ZS5OZXh0SW5BRUwgPSBBZWxOZXh0O1xuXHRcdGlmICghQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Jc0hvcml6b250YWwoZSkpXG5cdFx0e1xuXHRcdFx0dGhpcy5JbnNlcnRTY2FuYmVhbShlLlRvcC5ZKTtcblx0XHR9XG5cdFx0cmV0dXJuIGU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyQmFzZS5wcm90b3R5cGUuU3dhcFBvc2l0aW9uc0luQUVMID0gZnVuY3Rpb24gKGVkZ2UxLCBlZGdlMilcblx0e1xuXHRcdC8vY2hlY2sgdGhhdCBvbmUgb3Igb3RoZXIgZWRnZSBoYXNuJ3QgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZnJvbSBBRUwgLi4uXG5cdFx0aWYgKGVkZ2UxLk5leHRJbkFFTCA9PT0gZWRnZTEuUHJldkluQUVMIHx8IGVkZ2UyLk5leHRJbkFFTCA9PT0gZWRnZTIuUHJldkluQUVMKVxuXHRcdHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoZWRnZTEuTmV4dEluQUVMID09PSBlZGdlMilcblx0XHR7XG5cdFx0XHR2YXIgbmV4dCA9IGVkZ2UyLk5leHRJbkFFTDtcblx0XHRcdGlmIChuZXh0ICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHRuZXh0LlByZXZJbkFFTCA9IGVkZ2UxO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHByZXYgPSBlZGdlMS5QcmV2SW5BRUw7XG5cdFx0XHRpZiAocHJldiAhPT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0cHJldi5OZXh0SW5BRUwgPSBlZGdlMjtcblx0XHRcdH1cblx0XHRcdGVkZ2UyLlByZXZJbkFFTCA9IHByZXY7XG5cdFx0XHRlZGdlMi5OZXh0SW5BRUwgPSBlZGdlMTtcblx0XHRcdGVkZ2UxLlByZXZJbkFFTCA9IGVkZ2UyO1xuXHRcdFx0ZWRnZTEuTmV4dEluQUVMID0gbmV4dDtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoZWRnZTIuTmV4dEluQUVMID09PSBlZGdlMSlcblx0XHR7XG5cdFx0XHR2YXIgbmV4dDEgPSBlZGdlMS5OZXh0SW5BRUw7XG5cdFx0XHRpZiAobmV4dDEgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdG5leHQxLlByZXZJbkFFTCA9IGVkZ2UyO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHByZXYxID0gZWRnZTIuUHJldkluQUVMO1xuXHRcdFx0aWYgKHByZXYxICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHRwcmV2MS5OZXh0SW5BRUwgPSBlZGdlMTtcblx0XHRcdH1cblx0XHRcdGVkZ2UxLlByZXZJbkFFTCA9IHByZXYxO1xuXHRcdFx0ZWRnZTEuTmV4dEluQUVMID0gZWRnZTI7XG5cdFx0XHRlZGdlMi5QcmV2SW5BRUwgPSBlZGdlMTtcblx0XHRcdGVkZ2UyLk5leHRJbkFFTCA9IG5leHQxO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIG5leHQyID0gZWRnZTEuTmV4dEluQUVMO1xuXHRcdFx0dmFyIHByZXYyID0gZWRnZTEuUHJldkluQUVMO1xuXHRcdFx0ZWRnZTEuTmV4dEluQUVMID0gZWRnZTIuTmV4dEluQUVMO1xuXHRcdFx0aWYgKGVkZ2UxLk5leHRJbkFFTCAhPT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0ZWRnZTEuTmV4dEluQUVMLlByZXZJbkFFTCA9IGVkZ2UxO1xuXHRcdFx0fVxuXHRcdFx0ZWRnZTEuUHJldkluQUVMID0gZWRnZTIuUHJldkluQUVMO1xuXHRcdFx0aWYgKGVkZ2UxLlByZXZJbkFFTCAhPT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0ZWRnZTEuUHJldkluQUVMLk5leHRJbkFFTCA9IGVkZ2UxO1xuXHRcdFx0fVxuXHRcdFx0ZWRnZTIuTmV4dEluQUVMID0gbmV4dDI7XG5cdFx0XHRpZiAoZWRnZTIuTmV4dEluQUVMICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHRlZGdlMi5OZXh0SW5BRUwuUHJldkluQUVMID0gZWRnZTI7XG5cdFx0XHR9XG5cdFx0XHRlZGdlMi5QcmV2SW5BRUwgPSBwcmV2Mjtcblx0XHRcdGlmIChlZGdlMi5QcmV2SW5BRUwgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdGVkZ2UyLlByZXZJbkFFTC5OZXh0SW5BRUwgPSBlZGdlMjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZWRnZTEuUHJldkluQUVMID09PSBudWxsKVxuXHRcdHtcblx0XHRcdHRoaXMubV9BY3RpdmVFZGdlcyA9IGVkZ2UxO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0aWYgKGVkZ2UyLlByZXZJbkFFTCA9PT0gbnVsbClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gZWRnZTI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UucHJvdG90eXBlLkRlbGV0ZUZyb21BRUwgPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdHZhciBBZWxQcmV2ID0gZS5QcmV2SW5BRUw7XG5cdFx0dmFyIEFlbE5leHQgPSBlLk5leHRJbkFFTDtcblx0XHRpZiAoQWVsUHJldiA9PT0gbnVsbCAmJiBBZWxOZXh0ID09PSBudWxsICYmIGUgIT09IHRoaXMubV9BY3RpdmVFZGdlcylcblx0XHR7XG5cdFx0XHRyZXR1cm47XG5cdFx0fSAvL2FscmVhZHkgZGVsZXRlZFxuXHRcdGlmIChBZWxQcmV2ICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdEFlbFByZXYuTmV4dEluQUVMID0gQWVsTmV4dDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHRoaXMubV9BY3RpdmVFZGdlcyA9IEFlbE5leHQ7XG5cdFx0fVxuXHRcdGlmIChBZWxOZXh0ICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdEFlbE5leHQuUHJldkluQUVMID0gQWVsUHJldjtcblx0XHR9XG5cdFx0ZS5OZXh0SW5BRUwgPSBudWxsO1xuXHRcdGUuUHJldkluQUVMID0gbnVsbDtcblx0fVxuXG5cdC8vIHB1YmxpYyBDbGlwcGVyKGludCBJbml0T3B0aW9ucyA9IDApXG5cdC8qKlxuXHQgKiBAc3VwcHJlc3Mge21pc3NpbmdQcm9wZXJ0aWVzfVxuXHQgKi9cblx0Q2xpcHBlckxpYi5DbGlwcGVyID0gZnVuY3Rpb24gKEluaXRPcHRpb25zKVxuXHR7XG5cdFx0aWYgKHR5cGVvZiAoSW5pdE9wdGlvbnMpID09PSBcInVuZGVmaW5lZFwiKSBJbml0T3B0aW9ucyA9IDA7XG5cdFx0dGhpcy5tX1BvbHlPdXRzID0gbnVsbDtcblx0XHR0aGlzLm1fQ2xpcFR5cGUgPSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0SW50ZXJzZWN0aW9uO1xuXHRcdHRoaXMubV9TY2FuYmVhbSA9IG51bGw7XG5cdFx0dGhpcy5tX01heGltYSA9IG51bGw7XG5cdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gbnVsbDtcblx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBudWxsO1xuXHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0ID0gbnVsbDtcblx0XHR0aGlzLm1fSW50ZXJzZWN0Tm9kZUNvbXBhcmVyID0gbnVsbDtcblx0XHR0aGlzLm1fRXhlY3V0ZUxvY2tlZCA9IGZhbHNlO1xuXHRcdHRoaXMubV9DbGlwRmlsbFR5cGUgPSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRFdmVuT2RkO1xuXHRcdHRoaXMubV9TdWJqRmlsbFR5cGUgPSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRFdmVuT2RkO1xuXHRcdHRoaXMubV9Kb2lucyA9IG51bGw7XG5cdFx0dGhpcy5tX0dob3N0Sm9pbnMgPSBudWxsO1xuXHRcdHRoaXMubV9Vc2luZ1BvbHlUcmVlID0gZmFsc2U7XG5cdFx0dGhpcy5SZXZlcnNlU29sdXRpb24gPSBmYWxzZTtcblx0XHR0aGlzLlN0cmljdGx5U2ltcGxlID0gZmFsc2U7XG5cblx0XHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLmNhbGwodGhpcyk7XG5cblx0XHR0aGlzLm1fU2NhbmJlYW0gPSBudWxsO1xuXHRcdHRoaXMubV9NYXhpbWEgPSBudWxsO1xuXHRcdHRoaXMubV9BY3RpdmVFZGdlcyA9IG51bGw7XG5cdFx0dGhpcy5tX1NvcnRlZEVkZ2VzID0gbnVsbDtcblx0XHR0aGlzLm1fSW50ZXJzZWN0TGlzdCA9IG5ldyBBcnJheSgpO1xuXHRcdHRoaXMubV9JbnRlcnNlY3ROb2RlQ29tcGFyZXIgPSBDbGlwcGVyTGliLk15SW50ZXJzZWN0Tm9kZVNvcnQuQ29tcGFyZTtcblx0XHR0aGlzLm1fRXhlY3V0ZUxvY2tlZCA9IGZhbHNlO1xuXHRcdHRoaXMubV9Vc2luZ1BvbHlUcmVlID0gZmFsc2U7XG5cdFx0dGhpcy5tX1BvbHlPdXRzID0gbmV3IEFycmF5KCk7XG5cdFx0dGhpcy5tX0pvaW5zID0gbmV3IEFycmF5KCk7XG5cdFx0dGhpcy5tX0dob3N0Sm9pbnMgPSBuZXcgQXJyYXkoKTtcblx0XHR0aGlzLlJldmVyc2VTb2x1dGlvbiA9ICgxICYgSW5pdE9wdGlvbnMpICE9PSAwO1xuXHRcdHRoaXMuU3RyaWN0bHlTaW1wbGUgPSAoMiAmIEluaXRPcHRpb25zKSAhPT0gMDtcblx0XHR0aGlzLlByZXNlcnZlQ29sbGluZWFyID0gKDQgJiBJbml0T3B0aW9ucykgIT09IDA7XG5cdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eilcblx0XHR7XG5cdFx0XHR0aGlzLlpGaWxsRnVuY3Rpb24gPSBudWxsOyAvLyBmdW5jdGlvbiAoSW50UG9pbnQgdmVydDEsIEludFBvaW50IHZlcnQyLCByZWYgSW50UG9pbnQgaW50ZXJzZWN0UHQpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuaW9SZXZlcnNlU29sdXRpb24gPSAxO1xuXHRDbGlwcGVyTGliLkNsaXBwZXIuaW9TdHJpY3RseVNpbXBsZSA9IDI7XG5cdENsaXBwZXJMaWIuQ2xpcHBlci5pb1ByZXNlcnZlQ29sbGluZWFyID0gNDtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkNsZWFyID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdGlmICh0aGlzLm1fZWRnZXMubGVuZ3RoID09PSAwKVxuXHRcdFx0cmV0dXJuO1xuXHRcdC8vYXZvaWRzIHByb2JsZW1zIHdpdGggQ2xpcHBlckJhc2UgZGVzdHJ1Y3RvclxuXHRcdHRoaXMuRGlzcG9zZUFsbFBvbHlQdHMoKTtcblx0XHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLnByb3RvdHlwZS5DbGVhci5jYWxsKHRoaXMpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSW5zZXJ0TWF4aW1hID0gZnVuY3Rpb24gKFgpXG5cdHtcblx0XHQvL2RvdWJsZS1saW5rZWQgbGlzdDogc29ydGVkIGFzY2VuZGluZywgaWdub3JpbmcgZHVwcy5cblx0XHR2YXIgbmV3TWF4ID0gbmV3IENsaXBwZXJMaWIuTWF4aW1hKCk7XG5cdFx0bmV3TWF4LlggPSBYO1xuXHRcdGlmICh0aGlzLm1fTWF4aW1hID09PSBudWxsKVxuXHRcdHtcblx0XHRcdHRoaXMubV9NYXhpbWEgPSBuZXdNYXg7XG5cdFx0XHR0aGlzLm1fTWF4aW1hLk5leHQgPSBudWxsO1xuXHRcdFx0dGhpcy5tX01heGltYS5QcmV2ID0gbnVsbDtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoWCA8IHRoaXMubV9NYXhpbWEuWClcblx0XHR7XG5cdFx0XHRuZXdNYXguTmV4dCA9IHRoaXMubV9NYXhpbWE7XG5cdFx0XHRuZXdNYXguUHJldiA9IG51bGw7XG5cdFx0XHR0aGlzLm1fTWF4aW1hID0gbmV3TWF4O1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIG0gPSB0aGlzLm1fTWF4aW1hO1xuXHRcdFx0d2hpbGUgKG0uTmV4dCAhPT0gbnVsbCAmJiBYID49IG0uTmV4dC5YKVxuXHRcdFx0e1xuXHRcdFx0XHRtID0gbS5OZXh0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKFggPT09IG0uWClcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSAvL2llIGlnbm9yZXMgZHVwbGljYXRlcyAoJiBDRyB0byBjbGVhbiB1cCBuZXdNYXgpXG5cdFx0XHQvL2luc2VydCBuZXdNYXggYmV0d2VlbiBtIGFuZCBtLk5leHQgLi4uXG5cdFx0XHRuZXdNYXguTmV4dCA9IG0uTmV4dDtcblx0XHRcdG5ld01heC5QcmV2ID0gbTtcblx0XHRcdGlmIChtLk5leHQgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdG0uTmV4dC5QcmV2ID0gbmV3TWF4O1xuXHRcdFx0fVxuXHRcdFx0bS5OZXh0ID0gbmV3TWF4O1xuXHRcdH1cblx0fTtcblxuXHQvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5FeGVjdXRlID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHZhciBhID0gYXJndW1lbnRzLFxuXHRcdFx0YWxlbiA9IGEubGVuZ3RoLFxuXHRcdFx0aXNwb2x5dHJlZSA9IGFbMV0gaW5zdGFuY2VvZiBDbGlwcGVyTGliLlBvbHlUcmVlO1xuXHRcdGlmIChhbGVuID09PSA0ICYmICFpc3BvbHl0cmVlKSAvLyBmdW5jdGlvbiAoY2xpcFR5cGUsIHNvbHV0aW9uLCBzdWJqRmlsbFR5cGUsIGNsaXBGaWxsVHlwZSlcblx0XHR7XG5cdFx0XHR2YXIgY2xpcFR5cGUgPSBhWzBdLFxuXHRcdFx0XHRzb2x1dGlvbiA9IGFbMV0sXG5cdFx0XHRcdHN1YmpGaWxsVHlwZSA9IGFbMl0sXG5cdFx0XHRcdGNsaXBGaWxsVHlwZSA9IGFbM107XG5cdFx0XHRpZiAodGhpcy5tX0V4ZWN1dGVMb2NrZWQpXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdGlmICh0aGlzLm1fSGFzT3BlblBhdGhzKVxuXHRcdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiRXJyb3I6IFBvbHlUcmVlIHN0cnVjdCBpcyBuZWVkZWQgZm9yIG9wZW4gcGF0aCBjbGlwcGluZy5cIik7XG5cdFx0XHR0aGlzLm1fRXhlY3V0ZUxvY2tlZCA9IHRydWU7XG5cdFx0XHRDbGlwcGVyTGliLkNsZWFyKHNvbHV0aW9uKTtcblx0XHRcdHRoaXMubV9TdWJqRmlsbFR5cGUgPSBzdWJqRmlsbFR5cGU7XG5cdFx0XHR0aGlzLm1fQ2xpcEZpbGxUeXBlID0gY2xpcEZpbGxUeXBlO1xuXHRcdFx0dGhpcy5tX0NsaXBUeXBlID0gY2xpcFR5cGU7XG5cdFx0XHR0aGlzLm1fVXNpbmdQb2x5VHJlZSA9IGZhbHNlO1xuXHRcdFx0dHJ5XG5cdFx0XHR7XG5cdFx0XHRcdHZhciBzdWNjZWVkZWQgPSB0aGlzLkV4ZWN1dGVJbnRlcm5hbCgpO1xuXHRcdFx0XHQvL2J1aWxkIHRoZSByZXR1cm4gcG9seWdvbnMgLi4uXG5cdFx0XHRcdGlmIChzdWNjZWVkZWQpIHRoaXMuQnVpbGRSZXN1bHQoc29sdXRpb24pO1xuXHRcdFx0fVxuXHRcdFx0ZmluYWxseVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLkRpc3Bvc2VBbGxQb2x5UHRzKCk7XG5cdFx0XHRcdHRoaXMubV9FeGVjdXRlTG9ja2VkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gc3VjY2VlZGVkO1xuXHRcdH1cblx0XHRlbHNlIGlmIChhbGVuID09PSA0ICYmIGlzcG9seXRyZWUpIC8vIGZ1bmN0aW9uIChjbGlwVHlwZSwgcG9seXRyZWUsIHN1YmpGaWxsVHlwZSwgY2xpcEZpbGxUeXBlKVxuXHRcdHtcblx0XHRcdHZhciBjbGlwVHlwZSA9IGFbMF0sXG5cdFx0XHRcdHBvbHl0cmVlID0gYVsxXSxcblx0XHRcdFx0c3ViakZpbGxUeXBlID0gYVsyXSxcblx0XHRcdFx0Y2xpcEZpbGxUeXBlID0gYVszXTtcblx0XHRcdGlmICh0aGlzLm1fRXhlY3V0ZUxvY2tlZClcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0dGhpcy5tX0V4ZWN1dGVMb2NrZWQgPSB0cnVlO1xuXHRcdFx0dGhpcy5tX1N1YmpGaWxsVHlwZSA9IHN1YmpGaWxsVHlwZTtcblx0XHRcdHRoaXMubV9DbGlwRmlsbFR5cGUgPSBjbGlwRmlsbFR5cGU7XG5cdFx0XHR0aGlzLm1fQ2xpcFR5cGUgPSBjbGlwVHlwZTtcblx0XHRcdHRoaXMubV9Vc2luZ1BvbHlUcmVlID0gdHJ1ZTtcblx0XHRcdHRyeVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgc3VjY2VlZGVkID0gdGhpcy5FeGVjdXRlSW50ZXJuYWwoKTtcblx0XHRcdFx0Ly9idWlsZCB0aGUgcmV0dXJuIHBvbHlnb25zIC4uLlxuXHRcdFx0XHRpZiAoc3VjY2VlZGVkKSB0aGlzLkJ1aWxkUmVzdWx0Mihwb2x5dHJlZSk7XG5cdFx0XHR9XG5cdFx0XHRmaW5hbGx5XG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuRGlzcG9zZUFsbFBvbHlQdHMoKTtcblx0XHRcdFx0dGhpcy5tX0V4ZWN1dGVMb2NrZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBzdWNjZWVkZWQ7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGFsZW4gPT09IDIgJiYgIWlzcG9seXRyZWUpIC8vIGZ1bmN0aW9uIChjbGlwVHlwZSwgc29sdXRpb24pXG5cdFx0e1xuXHRcdFx0dmFyIGNsaXBUeXBlID0gYVswXSxcblx0XHRcdFx0c29sdXRpb24gPSBhWzFdO1xuXHRcdFx0cmV0dXJuIHRoaXMuRXhlY3V0ZShjbGlwVHlwZSwgc29sdXRpb24sIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChhbGVuID09PSAyICYmIGlzcG9seXRyZWUpIC8vIGZ1bmN0aW9uIChjbGlwVHlwZSwgcG9seXRyZWUpXG5cdFx0e1xuXHRcdFx0dmFyIGNsaXBUeXBlID0gYVswXSxcblx0XHRcdFx0cG9seXRyZWUgPSBhWzFdO1xuXHRcdFx0cmV0dXJuIHRoaXMuRXhlY3V0ZShjbGlwVHlwZSwgcG9seXRyZWUsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkZpeEhvbGVMaW5rYWdlID0gZnVuY3Rpb24gKG91dFJlYylcblx0e1xuXHRcdC8vc2tpcCBpZiBhbiBvdXRlcm1vc3QgcG9seWdvbiBvclxuXHRcdC8vYWxyZWFkeSBhbHJlYWR5IHBvaW50cyB0byB0aGUgY29ycmVjdCBGaXJzdExlZnQgLi4uXG5cdFx0aWYgKG91dFJlYy5GaXJzdExlZnQgPT09IG51bGwgfHwgKG91dFJlYy5Jc0hvbGUgIT09IG91dFJlYy5GaXJzdExlZnQuSXNIb2xlICYmIG91dFJlYy5GaXJzdExlZnQuUHRzICE9PSBudWxsKSlcblx0XHRcdHJldHVybjtcblx0XHR2YXIgb3JmbCA9IG91dFJlYy5GaXJzdExlZnQ7XG5cdFx0d2hpbGUgKG9yZmwgIT09IG51bGwgJiYgKChvcmZsLklzSG9sZSA9PT0gb3V0UmVjLklzSG9sZSkgfHwgb3JmbC5QdHMgPT09IG51bGwpKVxuXHRcdFx0b3JmbCA9IG9yZmwuRmlyc3RMZWZ0O1xuXHRcdG91dFJlYy5GaXJzdExlZnQgPSBvcmZsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRXhlY3V0ZUludGVybmFsID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHRyeVxuXHRcdHtcblx0XHRcdHRoaXMuUmVzZXQoKTtcblx0XHRcdHRoaXMubV9Tb3J0ZWRFZGdlcyA9IG51bGw7XG5cdFx0XHR0aGlzLm1fTWF4aW1hID0gbnVsbDtcblxuXHRcdFx0dmFyIGJvdFkgPSB7fSxcblx0XHRcdFx0dG9wWSA9IHt9O1xuXG5cdFx0XHRpZiAoIXRoaXMuUG9wU2NhbmJlYW0oYm90WSkpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHRoaXMuSW5zZXJ0TG9jYWxNaW5pbWFJbnRvQUVMKGJvdFkudik7XG5cdFx0XHR3aGlsZSAodGhpcy5Qb3BTY2FuYmVhbSh0b3BZKSB8fCB0aGlzLkxvY2FsTWluaW1hUGVuZGluZygpKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLlByb2Nlc3NIb3Jpem9udGFscygpO1xuXHRcdFx0XHR0aGlzLm1fR2hvc3RKb2lucy5sZW5ndGggPSAwO1xuXHRcdFx0XHRpZiAoIXRoaXMuUHJvY2Vzc0ludGVyc2VjdGlvbnModG9wWS52KSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLlByb2Nlc3NFZGdlc0F0VG9wT2ZTY2FuYmVhbSh0b3BZLnYpO1xuXHRcdFx0XHRib3RZLnYgPSB0b3BZLnY7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0TG9jYWxNaW5pbWFJbnRvQUVMKGJvdFkudik7XG5cdFx0XHR9XG5cblx0XHRcdC8vZml4IG9yaWVudGF0aW9ucyAuLi5cblx0XHRcdHZhciBvdXRSZWMsIGksIGlsZW47XG5cdFx0XHQvL2ZpeCBvcmllbnRhdGlvbnMgLi4uXG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHRcdHtcblx0XHRcdFx0b3V0UmVjID0gdGhpcy5tX1BvbHlPdXRzW2ldO1xuXHRcdFx0XHRpZiAob3V0UmVjLlB0cyA9PT0gbnVsbCB8fCBvdXRSZWMuSXNPcGVuKSBjb250aW51ZTtcblx0XHRcdFx0aWYgKChvdXRSZWMuSXNIb2xlIF4gdGhpcy5SZXZlcnNlU29sdXRpb24pID09ICh0aGlzLkFyZWEkMShvdXRSZWMpID4gMCkpXG5cdFx0XHRcdFx0dGhpcy5SZXZlcnNlUG9seVB0TGlua3Mob3V0UmVjLlB0cyk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuSm9pbkNvbW1vbkVkZ2VzKCk7XG5cblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSB0aGlzLm1fUG9seU91dHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdFx0e1xuXHRcdFx0XHRvdXRSZWMgPSB0aGlzLm1fUG9seU91dHNbaV07XG5cdFx0XHRcdGlmIChvdXRSZWMuUHRzID09PSBudWxsKVxuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRlbHNlIGlmIChvdXRSZWMuSXNPcGVuKVxuXHRcdFx0XHRcdHRoaXMuRml4dXBPdXRQb2x5bGluZShvdXRSZWMpO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0dGhpcy5GaXh1cE91dFBvbHlnb24ob3V0UmVjKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuU3RyaWN0bHlTaW1wbGUpIHRoaXMuRG9TaW1wbGVQb2x5Z29ucygpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdC8vY2F0Y2ggeyByZXR1cm4gZmFsc2U7IH1cblx0XHRmaW5hbGx5XG5cdFx0e1xuXHRcdFx0dGhpcy5tX0pvaW5zLmxlbmd0aCA9IDA7XG5cdFx0XHR0aGlzLm1fR2hvc3RKb2lucy5sZW5ndGggPSAwO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkRpc3Bvc2VBbGxQb2x5UHRzID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSlcblx0XHRcdHRoaXMuRGlzcG9zZU91dFJlYyhpKTtcblx0XHRDbGlwcGVyTGliLkNsZWFyKHRoaXMubV9Qb2x5T3V0cyk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5BZGRKb2luID0gZnVuY3Rpb24gKE9wMSwgT3AyLCBPZmZQdClcblx0e1xuXHRcdHZhciBqID0gbmV3IENsaXBwZXJMaWIuSm9pbigpO1xuXHRcdGouT3V0UHQxID0gT3AxO1xuXHRcdGouT3V0UHQyID0gT3AyO1xuXHRcdC8vai5PZmZQdCA9IE9mZlB0O1xuXHRcdGouT2ZmUHQuWCA9IE9mZlB0Llg7XG5cdFx0ai5PZmZQdC5ZID0gT2ZmUHQuWTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBqLk9mZlB0LlogPSBPZmZQdC5aO1xuXHRcdHRoaXMubV9Kb2lucy5wdXNoKGopO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuQWRkR2hvc3RKb2luID0gZnVuY3Rpb24gKE9wLCBPZmZQdClcblx0e1xuXHRcdHZhciBqID0gbmV3IENsaXBwZXJMaWIuSm9pbigpO1xuXHRcdGouT3V0UHQxID0gT3A7XG5cdFx0Ly9qLk9mZlB0ID0gT2ZmUHQ7XG5cdFx0ai5PZmZQdC5YID0gT2ZmUHQuWDtcblx0XHRqLk9mZlB0LlkgPSBPZmZQdC5ZO1xuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIGouT2ZmUHQuWiA9IE9mZlB0Llo7XG5cdFx0dGhpcy5tX0dob3N0Sm9pbnMucHVzaChqKTtcblx0fTtcblxuXHQvL2lmIChDbGlwcGVyTGliLnVzZV94eXopXG5cdC8ve1xuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlNldFogPSBmdW5jdGlvbiAocHQsIGUxLCBlMilcblx0e1xuXHRcdGlmICh0aGlzLlpGaWxsRnVuY3Rpb24gIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0aWYgKHB0LlogIT09IDAgfHwgdGhpcy5aRmlsbEZ1bmN0aW9uID09PSBudWxsKSByZXR1cm47XG5cdFx0XHRlbHNlIGlmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHB0LCBlMS5Cb3QpKSBwdC5aID0gZTEuQm90Llo7XG5cdFx0XHRlbHNlIGlmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHB0LCBlMS5Ub3ApKSBwdC5aID0gZTEuVG9wLlo7XG5cdFx0XHRlbHNlIGlmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHB0LCBlMi5Cb3QpKSBwdC5aID0gZTIuQm90Llo7XG5cdFx0XHRlbHNlIGlmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHB0LCBlMi5Ub3ApKSBwdC5aID0gZTIuVG9wLlo7XG5cdFx0XHRlbHNlIHRoaXMuWkZpbGxGdW5jdGlvbihlMS5Cb3QsIGUxLlRvcCwgZTIuQm90LCBlMi5Ub3AsIHB0KTtcblx0XHR9XG5cdH07XG5cdC8vfVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSW5zZXJ0TG9jYWxNaW5pbWFJbnRvQUVMID0gZnVuY3Rpb24gKGJvdFkpXG5cdHtcblx0XHR2YXIgbG0gPSB7fTtcblxuXHRcdHZhciBsYjtcblx0XHR2YXIgcmI7XG5cdFx0d2hpbGUgKHRoaXMuUG9wTG9jYWxNaW5pbWEoYm90WSwgbG0pKVxuXHRcdHtcblx0XHRcdGxiID0gbG0udi5MZWZ0Qm91bmQ7XG5cdFx0XHRyYiA9IGxtLnYuUmlnaHRCb3VuZDtcblxuXHRcdFx0dmFyIE9wMSA9IG51bGw7XG5cdFx0XHRpZiAobGIgPT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0RWRnZUludG9BRUwocmIsIG51bGwpO1xuXHRcdFx0XHR0aGlzLlNldFdpbmRpbmdDb3VudChyYik7XG5cdFx0XHRcdGlmICh0aGlzLklzQ29udHJpYnV0aW5nKHJiKSlcblx0XHRcdFx0XHRPcDEgPSB0aGlzLkFkZE91dFB0KHJiLCByYi5Cb3QpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAocmIgPT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0RWRnZUludG9BRUwobGIsIG51bGwpO1xuXHRcdFx0XHR0aGlzLlNldFdpbmRpbmdDb3VudChsYik7XG5cdFx0XHRcdGlmICh0aGlzLklzQ29udHJpYnV0aW5nKGxiKSlcblx0XHRcdFx0XHRPcDEgPSB0aGlzLkFkZE91dFB0KGxiLCBsYi5Cb3QpO1xuXHRcdFx0XHR0aGlzLkluc2VydFNjYW5iZWFtKGxiLlRvcC5ZKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5JbnNlcnRFZGdlSW50b0FFTChsYiwgbnVsbCk7XG5cdFx0XHRcdHRoaXMuSW5zZXJ0RWRnZUludG9BRUwocmIsIGxiKTtcblx0XHRcdFx0dGhpcy5TZXRXaW5kaW5nQ291bnQobGIpO1xuXHRcdFx0XHRyYi5XaW5kQ250ID0gbGIuV2luZENudDtcblx0XHRcdFx0cmIuV2luZENudDIgPSBsYi5XaW5kQ250Mjtcblx0XHRcdFx0aWYgKHRoaXMuSXNDb250cmlidXRpbmcobGIpKVxuXHRcdFx0XHRcdE9wMSA9IHRoaXMuQWRkTG9jYWxNaW5Qb2x5KGxiLCByYiwgbGIuQm90KTtcblx0XHRcdFx0dGhpcy5JbnNlcnRTY2FuYmVhbShsYi5Ub3AuWSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAocmIgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbChyYikpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAocmIuTmV4dEluTE1MICE9PSBudWxsKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHRoaXMuSW5zZXJ0U2NhbmJlYW0ocmIuTmV4dEluTE1MLlRvcC5ZKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5BZGRFZGdlVG9TRUwocmIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHRoaXMuSW5zZXJ0U2NhbmJlYW0ocmIuVG9wLlkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAobGIgPT09IG51bGwgfHwgcmIgPT09IG51bGwpIGNvbnRpbnVlO1xuXHRcdFx0Ly9pZiBvdXRwdXQgcG9seWdvbnMgc2hhcmUgYW4gRWRnZSB3aXRoIGEgaG9yaXpvbnRhbCByYiwgdGhleSdsbCBuZWVkIGpvaW5pbmcgbGF0ZXIgLi4uXG5cdFx0XHRpZiAoT3AxICE9PSBudWxsICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuSXNIb3Jpem9udGFsKHJiKSAmJiB0aGlzLm1fR2hvc3RKb2lucy5sZW5ndGggPiAwICYmIHJiLldpbmREZWx0YSAhPT0gMClcblx0XHRcdHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fR2hvc3RKb2lucy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvL2lmIHRoZSBob3Jpem9udGFsIFJiIGFuZCBhICdnaG9zdCcgaG9yaXpvbnRhbCBvdmVybGFwLCB0aGVuIGNvbnZlcnRcblx0XHRcdFx0XHQvL3RoZSAnZ2hvc3QnIGpvaW4gdG8gYSByZWFsIGpvaW4gcmVhZHkgZm9yIGxhdGVyIC4uLlxuXHRcdFx0XHRcdHZhciBqID0gdGhpcy5tX0dob3N0Sm9pbnNbaV07XG5cblx0XHRcdFx0XHRpZiAodGhpcy5Ib3J6U2VnbWVudHNPdmVybGFwKGouT3V0UHQxLlB0LlgsIGouT2ZmUHQuWCwgcmIuQm90LlgsIHJiLlRvcC5YKSlcblx0XHRcdFx0XHRcdHRoaXMuQWRkSm9pbihqLk91dFB0MSwgT3AxLCBqLk9mZlB0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAobGIuT3V0SWR4ID49IDAgJiYgbGIuUHJldkluQUVMICE9PSBudWxsICYmXG5cdFx0XHRcdGxiLlByZXZJbkFFTC5DdXJyLlggPT09IGxiLkJvdC5YICYmXG5cdFx0XHRcdGxiLlByZXZJbkFFTC5PdXRJZHggPj0gMCAmJlxuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNShsYi5QcmV2SW5BRUwuQ3VyciwgbGIuUHJldkluQUVMLlRvcCwgbGIuQ3VyciwgbGIuVG9wLCB0aGlzLm1fVXNlRnVsbFJhbmdlKSAmJlxuXHRcdFx0XHRsYi5XaW5kRGVsdGEgIT09IDAgJiYgbGIuUHJldkluQUVMLldpbmREZWx0YSAhPT0gMClcblx0XHRcdHtcblx0XHRcdFx0dmFyIE9wMiA9IHRoaXMuQWRkT3V0UHQobGIuUHJldkluQUVMLCBsYi5Cb3QpO1xuXHRcdFx0XHR0aGlzLkFkZEpvaW4oT3AxLCBPcDIsIGxiLlRvcCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAobGIuTmV4dEluQUVMICE9PSByYilcblx0XHRcdHtcblx0XHRcdFx0aWYgKHJiLk91dElkeCA+PSAwICYmIHJiLlByZXZJbkFFTC5PdXRJZHggPj0gMCAmJlxuXHRcdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw1KHJiLlByZXZJbkFFTC5DdXJyLCByYi5QcmV2SW5BRUwuVG9wLCByYi5DdXJyLCByYi5Ub3AsIHRoaXMubV9Vc2VGdWxsUmFuZ2UpICYmXG5cdFx0XHRcdFx0cmIuV2luZERlbHRhICE9PSAwICYmIHJiLlByZXZJbkFFTC5XaW5kRGVsdGEgIT09IDApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgT3AyID0gdGhpcy5BZGRPdXRQdChyYi5QcmV2SW5BRUwsIHJiLkJvdCk7XG5cdFx0XHRcdFx0dGhpcy5BZGRKb2luKE9wMSwgT3AyLCByYi5Ub3ApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBlID0gbGIuTmV4dEluQUVMO1xuXHRcdFx0XHRpZiAoZSAhPT0gbnVsbClcblx0XHRcdFx0XHR3aGlsZSAoZSAhPT0gcmIpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Ly9uYjogRm9yIGNhbGN1bGF0aW5nIHdpbmRpbmcgY291bnRzIGV0YywgSW50ZXJzZWN0RWRnZXMoKSBhc3N1bWVzXG5cdFx0XHRcdFx0XHQvL3RoYXQgcGFyYW0xIHdpbGwgYmUgdG8gdGhlIHJpZ2h0IG9mIHBhcmFtMiBBQk9WRSB0aGUgaW50ZXJzZWN0aW9uIC4uLlxuXHRcdFx0XHRcdFx0dGhpcy5JbnRlcnNlY3RFZGdlcyhyYiwgZSwgbGIuQ3Vycik7XG5cdFx0XHRcdFx0XHQvL29yZGVyIGltcG9ydGFudCBoZXJlXG5cdFx0XHRcdFx0XHRlID0gZS5OZXh0SW5BRUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkluc2VydEVkZ2VJbnRvQUVMID0gZnVuY3Rpb24gKGVkZ2UsIHN0YXJ0RWRnZSlcblx0e1xuXHRcdGlmICh0aGlzLm1fQWN0aXZlRWRnZXMgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0ZWRnZS5QcmV2SW5BRUwgPSBudWxsO1xuXHRcdFx0ZWRnZS5OZXh0SW5BRUwgPSBudWxsO1xuXHRcdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gZWRnZTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoc3RhcnRFZGdlID09PSBudWxsICYmIHRoaXMuRTJJbnNlcnRzQmVmb3JlRTEodGhpcy5tX0FjdGl2ZUVkZ2VzLCBlZGdlKSlcblx0XHR7XG5cdFx0XHRlZGdlLlByZXZJbkFFTCA9IG51bGw7XG5cdFx0XHRlZGdlLk5leHRJbkFFTCA9IHRoaXMubV9BY3RpdmVFZGdlcztcblx0XHRcdHRoaXMubV9BY3RpdmVFZGdlcy5QcmV2SW5BRUwgPSBlZGdlO1xuXHRcdFx0dGhpcy5tX0FjdGl2ZUVkZ2VzID0gZWRnZTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmIChzdGFydEVkZ2UgPT09IG51bGwpXG5cdFx0XHRcdHN0YXJ0RWRnZSA9IHRoaXMubV9BY3RpdmVFZGdlcztcblx0XHRcdHdoaWxlIChzdGFydEVkZ2UuTmV4dEluQUVMICE9PSBudWxsICYmICF0aGlzLkUySW5zZXJ0c0JlZm9yZUUxKHN0YXJ0RWRnZS5OZXh0SW5BRUwsIGVkZ2UpKVxuXHRcdFx0XHRzdGFydEVkZ2UgPSBzdGFydEVkZ2UuTmV4dEluQUVMO1xuXHRcdFx0ZWRnZS5OZXh0SW5BRUwgPSBzdGFydEVkZ2UuTmV4dEluQUVMO1xuXHRcdFx0aWYgKHN0YXJ0RWRnZS5OZXh0SW5BRUwgIT09IG51bGwpXG5cdFx0XHRcdHN0YXJ0RWRnZS5OZXh0SW5BRUwuUHJldkluQUVMID0gZWRnZTtcblx0XHRcdGVkZ2UuUHJldkluQUVMID0gc3RhcnRFZGdlO1xuXHRcdFx0c3RhcnRFZGdlLk5leHRJbkFFTCA9IGVkZ2U7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRTJJbnNlcnRzQmVmb3JlRTEgPSBmdW5jdGlvbiAoZTEsIGUyKVxuXHR7XG5cdFx0aWYgKGUyLkN1cnIuWCA9PT0gZTEuQ3Vyci5YKVxuXHRcdHtcblx0XHRcdGlmIChlMi5Ub3AuWSA+IGUxLlRvcC5ZKVxuXHRcdFx0XHRyZXR1cm4gZTIuVG9wLlggPCBDbGlwcGVyTGliLkNsaXBwZXIuVG9wWChlMSwgZTIuVG9wLlkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gZTEuVG9wLlggPiBDbGlwcGVyTGliLkNsaXBwZXIuVG9wWChlMiwgZTEuVG9wLlkpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gZTIuQ3Vyci5YIDwgZTEuQ3Vyci5YO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSXNFdmVuT2RkRmlsbFR5cGUgPSBmdW5jdGlvbiAoZWRnZSlcblx0e1xuXHRcdGlmIChlZGdlLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0KVxuXHRcdFx0cmV0dXJuIHRoaXMubV9TdWJqRmlsbFR5cGUgPT09IENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHRoaXMubV9DbGlwRmlsbFR5cGUgPT09IENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Jc0V2ZW5PZGRBbHRGaWxsVHlwZSA9IGZ1bmN0aW9uIChlZGdlKVxuXHR7XG5cdFx0aWYgKGVkZ2UuUG9seVR5cCA9PT0gQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QpXG5cdFx0XHRyZXR1cm4gdGhpcy5tX0NsaXBGaWxsVHlwZSA9PT0gQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gdGhpcy5tX1N1YmpGaWxsVHlwZSA9PT0gQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLklzQ29udHJpYnV0aW5nID0gZnVuY3Rpb24gKGVkZ2UpXG5cdHtcblx0XHR2YXIgcGZ0LCBwZnQyO1xuXHRcdGlmIChlZGdlLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0KVxuXHRcdHtcblx0XHRcdHBmdCA9IHRoaXMubV9TdWJqRmlsbFR5cGU7XG5cdFx0XHRwZnQyID0gdGhpcy5tX0NsaXBGaWxsVHlwZTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHBmdCA9IHRoaXMubV9DbGlwRmlsbFR5cGU7XG5cdFx0XHRwZnQyID0gdGhpcy5tX1N1YmpGaWxsVHlwZTtcblx0XHR9XG5cdFx0c3dpdGNoIChwZnQpXG5cdFx0e1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDpcblx0XHRcdGlmIChlZGdlLldpbmREZWx0YSA9PT0gMCAmJiBlZGdlLldpbmRDbnQgIT09IDEpXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0Tm9uWmVybzpcblx0XHRcdGlmIChNYXRoLmFicyhlZGdlLldpbmRDbnQpICE9PSAxKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlOlxuXHRcdFx0aWYgKGVkZ2UuV2luZENudCAhPT0gMSlcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGlmIChlZGdlLldpbmRDbnQgIT09IC0xKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0c3dpdGNoICh0aGlzLm1fQ2xpcFR5cGUpXG5cdFx0e1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5DbGlwVHlwZS5jdEludGVyc2VjdGlvbjpcblx0XHRcdHN3aXRjaCAocGZ0Milcblx0XHRcdHtcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0RXZlbk9kZDpcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0Tm9uWmVybzpcblx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyICE9PSAwKTtcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0UG9zaXRpdmU6XG5cdFx0XHRcdHJldHVybiAoZWRnZS5XaW5kQ250MiA+IDApO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyIDwgMCk7XG5cdFx0XHR9XG5cdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb246XG5cdFx0XHRzd2l0Y2ggKHBmdDIpXG5cdFx0XHR7XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ6XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm86XG5cdFx0XHRcdHJldHVybiAoZWRnZS5XaW5kQ250MiA9PT0gMCk7XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlOlxuXHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgPD0gMCk7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgPj0gMCk7XG5cdFx0XHR9XG5cdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0RGlmZmVyZW5jZTpcblx0XHRcdGlmIChlZGdlLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0KVxuXHRcdFx0XHRzd2l0Y2ggKHBmdDIpXG5cdFx0XHRcdHtcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRFdmVuT2RkOlxuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm86XG5cdFx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyID09PSAwKTtcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZTpcblx0XHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgPD0gMCk7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyID49IDApO1xuXHRcdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHN3aXRjaCAocGZ0Milcblx0XHRcdFx0e1xuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdEV2ZW5PZGQ6XG5cdFx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0Tm9uWmVybzpcblx0XHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgIT09IDApO1xuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlOlxuXHRcdFx0XHRcdHJldHVybiAoZWRnZS5XaW5kQ250MiA+IDApO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHJldHVybiAoZWRnZS5XaW5kQ250MiA8IDApO1xuXHRcdFx0XHR9XG5cdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0WG9yOlxuXHRcdFx0aWYgKGVkZ2UuV2luZERlbHRhID09PSAwKVxuXHRcdFx0XHRzd2l0Y2ggKHBmdDIpXG5cdFx0XHRcdHtcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRFdmVuT2RkOlxuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm86XG5cdFx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyID09PSAwKTtcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZTpcblx0XHRcdFx0XHRyZXR1cm4gKGVkZ2UuV2luZENudDIgPD0gMCk7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmV0dXJuIChlZGdlLldpbmRDbnQyID49IDApO1xuXHRcdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlNldFdpbmRpbmdDb3VudCA9IGZ1bmN0aW9uIChlZGdlKVxuXHR7XG5cdFx0dmFyIGUgPSBlZGdlLlByZXZJbkFFTDtcblx0XHQvL2ZpbmQgdGhlIGVkZ2Ugb2YgdGhlIHNhbWUgcG9seXR5cGUgdGhhdCBpbW1lZGlhdGVseSBwcmVjZWVkcyAnZWRnZScgaW4gQUVMXG5cdFx0d2hpbGUgKGUgIT09IG51bGwgJiYgKChlLlBvbHlUeXAgIT09IGVkZ2UuUG9seVR5cCkgfHwgKGUuV2luZERlbHRhID09PSAwKSkpXG5cdFx0XHRlID0gZS5QcmV2SW5BRUw7XG5cdFx0aWYgKGUgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dmFyIHBmdCA9IChlZGdlLlBvbHlUeXAgPT09IENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0ID8gdGhpcy5tX1N1YmpGaWxsVHlwZSA6IHRoaXMubV9DbGlwRmlsbFR5cGUpO1xuXHRcdFx0aWYgKGVkZ2UuV2luZERlbHRhID09PSAwKVxuXHRcdFx0e1xuXHRcdFx0XHRlZGdlLldpbmRDbnQgPSAocGZ0ID09PSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROZWdhdGl2ZSA/IC0xIDogMSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdGVkZ2UuV2luZENudCA9IGVkZ2UuV2luZERlbHRhO1xuXHRcdFx0fVxuXHRcdFx0ZWRnZS5XaW5kQ250MiA9IDA7XG5cdFx0XHRlID0gdGhpcy5tX0FjdGl2ZUVkZ2VzO1xuXHRcdFx0Ly9pZSBnZXQgcmVhZHkgdG8gY2FsYyBXaW5kQ250MlxuXHRcdH1cblx0XHRlbHNlIGlmIChlZGdlLldpbmREZWx0YSA9PT0gMCAmJiB0aGlzLm1fQ2xpcFR5cGUgIT09IENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbilcblx0XHR7XG5cdFx0XHRlZGdlLldpbmRDbnQgPSAxO1xuXHRcdFx0ZWRnZS5XaW5kQ250MiA9IGUuV2luZENudDI7XG5cdFx0XHRlID0gZS5OZXh0SW5BRUw7XG5cdFx0XHQvL2llIGdldCByZWFkeSB0byBjYWxjIFdpbmRDbnQyXG5cdFx0fVxuXHRcdGVsc2UgaWYgKHRoaXMuSXNFdmVuT2RkRmlsbFR5cGUoZWRnZSkpXG5cdFx0e1xuXHRcdFx0Ly9FdmVuT2RkIGZpbGxpbmcgLi4uXG5cdFx0XHRpZiAoZWRnZS5XaW5kRGVsdGEgPT09IDApXG5cdFx0XHR7XG5cdFx0XHRcdC8vYXJlIHdlIGluc2lkZSBhIHN1YmogcG9seWdvbiAuLi5cblx0XHRcdFx0dmFyIEluc2lkZSA9IHRydWU7XG5cdFx0XHRcdHZhciBlMiA9IGUuUHJldkluQUVMO1xuXHRcdFx0XHR3aGlsZSAoZTIgIT09IG51bGwpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoZTIuUG9seVR5cCA9PT0gZS5Qb2x5VHlwICYmIGUyLldpbmREZWx0YSAhPT0gMClcblx0XHRcdFx0XHRcdEluc2lkZSA9ICFJbnNpZGU7XG5cdFx0XHRcdFx0ZTIgPSBlMi5QcmV2SW5BRUw7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWRnZS5XaW5kQ250ID0gKEluc2lkZSA/IDAgOiAxKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0ZWRnZS5XaW5kQ250ID0gZWRnZS5XaW5kRGVsdGE7XG5cdFx0XHR9XG5cdFx0XHRlZGdlLldpbmRDbnQyID0gZS5XaW5kQ250Mjtcblx0XHRcdGUgPSBlLk5leHRJbkFFTDtcblx0XHRcdC8vaWUgZ2V0IHJlYWR5IHRvIGNhbGMgV2luZENudDJcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdC8vbm9uWmVybywgUG9zaXRpdmUgb3IgTmVnYXRpdmUgZmlsbGluZyAuLi5cblx0XHRcdGlmIChlLldpbmRDbnQgKiBlLldpbmREZWx0YSA8IDApXG5cdFx0XHR7XG5cdFx0XHRcdC8vcHJldiBlZGdlIGlzICdkZWNyZWFzaW5nJyBXaW5kQ291bnQgKFdDKSB0b3dhcmQgemVyb1xuXHRcdFx0XHQvL3NvIHdlJ3JlIG91dHNpZGUgdGhlIHByZXZpb3VzIHBvbHlnb24gLi4uXG5cdFx0XHRcdGlmIChNYXRoLmFicyhlLldpbmRDbnQpID4gMSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vb3V0c2lkZSBwcmV2IHBvbHkgYnV0IHN0aWxsIGluc2lkZSBhbm90aGVyLlxuXHRcdFx0XHRcdC8vd2hlbiByZXZlcnNpbmcgZGlyZWN0aW9uIG9mIHByZXYgcG9seSB1c2UgdGhlIHNhbWUgV0Ncblx0XHRcdFx0XHRpZiAoZS5XaW5kRGVsdGEgKiBlZGdlLldpbmREZWx0YSA8IDApXG5cdFx0XHRcdFx0XHRlZGdlLldpbmRDbnQgPSBlLldpbmRDbnQ7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0ZWRnZS5XaW5kQ250ID0gZS5XaW5kQ250ICsgZWRnZS5XaW5kRGVsdGE7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGVkZ2UuV2luZENudCA9IChlZGdlLldpbmREZWx0YSA9PT0gMCA/IDEgOiBlZGdlLldpbmREZWx0YSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdC8vcHJldiBlZGdlIGlzICdpbmNyZWFzaW5nJyBXaW5kQ291bnQgKFdDKSBhd2F5IGZyb20gemVyb1xuXHRcdFx0XHQvL3NvIHdlJ3JlIGluc2lkZSB0aGUgcHJldmlvdXMgcG9seWdvbiAuLi5cblx0XHRcdFx0aWYgKGVkZ2UuV2luZERlbHRhID09PSAwKVxuXHRcdFx0XHRcdGVkZ2UuV2luZENudCA9IChlLldpbmRDbnQgPCAwID8gZS5XaW5kQ250IC0gMSA6IGUuV2luZENudCArIDEpO1xuXHRcdFx0XHRlbHNlIGlmIChlLldpbmREZWx0YSAqIGVkZ2UuV2luZERlbHRhIDwgMClcblx0XHRcdFx0XHRlZGdlLldpbmRDbnQgPSBlLldpbmRDbnQ7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRlZGdlLldpbmRDbnQgPSBlLldpbmRDbnQgKyBlZGdlLldpbmREZWx0YTtcblx0XHRcdH1cblx0XHRcdGVkZ2UuV2luZENudDIgPSBlLldpbmRDbnQyO1xuXHRcdFx0ZSA9IGUuTmV4dEluQUVMO1xuXHRcdFx0Ly9pZSBnZXQgcmVhZHkgdG8gY2FsYyBXaW5kQ250MlxuXHRcdH1cblx0XHQvL3VwZGF0ZSBXaW5kQ250MiAuLi5cblx0XHRpZiAodGhpcy5Jc0V2ZW5PZGRBbHRGaWxsVHlwZShlZGdlKSlcblx0XHR7XG5cdFx0XHQvL0V2ZW5PZGQgZmlsbGluZyAuLi5cblx0XHRcdHdoaWxlIChlICE9PSBlZGdlKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoZS5XaW5kRGVsdGEgIT09IDApXG5cdFx0XHRcdFx0ZWRnZS5XaW5kQ250MiA9IChlZGdlLldpbmRDbnQyID09PSAwID8gMSA6IDApO1xuXHRcdFx0XHRlID0gZS5OZXh0SW5BRUw7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHQvL25vblplcm8sIFBvc2l0aXZlIG9yIE5lZ2F0aXZlIGZpbGxpbmcgLi4uXG5cdFx0XHR3aGlsZSAoZSAhPT0gZWRnZSlcblx0XHRcdHtcblx0XHRcdFx0ZWRnZS5XaW5kQ250MiArPSBlLldpbmREZWx0YTtcblx0XHRcdFx0ZSA9IGUuTmV4dEluQUVMO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkFkZEVkZ2VUb1NFTCA9IGZ1bmN0aW9uIChlZGdlKVxuXHR7XG5cdFx0Ly9TRUwgcG9pbnRlcnMgaW4gUEVkZ2UgYXJlIHVzZSB0byBidWlsZCB0cmFuc2llbnQgbGlzdHMgb2YgaG9yaXpvbnRhbCBlZGdlcy5cblx0XHQvL0hvd2V2ZXIsIHNpbmNlIHdlIGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgcHJvY2Vzc2luZyBvcmRlciwgYWxsIGFkZGl0aW9uc1xuXHRcdC8vYXJlIG1hZGUgdG8gdGhlIGZyb250IG9mIHRoZSBsaXN0IC4uLlxuXHRcdGlmICh0aGlzLm1fU29ydGVkRWRnZXMgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX1NvcnRlZEVkZ2VzID0gZWRnZTtcblx0XHRcdGVkZ2UuUHJldkluU0VMID0gbnVsbDtcblx0XHRcdGVkZ2UuTmV4dEluU0VMID0gbnVsbDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGVkZ2UuTmV4dEluU0VMID0gdGhpcy5tX1NvcnRlZEVkZ2VzO1xuXHRcdFx0ZWRnZS5QcmV2SW5TRUwgPSBudWxsO1xuXHRcdFx0dGhpcy5tX1NvcnRlZEVkZ2VzLlByZXZJblNFTCA9IGVkZ2U7XG5cdFx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBlZGdlO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlBvcEVkZ2VGcm9tU0VMID0gZnVuY3Rpb24gKGUpXG5cdHtcblx0XHQvL1BvcCBlZGdlIGZyb20gZnJvbnQgb2YgU0VMIChpZSBTRUwgaXMgYSBGSUxPIGxpc3QpXG5cdFx0ZS52ID0gdGhpcy5tX1NvcnRlZEVkZ2VzO1xuXHRcdGlmIChlLnYgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR2YXIgb2xkRSA9IGUudjtcblx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBlLnYuTmV4dEluU0VMO1xuXHRcdGlmICh0aGlzLm1fU29ydGVkRWRnZXMgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX1NvcnRlZEVkZ2VzLlByZXZJblNFTCA9IG51bGw7XG5cdFx0fVxuXHRcdG9sZEUuTmV4dEluU0VMID0gbnVsbDtcblx0XHRvbGRFLlByZXZJblNFTCA9IG51bGw7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Db3B5QUVMVG9TRUwgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIGUgPSB0aGlzLm1fQWN0aXZlRWRnZXM7XG5cdFx0dGhpcy5tX1NvcnRlZEVkZ2VzID0gZTtcblx0XHR3aGlsZSAoZSAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHRlLlByZXZJblNFTCA9IGUuUHJldkluQUVMO1xuXHRcdFx0ZS5OZXh0SW5TRUwgPSBlLk5leHRJbkFFTDtcblx0XHRcdGUgPSBlLk5leHRJbkFFTDtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Td2FwUG9zaXRpb25zSW5TRUwgPSBmdW5jdGlvbiAoZWRnZTEsIGVkZ2UyKVxuXHR7XG5cdFx0aWYgKGVkZ2UxLk5leHRJblNFTCA9PT0gbnVsbCAmJiBlZGdlMS5QcmV2SW5TRUwgPT09IG51bGwpXG5cdFx0XHRyZXR1cm47XG5cdFx0aWYgKGVkZ2UyLk5leHRJblNFTCA9PT0gbnVsbCAmJiBlZGdlMi5QcmV2SW5TRUwgPT09IG51bGwpXG5cdFx0XHRyZXR1cm47XG5cdFx0aWYgKGVkZ2UxLk5leHRJblNFTCA9PT0gZWRnZTIpXG5cdFx0e1xuXHRcdFx0dmFyIG5leHQgPSBlZGdlMi5OZXh0SW5TRUw7XG5cdFx0XHRpZiAobmV4dCAhPT0gbnVsbClcblx0XHRcdFx0bmV4dC5QcmV2SW5TRUwgPSBlZGdlMTtcblx0XHRcdHZhciBwcmV2ID0gZWRnZTEuUHJldkluU0VMO1xuXHRcdFx0aWYgKHByZXYgIT09IG51bGwpXG5cdFx0XHRcdHByZXYuTmV4dEluU0VMID0gZWRnZTI7XG5cdFx0XHRlZGdlMi5QcmV2SW5TRUwgPSBwcmV2O1xuXHRcdFx0ZWRnZTIuTmV4dEluU0VMID0gZWRnZTE7XG5cdFx0XHRlZGdlMS5QcmV2SW5TRUwgPSBlZGdlMjtcblx0XHRcdGVkZ2UxLk5leHRJblNFTCA9IG5leHQ7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGVkZ2UyLk5leHRJblNFTCA9PT0gZWRnZTEpXG5cdFx0e1xuXHRcdFx0dmFyIG5leHQgPSBlZGdlMS5OZXh0SW5TRUw7XG5cdFx0XHRpZiAobmV4dCAhPT0gbnVsbClcblx0XHRcdFx0bmV4dC5QcmV2SW5TRUwgPSBlZGdlMjtcblx0XHRcdHZhciBwcmV2ID0gZWRnZTIuUHJldkluU0VMO1xuXHRcdFx0aWYgKHByZXYgIT09IG51bGwpXG5cdFx0XHRcdHByZXYuTmV4dEluU0VMID0gZWRnZTE7XG5cdFx0XHRlZGdlMS5QcmV2SW5TRUwgPSBwcmV2O1xuXHRcdFx0ZWRnZTEuTmV4dEluU0VMID0gZWRnZTI7XG5cdFx0XHRlZGdlMi5QcmV2SW5TRUwgPSBlZGdlMTtcblx0XHRcdGVkZ2UyLk5leHRJblNFTCA9IG5leHQ7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR2YXIgbmV4dCA9IGVkZ2UxLk5leHRJblNFTDtcblx0XHRcdHZhciBwcmV2ID0gZWRnZTEuUHJldkluU0VMO1xuXHRcdFx0ZWRnZTEuTmV4dEluU0VMID0gZWRnZTIuTmV4dEluU0VMO1xuXHRcdFx0aWYgKGVkZ2UxLk5leHRJblNFTCAhPT0gbnVsbClcblx0XHRcdFx0ZWRnZTEuTmV4dEluU0VMLlByZXZJblNFTCA9IGVkZ2UxO1xuXHRcdFx0ZWRnZTEuUHJldkluU0VMID0gZWRnZTIuUHJldkluU0VMO1xuXHRcdFx0aWYgKGVkZ2UxLlByZXZJblNFTCAhPT0gbnVsbClcblx0XHRcdFx0ZWRnZTEuUHJldkluU0VMLk5leHRJblNFTCA9IGVkZ2UxO1xuXHRcdFx0ZWRnZTIuTmV4dEluU0VMID0gbmV4dDtcblx0XHRcdGlmIChlZGdlMi5OZXh0SW5TRUwgIT09IG51bGwpXG5cdFx0XHRcdGVkZ2UyLk5leHRJblNFTC5QcmV2SW5TRUwgPSBlZGdlMjtcblx0XHRcdGVkZ2UyLlByZXZJblNFTCA9IHByZXY7XG5cdFx0XHRpZiAoZWRnZTIuUHJldkluU0VMICE9PSBudWxsKVxuXHRcdFx0XHRlZGdlMi5QcmV2SW5TRUwuTmV4dEluU0VMID0gZWRnZTI7XG5cdFx0fVxuXHRcdGlmIChlZGdlMS5QcmV2SW5TRUwgPT09IG51bGwpXG5cdFx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBlZGdlMTtcblx0XHRlbHNlIGlmIChlZGdlMi5QcmV2SW5TRUwgPT09IG51bGwpXG5cdFx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBlZGdlMjtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkFkZExvY2FsTWF4UG9seSA9IGZ1bmN0aW9uIChlMSwgZTIsIHB0KVxuXHR7XG5cdFx0dGhpcy5BZGRPdXRQdChlMSwgcHQpO1xuXHRcdGlmIChlMi5XaW5kRGVsdGEgPT09IDApIHRoaXMuQWRkT3V0UHQoZTIsIHB0KTtcblx0XHRpZiAoZTEuT3V0SWR4ID09PSBlMi5PdXRJZHgpXG5cdFx0e1xuXHRcdFx0ZTEuT3V0SWR4ID0gLTE7XG5cdFx0XHRlMi5PdXRJZHggPSAtMTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoZTEuT3V0SWR4IDwgZTIuT3V0SWR4KVxuXHRcdFx0dGhpcy5BcHBlbmRQb2x5Z29uKGUxLCBlMik7XG5cdFx0ZWxzZVxuXHRcdFx0dGhpcy5BcHBlbmRQb2x5Z29uKGUyLCBlMSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5BZGRMb2NhbE1pblBvbHkgPSBmdW5jdGlvbiAoZTEsIGUyLCBwdClcblx0e1xuXHRcdHZhciByZXN1bHQ7XG5cdFx0dmFyIGUsIHByZXZFO1xuXHRcdGlmIChDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbChlMikgfHwgKGUxLkR4ID4gZTIuRHgpKVxuXHRcdHtcblx0XHRcdHJlc3VsdCA9IHRoaXMuQWRkT3V0UHQoZTEsIHB0KTtcblx0XHRcdGUyLk91dElkeCA9IGUxLk91dElkeDtcblx0XHRcdGUxLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzTGVmdDtcblx0XHRcdGUyLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzUmlnaHQ7XG5cdFx0XHRlID0gZTE7XG5cdFx0XHRpZiAoZS5QcmV2SW5BRUwgPT09IGUyKVxuXHRcdFx0XHRwcmV2RSA9IGUyLlByZXZJbkFFTDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cHJldkUgPSBlLlByZXZJbkFFTDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHJlc3VsdCA9IHRoaXMuQWRkT3V0UHQoZTIsIHB0KTtcblx0XHRcdGUxLk91dElkeCA9IGUyLk91dElkeDtcblx0XHRcdGUxLlNpZGUgPSBDbGlwcGVyTGliLkVkZ2VTaWRlLmVzUmlnaHQ7XG5cdFx0XHRlMi5TaWRlID0gQ2xpcHBlckxpYi5FZGdlU2lkZS5lc0xlZnQ7XG5cdFx0XHRlID0gZTI7XG5cdFx0XHRpZiAoZS5QcmV2SW5BRUwgPT09IGUxKVxuXHRcdFx0XHRwcmV2RSA9IGUxLlByZXZJbkFFTDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cHJldkUgPSBlLlByZXZJbkFFTDtcblx0XHR9XG5cblx0XHRpZiAocHJldkUgIT09IG51bGwgJiYgcHJldkUuT3V0SWR4ID49IDAgJiYgcHJldkUuVG9wLlkgPCBwdC5ZICYmIGUuVG9wLlkgPCBwdC5ZKVxuXHRcdHtcblx0XHRcdHZhciB4UHJldiA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKHByZXZFLCBwdC5ZKTtcblx0XHRcdHZhciB4RSA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGUsIHB0LlkpO1xuXHRcdFx0aWYgKCh4UHJldiA9PT0geEUpICYmIChlLldpbmREZWx0YSAhPT0gMCkgJiYgKHByZXZFLldpbmREZWx0YSAhPT0gMCkgJiYgQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5TbG9wZXNFcXVhbDUobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKHhQcmV2LCBwdC5ZKSwgcHJldkUuVG9wLCBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoeEUsIHB0LlkpLCBlLlRvcCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBvdXRQdCA9IHRoaXMuQWRkT3V0UHQocHJldkUsIHB0KTtcblx0XHRcdFx0dGhpcy5BZGRKb2luKHJlc3VsdCwgb3V0UHQsIGUuVG9wKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkFkZE91dFB0ID0gZnVuY3Rpb24gKGUsIHB0KVxuXHR7XG5cdFx0aWYgKGUuT3V0SWR4IDwgMClcblx0XHR7XG5cdFx0XHR2YXIgb3V0UmVjID0gdGhpcy5DcmVhdGVPdXRSZWMoKTtcblx0XHRcdG91dFJlYy5Jc09wZW4gPSAoZS5XaW5kRGVsdGEgPT09IDApO1xuXHRcdFx0dmFyIG5ld09wID0gbmV3IENsaXBwZXJMaWIuT3V0UHQoKTtcblx0XHRcdG91dFJlYy5QdHMgPSBuZXdPcDtcblx0XHRcdG5ld09wLklkeCA9IG91dFJlYy5JZHg7XG5cdFx0XHQvL25ld09wLlB0ID0gcHQ7XG5cdFx0XHRuZXdPcC5QdC5YID0gcHQuWDtcblx0XHRcdG5ld09wLlB0LlkgPSBwdC5ZO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgbmV3T3AuUHQuWiA9IHB0Llo7XG5cdFx0XHRuZXdPcC5OZXh0ID0gbmV3T3A7XG5cdFx0XHRuZXdPcC5QcmV2ID0gbmV3T3A7XG5cdFx0XHRpZiAoIW91dFJlYy5Jc09wZW4pXG5cdFx0XHRcdHRoaXMuU2V0SG9sZVN0YXRlKGUsIG91dFJlYyk7XG5cdFx0XHRlLk91dElkeCA9IG91dFJlYy5JZHg7XG5cdFx0XHQvL25iOiBkbyB0aGlzIGFmdGVyIFNldFogIVxuXHRcdFx0cmV0dXJuIG5ld09wO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIG91dFJlYyA9IHRoaXMubV9Qb2x5T3V0c1tlLk91dElkeF07XG5cdFx0XHQvL091dFJlYy5QdHMgaXMgdGhlICdMZWZ0LW1vc3QnIHBvaW50ICYgT3V0UmVjLlB0cy5QcmV2IGlzIHRoZSAnUmlnaHQtbW9zdCdcblx0XHRcdHZhciBvcCA9IG91dFJlYy5QdHM7XG5cdFx0XHR2YXIgVG9Gcm9udCA9IChlLlNpZGUgPT09IENsaXBwZXJMaWIuRWRnZVNpZGUuZXNMZWZ0KTtcblx0XHRcdGlmIChUb0Zyb250ICYmIENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocHQsIG9wLlB0KSlcblx0XHRcdFx0cmV0dXJuIG9wO1xuXHRcdFx0ZWxzZSBpZiAoIVRvRnJvbnQgJiYgQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShwdCwgb3AuUHJldi5QdCkpXG5cdFx0XHRcdHJldHVybiBvcC5QcmV2O1xuXHRcdFx0dmFyIG5ld09wID0gbmV3IENsaXBwZXJMaWIuT3V0UHQoKTtcblx0XHRcdG5ld09wLklkeCA9IG91dFJlYy5JZHg7XG5cdFx0XHQvL25ld09wLlB0ID0gcHQ7XG5cdFx0XHRuZXdPcC5QdC5YID0gcHQuWDtcblx0XHRcdG5ld09wLlB0LlkgPSBwdC5ZO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgbmV3T3AuUHQuWiA9IHB0Llo7XG5cdFx0XHRuZXdPcC5OZXh0ID0gb3A7XG5cdFx0XHRuZXdPcC5QcmV2ID0gb3AuUHJldjtcblx0XHRcdG5ld09wLlByZXYuTmV4dCA9IG5ld09wO1xuXHRcdFx0b3AuUHJldiA9IG5ld09wO1xuXHRcdFx0aWYgKFRvRnJvbnQpXG5cdFx0XHRcdG91dFJlYy5QdHMgPSBuZXdPcDtcblx0XHRcdHJldHVybiBuZXdPcDtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5HZXRMYXN0T3V0UHQgPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdHZhciBvdXRSZWMgPSB0aGlzLm1fUG9seU91dHNbZS5PdXRJZHhdO1xuXHRcdGlmIChlLlNpZGUgPT09IENsaXBwZXJMaWIuRWRnZVNpZGUuZXNMZWZ0KVxuXHRcdHtcblx0XHRcdHJldHVybiBvdXRSZWMuUHRzO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0cmV0dXJuIG91dFJlYy5QdHMuUHJldjtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Td2FwUG9pbnRzID0gZnVuY3Rpb24gKHB0MSwgcHQyKVxuXHR7XG5cdFx0dmFyIHRtcCA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MShwdDEuVmFsdWUpO1xuXHRcdC8vcHQxLlZhbHVlID0gcHQyLlZhbHVlO1xuXHRcdHB0MS5WYWx1ZS5YID0gcHQyLlZhbHVlLlg7XG5cdFx0cHQxLlZhbHVlLlkgPSBwdDIuVmFsdWUuWTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBwdDEuVmFsdWUuWiA9IHB0Mi5WYWx1ZS5aO1xuXHRcdC8vcHQyLlZhbHVlID0gdG1wO1xuXHRcdHB0Mi5WYWx1ZS5YID0gdG1wLlg7XG5cdFx0cHQyLlZhbHVlLlkgPSB0bXAuWTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBwdDIuVmFsdWUuWiA9IHRtcC5aO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSG9yelNlZ21lbnRzT3ZlcmxhcCA9IGZ1bmN0aW9uIChzZWcxYSwgc2VnMWIsIHNlZzJhLCBzZWcyYilcblx0e1xuXHRcdHZhciB0bXA7XG5cdFx0aWYgKHNlZzFhID4gc2VnMWIpXG5cdFx0e1xuXHRcdFx0dG1wID0gc2VnMWE7XG5cdFx0XHRzZWcxYSA9IHNlZzFiO1xuXHRcdFx0c2VnMWIgPSB0bXA7XG5cdFx0fVxuXHRcdGlmIChzZWcyYSA+IHNlZzJiKVxuXHRcdHtcblx0XHRcdHRtcCA9IHNlZzJhO1xuXHRcdFx0c2VnMmEgPSBzZWcyYjtcblx0XHRcdHNlZzJiID0gdG1wO1xuXHRcdH1cblx0XHRyZXR1cm4gKHNlZzFhIDwgc2VnMmIpICYmIChzZWcyYSA8IHNlZzFiKTtcblx0fVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuU2V0SG9sZVN0YXRlID0gZnVuY3Rpb24gKGUsIG91dFJlYylcblx0e1xuXHRcdHZhciBlMiA9IGUuUHJldkluQUVMO1xuXHRcdHZhciBlVG1wID0gbnVsbDtcblx0XHR3aGlsZSAoZTIgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0aWYgKGUyLk91dElkeCA+PSAwICYmIGUyLldpbmREZWx0YSAhPT0gMClcblx0XHRcdHtcblx0XHRcdFx0aWYgKGVUbXAgPT09IG51bGwpXG5cdFx0XHRcdFx0ZVRtcCA9IGUyO1xuXHRcdFx0XHRlbHNlIGlmIChlVG1wLk91dElkeCA9PT0gZTIuT3V0SWR4KVxuXHRcdFx0XHRcdGVUbXAgPSBudWxsOyAvL3BhaXJlZFxuXHRcdFx0fVxuXHRcdFx0ZTIgPSBlMi5QcmV2SW5BRUw7XG5cdFx0fVxuXG5cdFx0aWYgKGVUbXAgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0b3V0UmVjLkZpcnN0TGVmdCA9IG51bGw7XG5cdFx0XHRvdXRSZWMuSXNIb2xlID0gZmFsc2U7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRvdXRSZWMuRmlyc3RMZWZ0ID0gdGhpcy5tX1BvbHlPdXRzW2VUbXAuT3V0SWR4XTtcblx0XHRcdG91dFJlYy5Jc0hvbGUgPSAhb3V0UmVjLkZpcnN0TGVmdC5Jc0hvbGU7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuR2V0RHggPSBmdW5jdGlvbiAocHQxLCBwdDIpXG5cdHtcblx0XHRpZiAocHQxLlkgPT09IHB0Mi5ZKVxuXHRcdFx0cmV0dXJuIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuaG9yaXpvbnRhbDtcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gKHB0Mi5YIC0gcHQxLlgpIC8gKHB0Mi5ZIC0gcHQxLlkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRmlyc3RJc0JvdHRvbVB0ID0gZnVuY3Rpb24gKGJ0bVB0MSwgYnRtUHQyKVxuXHR7XG5cdFx0dmFyIHAgPSBidG1QdDEuUHJldjtcblx0XHR3aGlsZSAoKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocC5QdCwgYnRtUHQxLlB0KSkgJiYgKHAgIT09IGJ0bVB0MSkpXG5cdFx0XHRwID0gcC5QcmV2O1xuXHRcdHZhciBkeDFwID0gTWF0aC5hYnModGhpcy5HZXREeChidG1QdDEuUHQsIHAuUHQpKTtcblx0XHRwID0gYnRtUHQxLk5leHQ7XG5cdFx0d2hpbGUgKChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KHAuUHQsIGJ0bVB0MS5QdCkpICYmIChwICE9PSBidG1QdDEpKVxuXHRcdFx0cCA9IHAuTmV4dDtcblx0XHR2YXIgZHgxbiA9IE1hdGguYWJzKHRoaXMuR2V0RHgoYnRtUHQxLlB0LCBwLlB0KSk7XG5cdFx0cCA9IGJ0bVB0Mi5QcmV2O1xuXHRcdHdoaWxlICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShwLlB0LCBidG1QdDIuUHQpKSAmJiAocCAhPT0gYnRtUHQyKSlcblx0XHRcdHAgPSBwLlByZXY7XG5cdFx0dmFyIGR4MnAgPSBNYXRoLmFicyh0aGlzLkdldER4KGJ0bVB0Mi5QdCwgcC5QdCkpO1xuXHRcdHAgPSBidG1QdDIuTmV4dDtcblx0XHR3aGlsZSAoKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocC5QdCwgYnRtUHQyLlB0KSkgJiYgKHAgIT09IGJ0bVB0MikpXG5cdFx0XHRwID0gcC5OZXh0O1xuXHRcdHZhciBkeDJuID0gTWF0aC5hYnModGhpcy5HZXREeChidG1QdDIuUHQsIHAuUHQpKTtcblxuXHRcdGlmIChNYXRoLm1heChkeDFwLCBkeDFuKSA9PT0gTWF0aC5tYXgoZHgycCwgZHgybikgJiYgTWF0aC5taW4oZHgxcCwgZHgxbikgPT09IE1hdGgubWluKGR4MnAsIGR4Mm4pKVxuXHRcdHtcblx0XHRcdHJldHVybiB0aGlzLkFyZWEoYnRtUHQxKSA+IDA7IC8vaWYgb3RoZXJ3aXNlIGlkZW50aWNhbCB1c2Ugb3JpZW50YXRpb25cblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHJldHVybiAoZHgxcCA+PSBkeDJwICYmIGR4MXAgPj0gZHgybikgfHwgKGR4MW4gPj0gZHgycCAmJiBkeDFuID49IGR4Mm4pO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldEJvdHRvbVB0ID0gZnVuY3Rpb24gKHBwKVxuXHR7XG5cdFx0dmFyIGR1cHMgPSBudWxsO1xuXHRcdHZhciBwID0gcHAuTmV4dDtcblx0XHR3aGlsZSAocCAhPT0gcHApXG5cdFx0e1xuXHRcdFx0aWYgKHAuUHQuWSA+IHBwLlB0LlkpXG5cdFx0XHR7XG5cdFx0XHRcdHBwID0gcDtcblx0XHRcdFx0ZHVwcyA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChwLlB0LlkgPT09IHBwLlB0LlkgJiYgcC5QdC5YIDw9IHBwLlB0LlgpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChwLlB0LlggPCBwcC5QdC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ZHVwcyA9IG51bGw7XG5cdFx0XHRcdFx0cHAgPSBwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChwLk5leHQgIT09IHBwICYmIHAuUHJldiAhPT0gcHApXG5cdFx0XHRcdFx0XHRkdXBzID0gcDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cCA9IHAuTmV4dDtcblx0XHR9XG5cdFx0aWYgKGR1cHMgIT09IG51bGwpXG5cdFx0e1xuXHRcdFx0Ly90aGVyZSBhcHBlYXJzIHRvIGJlIGF0IGxlYXN0IDIgdmVydGljZXMgYXQgYm90dG9tUHQgc28gLi4uXG5cdFx0XHR3aGlsZSAoZHVwcyAhPT0gcClcblx0XHRcdHtcblx0XHRcdFx0aWYgKCF0aGlzLkZpcnN0SXNCb3R0b21QdChwLCBkdXBzKSlcblx0XHRcdFx0XHRwcCA9IGR1cHM7XG5cdFx0XHRcdGR1cHMgPSBkdXBzLk5leHQ7XG5cdFx0XHRcdHdoaWxlIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0luZXF1YWxpdHkoZHVwcy5QdCwgcHAuUHQpKVxuXHRcdFx0XHRcdGR1cHMgPSBkdXBzLk5leHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBwcDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldExvd2VybW9zdFJlYyA9IGZ1bmN0aW9uIChvdXRSZWMxLCBvdXRSZWMyKVxuXHR7XG5cdFx0Ly93b3JrIG91dCB3aGljaCBwb2x5Z29uIGZyYWdtZW50IGhhcyB0aGUgY29ycmVjdCBob2xlIHN0YXRlIC4uLlxuXHRcdGlmIChvdXRSZWMxLkJvdHRvbVB0ID09PSBudWxsKVxuXHRcdFx0b3V0UmVjMS5Cb3R0b21QdCA9IHRoaXMuR2V0Qm90dG9tUHQob3V0UmVjMS5QdHMpO1xuXHRcdGlmIChvdXRSZWMyLkJvdHRvbVB0ID09PSBudWxsKVxuXHRcdFx0b3V0UmVjMi5Cb3R0b21QdCA9IHRoaXMuR2V0Qm90dG9tUHQob3V0UmVjMi5QdHMpO1xuXHRcdHZhciBiUHQxID0gb3V0UmVjMS5Cb3R0b21QdDtcblx0XHR2YXIgYlB0MiA9IG91dFJlYzIuQm90dG9tUHQ7XG5cdFx0aWYgKGJQdDEuUHQuWSA+IGJQdDIuUHQuWSlcblx0XHRcdHJldHVybiBvdXRSZWMxO1xuXHRcdGVsc2UgaWYgKGJQdDEuUHQuWSA8IGJQdDIuUHQuWSlcblx0XHRcdHJldHVybiBvdXRSZWMyO1xuXHRcdGVsc2UgaWYgKGJQdDEuUHQuWCA8IGJQdDIuUHQuWClcblx0XHRcdHJldHVybiBvdXRSZWMxO1xuXHRcdGVsc2UgaWYgKGJQdDEuUHQuWCA+IGJQdDIuUHQuWClcblx0XHRcdHJldHVybiBvdXRSZWMyO1xuXHRcdGVsc2UgaWYgKGJQdDEuTmV4dCA9PT0gYlB0MSlcblx0XHRcdHJldHVybiBvdXRSZWMyO1xuXHRcdGVsc2UgaWYgKGJQdDIuTmV4dCA9PT0gYlB0Milcblx0XHRcdHJldHVybiBvdXRSZWMxO1xuXHRcdGVsc2UgaWYgKHRoaXMuRmlyc3RJc0JvdHRvbVB0KGJQdDEsIGJQdDIpKVxuXHRcdFx0cmV0dXJuIG91dFJlYzE7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIG91dFJlYzI7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5PdXRSZWMxUmlnaHRPZk91dFJlYzIgPSBmdW5jdGlvbiAob3V0UmVjMSwgb3V0UmVjMilcblx0e1xuXHRcdGRvIHtcblx0XHRcdG91dFJlYzEgPSBvdXRSZWMxLkZpcnN0TGVmdDtcblx0XHRcdGlmIChvdXRSZWMxID09PSBvdXRSZWMyKVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0d2hpbGUgKG91dFJlYzEgIT09IG51bGwpXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuR2V0T3V0UmVjID0gZnVuY3Rpb24gKGlkeClcblx0e1xuXHRcdHZhciBvdXRyZWMgPSB0aGlzLm1fUG9seU91dHNbaWR4XTtcblx0XHR3aGlsZSAob3V0cmVjICE9PSB0aGlzLm1fUG9seU91dHNbb3V0cmVjLklkeF0pXG5cdFx0XHRvdXRyZWMgPSB0aGlzLm1fUG9seU91dHNbb3V0cmVjLklkeF07XG5cdFx0cmV0dXJuIG91dHJlYztcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkFwcGVuZFBvbHlnb24gPSBmdW5jdGlvbiAoZTEsIGUyKVxuXHR7XG5cdFx0Ly9nZXQgdGhlIHN0YXJ0IGFuZCBlbmRzIG9mIGJvdGggb3V0cHV0IHBvbHlnb25zIC4uLlxuXHRcdHZhciBvdXRSZWMxID0gdGhpcy5tX1BvbHlPdXRzW2UxLk91dElkeF07XG5cdFx0dmFyIG91dFJlYzIgPSB0aGlzLm1fUG9seU91dHNbZTIuT3V0SWR4XTtcblx0XHR2YXIgaG9sZVN0YXRlUmVjO1xuXHRcdGlmICh0aGlzLk91dFJlYzFSaWdodE9mT3V0UmVjMihvdXRSZWMxLCBvdXRSZWMyKSlcblx0XHRcdGhvbGVTdGF0ZVJlYyA9IG91dFJlYzI7XG5cdFx0ZWxzZSBpZiAodGhpcy5PdXRSZWMxUmlnaHRPZk91dFJlYzIob3V0UmVjMiwgb3V0UmVjMSkpXG5cdFx0XHRob2xlU3RhdGVSZWMgPSBvdXRSZWMxO1xuXHRcdGVsc2Vcblx0XHRcdGhvbGVTdGF0ZVJlYyA9IHRoaXMuR2V0TG93ZXJtb3N0UmVjKG91dFJlYzEsIG91dFJlYzIpO1xuXG5cdFx0Ly9nZXQgdGhlIHN0YXJ0IGFuZCBlbmRzIG9mIGJvdGggb3V0cHV0IHBvbHlnb25zIGFuZFxuXHRcdC8vam9pbiBFMiBwb2x5IG9udG8gRTEgcG9seSBhbmQgZGVsZXRlIHBvaW50ZXJzIHRvIEUyIC4uLlxuXG5cdFx0dmFyIHAxX2xmdCA9IG91dFJlYzEuUHRzO1xuXHRcdHZhciBwMV9ydCA9IHAxX2xmdC5QcmV2O1xuXHRcdHZhciBwMl9sZnQgPSBvdXRSZWMyLlB0cztcblx0XHR2YXIgcDJfcnQgPSBwMl9sZnQuUHJldjtcblx0XHQvL2pvaW4gZTIgcG9seSBvbnRvIGUxIHBvbHkgYW5kIGRlbGV0ZSBwb2ludGVycyB0byBlMiAuLi5cblx0XHRpZiAoZTEuU2lkZSA9PT0gQ2xpcHBlckxpYi5FZGdlU2lkZS5lc0xlZnQpXG5cdFx0e1xuXHRcdFx0aWYgKGUyLlNpZGUgPT09IENsaXBwZXJMaWIuRWRnZVNpZGUuZXNMZWZ0KVxuXHRcdFx0e1xuXHRcdFx0XHQvL3ogeSB4IGEgYiBjXG5cdFx0XHRcdHRoaXMuUmV2ZXJzZVBvbHlQdExpbmtzKHAyX2xmdCk7XG5cdFx0XHRcdHAyX2xmdC5OZXh0ID0gcDFfbGZ0O1xuXHRcdFx0XHRwMV9sZnQuUHJldiA9IHAyX2xmdDtcblx0XHRcdFx0cDFfcnQuTmV4dCA9IHAyX3J0O1xuXHRcdFx0XHRwMl9ydC5QcmV2ID0gcDFfcnQ7XG5cdFx0XHRcdG91dFJlYzEuUHRzID0gcDJfcnQ7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdC8veCB5IHogYSBiIGNcblx0XHRcdFx0cDJfcnQuTmV4dCA9IHAxX2xmdDtcblx0XHRcdFx0cDFfbGZ0LlByZXYgPSBwMl9ydDtcblx0XHRcdFx0cDJfbGZ0LlByZXYgPSBwMV9ydDtcblx0XHRcdFx0cDFfcnQuTmV4dCA9IHAyX2xmdDtcblx0XHRcdFx0b3V0UmVjMS5QdHMgPSBwMl9sZnQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRpZiAoZTIuU2lkZSA9PT0gQ2xpcHBlckxpYi5FZGdlU2lkZS5lc1JpZ2h0KVxuXHRcdFx0e1xuXHRcdFx0XHQvL2EgYiBjIHogeSB4XG5cdFx0XHRcdHRoaXMuUmV2ZXJzZVBvbHlQdExpbmtzKHAyX2xmdCk7XG5cdFx0XHRcdHAxX3J0Lk5leHQgPSBwMl9ydDtcblx0XHRcdFx0cDJfcnQuUHJldiA9IHAxX3J0O1xuXHRcdFx0XHRwMl9sZnQuTmV4dCA9IHAxX2xmdDtcblx0XHRcdFx0cDFfbGZ0LlByZXYgPSBwMl9sZnQ7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdC8vYSBiIGMgeCB5IHpcblx0XHRcdFx0cDFfcnQuTmV4dCA9IHAyX2xmdDtcblx0XHRcdFx0cDJfbGZ0LlByZXYgPSBwMV9ydDtcblx0XHRcdFx0cDFfbGZ0LlByZXYgPSBwMl9ydDtcblx0XHRcdFx0cDJfcnQuTmV4dCA9IHAxX2xmdDtcblx0XHRcdH1cblx0XHR9XG5cdFx0b3V0UmVjMS5Cb3R0b21QdCA9IG51bGw7XG5cdFx0aWYgKGhvbGVTdGF0ZVJlYyA9PT0gb3V0UmVjMilcblx0XHR7XG5cdFx0XHRpZiAob3V0UmVjMi5GaXJzdExlZnQgIT09IG91dFJlYzEpXG5cdFx0XHRcdG91dFJlYzEuRmlyc3RMZWZ0ID0gb3V0UmVjMi5GaXJzdExlZnQ7XG5cdFx0XHRvdXRSZWMxLklzSG9sZSA9IG91dFJlYzIuSXNIb2xlO1xuXHRcdH1cblx0XHRvdXRSZWMyLlB0cyA9IG51bGw7XG5cdFx0b3V0UmVjMi5Cb3R0b21QdCA9IG51bGw7XG5cdFx0b3V0UmVjMi5GaXJzdExlZnQgPSBvdXRSZWMxO1xuXHRcdHZhciBPS0lkeCA9IGUxLk91dElkeDtcblx0XHR2YXIgT2Jzb2xldGVJZHggPSBlMi5PdXRJZHg7XG5cdFx0ZTEuT3V0SWR4ID0gLTE7XG5cdFx0Ly9uYjogc2FmZSBiZWNhdXNlIHdlIG9ubHkgZ2V0IGhlcmUgdmlhIEFkZExvY2FsTWF4UG9seVxuXHRcdGUyLk91dElkeCA9IC0xO1xuXHRcdHZhciBlID0gdGhpcy5tX0FjdGl2ZUVkZ2VzO1xuXHRcdHdoaWxlIChlICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdGlmIChlLk91dElkeCA9PT0gT2Jzb2xldGVJZHgpXG5cdFx0XHR7XG5cdFx0XHRcdGUuT3V0SWR4ID0gT0tJZHg7XG5cdFx0XHRcdGUuU2lkZSA9IGUxLlNpZGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0ZSA9IGUuTmV4dEluQUVMO1xuXHRcdH1cblx0XHRvdXRSZWMyLklkeCA9IG91dFJlYzEuSWR4O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuUmV2ZXJzZVBvbHlQdExpbmtzID0gZnVuY3Rpb24gKHBwKVxuXHR7XG5cdFx0aWYgKHBwID09PSBudWxsKVxuXHRcdFx0cmV0dXJuO1xuXHRcdHZhciBwcDE7XG5cdFx0dmFyIHBwMjtcblx0XHRwcDEgPSBwcDtcblx0XHRkbyB7XG5cdFx0XHRwcDIgPSBwcDEuTmV4dDtcblx0XHRcdHBwMS5OZXh0ID0gcHAxLlByZXY7XG5cdFx0XHRwcDEuUHJldiA9IHBwMjtcblx0XHRcdHBwMSA9IHBwMjtcblx0XHR9XG5cdFx0d2hpbGUgKHBwMSAhPT0gcHApXG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLlN3YXBTaWRlcyA9IGZ1bmN0aW9uIChlZGdlMSwgZWRnZTIpXG5cdHtcblx0XHR2YXIgc2lkZSA9IGVkZ2UxLlNpZGU7XG5cdFx0ZWRnZTEuU2lkZSA9IGVkZ2UyLlNpZGU7XG5cdFx0ZWRnZTIuU2lkZSA9IHNpZGU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLlN3YXBQb2x5SW5kZXhlcyA9IGZ1bmN0aW9uIChlZGdlMSwgZWRnZTIpXG5cdHtcblx0XHR2YXIgb3V0SWR4ID0gZWRnZTEuT3V0SWR4O1xuXHRcdGVkZ2UxLk91dElkeCA9IGVkZ2UyLk91dElkeDtcblx0XHRlZGdlMi5PdXRJZHggPSBvdXRJZHg7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5JbnRlcnNlY3RFZGdlcyA9IGZ1bmN0aW9uIChlMSwgZTIsIHB0KVxuXHR7XG5cdFx0Ly9lMSB3aWxsIGJlIHRvIHRoZSBsZWZ0IG9mIGUyIEJFTE9XIHRoZSBpbnRlcnNlY3Rpb24uIFRoZXJlZm9yZSBlMSBpcyBiZWZvcmVcblx0XHQvL2UyIGluIEFFTCBleGNlcHQgd2hlbiBlMSBpcyBiZWluZyBpbnNlcnRlZCBhdCB0aGUgaW50ZXJzZWN0aW9uIHBvaW50IC4uLlxuXHRcdHZhciBlMUNvbnRyaWJ1dGluZyA9IChlMS5PdXRJZHggPj0gMCk7XG5cdFx0dmFyIGUyQ29udHJpYnV0aW5nID0gKGUyLk91dElkeCA+PSAwKTtcblxuXHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopXG5cdFx0XHR0aGlzLlNldFoocHQsIGUxLCBlMik7XG5cblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfbGluZXMpXG5cdFx0e1xuXHRcdFx0Ly9pZiBlaXRoZXIgZWRnZSBpcyBvbiBhbiBPUEVOIHBhdGggLi4uXG5cdFx0XHRpZiAoZTEuV2luZERlbHRhID09PSAwIHx8IGUyLldpbmREZWx0YSA9PT0gMClcblx0XHRcdHtcblx0XHRcdFx0Ly9pZ25vcmUgc3ViamVjdC1zdWJqZWN0IG9wZW4gcGF0aCBpbnRlcnNlY3Rpb25zIFVOTEVTUyB0aGV5XG5cdFx0XHRcdC8vYXJlIGJvdGggb3BlbiBwYXRocywgQU5EIHRoZXkgYXJlIGJvdGggJ2NvbnRyaWJ1dGluZyBtYXhpbWFzJyAuLi5cblx0XHRcdFx0aWYgKGUxLldpbmREZWx0YSA9PT0gMCAmJiBlMi5XaW5kRGVsdGEgPT09IDApIHJldHVybjtcblx0XHRcdFx0Ly9pZiBpbnRlcnNlY3RpbmcgYSBzdWJqIGxpbmUgd2l0aCBhIHN1YmogcG9seSAuLi5cblx0XHRcdFx0ZWxzZSBpZiAoZTEuUG9seVR5cCA9PT0gZTIuUG9seVR5cCAmJlxuXHRcdFx0XHRcdGUxLldpbmREZWx0YSAhPT0gZTIuV2luZERlbHRhICYmIHRoaXMubV9DbGlwVHlwZSA9PT0gQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKGUxLldpbmREZWx0YSA9PT0gMClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRpZiAoZTJDb250cmlidXRpbmcpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHRoaXMuQWRkT3V0UHQoZTEsIHB0KTtcblx0XHRcdFx0XHRcdFx0aWYgKGUxQ29udHJpYnV0aW5nKVxuXHRcdFx0XHRcdFx0XHRcdGUxLk91dElkeCA9IC0xO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWYgKGUxQ29udHJpYnV0aW5nKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0aGlzLkFkZE91dFB0KGUyLCBwdCk7XG5cdFx0XHRcdFx0XHRcdGlmIChlMkNvbnRyaWJ1dGluZylcblx0XHRcdFx0XHRcdFx0XHRlMi5PdXRJZHggPSAtMTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAoZTEuUG9seVR5cCAhPT0gZTIuUG9seVR5cClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmICgoZTEuV2luZERlbHRhID09PSAwKSAmJiBNYXRoLmFicyhlMi5XaW5kQ250KSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0KHRoaXMubV9DbGlwVHlwZSAhPT0gQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uIHx8IGUyLldpbmRDbnQyID09PSAwKSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0aGlzLkFkZE91dFB0KGUxLCBwdCk7XG5cdFx0XHRcdFx0XHRpZiAoZTFDb250cmlidXRpbmcpXG5cdFx0XHRcdFx0XHRcdGUxLk91dElkeCA9IC0xO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmICgoZTIuV2luZERlbHRhID09PSAwKSAmJiAoTWF0aC5hYnMoZTEuV2luZENudCkgPT09IDEpICYmXG5cdFx0XHRcdFx0XHQodGhpcy5tX0NsaXBUeXBlICE9PSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24gfHwgZTEuV2luZENudDIgPT09IDApKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHRoaXMuQWRkT3V0UHQoZTIsIHB0KTtcblx0XHRcdFx0XHRcdGlmIChlMkNvbnRyaWJ1dGluZylcblx0XHRcdFx0XHRcdFx0ZTIuT3V0SWR4ID0gLTE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly91cGRhdGUgd2luZGluZyBjb3VudHMuLi5cblx0XHQvL2Fzc3VtZXMgdGhhdCBlMSB3aWxsIGJlIHRvIHRoZSBSaWdodCBvZiBlMiBBQk9WRSB0aGUgaW50ZXJzZWN0aW9uXG5cdFx0aWYgKGUxLlBvbHlUeXAgPT09IGUyLlBvbHlUeXApXG5cdFx0e1xuXHRcdFx0aWYgKHRoaXMuSXNFdmVuT2RkRmlsbFR5cGUoZTEpKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgb2xkRTFXaW5kQ250ID0gZTEuV2luZENudDtcblx0XHRcdFx0ZTEuV2luZENudCA9IGUyLldpbmRDbnQ7XG5cdFx0XHRcdGUyLldpbmRDbnQgPSBvbGRFMVdpbmRDbnQ7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChlMS5XaW5kQ250ICsgZTIuV2luZERlbHRhID09PSAwKVxuXHRcdFx0XHRcdGUxLldpbmRDbnQgPSAtZTEuV2luZENudDtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGUxLldpbmRDbnQgKz0gZTIuV2luZERlbHRhO1xuXHRcdFx0XHRpZiAoZTIuV2luZENudCAtIGUxLldpbmREZWx0YSA9PT0gMClcblx0XHRcdFx0XHRlMi5XaW5kQ250ID0gLWUyLldpbmRDbnQ7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRlMi5XaW5kQ250IC09IGUxLldpbmREZWx0YTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmICghdGhpcy5Jc0V2ZW5PZGRGaWxsVHlwZShlMikpXG5cdFx0XHRcdGUxLldpbmRDbnQyICs9IGUyLldpbmREZWx0YTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0ZTEuV2luZENudDIgPSAoZTEuV2luZENudDIgPT09IDApID8gMSA6IDA7XG5cdFx0XHRpZiAoIXRoaXMuSXNFdmVuT2RkRmlsbFR5cGUoZTEpKVxuXHRcdFx0XHRlMi5XaW5kQ250MiAtPSBlMS5XaW5kRGVsdGE7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGUyLldpbmRDbnQyID0gKGUyLldpbmRDbnQyID09PSAwKSA/IDEgOiAwO1xuXHRcdH1cblx0XHR2YXIgZTFGaWxsVHlwZSwgZTJGaWxsVHlwZSwgZTFGaWxsVHlwZTIsIGUyRmlsbFR5cGUyO1xuXHRcdGlmIChlMS5Qb2x5VHlwID09PSBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdClcblx0XHR7XG5cdFx0XHRlMUZpbGxUeXBlID0gdGhpcy5tX1N1YmpGaWxsVHlwZTtcblx0XHRcdGUxRmlsbFR5cGUyID0gdGhpcy5tX0NsaXBGaWxsVHlwZTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGUxRmlsbFR5cGUgPSB0aGlzLm1fQ2xpcEZpbGxUeXBlO1xuXHRcdFx0ZTFGaWxsVHlwZTIgPSB0aGlzLm1fU3ViakZpbGxUeXBlO1xuXHRcdH1cblx0XHRpZiAoZTIuUG9seVR5cCA9PT0gQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QpXG5cdFx0e1xuXHRcdFx0ZTJGaWxsVHlwZSA9IHRoaXMubV9TdWJqRmlsbFR5cGU7XG5cdFx0XHRlMkZpbGxUeXBlMiA9IHRoaXMubV9DbGlwRmlsbFR5cGU7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRlMkZpbGxUeXBlID0gdGhpcy5tX0NsaXBGaWxsVHlwZTtcblx0XHRcdGUyRmlsbFR5cGUyID0gdGhpcy5tX1N1YmpGaWxsVHlwZTtcblx0XHR9XG5cdFx0dmFyIGUxV2MsIGUyV2M7XG5cdFx0c3dpdGNoIChlMUZpbGxUeXBlKVxuXHRcdHtcblx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlOlxuXHRcdFx0ZTFXYyA9IGUxLldpbmRDbnQ7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5lZ2F0aXZlOlxuXHRcdFx0ZTFXYyA9IC1lMS5XaW5kQ250O1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGUxV2MgPSBNYXRoLmFicyhlMS5XaW5kQ250KTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRzd2l0Y2ggKGUyRmlsbFR5cGUpXG5cdFx0e1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0UG9zaXRpdmU6XG5cdFx0XHRlMldjID0gZTIuV2luZENudDtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0TmVnYXRpdmU6XG5cdFx0XHRlMldjID0gLWUyLldpbmRDbnQ7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0ZTJXYyA9IE1hdGguYWJzKGUyLldpbmRDbnQpO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGlmIChlMUNvbnRyaWJ1dGluZyAmJiBlMkNvbnRyaWJ1dGluZylcblx0XHR7XG5cdFx0XHRpZiAoKGUxV2MgIT09IDAgJiYgZTFXYyAhPT0gMSkgfHwgKGUyV2MgIT09IDAgJiYgZTJXYyAhPT0gMSkgfHxcblx0XHRcdFx0KGUxLlBvbHlUeXAgIT09IGUyLlBvbHlUeXAgJiYgdGhpcy5tX0NsaXBUeXBlICE9PSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0WG9yKSlcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRMb2NhbE1heFBvbHkoZTEsIGUyLCBwdCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuQWRkT3V0UHQoZTEsIHB0KTtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChlMiwgcHQpO1xuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuU3dhcFNpZGVzKGUxLCBlMik7XG5cdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlci5Td2FwUG9seUluZGV4ZXMoZTEsIGUyKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAoZTFDb250cmlidXRpbmcpXG5cdFx0e1xuXHRcdFx0aWYgKGUyV2MgPT09IDAgfHwgZTJXYyA9PT0gMSlcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChlMSwgcHQpO1xuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuU3dhcFNpZGVzKGUxLCBlMik7XG5cdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlci5Td2FwUG9seUluZGV4ZXMoZTEsIGUyKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAoZTJDb250cmlidXRpbmcpXG5cdFx0e1xuXHRcdFx0aWYgKGUxV2MgPT09IDAgfHwgZTFXYyA9PT0gMSlcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChlMiwgcHQpO1xuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuU3dhcFNpZGVzKGUxLCBlMik7XG5cdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlci5Td2FwUG9seUluZGV4ZXMoZTEsIGUyKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAoKGUxV2MgPT09IDAgfHwgZTFXYyA9PT0gMSkgJiYgKGUyV2MgPT09IDAgfHwgZTJXYyA9PT0gMSkpXG5cdFx0e1xuXHRcdFx0Ly9uZWl0aGVyIGVkZ2UgaXMgY3VycmVudGx5IGNvbnRyaWJ1dGluZyAuLi5cblx0XHRcdHZhciBlMVdjMiwgZTJXYzI7XG5cdFx0XHRzd2l0Y2ggKGUxRmlsbFR5cGUyKVxuXHRcdFx0e1xuXHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZTpcblx0XHRcdFx0ZTFXYzIgPSBlMS5XaW5kQ250Mjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5lZ2F0aXZlOlxuXHRcdFx0XHRlMVdjMiA9IC1lMS5XaW5kQ250Mjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRlMVdjMiA9IE1hdGguYWJzKGUxLldpbmRDbnQyKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2ggKGUyRmlsbFR5cGUyKVxuXHRcdFx0e1xuXHRcdFx0Y2FzZSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZTpcblx0XHRcdFx0ZTJXYzIgPSBlMi5XaW5kQ250Mjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5lZ2F0aXZlOlxuXHRcdFx0XHRlMldjMiA9IC1lMi5XaW5kQ250Mjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRlMldjMiA9IE1hdGguYWJzKGUyLldpbmRDbnQyKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZTEuUG9seVR5cCAhPT0gZTIuUG9seVR5cClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRMb2NhbE1pblBvbHkoZTEsIGUyLCBwdCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChlMVdjID09PSAxICYmIGUyV2MgPT09IDEpXG5cdFx0XHRcdHN3aXRjaCAodGhpcy5tX0NsaXBUeXBlKVxuXHRcdFx0XHR7XG5cdFx0XHRcdGNhc2UgQ2xpcHBlckxpYi5DbGlwVHlwZS5jdEludGVyc2VjdGlvbjpcblx0XHRcdFx0XHRpZiAoZTFXYzIgPiAwICYmIGUyV2MyID4gMClcblx0XHRcdFx0XHRcdHRoaXMuQWRkTG9jYWxNaW5Qb2x5KGUxLCBlMiwgcHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbjpcblx0XHRcdFx0XHRpZiAoZTFXYzIgPD0gMCAmJiBlMldjMiA8PSAwKVxuXHRcdFx0XHRcdFx0dGhpcy5BZGRMb2NhbE1pblBvbHkoZTEsIGUyLCBwdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgQ2xpcHBlckxpYi5DbGlwVHlwZS5jdERpZmZlcmVuY2U6XG5cdFx0XHRcdFx0aWYgKCgoZTEuUG9seVR5cCA9PT0gQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdENsaXApICYmIChlMVdjMiA+IDApICYmIChlMldjMiA+IDApKSB8fFxuXHRcdFx0XHRcdFx0KChlMS5Qb2x5VHlwID09PSBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdCkgJiYgKGUxV2MyIDw9IDApICYmIChlMldjMiA8PSAwKSkpXG5cdFx0XHRcdFx0XHR0aGlzLkFkZExvY2FsTWluUG9seShlMSwgZTIsIHB0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0WG9yOlxuXHRcdFx0XHRcdHRoaXMuQWRkTG9jYWxNaW5Qb2x5KGUxLCBlMiwgcHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlci5Td2FwU2lkZXMoZTEsIGUyKTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5EZWxldGVGcm9tU0VMID0gZnVuY3Rpb24gKGUpXG5cdHtcblx0XHR2YXIgU2VsUHJldiA9IGUuUHJldkluU0VMO1xuXHRcdHZhciBTZWxOZXh0ID0gZS5OZXh0SW5TRUw7XG5cdFx0aWYgKFNlbFByZXYgPT09IG51bGwgJiYgU2VsTmV4dCA9PT0gbnVsbCAmJiAoZSAhPT0gdGhpcy5tX1NvcnRlZEVkZ2VzKSlcblx0XHRcdHJldHVybjtcblx0XHQvL2FscmVhZHkgZGVsZXRlZFxuXHRcdGlmIChTZWxQcmV2ICE9PSBudWxsKVxuXHRcdFx0U2VsUHJldi5OZXh0SW5TRUwgPSBTZWxOZXh0O1xuXHRcdGVsc2Vcblx0XHRcdHRoaXMubV9Tb3J0ZWRFZGdlcyA9IFNlbE5leHQ7XG5cdFx0aWYgKFNlbE5leHQgIT09IG51bGwpXG5cdFx0XHRTZWxOZXh0LlByZXZJblNFTCA9IFNlbFByZXY7XG5cdFx0ZS5OZXh0SW5TRUwgPSBudWxsO1xuXHRcdGUuUHJldkluU0VMID0gbnVsbDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlByb2Nlc3NIb3Jpem9udGFscyA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHR2YXIgaG9yekVkZ2UgPSB7fTsgLy9tX1NvcnRlZEVkZ2VzO1xuXHRcdHdoaWxlICh0aGlzLlBvcEVkZ2VGcm9tU0VMKGhvcnpFZGdlKSlcblx0XHR7XG5cdFx0XHR0aGlzLlByb2Nlc3NIb3Jpem9udGFsKGhvcnpFZGdlLnYpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldEhvcnpEaXJlY3Rpb24gPSBmdW5jdGlvbiAoSG9yekVkZ2UsICR2YXIpXG5cdHtcblx0XHRpZiAoSG9yekVkZ2UuQm90LlggPCBIb3J6RWRnZS5Ub3AuWClcblx0XHR7XG5cdFx0XHQkdmFyLkxlZnQgPSBIb3J6RWRnZS5Cb3QuWDtcblx0XHRcdCR2YXIuUmlnaHQgPSBIb3J6RWRnZS5Ub3AuWDtcblx0XHRcdCR2YXIuRGlyID0gQ2xpcHBlckxpYi5EaXJlY3Rpb24uZExlZnRUb1JpZ2h0O1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0JHZhci5MZWZ0ID0gSG9yekVkZ2UuVG9wLlg7XG5cdFx0XHQkdmFyLlJpZ2h0ID0gSG9yekVkZ2UuQm90Llg7XG5cdFx0XHQkdmFyLkRpciA9IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRSaWdodFRvTGVmdDtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Qcm9jZXNzSG9yaXpvbnRhbCA9IGZ1bmN0aW9uIChob3J6RWRnZSlcblx0e1xuXHRcdHZhciAkdmFyID0ge1xuXHRcdFx0RGlyOiBudWxsLFxuXHRcdFx0TGVmdDogbnVsbCxcblx0XHRcdFJpZ2h0OiBudWxsXG5cdFx0fTtcblxuXHRcdHRoaXMuR2V0SG9yekRpcmVjdGlvbihob3J6RWRnZSwgJHZhcik7XG5cdFx0dmFyIGRpciA9ICR2YXIuRGlyO1xuXHRcdHZhciBob3J6TGVmdCA9ICR2YXIuTGVmdDtcblx0XHR2YXIgaG9yelJpZ2h0ID0gJHZhci5SaWdodDtcblxuXHRcdHZhciBJc09wZW4gPSBob3J6RWRnZS5XaW5kRGVsdGEgPT09IDA7XG5cblx0XHR2YXIgZUxhc3RIb3J6ID0gaG9yekVkZ2UsXG5cdFx0XHRlTWF4UGFpciA9IG51bGw7XG5cdFx0d2hpbGUgKGVMYXN0SG9yei5OZXh0SW5MTUwgIT09IG51bGwgJiYgQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Jc0hvcml6b250YWwoZUxhc3RIb3J6Lk5leHRJbkxNTCkpXG5cdFx0XHRlTGFzdEhvcnogPSBlTGFzdEhvcnouTmV4dEluTE1MO1xuXHRcdGlmIChlTGFzdEhvcnouTmV4dEluTE1MID09PSBudWxsKVxuXHRcdFx0ZU1heFBhaXIgPSB0aGlzLkdldE1heGltYVBhaXIoZUxhc3RIb3J6KTtcblxuXHRcdHZhciBjdXJyTWF4ID0gdGhpcy5tX01heGltYTtcblx0XHRpZiAoY3Vyck1heCAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHQvL2dldCB0aGUgZmlyc3QgbWF4aW1hIGluIHJhbmdlIChYKSAuLi5cblx0XHRcdGlmIChkaXIgPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRMZWZ0VG9SaWdodClcblx0XHRcdHtcblx0XHRcdFx0d2hpbGUgKGN1cnJNYXggIT09IG51bGwgJiYgY3Vyck1heC5YIDw9IGhvcnpFZGdlLkJvdC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y3Vyck1heCA9IGN1cnJNYXguTmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY3Vyck1heCAhPT0gbnVsbCAmJiBjdXJyTWF4LlggPj0gZUxhc3RIb3J6LlRvcC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y3Vyck1heCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0d2hpbGUgKGN1cnJNYXguTmV4dCAhPT0gbnVsbCAmJiBjdXJyTWF4Lk5leHQuWCA8IGhvcnpFZGdlLkJvdC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y3Vyck1heCA9IGN1cnJNYXguTmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY3Vyck1heC5YIDw9IGVMYXN0SG9yei5Ub3AuWClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGN1cnJNYXggPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHZhciBvcDEgPSBudWxsO1xuXHRcdGZvciAoOzspIC8vbG9vcCB0aHJvdWdoIGNvbnNlYy4gaG9yaXpvbnRhbCBlZGdlc1xuXHRcdHtcblx0XHRcdHZhciBJc0xhc3RIb3J6ID0gKGhvcnpFZGdlID09PSBlTGFzdEhvcnopO1xuXHRcdFx0dmFyIGUgPSB0aGlzLkdldE5leHRJbkFFTChob3J6RWRnZSwgZGlyKTtcblx0XHRcdHdoaWxlIChlICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHQvL3RoaXMgY29kZSBibG9jayBpbnNlcnRzIGV4dHJhIGNvb3JkcyBpbnRvIGhvcml6b250YWwgZWRnZXMgKGluIG91dHB1dFxuXHRcdFx0XHQvL3BvbHlnb25zKSB3aGVyZWV2ZXIgbWF4aW1hIHRvdWNoIHRoZXNlIGhvcml6b250YWwgZWRnZXMuIFRoaXMgaGVscHNcblx0XHRcdFx0Ly8nc2ltcGxpZnlpbmcnIHBvbHlnb25zIChpZSBpZiB0aGUgU2ltcGxpZnkgcHJvcGVydHkgaXMgc2V0KS5cblx0XHRcdFx0aWYgKGN1cnJNYXggIT09IG51bGwpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoZGlyID09PSBDbGlwcGVyTGliLkRpcmVjdGlvbi5kTGVmdFRvUmlnaHQpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0d2hpbGUgKGN1cnJNYXggIT09IG51bGwgJiYgY3Vyck1heC5YIDwgZS5DdXJyLlgpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMCAmJiAhSXNPcGVuKVxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5BZGRPdXRQdChob3J6RWRnZSwgbmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKGN1cnJNYXguWCwgaG9yekVkZ2UuQm90LlkpKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRjdXJyTWF4ID0gY3Vyck1heC5OZXh0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0d2hpbGUgKGN1cnJNYXggIT09IG51bGwgJiYgY3Vyck1heC5YID4gZS5DdXJyLlgpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMCAmJiAhSXNPcGVuKVxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5BZGRPdXRQdChob3J6RWRnZSwgbmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKGN1cnJNYXguWCwgaG9yekVkZ2UuQm90LlkpKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRjdXJyTWF4ID0gY3Vyck1heC5QcmV2O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICgoZGlyID09PSBDbGlwcGVyTGliLkRpcmVjdGlvbi5kTGVmdFRvUmlnaHQgJiYgZS5DdXJyLlggPiBob3J6UmlnaHQpIHx8IChkaXIgPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRSaWdodFRvTGVmdCAmJiBlLkN1cnIuWCA8IGhvcnpMZWZ0KSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9BbHNvIGJyZWFrIGlmIHdlJ3ZlIGdvdCB0byB0aGUgZW5kIG9mIGFuIGludGVybWVkaWF0ZSBob3Jpem9udGFsIGVkZ2UgLi4uXG5cdFx0XHRcdC8vbmI6IFNtYWxsZXIgRHgncyBhcmUgdG8gdGhlIHJpZ2h0IG9mIGxhcmdlciBEeCdzIEFCT1ZFIHRoZSBob3Jpem9udGFsLlxuXHRcdFx0XHRpZiAoZS5DdXJyLlggPT09IGhvcnpFZGdlLlRvcC5YICYmIGhvcnpFZGdlLk5leHRJbkxNTCAhPT0gbnVsbCAmJiBlLkR4IDwgaG9yekVkZ2UuTmV4dEluTE1MLkR4KVxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMCAmJiAhSXNPcGVuKSAvL25vdGU6IG1heSBiZSBkb25lIG11bHRpcGxlIHRpbWVzXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlmIChkaXIgPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRMZWZ0VG9SaWdodClcblx0XHRcdFx0XHRcdFx0dGhpcy5TZXRaKGUuQ3VyciwgaG9yekVkZ2UsIGUpO1xuXHRcdFx0XHRcdFx0ZWxzZSB0aGlzLlNldFooZS5DdXJyLCBlLCBob3J6RWRnZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3AxID0gdGhpcy5BZGRPdXRQdChob3J6RWRnZSwgZS5DdXJyKTtcblx0XHRcdFx0XHR2YXIgZU5leHRIb3J6ID0gdGhpcy5tX1NvcnRlZEVkZ2VzO1xuXHRcdFx0XHRcdHdoaWxlIChlTmV4dEhvcnogIT09IG51bGwpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWYgKGVOZXh0SG9yei5PdXRJZHggPj0gMCAmJiB0aGlzLkhvcnpTZWdtZW50c092ZXJsYXAoaG9yekVkZ2UuQm90LlgsIGhvcnpFZGdlLlRvcC5YLCBlTmV4dEhvcnouQm90LlgsIGVOZXh0SG9yei5Ub3AuWCkpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHZhciBvcDIgPSB0aGlzLkdldExhc3RPdXRQdChlTmV4dEhvcnopO1xuXHRcdFx0XHRcdFx0XHR0aGlzLkFkZEpvaW4ob3AyLCBvcDEsIGVOZXh0SG9yei5Ub3ApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZU5leHRIb3J6ID0gZU5leHRIb3J6Lk5leHRJblNFTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5BZGRHaG9zdEpvaW4ob3AxLCBob3J6RWRnZS5Cb3QpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9PSywgc28gZmFyIHdlJ3JlIHN0aWxsIGluIHJhbmdlIG9mIHRoZSBob3Jpem9udGFsIEVkZ2UgIGJ1dCBtYWtlIHN1cmVcblx0XHRcdFx0Ly93ZSdyZSBhdCB0aGUgbGFzdCBvZiBjb25zZWMuIGhvcml6b250YWxzIHdoZW4gbWF0Y2hpbmcgd2l0aCBlTWF4UGFpclxuXHRcdFx0XHRpZiAoZSA9PT0gZU1heFBhaXIgJiYgSXNMYXN0SG9yeilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0aGlzLkFkZExvY2FsTWF4UG9seShob3J6RWRnZSwgZU1heFBhaXIsIGhvcnpFZGdlLlRvcCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuRGVsZXRlRnJvbUFFTChob3J6RWRnZSk7XG5cdFx0XHRcdFx0dGhpcy5EZWxldGVGcm9tQUVMKGVNYXhQYWlyKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZGlyID09PSBDbGlwcGVyTGliLkRpcmVjdGlvbi5kTGVmdFRvUmlnaHQpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgUHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoZS5DdXJyLlgsIGhvcnpFZGdlLkN1cnIuWSk7XG5cdFx0XHRcdFx0dGhpcy5JbnRlcnNlY3RFZGdlcyhob3J6RWRnZSwgZSwgUHQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBQdCA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MihlLkN1cnIuWCwgaG9yekVkZ2UuQ3Vyci5ZKTtcblx0XHRcdFx0XHR0aGlzLkludGVyc2VjdEVkZ2VzKGUsIGhvcnpFZGdlLCBQdCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGVOZXh0ID0gdGhpcy5HZXROZXh0SW5BRUwoZSwgZGlyKTtcblx0XHRcdFx0dGhpcy5Td2FwUG9zaXRpb25zSW5BRUwoaG9yekVkZ2UsIGUpO1xuXHRcdFx0XHRlID0gZU5leHQ7XG5cdFx0XHR9IC8vZW5kIHdoaWxlKGUgIT09IG51bGwpXG5cblx0XHRcdC8vQnJlYWsgb3V0IG9mIGxvb3AgaWYgSG9yekVkZ2UuTmV4dEluTE1MIGlzIG5vdCBhbHNvIGhvcml6b250YWwgLi4uXG5cdFx0XHRpZiAoaG9yekVkZ2UuTmV4dEluTE1MID09PSBudWxsIHx8ICFDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbChob3J6RWRnZS5OZXh0SW5MTUwpKVxuXHRcdFx0e1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0aG9yekVkZ2UgPSB0aGlzLlVwZGF0ZUVkZ2VJbnRvQUVMKGhvcnpFZGdlKTtcblx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChob3J6RWRnZSwgaG9yekVkZ2UuQm90KTtcblx0XHRcdH1cblxuXHRcdFx0JHZhciA9IHtcblx0XHRcdFx0RGlyOiBkaXIsXG5cdFx0XHRcdExlZnQ6IGhvcnpMZWZ0LFxuXHRcdFx0XHRSaWdodDogaG9yelJpZ2h0XG5cdFx0XHR9O1xuXG5cdFx0XHR0aGlzLkdldEhvcnpEaXJlY3Rpb24oaG9yekVkZ2UsICR2YXIpO1xuXHRcdFx0ZGlyID0gJHZhci5EaXI7XG5cdFx0XHRob3J6TGVmdCA9ICR2YXIuTGVmdDtcblx0XHRcdGhvcnpSaWdodCA9ICR2YXIuUmlnaHQ7XG5cblx0XHR9IC8vZW5kIGZvciAoOzspXG5cblx0XHRpZiAoaG9yekVkZ2UuT3V0SWR4ID49IDAgJiYgb3AxID09PSBudWxsKVxuXHRcdHtcblx0XHRcdG9wMSA9IHRoaXMuR2V0TGFzdE91dFB0KGhvcnpFZGdlKTtcblx0XHRcdHZhciBlTmV4dEhvcnogPSB0aGlzLm1fU29ydGVkRWRnZXM7XG5cdFx0XHR3aGlsZSAoZU5leHRIb3J6ICE9PSBudWxsKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoZU5leHRIb3J6Lk91dElkeCA+PSAwICYmIHRoaXMuSG9yelNlZ21lbnRzT3ZlcmxhcChob3J6RWRnZS5Cb3QuWCwgaG9yekVkZ2UuVG9wLlgsIGVOZXh0SG9yei5Cb3QuWCwgZU5leHRIb3J6LlRvcC5YKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBvcDIgPSB0aGlzLkdldExhc3RPdXRQdChlTmV4dEhvcnopO1xuXHRcdFx0XHRcdHRoaXMuQWRkSm9pbihvcDIsIG9wMSwgZU5leHRIb3J6LlRvcCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZU5leHRIb3J6ID0gZU5leHRIb3J6Lk5leHRJblNFTDtcblx0XHRcdH1cblx0XHRcdHRoaXMuQWRkR2hvc3RKb2luKG9wMSwgaG9yekVkZ2UuVG9wKTtcblx0XHR9XG5cblx0XHRpZiAoaG9yekVkZ2UuTmV4dEluTE1MICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMClcblx0XHRcdHtcblx0XHRcdFx0b3AxID0gdGhpcy5BZGRPdXRQdChob3J6RWRnZSwgaG9yekVkZ2UuVG9wKTtcblxuXHRcdFx0XHRob3J6RWRnZSA9IHRoaXMuVXBkYXRlRWRnZUludG9BRUwoaG9yekVkZ2UpO1xuXHRcdFx0XHRpZiAoaG9yekVkZ2UuV2luZERlbHRhID09PSAwKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vbmI6IEhvcnpFZGdlIGlzIG5vIGxvbmdlciBob3Jpem9udGFsIGhlcmVcblx0XHRcdFx0dmFyIGVQcmV2ID0gaG9yekVkZ2UuUHJldkluQUVMO1xuXHRcdFx0XHR2YXIgZU5leHQgPSBob3J6RWRnZS5OZXh0SW5BRUw7XG5cdFx0XHRcdGlmIChlUHJldiAhPT0gbnVsbCAmJiBlUHJldi5DdXJyLlggPT09IGhvcnpFZGdlLkJvdC5YICYmIGVQcmV2LkN1cnIuWSA9PT0gaG9yekVkZ2UuQm90LlkgJiYgZVByZXYuV2luZERlbHRhID09PSAwICYmIChlUHJldi5PdXRJZHggPj0gMCAmJiBlUHJldi5DdXJyLlkgPiBlUHJldi5Ub3AuWSAmJiBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsMyhob3J6RWRnZSwgZVByZXYsIHRoaXMubV9Vc2VGdWxsUmFuZ2UpKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBvcDIgPSB0aGlzLkFkZE91dFB0KGVQcmV2LCBob3J6RWRnZS5Cb3QpO1xuXHRcdFx0XHRcdHRoaXMuQWRkSm9pbihvcDEsIG9wMiwgaG9yekVkZ2UuVG9wKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmIChlTmV4dCAhPT0gbnVsbCAmJiBlTmV4dC5DdXJyLlggPT09IGhvcnpFZGdlLkJvdC5YICYmIGVOZXh0LkN1cnIuWSA9PT0gaG9yekVkZ2UuQm90LlkgJiYgZU5leHQuV2luZERlbHRhICE9PSAwICYmIGVOZXh0Lk91dElkeCA+PSAwICYmIGVOZXh0LkN1cnIuWSA+IGVOZXh0LlRvcC5ZICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWwzKGhvcnpFZGdlLCBlTmV4dCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR2YXIgb3AyID0gdGhpcy5BZGRPdXRQdChlTmV4dCwgaG9yekVkZ2UuQm90KTtcblx0XHRcdFx0XHR0aGlzLkFkZEpvaW4ob3AxLCBvcDIsIGhvcnpFZGdlLlRvcCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0aG9yekVkZ2UgPSB0aGlzLlVwZGF0ZUVkZ2VJbnRvQUVMKGhvcnpFZGdlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmIChob3J6RWRnZS5PdXRJZHggPj0gMClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChob3J6RWRnZSwgaG9yekVkZ2UuVG9wKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuRGVsZXRlRnJvbUFFTChob3J6RWRnZSk7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuR2V0TmV4dEluQUVMID0gZnVuY3Rpb24gKGUsIERpcmVjdGlvbilcblx0e1xuXHRcdHJldHVybiBEaXJlY3Rpb24gPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRMZWZ0VG9SaWdodCA/IGUuTmV4dEluQUVMIDogZS5QcmV2SW5BRUw7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Jc01pbmltYSA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0cmV0dXJuIGUgIT09IG51bGwgJiYgKGUuUHJldi5OZXh0SW5MTUwgIT09IGUpICYmIChlLk5leHQuTmV4dEluTE1MICE9PSBlKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLklzTWF4aW1hID0gZnVuY3Rpb24gKGUsIFkpXG5cdHtcblx0XHRyZXR1cm4gKGUgIT09IG51bGwgJiYgZS5Ub3AuWSA9PT0gWSAmJiBlLk5leHRJbkxNTCA9PT0gbnVsbCk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Jc0ludGVybWVkaWF0ZSA9IGZ1bmN0aW9uIChlLCBZKVxuXHR7XG5cdFx0cmV0dXJuIChlLlRvcC5ZID09PSBZICYmIGUuTmV4dEluTE1MICE9PSBudWxsKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldE1heGltYVBhaXIgPSBmdW5jdGlvbiAoZSlcblx0e1xuXHRcdGlmICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShlLk5leHQuVG9wLCBlLlRvcCkpICYmIGUuTmV4dC5OZXh0SW5MTUwgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIGUuTmV4dDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShlLlByZXYuVG9wLCBlLlRvcCkpICYmIGUuUHJldi5OZXh0SW5MTUwgPT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBlLlByZXY7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldE1heGltYVBhaXJFeCA9IGZ1bmN0aW9uIChlKVxuXHR7XG5cdFx0Ly9hcyBhYm92ZSBidXQgcmV0dXJucyBudWxsIGlmIE1heFBhaXIgaXNuJ3QgaW4gQUVMICh1bmxlc3MgaXQncyBob3Jpem9udGFsKVxuXHRcdHZhciByZXN1bHQgPSB0aGlzLkdldE1heGltYVBhaXIoZSk7XG5cdFx0aWYgKHJlc3VsdCA9PT0gbnVsbCB8fCByZXN1bHQuT3V0SWR4ID09PSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNraXAgfHxcblx0XHRcdCgocmVzdWx0Lk5leHRJbkFFTCA9PT0gcmVzdWx0LlByZXZJbkFFTCkgJiYgIUNsaXBwZXJMaWIuQ2xpcHBlckJhc2UuSXNIb3Jpem9udGFsKHJlc3VsdCkpKVxuXHRcdHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuUHJvY2Vzc0ludGVyc2VjdGlvbnMgPSBmdW5jdGlvbiAodG9wWSlcblx0e1xuXHRcdGlmICh0aGlzLm1fQWN0aXZlRWRnZXMgPT09IG51bGwpXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR0cnlcblx0XHR7XG5cdFx0XHR0aGlzLkJ1aWxkSW50ZXJzZWN0TGlzdCh0b3BZKTtcblx0XHRcdGlmICh0aGlzLm1fSW50ZXJzZWN0TGlzdC5sZW5ndGggPT09IDApXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0aWYgKHRoaXMubV9JbnRlcnNlY3RMaXN0Lmxlbmd0aCA9PT0gMSB8fCB0aGlzLkZpeHVwSW50ZXJzZWN0aW9uT3JkZXIoKSlcblx0XHRcdFx0dGhpcy5Qcm9jZXNzSW50ZXJzZWN0TGlzdCgpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGNhdGNoICgkJGUyKVxuXHRcdHtcblx0XHRcdHRoaXMubV9Tb3J0ZWRFZGdlcyA9IG51bGw7XG5cdFx0XHR0aGlzLm1fSW50ZXJzZWN0TGlzdC5sZW5ndGggPSAwO1xuXHRcdFx0Q2xpcHBlckxpYi5FcnJvcihcIlByb2Nlc3NJbnRlcnNlY3Rpb25zIGVycm9yXCIpO1xuXHRcdH1cblx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBudWxsO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuQnVpbGRJbnRlcnNlY3RMaXN0ID0gZnVuY3Rpb24gKHRvcFkpXG5cdHtcblx0XHRpZiAodGhpcy5tX0FjdGl2ZUVkZ2VzID09PSBudWxsKVxuXHRcdFx0cmV0dXJuO1xuXHRcdC8vcHJlcGFyZSBmb3Igc29ydGluZyAuLi5cblx0XHR2YXIgZSA9IHRoaXMubV9BY3RpdmVFZGdlcztcblx0XHQvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KEpTT04uZGVjeWNsZSggZSApKSk7XG5cdFx0dGhpcy5tX1NvcnRlZEVkZ2VzID0gZTtcblx0XHR3aGlsZSAoZSAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHRlLlByZXZJblNFTCA9IGUuUHJldkluQUVMO1xuXHRcdFx0ZS5OZXh0SW5TRUwgPSBlLk5leHRJbkFFTDtcblx0XHRcdGUuQ3Vyci5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZSwgdG9wWSk7XG5cdFx0XHRlID0gZS5OZXh0SW5BRUw7XG5cdFx0fVxuXHRcdC8vYnViYmxlc29ydCAuLi5cblx0XHR2YXIgaXNNb2RpZmllZCA9IHRydWU7XG5cdFx0d2hpbGUgKGlzTW9kaWZpZWQgJiYgdGhpcy5tX1NvcnRlZEVkZ2VzICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdGlzTW9kaWZpZWQgPSBmYWxzZTtcblx0XHRcdGUgPSB0aGlzLm1fU29ydGVkRWRnZXM7XG5cdFx0XHR3aGlsZSAoZS5OZXh0SW5TRUwgIT09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBlTmV4dCA9IGUuTmV4dEluU0VMO1xuXHRcdFx0XHR2YXIgcHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDAoKTtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhcImUuQ3Vyci5YOiBcIiArIGUuQ3Vyci5YICsgXCIgZU5leHQuQ3Vyci5YXCIgKyBlTmV4dC5DdXJyLlgpO1xuXHRcdFx0XHRpZiAoZS5DdXJyLlggPiBlTmV4dC5DdXJyLlgpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0aGlzLkludGVyc2VjdFBvaW50KGUsIGVOZXh0LCBwdCk7XG5cdFx0XHRcdFx0aWYgKHB0LlkgPCB0b3BZKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHB0ID0gbmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGUsIHRvcFkpLCB0b3BZKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIG5ld05vZGUgPSBuZXcgQ2xpcHBlckxpYi5JbnRlcnNlY3ROb2RlKCk7XG5cdFx0XHRcdFx0bmV3Tm9kZS5FZGdlMSA9IGU7XG5cdFx0XHRcdFx0bmV3Tm9kZS5FZGdlMiA9IGVOZXh0O1xuXHRcdFx0XHRcdC8vbmV3Tm9kZS5QdCA9IHB0O1xuXHRcdFx0XHRcdG5ld05vZGUuUHQuWCA9IHB0Llg7XG5cdFx0XHRcdFx0bmV3Tm9kZS5QdC5ZID0gcHQuWTtcblx0XHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBuZXdOb2RlLlB0LlogPSBwdC5aO1xuXHRcdFx0XHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0LnB1c2gobmV3Tm9kZSk7XG5cdFx0XHRcdFx0dGhpcy5Td2FwUG9zaXRpb25zSW5TRUwoZSwgZU5leHQpO1xuXHRcdFx0XHRcdGlzTW9kaWZpZWQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRlID0gZU5leHQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZS5QcmV2SW5TRUwgIT09IG51bGwpXG5cdFx0XHRcdGUuUHJldkluU0VMLk5leHRJblNFTCA9IG51bGw7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHR0aGlzLm1fU29ydGVkRWRnZXMgPSBudWxsO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRWRnZXNBZGphY2VudCA9IGZ1bmN0aW9uIChpbm9kZSlcblx0e1xuXHRcdHJldHVybiAoaW5vZGUuRWRnZTEuTmV4dEluU0VMID09PSBpbm9kZS5FZGdlMikgfHwgKGlub2RlLkVkZ2UxLlByZXZJblNFTCA9PT0gaW5vZGUuRWRnZTIpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5JbnRlcnNlY3ROb2RlU29ydCA9IGZ1bmN0aW9uIChub2RlMSwgbm9kZTIpXG5cdHtcblx0XHQvL3RoZSBmb2xsb3dpbmcgdHlwZWNhc3QgaXMgc2FmZSBiZWNhdXNlIHRoZSBkaWZmZXJlbmNlcyBpbiBQdC5ZIHdpbGxcblx0XHQvL2JlIGxpbWl0ZWQgdG8gdGhlIGhlaWdodCBvZiB0aGUgc2NhbmJlYW0uXG5cdFx0cmV0dXJuIChub2RlMi5QdC5ZIC0gbm9kZTEuUHQuWSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5GaXh1cEludGVyc2VjdGlvbk9yZGVyID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdC8vcHJlLWNvbmRpdGlvbjogaW50ZXJzZWN0aW9ucyBhcmUgc29ydGVkIGJvdHRvbS1tb3N0IGZpcnN0LlxuXHRcdC8vTm93IGl0J3MgY3J1Y2lhbCB0aGF0IGludGVyc2VjdGlvbnMgYXJlIG1hZGUgb25seSBiZXR3ZWVuIGFkamFjZW50IGVkZ2VzLFxuXHRcdC8vc28gdG8gZW5zdXJlIHRoaXMgdGhlIG9yZGVyIG9mIGludGVyc2VjdGlvbnMgbWF5IG5lZWQgYWRqdXN0aW5nIC4uLlxuXHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0LnNvcnQodGhpcy5tX0ludGVyc2VjdE5vZGVDb21wYXJlcik7XG5cdFx0dGhpcy5Db3B5QUVMVG9TRUwoKTtcblx0XHR2YXIgY250ID0gdGhpcy5tX0ludGVyc2VjdExpc3QubGVuZ3RoO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY250OyBpKyspXG5cdFx0e1xuXHRcdFx0aWYgKCF0aGlzLkVkZ2VzQWRqYWNlbnQodGhpcy5tX0ludGVyc2VjdExpc3RbaV0pKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgaiA9IGkgKyAxO1xuXHRcdFx0XHR3aGlsZSAoaiA8IGNudCAmJiAhdGhpcy5FZGdlc0FkamFjZW50KHRoaXMubV9JbnRlcnNlY3RMaXN0W2pdKSlcblx0XHRcdFx0XHRqKys7XG5cdFx0XHRcdGlmIChqID09PSBjbnQpXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR2YXIgdG1wID0gdGhpcy5tX0ludGVyc2VjdExpc3RbaV07XG5cdFx0XHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0W2ldID0gdGhpcy5tX0ludGVyc2VjdExpc3Rbal07XG5cdFx0XHRcdHRoaXMubV9JbnRlcnNlY3RMaXN0W2pdID0gdG1wO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5Td2FwUG9zaXRpb25zSW5TRUwodGhpcy5tX0ludGVyc2VjdExpc3RbaV0uRWRnZTEsIHRoaXMubV9JbnRlcnNlY3RMaXN0W2ldLkVkZ2UyKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Qcm9jZXNzSW50ZXJzZWN0TGlzdCA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IHRoaXMubV9JbnRlcnNlY3RMaXN0Lmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHR2YXIgaU5vZGUgPSB0aGlzLm1fSW50ZXJzZWN0TGlzdFtpXTtcblx0XHRcdHRoaXMuSW50ZXJzZWN0RWRnZXMoaU5vZGUuRWRnZTEsIGlOb2RlLkVkZ2UyLCBpTm9kZS5QdCk7XG5cdFx0XHR0aGlzLlN3YXBQb3NpdGlvbnNJbkFFTChpTm9kZS5FZGdlMSwgaU5vZGUuRWRnZTIpO1xuXHRcdH1cblx0XHR0aGlzLm1fSW50ZXJzZWN0TGlzdC5sZW5ndGggPSAwO1xuXHR9O1xuXG5cdC8qXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFJvdW5kIHNwZWVkdGVzdDogaHR0cDovL2pzcGVyZi5jb20vZmFzdGVzdC1yb3VuZFxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQqL1xuXHR2YXIgUjEgPSBmdW5jdGlvbiAoYSlcblx0e1xuXHRcdHJldHVybiBhIDwgMCA/IE1hdGguY2VpbChhIC0gMC41KSA6IE1hdGgucm91bmQoYSlcblx0fTtcblxuXHR2YXIgUjIgPSBmdW5jdGlvbiAoYSlcblx0e1xuXHRcdHJldHVybiBhIDwgMCA/IE1hdGguY2VpbChhIC0gMC41KSA6IE1hdGguZmxvb3IoYSArIDAuNSlcblx0fTtcblxuXHR2YXIgUjMgPSBmdW5jdGlvbiAoYSlcblx0e1xuXHRcdHJldHVybiBhIDwgMCA/IC1NYXRoLnJvdW5kKE1hdGguYWJzKGEpKSA6IE1hdGgucm91bmQoYSlcblx0fTtcblxuXHR2YXIgUjQgPSBmdW5jdGlvbiAoYSlcblx0e1xuXHRcdGlmIChhIDwgMClcblx0XHR7XG5cdFx0XHRhIC09IDAuNTtcblx0XHRcdHJldHVybiBhIDwgLTIxNDc0ODM2NDggPyBNYXRoLmNlaWwoYSkgOiBhIHwgMDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGEgKz0gMC41O1xuXHRcdFx0cmV0dXJuIGEgPiAyMTQ3NDgzNjQ3ID8gTWF0aC5mbG9vcihhKSA6IGEgfCAwO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoYnJvd3Nlci5tc2llKSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQgPSBSMTtcblx0ZWxzZSBpZiAoYnJvd3Nlci5jaHJvbWl1bSkgQ2xpcHBlckxpYi5DbGlwcGVyLlJvdW5kID0gUjM7XG5cdGVsc2UgaWYgKGJyb3dzZXIuc2FmYXJpKSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQgPSBSNDtcblx0ZWxzZSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQgPSBSMjsgLy8gZWcuIGJyb3dzZXIuY2hyb21lIHx8IGJyb3dzZXIuZmlyZWZveCB8fCBicm93c2VyLm9wZXJhXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYID0gZnVuY3Rpb24gKGVkZ2UsIGN1cnJlbnRZKVxuXHR7XG5cdFx0Ly9pZiAoZWRnZS5Cb3QgPT0gZWRnZS5DdXJyKSBhbGVydCAoXCJlZGdlLkJvdCA9IGVkZ2UuQ3VyclwiKTtcblx0XHQvL2lmIChlZGdlLkJvdCA9PSBlZGdlLlRvcCkgYWxlcnQgKFwiZWRnZS5Cb3QgPSBlZGdlLlRvcFwiKTtcblx0XHRpZiAoY3VycmVudFkgPT09IGVkZ2UuVG9wLlkpXG5cdFx0XHRyZXR1cm4gZWRnZS5Ub3AuWDtcblx0XHRyZXR1cm4gZWRnZS5Cb3QuWCArIENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZChlZGdlLkR4ICogKGN1cnJlbnRZIC0gZWRnZS5Cb3QuWSkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuSW50ZXJzZWN0UG9pbnQgPSBmdW5jdGlvbiAoZWRnZTEsIGVkZ2UyLCBpcClcblx0e1xuXHRcdGlwLlggPSAwO1xuXHRcdGlwLlkgPSAwO1xuXHRcdHZhciBiMSwgYjI7XG5cdFx0Ly9uYjogd2l0aCB2ZXJ5IGxhcmdlIGNvb3JkaW5hdGUgdmFsdWVzLCBpdCdzIHBvc3NpYmxlIGZvciBTbG9wZXNFcXVhbCgpIHRvXG5cdFx0Ly9yZXR1cm4gZmFsc2UgYnV0IGZvciB0aGUgZWRnZS5EeCB2YWx1ZSBiZSBlcXVhbCBkdWUgdG8gZG91YmxlIHByZWNpc2lvbiByb3VuZGluZy5cblx0XHRpZiAoZWRnZTEuRHggPT09IGVkZ2UyLkR4KVxuXHRcdHtcblx0XHRcdGlwLlkgPSBlZGdlMS5DdXJyLlk7XG5cdFx0XHRpcC5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZWRnZTEsIGlwLlkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAoZWRnZTEuRGVsdGEuWCA9PT0gMClcblx0XHR7XG5cdFx0XHRpcC5YID0gZWRnZTEuQm90Llg7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Jc0hvcml6b250YWwoZWRnZTIpKVxuXHRcdFx0e1xuXHRcdFx0XHRpcC5ZID0gZWRnZTIuQm90Llk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdGIyID0gZWRnZTIuQm90LlkgLSAoZWRnZTIuQm90LlggLyBlZGdlMi5EeCk7XG5cdFx0XHRcdGlwLlkgPSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQoaXAuWCAvIGVkZ2UyLkR4ICsgYjIpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGlmIChlZGdlMi5EZWx0YS5YID09PSAwKVxuXHRcdHtcblx0XHRcdGlwLlggPSBlZGdlMi5Cb3QuWDtcblx0XHRcdGlmIChDbGlwcGVyTGliLkNsaXBwZXJCYXNlLklzSG9yaXpvbnRhbChlZGdlMSkpXG5cdFx0XHR7XG5cdFx0XHRcdGlwLlkgPSBlZGdlMS5Cb3QuWTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0YjEgPSBlZGdlMS5Cb3QuWSAtIChlZGdlMS5Cb3QuWCAvIGVkZ2UxLkR4KTtcblx0XHRcdFx0aXAuWSA9IENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZChpcC5YIC8gZWRnZTEuRHggKyBiMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRiMSA9IGVkZ2UxLkJvdC5YIC0gZWRnZTEuQm90LlkgKiBlZGdlMS5EeDtcblx0XHRcdGIyID0gZWRnZTIuQm90LlggLSBlZGdlMi5Cb3QuWSAqIGVkZ2UyLkR4O1xuXHRcdFx0dmFyIHEgPSAoYjIgLSBiMSkgLyAoZWRnZTEuRHggLSBlZGdlMi5EeCk7XG5cdFx0XHRpcC5ZID0gQ2xpcHBlckxpYi5DbGlwcGVyLlJvdW5kKHEpO1xuXHRcdFx0aWYgKE1hdGguYWJzKGVkZ2UxLkR4KSA8IE1hdGguYWJzKGVkZ2UyLkR4KSlcblx0XHRcdFx0aXAuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZChlZGdlMS5EeCAqIHEgKyBiMSk7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGlwLlggPSBDbGlwcGVyTGliLkNsaXBwZXIuUm91bmQoZWRnZTIuRHggKiBxICsgYjIpO1xuXHRcdH1cblx0XHRpZiAoaXAuWSA8IGVkZ2UxLlRvcC5ZIHx8IGlwLlkgPCBlZGdlMi5Ub3AuWSlcblx0XHR7XG5cdFx0XHRpZiAoZWRnZTEuVG9wLlkgPiBlZGdlMi5Ub3AuWSlcblx0XHRcdHtcblx0XHRcdFx0aXAuWSA9IGVkZ2UxLlRvcC5ZO1xuXHRcdFx0XHRpcC5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZWRnZTIsIGVkZ2UxLlRvcC5ZKTtcblx0XHRcdFx0cmV0dXJuIGlwLlggPCBlZGdlMS5Ub3AuWDtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0aXAuWSA9IGVkZ2UyLlRvcC5ZO1xuXHRcdFx0aWYgKE1hdGguYWJzKGVkZ2UxLkR4KSA8IE1hdGguYWJzKGVkZ2UyLkR4KSlcblx0XHRcdFx0aXAuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGVkZ2UxLCBpcC5ZKTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0aXAuWCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Ub3BYKGVkZ2UyLCBpcC5ZKTtcblx0XHR9XG5cdFx0Ly9maW5hbGx5LCBkb24ndCBhbGxvdyAnaXAnIHRvIGJlIEJFTE9XIGN1cnIuWSAoaWUgYm90dG9tIG9mIHNjYW5iZWFtKSAuLi5cblx0XHRpZiAoaXAuWSA+IGVkZ2UxLkN1cnIuWSlcblx0XHR7XG5cdFx0XHRpcC5ZID0gZWRnZTEuQ3Vyci5ZO1xuXHRcdFx0Ly9iZXR0ZXIgdG8gdXNlIHRoZSBtb3JlIHZlcnRpY2FsIGVkZ2UgdG8gZGVyaXZlIFggLi4uXG5cdFx0XHRpZiAoTWF0aC5hYnMoZWRnZTEuRHgpID4gTWF0aC5hYnMoZWRnZTIuRHgpKVxuXHRcdFx0XHRpcC5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZWRnZTIsIGlwLlkpO1xuXHRcdFx0ZWxzZVxuXHRcdFx0XHRpcC5YID0gQ2xpcHBlckxpYi5DbGlwcGVyLlRvcFgoZWRnZTEsIGlwLlkpO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLlByb2Nlc3NFZGdlc0F0VG9wT2ZTY2FuYmVhbSA9IGZ1bmN0aW9uICh0b3BZKVxuXHR7XG5cdFx0dmFyIGUgPSB0aGlzLm1fQWN0aXZlRWRnZXM7XG5cblx0XHR3aGlsZSAoZSAhPT0gbnVsbClcblx0XHR7XG5cdFx0XHQvLzEuIHByb2Nlc3MgbWF4aW1hLCB0cmVhdGluZyB0aGVtIGFzIGlmIHRoZXkncmUgJ2JlbnQnIGhvcml6b250YWwgZWRnZXMsXG5cdFx0XHQvLyAgIGJ1dCBleGNsdWRlIG1heGltYSB3aXRoIGhvcml6b250YWwgZWRnZXMuIG5iOiBlIGNhbid0IGJlIGEgaG9yaXpvbnRhbC5cblx0XHRcdHZhciBJc01heGltYUVkZ2UgPSB0aGlzLklzTWF4aW1hKGUsIHRvcFkpO1xuXHRcdFx0aWYgKElzTWF4aW1hRWRnZSlcblx0XHRcdHtcblx0XHRcdFx0dmFyIGVNYXhQYWlyID0gdGhpcy5HZXRNYXhpbWFQYWlyRXgoZSk7XG5cdFx0XHRcdElzTWF4aW1hRWRnZSA9IChlTWF4UGFpciA9PT0gbnVsbCB8fCAhQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5Jc0hvcml6b250YWwoZU1heFBhaXIpKTtcblx0XHRcdH1cblx0XHRcdGlmIChJc01heGltYUVkZ2UpXG5cdFx0XHR7XG5cdFx0XHRcdGlmICh0aGlzLlN0cmljdGx5U2ltcGxlKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dGhpcy5JbnNlcnRNYXhpbWEoZS5Ub3AuWCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGVQcmV2ID0gZS5QcmV2SW5BRUw7XG5cdFx0XHRcdHRoaXMuRG9NYXhpbWEoZSk7XG5cdFx0XHRcdGlmIChlUHJldiA9PT0gbnVsbClcblx0XHRcdFx0XHRlID0gdGhpcy5tX0FjdGl2ZUVkZ2VzO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0ZSA9IGVQcmV2Lk5leHRJbkFFTDtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0Ly8yLiBwcm9tb3RlIGhvcml6b250YWwgZWRnZXMsIG90aGVyd2lzZSB1cGRhdGUgQ3Vyci5YIGFuZCBDdXJyLlkgLi4uXG5cdFx0XHRcdGlmICh0aGlzLklzSW50ZXJtZWRpYXRlKGUsIHRvcFkpICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuSXNIb3Jpem9udGFsKGUuTmV4dEluTE1MKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGUgPSB0aGlzLlVwZGF0ZUVkZ2VJbnRvQUVMKGUpO1xuXHRcdFx0XHRcdGlmIChlLk91dElkeCA+PSAwKVxuXHRcdFx0XHRcdFx0dGhpcy5BZGRPdXRQdChlLCBlLkJvdCk7XG5cdFx0XHRcdFx0dGhpcy5BZGRFZGdlVG9TRUwoZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ZS5DdXJyLlggPSBDbGlwcGVyTGliLkNsaXBwZXIuVG9wWChlLCB0b3BZKTtcblx0XHRcdFx0XHRlLkN1cnIuWSA9IHRvcFk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKGUuVG9wLlkgPT09IHRvcFkpIGUuQ3Vyci5aID0gZS5Ub3AuWjtcblx0XHRcdFx0XHRlbHNlIGlmIChlLkJvdC5ZID09PSB0b3BZKSBlLkN1cnIuWiA9IGUuQm90Llo7XG5cdFx0XHRcdFx0ZWxzZSBlLkN1cnIuWiA9IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL1doZW4gU3RyaWN0bHlTaW1wbGUgYW5kICdlJyBpcyBiZWluZyB0b3VjaGVkIGJ5IGFub3RoZXIgZWRnZSwgdGhlblxuXHRcdFx0XHQvL21ha2Ugc3VyZSBib3RoIGVkZ2VzIGhhdmUgYSB2ZXJ0ZXggaGVyZSAuLi4gICAgICAgIFxuXHRcdFx0XHRpZiAodGhpcy5TdHJpY3RseVNpbXBsZSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBlUHJldiA9IGUuUHJldkluQUVMO1xuXHRcdFx0XHRcdGlmICgoZS5PdXRJZHggPj0gMCkgJiYgKGUuV2luZERlbHRhICE9PSAwKSAmJiBlUHJldiAhPT0gbnVsbCAmJlxuXHRcdFx0XHRcdFx0KGVQcmV2Lk91dElkeCA+PSAwKSAmJiAoZVByZXYuQ3Vyci5YID09PSBlLkN1cnIuWCkgJiZcblx0XHRcdFx0XHRcdChlUHJldi5XaW5kRGVsdGEgIT09IDApKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHZhciBpcCA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MShlLkN1cnIpO1xuXG5cdFx0XHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0aGlzLlNldFooaXAsIGVQcmV2LCBlKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIG9wID0gdGhpcy5BZGRPdXRQdChlUHJldiwgaXApO1xuXHRcdFx0XHRcdFx0dmFyIG9wMiA9IHRoaXMuQWRkT3V0UHQoZSwgaXApO1xuXHRcdFx0XHRcdFx0dGhpcy5BZGRKb2luKG9wLCBvcDIsIGlwKTsgLy9TdHJpY3RseVNpbXBsZSAodHlwZS0zKSBqb2luXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGUgPSBlLk5leHRJbkFFTDtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8zLiBQcm9jZXNzIGhvcml6b250YWxzIGF0IHRoZSBUb3Agb2YgdGhlIHNjYW5iZWFtIC4uLlxuXHRcdHRoaXMuUHJvY2Vzc0hvcml6b250YWxzKCk7XG5cdFx0dGhpcy5tX01heGltYSA9IG51bGw7XG5cdFx0Ly80LiBQcm9tb3RlIGludGVybWVkaWF0ZSB2ZXJ0aWNlcyAuLi5cblx0XHRlID0gdGhpcy5tX0FjdGl2ZUVkZ2VzO1xuXHRcdHdoaWxlIChlICE9PSBudWxsKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLklzSW50ZXJtZWRpYXRlKGUsIHRvcFkpKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgb3AgPSBudWxsO1xuXHRcdFx0XHRpZiAoZS5PdXRJZHggPj0gMClcblx0XHRcdFx0XHRvcCA9IHRoaXMuQWRkT3V0UHQoZSwgZS5Ub3ApO1xuXHRcdFx0XHRlID0gdGhpcy5VcGRhdGVFZGdlSW50b0FFTChlKTtcblx0XHRcdFx0Ly9pZiBvdXRwdXQgcG9seWdvbnMgc2hhcmUgYW4gZWRnZSwgdGhleSdsbCBuZWVkIGpvaW5pbmcgbGF0ZXIgLi4uXG5cdFx0XHRcdHZhciBlUHJldiA9IGUuUHJldkluQUVMO1xuXHRcdFx0XHR2YXIgZU5leHQgPSBlLk5leHRJbkFFTDtcblxuXHRcdFx0XHRpZiAoZVByZXYgIT09IG51bGwgJiYgZVByZXYuQ3Vyci5YID09PSBlLkJvdC5YICYmIGVQcmV2LkN1cnIuWSA9PT0gZS5Cb3QuWSAmJiBvcCAhPT0gbnVsbCAmJiBlUHJldi5PdXRJZHggPj0gMCAmJiBlUHJldi5DdXJyLlkgPT09IGVQcmV2LlRvcC5ZICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw1KGUuQ3VyciwgZS5Ub3AsIGVQcmV2LkN1cnIsIGVQcmV2LlRvcCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkgJiYgKGUuV2luZERlbHRhICE9PSAwKSAmJiAoZVByZXYuV2luZERlbHRhICE9PSAwKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBvcDIgPSB0aGlzLkFkZE91dFB0KGVQcmV2MiwgZS5Cb3QpO1xuXHRcdFx0XHRcdHRoaXMuQWRkSm9pbihvcCwgb3AyLCBlLlRvcCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZiAoZU5leHQgIT09IG51bGwgJiYgZU5leHQuQ3Vyci5YID09PSBlLkJvdC5YICYmIGVOZXh0LkN1cnIuWSA9PT0gZS5Cb3QuWSAmJiBvcCAhPT0gbnVsbCAmJiBlTmV4dC5PdXRJZHggPj0gMCAmJiBlTmV4dC5DdXJyLlkgPT09IGVOZXh0LlRvcC5ZICYmIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw1KGUuQ3VyciwgZS5Ub3AsIGVOZXh0LkN1cnIsIGVOZXh0LlRvcCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkgJiYgKGUuV2luZERlbHRhICE9PSAwKSAmJiAoZU5leHQuV2luZERlbHRhICE9PSAwKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBvcDIgPSB0aGlzLkFkZE91dFB0KGVOZXh0LCBlLkJvdCk7XG5cdFx0XHRcdFx0dGhpcy5BZGRKb2luKG9wLCBvcDIsIGUuVG9wKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZSA9IGUuTmV4dEluQUVMO1xuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkRvTWF4aW1hID0gZnVuY3Rpb24gKGUpXG5cdHtcblx0XHR2YXIgZU1heFBhaXIgPSB0aGlzLkdldE1heGltYVBhaXJFeChlKTtcblx0XHRpZiAoZU1heFBhaXIgPT09IG51bGwpXG5cdFx0e1xuXHRcdFx0aWYgKGUuT3V0SWR4ID49IDApXG5cdFx0XHRcdHRoaXMuQWRkT3V0UHQoZSwgZS5Ub3ApO1xuXHRcdFx0dGhpcy5EZWxldGVGcm9tQUVMKGUpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR2YXIgZU5leHQgPSBlLk5leHRJbkFFTDtcblx0XHR3aGlsZSAoZU5leHQgIT09IG51bGwgJiYgZU5leHQgIT09IGVNYXhQYWlyKVxuXHRcdHtcblx0XHRcdHRoaXMuSW50ZXJzZWN0RWRnZXMoZSwgZU5leHQsIGUuVG9wKTtcblx0XHRcdHRoaXMuU3dhcFBvc2l0aW9uc0luQUVMKGUsIGVOZXh0KTtcblx0XHRcdGVOZXh0ID0gZS5OZXh0SW5BRUw7XG5cdFx0fVxuXHRcdGlmIChlLk91dElkeCA9PT0gLTEgJiYgZU1heFBhaXIuT3V0SWR4ID09PSAtMSlcblx0XHR7XG5cdFx0XHR0aGlzLkRlbGV0ZUZyb21BRUwoZSk7XG5cdFx0XHR0aGlzLkRlbGV0ZUZyb21BRUwoZU1heFBhaXIpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChlLk91dElkeCA+PSAwICYmIGVNYXhQYWlyLk91dElkeCA+PSAwKVxuXHRcdHtcblx0XHRcdGlmIChlLk91dElkeCA+PSAwKSB0aGlzLkFkZExvY2FsTWF4UG9seShlLCBlTWF4UGFpciwgZS5Ub3ApO1xuXHRcdFx0dGhpcy5EZWxldGVGcm9tQUVMKGUpO1xuXHRcdFx0dGhpcy5EZWxldGVGcm9tQUVMKGVNYXhQYWlyKTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoQ2xpcHBlckxpYi51c2VfbGluZXMgJiYgZS5XaW5kRGVsdGEgPT09IDApXG5cdFx0e1xuXHRcdFx0aWYgKGUuT3V0SWR4ID49IDApXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuQWRkT3V0UHQoZSwgZS5Ub3ApO1xuXHRcdFx0XHRlLk91dElkeCA9IENsaXBwZXJMaWIuQ2xpcHBlckJhc2UuVW5hc3NpZ25lZDtcblx0XHRcdH1cblx0XHRcdHRoaXMuRGVsZXRlRnJvbUFFTChlKTtcblx0XHRcdGlmIChlTWF4UGFpci5PdXRJZHggPj0gMClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5BZGRPdXRQdChlTWF4UGFpciwgZS5Ub3ApO1xuXHRcdFx0XHRlTWF4UGFpci5PdXRJZHggPSBDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlVuYXNzaWduZWQ7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLkRlbGV0ZUZyb21BRUwoZU1heFBhaXIpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiRG9NYXhpbWEgZXJyb3JcIik7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLlJldmVyc2VQYXRocyA9IGZ1bmN0aW9uIChwb2x5cylcblx0e1xuXHRcdGZvciAodmFyIGkgPSAwLCBsZW4gPSBwb2x5cy5sZW5ndGg7IGkgPCBsZW47IGkrKylcblx0XHRcdHBvbHlzW2ldLnJldmVyc2UoKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuT3JpZW50YXRpb24gPSBmdW5jdGlvbiAocG9seSlcblx0e1xuXHRcdHJldHVybiBDbGlwcGVyTGliLkNsaXBwZXIuQXJlYShwb2x5KSA+PSAwO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuUG9pbnRDb3VudCA9IGZ1bmN0aW9uIChwdHMpXG5cdHtcblx0XHRpZiAocHRzID09PSBudWxsKVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0dmFyIHJlc3VsdCA9IDA7XG5cdFx0dmFyIHAgPSBwdHM7XG5cdFx0ZG8ge1xuXHRcdFx0cmVzdWx0Kys7XG5cdFx0XHRwID0gcC5OZXh0O1xuXHRcdH1cblx0XHR3aGlsZSAocCAhPT0gcHRzKVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5CdWlsZFJlc3VsdCA9IGZ1bmN0aW9uIChwb2x5Zylcblx0e1xuXHRcdENsaXBwZXJMaWIuQ2xlYXIocG9seWcpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHR2YXIgb3V0UmVjID0gdGhpcy5tX1BvbHlPdXRzW2ldO1xuXHRcdFx0aWYgKG91dFJlYy5QdHMgPT09IG51bGwpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0dmFyIHAgPSBvdXRSZWMuUHRzLlByZXY7XG5cdFx0XHR2YXIgY250ID0gdGhpcy5Qb2ludENvdW50KHApO1xuXHRcdFx0aWYgKGNudCA8IDIpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0dmFyIHBnID0gbmV3IEFycmF5KGNudCk7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNudDsgaisrKVxuXHRcdFx0e1xuXHRcdFx0XHRwZ1tqXSA9IHAuUHQ7XG5cdFx0XHRcdHAgPSBwLlByZXY7XG5cdFx0XHR9XG5cdFx0XHRwb2x5Zy5wdXNoKHBnKTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5CdWlsZFJlc3VsdDIgPSBmdW5jdGlvbiAocG9seXRyZWUpXG5cdHtcblx0XHRwb2x5dHJlZS5DbGVhcigpO1xuXHRcdC8vYWRkIGVhY2ggb3V0cHV0IHBvbHlnb24vY29udG91ciB0byBwb2x5dHJlZSAuLi5cblx0XHQvL3BvbHl0cmVlLm1fQWxsUG9seXMuc2V0X0NhcGFjaXR5KHRoaXMubV9Qb2x5T3V0cy5sZW5ndGgpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5tX1BvbHlPdXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHR2YXIgb3V0UmVjID0gdGhpcy5tX1BvbHlPdXRzW2ldO1xuXHRcdFx0dmFyIGNudCA9IHRoaXMuUG9pbnRDb3VudChvdXRSZWMuUHRzKTtcblx0XHRcdGlmICgob3V0UmVjLklzT3BlbiAmJiBjbnQgPCAyKSB8fCAoIW91dFJlYy5Jc09wZW4gJiYgY250IDwgMykpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0dGhpcy5GaXhIb2xlTGlua2FnZShvdXRSZWMpO1xuXHRcdFx0dmFyIHBuID0gbmV3IENsaXBwZXJMaWIuUG9seU5vZGUoKTtcblx0XHRcdHBvbHl0cmVlLm1fQWxsUG9seXMucHVzaChwbik7XG5cdFx0XHRvdXRSZWMuUG9seU5vZGUgPSBwbjtcblx0XHRcdHBuLm1fcG9seWdvbi5sZW5ndGggPSBjbnQ7XG5cdFx0XHR2YXIgb3AgPSBvdXRSZWMuUHRzLlByZXY7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNudDsgaisrKVxuXHRcdFx0e1xuXHRcdFx0XHRwbi5tX3BvbHlnb25bal0gPSBvcC5QdDtcblx0XHRcdFx0b3AgPSBvcC5QcmV2O1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvL2ZpeHVwIFBvbHlOb2RlIGxpbmtzIGV0YyAuLi5cblx0XHQvL3BvbHl0cmVlLm1fQ2hpbGRzLnNldF9DYXBhY2l0eSh0aGlzLm1fUG9seU91dHMubGVuZ3RoKTtcblx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IHRoaXMubV9Qb2x5T3V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspXG5cdFx0e1xuXHRcdFx0dmFyIG91dFJlYyA9IHRoaXMubV9Qb2x5T3V0c1tpXTtcblx0XHRcdGlmIChvdXRSZWMuUG9seU5vZGUgPT09IG51bGwpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0ZWxzZSBpZiAob3V0UmVjLklzT3Blbilcblx0XHRcdHtcblx0XHRcdFx0b3V0UmVjLlBvbHlOb2RlLklzT3BlbiA9IHRydWU7XG5cdFx0XHRcdHBvbHl0cmVlLkFkZENoaWxkKG91dFJlYy5Qb2x5Tm9kZSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChvdXRSZWMuRmlyc3RMZWZ0ICE9PSBudWxsICYmIG91dFJlYy5GaXJzdExlZnQuUG9seU5vZGUgIT09IG51bGwpXG5cdFx0XHRcdG91dFJlYy5GaXJzdExlZnQuUG9seU5vZGUuQWRkQ2hpbGQob3V0UmVjLlBvbHlOb2RlKTtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cG9seXRyZWUuQWRkQ2hpbGQob3V0UmVjLlBvbHlOb2RlKTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5GaXh1cE91dFBvbHlsaW5lID0gZnVuY3Rpb24gKG91dFJlYylcblx0e1xuXHRcdHZhciBwcCA9IG91dFJlYy5QdHM7XG5cdFx0dmFyIGxhc3RQUCA9IHBwLlByZXY7XG5cdFx0d2hpbGUgKHBwICE9PSBsYXN0UFApXG5cdFx0e1xuXHRcdFx0cHAgPSBwcC5OZXh0O1xuXHRcdFx0aWYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocHAuUHQsIHBwLlByZXYuUHQpKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAocHAgPT09IGxhc3RQUClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxhc3RQUCA9IHBwLlByZXY7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHRtcFBQID0gcHAuUHJldjtcblx0XHRcdFx0dG1wUFAuTmV4dCA9IHBwLk5leHQ7XG5cdFx0XHRcdHBwLk5leHQuUHJldiA9IHRtcFBQO1xuXHRcdFx0XHRwcCA9IHRtcFBQO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAocHAgPT09IHBwLlByZXYpXG5cdFx0e1xuXHRcdFx0b3V0UmVjLlB0cyA9IG51bGw7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRml4dXBPdXRQb2x5Z29uID0gZnVuY3Rpb24gKG91dFJlYylcblx0e1xuXHRcdC8vRml4dXBPdXRQb2x5Z29uKCkgLSByZW1vdmVzIGR1cGxpY2F0ZSBwb2ludHMgYW5kIHNpbXBsaWZpZXMgY29uc2VjdXRpdmVcblx0XHQvL3BhcmFsbGVsIGVkZ2VzIGJ5IHJlbW92aW5nIHRoZSBtaWRkbGUgdmVydGV4LlxuXHRcdHZhciBsYXN0T0sgPSBudWxsO1xuXHRcdG91dFJlYy5Cb3R0b21QdCA9IG51bGw7XG5cdFx0dmFyIHBwID0gb3V0UmVjLlB0cztcblx0XHR2YXIgcHJlc2VydmVDb2wgPSB0aGlzLlByZXNlcnZlQ29sbGluZWFyIHx8IHRoaXMuU3RyaWN0bHlTaW1wbGU7XG5cdFx0Zm9yICg7Oylcblx0XHR7XG5cdFx0XHRpZiAocHAuUHJldiA9PT0gcHAgfHwgcHAuUHJldiA9PT0gcHAuTmV4dClcblx0XHRcdHtcblx0XHRcdFx0b3V0UmVjLlB0cyA9IG51bGw7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly90ZXN0IGZvciBkdXBsaWNhdGUgcG9pbnRzIGFuZCBjb2xsaW5lYXIgZWRnZXMgLi4uXG5cdFx0XHRpZiAoKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocHAuUHQsIHBwLk5leHQuUHQpKSB8fCAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShwcC5QdCwgcHAuUHJldi5QdCkpIHx8IChDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNChwcC5QcmV2LlB0LCBwcC5QdCwgcHAuTmV4dC5QdCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkgJiYgKCFwcmVzZXJ2ZUNvbCB8fCAhdGhpcy5QdDJJc0JldHdlZW5QdDFBbmRQdDMocHAuUHJldi5QdCwgcHAuUHQsIHBwLk5leHQuUHQpKSkpXG5cdFx0XHR7XG5cdFx0XHRcdGxhc3RPSyA9IG51bGw7XG5cdFx0XHRcdHBwLlByZXYuTmV4dCA9IHBwLk5leHQ7XG5cdFx0XHRcdHBwLk5leHQuUHJldiA9IHBwLlByZXY7XG5cdFx0XHRcdHBwID0gcHAuUHJldjtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKHBwID09PSBsYXN0T0spXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAobGFzdE9LID09PSBudWxsKVxuXHRcdFx0XHRcdGxhc3RPSyA9IHBwO1xuXHRcdFx0XHRwcCA9IHBwLk5leHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdG91dFJlYy5QdHMgPSBwcDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkR1cE91dFB0ID0gZnVuY3Rpb24gKG91dFB0LCBJbnNlcnRBZnRlcilcblx0e1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQ2xpcHBlckxpYi5PdXRQdCgpO1xuXHRcdC8vcmVzdWx0LlB0ID0gb3V0UHQuUHQ7XG5cdFx0cmVzdWx0LlB0LlggPSBvdXRQdC5QdC5YO1xuXHRcdHJlc3VsdC5QdC5ZID0gb3V0UHQuUHQuWTtcblx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSByZXN1bHQuUHQuWiA9IG91dFB0LlB0Llo7XG5cdFx0cmVzdWx0LklkeCA9IG91dFB0LklkeDtcblx0XHRpZiAoSW5zZXJ0QWZ0ZXIpXG5cdFx0e1xuXHRcdFx0cmVzdWx0Lk5leHQgPSBvdXRQdC5OZXh0O1xuXHRcdFx0cmVzdWx0LlByZXYgPSBvdXRQdDtcblx0XHRcdG91dFB0Lk5leHQuUHJldiA9IHJlc3VsdDtcblx0XHRcdG91dFB0Lk5leHQgPSByZXN1bHQ7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRyZXN1bHQuUHJldiA9IG91dFB0LlByZXY7XG5cdFx0XHRyZXN1bHQuTmV4dCA9IG91dFB0O1xuXHRcdFx0b3V0UHQuUHJldi5OZXh0ID0gcmVzdWx0O1xuXHRcdFx0b3V0UHQuUHJldiA9IHJlc3VsdDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldE92ZXJsYXAgPSBmdW5jdGlvbiAoYTEsIGEyLCBiMSwgYjIsICR2YWwpXG5cdHtcblx0XHRpZiAoYTEgPCBhMilcblx0XHR7XG5cdFx0XHRpZiAoYjEgPCBiMilcblx0XHRcdHtcblx0XHRcdFx0JHZhbC5MZWZ0ID0gTWF0aC5tYXgoYTEsIGIxKTtcblx0XHRcdFx0JHZhbC5SaWdodCA9IE1hdGgubWluKGEyLCBiMik7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdCR2YWwuTGVmdCA9IE1hdGgubWF4KGExLCBiMik7XG5cdFx0XHRcdCR2YWwuUmlnaHQgPSBNYXRoLm1pbihhMiwgYjEpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0aWYgKGIxIDwgYjIpXG5cdFx0XHR7XG5cdFx0XHRcdCR2YWwuTGVmdCA9IE1hdGgubWF4KGEyLCBiMSk7XG5cdFx0XHRcdCR2YWwuUmlnaHQgPSBNYXRoLm1pbihhMSwgYjIpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQkdmFsLkxlZnQgPSBNYXRoLm1heChhMiwgYjIpO1xuXHRcdFx0XHQkdmFsLlJpZ2h0ID0gTWF0aC5taW4oYTEsIGIxKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuICR2YWwuTGVmdCA8ICR2YWwuUmlnaHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Kb2luSG9yeiA9IGZ1bmN0aW9uIChvcDEsIG9wMWIsIG9wMiwgb3AyYiwgUHQsIERpc2NhcmRMZWZ0KVxuXHR7XG5cdFx0dmFyIERpcjEgPSAob3AxLlB0LlggPiBvcDFiLlB0LlggPyBDbGlwcGVyTGliLkRpcmVjdGlvbi5kUmlnaHRUb0xlZnQgOiBDbGlwcGVyTGliLkRpcmVjdGlvbi5kTGVmdFRvUmlnaHQpO1xuXHRcdHZhciBEaXIyID0gKG9wMi5QdC5YID4gb3AyYi5QdC5YID8gQ2xpcHBlckxpYi5EaXJlY3Rpb24uZFJpZ2h0VG9MZWZ0IDogQ2xpcHBlckxpYi5EaXJlY3Rpb24uZExlZnRUb1JpZ2h0KTtcblx0XHRpZiAoRGlyMSA9PT0gRGlyMilcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHQvL1doZW4gRGlzY2FyZExlZnQsIHdlIHdhbnQgT3AxYiB0byBiZSBvbiB0aGUgTGVmdCBvZiBPcDEsIG90aGVyd2lzZSB3ZVxuXHRcdC8vd2FudCBPcDFiIHRvIGJlIG9uIHRoZSBSaWdodC4gKEFuZCBsaWtld2lzZSB3aXRoIE9wMiBhbmQgT3AyYi4pXG5cdFx0Ly9TbywgdG8gZmFjaWxpdGF0ZSB0aGlzIHdoaWxlIGluc2VydGluZyBPcDFiIGFuZCBPcDJiIC4uLlxuXHRcdC8vd2hlbiBEaXNjYXJkTGVmdCwgbWFrZSBzdXJlIHdlJ3JlIEFUIG9yIFJJR0hUIG9mIFB0IGJlZm9yZSBhZGRpbmcgT3AxYixcblx0XHQvL290aGVyd2lzZSBtYWtlIHN1cmUgd2UncmUgQVQgb3IgTEVGVCBvZiBQdC4gKExpa2V3aXNlIHdpdGggT3AyYi4pXG5cdFx0aWYgKERpcjEgPT09IENsaXBwZXJMaWIuRGlyZWN0aW9uLmRMZWZ0VG9SaWdodClcblx0XHR7XG5cdFx0XHR3aGlsZSAob3AxLk5leHQuUHQuWCA8PSBQdC5YICYmXG5cdFx0XHRcdG9wMS5OZXh0LlB0LlggPj0gb3AxLlB0LlggJiYgb3AxLk5leHQuUHQuWSA9PT0gUHQuWSlcblx0XHRcdFx0b3AxID0gb3AxLk5leHQ7XG5cdFx0XHRpZiAoRGlzY2FyZExlZnQgJiYgKG9wMS5QdC5YICE9PSBQdC5YKSlcblx0XHRcdFx0b3AxID0gb3AxLk5leHQ7XG5cdFx0XHRvcDFiID0gdGhpcy5EdXBPdXRQdChvcDEsICFEaXNjYXJkTGVmdCk7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9JbmVxdWFsaXR5KG9wMWIuUHQsIFB0KSlcblx0XHRcdHtcblx0XHRcdFx0b3AxID0gb3AxYjtcblx0XHRcdFx0Ly9vcDEuUHQgPSBQdDtcblx0XHRcdFx0b3AxLlB0LlggPSBQdC5YO1xuXHRcdFx0XHRvcDEuUHQuWSA9IFB0Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIG9wMS5QdC5aID0gUHQuWjtcblx0XHRcdFx0b3AxYiA9IHRoaXMuRHVwT3V0UHQob3AxLCAhRGlzY2FyZExlZnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0d2hpbGUgKG9wMS5OZXh0LlB0LlggPj0gUHQuWCAmJlxuXHRcdFx0XHRvcDEuTmV4dC5QdC5YIDw9IG9wMS5QdC5YICYmIG9wMS5OZXh0LlB0LlkgPT09IFB0LlkpXG5cdFx0XHRcdG9wMSA9IG9wMS5OZXh0O1xuXHRcdFx0aWYgKCFEaXNjYXJkTGVmdCAmJiAob3AxLlB0LlggIT09IFB0LlgpKVxuXHRcdFx0XHRvcDEgPSBvcDEuTmV4dDtcblx0XHRcdG9wMWIgPSB0aGlzLkR1cE91dFB0KG9wMSwgRGlzY2FyZExlZnQpO1xuXHRcdFx0aWYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfSW5lcXVhbGl0eShvcDFiLlB0LCBQdCkpXG5cdFx0XHR7XG5cdFx0XHRcdG9wMSA9IG9wMWI7XG5cdFx0XHRcdC8vb3AxLlB0ID0gUHQ7XG5cdFx0XHRcdG9wMS5QdC5YID0gUHQuWDtcblx0XHRcdFx0b3AxLlB0LlkgPSBQdC5ZO1xuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBvcDEuUHQuWiA9IFB0Llo7XG5cdFx0XHRcdG9wMWIgPSB0aGlzLkR1cE91dFB0KG9wMSwgRGlzY2FyZExlZnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoRGlyMiA9PT0gQ2xpcHBlckxpYi5EaXJlY3Rpb24uZExlZnRUb1JpZ2h0KVxuXHRcdHtcblx0XHRcdHdoaWxlIChvcDIuTmV4dC5QdC5YIDw9IFB0LlggJiZcblx0XHRcdFx0b3AyLk5leHQuUHQuWCA+PSBvcDIuUHQuWCAmJiBvcDIuTmV4dC5QdC5ZID09PSBQdC5ZKVxuXHRcdFx0XHRvcDIgPSBvcDIuTmV4dDtcblx0XHRcdGlmIChEaXNjYXJkTGVmdCAmJiAob3AyLlB0LlggIT09IFB0LlgpKVxuXHRcdFx0XHRvcDIgPSBvcDIuTmV4dDtcblx0XHRcdG9wMmIgPSB0aGlzLkR1cE91dFB0KG9wMiwgIURpc2NhcmRMZWZ0KTtcblx0XHRcdGlmIChDbGlwcGVyTGliLkludFBvaW50Lm9wX0luZXF1YWxpdHkob3AyYi5QdCwgUHQpKVxuXHRcdFx0e1xuXHRcdFx0XHRvcDIgPSBvcDJiO1xuXHRcdFx0XHQvL29wMi5QdCA9IFB0O1xuXHRcdFx0XHRvcDIuUHQuWCA9IFB0Llg7XG5cdFx0XHRcdG9wMi5QdC5ZID0gUHQuWTtcblx0XHRcdFx0aWYgKENsaXBwZXJMaWIudXNlX3h5eikgb3AyLlB0LlogPSBQdC5aO1xuXHRcdFx0XHRvcDJiID0gdGhpcy5EdXBPdXRQdChvcDIsICFEaXNjYXJkTGVmdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHR3aGlsZSAob3AyLk5leHQuUHQuWCA+PSBQdC5YICYmXG5cdFx0XHRcdG9wMi5OZXh0LlB0LlggPD0gb3AyLlB0LlggJiYgb3AyLk5leHQuUHQuWSA9PT0gUHQuWSlcblx0XHRcdFx0b3AyID0gb3AyLk5leHQ7XG5cdFx0XHRpZiAoIURpc2NhcmRMZWZ0ICYmIChvcDIuUHQuWCAhPT0gUHQuWCkpXG5cdFx0XHRcdG9wMiA9IG9wMi5OZXh0O1xuXHRcdFx0b3AyYiA9IHRoaXMuRHVwT3V0UHQob3AyLCBEaXNjYXJkTGVmdCk7XG5cdFx0XHRpZiAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9JbmVxdWFsaXR5KG9wMmIuUHQsIFB0KSlcblx0XHRcdHtcblx0XHRcdFx0b3AyID0gb3AyYjtcblx0XHRcdFx0Ly9vcDIuUHQgPSBQdDtcblx0XHRcdFx0b3AyLlB0LlggPSBQdC5YO1xuXHRcdFx0XHRvcDIuUHQuWSA9IFB0Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIG9wMi5QdC5aID0gUHQuWjtcblx0XHRcdFx0b3AyYiA9IHRoaXMuRHVwT3V0UHQob3AyLCBEaXNjYXJkTGVmdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICgoRGlyMSA9PT0gQ2xpcHBlckxpYi5EaXJlY3Rpb24uZExlZnRUb1JpZ2h0KSA9PT0gRGlzY2FyZExlZnQpXG5cdFx0e1xuXHRcdFx0b3AxLlByZXYgPSBvcDI7XG5cdFx0XHRvcDIuTmV4dCA9IG9wMTtcblx0XHRcdG9wMWIuTmV4dCA9IG9wMmI7XG5cdFx0XHRvcDJiLlByZXYgPSBvcDFiO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0b3AxLk5leHQgPSBvcDI7XG5cdFx0XHRvcDIuUHJldiA9IG9wMTtcblx0XHRcdG9wMWIuUHJldiA9IG9wMmI7XG5cdFx0XHRvcDJiLk5leHQgPSBvcDFiO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkpvaW5Qb2ludHMgPSBmdW5jdGlvbiAoaiwgb3V0UmVjMSwgb3V0UmVjMilcblx0e1xuXHRcdHZhciBvcDEgPSBqLk91dFB0MSxcblx0XHRcdG9wMWIgPSBuZXcgQ2xpcHBlckxpYi5PdXRQdCgpO1xuXHRcdHZhciBvcDIgPSBqLk91dFB0Mixcblx0XHRcdG9wMmIgPSBuZXcgQ2xpcHBlckxpYi5PdXRQdCgpO1xuXHRcdC8vVGhlcmUgYXJlIDMga2luZHMgb2Ygam9pbnMgZm9yIG91dHB1dCBwb2x5Z29ucyAuLi5cblx0XHQvLzEuIEhvcml6b250YWwgam9pbnMgd2hlcmUgSm9pbi5PdXRQdDEgJiBKb2luLk91dFB0MiBhcmUgdmVydGljZXMgYW55d2hlcmVcblx0XHQvL2Fsb25nIChob3Jpem9udGFsKSBjb2xsaW5lYXIgZWRnZXMgKCYgSm9pbi5PZmZQdCBpcyBvbiB0aGUgc2FtZSBob3Jpem9udGFsKS5cblx0XHQvLzIuIE5vbi1ob3Jpem9udGFsIGpvaW5zIHdoZXJlIEpvaW4uT3V0UHQxICYgSm9pbi5PdXRQdDIgYXJlIGF0IHRoZSBzYW1lXG5cdFx0Ly9sb2NhdGlvbiBhdCB0aGUgQm90dG9tIG9mIHRoZSBvdmVybGFwcGluZyBzZWdtZW50ICgmIEpvaW4uT2ZmUHQgaXMgYWJvdmUpLlxuXHRcdC8vMy4gU3RyaWN0bHlTaW1wbGUgam9pbnMgd2hlcmUgZWRnZXMgdG91Y2ggYnV0IGFyZSBub3QgY29sbGluZWFyIGFuZCB3aGVyZVxuXHRcdC8vSm9pbi5PdXRQdDEsIEpvaW4uT3V0UHQyICYgSm9pbi5PZmZQdCBhbGwgc2hhcmUgdGhlIHNhbWUgcG9pbnQuXG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IChqLk91dFB0MS5QdC5ZID09PSBqLk9mZlB0LlkpO1xuXHRcdGlmIChpc0hvcml6b250YWwgJiYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkoai5PZmZQdCwgai5PdXRQdDEuUHQpKSAmJiAoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShqLk9mZlB0LCBqLk91dFB0Mi5QdCkpKVxuXHRcdHtcblx0XHRcdC8vU3RyaWN0bHkgU2ltcGxlIGpvaW4gLi4uXG5cdFx0XHRpZiAob3V0UmVjMSAhPT0gb3V0UmVjMikgcmV0dXJuIGZhbHNlO1xuXG5cdFx0XHRvcDFiID0gai5PdXRQdDEuTmV4dDtcblx0XHRcdHdoaWxlIChvcDFiICE9PSBvcDEgJiYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkob3AxYi5QdCwgai5PZmZQdCkpKVxuXHRcdFx0XHRvcDFiID0gb3AxYi5OZXh0O1xuXHRcdFx0dmFyIHJldmVyc2UxID0gKG9wMWIuUHQuWSA+IGouT2ZmUHQuWSk7XG5cdFx0XHRvcDJiID0gai5PdXRQdDIuTmV4dDtcblx0XHRcdHdoaWxlIChvcDJiICE9PSBvcDIgJiYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkob3AyYi5QdCwgai5PZmZQdCkpKVxuXHRcdFx0XHRvcDJiID0gb3AyYi5OZXh0O1xuXHRcdFx0dmFyIHJldmVyc2UyID0gKG9wMmIuUHQuWSA+IGouT2ZmUHQuWSk7XG5cdFx0XHRpZiAocmV2ZXJzZTEgPT09IHJldmVyc2UyKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRpZiAocmV2ZXJzZTEpXG5cdFx0XHR7XG5cdFx0XHRcdG9wMWIgPSB0aGlzLkR1cE91dFB0KG9wMSwgZmFsc2UpO1xuXHRcdFx0XHRvcDJiID0gdGhpcy5EdXBPdXRQdChvcDIsIHRydWUpO1xuXHRcdFx0XHRvcDEuUHJldiA9IG9wMjtcblx0XHRcdFx0b3AyLk5leHQgPSBvcDE7XG5cdFx0XHRcdG9wMWIuTmV4dCA9IG9wMmI7XG5cdFx0XHRcdG9wMmIuUHJldiA9IG9wMWI7XG5cdFx0XHRcdGouT3V0UHQxID0gb3AxO1xuXHRcdFx0XHRqLk91dFB0MiA9IG9wMWI7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRvcDFiID0gdGhpcy5EdXBPdXRQdChvcDEsIHRydWUpO1xuXHRcdFx0XHRvcDJiID0gdGhpcy5EdXBPdXRQdChvcDIsIGZhbHNlKTtcblx0XHRcdFx0b3AxLk5leHQgPSBvcDI7XG5cdFx0XHRcdG9wMi5QcmV2ID0gb3AxO1xuXHRcdFx0XHRvcDFiLlByZXYgPSBvcDJiO1xuXHRcdFx0XHRvcDJiLk5leHQgPSBvcDFiO1xuXHRcdFx0XHRqLk91dFB0MSA9IG9wMTtcblx0XHRcdFx0ai5PdXRQdDIgPSBvcDFiO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAoaXNIb3Jpem9udGFsKVxuXHRcdHtcblx0XHRcdC8vdHJlYXQgaG9yaXpvbnRhbCBqb2lucyBkaWZmZXJlbnRseSB0byBub24taG9yaXpvbnRhbCBqb2lucyBzaW5jZSB3aXRoXG5cdFx0XHQvL3RoZW0gd2UncmUgbm90IHlldCBzdXJlIHdoZXJlIHRoZSBvdmVybGFwcGluZyBpcy4gT3V0UHQxLlB0ICYgT3V0UHQyLlB0XG5cdFx0XHQvL21heSBiZSBhbnl3aGVyZSBhbG9uZyB0aGUgaG9yaXpvbnRhbCBlZGdlLlxuXHRcdFx0b3AxYiA9IG9wMTtcblx0XHRcdHdoaWxlIChvcDEuUHJldi5QdC5ZID09PSBvcDEuUHQuWSAmJiBvcDEuUHJldiAhPT0gb3AxYiAmJiBvcDEuUHJldiAhPT0gb3AyKVxuXHRcdFx0XHRvcDEgPSBvcDEuUHJldjtcblx0XHRcdHdoaWxlIChvcDFiLk5leHQuUHQuWSA9PT0gb3AxYi5QdC5ZICYmIG9wMWIuTmV4dCAhPT0gb3AxICYmIG9wMWIuTmV4dCAhPT0gb3AyKVxuXHRcdFx0XHRvcDFiID0gb3AxYi5OZXh0O1xuXHRcdFx0aWYgKG9wMWIuTmV4dCA9PT0gb3AxIHx8IG9wMWIuTmV4dCA9PT0gb3AyKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHQvL2EgZmxhdCAncG9seWdvbidcblx0XHRcdG9wMmIgPSBvcDI7XG5cdFx0XHR3aGlsZSAob3AyLlByZXYuUHQuWSA9PT0gb3AyLlB0LlkgJiYgb3AyLlByZXYgIT09IG9wMmIgJiYgb3AyLlByZXYgIT09IG9wMWIpXG5cdFx0XHRcdG9wMiA9IG9wMi5QcmV2O1xuXHRcdFx0d2hpbGUgKG9wMmIuTmV4dC5QdC5ZID09PSBvcDJiLlB0LlkgJiYgb3AyYi5OZXh0ICE9PSBvcDIgJiYgb3AyYi5OZXh0ICE9PSBvcDEpXG5cdFx0XHRcdG9wMmIgPSBvcDJiLk5leHQ7XG5cdFx0XHRpZiAob3AyYi5OZXh0ID09PSBvcDIgfHwgb3AyYi5OZXh0ID09PSBvcDEpXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdC8vYSBmbGF0ICdwb2x5Z29uJ1xuXHRcdFx0Ly9PcDEgLS4gT3AxYiAmIE9wMiAtLiBPcDJiIGFyZSB0aGUgZXh0cmVtaXRlcyBvZiB0aGUgaG9yaXpvbnRhbCBlZGdlc1xuXG5cdFx0XHR2YXIgJHZhbCA9IHtcblx0XHRcdFx0TGVmdDogbnVsbCxcblx0XHRcdFx0UmlnaHQ6IG51bGxcblx0XHRcdH07XG5cblx0XHRcdGlmICghdGhpcy5HZXRPdmVybGFwKG9wMS5QdC5YLCBvcDFiLlB0LlgsIG9wMi5QdC5YLCBvcDJiLlB0LlgsICR2YWwpKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR2YXIgTGVmdCA9ICR2YWwuTGVmdDtcblx0XHRcdHZhciBSaWdodCA9ICR2YWwuUmlnaHQ7XG5cblx0XHRcdC8vRGlzY2FyZExlZnRTaWRlOiB3aGVuIG92ZXJsYXBwaW5nIGVkZ2VzIGFyZSBqb2luZWQsIGEgc3Bpa2Ugd2lsbCBjcmVhdGVkXG5cdFx0XHQvL3doaWNoIG5lZWRzIHRvIGJlIGNsZWFuZWQgdXAuIEhvd2V2ZXIsIHdlIGRvbid0IHdhbnQgT3AxIG9yIE9wMiBjYXVnaHQgdXBcblx0XHRcdC8vb24gdGhlIGRpc2NhcmQgU2lkZSBhcyBlaXRoZXIgbWF5IHN0aWxsIGJlIG5lZWRlZCBmb3Igb3RoZXIgam9pbnMgLi4uXG5cdFx0XHR2YXIgUHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDAoKTtcblx0XHRcdHZhciBEaXNjYXJkTGVmdFNpZGU7XG5cdFx0XHRpZiAob3AxLlB0LlggPj0gTGVmdCAmJiBvcDEuUHQuWCA8PSBSaWdodClcblx0XHRcdHtcblx0XHRcdFx0Ly9QdCA9IG9wMS5QdDtcblx0XHRcdFx0UHQuWCA9IG9wMS5QdC5YO1xuXHRcdFx0XHRQdC5ZID0gb3AxLlB0Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIFB0LlogPSBvcDEuUHQuWjtcblx0XHRcdFx0RGlzY2FyZExlZnRTaWRlID0gKG9wMS5QdC5YID4gb3AxYi5QdC5YKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKG9wMi5QdC5YID49IExlZnQgJiYgb3AyLlB0LlggPD0gUmlnaHQpXG5cdFx0XHR7XG5cdFx0XHRcdC8vUHQgPSBvcDIuUHQ7XG5cdFx0XHRcdFB0LlggPSBvcDIuUHQuWDtcblx0XHRcdFx0UHQuWSA9IG9wMi5QdC5ZO1xuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBQdC5aID0gb3AyLlB0Llo7XG5cdFx0XHRcdERpc2NhcmRMZWZ0U2lkZSA9IChvcDIuUHQuWCA+IG9wMmIuUHQuWCk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChvcDFiLlB0LlggPj0gTGVmdCAmJiBvcDFiLlB0LlggPD0gUmlnaHQpXG5cdFx0XHR7XG5cdFx0XHRcdC8vUHQgPSBvcDFiLlB0O1xuXHRcdFx0XHRQdC5YID0gb3AxYi5QdC5YO1xuXHRcdFx0XHRQdC5ZID0gb3AxYi5QdC5ZO1xuXHRcdFx0XHRpZiAoQ2xpcHBlckxpYi51c2VfeHl6KSBQdC5aID0gb3AxYi5QdC5aO1xuXHRcdFx0XHREaXNjYXJkTGVmdFNpZGUgPSBvcDFiLlB0LlggPiBvcDEuUHQuWDtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0Ly9QdCA9IG9wMmIuUHQ7XG5cdFx0XHRcdFB0LlggPSBvcDJiLlB0Llg7XG5cdFx0XHRcdFB0LlkgPSBvcDJiLlB0Llk7XG5cdFx0XHRcdGlmIChDbGlwcGVyTGliLnVzZV94eXopIFB0LlogPSBvcDJiLlB0Llo7XG5cdFx0XHRcdERpc2NhcmRMZWZ0U2lkZSA9IChvcDJiLlB0LlggPiBvcDIuUHQuWCk7XG5cdFx0XHR9XG5cdFx0XHRqLk91dFB0MSA9IG9wMTtcblx0XHRcdGouT3V0UHQyID0gb3AyO1xuXHRcdFx0cmV0dXJuIHRoaXMuSm9pbkhvcnoob3AxLCBvcDFiLCBvcDIsIG9wMmIsIFB0LCBEaXNjYXJkTGVmdFNpZGUpO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0Ly9uYjogRm9yIG5vbi1ob3Jpem9udGFsIGpvaW5zIC4uLlxuXHRcdFx0Ly8gICAgMS4gSnIuT3V0UHQxLlB0LlkgPT0gSnIuT3V0UHQyLlB0Lllcblx0XHRcdC8vICAgIDIuIEpyLk91dFB0MS5QdCA+IEpyLk9mZlB0Lllcblx0XHRcdC8vbWFrZSBzdXJlIHRoZSBwb2x5Z29ucyBhcmUgY29ycmVjdGx5IG9yaWVudGVkIC4uLlxuXHRcdFx0b3AxYiA9IG9wMS5OZXh0O1xuXHRcdFx0d2hpbGUgKChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KG9wMWIuUHQsIG9wMS5QdCkpICYmIChvcDFiICE9PSBvcDEpKVxuXHRcdFx0XHRvcDFiID0gb3AxYi5OZXh0O1xuXHRcdFx0dmFyIFJldmVyc2UxID0gKChvcDFiLlB0LlkgPiBvcDEuUHQuWSkgfHwgIUNsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw0KG9wMS5QdCwgb3AxYi5QdCwgai5PZmZQdCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkpO1xuXHRcdFx0aWYgKFJldmVyc2UxKVxuXHRcdFx0e1xuXHRcdFx0XHRvcDFiID0gb3AxLlByZXY7XG5cdFx0XHRcdHdoaWxlICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShvcDFiLlB0LCBvcDEuUHQpKSAmJiAob3AxYiAhPT0gb3AxKSlcblx0XHRcdFx0XHRvcDFiID0gb3AxYi5QcmV2O1xuXG5cdFx0XHRcdGlmICgob3AxYi5QdC5ZID4gb3AxLlB0LlkpIHx8ICFDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNChvcDEuUHQsIG9wMWIuUHQsIGouT2ZmUHQsIHRoaXMubV9Vc2VGdWxsUmFuZ2UpKVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdG9wMmIgPSBvcDIuTmV4dDtcblx0XHRcdHdoaWxlICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShvcDJiLlB0LCBvcDIuUHQpKSAmJiAob3AyYiAhPT0gb3AyKSlcblx0XHRcdFx0b3AyYiA9IG9wMmIuTmV4dDtcblxuXHRcdFx0dmFyIFJldmVyc2UyID0gKChvcDJiLlB0LlkgPiBvcDIuUHQuWSkgfHwgIUNsaXBwZXJMaWIuQ2xpcHBlckJhc2UuU2xvcGVzRXF1YWw0KG9wMi5QdCwgb3AyYi5QdCwgai5PZmZQdCwgdGhpcy5tX1VzZUZ1bGxSYW5nZSkpO1xuXHRcdFx0aWYgKFJldmVyc2UyKVxuXHRcdFx0e1xuXHRcdFx0XHRvcDJiID0gb3AyLlByZXY7XG5cdFx0XHRcdHdoaWxlICgoQ2xpcHBlckxpYi5JbnRQb2ludC5vcF9FcXVhbGl0eShvcDJiLlB0LCBvcDIuUHQpKSAmJiAob3AyYiAhPT0gb3AyKSlcblx0XHRcdFx0XHRvcDJiID0gb3AyYi5QcmV2O1xuXG5cdFx0XHRcdGlmICgob3AyYi5QdC5ZID4gb3AyLlB0LlkpIHx8ICFDbGlwcGVyTGliLkNsaXBwZXJCYXNlLlNsb3Blc0VxdWFsNChvcDIuUHQsIG9wMmIuUHQsIGouT2ZmUHQsIHRoaXMubV9Vc2VGdWxsUmFuZ2UpKVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGlmICgob3AxYiA9PT0gb3AxKSB8fCAob3AyYiA9PT0gb3AyKSB8fCAob3AxYiA9PT0gb3AyYikgfHxcblx0XHRcdFx0KChvdXRSZWMxID09PSBvdXRSZWMyKSAmJiAoUmV2ZXJzZTEgPT09IFJldmVyc2UyKSkpXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdGlmIChSZXZlcnNlMSlcblx0XHRcdHtcblx0XHRcdFx0b3AxYiA9IHRoaXMuRHVwT3V0UHQob3AxLCBmYWxzZSk7XG5cdFx0XHRcdG9wMmIgPSB0aGlzLkR1cE91dFB0KG9wMiwgdHJ1ZSk7XG5cdFx0XHRcdG9wMS5QcmV2ID0gb3AyO1xuXHRcdFx0XHRvcDIuTmV4dCA9IG9wMTtcblx0XHRcdFx0b3AxYi5OZXh0ID0gb3AyYjtcblx0XHRcdFx0b3AyYi5QcmV2ID0gb3AxYjtcblx0XHRcdFx0ai5PdXRQdDEgPSBvcDE7XG5cdFx0XHRcdGouT3V0UHQyID0gb3AxYjtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdG9wMWIgPSB0aGlzLkR1cE91dFB0KG9wMSwgdHJ1ZSk7XG5cdFx0XHRcdG9wMmIgPSB0aGlzLkR1cE91dFB0KG9wMiwgZmFsc2UpO1xuXHRcdFx0XHRvcDEuTmV4dCA9IG9wMjtcblx0XHRcdFx0b3AyLlByZXYgPSBvcDE7XG5cdFx0XHRcdG9wMWIuUHJldiA9IG9wMmI7XG5cdFx0XHRcdG9wMmIuTmV4dCA9IG9wMWI7XG5cdFx0XHRcdGouT3V0UHQxID0gb3AxO1xuXHRcdFx0XHRqLk91dFB0MiA9IG9wMWI7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuR2V0Qm91bmRzID0gZnVuY3Rpb24gKHBhdGhzKVxuXHR7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0Y250ID0gcGF0aHMubGVuZ3RoO1xuXHRcdHdoaWxlIChpIDwgY250ICYmIHBhdGhzW2ldLmxlbmd0aCA9PT0gMCkgaSsrO1xuXHRcdGlmIChpID09PSBjbnQpIHJldHVybiBuZXcgQ2xpcHBlckxpYi5JbnRSZWN0KDAsIDAsIDAsIDApO1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQ2xpcHBlckxpYi5JbnRSZWN0KCk7XG5cdFx0cmVzdWx0LmxlZnQgPSBwYXRoc1tpXVswXS5YO1xuXHRcdHJlc3VsdC5yaWdodCA9IHJlc3VsdC5sZWZ0O1xuXHRcdHJlc3VsdC50b3AgPSBwYXRoc1tpXVswXS5ZO1xuXHRcdHJlc3VsdC5ib3R0b20gPSByZXN1bHQudG9wO1xuXHRcdGZvciAoOyBpIDwgY250OyBpKyspXG5cdFx0XHRmb3IgKHZhciBqID0gMCwgamxlbiA9IHBhdGhzW2ldLmxlbmd0aDsgaiA8IGpsZW47IGorKylcblx0XHRcdHtcblx0XHRcdFx0aWYgKHBhdGhzW2ldW2pdLlggPCByZXN1bHQubGVmdCkgcmVzdWx0LmxlZnQgPSBwYXRoc1tpXVtqXS5YO1xuXHRcdFx0XHRlbHNlIGlmIChwYXRoc1tpXVtqXS5YID4gcmVzdWx0LnJpZ2h0KSByZXN1bHQucmlnaHQgPSBwYXRoc1tpXVtqXS5YO1xuXHRcdFx0XHRpZiAocGF0aHNbaV1bal0uWSA8IHJlc3VsdC50b3ApIHJlc3VsdC50b3AgPSBwYXRoc1tpXVtqXS5ZO1xuXHRcdFx0XHRlbHNlIGlmIChwYXRoc1tpXVtqXS5ZID4gcmVzdWx0LmJvdHRvbSkgcmVzdWx0LmJvdHRvbSA9IHBhdGhzW2ldW2pdLlk7XG5cdFx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkdldEJvdW5kczIgPSBmdW5jdGlvbiAob3BzKVxuXHR7XG5cdFx0dmFyIG9wU3RhcnQgPSBvcHM7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBDbGlwcGVyTGliLkludFJlY3QoKTtcblx0XHRyZXN1bHQubGVmdCA9IG9wcy5QdC5YO1xuXHRcdHJlc3VsdC5yaWdodCA9IG9wcy5QdC5YO1xuXHRcdHJlc3VsdC50b3AgPSBvcHMuUHQuWTtcblx0XHRyZXN1bHQuYm90dG9tID0gb3BzLlB0Llk7XG5cdFx0b3BzID0gb3BzLk5leHQ7XG5cdFx0d2hpbGUgKG9wcyAhPT0gb3BTdGFydClcblx0XHR7XG5cdFx0XHRpZiAob3BzLlB0LlggPCByZXN1bHQubGVmdClcblx0XHRcdFx0cmVzdWx0LmxlZnQgPSBvcHMuUHQuWDtcblx0XHRcdGlmIChvcHMuUHQuWCA+IHJlc3VsdC5yaWdodClcblx0XHRcdFx0cmVzdWx0LnJpZ2h0ID0gb3BzLlB0Llg7XG5cdFx0XHRpZiAob3BzLlB0LlkgPCByZXN1bHQudG9wKVxuXHRcdFx0XHRyZXN1bHQudG9wID0gb3BzLlB0Llk7XG5cdFx0XHRpZiAob3BzLlB0LlkgPiByZXN1bHQuYm90dG9tKVxuXHRcdFx0XHRyZXN1bHQuYm90dG9tID0gb3BzLlB0Llk7XG5cdFx0XHRvcHMgPSBvcHMuTmV4dDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuUG9pbnRJblBvbHlnb24gPSBmdW5jdGlvbiAocHQsIHBhdGgpXG5cdHtcblx0XHQvL3JldHVybnMgMCBpZiBmYWxzZSwgKzEgaWYgdHJ1ZSwgLTEgaWYgcHQgT04gcG9seWdvbiBib3VuZGFyeVxuXHRcdC8vU2VlIFwiVGhlIFBvaW50IGluIFBvbHlnb24gUHJvYmxlbSBmb3IgQXJiaXRyYXJ5IFBvbHlnb25zXCIgYnkgSG9ybWFubiAmIEFnYXRob3Ncblx0XHQvL2h0dHA6Ly9jaXRlc2VlcnguaXN0LnBzdS5lZHUvdmlld2RvYy9kb3dubG9hZD9kb2k9MTAuMS4xLjg4LjU0OTgmcmVwPXJlcDEmdHlwZT1wZGZcblx0XHR2YXIgcmVzdWx0ID0gMCxcblx0XHRcdGNudCA9IHBhdGgubGVuZ3RoO1xuXHRcdGlmIChjbnQgPCAzKVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0dmFyIGlwID0gcGF0aFswXTtcblx0XHRmb3IgKHZhciBpID0gMTsgaSA8PSBjbnQ7ICsraSlcblx0XHR7XG5cdFx0XHR2YXIgaXBOZXh0ID0gKGkgPT09IGNudCA/IHBhdGhbMF0gOiBwYXRoW2ldKTtcblx0XHRcdGlmIChpcE5leHQuWSA9PT0gcHQuWSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKChpcE5leHQuWCA9PT0gcHQuWCkgfHwgKGlwLlkgPT09IHB0LlkgJiYgKChpcE5leHQuWCA+IHB0LlgpID09PSAoaXAuWCA8IHB0LlgpKSkpXG5cdFx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKChpcC5ZIDwgcHQuWSkgIT09IChpcE5leHQuWSA8IHB0LlkpKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoaXAuWCA+PSBwdC5YKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKGlwTmV4dC5YID4gcHQuWClcblx0XHRcdFx0XHRcdHJlc3VsdCA9IDEgLSByZXN1bHQ7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHZhciBkID0gKGlwLlggLSBwdC5YKSAqIChpcE5leHQuWSAtIHB0LlkpIC0gKGlwTmV4dC5YIC0gcHQuWCkgKiAoaXAuWSAtIHB0LlkpO1xuXHRcdFx0XHRcdFx0aWYgKGQgPT09IDApXG5cdFx0XHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0XHRcdGVsc2UgaWYgKChkID4gMCkgPT09IChpcE5leHQuWSA+IGlwLlkpKVxuXHRcdFx0XHRcdFx0XHRyZXN1bHQgPSAxIC0gcmVzdWx0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoaXBOZXh0LlggPiBwdC5YKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHZhciBkID0gKGlwLlggLSBwdC5YKSAqIChpcE5leHQuWSAtIHB0LlkpIC0gKGlwTmV4dC5YIC0gcHQuWCkgKiAoaXAuWSAtIHB0LlkpO1xuXHRcdFx0XHRcdFx0aWYgKGQgPT09IDApXG5cdFx0XHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0XHRcdGVsc2UgaWYgKChkID4gMCkgPT09IChpcE5leHQuWSA+IGlwLlkpKVxuXHRcdFx0XHRcdFx0XHRyZXN1bHQgPSAxIC0gcmVzdWx0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aXAgPSBpcE5leHQ7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Qb2ludEluUG9seWdvbiA9IGZ1bmN0aW9uIChwdCwgb3ApXG5cdHtcblx0XHQvL3JldHVybnMgMCBpZiBmYWxzZSwgKzEgaWYgdHJ1ZSwgLTEgaWYgcHQgT04gcG9seWdvbiBib3VuZGFyeVxuXHRcdHZhciByZXN1bHQgPSAwO1xuXHRcdHZhciBzdGFydE9wID0gb3A7XG5cdFx0dmFyIHB0eCA9IHB0LlgsXG5cdFx0XHRwdHkgPSBwdC5ZO1xuXHRcdHZhciBwb2x5MHggPSBvcC5QdC5YLFxuXHRcdFx0cG9seTB5ID0gb3AuUHQuWTtcblx0XHRkbyB7XG5cdFx0XHRvcCA9IG9wLk5leHQ7XG5cdFx0XHR2YXIgcG9seTF4ID0gb3AuUHQuWCxcblx0XHRcdFx0cG9seTF5ID0gb3AuUHQuWTtcblx0XHRcdGlmIChwb2x5MXkgPT09IHB0eSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKChwb2x5MXggPT09IHB0eCkgfHwgKHBvbHkweSA9PT0gcHR5ICYmICgocG9seTF4ID4gcHR4KSA9PT0gKHBvbHkweCA8IHB0eCkpKSlcblx0XHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoKHBvbHkweSA8IHB0eSkgIT09IChwb2x5MXkgPCBwdHkpKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAocG9seTB4ID49IHB0eClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChwb2x5MXggPiBwdHgpXG5cdFx0XHRcdFx0XHRyZXN1bHQgPSAxIC0gcmVzdWx0O1xuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR2YXIgZCA9IChwb2x5MHggLSBwdHgpICogKHBvbHkxeSAtIHB0eSkgLSAocG9seTF4IC0gcHR4KSAqIChwb2x5MHkgLSBwdHkpO1xuXHRcdFx0XHRcdFx0aWYgKGQgPT09IDApXG5cdFx0XHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0XHRcdGlmICgoZCA+IDApID09PSAocG9seTF5ID4gcG9seTB5KSlcblx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gMSAtIHJlc3VsdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKHBvbHkxeCA+IHB0eClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR2YXIgZCA9IChwb2x5MHggLSBwdHgpICogKHBvbHkxeSAtIHB0eSkgLSAocG9seTF4IC0gcHR4KSAqIChwb2x5MHkgLSBwdHkpO1xuXHRcdFx0XHRcdFx0aWYgKGQgPT09IDApXG5cdFx0XHRcdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdFx0XHRcdGlmICgoZCA+IDApID09PSAocG9seTF5ID4gcG9seTB5KSlcblx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gMSAtIHJlc3VsdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHBvbHkweCA9IHBvbHkxeDtcblx0XHRcdHBvbHkweSA9IHBvbHkxeTtcblx0XHR9IHdoaWxlIChzdGFydE9wICE9PSBvcCk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuUG9seTJDb250YWluc1BvbHkxID0gZnVuY3Rpb24gKG91dFB0MSwgb3V0UHQyKVxuXHR7XG5cdFx0dmFyIG9wID0gb3V0UHQxO1xuXHRcdGRvIHtcblx0XHRcdC8vbmI6IFBvaW50SW5Qb2x5Z29uIHJldHVybnMgMCBpZiBmYWxzZSwgKzEgaWYgdHJ1ZSwgLTEgaWYgcHQgb24gcG9seWdvblxuXHRcdFx0dmFyIHJlcyA9IHRoaXMuUG9pbnRJblBvbHlnb24ob3AuUHQsIG91dFB0Mik7XG5cdFx0XHRpZiAocmVzID49IDApXG5cdFx0XHRcdHJldHVybiByZXMgPiAwO1xuXHRcdFx0b3AgPSBvcC5OZXh0O1xuXHRcdH1cblx0XHR3aGlsZSAob3AgIT09IG91dFB0MSlcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkZpeHVwRmlyc3RMZWZ0czEgPSBmdW5jdGlvbiAoT2xkT3V0UmVjLCBOZXdPdXRSZWMpXG5cdHtcblx0XHR2YXIgb3V0UmVjLCBmaXJzdExlZnQ7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fUG9seU91dHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdG91dFJlYyA9IHRoaXMubV9Qb2x5T3V0c1tpXTtcblx0XHRcdGZpcnN0TGVmdCA9IENsaXBwZXJMaWIuQ2xpcHBlci5QYXJzZUZpcnN0TGVmdChvdXRSZWMuRmlyc3RMZWZ0KTtcblx0XHRcdGlmIChvdXRSZWMuUHRzICE9PSBudWxsICYmIGZpcnN0TGVmdCA9PT0gT2xkT3V0UmVjKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAodGhpcy5Qb2x5MkNvbnRhaW5zUG9seTEob3V0UmVjLlB0cywgTmV3T3V0UmVjLlB0cykpXG5cdFx0XHRcdFx0b3V0UmVjLkZpcnN0TGVmdCA9IE5ld091dFJlYztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRDbGlwcGVyTGliLkNsaXBwZXIucHJvdG90eXBlLkZpeHVwRmlyc3RMZWZ0czIgPSBmdW5jdGlvbiAoaW5uZXJPdXRSZWMsIG91dGVyT3V0UmVjKVxuXHR7XG5cdFx0Ly9BIHBvbHlnb24gaGFzIHNwbGl0IGludG8gdHdvIHN1Y2ggdGhhdCBvbmUgaXMgbm93IHRoZSBpbm5lciBvZiB0aGUgb3RoZXIuXG5cdFx0Ly9JdCdzIHBvc3NpYmxlIHRoYXQgdGhlc2UgcG9seWdvbnMgbm93IHdyYXAgYXJvdW5kIG90aGVyIHBvbHlnb25zLCBzbyBjaGVja1xuXHRcdC8vZXZlcnkgcG9seWdvbiB0aGF0J3MgYWxzbyBjb250YWluZWQgYnkgT3V0ZXJPdXRSZWMncyBGaXJzdExlZnQgY29udGFpbmVyXG5cdFx0Ly8oaW5jbHVkaW5nIG5pbCkgdG8gc2VlIGlmIHRoZXkndmUgYmVjb21lIGlubmVyIHRvIHRoZSBuZXcgaW5uZXIgcG9seWdvbiAuLi5cblx0XHR2YXIgb3JmbCA9IG91dGVyT3V0UmVjLkZpcnN0TGVmdDtcblx0XHR2YXIgb3V0UmVjLCBmaXJzdExlZnQ7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fUG9seU91dHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdG91dFJlYyA9IHRoaXMubV9Qb2x5T3V0c1tpXTtcblx0XHRcdGlmIChvdXRSZWMuUHRzID09PSBudWxsIHx8IG91dFJlYyA9PT0gb3V0ZXJPdXRSZWMgfHwgb3V0UmVjID09PSBpbm5lck91dFJlYylcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRmaXJzdExlZnQgPSBDbGlwcGVyTGliLkNsaXBwZXIuUGFyc2VGaXJzdExlZnQob3V0UmVjLkZpcnN0TGVmdCk7XG5cdFx0XHRpZiAoZmlyc3RMZWZ0ICE9PSBvcmZsICYmIGZpcnN0TGVmdCAhPT0gaW5uZXJPdXRSZWMgJiYgZmlyc3RMZWZ0ICE9PSBvdXRlck91dFJlYylcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRpZiAodGhpcy5Qb2x5MkNvbnRhaW5zUG9seTEob3V0UmVjLlB0cywgaW5uZXJPdXRSZWMuUHRzKSlcblx0XHRcdFx0b3V0UmVjLkZpcnN0TGVmdCA9IGlubmVyT3V0UmVjO1xuXHRcdFx0ZWxzZSBpZiAodGhpcy5Qb2x5MkNvbnRhaW5zUG9seTEob3V0UmVjLlB0cywgb3V0ZXJPdXRSZWMuUHRzKSlcblx0XHRcdFx0b3V0UmVjLkZpcnN0TGVmdCA9IG91dGVyT3V0UmVjO1xuXHRcdFx0ZWxzZSBpZiAob3V0UmVjLkZpcnN0TGVmdCA9PT0gaW5uZXJPdXRSZWMgfHwgb3V0UmVjLkZpcnN0TGVmdCA9PT0gb3V0ZXJPdXRSZWMpXG5cdFx0XHRcdG91dFJlYy5GaXJzdExlZnQgPSBvcmZsO1xuXHRcdH1cblx0fVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5wcm90b3R5cGUuRml4dXBGaXJzdExlZnRzMyA9IGZ1bmN0aW9uIChPbGRPdXRSZWMsIE5ld091dFJlYylcblx0e1xuXHRcdC8vc2FtZSBhcyBGaXh1cEZpcnN0TGVmdHMxIGJ1dCBkb2Vzbid0IGNhbGwgUG9seTJDb250YWluc1BvbHkxKClcblx0XHR2YXIgb3V0UmVjO1xuXHRcdHZhciBmaXJzdExlZnQ7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fUG9seU91dHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdG91dFJlYyA9IHRoaXMubV9Qb2x5T3V0c1tpXTtcblx0XHRcdGZpcnN0TGVmdCA9IENsaXBwZXJMaWIuQ2xpcHBlci5QYXJzZUZpcnN0TGVmdChvdXRSZWMuRmlyc3RMZWZ0KTtcblx0XHRcdGlmIChvdXRSZWMuUHRzICE9PSBudWxsICYmIGZpcnN0TGVmdCA9PT0gT2xkT3V0UmVjKVxuXHRcdFx0XHRvdXRSZWMuRmlyc3RMZWZ0ID0gTmV3T3V0UmVjO1xuXHRcdH1cblx0fVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5QYXJzZUZpcnN0TGVmdCA9IGZ1bmN0aW9uIChGaXJzdExlZnQpXG5cdHtcblx0XHR3aGlsZSAoRmlyc3RMZWZ0ICE9PSBudWxsICYmIEZpcnN0TGVmdC5QdHMgPT09IG51bGwpXG5cdFx0XHRGaXJzdExlZnQgPSBGaXJzdExlZnQuRmlyc3RMZWZ0O1xuXHRcdHJldHVybiBGaXJzdExlZnQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Kb2luQ29tbW9uRWRnZXMgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLm1fSm9pbnMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdHZhciBqb2luID0gdGhpcy5tX0pvaW5zW2ldO1xuXHRcdFx0dmFyIG91dFJlYzEgPSB0aGlzLkdldE91dFJlYyhqb2luLk91dFB0MS5JZHgpO1xuXHRcdFx0dmFyIG91dFJlYzIgPSB0aGlzLkdldE91dFJlYyhqb2luLk91dFB0Mi5JZHgpO1xuXHRcdFx0aWYgKG91dFJlYzEuUHRzID09PSBudWxsIHx8IG91dFJlYzIuUHRzID09PSBudWxsKVxuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0aWYgKG91dFJlYzEuSXNPcGVuIHx8IG91dFJlYzIuSXNPcGVuKVxuXHRcdFx0e1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly9nZXQgdGhlIHBvbHlnb24gZnJhZ21lbnQgd2l0aCB0aGUgY29ycmVjdCBob2xlIHN0YXRlIChGaXJzdExlZnQpXG5cdFx0XHQvL2JlZm9yZSBjYWxsaW5nIEpvaW5Qb2ludHMoKSAuLi5cblx0XHRcdHZhciBob2xlU3RhdGVSZWM7XG5cdFx0XHRpZiAob3V0UmVjMSA9PT0gb3V0UmVjMilcblx0XHRcdFx0aG9sZVN0YXRlUmVjID0gb3V0UmVjMTtcblx0XHRcdGVsc2UgaWYgKHRoaXMuT3V0UmVjMVJpZ2h0T2ZPdXRSZWMyKG91dFJlYzEsIG91dFJlYzIpKVxuXHRcdFx0XHRob2xlU3RhdGVSZWMgPSBvdXRSZWMyO1xuXHRcdFx0ZWxzZSBpZiAodGhpcy5PdXRSZWMxUmlnaHRPZk91dFJlYzIob3V0UmVjMiwgb3V0UmVjMSkpXG5cdFx0XHRcdGhvbGVTdGF0ZVJlYyA9IG91dFJlYzE7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGhvbGVTdGF0ZVJlYyA9IHRoaXMuR2V0TG93ZXJtb3N0UmVjKG91dFJlYzEsIG91dFJlYzIpO1xuXG5cdFx0XHRpZiAoIXRoaXMuSm9pblBvaW50cyhqb2luLCBvdXRSZWMxLCBvdXRSZWMyKSkgY29udGludWU7XG5cblx0XHRcdGlmIChvdXRSZWMxID09PSBvdXRSZWMyKVxuXHRcdFx0e1xuXHRcdFx0XHQvL2luc3RlYWQgb2Ygam9pbmluZyB0d28gcG9seWdvbnMsIHdlJ3ZlIGp1c3QgY3JlYXRlZCBhIG5ldyBvbmUgYnlcblx0XHRcdFx0Ly9zcGxpdHRpbmcgb25lIHBvbHlnb24gaW50byB0d28uXG5cdFx0XHRcdG91dFJlYzEuUHRzID0gam9pbi5PdXRQdDE7XG5cdFx0XHRcdG91dFJlYzEuQm90dG9tUHQgPSBudWxsO1xuXHRcdFx0XHRvdXRSZWMyID0gdGhpcy5DcmVhdGVPdXRSZWMoKTtcblx0XHRcdFx0b3V0UmVjMi5QdHMgPSBqb2luLk91dFB0Mjtcblx0XHRcdFx0Ly91cGRhdGUgYWxsIE91dFJlYzIuUHRzIElkeCdzIC4uLlxuXHRcdFx0XHR0aGlzLlVwZGF0ZU91dFB0SWR4cyhvdXRSZWMyKTtcblxuXHRcdFx0XHRpZiAodGhpcy5Qb2x5MkNvbnRhaW5zUG9seTEob3V0UmVjMi5QdHMsIG91dFJlYzEuUHRzKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vb3V0UmVjMSBjb250YWlucyBvdXRSZWMyIC4uLlxuXHRcdFx0XHRcdG91dFJlYzIuSXNIb2xlID0gIW91dFJlYzEuSXNIb2xlO1xuXHRcdFx0XHRcdG91dFJlYzIuRmlyc3RMZWZ0ID0gb3V0UmVjMTtcblx0XHRcdFx0XHRpZiAodGhpcy5tX1VzaW5nUG9seVRyZWUpXG5cdFx0XHRcdFx0XHR0aGlzLkZpeHVwRmlyc3RMZWZ0czIob3V0UmVjMiwgb3V0UmVjMSk7XG5cdFx0XHRcdFx0aWYgKChvdXRSZWMyLklzSG9sZSBeIHRoaXMuUmV2ZXJzZVNvbHV0aW9uKSA9PSAodGhpcy5BcmVhJDEob3V0UmVjMikgPiAwKSlcblx0XHRcdFx0XHRcdHRoaXMuUmV2ZXJzZVBvbHlQdExpbmtzKG91dFJlYzIuUHRzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmICh0aGlzLlBvbHkyQ29udGFpbnNQb2x5MShvdXRSZWMxLlB0cywgb3V0UmVjMi5QdHMpKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Ly9vdXRSZWMyIGNvbnRhaW5zIG91dFJlYzEgLi4uXG5cdFx0XHRcdFx0b3V0UmVjMi5Jc0hvbGUgPSBvdXRSZWMxLklzSG9sZTtcblx0XHRcdFx0XHRvdXRSZWMxLklzSG9sZSA9ICFvdXRSZWMyLklzSG9sZTtcblx0XHRcdFx0XHRvdXRSZWMyLkZpcnN0TGVmdCA9IG91dFJlYzEuRmlyc3RMZWZ0O1xuXHRcdFx0XHRcdG91dFJlYzEuRmlyc3RMZWZ0ID0gb3V0UmVjMjtcblx0XHRcdFx0XHRpZiAodGhpcy5tX1VzaW5nUG9seVRyZWUpXG5cdFx0XHRcdFx0XHR0aGlzLkZpeHVwRmlyc3RMZWZ0czIob3V0UmVjMSwgb3V0UmVjMik7XG5cblx0XHRcdFx0XHRpZiAoKG91dFJlYzEuSXNIb2xlIF4gdGhpcy5SZXZlcnNlU29sdXRpb24pID09ICh0aGlzLkFyZWEkMShvdXRSZWMxKSA+IDApKVxuXHRcdFx0XHRcdFx0dGhpcy5SZXZlcnNlUG9seVB0TGlua3Mob3V0UmVjMS5QdHMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vdGhlIDIgcG9seWdvbnMgYXJlIGNvbXBsZXRlbHkgc2VwYXJhdGUgLi4uXG5cdFx0XHRcdFx0b3V0UmVjMi5Jc0hvbGUgPSBvdXRSZWMxLklzSG9sZTtcblx0XHRcdFx0XHRvdXRSZWMyLkZpcnN0TGVmdCA9IG91dFJlYzEuRmlyc3RMZWZ0O1xuXHRcdFx0XHRcdC8vZml4dXAgRmlyc3RMZWZ0IHBvaW50ZXJzIHRoYXQgbWF5IG5lZWQgcmVhc3NpZ25pbmcgdG8gT3V0UmVjMlxuXHRcdFx0XHRcdGlmICh0aGlzLm1fVXNpbmdQb2x5VHJlZSlcblx0XHRcdFx0XHRcdHRoaXMuRml4dXBGaXJzdExlZnRzMShvdXRSZWMxLCBvdXRSZWMyKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQvL2pvaW5lZCAyIHBvbHlnb25zIHRvZ2V0aGVyIC4uLlxuXHRcdFx0XHRvdXRSZWMyLlB0cyA9IG51bGw7XG5cdFx0XHRcdG91dFJlYzIuQm90dG9tUHQgPSBudWxsO1xuXHRcdFx0XHRvdXRSZWMyLklkeCA9IG91dFJlYzEuSWR4O1xuXHRcdFx0XHRvdXRSZWMxLklzSG9sZSA9IGhvbGVTdGF0ZVJlYy5Jc0hvbGU7XG5cdFx0XHRcdGlmIChob2xlU3RhdGVSZWMgPT09IG91dFJlYzIpXG5cdFx0XHRcdFx0b3V0UmVjMS5GaXJzdExlZnQgPSBvdXRSZWMyLkZpcnN0TGVmdDtcblx0XHRcdFx0b3V0UmVjMi5GaXJzdExlZnQgPSBvdXRSZWMxO1xuXHRcdFx0XHQvL2ZpeHVwIEZpcnN0TGVmdCBwb2ludGVycyB0aGF0IG1heSBuZWVkIHJlYXNzaWduaW5nIHRvIE91dFJlYzFcblx0XHRcdFx0aWYgKHRoaXMubV9Vc2luZ1BvbHlUcmVlKVxuXHRcdFx0XHRcdHRoaXMuRml4dXBGaXJzdExlZnRzMyhvdXRSZWMyLCBvdXRSZWMxKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5VcGRhdGVPdXRQdElkeHMgPSBmdW5jdGlvbiAob3V0cmVjKVxuXHR7XG5cdFx0dmFyIG9wID0gb3V0cmVjLlB0cztcblx0XHRkbyB7XG5cdFx0XHRvcC5JZHggPSBvdXRyZWMuSWR4O1xuXHRcdFx0b3AgPSBvcC5QcmV2O1xuXHRcdH1cblx0XHR3aGlsZSAob3AgIT09IG91dHJlYy5QdHMpXG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5Eb1NpbXBsZVBvbHlnb25zID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHZhciBpID0gMDtcblx0XHR3aGlsZSAoaSA8IHRoaXMubV9Qb2x5T3V0cy5sZW5ndGgpXG5cdFx0e1xuXHRcdFx0dmFyIG91dHJlYyA9IHRoaXMubV9Qb2x5T3V0c1tpKytdO1xuXHRcdFx0dmFyIG9wID0gb3V0cmVjLlB0cztcblx0XHRcdGlmIChvcCA9PT0gbnVsbCB8fCBvdXRyZWMuSXNPcGVuKVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdGRvIC8vZm9yIGVhY2ggUHQgaW4gUG9seWdvbiB1bnRpbCBkdXBsaWNhdGUgZm91bmQgZG8gLi4uXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBvcDIgPSBvcC5OZXh0O1xuXHRcdFx0XHR3aGlsZSAob3AyICE9PSBvdXRyZWMuUHRzKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKChDbGlwcGVyTGliLkludFBvaW50Lm9wX0VxdWFsaXR5KG9wLlB0LCBvcDIuUHQpKSAmJiBvcDIuTmV4dCAhPT0gb3AgJiYgb3AyLlByZXYgIT09IG9wKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdC8vc3BsaXQgdGhlIHBvbHlnb24gaW50byB0d28gLi4uXG5cdFx0XHRcdFx0XHR2YXIgb3AzID0gb3AuUHJldjtcblx0XHRcdFx0XHRcdHZhciBvcDQgPSBvcDIuUHJldjtcblx0XHRcdFx0XHRcdG9wLlByZXYgPSBvcDQ7XG5cdFx0XHRcdFx0XHRvcDQuTmV4dCA9IG9wO1xuXHRcdFx0XHRcdFx0b3AyLlByZXYgPSBvcDM7XG5cdFx0XHRcdFx0XHRvcDMuTmV4dCA9IG9wMjtcblx0XHRcdFx0XHRcdG91dHJlYy5QdHMgPSBvcDtcblx0XHRcdFx0XHRcdHZhciBvdXRyZWMyID0gdGhpcy5DcmVhdGVPdXRSZWMoKTtcblx0XHRcdFx0XHRcdG91dHJlYzIuUHRzID0gb3AyO1xuXHRcdFx0XHRcdFx0dGhpcy5VcGRhdGVPdXRQdElkeHMob3V0cmVjMik7XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5Qb2x5MkNvbnRhaW5zUG9seTEob3V0cmVjMi5QdHMsIG91dHJlYy5QdHMpKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHQvL091dFJlYzIgaXMgY29udGFpbmVkIGJ5IE91dFJlYzEgLi4uXG5cdFx0XHRcdFx0XHRcdG91dHJlYzIuSXNIb2xlID0gIW91dHJlYy5Jc0hvbGU7XG5cdFx0XHRcdFx0XHRcdG91dHJlYzIuRmlyc3RMZWZ0ID0gb3V0cmVjO1xuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5tX1VzaW5nUG9seVRyZWUpIHRoaXMuRml4dXBGaXJzdExlZnRzMihvdXRyZWMyLCBvdXRyZWMpO1xuXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIGlmICh0aGlzLlBvbHkyQ29udGFpbnNQb2x5MShvdXRyZWMuUHRzLCBvdXRyZWMyLlB0cykpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdC8vT3V0UmVjMSBpcyBjb250YWluZWQgYnkgT3V0UmVjMiAuLi5cblx0XHRcdFx0XHRcdFx0b3V0cmVjMi5Jc0hvbGUgPSBvdXRyZWMuSXNIb2xlO1xuXHRcdFx0XHRcdFx0XHRvdXRyZWMuSXNIb2xlID0gIW91dHJlYzIuSXNIb2xlO1xuXHRcdFx0XHRcdFx0XHRvdXRyZWMyLkZpcnN0TGVmdCA9IG91dHJlYy5GaXJzdExlZnQ7XG5cdFx0XHRcdFx0XHRcdG91dHJlYy5GaXJzdExlZnQgPSBvdXRyZWMyO1xuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5tX1VzaW5nUG9seVRyZWUpIHRoaXMuRml4dXBGaXJzdExlZnRzMihvdXRyZWMsIG91dHJlYzIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHQvL3RoZSAyIHBvbHlnb25zIGFyZSBzZXBhcmF0ZSAuLi5cblx0XHRcdFx0XHRcdFx0b3V0cmVjMi5Jc0hvbGUgPSBvdXRyZWMuSXNIb2xlO1xuXHRcdFx0XHRcdFx0XHRvdXRyZWMyLkZpcnN0TGVmdCA9IG91dHJlYy5GaXJzdExlZnQ7XG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLm1fVXNpbmdQb2x5VHJlZSkgdGhpcy5GaXh1cEZpcnN0TGVmdHMxKG91dHJlYywgb3V0cmVjMik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRvcDIgPSBvcDtcblx0XHRcdFx0XHRcdC8vaWUgZ2V0IHJlYWR5IGZvciB0aGUgbmV4dCBpdGVyYXRpb25cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0b3AyID0gb3AyLk5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0b3AgPSBvcC5OZXh0O1xuXHRcdFx0fVxuXHRcdFx0d2hpbGUgKG9wICE9PSBvdXRyZWMuUHRzKVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuQXJlYSA9IGZ1bmN0aW9uIChwb2x5KVxuXHR7XG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KHBvbHkpKVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0dmFyIGNudCA9IHBvbHkubGVuZ3RoO1xuXHRcdGlmIChjbnQgPCAzKVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0dmFyIGEgPSAwO1xuXHRcdGZvciAodmFyIGkgPSAwLCBqID0gY250IC0gMTsgaSA8IGNudDsgKytpKVxuXHRcdHtcblx0XHRcdGEgKz0gKHBvbHlbal0uWCArIHBvbHlbaV0uWCkgKiAocG9seVtqXS5ZIC0gcG9seVtpXS5ZKTtcblx0XHRcdGogPSBpO1xuXHRcdH1cblx0XHRyZXR1cm4gLWEgKiAwLjU7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5BcmVhID0gZnVuY3Rpb24gKG9wKVxuXHR7XG5cdFx0dmFyIG9wRmlyc3QgPSBvcDtcblx0XHRpZiAob3AgPT09IG51bGwpIHJldHVybiAwO1xuXHRcdHZhciBhID0gMDtcblx0XHRkbyB7XG5cdFx0XHRhID0gYSArIChvcC5QcmV2LlB0LlggKyBvcC5QdC5YKSAqIChvcC5QcmV2LlB0LlkgLSBvcC5QdC5ZKTtcblx0XHRcdG9wID0gb3AuTmV4dDtcblx0XHR9IHdoaWxlIChvcCAhPT0gb3BGaXJzdCk7IC8vICYmIHR5cGVvZiBvcCAhPT0gJ3VuZGVmaW5lZCcpO1xuXHRcdHJldHVybiBhICogMC41O1xuXHR9XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLnByb3RvdHlwZS5BcmVhJDEgPSBmdW5jdGlvbiAob3V0UmVjKVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuQXJlYShvdXRSZWMuUHRzKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuU2ltcGxpZnlQb2x5Z29uID0gZnVuY3Rpb24gKHBvbHksIGZpbGxUeXBlKVxuXHR7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBBcnJheSgpO1xuXHRcdHZhciBjID0gbmV3IENsaXBwZXJMaWIuQ2xpcHBlcigwKTtcblx0XHRjLlN0cmljdGx5U2ltcGxlID0gdHJ1ZTtcblx0XHRjLkFkZFBhdGgocG9seSwgQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QsIHRydWUpO1xuXHRcdGMuRXhlY3V0ZShDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24sIHJlc3VsdCwgZmlsbFR5cGUsIGZpbGxUeXBlKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5TaW1wbGlmeVBvbHlnb25zID0gZnVuY3Rpb24gKHBvbHlzLCBmaWxsVHlwZSlcblx0e1xuXHRcdGlmICh0eXBlb2YgKGZpbGxUeXBlKSA9PT0gXCJ1bmRlZmluZWRcIikgZmlsbFR5cGUgPSBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRFdmVuT2RkO1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQXJyYXkoKTtcblx0XHR2YXIgYyA9IG5ldyBDbGlwcGVyTGliLkNsaXBwZXIoMCk7XG5cdFx0Yy5TdHJpY3RseVNpbXBsZSA9IHRydWU7XG5cdFx0Yy5BZGRQYXRocyhwb2x5cywgQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QsIHRydWUpO1xuXHRcdGMuRXhlY3V0ZShDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24sIHJlc3VsdCwgZmlsbFR5cGUsIGZpbGxUeXBlKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5EaXN0YW5jZVNxcmQgPSBmdW5jdGlvbiAocHQxLCBwdDIpXG5cdHtcblx0XHR2YXIgZHggPSAocHQxLlggLSBwdDIuWCk7XG5cdFx0dmFyIGR5ID0gKHB0MS5ZIC0gcHQyLlkpO1xuXHRcdHJldHVybiAoZHggKiBkeCArIGR5ICogZHkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5EaXN0YW5jZUZyb21MaW5lU3FyZCA9IGZ1bmN0aW9uIChwdCwgbG4xLCBsbjIpXG5cdHtcblx0XHQvL1RoZSBlcXVhdGlvbiBvZiBhIGxpbmUgaW4gZ2VuZXJhbCBmb3JtIChBeCArIEJ5ICsgQyA9IDApXG5cdFx0Ly9naXZlbiAyIHBvaW50cyAoeMK5LHnCuSkgJiAoeMKyLHnCsikgaXMgLi4uXG5cdFx0Ly8oecK5IC0gecKyKXggKyAoeMKyIC0geMK5KXkgKyAoecKyIC0gecK5KXjCuSAtICh4wrIgLSB4wrkpecK5ID0gMFxuXHRcdC8vQSA9ICh5wrkgLSB5wrIpOyBCID0gKHjCsiAtIHjCuSk7IEMgPSAoecKyIC0gecK5KXjCuSAtICh4wrIgLSB4wrkpecK5XG5cdFx0Ly9wZXJwZW5kaWN1bGFyIGRpc3RhbmNlIG9mIHBvaW50ICh4wrMsecKzKSA9IChBeMKzICsgQnnCsyArIEMpL1NxcnQoQcKyICsgQsKyKVxuXHRcdC8vc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGVycGVuZGljdWxhcl9kaXN0YW5jZVxuXHRcdHZhciBBID0gbG4xLlkgLSBsbjIuWTtcblx0XHR2YXIgQiA9IGxuMi5YIC0gbG4xLlg7XG5cdFx0dmFyIEMgPSBBICogbG4xLlggKyBCICogbG4xLlk7XG5cdFx0QyA9IEEgKiBwdC5YICsgQiAqIHB0LlkgLSBDO1xuXHRcdHJldHVybiAoQyAqIEMpIC8gKEEgKiBBICsgQiAqIEIpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5TbG9wZXNOZWFyQ29sbGluZWFyID0gZnVuY3Rpb24gKHB0MSwgcHQyLCBwdDMsIGRpc3RTcXJkKVxuXHR7XG5cdFx0Ly90aGlzIGZ1bmN0aW9uIGlzIG1vcmUgYWNjdXJhdGUgd2hlbiB0aGUgcG9pbnQgdGhhdCdzIEdFT01FVFJJQ0FMTFlcblx0XHQvL2JldHdlZW4gdGhlIG90aGVyIDIgcG9pbnRzIGlzIHRoZSBvbmUgdGhhdCdzIHRlc3RlZCBmb3IgZGlzdGFuY2UuXG5cdFx0Ly9uYjogd2l0aCAnc3Bpa2VzJywgZWl0aGVyIHB0MSBvciBwdDMgaXMgZ2VvbWV0cmljYWxseSBiZXR3ZWVuIHRoZSBvdGhlciBwdHNcblx0XHRpZiAoTWF0aC5hYnMocHQxLlggLSBwdDIuWCkgPiBNYXRoLmFicyhwdDEuWSAtIHB0Mi5ZKSlcblx0XHR7XG5cdFx0XHRpZiAoKHB0MS5YID4gcHQyLlgpID09PSAocHQxLlggPCBwdDMuWCkpXG5cdFx0XHRcdHJldHVybiBDbGlwcGVyTGliLkNsaXBwZXIuRGlzdGFuY2VGcm9tTGluZVNxcmQocHQxLCBwdDIsIHB0MykgPCBkaXN0U3FyZDtcblx0XHRcdGVsc2UgaWYgKChwdDIuWCA+IHB0MS5YKSA9PT0gKHB0Mi5YIDwgcHQzLlgpKVxuXHRcdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5DbGlwcGVyLkRpc3RhbmNlRnJvbUxpbmVTcXJkKHB0MiwgcHQxLCBwdDMpIDwgZGlzdFNxcmQ7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHJldHVybiBDbGlwcGVyTGliLkNsaXBwZXIuRGlzdGFuY2VGcm9tTGluZVNxcmQocHQzLCBwdDEsIHB0MikgPCBkaXN0U3FyZDtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdGlmICgocHQxLlkgPiBwdDIuWSkgPT09IChwdDEuWSA8IHB0My5ZKSlcblx0XHRcdFx0cmV0dXJuIENsaXBwZXJMaWIuQ2xpcHBlci5EaXN0YW5jZUZyb21MaW5lU3FyZChwdDEsIHB0MiwgcHQzKSA8IGRpc3RTcXJkO1xuXHRcdFx0ZWxzZSBpZiAoKHB0Mi5ZID4gcHQxLlkpID09PSAocHQyLlkgPCBwdDMuWSkpXG5cdFx0XHRcdHJldHVybiBDbGlwcGVyTGliLkNsaXBwZXIuRGlzdGFuY2VGcm9tTGluZVNxcmQocHQyLCBwdDEsIHB0MykgPCBkaXN0U3FyZDtcblx0XHRcdGVsc2Vcblx0XHRcdFx0cmV0dXJuIENsaXBwZXJMaWIuQ2xpcHBlci5EaXN0YW5jZUZyb21MaW5lU3FyZChwdDMsIHB0MSwgcHQyKSA8IGRpc3RTcXJkO1xuXHRcdH1cblx0fVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5Qb2ludHNBcmVDbG9zZSA9IGZ1bmN0aW9uIChwdDEsIHB0MiwgZGlzdFNxcmQpXG5cdHtcblx0XHR2YXIgZHggPSBwdDEuWCAtIHB0Mi5YO1xuXHRcdHZhciBkeSA9IHB0MS5ZIC0gcHQyLlk7XG5cdFx0cmV0dXJuICgoZHggKiBkeCkgKyAoZHkgKiBkeSkgPD0gZGlzdFNxcmQpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5FeGNsdWRlT3AgPSBmdW5jdGlvbiAob3ApXG5cdHtcblx0XHR2YXIgcmVzdWx0ID0gb3AuUHJldjtcblx0XHRyZXN1bHQuTmV4dCA9IG9wLk5leHQ7XG5cdFx0b3AuTmV4dC5QcmV2ID0gcmVzdWx0O1xuXHRcdHJlc3VsdC5JZHggPSAwO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLkNsZWFuUG9seWdvbiA9IGZ1bmN0aW9uIChwYXRoLCBkaXN0YW5jZSlcblx0e1xuXHRcdGlmICh0eXBlb2YgKGRpc3RhbmNlKSA9PT0gXCJ1bmRlZmluZWRcIikgZGlzdGFuY2UgPSAxLjQxNTtcblx0XHQvL2Rpc3RhbmNlID0gcHJveGltaXR5IGluIHVuaXRzL3BpeGVscyBiZWxvdyB3aGljaCB2ZXJ0aWNlcyB3aWxsIGJlIHN0cmlwcGVkLlxuXHRcdC8vRGVmYXVsdCB+PSBzcXJ0KDIpIHNvIHdoZW4gYWRqYWNlbnQgdmVydGljZXMgb3Igc2VtaS1hZGphY2VudCB2ZXJ0aWNlcyBoYXZlXG5cdFx0Ly9ib3RoIHggJiB5IGNvb3JkcyB3aXRoaW4gMSB1bml0LCB0aGVuIHRoZSBzZWNvbmQgdmVydGV4IHdpbGwgYmUgc3RyaXBwZWQuXG5cdFx0dmFyIGNudCA9IHBhdGgubGVuZ3RoO1xuXHRcdGlmIChjbnQgPT09IDApXG5cdFx0XHRyZXR1cm4gbmV3IEFycmF5KCk7XG5cdFx0dmFyIG91dFB0cyA9IG5ldyBBcnJheShjbnQpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY250OyArK2kpXG5cdFx0XHRvdXRQdHNbaV0gPSBuZXcgQ2xpcHBlckxpYi5PdXRQdCgpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY250OyArK2kpXG5cdFx0e1xuXHRcdFx0b3V0UHRzW2ldLlB0ID0gcGF0aFtpXTtcblx0XHRcdG91dFB0c1tpXS5OZXh0ID0gb3V0UHRzWyhpICsgMSkgJSBjbnRdO1xuXHRcdFx0b3V0UHRzW2ldLk5leHQuUHJldiA9IG91dFB0c1tpXTtcblx0XHRcdG91dFB0c1tpXS5JZHggPSAwO1xuXHRcdH1cblx0XHR2YXIgZGlzdFNxcmQgPSBkaXN0YW5jZSAqIGRpc3RhbmNlO1xuXHRcdHZhciBvcCA9IG91dFB0c1swXTtcblx0XHR3aGlsZSAob3AuSWR4ID09PSAwICYmIG9wLk5leHQgIT09IG9wLlByZXYpXG5cdFx0e1xuXHRcdFx0aWYgKENsaXBwZXJMaWIuQ2xpcHBlci5Qb2ludHNBcmVDbG9zZShvcC5QdCwgb3AuUHJldi5QdCwgZGlzdFNxcmQpKVxuXHRcdFx0e1xuXHRcdFx0XHRvcCA9IENsaXBwZXJMaWIuQ2xpcHBlci5FeGNsdWRlT3Aob3ApO1xuXHRcdFx0XHRjbnQtLTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKENsaXBwZXJMaWIuQ2xpcHBlci5Qb2ludHNBcmVDbG9zZShvcC5QcmV2LlB0LCBvcC5OZXh0LlB0LCBkaXN0U3FyZCkpXG5cdFx0XHR7XG5cdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlci5FeGNsdWRlT3Aob3AuTmV4dCk7XG5cdFx0XHRcdG9wID0gQ2xpcHBlckxpYi5DbGlwcGVyLkV4Y2x1ZGVPcChvcCk7XG5cdFx0XHRcdGNudCAtPSAyO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoQ2xpcHBlckxpYi5DbGlwcGVyLlNsb3Blc05lYXJDb2xsaW5lYXIob3AuUHJldi5QdCwgb3AuUHQsIG9wLk5leHQuUHQsIGRpc3RTcXJkKSlcblx0XHRcdHtcblx0XHRcdFx0b3AgPSBDbGlwcGVyTGliLkNsaXBwZXIuRXhjbHVkZU9wKG9wKTtcblx0XHRcdFx0Y250LS07XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdG9wLklkeCA9IDE7XG5cdFx0XHRcdG9wID0gb3AuTmV4dDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGNudCA8IDMpXG5cdFx0XHRjbnQgPSAwO1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQXJyYXkoY250KTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNudDsgKytpKVxuXHRcdHtcblx0XHRcdHJlc3VsdFtpXSA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MShvcC5QdCk7XG5cdFx0XHRvcCA9IG9wLk5leHQ7XG5cdFx0fVxuXHRcdG91dFB0cyA9IG51bGw7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuQ2xlYW5Qb2x5Z29ucyA9IGZ1bmN0aW9uIChwb2x5cywgZGlzdGFuY2UpXG5cdHtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IEFycmF5KHBvbHlzLmxlbmd0aCk7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSBwb2x5cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspXG5cdFx0XHRyZXN1bHRbaV0gPSBDbGlwcGVyTGliLkNsaXBwZXIuQ2xlYW5Qb2x5Z29uKHBvbHlzW2ldLCBkaXN0YW5jZSk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuTWlua293c2tpID0gZnVuY3Rpb24gKHBhdHRlcm4sIHBhdGgsIElzU3VtLCBJc0Nsb3NlZClcblx0e1xuXHRcdHZhciBkZWx0YSA9IChJc0Nsb3NlZCA/IDEgOiAwKTtcblx0XHR2YXIgcG9seUNudCA9IHBhdHRlcm4ubGVuZ3RoO1xuXHRcdHZhciBwYXRoQ250ID0gcGF0aC5sZW5ndGg7XG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBBcnJheSgpO1xuXHRcdGlmIChJc1N1bSlcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aENudDsgaSsrKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgcCA9IG5ldyBBcnJheShwb2x5Q250KTtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDAsIGpsZW4gPSBwYXR0ZXJuLmxlbmd0aCwgaXAgPSBwYXR0ZXJuW2pdOyBqIDwgamxlbjsgaisrLCBpcCA9IHBhdHRlcm5bal0pXG5cdFx0XHRcdFx0cFtqXSA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MihwYXRoW2ldLlggKyBpcC5YLCBwYXRoW2ldLlkgKyBpcC5ZKTtcblx0XHRcdFx0cmVzdWx0LnB1c2gocCk7XG5cdFx0XHR9XG5cdFx0ZWxzZVxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoQ250OyBpKyspXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBwID0gbmV3IEFycmF5KHBvbHlDbnQpO1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMCwgamxlbiA9IHBhdHRlcm4ubGVuZ3RoLCBpcCA9IHBhdHRlcm5bal07IGogPCBqbGVuOyBqKyssIGlwID0gcGF0dGVybltqXSlcblx0XHRcdFx0XHRwW2pdID0gbmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKHBhdGhbaV0uWCAtIGlwLlgsIHBhdGhbaV0uWSAtIGlwLlkpO1xuXHRcdFx0XHRyZXN1bHQucHVzaChwKTtcblx0XHRcdH1cblx0XHR2YXIgcXVhZHMgPSBuZXcgQXJyYXkoKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhDbnQgLSAxICsgZGVsdGE7IGkrKylcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgcG9seUNudDsgaisrKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgcXVhZCA9IG5ldyBBcnJheSgpO1xuXHRcdFx0XHRxdWFkLnB1c2gocmVzdWx0W2kgJSBwYXRoQ250XVtqICUgcG9seUNudF0pO1xuXHRcdFx0XHRxdWFkLnB1c2gocmVzdWx0WyhpICsgMSkgJSBwYXRoQ250XVtqICUgcG9seUNudF0pO1xuXHRcdFx0XHRxdWFkLnB1c2gocmVzdWx0WyhpICsgMSkgJSBwYXRoQ250XVsoaiArIDEpICUgcG9seUNudF0pO1xuXHRcdFx0XHRxdWFkLnB1c2gocmVzdWx0W2kgJSBwYXRoQ250XVsoaiArIDEpICUgcG9seUNudF0pO1xuXHRcdFx0XHRpZiAoIUNsaXBwZXJMaWIuQ2xpcHBlci5PcmllbnRhdGlvbihxdWFkKSlcblx0XHRcdFx0XHRxdWFkLnJldmVyc2UoKTtcblx0XHRcdFx0cXVhZHMucHVzaChxdWFkKTtcblx0XHRcdH1cblx0XHRyZXR1cm4gcXVhZHM7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLk1pbmtvd3NraVN1bSA9IGZ1bmN0aW9uIChwYXR0ZXJuLCBwYXRoX29yX3BhdGhzLCBwYXRoSXNDbG9zZWQpXG5cdHtcblx0XHRpZiAoIShwYXRoX29yX3BhdGhzWzBdIGluc3RhbmNlb2YgQXJyYXkpKVxuXHRcdHtcblx0XHRcdHZhciBwYXRoID0gcGF0aF9vcl9wYXRocztcblx0XHRcdHZhciBwYXRocyA9IENsaXBwZXJMaWIuQ2xpcHBlci5NaW5rb3dza2kocGF0dGVybiwgcGF0aCwgdHJ1ZSwgcGF0aElzQ2xvc2VkKTtcblx0XHRcdHZhciBjID0gbmV3IENsaXBwZXJMaWIuQ2xpcHBlcigpO1xuXHRcdFx0Yy5BZGRQYXRocyhwYXRocywgQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QsIHRydWUpO1xuXHRcdFx0Yy5FeGVjdXRlKENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbiwgcGF0aHMsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm8sIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm8pO1xuXHRcdFx0cmV0dXJuIHBhdGhzO1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dmFyIHBhdGhzID0gcGF0aF9vcl9wYXRocztcblx0XHRcdHZhciBzb2x1dGlvbiA9IG5ldyBDbGlwcGVyTGliLlBhdGhzKCk7XG5cdFx0XHR2YXIgYyA9IG5ldyBDbGlwcGVyTGliLkNsaXBwZXIoKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyArK2kpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciB0bXAgPSBDbGlwcGVyTGliLkNsaXBwZXIuTWlua293c2tpKHBhdHRlcm4sIHBhdGhzW2ldLCB0cnVlLCBwYXRoSXNDbG9zZWQpO1xuXHRcdFx0XHRjLkFkZFBhdGhzKHRtcCwgQ2xpcHBlckxpYi5Qb2x5VHlwZS5wdFN1YmplY3QsIHRydWUpO1xuXHRcdFx0XHRpZiAocGF0aElzQ2xvc2VkKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIHBhdGggPSBDbGlwcGVyTGliLkNsaXBwZXIuVHJhbnNsYXRlUGF0aChwYXRoc1tpXSwgcGF0dGVyblswXSk7XG5cdFx0XHRcdFx0Yy5BZGRQYXRoKHBhdGgsIENsaXBwZXJMaWIuUG9seVR5cGUucHRDbGlwLCB0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Yy5FeGVjdXRlKENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbiwgc29sdXRpb24sXG5cdFx0XHRcdENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm8sIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5vblplcm8pO1xuXHRcdFx0cmV0dXJuIHNvbHV0aW9uO1xuXHRcdH1cblx0fVxuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5UcmFuc2xhdGVQYXRoID0gZnVuY3Rpb24gKHBhdGgsIGRlbHRhKVxuXHR7XG5cdFx0dmFyIG91dFBhdGggPSBuZXcgQ2xpcHBlckxpYi5QYXRoKCk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKVxuXHRcdFx0b3V0UGF0aC5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50MihwYXRoW2ldLlggKyBkZWx0YS5YLCBwYXRoW2ldLlkgKyBkZWx0YS5ZKSk7XG5cdFx0cmV0dXJuIG91dFBhdGg7XG5cdH1cblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuTWlua293c2tpRGlmZiA9IGZ1bmN0aW9uIChwb2x5MSwgcG9seTIpXG5cdHtcblx0XHR2YXIgcGF0aHMgPSBDbGlwcGVyTGliLkNsaXBwZXIuTWlua293c2tpKHBvbHkxLCBwb2x5MiwgZmFsc2UsIHRydWUpO1xuXHRcdHZhciBjID0gbmV3IENsaXBwZXJMaWIuQ2xpcHBlcigpO1xuXHRcdGMuQWRkUGF0aHMocGF0aHMsIENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0LCB0cnVlKTtcblx0XHRjLkV4ZWN1dGUoQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uLCBwYXRocywgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0Tm9uWmVybywgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0Tm9uWmVybyk7XG5cdFx0cmV0dXJuIHBhdGhzO1xuXHR9XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyLlBvbHlUcmVlVG9QYXRocyA9IGZ1bmN0aW9uIChwb2x5dHJlZSlcblx0e1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQXJyYXkoKTtcblx0XHQvL3Jlc3VsdC5zZXRfQ2FwYWNpdHkocG9seXRyZWUuZ2V0X1RvdGFsKCkpO1xuXHRcdENsaXBwZXJMaWIuQ2xpcHBlci5BZGRQb2x5Tm9kZVRvUGF0aHMocG9seXRyZWUsIENsaXBwZXJMaWIuQ2xpcHBlci5Ob2RlVHlwZS5udEFueSwgcmVzdWx0KTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5BZGRQb2x5Tm9kZVRvUGF0aHMgPSBmdW5jdGlvbiAocG9seW5vZGUsIG50LCBwYXRocylcblx0e1xuXHRcdHZhciBtYXRjaCA9IHRydWU7XG5cdFx0c3dpdGNoIChudClcblx0XHR7XG5cdFx0Y2FzZSBDbGlwcGVyTGliLkNsaXBwZXIuTm9kZVR5cGUubnRPcGVuOlxuXHRcdFx0cmV0dXJuO1xuXHRcdGNhc2UgQ2xpcHBlckxpYi5DbGlwcGVyLk5vZGVUeXBlLm50Q2xvc2VkOlxuXHRcdFx0bWF0Y2ggPSAhcG9seW5vZGUuSXNPcGVuO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRpZiAocG9seW5vZGUubV9wb2x5Z29uLmxlbmd0aCA+IDAgJiYgbWF0Y2gpXG5cdFx0XHRwYXRocy5wdXNoKHBvbHlub2RlLm1fcG9seWdvbik7XG5cdFx0Zm9yICh2YXIgJGkzID0gMCwgJHQzID0gcG9seW5vZGUuQ2hpbGRzKCksICRsMyA9ICR0My5sZW5ndGgsIHBuID0gJHQzWyRpM107ICRpMyA8ICRsMzsgJGkzKyssIHBuID0gJHQzWyRpM10pXG5cdFx0XHRDbGlwcGVyTGliLkNsaXBwZXIuQWRkUG9seU5vZGVUb1BhdGhzKHBuLCBudCwgcGF0aHMpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlci5PcGVuUGF0aHNGcm9tUG9seVRyZWUgPSBmdW5jdGlvbiAocG9seXRyZWUpXG5cdHtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IENsaXBwZXJMaWIuUGF0aHMoKTtcblx0XHQvL3Jlc3VsdC5zZXRfQ2FwYWNpdHkocG9seXRyZWUuQ2hpbGRDb3VudCgpKTtcblx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IHBvbHl0cmVlLkNoaWxkQ291bnQoKTsgaSA8IGlsZW47IGkrKylcblx0XHRcdGlmIChwb2x5dHJlZS5DaGlsZHMoKVtpXS5Jc09wZW4pXG5cdFx0XHRcdHJlc3VsdC5wdXNoKHBvbHl0cmVlLkNoaWxkcygpW2ldLm1fcG9seWdvbik7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXIuQ2xvc2VkUGF0aHNGcm9tUG9seVRyZWUgPSBmdW5jdGlvbiAocG9seXRyZWUpXG5cdHtcblx0XHR2YXIgcmVzdWx0ID0gbmV3IENsaXBwZXJMaWIuUGF0aHMoKTtcblx0XHQvL3Jlc3VsdC5zZXRfQ2FwYWNpdHkocG9seXRyZWUuVG90YWwoKSk7XG5cdFx0Q2xpcHBlckxpYi5DbGlwcGVyLkFkZFBvbHlOb2RlVG9QYXRocyhwb2x5dHJlZSwgQ2xpcHBlckxpYi5DbGlwcGVyLk5vZGVUeXBlLm50Q2xvc2VkLCByZXN1bHQpO1xuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0SW5oZXJpdChDbGlwcGVyTGliLkNsaXBwZXIsIENsaXBwZXJMaWIuQ2xpcHBlckJhc2UpO1xuXHRDbGlwcGVyTGliLkNsaXBwZXIuTm9kZVR5cGUgPSB7XG5cdFx0bnRBbnk6IDAsXG5cdFx0bnRPcGVuOiAxLFxuXHRcdG50Q2xvc2VkOiAyXG5cdH07XG5cblx0LyoqXG5cdCogQGNvbnN0cnVjdG9yXG5cdCovXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldCA9IGZ1bmN0aW9uIChtaXRlckxpbWl0LCBhcmNUb2xlcmFuY2UpXG5cdHtcblx0XHRpZiAodHlwZW9mIChtaXRlckxpbWl0KSA9PT0gXCJ1bmRlZmluZWRcIikgbWl0ZXJMaW1pdCA9IDI7XG5cdFx0aWYgKHR5cGVvZiAoYXJjVG9sZXJhbmNlKSA9PT0gXCJ1bmRlZmluZWRcIikgYXJjVG9sZXJhbmNlID0gQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LmRlZl9hcmNfdG9sZXJhbmNlO1xuXHRcdHRoaXMubV9kZXN0UG9seXMgPSBuZXcgQ2xpcHBlckxpYi5QYXRocygpO1xuXHRcdHRoaXMubV9zcmNQb2x5ID0gbmV3IENsaXBwZXJMaWIuUGF0aCgpO1xuXHRcdHRoaXMubV9kZXN0UG9seSA9IG5ldyBDbGlwcGVyTGliLlBhdGgoKTtcblx0XHR0aGlzLm1fbm9ybWFscyA9IG5ldyBBcnJheSgpO1xuXHRcdHRoaXMubV9kZWx0YSA9IDA7XG5cdFx0dGhpcy5tX3NpbkEgPSAwO1xuXHRcdHRoaXMubV9zaW4gPSAwO1xuXHRcdHRoaXMubV9jb3MgPSAwO1xuXHRcdHRoaXMubV9taXRlckxpbSA9IDA7XG5cdFx0dGhpcy5tX1N0ZXBzUGVyUmFkID0gMDtcblx0XHR0aGlzLm1fbG93ZXN0ID0gbmV3IENsaXBwZXJMaWIuSW50UG9pbnQwKCk7XG5cdFx0dGhpcy5tX3BvbHlOb2RlcyA9IG5ldyBDbGlwcGVyTGliLlBvbHlOb2RlKCk7XG5cdFx0dGhpcy5NaXRlckxpbWl0ID0gbWl0ZXJMaW1pdDtcblx0XHR0aGlzLkFyY1RvbGVyYW5jZSA9IGFyY1RvbGVyYW5jZTtcblx0XHR0aGlzLm1fbG93ZXN0LlggPSAtMTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQudHdvX3BpID0gNi4yODMxODUzMDcxNzk1OTtcblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LmRlZl9hcmNfdG9sZXJhbmNlID0gMC4yNTtcblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnByb3RvdHlwZS5DbGVhciA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHRDbGlwcGVyTGliLkNsZWFyKHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRzKCkpO1xuXHRcdHRoaXMubV9sb3dlc3QuWCA9IC0xO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCA9IENsaXBwZXJMaWIuQ2xpcHBlci5Sb3VuZDtcblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnByb3RvdHlwZS5BZGRQYXRoID0gZnVuY3Rpb24gKHBhdGgsIGpvaW5UeXBlLCBlbmRUeXBlKVxuXHR7XG5cdFx0dmFyIGhpZ2hJID0gcGF0aC5sZW5ndGggLSAxO1xuXHRcdGlmIChoaWdoSSA8IDApXG5cdFx0XHRyZXR1cm47XG5cdFx0dmFyIG5ld05vZGUgPSBuZXcgQ2xpcHBlckxpYi5Qb2x5Tm9kZSgpO1xuXHRcdG5ld05vZGUubV9qb2ludHlwZSA9IGpvaW5UeXBlO1xuXHRcdG5ld05vZGUubV9lbmR0eXBlID0gZW5kVHlwZTtcblx0XHQvL3N0cmlwIGR1cGxpY2F0ZSBwb2ludHMgZnJvbSBwYXRoIGFuZCBhbHNvIGdldCBpbmRleCB0byB0aGUgbG93ZXN0IHBvaW50IC4uLlxuXHRcdGlmIChlbmRUeXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRMaW5lIHx8IGVuZFR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZFBvbHlnb24pXG5cdFx0XHR3aGlsZSAoaGlnaEkgPiAwICYmIENsaXBwZXJMaWIuSW50UG9pbnQub3BfRXF1YWxpdHkocGF0aFswXSwgcGF0aFtoaWdoSV0pKVxuXHRcdFx0XHRoaWdoSS0tO1xuXHRcdC8vbmV3Tm9kZS5tX3BvbHlnb24uc2V0X0NhcGFjaXR5KGhpZ2hJICsgMSk7XG5cdFx0bmV3Tm9kZS5tX3BvbHlnb24ucHVzaChwYXRoWzBdKTtcblx0XHR2YXIgaiA9IDAsXG5cdFx0XHRrID0gMDtcblx0XHRmb3IgKHZhciBpID0gMTsgaSA8PSBoaWdoSTsgaSsrKVxuXHRcdFx0aWYgKENsaXBwZXJMaWIuSW50UG9pbnQub3BfSW5lcXVhbGl0eShuZXdOb2RlLm1fcG9seWdvbltqXSwgcGF0aFtpXSkpXG5cdFx0XHR7XG5cdFx0XHRcdGorKztcblx0XHRcdFx0bmV3Tm9kZS5tX3BvbHlnb24ucHVzaChwYXRoW2ldKTtcblx0XHRcdFx0aWYgKHBhdGhbaV0uWSA+IG5ld05vZGUubV9wb2x5Z29uW2tdLlkgfHwgKHBhdGhbaV0uWSA9PT0gbmV3Tm9kZS5tX3BvbHlnb25ba10uWSAmJiBwYXRoW2ldLlggPCBuZXdOb2RlLm1fcG9seWdvbltrXS5YKSlcblx0XHRcdFx0XHRrID0gajtcblx0XHRcdH1cblx0XHRpZiAoZW5kVHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0Q2xvc2VkUG9seWdvbiAmJiBqIDwgMikgcmV0dXJuO1xuXG5cdFx0dGhpcy5tX3BvbHlOb2Rlcy5BZGRDaGlsZChuZXdOb2RlKTtcblx0XHQvL2lmIHRoaXMgcGF0aCdzIGxvd2VzdCBwdCBpcyBsb3dlciB0aGFuIGFsbCB0aGUgb3RoZXJzIHRoZW4gdXBkYXRlIG1fbG93ZXN0XG5cdFx0aWYgKGVuZFR5cGUgIT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZFBvbHlnb24pXG5cdFx0XHRyZXR1cm47XG5cdFx0aWYgKHRoaXMubV9sb3dlc3QuWCA8IDApXG5cdFx0XHR0aGlzLm1fbG93ZXN0ID0gbmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRDb3VudCgpIC0gMSwgayk7XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHZhciBpcCA9IHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRzKClbdGhpcy5tX2xvd2VzdC5YXS5tX3BvbHlnb25bdGhpcy5tX2xvd2VzdC5ZXTtcblx0XHRcdGlmIChuZXdOb2RlLm1fcG9seWdvbltrXS5ZID4gaXAuWSB8fCAobmV3Tm9kZS5tX3BvbHlnb25ba10uWSA9PT0gaXAuWSAmJiBuZXdOb2RlLm1fcG9seWdvbltrXS5YIDwgaXAuWCkpXG5cdFx0XHRcdHRoaXMubV9sb3dlc3QgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIodGhpcy5tX3BvbHlOb2Rlcy5DaGlsZENvdW50KCkgLSAxLCBrKTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnByb3RvdHlwZS5BZGRQYXRocyA9IGZ1bmN0aW9uIChwYXRocywgam9pblR5cGUsIGVuZFR5cGUpXG5cdHtcblx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IHBhdGhzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHRcdHRoaXMuQWRkUGF0aChwYXRoc1tpXSwgam9pblR5cGUsIGVuZFR5cGUpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5wcm90b3R5cGUuRml4T3JpZW50YXRpb25zID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdC8vZml4dXAgb3JpZW50YXRpb25zIG9mIGFsbCBjbG9zZWQgcGF0aHMgaWYgdGhlIG9yaWVudGF0aW9uIG9mIHRoZVxuXHRcdC8vY2xvc2VkIHBhdGggd2l0aCB0aGUgbG93ZXJtb3N0IHZlcnRleCBpcyB3cm9uZyAuLi5cblx0XHRpZiAodGhpcy5tX2xvd2VzdC5YID49IDAgJiYgIUNsaXBwZXJMaWIuQ2xpcHBlci5PcmllbnRhdGlvbih0aGlzLm1fcG9seU5vZGVzLkNoaWxkcygpW3RoaXMubV9sb3dlc3QuWF0ubV9wb2x5Z29uKSlcblx0XHR7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRDb3VudCgpOyBpKyspXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBub2RlID0gdGhpcy5tX3BvbHlOb2Rlcy5DaGlsZHMoKVtpXTtcblx0XHRcdFx0aWYgKG5vZGUubV9lbmR0eXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRQb2x5Z29uIHx8IChub2RlLm1fZW5kdHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0Q2xvc2VkTGluZSAmJiBDbGlwcGVyTGliLkNsaXBwZXIuT3JpZW50YXRpb24obm9kZS5tX3BvbHlnb24pKSlcblx0XHRcdFx0XHRub2RlLm1fcG9seWdvbi5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRDb3VudCgpOyBpKyspXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBub2RlID0gdGhpcy5tX3BvbHlOb2Rlcy5DaGlsZHMoKVtpXTtcblx0XHRcdFx0aWYgKG5vZGUubV9lbmR0eXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRMaW5lICYmICFDbGlwcGVyTGliLkNsaXBwZXIuT3JpZW50YXRpb24obm9kZS5tX3BvbHlnb24pKVxuXHRcdFx0XHRcdG5vZGUubV9wb2x5Z29uLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LkdldFVuaXROb3JtYWwgPSBmdW5jdGlvbiAocHQxLCBwdDIpXG5cdHtcblx0XHR2YXIgZHggPSAocHQyLlggLSBwdDEuWCk7XG5cdFx0dmFyIGR5ID0gKHB0Mi5ZIC0gcHQxLlkpO1xuXHRcdGlmICgoZHggPT09IDApICYmIChkeSA9PT0gMCkpXG5cdFx0XHRyZXR1cm4gbmV3IENsaXBwZXJMaWIuRG91YmxlUG9pbnQyKDAsIDApO1xuXHRcdHZhciBmID0gMSAvIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cdFx0ZHggKj0gZjtcblx0XHRkeSAqPSBmO1xuXHRcdHJldHVybiBuZXcgQ2xpcHBlckxpYi5Eb3VibGVQb2ludDIoZHksIC1keCk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnByb3RvdHlwZS5Eb09mZnNldCA9IGZ1bmN0aW9uIChkZWx0YSlcblx0e1xuXHRcdHRoaXMubV9kZXN0UG9seXMgPSBuZXcgQXJyYXkoKTtcblx0XHR0aGlzLm1fZGVsdGEgPSBkZWx0YTtcblx0XHQvL2lmIFplcm8gb2Zmc2V0LCBqdXN0IGNvcHkgYW55IENMT1NFRCBwb2x5Z29ucyB0byBtX3AgYW5kIHJldHVybiAuLi5cblx0XHRpZiAoQ2xpcHBlckxpYi5DbGlwcGVyQmFzZS5uZWFyX3plcm8oZGVsdGEpKVxuXHRcdHtcblx0XHRcdC8vdGhpcy5tX2Rlc3RQb2x5cy5zZXRfQ2FwYWNpdHkodGhpcy5tX3BvbHlOb2Rlcy5DaGlsZENvdW50KTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tX3BvbHlOb2Rlcy5DaGlsZENvdW50KCk7IGkrKylcblx0XHRcdHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0aGlzLm1fcG9seU5vZGVzLkNoaWxkcygpW2ldO1xuXHRcdFx0XHRpZiAobm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZFBvbHlnb24pXG5cdFx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5cy5wdXNoKG5vZGUubV9wb2x5Z29uKTtcblx0XHRcdH1cblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly9zZWUgb2Zmc2V0X3RyaWdpbm9tZXRyeTMuc3ZnIGluIHRoZSBkb2N1bWVudGF0aW9uIGZvbGRlciAuLi5cblx0XHRpZiAodGhpcy5NaXRlckxpbWl0ID4gMilcblx0XHRcdHRoaXMubV9taXRlckxpbSA9IDIgLyAodGhpcy5NaXRlckxpbWl0ICogdGhpcy5NaXRlckxpbWl0KTtcblx0XHRlbHNlXG5cdFx0XHR0aGlzLm1fbWl0ZXJMaW0gPSAwLjU7XG5cdFx0dmFyIHk7XG5cdFx0aWYgKHRoaXMuQXJjVG9sZXJhbmNlIDw9IDApXG5cdFx0XHR5ID0gQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LmRlZl9hcmNfdG9sZXJhbmNlO1xuXHRcdGVsc2UgaWYgKHRoaXMuQXJjVG9sZXJhbmNlID4gTWF0aC5hYnMoZGVsdGEpICogQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LmRlZl9hcmNfdG9sZXJhbmNlKVxuXHRcdFx0eSA9IE1hdGguYWJzKGRlbHRhKSAqIENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5kZWZfYXJjX3RvbGVyYW5jZTtcblx0XHRlbHNlXG5cdFx0XHR5ID0gdGhpcy5BcmNUb2xlcmFuY2U7XG5cdFx0Ly9zZWUgb2Zmc2V0X3RyaWdpbm9tZXRyeTIuc3ZnIGluIHRoZSBkb2N1bWVudGF0aW9uIGZvbGRlciAuLi5cblx0XHR2YXIgc3RlcHMgPSAzLjE0MTU5MjY1MzU4OTc5IC8gTWF0aC5hY29zKDEgLSB5IC8gTWF0aC5hYnMoZGVsdGEpKTtcblx0XHR0aGlzLm1fc2luID0gTWF0aC5zaW4oQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnR3b19waSAvIHN0ZXBzKTtcblx0XHR0aGlzLm1fY29zID0gTWF0aC5jb3MoQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnR3b19waSAvIHN0ZXBzKTtcblx0XHR0aGlzLm1fU3RlcHNQZXJSYWQgPSBzdGVwcyAvIENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC50d29fcGk7XG5cdFx0aWYgKGRlbHRhIDwgMClcblx0XHRcdHRoaXMubV9zaW4gPSAtdGhpcy5tX3Npbjtcblx0XHQvL3RoaXMubV9kZXN0UG9seXMuc2V0X0NhcGFjaXR5KHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRDb3VudCAqIDIpO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tX3BvbHlOb2Rlcy5DaGlsZENvdW50KCk7IGkrKylcblx0XHR7XG5cdFx0XHR2YXIgbm9kZSA9IHRoaXMubV9wb2x5Tm9kZXMuQ2hpbGRzKClbaV07XG5cdFx0XHR0aGlzLm1fc3JjUG9seSA9IG5vZGUubV9wb2x5Z29uO1xuXHRcdFx0dmFyIGxlbiA9IHRoaXMubV9zcmNQb2x5Lmxlbmd0aDtcblx0XHRcdGlmIChsZW4gPT09IDAgfHwgKGRlbHRhIDw9IDAgJiYgKGxlbiA8IDMgfHwgbm9kZS5tX2VuZHR5cGUgIT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZFBvbHlnb24pKSlcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR0aGlzLm1fZGVzdFBvbHkgPSBuZXcgQXJyYXkoKTtcblx0XHRcdGlmIChsZW4gPT09IDEpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChub2RlLm1fam9pbnR5cGUgPT09IENsaXBwZXJMaWIuSm9pblR5cGUuanRSb3VuZClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBYID0gMSxcblx0XHRcdFx0XHRcdFkgPSAwO1xuXHRcdFx0XHRcdGZvciAodmFyIGogPSAxOyBqIDw9IHN0ZXBzOyBqKyspXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVswXS5YICsgWCAqIGRlbHRhKSwgQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5WzBdLlkgKyBZICogZGVsdGEpKSk7XG5cdFx0XHRcdFx0XHR2YXIgWDIgPSBYO1xuXHRcdFx0XHRcdFx0WCA9IFggKiB0aGlzLm1fY29zIC0gdGhpcy5tX3NpbiAqIFk7XG5cdFx0XHRcdFx0XHRZID0gWDIgKiB0aGlzLm1fc2luICsgWSAqIHRoaXMubV9jb3M7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBYID0gLTEsXG5cdFx0XHRcdFx0XHRZID0gLTE7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCA0OyArK2opXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVswXS5YICsgWCAqIGRlbHRhKSwgQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5WzBdLlkgKyBZICogZGVsdGEpKSk7XG5cdFx0XHRcdFx0XHRpZiAoWCA8IDApXG5cdFx0XHRcdFx0XHRcdFggPSAxO1xuXHRcdFx0XHRcdFx0ZWxzZSBpZiAoWSA8IDApXG5cdFx0XHRcdFx0XHRcdFkgPSAxO1xuXHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRYID0gLTE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMubV9kZXN0UG9seXMucHVzaCh0aGlzLm1fZGVzdFBvbHkpO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdC8vYnVpbGQgbV9ub3JtYWxzIC4uLlxuXHRcdFx0dGhpcy5tX25vcm1hbHMubGVuZ3RoID0gMDtcblx0XHRcdC8vdGhpcy5tX25vcm1hbHMuc2V0X0NhcGFjaXR5KGxlbik7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGxlbiAtIDE7IGorKylcblx0XHRcdFx0dGhpcy5tX25vcm1hbHMucHVzaChDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuR2V0VW5pdE5vcm1hbCh0aGlzLm1fc3JjUG9seVtqXSwgdGhpcy5tX3NyY1BvbHlbaiArIDFdKSk7XG5cdFx0XHRpZiAobm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZExpbmUgfHwgbm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZFBvbHlnb24pXG5cdFx0XHRcdHRoaXMubV9ub3JtYWxzLnB1c2goQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LkdldFVuaXROb3JtYWwodGhpcy5tX3NyY1BvbHlbbGVuIC0gMV0sIHRoaXMubV9zcmNQb2x5WzBdKSk7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHRoaXMubV9ub3JtYWxzLnB1c2gobmV3IENsaXBwZXJMaWIuRG91YmxlUG9pbnQxKHRoaXMubV9ub3JtYWxzW2xlbiAtIDJdKSk7XG5cdFx0XHRpZiAobm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldENsb3NlZFBvbHlnb24pXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBrID0gbGVuIC0gMTtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBsZW47IGorKylcblx0XHRcdFx0XHRrID0gdGhpcy5PZmZzZXRQb2ludChqLCBrLCBub2RlLm1fam9pbnR5cGUpO1xuXHRcdFx0XHR0aGlzLm1fZGVzdFBvbHlzLnB1c2godGhpcy5tX2Rlc3RQb2x5KTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKG5vZGUubV9lbmR0eXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRDbG9zZWRMaW5lKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgayA9IGxlbiAtIDE7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspXG5cdFx0XHRcdFx0ayA9IHRoaXMuT2Zmc2V0UG9pbnQoaiwgaywgbm9kZS5tX2pvaW50eXBlKTtcblx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5cy5wdXNoKHRoaXMubV9kZXN0UG9seSk7XG5cdFx0XHRcdHRoaXMubV9kZXN0UG9seSA9IG5ldyBBcnJheSgpO1xuXHRcdFx0XHQvL3JlLWJ1aWxkIG1fbm9ybWFscyAuLi5cblx0XHRcdFx0dmFyIG4gPSB0aGlzLm1fbm9ybWFsc1tsZW4gLSAxXTtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IGxlbiAtIDE7IGogPiAwOyBqLS0pXG5cdFx0XHRcdFx0dGhpcy5tX25vcm1hbHNbal0gPSBuZXcgQ2xpcHBlckxpYi5Eb3VibGVQb2ludDIoLXRoaXMubV9ub3JtYWxzW2ogLSAxXS5YLCAtdGhpcy5tX25vcm1hbHNbaiAtIDFdLlkpO1xuXHRcdFx0XHR0aGlzLm1fbm9ybWFsc1swXSA9IG5ldyBDbGlwcGVyTGliLkRvdWJsZVBvaW50Migtbi5YLCAtbi5ZKTtcblx0XHRcdFx0ayA9IDA7XG5cdFx0XHRcdGZvciAodmFyIGogPSBsZW4gLSAxOyBqID49IDA7IGotLSlcblx0XHRcdFx0XHRrID0gdGhpcy5PZmZzZXRQb2ludChqLCBrLCBub2RlLm1fam9pbnR5cGUpO1xuXHRcdFx0XHR0aGlzLm1fZGVzdFBvbHlzLnB1c2godGhpcy5tX2Rlc3RQb2x5KTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0dmFyIGsgPSAwO1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMTsgaiA8IGxlbiAtIDE7ICsrailcblx0XHRcdFx0XHRrID0gdGhpcy5PZmZzZXRQb2ludChqLCBrLCBub2RlLm1fam9pbnR5cGUpO1xuXHRcdFx0XHR2YXIgcHQxO1xuXHRcdFx0XHRpZiAobm9kZS5tX2VuZHR5cGUgPT09IENsaXBwZXJMaWIuRW5kVHlwZS5ldE9wZW5CdXR0KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIGogPSBsZW4gLSAxO1xuXHRcdFx0XHRcdHB0MSA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MihDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbal0uWCArIHRoaXMubV9ub3JtYWxzW2pdLlggKiBkZWx0YSksIENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5ZICsgdGhpcy5tX25vcm1hbHNbal0uWSAqIGRlbHRhKSk7XG5cdFx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gocHQxKTtcblx0XHRcdFx0XHRwdDEgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlggLSB0aGlzLm1fbm9ybWFsc1tqXS5YICogZGVsdGEpLCBDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbal0uWSAtIHRoaXMubV9ub3JtYWxzW2pdLlkgKiBkZWx0YSkpO1xuXHRcdFx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKHB0MSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIGogPSBsZW4gLSAxO1xuXHRcdFx0XHRcdGsgPSBsZW4gLSAyO1xuXHRcdFx0XHRcdHRoaXMubV9zaW5BID0gMDtcblx0XHRcdFx0XHR0aGlzLm1fbm9ybWFsc1tqXSA9IG5ldyBDbGlwcGVyTGliLkRvdWJsZVBvaW50MigtdGhpcy5tX25vcm1hbHNbal0uWCwgLXRoaXMubV9ub3JtYWxzW2pdLlkpO1xuXHRcdFx0XHRcdGlmIChub2RlLm1fZW5kdHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0T3BlblNxdWFyZSlcblx0XHRcdFx0XHRcdHRoaXMuRG9TcXVhcmUoaiwgayk7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0dGhpcy5Eb1JvdW5kKGosIGspO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vcmUtYnVpbGQgbV9ub3JtYWxzIC4uLlxuXHRcdFx0XHRmb3IgKHZhciBqID0gbGVuIC0gMTsgaiA+IDA7IGotLSlcblx0XHRcdFx0XHR0aGlzLm1fbm9ybWFsc1tqXSA9IG5ldyBDbGlwcGVyTGliLkRvdWJsZVBvaW50MigtdGhpcy5tX25vcm1hbHNbaiAtIDFdLlgsIC10aGlzLm1fbm9ybWFsc1tqIC0gMV0uWSk7XG5cdFx0XHRcdHRoaXMubV9ub3JtYWxzWzBdID0gbmV3IENsaXBwZXJMaWIuRG91YmxlUG9pbnQyKC10aGlzLm1fbm9ybWFsc1sxXS5YLCAtdGhpcy5tX25vcm1hbHNbMV0uWSk7XG5cdFx0XHRcdGsgPSBsZW4gLSAxO1xuXHRcdFx0XHRmb3IgKHZhciBqID0gayAtIDE7IGogPiAwOyAtLWopXG5cdFx0XHRcdFx0ayA9IHRoaXMuT2Zmc2V0UG9pbnQoaiwgaywgbm9kZS5tX2pvaW50eXBlKTtcblx0XHRcdFx0aWYgKG5vZGUubV9lbmR0eXBlID09PSBDbGlwcGVyTGliLkVuZFR5cGUuZXRPcGVuQnV0dClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHB0MSA9IG5ldyBDbGlwcGVyTGliLkludFBvaW50MihDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbMF0uWCAtIHRoaXMubV9ub3JtYWxzWzBdLlggKiBkZWx0YSksIENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVswXS5ZIC0gdGhpcy5tX25vcm1hbHNbMF0uWSAqIGRlbHRhKSk7XG5cdFx0XHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gocHQxKTtcblx0XHRcdFx0XHRwdDEgPSBuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5WzBdLlggKyB0aGlzLm1fbm9ybWFsc1swXS5YICogZGVsdGEpLCBDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbMF0uWSArIHRoaXMubV9ub3JtYWxzWzBdLlkgKiBkZWx0YSkpO1xuXHRcdFx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKHB0MSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ayA9IDE7XG5cdFx0XHRcdFx0dGhpcy5tX3NpbkEgPSAwO1xuXHRcdFx0XHRcdGlmIChub2RlLm1fZW5kdHlwZSA9PT0gQ2xpcHBlckxpYi5FbmRUeXBlLmV0T3BlblNxdWFyZSlcblx0XHRcdFx0XHRcdHRoaXMuRG9TcXVhcmUoMCwgMSk7XG5cdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0dGhpcy5Eb1JvdW5kKDAsIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMubV9kZXN0UG9seXMucHVzaCh0aGlzLm1fZGVzdFBvbHkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQucHJvdG90eXBlLkV4ZWN1dGUgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dmFyIGEgPSBhcmd1bWVudHMsXG5cdFx0XHRpc3BvbHl0cmVlID0gYVswXSBpbnN0YW5jZW9mIENsaXBwZXJMaWIuUG9seVRyZWU7XG5cdFx0aWYgKCFpc3BvbHl0cmVlKSAvLyBmdW5jdGlvbiAoc29sdXRpb24sIGRlbHRhKVxuXHRcdHtcblx0XHRcdHZhciBzb2x1dGlvbiA9IGFbMF0sXG5cdFx0XHRcdGRlbHRhID0gYVsxXTtcblx0XHRcdENsaXBwZXJMaWIuQ2xlYXIoc29sdXRpb24pO1xuXHRcdFx0dGhpcy5GaXhPcmllbnRhdGlvbnMoKTtcblx0XHRcdHRoaXMuRG9PZmZzZXQoZGVsdGEpO1xuXHRcdFx0Ly9ub3cgY2xlYW4gdXAgJ2Nvcm5lcnMnIC4uLlxuXHRcdFx0dmFyIGNscHIgPSBuZXcgQ2xpcHBlckxpYi5DbGlwcGVyKDApO1xuXHRcdFx0Y2xwci5BZGRQYXRocyh0aGlzLm1fZGVzdFBvbHlzLCBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdCwgdHJ1ZSk7XG5cdFx0XHRpZiAoZGVsdGEgPiAwKVxuXHRcdFx0e1xuXHRcdFx0XHRjbHByLkV4ZWN1dGUoQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uLCBzb2x1dGlvbiwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0UG9zaXRpdmUsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdFBvc2l0aXZlKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0dmFyIHIgPSBDbGlwcGVyTGliLkNsaXBwZXIuR2V0Qm91bmRzKHRoaXMubV9kZXN0UG9seXMpO1xuXHRcdFx0XHR2YXIgb3V0ZXIgPSBuZXcgQ2xpcHBlckxpYi5QYXRoKCk7XG5cdFx0XHRcdG91dGVyLnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKHIubGVmdCAtIDEwLCByLmJvdHRvbSArIDEwKSk7XG5cdFx0XHRcdG91dGVyLnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKHIucmlnaHQgKyAxMCwgci5ib3R0b20gKyAxMCkpO1xuXHRcdFx0XHRvdXRlci5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50MihyLnJpZ2h0ICsgMTAsIHIudG9wIC0gMTApKTtcblx0XHRcdFx0b3V0ZXIucHVzaChuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoci5sZWZ0IC0gMTAsIHIudG9wIC0gMTApKTtcblx0XHRcdFx0Y2xwci5BZGRQYXRoKG91dGVyLCBDbGlwcGVyTGliLlBvbHlUeXBlLnB0U3ViamVjdCwgdHJ1ZSk7XG5cdFx0XHRcdGNscHIuUmV2ZXJzZVNvbHV0aW9uID0gdHJ1ZTtcblx0XHRcdFx0Y2xwci5FeGVjdXRlKENsaXBwZXJMaWIuQ2xpcFR5cGUuY3RVbmlvbiwgc29sdXRpb24sIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5lZ2F0aXZlLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnROZWdhdGl2ZSk7XG5cdFx0XHRcdGlmIChzb2x1dGlvbi5sZW5ndGggPiAwKVxuXHRcdFx0XHRcdHNvbHV0aW9uLnNwbGljZSgwLCAxKTtcblx0XHRcdH1cblx0XHRcdC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoc29sdXRpb24pKTtcblx0XHR9XG5cdFx0ZWxzZSAvLyBmdW5jdGlvbiAocG9seXRyZWUsIGRlbHRhKVxuXHRcdHtcblx0XHRcdHZhciBzb2x1dGlvbiA9IGFbMF0sXG5cdFx0XHRcdGRlbHRhID0gYVsxXTtcblx0XHRcdHNvbHV0aW9uLkNsZWFyKCk7XG5cdFx0XHR0aGlzLkZpeE9yaWVudGF0aW9ucygpO1xuXHRcdFx0dGhpcy5Eb09mZnNldChkZWx0YSk7XG5cdFx0XHQvL25vdyBjbGVhbiB1cCAnY29ybmVycycgLi4uXG5cdFx0XHR2YXIgY2xwciA9IG5ldyBDbGlwcGVyTGliLkNsaXBwZXIoMCk7XG5cdFx0XHRjbHByLkFkZFBhdGhzKHRoaXMubV9kZXN0UG9seXMsIENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0LCB0cnVlKTtcblx0XHRcdGlmIChkZWx0YSA+IDApXG5cdFx0XHR7XG5cdFx0XHRcdGNscHIuRXhlY3V0ZShDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24sIHNvbHV0aW9uLCBDbGlwcGVyTGliLlBvbHlGaWxsVHlwZS5wZnRQb3NpdGl2ZSwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0UG9zaXRpdmUpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgciA9IENsaXBwZXJMaWIuQ2xpcHBlci5HZXRCb3VuZHModGhpcy5tX2Rlc3RQb2x5cyk7XG5cdFx0XHRcdHZhciBvdXRlciA9IG5ldyBDbGlwcGVyTGliLlBhdGgoKTtcblx0XHRcdFx0b3V0ZXIucHVzaChuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoci5sZWZ0IC0gMTAsIHIuYm90dG9tICsgMTApKTtcblx0XHRcdFx0b3V0ZXIucHVzaChuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoci5yaWdodCArIDEwLCByLmJvdHRvbSArIDEwKSk7XG5cdFx0XHRcdG91dGVyLnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKHIucmlnaHQgKyAxMCwgci50b3AgLSAxMCkpO1xuXHRcdFx0XHRvdXRlci5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50MihyLmxlZnQgLSAxMCwgci50b3AgLSAxMCkpO1xuXHRcdFx0XHRjbHByLkFkZFBhdGgob3V0ZXIsIENsaXBwZXJMaWIuUG9seVR5cGUucHRTdWJqZWN0LCB0cnVlKTtcblx0XHRcdFx0Y2xwci5SZXZlcnNlU29sdXRpb24gPSB0cnVlO1xuXHRcdFx0XHRjbHByLkV4ZWN1dGUoQ2xpcHBlckxpYi5DbGlwVHlwZS5jdFVuaW9uLCBzb2x1dGlvbiwgQ2xpcHBlckxpYi5Qb2x5RmlsbFR5cGUucGZ0TmVnYXRpdmUsIENsaXBwZXJMaWIuUG9seUZpbGxUeXBlLnBmdE5lZ2F0aXZlKTtcblx0XHRcdFx0Ly9yZW1vdmUgdGhlIG91dGVyIFBvbHlOb2RlIHJlY3RhbmdsZSAuLi5cblx0XHRcdFx0aWYgKHNvbHV0aW9uLkNoaWxkQ291bnQoKSA9PT0gMSAmJiBzb2x1dGlvbi5DaGlsZHMoKVswXS5DaGlsZENvdW50KCkgPiAwKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIG91dGVyTm9kZSA9IHNvbHV0aW9uLkNoaWxkcygpWzBdO1xuXHRcdFx0XHRcdC8vc29sdXRpb24uQ2hpbGRzLnNldF9DYXBhY2l0eShvdXRlck5vZGUuQ2hpbGRDb3VudCk7XG5cdFx0XHRcdFx0c29sdXRpb24uQ2hpbGRzKClbMF0gPSBvdXRlck5vZGUuQ2hpbGRzKClbMF07XG5cdFx0XHRcdFx0c29sdXRpb24uQ2hpbGRzKClbMF0ubV9QYXJlbnQgPSBzb2x1dGlvbjtcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gMTsgaSA8IG91dGVyTm9kZS5DaGlsZENvdW50KCk7IGkrKylcblx0XHRcdFx0XHRcdHNvbHV0aW9uLkFkZENoaWxkKG91dGVyTm9kZS5DaGlsZHMoKVtpXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHNvbHV0aW9uLkNsZWFyKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5wcm90b3R5cGUuT2Zmc2V0UG9pbnQgPSBmdW5jdGlvbiAoaiwgaywgam9pbnR5cGUpXG5cdHtcblx0XHQvL2Nyb3NzIHByb2R1Y3QgLi4uXG5cdFx0dGhpcy5tX3NpbkEgPSAodGhpcy5tX25vcm1hbHNba10uWCAqIHRoaXMubV9ub3JtYWxzW2pdLlkgLSB0aGlzLm1fbm9ybWFsc1tqXS5YICogdGhpcy5tX25vcm1hbHNba10uWSk7XG5cblx0XHRpZiAoTWF0aC5hYnModGhpcy5tX3NpbkEgKiB0aGlzLm1fZGVsdGEpIDwgMS4wKVxuXHRcdHtcblx0XHRcdC8vZG90IHByb2R1Y3QgLi4uXG5cdFx0XHR2YXIgY29zQSA9ICh0aGlzLm1fbm9ybWFsc1trXS5YICogdGhpcy5tX25vcm1hbHNbal0uWCArIHRoaXMubV9ub3JtYWxzW2pdLlkgKiB0aGlzLm1fbm9ybWFsc1trXS5ZKTtcblx0XHRcdGlmIChjb3NBID4gMCkgLy8gYW5nbGUgPT0+IDAgZGVncmVlc1xuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLm1fZGVzdFBvbHkucHVzaChuZXcgQ2xpcHBlckxpYi5JbnRQb2ludDIoQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlggKyB0aGlzLm1fbm9ybWFsc1trXS5YICogdGhpcy5tX2RlbHRhKSxcblx0XHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbal0uWSArIHRoaXMubV9ub3JtYWxzW2tdLlkgKiB0aGlzLm1fZGVsdGEpKSk7XG5cdFx0XHRcdHJldHVybiBrO1xuXHRcdFx0fVxuXHRcdFx0Ly9lbHNlIGFuZ2xlID09PiAxODAgZGVncmVlc1xuXHRcdH1cblx0XHRlbHNlIGlmICh0aGlzLm1fc2luQSA+IDEpXG5cdFx0XHR0aGlzLm1fc2luQSA9IDEuMDtcblx0XHRlbHNlIGlmICh0aGlzLm1fc2luQSA8IC0xKVxuXHRcdFx0dGhpcy5tX3NpbkEgPSAtMS4wO1xuXHRcdGlmICh0aGlzLm1fc2luQSAqIHRoaXMubV9kZWx0YSA8IDApXG5cdFx0e1xuXHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5YICsgdGhpcy5tX25vcm1hbHNba10uWCAqIHRoaXMubV9kZWx0YSksXG5cdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5ZICsgdGhpcy5tX25vcm1hbHNba10uWSAqIHRoaXMubV9kZWx0YSkpKTtcblx0XHRcdHRoaXMubV9kZXN0UG9seS5wdXNoKG5ldyBDbGlwcGVyTGliLkludFBvaW50MSh0aGlzLm1fc3JjUG9seVtqXSkpO1xuXHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5YICsgdGhpcy5tX25vcm1hbHNbal0uWCAqIHRoaXMubV9kZWx0YSksXG5cdFx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5ZICsgdGhpcy5tX25vcm1hbHNbal0uWSAqIHRoaXMubV9kZWx0YSkpKTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdFx0c3dpdGNoIChqb2ludHlwZSlcblx0XHRcdHtcblx0XHRcdGNhc2UgQ2xpcHBlckxpYi5Kb2luVHlwZS5qdE1pdGVyOlxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIHIgPSAxICsgKHRoaXMubV9ub3JtYWxzW2pdLlggKiB0aGlzLm1fbm9ybWFsc1trXS5YICsgdGhpcy5tX25vcm1hbHNbal0uWSAqIHRoaXMubV9ub3JtYWxzW2tdLlkpO1xuXHRcdFx0XHRcdGlmIChyID49IHRoaXMubV9taXRlckxpbSlcblx0XHRcdFx0XHRcdHRoaXMuRG9NaXRlcihqLCBrLCByKTtcblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHR0aGlzLkRvU3F1YXJlKGosIGspO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIENsaXBwZXJMaWIuSm9pblR5cGUuanRTcXVhcmU6XG5cdFx0XHRcdHRoaXMuRG9TcXVhcmUoaiwgayk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBDbGlwcGVyTGliLkpvaW5UeXBlLmp0Um91bmQ6XG5cdFx0XHRcdHRoaXMuRG9Sb3VuZChqLCBrKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0ayA9IGo7XG5cdFx0cmV0dXJuIGs7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnByb3RvdHlwZS5Eb1NxdWFyZSA9IGZ1bmN0aW9uIChqLCBrKVxuXHR7XG5cdFx0dmFyIGR4ID0gTWF0aC50YW4oTWF0aC5hdGFuMih0aGlzLm1fc2luQSxcblx0XHRcdHRoaXMubV9ub3JtYWxzW2tdLlggKiB0aGlzLm1fbm9ybWFsc1tqXS5YICsgdGhpcy5tX25vcm1hbHNba10uWSAqIHRoaXMubV9ub3JtYWxzW2pdLlkpIC8gNCk7XG5cdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKFxuXHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlggKyB0aGlzLm1fZGVsdGEgKiAodGhpcy5tX25vcm1hbHNba10uWCAtIHRoaXMubV9ub3JtYWxzW2tdLlkgKiBkeCkpLFxuXHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlkgKyB0aGlzLm1fZGVsdGEgKiAodGhpcy5tX25vcm1hbHNba10uWSArIHRoaXMubV9ub3JtYWxzW2tdLlggKiBkeCkpKSk7XG5cdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKFxuXHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlggKyB0aGlzLm1fZGVsdGEgKiAodGhpcy5tX25vcm1hbHNbal0uWCArIHRoaXMubV9ub3JtYWxzW2pdLlkgKiBkeCkpLFxuXHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlkgKyB0aGlzLm1fZGVsdGEgKiAodGhpcy5tX25vcm1hbHNbal0uWSAtIHRoaXMubV9ub3JtYWxzW2pdLlggKiBkeCkpKSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LnByb3RvdHlwZS5Eb01pdGVyID0gZnVuY3Rpb24gKGosIGssIHIpXG5cdHtcblx0XHR2YXIgcSA9IHRoaXMubV9kZWx0YSAvIHI7XG5cdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKFxuXHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlggKyAodGhpcy5tX25vcm1hbHNba10uWCArIHRoaXMubV9ub3JtYWxzW2pdLlgpICogcSksXG5cdFx0XHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbal0uWSArICh0aGlzLm1fbm9ybWFsc1trXS5ZICsgdGhpcy5tX25vcm1hbHNbal0uWSkgKiBxKSkpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5wcm90b3R5cGUuRG9Sb3VuZCA9IGZ1bmN0aW9uIChqLCBrKVxuXHR7XG5cdFx0dmFyIGEgPSBNYXRoLmF0YW4yKHRoaXMubV9zaW5BLFxuXHRcdFx0dGhpcy5tX25vcm1hbHNba10uWCAqIHRoaXMubV9ub3JtYWxzW2pdLlggKyB0aGlzLm1fbm9ybWFsc1trXS5ZICogdGhpcy5tX25vcm1hbHNbal0uWSk7XG5cblx0XHR2YXIgc3RlcHMgPSBNYXRoLm1heChDbGlwcGVyTGliLkNhc3RfSW50MzIoQ2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9TdGVwc1BlclJhZCAqIE1hdGguYWJzKGEpKSksIDEpO1xuXG5cdFx0dmFyIFggPSB0aGlzLm1fbm9ybWFsc1trXS5YLFxuXHRcdFx0WSA9IHRoaXMubV9ub3JtYWxzW2tdLlksXG5cdFx0XHRYMjtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0ZXBzOyArK2kpXG5cdFx0e1xuXHRcdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKFxuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbal0uWCArIFggKiB0aGlzLm1fZGVsdGEpLFxuXHRcdFx0XHRDbGlwcGVyTGliLkNsaXBwZXJPZmZzZXQuUm91bmQodGhpcy5tX3NyY1BvbHlbal0uWSArIFkgKiB0aGlzLm1fZGVsdGEpKSk7XG5cdFx0XHRYMiA9IFg7XG5cdFx0XHRYID0gWCAqIHRoaXMubV9jb3MgLSB0aGlzLm1fc2luICogWTtcblx0XHRcdFkgPSBYMiAqIHRoaXMubV9zaW4gKyBZICogdGhpcy5tX2Nvcztcblx0XHR9XG5cdFx0dGhpcy5tX2Rlc3RQb2x5LnB1c2gobmV3IENsaXBwZXJMaWIuSW50UG9pbnQyKFxuXHRcdFx0Q2xpcHBlckxpYi5DbGlwcGVyT2Zmc2V0LlJvdW5kKHRoaXMubV9zcmNQb2x5W2pdLlggKyB0aGlzLm1fbm9ybWFsc1tqXS5YICogdGhpcy5tX2RlbHRhKSxcblx0XHRcdENsaXBwZXJMaWIuQ2xpcHBlck9mZnNldC5Sb3VuZCh0aGlzLm1fc3JjUG9seVtqXS5ZICsgdGhpcy5tX25vcm1hbHNbal0uWSAqIHRoaXMubV9kZWx0YSkpKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpXG5cdHtcblx0XHR0cnlcblx0XHR7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG5cdFx0fVxuXHRcdGNhdGNoIChlcnIpXG5cdFx0e1xuXHRcdFx0YWxlcnQoZXJyLm1lc3NhZ2UpO1xuXHRcdH1cblx0fTtcblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHQvLyBKUyBleHRlbnNpb24gYnkgVGltbyAyMDEzXG5cdENsaXBwZXJMaWIuSlMgPSB7fTtcblxuXHRDbGlwcGVyTGliLkpTLkFyZWFPZlBvbHlnb24gPSBmdW5jdGlvbiAocG9seSwgc2NhbGUpXG5cdHtcblx0XHRpZiAoIXNjYWxlKSBzY2FsZSA9IDE7XG5cdFx0cmV0dXJuIENsaXBwZXJMaWIuQ2xpcHBlci5BcmVhKHBvbHkpIC8gKHNjYWxlICogc2NhbGUpO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuSlMuQXJlYU9mUG9seWdvbnMgPSBmdW5jdGlvbiAocG9seSwgc2NhbGUpXG5cdHtcblx0XHRpZiAoIXNjYWxlKSBzY2FsZSA9IDE7XG5cdFx0dmFyIGFyZWEgPSAwO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcG9seS5sZW5ndGg7IGkrKylcblx0XHR7XG5cdFx0XHRhcmVhICs9IENsaXBwZXJMaWIuQ2xpcHBlci5BcmVhKHBvbHlbaV0pO1xuXHRcdH1cblx0XHRyZXR1cm4gYXJlYSAvIChzY2FsZSAqIHNjYWxlKTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkpTLkJvdW5kc09mUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCBzY2FsZSlcblx0e1xuXHRcdHJldHVybiBDbGlwcGVyTGliLkpTLkJvdW5kc09mUGF0aHMoW3BhdGhdLCBzY2FsZSk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5KUy5Cb3VuZHNPZlBhdGhzID0gZnVuY3Rpb24gKHBhdGhzLCBzY2FsZSlcblx0e1xuXHRcdGlmICghc2NhbGUpIHNjYWxlID0gMTtcblx0XHR2YXIgYm91bmRzID0gQ2xpcHBlckxpYi5DbGlwcGVyLkdldEJvdW5kcyhwYXRocyk7XG5cdFx0Ym91bmRzLmxlZnQgLz0gc2NhbGU7XG5cdFx0Ym91bmRzLmJvdHRvbSAvPSBzY2FsZTtcblx0XHRib3VuZHMucmlnaHQgLz0gc2NhbGU7XG5cdFx0Ym91bmRzLnRvcCAvPSBzY2FsZTtcblx0XHRyZXR1cm4gYm91bmRzO1xuXHR9O1xuXG5cdC8vIENsZWFuKCkgam9pbnMgdmVydGljZXMgdGhhdCBhcmUgdG9vIG5lYXIgZWFjaCBvdGhlclxuXHQvLyBhbmQgY2F1c2VzIGRpc3RvcnRpb24gdG8gb2Zmc2V0dGVkIHBvbHlnb25zIHdpdGhvdXQgY2xlYW5pbmdcblx0Q2xpcHBlckxpYi5KUy5DbGVhbiA9IGZ1bmN0aW9uIChwb2x5Z29uLCBkZWx0YSlcblx0e1xuXHRcdGlmICghKHBvbHlnb24gaW5zdGFuY2VvZiBBcnJheSkpIHJldHVybiBbXTtcblx0XHR2YXIgaXNQb2x5Z29ucyA9IHBvbHlnb25bMF0gaW5zdGFuY2VvZiBBcnJheTtcblx0XHR2YXIgcG9seWdvbiA9IENsaXBwZXJMaWIuSlMuQ2xvbmUocG9seWdvbik7XG5cdFx0aWYgKHR5cGVvZiBkZWx0YSAhPT0gXCJudW1iZXJcIiB8fCBkZWx0YSA9PT0gbnVsbClcblx0XHR7XG5cdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiRGVsdGEgaXMgbm90IGEgbnVtYmVyIGluIENsZWFuKCkuXCIpO1xuXHRcdFx0cmV0dXJuIHBvbHlnb247XG5cdFx0fVxuXHRcdGlmIChwb2x5Z29uLmxlbmd0aCA9PT0gMCB8fCAocG9seWdvbi5sZW5ndGggPT09IDEgJiYgcG9seWdvblswXS5sZW5ndGggPT09IDApIHx8IGRlbHRhIDwgMCkgcmV0dXJuIHBvbHlnb247XG5cdFx0aWYgKCFpc1BvbHlnb25zKSBwb2x5Z29uID0gW3BvbHlnb25dO1xuXHRcdHZhciBrX2xlbmd0aCA9IHBvbHlnb24ubGVuZ3RoO1xuXHRcdHZhciBsZW4sIHBvbHksIHJlc3VsdCwgZCwgcCwgaiwgaTtcblx0XHR2YXIgcmVzdWx0cyA9IFtdO1xuXHRcdGZvciAodmFyIGsgPSAwOyBrIDwga19sZW5ndGg7IGsrKylcblx0XHR7XG5cdFx0XHRwb2x5ID0gcG9seWdvbltrXTtcblx0XHRcdGxlbiA9IHBvbHkubGVuZ3RoO1xuXHRcdFx0aWYgKGxlbiA9PT0gMCkgY29udGludWU7XG5cdFx0XHRlbHNlIGlmIChsZW4gPCAzKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXN1bHQgPSBwb2x5O1xuXHRcdFx0XHRyZXN1bHRzLnB1c2gocmVzdWx0KTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRyZXN1bHQgPSBwb2x5O1xuXHRcdFx0ZCA9IGRlbHRhICogZGVsdGE7XG5cdFx0XHQvL2QgPSBNYXRoLmZsb29yKGNfZGVsdGEgKiBjX2RlbHRhKTtcblx0XHRcdHAgPSBwb2x5WzBdO1xuXHRcdFx0aiA9IDE7XG5cdFx0XHRmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG5cdFx0XHR7XG5cdFx0XHRcdGlmICgocG9seVtpXS5YIC0gcC5YKSAqIChwb2x5W2ldLlggLSBwLlgpICtcblx0XHRcdFx0XHQocG9seVtpXS5ZIC0gcC5ZKSAqIChwb2x5W2ldLlkgLSBwLlkpIDw9IGQpXG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdHJlc3VsdFtqXSA9IHBvbHlbaV07XG5cdFx0XHRcdHAgPSBwb2x5W2ldO1xuXHRcdFx0XHRqKys7XG5cdFx0XHR9XG5cdFx0XHRwID0gcG9seVtqIC0gMV07XG5cdFx0XHRpZiAoKHBvbHlbMF0uWCAtIHAuWCkgKiAocG9seVswXS5YIC0gcC5YKSArXG5cdFx0XHRcdChwb2x5WzBdLlkgLSBwLlkpICogKHBvbHlbMF0uWSAtIHAuWSkgPD0gZClcblx0XHRcdFx0ai0tO1xuXHRcdFx0aWYgKGogPCBsZW4pXG5cdFx0XHRcdHJlc3VsdC5zcGxpY2UoaiwgbGVuIC0gaik7XG5cdFx0XHRpZiAocmVzdWx0Lmxlbmd0aCkgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG5cdFx0fVxuXHRcdGlmICghaXNQb2x5Z29ucyAmJiByZXN1bHRzLmxlbmd0aCkgcmVzdWx0cyA9IHJlc3VsdHNbMF07XG5cdFx0ZWxzZSBpZiAoIWlzUG9seWdvbnMgJiYgcmVzdWx0cy5sZW5ndGggPT09IDApIHJlc3VsdHMgPSBbXTtcblx0XHRlbHNlIGlmIChpc1BvbHlnb25zICYmIHJlc3VsdHMubGVuZ3RoID09PSAwKSByZXN1bHRzID0gW1xuXHRcdFx0W11cblx0XHRdO1xuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cdC8vIE1ha2UgZGVlcCBjb3B5IG9mIFBvbHlnb25zIG9yIFBvbHlnb25cblx0Ly8gc28gdGhhdCBhbHNvIEludFBvaW50IG9iamVjdHMgYXJlIGNsb25lZCBhbmQgbm90IG9ubHkgcmVmZXJlbmNlZFxuXHQvLyBUaGlzIHNob3VsZCBiZSB0aGUgZmFzdGVzdCB3YXlcblx0Q2xpcHBlckxpYi5KUy5DbG9uZSA9IGZ1bmN0aW9uIChwb2x5Z29uKVxuXHR7XG5cdFx0aWYgKCEocG9seWdvbiBpbnN0YW5jZW9mIEFycmF5KSkgcmV0dXJuIFtdO1xuXHRcdGlmIChwb2x5Z29uLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuXHRcdGVsc2UgaWYgKHBvbHlnb24ubGVuZ3RoID09PSAxICYmIHBvbHlnb25bMF0ubGVuZ3RoID09PSAwKSByZXR1cm4gW1xuXHRcdFx0W11cblx0XHRdO1xuXHRcdHZhciBpc1BvbHlnb25zID0gcG9seWdvblswXSBpbnN0YW5jZW9mIEFycmF5O1xuXHRcdGlmICghaXNQb2x5Z29ucykgcG9seWdvbiA9IFtwb2x5Z29uXTtcblx0XHR2YXIgbGVuID0gcG9seWdvbi5sZW5ndGgsXG5cdFx0XHRwbGVuLCBpLCBqLCByZXN1bHQ7XG5cdFx0dmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkobGVuKTtcblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG5cdFx0e1xuXHRcdFx0cGxlbiA9IHBvbHlnb25baV0ubGVuZ3RoO1xuXHRcdFx0cmVzdWx0ID0gbmV3IEFycmF5KHBsZW4pO1xuXHRcdFx0Zm9yIChqID0gMDsgaiA8IHBsZW47IGorKylcblx0XHRcdHtcblx0XHRcdFx0cmVzdWx0W2pdID0ge1xuXHRcdFx0XHRcdFg6IHBvbHlnb25baV1bal0uWCxcblx0XHRcdFx0XHRZOiBwb2x5Z29uW2ldW2pdLllcblx0XHRcdFx0fTtcblxuXHRcdFx0fVxuXHRcdFx0cmVzdWx0c1tpXSA9IHJlc3VsdDtcblx0XHR9XG5cdFx0aWYgKCFpc1BvbHlnb25zKSByZXN1bHRzID0gcmVzdWx0c1swXTtcblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fTtcblxuXHQvLyBSZW1vdmVzIHBvaW50cyB0aGF0IGRvZXNuJ3QgYWZmZWN0IG11Y2ggdG8gdGhlIHZpc3VhbCBhcHBlYXJhbmNlLlxuXHQvLyBJZiBtaWRkbGUgcG9pbnQgaXMgYXQgb3IgdW5kZXIgY2VydGFpbiBkaXN0YW5jZSAodG9sZXJhbmNlKSBvZiB0aGUgbGluZSBzZWdtZW50IGJldHdlZW5cblx0Ly8gc3RhcnQgYW5kIGVuZCBwb2ludCwgdGhlIG1pZGRsZSBwb2ludCBpcyByZW1vdmVkLlxuXHRDbGlwcGVyTGliLkpTLkxpZ2h0ZW4gPSBmdW5jdGlvbiAocG9seWdvbiwgdG9sZXJhbmNlKVxuXHR7XG5cdFx0aWYgKCEocG9seWdvbiBpbnN0YW5jZW9mIEFycmF5KSkgcmV0dXJuIFtdO1xuXHRcdGlmICh0eXBlb2YgdG9sZXJhbmNlICE9PSBcIm51bWJlclwiIHx8IHRvbGVyYW5jZSA9PT0gbnVsbClcblx0XHR7XG5cdFx0XHRDbGlwcGVyTGliLkVycm9yKFwiVG9sZXJhbmNlIGlzIG5vdCBhIG51bWJlciBpbiBMaWdodGVuKCkuXCIpXG5cdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5KUy5DbG9uZShwb2x5Z29uKTtcblx0XHR9XG5cdFx0aWYgKHBvbHlnb24ubGVuZ3RoID09PSAwIHx8IChwb2x5Z29uLmxlbmd0aCA9PT0gMSAmJiBwb2x5Z29uWzBdLmxlbmd0aCA9PT0gMCkgfHwgdG9sZXJhbmNlIDwgMClcblx0XHR7XG5cdFx0XHRyZXR1cm4gQ2xpcHBlckxpYi5KUy5DbG9uZShwb2x5Z29uKTtcblx0XHR9XG5cdFx0dmFyIGlzUG9seWdvbnMgPSBwb2x5Z29uWzBdIGluc3RhbmNlb2YgQXJyYXk7XG5cdFx0aWYgKCFpc1BvbHlnb25zKSBwb2x5Z29uID0gW3BvbHlnb25dO1xuXHRcdHZhciBpLCBqLCBwb2x5LCBrLCBwb2x5MiwgcGxlbiwgQSwgQiwgUCwgZCwgcmVtLCBhZGRsYXN0O1xuXHRcdHZhciBieGF4LCBieWF5LCBsLCBheCwgYXk7XG5cdFx0dmFyIGxlbiA9IHBvbHlnb24ubGVuZ3RoO1xuXHRcdHZhciB0b2xlcmFuY2VTcSA9IHRvbGVyYW5jZSAqIHRvbGVyYW5jZTtcblx0XHR2YXIgcmVzdWx0cyA9IFtdO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcblx0XHR7XG5cdFx0XHRwb2x5ID0gcG9seWdvbltpXTtcblx0XHRcdHBsZW4gPSBwb2x5Lmxlbmd0aDtcblx0XHRcdGlmIChwbGVuID09PSAwKSBjb250aW51ZTtcblx0XHRcdGZvciAoayA9IDA7IGsgPCAxMDAwMDAwOyBrKyspIC8vIGNvdWxkIGJlIGZvcmV2ZXIgbG9vcCwgYnV0IHdpc2VyIHRvIHJlc3RyaWN0IG1heCByZXBlYXQgY291bnRcblx0XHRcdHtcblx0XHRcdFx0cG9seTIgPSBbXTtcblx0XHRcdFx0cGxlbiA9IHBvbHkubGVuZ3RoO1xuXHRcdFx0XHQvLyB0aGUgZmlyc3QgaGF2ZSB0byBhZGRlZCB0byB0aGUgZW5kLCBpZiBmaXJzdCBhbmQgbGFzdCBhcmUgbm90IHRoZSBzYW1lXG5cdFx0XHRcdC8vIHRoaXMgd2F5IHdlIGVuc3VyZSB0aGF0IGFsc28gdGhlIGFjdHVhbCBsYXN0IHBvaW50IGNhbiBiZSByZW1vdmVkIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAocG9seVtwbGVuIC0gMV0uWCAhPT0gcG9seVswXS5YIHx8IHBvbHlbcGxlbiAtIDFdLlkgIT09IHBvbHlbMF0uWSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGFkZGxhc3QgPSAxO1xuXHRcdFx0XHRcdHBvbHkucHVzaChcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRYOiBwb2x5WzBdLlgsXG5cdFx0XHRcdFx0XHRZOiBwb2x5WzBdLllcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRwbGVuID0gcG9seS5sZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBhZGRsYXN0ID0gMDtcblx0XHRcdFx0cmVtID0gW107IC8vIEluZGV4ZXMgb2YgcmVtb3ZlZCBwb2ludHNcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IHBsZW4gLSAyOyBqKyspXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRBID0gcG9seVtqXTsgLy8gU3RhcnQgcG9pbnQgb2YgbGluZSBzZWdtZW50XG5cdFx0XHRcdFx0UCA9IHBvbHlbaiArIDFdOyAvLyBNaWRkbGUgcG9pbnQuIFRoaXMgaXMgdGhlIG9uZSB0byBiZSByZW1vdmVkLlxuXHRcdFx0XHRcdEIgPSBwb2x5W2ogKyAyXTsgLy8gRW5kIHBvaW50IG9mIGxpbmUgc2VnbWVudFxuXHRcdFx0XHRcdGF4ID0gQS5YO1xuXHRcdFx0XHRcdGF5ID0gQS5ZO1xuXHRcdFx0XHRcdGJ4YXggPSBCLlggLSBheDtcblx0XHRcdFx0XHRieWF5ID0gQi5ZIC0gYXk7XG5cdFx0XHRcdFx0aWYgKGJ4YXggIT09IDAgfHwgYnlheSAhPT0gMCkgLy8gVG8gYXZvaWQgTmFuLCB3aGVuIEE9PVAgJiYgUD09Qi4gQW5kIHRvIGF2b2lkIHBlYWtzIChBPT1CICYmIEEhPVApLCB3aGljaCBoYXZlIGxlbmdodCwgYnV0IG5vdCBhcmVhLlxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGwgPSAoKFAuWCAtIGF4KSAqIGJ4YXggKyAoUC5ZIC0gYXkpICogYnlheSkgLyAoYnhheCAqIGJ4YXggKyBieWF5ICogYnlheSk7XG5cdFx0XHRcdFx0XHRpZiAobCA+IDEpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGF4ID0gQi5YO1xuXHRcdFx0XHRcdFx0XHRheSA9IEIuWTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgaWYgKGwgPiAwKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRheCArPSBieGF4ICogbDtcblx0XHRcdFx0XHRcdFx0YXkgKz0gYnlheSAqIGw7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJ4YXggPSBQLlggLSBheDtcblx0XHRcdFx0XHRieWF5ID0gUC5ZIC0gYXk7XG5cdFx0XHRcdFx0ZCA9IGJ4YXggKiBieGF4ICsgYnlheSAqIGJ5YXk7XG5cdFx0XHRcdFx0aWYgKGQgPD0gdG9sZXJhbmNlU3EpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cmVtW2ogKyAxXSA9IDE7XG5cdFx0XHRcdFx0XHRqKys7IC8vIHdoZW4gcmVtb3ZlZCwgdHJhbnNmZXIgdGhlIHBvaW50ZXIgdG8gdGhlIG5leHQgb25lXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGFkZCBhbGwgdW5yZW1vdmVkIHBvaW50cyB0byBwb2x5MlxuXHRcdFx0XHRwb2x5Mi5wdXNoKFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0WDogcG9seVswXS5YLFxuXHRcdFx0XHRcdFk6IHBvbHlbMF0uWVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0Zm9yIChqID0gMTsgaiA8IHBsZW4gLSAxOyBqKyspXG5cdFx0XHRcdFx0aWYgKCFyZW1bal0pIHBvbHkyLnB1c2goXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0WDogcG9seVtqXS5YLFxuXHRcdFx0XHRcdFx0WTogcG9seVtqXS5ZXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdHBvbHkyLnB1c2goXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRYOiBwb2x5W3BsZW4gLSAxXS5YLFxuXHRcdFx0XHRcdFk6IHBvbHlbcGxlbiAtIDFdLllcblx0XHRcdFx0fSk7XG5cdFx0XHRcdC8vIGlmIHRoZSBmaXJzdCBwb2ludCB3YXMgYWRkZWQgdG8gdGhlIGVuZCwgcmVtb3ZlIGl0XG5cdFx0XHRcdGlmIChhZGRsYXN0KSBwb2x5LnBvcCgpO1xuXHRcdFx0XHQvLyBicmVhaywgaWYgdGhlcmUgd2FzIG5vdCBhbnltb3JlIHJlbW92ZWQgcG9pbnRzXG5cdFx0XHRcdGlmICghcmVtLmxlbmd0aCkgYnJlYWs7XG5cdFx0XHRcdC8vIGVsc2UgY29udGludWUgbG9vcGluZyB1c2luZyBwb2x5MiwgdG8gY2hlY2sgaWYgdGhlcmUgYXJlIHBvaW50cyB0byByZW1vdmVcblx0XHRcdFx0ZWxzZSBwb2x5ID0gcG9seTI7XG5cdFx0XHR9XG5cdFx0XHRwbGVuID0gcG9seTIubGVuZ3RoO1xuXHRcdFx0Ly8gcmVtb3ZlIGR1cGxpY2F0ZSBmcm9tIGVuZCwgaWYgbmVlZGVkXG5cdFx0XHRpZiAocG9seTJbcGxlbiAtIDFdLlggPT09IHBvbHkyWzBdLlggJiYgcG9seTJbcGxlbiAtIDFdLlkgPT09IHBvbHkyWzBdLlkpXG5cdFx0XHR7XG5cdFx0XHRcdHBvbHkyLnBvcCgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHBvbHkyLmxlbmd0aCA+IDIpIC8vIHRvIGF2b2lkIHR3by1wb2ludC1wb2x5Z29uc1xuXHRcdFx0XHRyZXN1bHRzLnB1c2gocG9seTIpO1xuXHRcdH1cblx0XHRpZiAoIWlzUG9seWdvbnMpXG5cdFx0e1xuXHRcdFx0cmVzdWx0cyA9IHJlc3VsdHNbMF07XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgKHJlc3VsdHMpID09PSBcInVuZGVmaW5lZFwiKVxuXHRcdHtcblx0XHRcdHJlc3VsdHMgPSBbXTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHRDbGlwcGVyTGliLkpTLlBlcmltZXRlck9mUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCBjbG9zZWQsIHNjYWxlKVxuXHR7XG5cdFx0aWYgKHR5cGVvZiAocGF0aCkgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiAwO1xuXHRcdHZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuXHRcdHZhciBwZXJpbWV0ZXIgPSAwLjA7XG5cdFx0dmFyIHAxLCBwMiwgcDF4ID0gMC4wLFxuXHRcdFx0cDF5ID0gMC4wLFxuXHRcdFx0cDJ4ID0gMC4wLFxuXHRcdFx0cDJ5ID0gMC4wO1xuXHRcdHZhciBqID0gcGF0aC5sZW5ndGg7XG5cdFx0aWYgKGogPCAyKSByZXR1cm4gMDtcblx0XHRpZiAoY2xvc2VkKVxuXHRcdHtcblx0XHRcdHBhdGhbal0gPSBwYXRoWzBdO1xuXHRcdFx0aisrO1xuXHRcdH1cblx0XHR3aGlsZSAoLS1qKVxuXHRcdHtcblx0XHRcdHAxID0gcGF0aFtqXTtcblx0XHRcdHAxeCA9IHAxLlg7XG5cdFx0XHRwMXkgPSBwMS5ZO1xuXHRcdFx0cDIgPSBwYXRoW2ogLSAxXTtcblx0XHRcdHAyeCA9IHAyLlg7XG5cdFx0XHRwMnkgPSBwMi5ZO1xuXHRcdFx0cGVyaW1ldGVyICs9IHNxcnQoKHAxeCAtIHAyeCkgKiAocDF4IC0gcDJ4KSArIChwMXkgLSBwMnkpICogKHAxeSAtIHAyeSkpO1xuXHRcdH1cblx0XHRpZiAoY2xvc2VkKSBwYXRoLnBvcCgpO1xuXHRcdHJldHVybiBwZXJpbWV0ZXIgLyBzY2FsZTtcblx0fTtcblxuXHRDbGlwcGVyTGliLkpTLlBlcmltZXRlck9mUGF0aHMgPSBmdW5jdGlvbiAocGF0aHMsIGNsb3NlZCwgc2NhbGUpXG5cdHtcblx0XHRpZiAoIXNjYWxlKSBzY2FsZSA9IDE7XG5cdFx0dmFyIHBlcmltZXRlciA9IDA7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXRocy5sZW5ndGg7IGkrKylcblx0XHR7XG5cdFx0XHRwZXJpbWV0ZXIgKz0gQ2xpcHBlckxpYi5KUy5QZXJpbWV0ZXJPZlBhdGgocGF0aHNbaV0sIGNsb3NlZCwgc2NhbGUpO1xuXHRcdH1cblx0XHRyZXR1cm4gcGVyaW1ldGVyO1xuXHR9O1xuXG5cdENsaXBwZXJMaWIuSlMuU2NhbGVEb3duUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCBzY2FsZSlcblx0e1xuXHRcdHZhciBpLCBwO1xuXHRcdGlmICghc2NhbGUpIHNjYWxlID0gMTtcblx0XHRpID0gcGF0aC5sZW5ndGg7XG5cdFx0d2hpbGUgKGktLSlcblx0XHR7XG5cdFx0XHRwID0gcGF0aFtpXTtcblx0XHRcdHAuWCA9IHAuWCAvIHNjYWxlO1xuXHRcdFx0cC5ZID0gcC5ZIC8gc2NhbGU7XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuSlMuU2NhbGVEb3duUGF0aHMgPSBmdW5jdGlvbiAocGF0aHMsIHNjYWxlKVxuXHR7XG5cdFx0dmFyIGksIGosIHA7XG5cdFx0aWYgKCFzY2FsZSkgc2NhbGUgPSAxO1xuXHRcdGkgPSBwYXRocy5sZW5ndGg7XG5cdFx0d2hpbGUgKGktLSlcblx0XHR7XG5cdFx0XHRqID0gcGF0aHNbaV0ubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKGotLSlcblx0XHRcdHtcblx0XHRcdFx0cCA9IHBhdGhzW2ldW2pdO1xuXHRcdFx0XHRwLlggPSBwLlggLyBzY2FsZTtcblx0XHRcdFx0cC5ZID0gcC5ZIC8gc2NhbGU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdENsaXBwZXJMaWIuSlMuU2NhbGVVcFBhdGggPSBmdW5jdGlvbiAocGF0aCwgc2NhbGUpXG5cdHtcblx0XHR2YXIgaSwgcCwgcm91bmQgPSBNYXRoLnJvdW5kO1xuXHRcdGlmICghc2NhbGUpIHNjYWxlID0gMTtcblx0XHRpID0gcGF0aC5sZW5ndGg7XG5cdFx0d2hpbGUgKGktLSlcblx0XHR7XG5cdFx0XHRwID0gcGF0aFtpXTtcblx0XHRcdHAuWCA9IHJvdW5kKHAuWCAqIHNjYWxlKTtcblx0XHRcdHAuWSA9IHJvdW5kKHAuWSAqIHNjYWxlKTtcblx0XHR9XG5cdH07XG5cblx0Q2xpcHBlckxpYi5KUy5TY2FsZVVwUGF0aHMgPSBmdW5jdGlvbiAocGF0aHMsIHNjYWxlKVxuXHR7XG5cdFx0dmFyIGksIGosIHAsIHJvdW5kID0gTWF0aC5yb3VuZDtcblx0XHRpZiAoIXNjYWxlKSBzY2FsZSA9IDE7XG5cdFx0aSA9IHBhdGhzLmxlbmd0aDtcblx0XHR3aGlsZSAoaS0tKVxuXHRcdHtcblx0XHRcdGogPSBwYXRoc1tpXS5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoai0tKVxuXHRcdFx0e1xuXHRcdFx0XHRwID0gcGF0aHNbaV1bal07XG5cdFx0XHRcdHAuWCA9IHJvdW5kKHAuWCAqIHNjYWxlKTtcblx0XHRcdFx0cC5ZID0gcm91bmQocC5ZICogc2NhbGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5FeFBvbHlnb25zID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHQvKipcblx0KiBAY29uc3RydWN0b3Jcblx0Ki9cblx0Q2xpcHBlckxpYi5FeFBvbHlnb24gPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0dGhpcy5vdXRlciA9IG51bGw7XG5cdFx0dGhpcy5ob2xlcyA9IG51bGw7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5KUy5BZGRPdXRlclBvbHlOb2RlVG9FeFBvbHlnb25zID0gZnVuY3Rpb24gKHBvbHlub2RlLCBleHBvbHlnb25zKVxuXHR7XG5cdFx0dmFyIGVwID0gbmV3IENsaXBwZXJMaWIuRXhQb2x5Z29uKCk7XG5cdFx0ZXAub3V0ZXIgPSBwb2x5bm9kZS5Db250b3VyKCk7XG5cdFx0dmFyIGNoaWxkcyA9IHBvbHlub2RlLkNoaWxkcygpO1xuXHRcdHZhciBpbGVuID0gY2hpbGRzLmxlbmd0aDtcblx0XHRlcC5ob2xlcyA9IG5ldyBBcnJheShpbGVuKTtcblx0XHR2YXIgbm9kZSwgbiwgaSwgaiwgY2hpbGRzMiwgamxlbjtcblx0XHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgaSsrKVxuXHRcdHtcblx0XHRcdG5vZGUgPSBjaGlsZHNbaV07XG5cdFx0XHRlcC5ob2xlc1tpXSA9IG5vZGUuQ29udG91cigpO1xuXHRcdFx0Ly9BZGQgb3V0ZXIgcG9seWdvbnMgY29udGFpbmVkIGJ5IChuZXN0ZWQgd2l0aGluKSBob2xlcyAuLi5cblx0XHRcdGZvciAoaiA9IDAsIGNoaWxkczIgPSBub2RlLkNoaWxkcygpLCBqbGVuID0gY2hpbGRzMi5sZW5ndGg7IGogPCBqbGVuOyBqKyspXG5cdFx0XHR7XG5cdFx0XHRcdG4gPSBjaGlsZHMyW2pdO1xuXHRcdFx0XHRDbGlwcGVyTGliLkpTLkFkZE91dGVyUG9seU5vZGVUb0V4UG9seWdvbnMobiwgZXhwb2x5Z29ucyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV4cG9seWdvbnMucHVzaChlcCk7XG5cdH07XG5cblx0Q2xpcHBlckxpYi5KUy5FeFBvbHlnb25zVG9QYXRocyA9IGZ1bmN0aW9uIChleHBvbHlnb25zKVxuXHR7XG5cdFx0dmFyIGEsIGksIGFsZW4sIGlsZW47XG5cdFx0dmFyIHBhdGhzID0gbmV3IENsaXBwZXJMaWIuUGF0aHMoKTtcblx0XHRmb3IgKGEgPSAwLCBhbGVuID0gZXhwb2x5Z29ucy5sZW5ndGg7IGEgPCBhbGVuOyBhKyspXG5cdFx0e1xuXHRcdFx0cGF0aHMucHVzaChleHBvbHlnb25zW2FdLm91dGVyKTtcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBleHBvbHlnb25zW2FdLmhvbGVzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHRcdHtcblx0XHRcdFx0cGF0aHMucHVzaChleHBvbHlnb25zW2FdLmhvbGVzW2ldKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHBhdGhzO1xuXHR9XG5cdENsaXBwZXJMaWIuSlMuUG9seVRyZWVUb0V4UG9seWdvbnMgPSBmdW5jdGlvbiAocG9seXRyZWUpXG5cdHtcblx0XHR2YXIgZXhwb2x5Z29ucyA9IG5ldyBDbGlwcGVyTGliLkV4UG9seWdvbnMoKTtcblx0XHR2YXIgbm9kZSwgaSwgY2hpbGRzLCBpbGVuO1xuXHRcdGZvciAoaSA9IDAsIGNoaWxkcyA9IHBvbHl0cmVlLkNoaWxkcygpLCBpbGVuID0gY2hpbGRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKylcblx0XHR7XG5cdFx0XHRub2RlID0gY2hpbGRzW2ldO1xuXHRcdFx0Q2xpcHBlckxpYi5KUy5BZGRPdXRlclBvbHlOb2RlVG9FeFBvbHlnb25zKG5vZGUsIGV4cG9seWdvbnMpO1xuXHRcdH1cblx0XHRyZXR1cm4gZXhwb2x5Z29ucztcblx0fTtcblxufSkoKTsiLCJpbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuLi9Ta2V0Y2gnXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi90eXBlcydcbmltcG9ydCB7IHJhbmRGbG9hdCwgcmFuZEZsb2F0UmFuZ2UsIHJhbmRJbnQsIHJhbmRJbnRSYW5nZSwgd3JhcCB9IGZyb20gJy4uL3V0aWxzL251bWJlclV0aWxzJ1xuaW1wb3J0IFJhbmdlIGZyb20gJy4vdG9vbHMvUmFuZ2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluaXRpYWxTa2V0Y2ggZXh0ZW5kcyBTa2V0Y2gge1xuICBwb3M6IFZlY3RvclxuICBzdGF0aWMgZ2VuZXJhdGVHQ29kZSA9IGZhbHNlXG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnBvcyA9IHsgeDogdGhpcy5jYW52YXNXaWR0aCAvIDIsIHk6IHRoaXMuY2FudmFzSGVpZ2h0IC8gMiB9XG4gICAgdGhpcy52cy54RHJpZnQgPSBuZXcgUmFuZ2UoeyBuYW1lOiAneCBEcmlmdCcsIG1pbjogMCwgbWF4OiAyMCwgaW5pdGlhbFZhbHVlOiA1IH0pXG4gICAgdGhpcy52cy55RHJpZnQgPSBuZXcgUmFuZ2UoeyBuYW1lOiAneSBEcmlmdCcsIG1pbjogMCwgbWF4OiAyMCwgaW5pdGlhbFZhbHVlOiA1IH0pXG4gICAgdGhpcy52cy5jaXJjbGVNaW5SYWRpdXMgPSBuZXcgUmFuZ2UoeyBuYW1lOiAnTWluIHJhZCcsIG1pbjogMCwgbWF4OiAyNSwgaW5pdGlhbFZhbHVlOiAzIH0pXG4gICAgdGhpcy52cy5jaXJjbGVNYXhSYWRpdXMgPSBuZXcgUmFuZ2UoeyBuYW1lOiAnTWF4IHJhZCcsIG1pbjogMCwgbWF4OiA1MCwgaW5pdGlhbFZhbHVlOiAxMiB9KVxuICAgIHRoaXMudnMuY2lyY2xlRHJpZnQgPSBuZXcgUmFuZ2UoeyBuYW1lOiAnQ2lyY2xlIERyaWZ0JywgbWluOiAwLCBtYXg6IDEwMCwgaW5pdGlhbFZhbHVlOiAzMCB9KVxuICAgIHRoaXMudnMuY2lyY2xlU3Bhd25SYXRlID0gbmV3IFJhbmdlKHsgbmFtZTogJ1NwYXduIHJhdGUnLCBtaW46IDEsIG1heDogMzAwLCBzdGVwOiAxLCBpbml0aWFsVmFsdWU6IDE1MCB9KVxuICAgIHRoaXMudnMuY2lyY2xlU3Bhd25DaGFuY2UgPSBuZXcgUmFuZ2UoeyBuYW1lOiAnU3Bhd24gY2hhbmNlJywgbWluOiAwLCBtYXg6IDEsIGluaXRpYWxWYWx1ZTogMC41IH0pXG4gIH1cblxuICBpbml0RHJhdygpIHtcbiAgICBpZiAodGhpcy52cy5jaXJjbGVNYXhSYWRpdXMudmFsdWUgPCB0aGlzLnZzLmNpcmNsZU1pblJhZGl1cy52YWx1ZSkge1xuICAgICAgdGhpcy52cy5jaXJjbGVNYXhSYWRpdXMuc2V0VmFsdWUodGhpcy52cy5jaXJjbGVNaW5SYWRpdXMudmFsdWUsIHRydWUpXG4gICAgfVxuICB9XG5cbiAgZHJhdyhpbmNyZW1lbnQ6IG51bWJlcikge1xuICAgIHRoaXMucG9zLnggPSB3cmFwKHRoaXMucG9zLngsIHRoaXMuY2FudmFzV2lkdGgpXG4gICAgdGhpcy5wb3MueSA9IHdyYXAodGhpcy5wb3MueSwgdGhpcy5jYW52YXNIZWlnaHQpXG5cbiAgICBpZiAoaW5jcmVtZW50ICUgMTAwID09PSAwKSB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IGAjJHsocmFuZEludFJhbmdlKDEyOCkgKiA2NTc5MykudG9TdHJpbmcoMTYpfWBcblxuICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgdGhpcy5jdHgubW92ZVRvKHRoaXMucG9zLngsIHRoaXMucG9zLnkpXG4gICAgdGhpcy5wb3MueCArPSByYW5kRmxvYXQodGhpcy52cy54RHJpZnQudmFsdWUpXG4gICAgdGhpcy5wb3MueSArPSByYW5kRmxvYXQodGhpcy52cy55RHJpZnQudmFsdWUpXG4gICAgdGhpcy5jdHgubGluZVRvKHRoaXMucG9zLngsIHRoaXMucG9zLnkpXG4gICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuXG4gICAgaWYgKGluY3JlbWVudCAlIHRoaXMudnMuY2lyY2xlU3Bhd25SYXRlLnZhbHVlID09PSAwICYmIE1hdGgucmFuZG9tKCkgPCB0aGlzLnZzLmNpcmNsZVNwYXduQ2hhbmNlLnZhbHVlKSB7XG4gICAgICBjb25zdCBwcmV2RmlsbFN0eWxlID0gdGhpcy5jdHguZmlsbFN0eWxlXG4gICAgICBjb25zdCBwcmV2U3Ryb2tlU3R5bGUgPSB0aGlzLmN0eC5zdHJva2VTdHlsZVxuICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSBgIzAwMGBcbiAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IGAjJHtNYXRoLmZsb29yKDE2Nzc3MjE1IC8gMiArIHJhbmRJbnRSYW5nZSgxNjc3NzIxNSAvIDIpKS50b1N0cmluZygxNil9YFxuICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICAgIHRoaXMuY3R4LmNpcmNsZShcbiAgICAgICAgdGhpcy5wb3MueCArIHJhbmRJbnQodGhpcy52cy5jaXJjbGVEcmlmdC52YWx1ZSksXG4gICAgICAgIHRoaXMucG9zLnkgKyByYW5kSW50KHRoaXMudnMuY2lyY2xlRHJpZnQudmFsdWUpLFxuICAgICAgICByYW5kSW50UmFuZ2UodGhpcy52cy5jaXJjbGVNYXhSYWRpdXMudmFsdWUsIHRoaXMudnMuY2lyY2xlTWluUmFkaXVzLnZhbHVlKVxuICAgICAgKVxuICAgICAgdGhpcy5jdHguZmlsbCgpXG4gICAgICB0aGlzLmN0eC5zdHJva2UoKVxuICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gcHJldlN0cm9rZVN0eWxlXG4gICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBwcmV2RmlsbFN0eWxlXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuLi9Ta2V0Y2gnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdDb2RlVGVzdCBleHRlbmRzIFNrZXRjaCB7XG4gIGluaXQoKSB7XG4gICAgdGhpcy5jdHguZHJpdmVyLmNvbW1lbnQoJ0RyYXdpbmcgc2luZ2xlIGxpbmUnKVxuXG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICB0aGlzLmN0eC5tb3ZlVG8oMTAsIDEwKVxuICAgIHRoaXMuY3R4LmxpbmVUbygyMCwgMTApXG4gICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuXG4gICAgdGhpcy5jdHguZHJpdmVyLmNvbW1lbnQoJ0RyYXdpbmcgam9pbmVkIGxpbmUnKVxuICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgdGhpcy5jdHgubW92ZVRvKDIwLCA0MClcbiAgICB0aGlzLmN0eC5saW5lVG8oMjUsIDQwKVxuICAgIHRoaXMuY3R4LmxpbmVUbygzMCwgNDUpXG4gICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuXG4gICAgdGhpcy5jdHguZHJpdmVyLmNvbW1lbnQoJ0RyYXdpbmcgcmVjdCBvdXRsaW5lJylcbiAgICB0aGlzLmN0eC5zdHJva2VSZWN0KDIwLCAyMCwgNSwgNSlcblxuICAgIHRoaXMuY3R4LmRyaXZlci5jb21tZW50KCdEcmF3aW5nIHJlY3QgZmlsbCcpXG4gICAgdGhpcy5jdHguZmlsbFJlY3QoMzAsIDIwLCA1LCA1KVxuXG4gICAgdGhpcy5jdHguZHJpdmVyLmNvbW1lbnQoJ0RyYXdpbmcgY2lyY2xlJylcbiAgICB0aGlzLmN0eC5iZWdpblBhdGgoKVxuICAgIGlmICgnY2lyY2xlJyBpbiB0aGlzLmN0eCkgdGhpcy5jdHguY2lyY2xlKDQwLCA0MCwgNSlcbiAgICB0aGlzLmN0eC5zdHJva2UoKVxuICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG4gIH1cbn1cbiIsImltcG9ydCBQYXRoIGZyb20gJy4uL1BhdGgnXG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vUG9pbnQnXG5pbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuLi9Ta2V0Y2gnXG5pbXBvcnQgeyByYW5kRmxvYXQsIHJhbmRGbG9hdFJhbmdlIH0gZnJvbSAnLi4vdXRpbHMvbnVtYmVyVXRpbHMnXG5pbXBvcnQgeyBhcmNUb1BvaW50cyB9IGZyb20gJy4uL3V0aWxzL3BhdGhVdGlscydcbmltcG9ydCBPc2MgZnJvbSAnLi90b29scy9Pc2MnXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi90b29scy9SYW5nZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXJjcyBleHRlbmRzIFNrZXRjaCB7XG4gIG9zYzogT3NjXG4gIGNpcmNsZVBvaW50czogUG9pbnRbXVxuICBjb3VudDogbnVtYmVyID0gMFxuICBsYXN0UG9pbnQ6IFBvaW50XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnZzLnByZWNpc2lvbiA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMTgwLCBtaW46IDIsIG1heDogMTQ0MCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMuc3BlZWRQb3cxID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjUsIG1pbjogMC4wMDEsIG1heDogMTAsIHN0ZXA6IDAuMDAxIH0pXG4gICAgdGhpcy52cy5yYWRpdXNNaW4gPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAuMSwgbWluOiAxLCBtYXg6IDIwLCBzdGVwOiAwLjEgfSlcbiAgICB0aGlzLnZzLnJhZGl1c01heCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMC41LCBtaW46IDEsIG1heDogMjAsIHN0ZXA6IDAuMSB9KVxuICAgIHRoaXMudnMucmFkaXVzVGhldGFNdWx0aSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMSwgbWluOiAwLjAwMSwgbWF4OiA1LCBzdGVwOiAwLjAwMSB9KVxuXG4gICAgdGhpcy5vc2MgPSBuZXcgT3NjKHtcbiAgICAgIHNwZWVkOiAoaSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IE1hdGguc3FydChpKSAvIC1NYXRoLnBvdyhNYXRoLnNxcnQoaSksIHRoaXMudnMuc3BlZWRQb3cxLnZhbHVlKVxuICAgICAgICByZXR1cm4gaXNOYU4odmFsdWUpID8gMCA6IHZhbHVlXG4gICAgICB9LFxuICAgICAgcmFkaXVzOiAoaSkgPT5cbiAgICAgICAgbmV3IFBvaW50KFxuICAgICAgICAgIHRoaXMudnMucmFkaXVzTWluLnZhbHVlICsgTWF0aC5jb3MoaSAqIHRoaXMudnMucmFkaXVzVGhldGFNdWx0aS52YWx1ZSkgKiB0aGlzLnZzLnJhZGl1c01heC52YWx1ZSxcbiAgICAgICAgICB0aGlzLnZzLnJhZGl1c01pbi52YWx1ZSArIE1hdGguc2luKGkgKiB0aGlzLnZzLnJhZGl1c1RoZXRhTXVsdGkudmFsdWUpICogdGhpcy52cy5yYWRpdXNNYXgudmFsdWVcbiAgICAgICAgKSxcbiAgICB9KVxuICB9XG5cbiAgaW5pdERyYXcoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudnMucmFkaXVzTWluLnZhbHVlID4gdGhpcy52cy5yYWRpdXNNYXgudmFsdWUpIHRoaXMudnMucmFkaXVzTWF4LnNldFZhbHVlKHRoaXMudnMucmFkaXVzTWluLnZhbHVlLCB0cnVlKVxuXG4gICAgY29uc29sZS5sb2coe1xuICAgICAgcHJlY2lzaW9uOiB0aGlzLnZzLnByZWNpc2lvbi52YWx1ZSxcbiAgICAgIHNwZWVkUG93MTogdGhpcy52cy5zcGVlZFBvdzEudmFsdWUsXG4gICAgICByYWRpdXNNaW46IHRoaXMudnMucmFkaXVzTWluLnZhbHVlLFxuICAgICAgcmFkaXVzTWF4OiB0aGlzLnZzLnJhZGl1c01heC52YWx1ZSxcbiAgICAgIHJhZGl1c1RoZXRhTXVsdGk6IHRoaXMudnMucmFkaXVzVGhldGFNdWx0aS52YWx1ZSxcbiAgICB9KVxuXG4gICAgdGhpcy5jb3VudCA9IDBcbiAgICB0aGlzLmxhc3RQb2ludCA9IHVuZGVmaW5lZFxuICAgIHRoaXMub3NjLnJlc2V0KClcblxuICAgIGNvbnN0IHJhZGl1cyA9IE1hdGgubWluKHRoaXMuY3csIHRoaXMuY2gpIC8gMiAtICh0aGlzLnZzLnJhZGl1c01heC52YWx1ZSArIDEwKVxuICAgIGNvbnN0IHsgc3RhcnQ6IHN0YXJ0UG9pbnQgfSA9IGFyY1RvUG9pbnRzKHRoaXMuY3gsIHRoaXMuY3ksIDAsIE1hdGguUEkgKiAyLCByYWRpdXMpXG5cbiAgICBjb25zdCB0bXAgPSBuZXcgUGF0aCgpXG4gICAgdG1wLm1vdmVUbyhzdGFydFBvaW50LngsIHN0YXJ0UG9pbnQueSlcbiAgICB0bXAuYXJjKHRoaXMuY3gsIHRoaXMuY3ksIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIsIGZhbHNlKVxuICAgIHRoaXMuY2lyY2xlUG9pbnRzID0gdG1wLmdldFBvaW50cyh0aGlzLnZzLnByZWNpc2lvbi52YWx1ZSlcblxuICAgIC8vIHRoaXMubGFzdFBvaW50ID0gc3RhcnRQb2ludC5jbG9uZSgpXG4gIH1cblxuICBkcmF3KGluY3JlbWVudDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY291bnQgPj0gdGhpcy5jaXJjbGVQb2ludHMubGVuZ3RoKSByZXR1cm5cblxuICAgIHRoaXMub3NjLnN0ZXAodGhpcy5jb3VudCArIDEpXG4gICAgY29uc3QgcCA9IHRoaXMuY2lyY2xlUG9pbnRzW3RoaXMuY291bnRdXG4gICAgY29uc3QgcG9pbnQgPSBuZXcgUG9pbnQocC54ICsgdGhpcy5vc2MueCwgcC55ICsgdGhpcy5vc2MueSlcblxuICAgIGlmICh0aGlzLmxhc3RQb2ludCAmJiBwKSB7XG4gICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKVxuICAgICAgdGhpcy5jdHgubW92ZVRvKHRoaXMubGFzdFBvaW50LngsIHRoaXMubGFzdFBvaW50LnkpXG4gICAgICB0aGlzLmN0eC5saW5lVG8ocG9pbnQueCwgcG9pbnQueSlcbiAgICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuICAgIH1cblxuICAgIHRoaXMubGFzdFBvaW50ID0gcG9pbnQuY2xvbmUoKVxuXG4gICAgdGhpcy5jb3VudCsrXG4gIH1cbn1cbiIsImltcG9ydCBQYXRoIGZyb20gJy4uL1BhdGgnXG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vUG9pbnQnXG5pbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuLi9Ta2V0Y2gnXG5pbXBvcnQgeyBkZWJ1Z0RvdCB9IGZyb20gJy4uL3V0aWxzL2RlYnVnVXRpbHMnXG5pbXBvcnQgeyByYW5kRmxvYXQsIHJhbmRGbG9hdFJhbmdlLCByYW5kSW50LCByYW5kSW50UmFuZ2UgfSBmcm9tICcuLi91dGlscy9udW1iZXJVdGlscydcbmltcG9ydCB7IGFyY1RvUG9pbnRzIH0gZnJvbSAnLi4vdXRpbHMvcGF0aFV0aWxzJ1xuaW1wb3J0IE9zYyBmcm9tICcuL3Rvb2xzL09zYydcbmltcG9ydCBSYW5nZSBmcm9tICcuL3Rvb2xzL1JhbmdlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCZXppZXJTY3JpYmJsZXMgZXh0ZW5kcyBTa2V0Y2gge1xuICBzdGF0aWMgZ2VuZXJhdGVHQ29kZSA9IGZhbHNlXG4gIC8vIHN0YXJ0UG9pbnQ6IFBvaW50XG4gIGxhc3RQb2ludDogUG9pbnRcbiAgbGFzdEFuY2hvclBvaW50OiBQb2ludFxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy52cy5zdG9wQWZ0ZXIgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDUsIG1pbjogMSwgbWF4OiAyMDAsIHN0ZXA6IDEgfSlcbiAgICB0aGlzLnZzLmRyaWZ0TWluID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAyMCwgbWluOiAwLCBtYXg6IDEwMCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMuZHJpZnRNYXggPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDUwLCBtaW46IDAsIG1heDogMTAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5taWRwb2ludERyaWZ0ID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAzMCwgbWluOiAwLCBtYXg6IDEwMCwgc3RlcDogMSB9KVxuICB9XG5cbiAgaW5pdERyYXcoKTogdm9pZCB7XG4gICAgY29uc3QgZGlyID0gTWF0aC5yYW5kb20oKSAqIE1hdGguUEkgKiAyXG4gICAgdGhpcy5sYXN0UG9pbnQgPSBuZXcgUG9pbnQodGhpcy5jeCArIE1hdGguY29zKGRpcikgKiAxMDAsIHRoaXMuY3kgKyArTWF0aC5zaW4oZGlyKSAqIDEwMClcbiAgICB0aGlzLmxhc3RBbmNob3JQb2ludCA9IHRoaXMubGFzdFBvaW50LmNsb25lKClcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyBjb25zb2xlLmxvZyhpbmNyZW1lbnQpXG4gICAgaWYgKGluY3JlbWVudCA+IHRoaXMudnMuc3RvcEFmdGVyLnZhbHVlKSByZXR1cm5cblxuICAgIGNvbnN0IGVuZFBvaW50ID0gbmV3IFBvaW50KFxuICAgICAgdGhpcy5sYXN0UG9pbnQueCArXG4gICAgICAgIE1hdGguY29zKE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMikgKlxuICAgICAgICAgICh0aGlzLnZzLmRyaWZ0TWluLnZhbHVlICsgTWF0aC5yYW5kb20oKSAqICh0aGlzLnZzLmRyaWZ0TWF4LnZhbHVlIC0gdGhpcy52cy5kcmlmdE1pbi52YWx1ZSkpLFxuICAgICAgdGhpcy5sYXN0UG9pbnQueSArXG4gICAgICAgIE1hdGguc2luKE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMikgKlxuICAgICAgICAgICh0aGlzLnZzLmRyaWZ0TWluLnZhbHVlICsgTWF0aC5yYW5kb20oKSAqICh0aGlzLnZzLmRyaWZ0TWF4LnZhbHVlIC0gdGhpcy52cy5kcmlmdE1pbi52YWx1ZSkpXG4gICAgKVxuXG4gICAgZW5kUG9pbnQueCArPSAodGhpcy5jeCAtIGVuZFBvaW50LngpIC8gMTVcbiAgICBlbmRQb2ludC55ICs9ICh0aGlzLmN5IC0gZW5kUG9pbnQueSkgLyAxNVxuXG4gICAgY29uc3QgYW5nbGUgPSB0aGlzLmxhc3RBbmNob3JQb2ludC5hbmdsZVRvKHRoaXMubGFzdFBvaW50KVxuICAgIGNvbnN0IGRpc3QgPSB0aGlzLmxhc3RBbmNob3JQb2ludC5kaXN0YW5jZVRvKHRoaXMubGFzdFBvaW50KVxuXG4gICAgY29uc3QgbWlkUG9pbnQgPSB0aGlzLmxhc3RBbmNob3JQb2ludFxuICAgICAgLmFkZChuZXcgUG9pbnQoTWF0aC5jb3MoYW5nbGUpICogKGRpc3QgKiAyKSwgTWF0aC5zaW4oYW5nbGUpICogKGRpc3QgKiAyKSkpXG4gICAgICAuYWRkKG5ldyBQb2ludChyYW5kSW50KHRoaXMudnMubWlkcG9pbnREcmlmdC52YWx1ZSksIHJhbmRJbnQodGhpcy52cy5taWRwb2ludERyaWZ0LnZhbHVlKSkpXG5cbiAgICBtaWRQb2ludC54ICs9ICh0aGlzLmN4IC0gbWlkUG9pbnQueCkgLyAxNVxuICAgIG1pZFBvaW50LnkgKz0gKHRoaXMuY3kgLSBtaWRQb2ludC55KSAvIDE1XG5cbiAgICAvLyBkZWJ1Z0RvdCh0aGlzLmN0eCwgbWlkUG9pbnQueCwgbWlkUG9pbnQueSwgJyMwMGYnKVxuICAgIC8vIGRlYnVnRG90KHRoaXMuY3R4LCBlbmRQb2ludC54LCBlbmRQb2ludC55LCAnI2YwMCcpXG5cbiAgICB0aGlzLmN0eC5iZWdpblBhdGgoKVxuICAgIHRoaXMuY3R4Lm1vdmVUbyh0aGlzLmxhc3RQb2ludC54LCB0aGlzLmxhc3RQb2ludC55KVxuICAgIHRoaXMuY3R4LmJlemllckN1cnZlVG8obWlkUG9pbnQueCwgbWlkUG9pbnQueSwgbWlkUG9pbnQueCwgbWlkUG9pbnQueSwgZW5kUG9pbnQueCwgZW5kUG9pbnQueSlcbiAgICB0aGlzLmN0eC5zdHJva2UoKVxuICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG5cbiAgICB0aGlzLmxhc3RQb2ludCA9IGVuZFBvaW50LmNsb25lKClcbiAgICB0aGlzLmxhc3RBbmNob3JQb2ludCA9IG1pZFBvaW50LmNsb25lKClcbiAgfVxufVxuIiwiaW1wb3J0IFBvaW50IGZyb20gJy4uL1BvaW50J1xuaW1wb3J0IHsgU2tldGNoIH0gZnJvbSAnLi4vU2tldGNoJ1xuaW1wb3J0IE9zYyBmcm9tICcuL3Rvb2xzL09zYydcbmltcG9ydCBSYW5nZSBmcm9tICcuL3Rvb2xzL1JhbmdlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTcGlyYWxpbmcgZXh0ZW5kcyBTa2V0Y2gge1xuICAvLyBzdGF0aWMgZ2VuZXJhdGVHQ29kZSA9IGZhbHNlXG4gIG9zYzE6IE9zY1xuICBvc2MyOiBPc2NcbiAgb3NjMzogT3NjXG4gIGxhc3RQb2ludDogUG9pbnRcblxuICBpbml0KCkge1xuICAgIGNvbnN0IHNjYWxlRG93biA9IDE1XG4gICAgdGhpcy52cy5zcGVlZFVwID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxMCwgbWluOiAxLCBtYXg6IDEwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMuc3RvcEFmdGVyID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA1MDAwMCwgbWluOiAxLCBtYXg6IDEyMDAwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMub3NjMXNwZWVkID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjEsIG1pbjogLU1hdGguUEkgLyA4LCBtYXg6IE1hdGguUEkgLyA4LCBzdGVwOiBNYXRoLlBJIC8gNjY2IH0pIC8vIDY2NiBpcyBhY3R1YWxseSBpbXBvcnRhbnRcbiAgICB0aGlzLnZzLm9zYzFkaXN0ID0gbmV3IFJhbmdlKHtcbiAgICAgIGluaXRpYWxWYWx1ZTogTWF0aC5QSSAvIDQgLyBzY2FsZURvd24sXG4gICAgICBtaW46IE1hdGguUEkgLyA4IC8gc2NhbGVEb3duLFxuICAgICAgbWF4OiAoTWF0aC5QSSAqIDE2KSAvIHNjYWxlRG93bixcbiAgICAgIHN0ZXA6IE1hdGguUEkgLyAzMiAvIHNjYWxlRG93bixcbiAgICB9KVxuICAgIHRoaXMudnMub3NjMXBoYXNlID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IDAsIG1heDogTWF0aC5QSSAqIDIsIHN0ZXA6IE1hdGguUEkgLyAxNiB9KVxuICAgIHRoaXMudnMub3NjMnNwZWVkID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjEsIG1pbjogLU1hdGguUEkgLyA4LCBtYXg6IE1hdGguUEkgLyA4LCBzdGVwOiBNYXRoLlBJIC8gNjY2IH0pIC8vIDY2NiBpcyBhY3R1YWxseSBpbXBvcnRhbnRcbiAgICB0aGlzLnZzLm9zYzJkaXN0ID0gbmV3IFJhbmdlKHtcbiAgICAgIGluaXRpYWxWYWx1ZTogTWF0aC5QSSAvIDQgLyBzY2FsZURvd24sXG4gICAgICBtaW46IE1hdGguUEkgLyA4IC8gc2NhbGVEb3duLFxuICAgICAgbWF4OiAoTWF0aC5QSSAqIDE2KSAvIHNjYWxlRG93bixcbiAgICAgIHN0ZXA6IE1hdGguUEkgLyAzMiAvIHNjYWxlRG93bixcbiAgICB9KVxuICAgIHRoaXMudnMub3NjMnBoYXNlID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IDAsIG1heDogTWF0aC5QSSAqIDIsIHN0ZXA6IE1hdGguUEkgLyAxNiB9KVxuICAgIHRoaXMudnMub3NjM3NwZWVkID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjEsIG1pbjogLU1hdGguUEkgLyA4LCBtYXg6IE1hdGguUEkgLyA4LCBzdGVwOiBNYXRoLlBJIC8gNjY2IH0pIC8vIDY2NiBpcyBhY3R1YWxseSBpbXBvcnRhbnRcbiAgICB0aGlzLnZzLm9zYzNkaXN0ID0gbmV3IFJhbmdlKHtcbiAgICAgIGluaXRpYWxWYWx1ZTogTWF0aC5QSSAvIDQgLyBzY2FsZURvd24sXG4gICAgICBtaW46IE1hdGguUEkgLyA4IC8gc2NhbGVEb3duLFxuICAgICAgbWF4OiAoTWF0aC5QSSAqIDE2KSAvIHNjYWxlRG93bixcbiAgICAgIHN0ZXA6IE1hdGguUEkgLyAzMiAvIHNjYWxlRG93bixcbiAgICB9KVxuICAgIHRoaXMudnMub3NjM3BoYXNlID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IDAsIG1heDogTWF0aC5QSSAqIDIsIHN0ZXA6IE1hdGguUEkgLyAxNiB9KVxuICAgIHRoaXMub3NjMSA9IG5ldyBPc2MoeyBzcGVlZDogKGkpID0+IHRoaXMudnMub3NjMXNwZWVkLnZhbHVlLCByYWRpdXM6IChpKSA9PiB0aGlzLnZzLm9zYzFkaXN0LnZhbHVlLCBwaGFzZTogMCB9KVxuICAgIHRoaXMub3NjMiA9IG5ldyBPc2MoeyBzcGVlZDogKGkpID0+IHRoaXMudnMub3NjMnNwZWVkLnZhbHVlLCByYWRpdXM6IChpKSA9PiB0aGlzLnZzLm9zYzJkaXN0LnZhbHVlLCBwaGFzZTogMCB9KVxuICAgIHRoaXMub3NjMyA9IG5ldyBPc2MoeyBzcGVlZDogKGkpID0+IHRoaXMudnMub3NjM3NwZWVkLnZhbHVlLCByYWRpdXM6IChpKSA9PiB0aGlzLnZzLm9zYzNkaXN0LnZhbHVlLCBwaGFzZTogMCB9KVxuICB9XG5cbiAgaW5pdERyYXcoKTogdm9pZCB7XG4gICAgdGhpcy5sYXN0UG9pbnQgPSBuZXcgUG9pbnQodGhpcy5jeCwgdGhpcy5jeSlcbiAgICB0aGlzLnZzLnN0b3BBZnRlci5zdGVwID0gdGhpcy52cy5zcGVlZFVwLnZhbHVlXG4gICAgdGhpcy5vc2MxLnBoYXNlID0gdGhpcy52cy5vc2MxcGhhc2UudmFsdWVcbiAgICB0aGlzLm9zYzIucGhhc2UgPSB0aGlzLnZzLm9zYzJwaGFzZS52YWx1ZVxuICAgIHRoaXMub3NjMy5waGFzZSA9IHRoaXMudnMub3NjM3BoYXNlLnZhbHVlXG4gICAgdGhpcy5vc2MxLnJlc2V0KClcbiAgICB0aGlzLm9zYzIucmVzZXQoKVxuICAgIHRoaXMub3NjMy5yZXNldCgpXG4gIH1cblxuICBkcmF3KGluY3JlbWVudDogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgbG9vcCA9IHRoaXMudnMuc3BlZWRVcC52YWx1ZVxuICAgIGlmIChpbmNyZW1lbnQgKiBsb29wID4gdGhpcy52cy5zdG9wQWZ0ZXIudmFsdWUpIHJldHVyblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcDsgaSsrKSB7XG4gICAgICB0aGlzLm9zYzEuc3RlcChpbmNyZW1lbnQpXG4gICAgICB0aGlzLm9zYzIuc3RlcChpbmNyZW1lbnQpXG4gICAgICB0aGlzLm9zYzMuc3RlcChpbmNyZW1lbnQpXG4gICAgICAvLyBjb25zdCBwb2ludCA9IHRoaXMubGFzdFBvaW50LmNsb25lKCkuYWRkKHRoaXMub3NjMS52YWx1ZSkuYWRkKHRoaXMub3NjMi52YWx1ZSkuYWRkKHRoaXMub3NjMy52YWx1ZSlcbiAgICAgIGNvbnN0IHBvaW50ID0gdGhpcy5sYXN0UG9pbnQuY2xvbmUoKS5hZGQodGhpcy5vc2MxLnZhbHVlLmFkZCh0aGlzLm9zYzIudmFsdWUpLmFkZCh0aGlzLm9zYzMudmFsdWUpKVxuXG4gICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKVxuICAgICAgdGhpcy5jdHgubW92ZVRvKHRoaXMubGFzdFBvaW50LngsIHRoaXMubGFzdFBvaW50LnkpXG4gICAgICB0aGlzLmN0eC5saW5lVG8ocG9pbnQueCwgcG9pbnQueSlcbiAgICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuXG4gICAgICB0aGlzLmxhc3RQb2ludCA9IHBvaW50XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgUGF0aCBmcm9tICcuLi9QYXRoJ1xuaW1wb3J0IFBvaW50IGZyb20gJy4uL1BvaW50J1xuaW1wb3J0IHsgU2tldGNoIH0gZnJvbSAnLi4vU2tldGNoJ1xuaW1wb3J0IHsgZGVidWdEb3QgfSBmcm9tICcuLi91dGlscy9kZWJ1Z1V0aWxzJ1xuaW1wb3J0IHsgcmFuZEZsb2F0LCByYW5kRmxvYXRSYW5nZSwgcmFuZEludCwgcmFuZEludFJhbmdlIH0gZnJvbSAnLi4vdXRpbHMvbnVtYmVyVXRpbHMnXG5pbXBvcnQgeyBhcmNUb1BvaW50cyB9IGZyb20gJy4uL3V0aWxzL3BhdGhVdGlscydcbmltcG9ydCBPc2MgZnJvbSAnLi90b29scy9Pc2MnXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi90b29scy9SYW5nZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3BpcmFsaW5nUHJvcG9ydGlvbmFsIGV4dGVuZHMgU2tldGNoIHtcbiAgLy8gc3RhdGljIGdlbmVyYXRlR0NvZGUgPSBmYWxzZVxuICBvc2MxOiBPc2NcbiAgb3NjMjogT3NjXG4gIG9zYzM6IE9zY1xuICBsYXN0UG9pbnQ6IFBvaW50XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnZzLnNwZWVkVXAgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDE1LCBtaW46IDEsIG1heDogMTAwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5zdG9wQWZ0ZXIgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDEwMDAsIG1pbjogMSwgbWF4OiAyMDAwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMub3NjU3BlZWQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAuMTgyNSwgbWluOiAtTWF0aC5QSSAvIDgsIG1heDogTWF0aC5QSSAvIDgsIHN0ZXA6IE1hdGguUEkgLyA2NjYgfSlcbiAgICB0aGlzLnZzLm9zY1NwZWVkTXVsdGkgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDIuOTk0LCBtaW46IDAuNSwgbWF4OiA1LCBzdGVwOiAwLjAwMDAxIH0pXG4gICAgdGhpcy52cy5vc2NEaXN0ID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA1MCwgbWluOiAxLCBtYXg6IDIwLCBzdGVwOiAwLjI1IH0pXG4gICAgdGhpcy52cy5vc2MxcGhhc2UgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDUuOSwgbWluOiAwLCBtYXg6IE1hdGguUEkgKiAyLCBzdGVwOiBNYXRoLlBJIC8gMzIgfSlcbiAgICB0aGlzLnZzLm9zYzJwaGFzZSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMS44LCBtaW46IDAsIG1heDogTWF0aC5QSSAqIDIsIHN0ZXA6IE1hdGguUEkgLyAzMiB9KVxuICAgIHRoaXMudnMub3NjM3BoYXNlID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAyLCBtaW46IDAsIG1heDogTWF0aC5QSSAqIDIsIHN0ZXA6IE1hdGguUEkgLyAzMiB9KVxuICAgIHRoaXMub3NjMSA9IG5ldyBPc2Moe1xuICAgICAgc3BlZWQ6IChpKSA9PiAodGhpcy52cy5vc2NTcGVlZC52YWx1ZSAqIHRoaXMudnMub3NjU3BlZWRNdWx0aS52YWx1ZSkgLyAyLFxuICAgICAgcmFkaXVzOiAoaSkgPT4gdGhpcy52cy5vc2NEaXN0LnZhbHVlLFxuICAgICAgcGhhc2U6IDAsXG4gICAgfSlcbiAgICB0aGlzLm9zYzIgPSBuZXcgT3NjKHtcbiAgICAgIHNwZWVkOiAoaSkgPT4gKHRoaXMudnMub3NjU3BlZWQudmFsdWUgKiBNYXRoLnBvdyh0aGlzLnZzLm9zY1NwZWVkTXVsdGkudmFsdWUsIDIpKSAvIDIsXG4gICAgICByYWRpdXM6IChpKSA9PiB0aGlzLnZzLm9zY0Rpc3QudmFsdWUsXG4gICAgICBwaGFzZTogMCxcbiAgICB9KVxuICAgIHRoaXMub3NjMyA9IG5ldyBPc2Moe1xuICAgICAgc3BlZWQ6IChpKSA9PiAodGhpcy52cy5vc2NTcGVlZC52YWx1ZSAqIE1hdGgucG93KHRoaXMudnMub3NjU3BlZWRNdWx0aS52YWx1ZSwgMykpIC8gMyxcbiAgICAgIHJhZGl1czogKGkpID0+IHRoaXMudnMub3NjRGlzdC52YWx1ZSxcbiAgICAgIHBoYXNlOiAwLFxuICAgIH0pXG4gIH1cblxuICBpbml0RHJhdygpOiB2b2lkIHtcbiAgICB0aGlzLmxhc3RQb2ludCA9IG5ldyBQb2ludCh0aGlzLmN4LCB0aGlzLmN5KVxuICAgIHRoaXMudnMuc3RvcEFmdGVyLnN0ZXAgPSB0aGlzLnZzLnNwZWVkVXAudmFsdWVcbiAgICB0aGlzLm9zYzEucGhhc2UgPSB0aGlzLnZzLm9zYzFwaGFzZS52YWx1ZVxuICAgIHRoaXMub3NjMi5waGFzZSA9IHRoaXMudnMub3NjMnBoYXNlLnZhbHVlXG4gICAgdGhpcy5vc2MzLnBoYXNlID0gdGhpcy52cy5vc2MzcGhhc2UudmFsdWVcbiAgICB0aGlzLm9zYzEucmVzZXQoKVxuICAgIHRoaXMub3NjMi5yZXNldCgpXG4gICAgdGhpcy5vc2MzLnJlc2V0KClcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBsb29wID0gdGhpcy52cy5zcGVlZFVwLnZhbHVlXG4gICAgaWYgKGluY3JlbWVudCAqIGxvb3AgPiB0aGlzLnZzLnN0b3BBZnRlci52YWx1ZSkgcmV0dXJuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb29wOyBpKyspIHtcbiAgICAgIHRoaXMub3NjMS5zdGVwKGluY3JlbWVudClcbiAgICAgIHRoaXMub3NjMi5zdGVwKGluY3JlbWVudClcbiAgICAgIHRoaXMub3NjMy5zdGVwKGluY3JlbWVudClcbiAgICAgIC8vIGNvbnN0IHBvaW50ID0gdGhpcy5sYXN0UG9pbnQuY2xvbmUoKS5hZGQodGhpcy5vc2MxLnZhbHVlKS5hZGQodGhpcy5vc2MyLnZhbHVlKS5hZGQodGhpcy5vc2MzLnZhbHVlKVxuICAgICAgY29uc3QgcG9pbnQgPSB0aGlzLmxhc3RQb2ludC5jbG9uZSgpLmFkZCh0aGlzLm9zYzEudmFsdWUuYWRkKHRoaXMub3NjMi52YWx1ZSkuYWRkKHRoaXMub3NjMy52YWx1ZSkpXG5cbiAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgICB0aGlzLmN0eC5tb3ZlVG8odGhpcy5sYXN0UG9pbnQueCwgdGhpcy5sYXN0UG9pbnQueSlcbiAgICAgIHRoaXMuY3R4LmxpbmVUbyhwb2ludC54LCBwb2ludC55KVxuICAgICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG5cbiAgICAgIHRoaXMubGFzdFBvaW50ID0gcG9pbnRcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBQYXRoIGZyb20gJy4uL1BhdGgnXG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vUG9pbnQnXG5pbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuLi9Ta2V0Y2gnXG5pbXBvcnQgeyBkZWJ1Z0RvdCB9IGZyb20gJy4uL3V0aWxzL2RlYnVnVXRpbHMnXG5pbXBvcnQgeyByYW5kRmxvYXQsIHJhbmRGbG9hdFJhbmdlLCByYW5kSW50LCByYW5kSW50UmFuZ2UgfSBmcm9tICcuLi91dGlscy9udW1iZXJVdGlscydcbmltcG9ydCB7IGFyY1RvUG9pbnRzIH0gZnJvbSAnLi4vdXRpbHMvcGF0aFV0aWxzJ1xuaW1wb3J0IE9zYyBmcm9tICcuL3Rvb2xzL09zYydcbmltcG9ydCBSYW5nZSBmcm9tICcuL3Rvb2xzL1JhbmdlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25jZW50cmljQ2lyY2xlcyBleHRlbmRzIFNrZXRjaCB7XG4gIC8vIHN0YXRpYyBnZW5lcmF0ZUdDb2RlID0gZmFsc2VcblxuICBsYXN0UG9pbnQ6IFBvaW50XG4gIHJhZGl1czogbnVtYmVyXG4gIHRoZXRhOiBudW1iZXJcbiAgb3NjMTogT3NjXG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnZzLnNwZWVkVXAgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDEsIG1pbjogMSwgbWF4OiAxMDAsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLnN0b3BBZnRlciA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMTAwLCBtaW46IDEsIG1heDogMTAwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMuc2hyaW5rQW1vdW50ID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxNSwgbWluOiAxLCBtYXg6IDEyLCBzdGVwOiAwLjEgfSlcbiAgICB0aGlzLnZzLnNocmlua0RpdiA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMSwgbWluOiAwLCBtYXg6IDEuOCwgc3RlcDogMC4wMSB9KVxuICAgIHRoaXMudnMuc2hyaW5rRmFsbG9mZiA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMSwgbWluOiAwLjksIG1heDogMS4xLCBzdGVwOiAwLjAwNSB9KVxuICAgIHRoaXMudnMuc2hyaW5rVmFyaWFuY2UgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAsIG1pbjogMCwgbWF4OiA1MCwgc3RlcDogMC4wMSB9KVxuICAgIHRoaXMudnMuc2hyaW5rVmFyT3NjID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiBNYXRoLlBJIC8gMzIsIG1pbjogMCwgbWF4OiBNYXRoLlBJIC8gNCwgc3RlcDogMC4wMDEgfSlcbiAgICB0aGlzLnZzLnJvdGF0ZVNwZWVkID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiBNYXRoLlBJIC8gMzIsIG1pbjogLU1hdGguUEkgLyA0LCBtYXg6IE1hdGguUEkgLyA0LCBzdGVwOiAwLjAwMSB9KVxuICAgIHRoaXMub3NjMSA9IG5ldyBPc2Moe1xuICAgICAgcmFkaXVzOiAoaSkgPT4gdGhpcy52cy5zaHJpbmtWYXJpYW5jZS52YWx1ZSxcbiAgICAgIHNwZWVkOiAoaSkgPT4gdGhpcy52cy5zaHJpbmtWYXJPc2MudmFsdWUsXG4gICAgICBwaGFzZTogMCxcbiAgICB9KVxuICB9XG5cbiAgaW5pdERyYXcoKTogdm9pZCB7XG4gICAgdGhpcy5sYXN0UG9pbnQgPSBuZXcgUG9pbnQodGhpcy5jeCwgdGhpcy5jeSlcbiAgICB0aGlzLnJhZGl1cyA9IE1hdGgubWluKHRoaXMuY3csIHRoaXMuY2gpICogMC40NVxuICAgIHRoaXMudGhldGEgPSAwXG4gICAgdGhpcy5vc2MxLnJlc2V0KClcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBsb29wID0gdGhpcy52cy5zcGVlZFVwLnZhbHVlXG4gICAgaWYgKGluY3JlbWVudCAqIGxvb3AgPiB0aGlzLnZzLnN0b3BBZnRlci52YWx1ZSkgcmV0dXJuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb29wOyBpKyspIHtcbiAgICAgIGNvbnN0IHJlYWxJbmNyZW1lbnQgPSBpbmNyZW1lbnQgKiBsb29wICsgaVxuXG4gICAgICB0aGlzLm9zYzEuc3RlcChyZWFsSW5jcmVtZW50KVxuXG4gICAgICBpZiAodGhpcy5yYWRpdXMgPiAwKSB7XG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgICAgIHRoaXMuY3R4LmNpcmNsZSh0aGlzLmxhc3RQb2ludC54LCB0aGlzLmxhc3RQb2ludC55LCB0aGlzLnJhZGl1cylcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgICAgIH1cblxuICAgICAgdGhpcy50aGV0YSArPSB0aGlzLnZzLnJvdGF0ZVNwZWVkLnZhbHVlXG5cbiAgICAgIGNvbnN0IG5leHRSYWRpdXMgPVxuICAgICAgICB0aGlzLnJhZGl1cyAtICh0aGlzLnZzLnNocmlua0Ftb3VudC52YWx1ZSArIHRoaXMub3NjMS54KSAqIE1hdGgucG93KHRoaXMudnMuc2hyaW5rRmFsbG9mZi52YWx1ZSwgcmVhbEluY3JlbWVudClcbiAgICAgIGNvbnN0IHJhZERpZmYgPSB0aGlzLnJhZGl1cyAtIG5leHRSYWRpdXNcblxuICAgICAgdGhpcy5sYXN0UG9pbnQgPSB0aGlzLmxhc3RQb2ludC5tb3ZlQWxvbmdBbmdsZSh0aGlzLnRoZXRhLCByYWREaWZmICogdGhpcy52cy5zaHJpbmtEaXYudmFsdWUpXG4gICAgICB0aGlzLnJhZGl1cyA9IG5leHRSYWRpdXNcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBQYXRoIGZyb20gJy4uL1BhdGgnXG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vUG9pbnQnXG5pbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuLi9Ta2V0Y2gnXG5pbXBvcnQgeyBkZWJ1Z0RvdCB9IGZyb20gJy4uL3V0aWxzL2RlYnVnVXRpbHMnXG5pbXBvcnQgeyByYW5kRmxvYXQsIHJhbmRGbG9hdFJhbmdlLCByYW5kSW50LCByYW5kSW50UmFuZ2UgfSBmcm9tICcuLi91dGlscy9udW1iZXJVdGlscydcbmltcG9ydCB7IGFyY1RvUG9pbnRzIH0gZnJvbSAnLi4vdXRpbHMvcGF0aFV0aWxzJ1xuaW1wb3J0IHsgcmFuZG9tLCBzZWVkUmFuZG9tIH0gZnJvbSAnLi4vdXRpbHMvcmFuZG9tJ1xuaW1wb3J0IE9zYyBmcm9tICcuL3Rvb2xzL09zYydcbmltcG9ydCBSYW5nZSBmcm9tICcuL3Rvb2xzL1JhbmdlJ1xuXG5pbnRlcmZhY2UgQ2lyY2xlIHtcbiAgcG9zaXRpb246IFBvaW50XG4gIHJhZGl1czogbnVtYmVyXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1YmJsZXNJbkNpcmNsZSBleHRlbmRzIFNrZXRjaCB7XG4gIHN0YXRpYyBnZW5lcmF0ZUdDb2RlID0gZmFsc2VcblxuICByZWRyYXduQ291bnQ6IG51bWJlclxuICByZW9yZGVyZWQ6IGJvb2xlYW5cbiAgY2lyY2xlczogQ2lyY2xlW11cbiAgbGFzdFBvaW50OiBQb2ludFxuICByYWRpdXM6IG51bWJlclxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy52cy5zZWVkID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxMzkxLCBtaW46IDEwMDAsIG1heDogNTAwMCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMuYXRMZWFzdCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogNzc3LCBtaW46IDEsIG1heDogNTAwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMubWF4UmFkaXVzID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAzMDAsIG1pbjogMC41LCBtYXg6IDQ1LCBzdGVwOiAwLjUsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLm1pblJhZGl1cyA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMC4yLCBtaW46IDAuMSwgbWF4OiA1LCBzdGVwOiAwLjA1LCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gIH1cblxuICBpbml0RHJhdygpOiB2b2lkIHtcbiAgICBzZWVkUmFuZG9tKHRoaXMudnMuc2VlZC52YWx1ZSlcbiAgICB0aGlzLnJlb3JkZXJlZCA9IGZhbHNlXG4gICAgdGhpcy5yZWRyYXduQ291bnQgPSAwXG4gICAgdGhpcy5jaXJjbGVzID0gW11cbiAgICB0aGlzLnJhZGl1cyA9IE1hdGgubWluKHRoaXMuY3csIHRoaXMuY2gpICogMC40NVxuICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgdGhpcy5jdHguY2lyY2xlKHRoaXMuY3gsIHRoaXMuY3ksIHRoaXMucmFkaXVzKVxuICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jaXJjbGVzLmxlbmd0aCA+IHRoaXMudnMuYXRMZWFzdC52YWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLnJlb3JkZXJlZCkge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBuZXcgUG9pbnQodGhpcy5jeCwgdGhpcy5jeSlcbiAgICAgICAgdGhpcy5jaXJjbGVzLnNvcnQoKGEsIGIpID0+IFBvaW50LmRpc3RhbmNlKGNlbnRlciwgYi5wb3NpdGlvbikgLSBQb2ludC5kaXN0YW5jZShjZW50ZXIsIGEucG9zaXRpb24pKVxuICAgICAgICB0aGlzLmN0eC5yZXNldCgpXG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgICAgIHRoaXMuY3R4LmNpcmNsZSh0aGlzLmN4LCB0aGlzLmN5LCB0aGlzLnJhZGl1cylcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgICAgICAgdGhpcy5yZW9yZGVyZWQgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5yZWRyYXduQ291bnQgPCB0aGlzLmNpcmNsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgY2lyY2xlID0gdGhpcy5jaXJjbGVzW3RoaXMucmVkcmF3bkNvdW50XVxuICAgICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgICAgICAgdGhpcy5jdHguY2lyY2xlKGNpcmNsZS5wb3NpdGlvbi54LCBjaXJjbGUucG9zaXRpb24ueSwgY2lyY2xlLnJhZGl1cylcbiAgICAgICAgICB0aGlzLmN0eC5zdHJva2UoKVxuICAgICAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG4gICAgICAgICAgdGhpcy5yZWRyYXduQ291bnQrK1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBhbmdsZSA9IHJhbmRvbSgpICogTWF0aC5QSSAqIDJcbiAgICBjb25zdCBkaXN0ID0gcmFuZG9tKCkgKiB0aGlzLnJhZGl1c1xuICAgIGNvbnN0IHBvaW50ID0gbmV3IFBvaW50KHRoaXMuY3ggKyBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0LCB0aGlzLmN5ICsgTWF0aC5zaW4oYW5nbGUpICogZGlzdClcblxuICAgIGxldCBuZXdSYWRpdXMgPSAwXG4gICAgbGV0IGFsbG93ZWQgPSB0cnVlXG5cbiAgICBjb25zdCBkaXN0VG9FZGdlID0gdGhpcy5yYWRpdXMgLSBQb2ludC5kaXN0YW5jZShuZXcgUG9pbnQodGhpcy5jeCwgdGhpcy5jeSksIHBvaW50KVxuICAgIGlmICghdGhpcy5jaXJjbGVzLmxlbmd0aCkge1xuICAgICAgbmV3UmFkaXVzID0gZGlzdFRvRWRnZVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByYWRpdXNlczogbnVtYmVyW10gPSBbXVxuICAgICAgZm9yIChsZXQgY2lyY2xlIG9mIHRoaXMuY2lyY2xlcykge1xuICAgICAgICBjb25zdCBkaXN0ID0gUG9pbnQuZGlzdGFuY2UoY2lyY2xlLnBvc2l0aW9uLCBwb2ludClcbiAgICAgICAgaWYgKGRpc3QgPD0gY2lyY2xlLnJhZGl1cykge1xuICAgICAgICAgIGFsbG93ZWQgPSBmYWxzZVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgcmFkaXVzZXMucHVzaChkaXN0IC0gY2lyY2xlLnJhZGl1cylcbiAgICAgIH1cbiAgICAgIHJhZGl1c2VzLnNvcnQoKGEsIGIpID0+IGEgLSBiKVxuICAgICAgbmV3UmFkaXVzID0gcmFkaXVzZXNbMF1cbiAgICAgIGlmIChhbGxvd2VkICYmIG5ld1JhZGl1cyA+IGRpc3RUb0VkZ2UpIHtcbiAgICAgICAgbmV3UmFkaXVzID0gZGlzdFRvRWRnZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmV3UmFkaXVzID4gdGhpcy52cy5tYXhSYWRpdXMudmFsdWUgfHwgbmV3UmFkaXVzIDwgdGhpcy52cy5taW5SYWRpdXMudmFsdWUpIHtcbiAgICAgIGFsbG93ZWQgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmIChhbGxvd2VkICYmIG5ld1JhZGl1cyA+IDApIHtcbiAgICAgIHRoaXMuY2lyY2xlcy5wdXNoKHtcbiAgICAgICAgcG9zaXRpb246IHBvaW50LFxuICAgICAgICByYWRpdXM6IG5ld1JhZGl1cyxcbiAgICAgIH0pXG4gICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKVxuICAgICAgdGhpcy5jdHguY2lyY2xlKHBvaW50LngsIHBvaW50LnksIG5ld1JhZGl1cylcbiAgICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFBhdGggZnJvbSAnLi4vUGF0aCdcbmltcG9ydCBQb2ludCBmcm9tICcuLi9Qb2ludCdcbmltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4uL1NrZXRjaCdcbmltcG9ydCB7IGRlYnVnRG90IH0gZnJvbSAnLi4vdXRpbHMvZGVidWdVdGlscydcbmltcG9ydCB7IHJhbmRGbG9hdCwgcmFuZEZsb2F0UmFuZ2UsIHJhbmRJbnQsIHJhbmRJbnRSYW5nZSB9IGZyb20gJy4uL3V0aWxzL251bWJlclV0aWxzJ1xuaW1wb3J0IHsgYXJjVG9Qb2ludHMgfSBmcm9tICcuLi91dGlscy9wYXRoVXRpbHMnXG5pbXBvcnQgeyByYW5kb20sIHNlZWRSYW5kb20gfSBmcm9tICcuLi91dGlscy9yYW5kb20nXG5pbXBvcnQgT3NjIGZyb20gJy4vdG9vbHMvT3NjJ1xuaW1wb3J0IFJhbmdlIGZyb20gJy4vdG9vbHMvUmFuZ2UnXG5cbmludGVyZmFjZSBDaXJjbGUge1xuICBwb3NpdGlvbjogUG9pbnRcbiAgcmFkaXVzOiBudW1iZXJcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JpZFdhdmVzIGV4dGVuZHMgU2tldGNoIHtcbiAgLy8gc3RhdGljIGdlbmVyYXRlR0NvZGUgPSBmYWxzZVxuXG4gIGVmZmVjdGl2ZVdpZHRoOiBudW1iZXJcbiAgZWZmZWN0aXZlSGVpZ2h0OiBudW1iZXJcblxuICBpbml0KCkge1xuICAgIC8vIHRoaXMudnMuc2VlZCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMTAwMCwgbWluOiAxMDAwLCBtYXg6IDUwMDAsIHN0ZXA6IDEgfSlcbiAgICB0aGlzLnZzLmNvbHMgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDMsIG1pbjogMSwgbWF4OiAxMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMucm93cyA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogNCwgbWluOiAxLCBtYXg6IDEwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5nYXAgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDIsIG1pbjogMCwgbWF4OiAyNSwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMub3V0ZXJHYXAgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDUsIG1pbjogMCwgbWF4OiAyNSwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICB9XG5cbiAgaW5pdERyYXcoKTogdm9pZCB7XG4gICAgLy8gc2VlZFJhbmRvbSh0aGlzLnZzLnNlZWQudmFsdWUpXG4gICAgY29uc3QgY29scyA9IHRoaXMudnMuY29scy52YWx1ZVxuICAgIGNvbnN0IHJvd3MgPSB0aGlzLnZzLnJvd3MudmFsdWVcbiAgICBjb25zdCBnYXAgPSB0aGlzLnZzLmdhcC52YWx1ZVxuICAgIGNvbnN0IG91dGVyR2FwID0gdGhpcy52cy5vdXRlckdhcC52YWx1ZVxuICAgIHRoaXMuZWZmZWN0aXZlV2lkdGggPSB0aGlzLmN3IC0gb3V0ZXJHYXAgKiAyXG4gICAgdGhpcy5lZmZlY3RpdmVIZWlnaHQgPSB0aGlzLmNoIC0gb3V0ZXJHYXAgKiAyXG4gICAgY29uc3QgYm94V2lkdGggPSAodGhpcy5lZmZlY3RpdmVXaWR0aCAtIGdhcCAqIChjb2xzIC0gMSkpIC8gY29sc1xuICAgIGxldCB4ID0gb3V0ZXJHYXBcbiAgICBsZXQgeSA9IG91dGVyR2FwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgIHggPSBvdXRlckdhcFxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xzOyBqKyspIHtcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICAgICAgdGhpcy5jdHgucmVjdCh4LCB5LCBib3hXaWR0aCwgYm94V2lkdGgpXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG4gICAgICAgIHggKz0gYm94V2lkdGggKyBnYXBcbiAgICAgIH1cbiAgICAgIHkgKz0gYm94V2lkdGggKyBnYXBcbiAgICB9XG4gIH1cblxuICBkcmF3KGluY3JlbWVudDogbnVtYmVyKTogdm9pZCB7fVxufVxuIiwiaW1wb3J0IFBhdGggZnJvbSAnLi4vUGF0aCdcbmltcG9ydCBQb2ludCBmcm9tICcuLi9Qb2ludCdcbmltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4uL1NrZXRjaCdcbmltcG9ydCB7IGRlYnVnRG90IH0gZnJvbSAnLi4vdXRpbHMvZGVidWdVdGlscydcbmltcG9ydCB7IHJhbmRGbG9hdCwgcmFuZEZsb2F0UmFuZ2UsIHJhbmRJbnQsIHJhbmRJbnRSYW5nZSB9IGZyb20gJy4uL3V0aWxzL251bWJlclV0aWxzJ1xuaW1wb3J0IHsgYXJjVG9Qb2ludHMgfSBmcm9tICcuLi91dGlscy9wYXRoVXRpbHMnXG5pbXBvcnQgeyBwZXJsaW4yLCBzZWVkTm9pc2UgfSBmcm9tICcuLi91dGlscy9ub2lzZSdcbmltcG9ydCB7IHJhbmRvbSwgc2VlZFJhbmRvbSB9IGZyb20gJy4uL3V0aWxzL3JhbmRvbSdcbmltcG9ydCBPc2MgZnJvbSAnLi90b29scy9Pc2MnXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi90b29scy9SYW5nZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVybGluR3JpZCBleHRlbmRzIFNrZXRjaCB7XG4gIC8vIHN0YXRpYyBnZW5lcmF0ZUdDb2RlID0gZmFsc2VcblxuICBpbml0KCkge1xuICAgIHRoaXMudnMuc3BlZWRVcCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMTAsIG1pbjogMSwgbWF4OiAxMDAsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLnNlZWQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDEwMDAsIG1pbjogMTAwMCwgbWF4OiA1MDAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5jb2xzID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiA5MCwgbWluOiAxLCBtYXg6IDIwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMucm93cyA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogOTAsIG1pbjogMSwgbWF4OiAyMDAsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLnNoYXBlID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxLCBtaW46IDAsIG1heDogMSwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMuc2l6ZSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMTgsIG1pbjogMC4xLCBtYXg6IDY0LCBzdGVwOiAwLjEgfSlcbiAgICB0aGlzLnZzLnBlcmxpbkRpdiA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMjUsIG1pbjogMSwgbWF4OiAxMDAsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLm9mZnNldFggPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAsIG1pbjogLTEwMCwgbWF4OiAxMDAsIHN0ZXA6IDEgfSlcbiAgICB0aGlzLnZzLm9mZnNldFkgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAsIG1pbjogLTEwMCwgbWF4OiAxMDAsIHN0ZXA6IDEgfSlcbiAgICB0aGlzLnZzLm91dGVyR2FwID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxMiwgbWluOiAwLCBtYXg6IDI1LCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gIH1cblxuICBwcml2YXRlIGRyYXdDb3VudDogbnVtYmVyID0gMFxuICBwcml2YXRlIG1heERyYXdDb3VudDogbnVtYmVyID0gMFxuICBwcml2YXRlIGVmZmVjdGl2ZVdpZHRoOiBudW1iZXJcbiAgcHJpdmF0ZSBlZmZlY3RpdmVIZWlnaHQ6IG51bWJlclxuXG4gIGluaXREcmF3KCk6IHZvaWQge1xuICAgIHNlZWRSYW5kb20odGhpcy52cy5zZWVkLnZhbHVlKVxuICAgIHNlZWROb2lzZSh0aGlzLnZzLnNlZWQudmFsdWUpXG4gICAgY29uc3QgY29scyA9IHRoaXMudnMuY29scy52YWx1ZVxuICAgIGNvbnN0IHJvd3MgPSB0aGlzLnZzLnJvd3MudmFsdWVcbiAgICBjb25zdCBvdXRlckdhcCA9IHRoaXMudnMub3V0ZXJHYXAudmFsdWVcbiAgICB0aGlzLmVmZmVjdGl2ZVdpZHRoID0gdGhpcy5jdyAtIG91dGVyR2FwICogMlxuICAgIHRoaXMuZWZmZWN0aXZlSGVpZ2h0ID0gdGhpcy5jaCAtIG91dGVyR2FwICogMlxuICAgIHRoaXMuZHJhd0NvdW50ID0gMFxuICAgIHRoaXMubWF4RHJhd0NvdW50ID0gcm93cyAqIGNvbHNcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kcmF3Q291bnQgPj0gdGhpcy5tYXhEcmF3Q291bnQpIHJldHVyblxuXG4gICAgbGV0IHNwZWVkVXAgPSB0aGlzLnZzLnNwZWVkVXAudmFsdWVcbiAgICBjb25zdCBjb2xzID0gdGhpcy52cy5jb2xzLnZhbHVlXG4gICAgY29uc3Qgcm93cyA9IHRoaXMudnMucm93cy52YWx1ZVxuICAgIGNvbnN0IG91dGVyR2FwID0gdGhpcy52cy5vdXRlckdhcC52YWx1ZVxuICAgIGNvbnN0IHNpemUgPSB0aGlzLnZzLnNpemUudmFsdWVcbiAgICBjb25zdCBzaGFwZSA9IHRoaXMudnMuc2hhcGUudmFsdWVcbiAgICBjb25zdCBwZXJsaW5EaXYgPSB0aGlzLnZzLnBlcmxpbkRpdi52YWx1ZVxuICAgIGNvbnN0IG9mZnNldFggPSB0aGlzLnZzLm9mZnNldFgudmFsdWVcbiAgICBjb25zdCBvZmZzZXRZID0gdGhpcy52cy5vZmZzZXRZLnZhbHVlXG5cbiAgICBjb25zdCBjb2xXaWR0aCA9IHRoaXMuZWZmZWN0aXZlV2lkdGggLyBjb2xzXG4gICAgY29uc3Qgcm93SGVpZ2h0ID0gdGhpcy5lZmZlY3RpdmVIZWlnaHQgLyByb3dzXG5cbiAgICBpZiAoc2hhcGUgPT09IDApIHNwZWVkVXAgPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKHNwZWVkVXAgLyA0KSlcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52cy5zcGVlZFVwLnZhbHVlOyBpKyspIHtcbiAgICAgIGNvbnN0IHJlYWxDb3VudCA9IHRoaXMuZHJhd0NvdW50ICsgaVxuICAgICAgaWYgKHJlYWxDb3VudCA+PSB0aGlzLm1heERyYXdDb3VudCkgYnJlYWtcblxuICAgICAgY29uc3QgeCA9IHJlYWxDb3VudCAlIGNvbHNcbiAgICAgIGNvbnN0IHkgPSBNYXRoLmZsb29yKHJlYWxDb3VudCAvIGNvbHMpXG5cbiAgICAgIGNvbnN0IHhQb3MgPSBvdXRlckdhcCArIHggKiBjb2xXaWR0aFxuICAgICAgY29uc3QgeVBvcyA9IG91dGVyR2FwICsgeSAqIHJvd0hlaWdodFxuICAgICAgY29uc3QgcmFkaXVzID0gTWF0aC5hYnMocGVybGluMigoeCArIG9mZnNldFgpIC8gcGVybGluRGl2LCAoeSArIG9mZnNldFkpIC8gcGVybGluRGl2KSkgKiBzaXplXG5cbiAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgICBpZiAoc2hhcGUgPT09IDApIHRoaXMuY3R4LmNpcmNsZSh4UG9zLCB5UG9zLCByYWRpdXMpXG4gICAgICBlbHNlIGlmIChzaGFwZSA9PT0gMSkgdGhpcy5jdHgucmVjdCh4UG9zIC0gcmFkaXVzIC8gMiwgeVBvcyAtIHJhZGl1cyAvIDIsIHJhZGl1cywgcmFkaXVzKVxuICAgICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG4gICAgfVxuICAgIHRoaXMuZHJhd0NvdW50ICs9IHRoaXMudnMuc3BlZWRVcC52YWx1ZVxuICB9XG59XG4iLCJpbXBvcnQgUGF0aCBmcm9tICcuLi9QYXRoJ1xuaW1wb3J0IFBvaW50IGZyb20gJy4uL1BvaW50J1xuaW1wb3J0IHsgU2tldGNoIH0gZnJvbSAnLi4vU2tldGNoJ1xuaW1wb3J0IHsgZGVidWdEb3QgfSBmcm9tICcuLi91dGlscy9kZWJ1Z1V0aWxzJ1xuaW1wb3J0IHsgcmFuZEZsb2F0LCByYW5kRmxvYXRSYW5nZSwgcmFuZEludCwgcmFuZEludFJhbmdlIH0gZnJvbSAnLi4vdXRpbHMvbnVtYmVyVXRpbHMnXG5pbXBvcnQgeyBhcmNUb1BvaW50cyB9IGZyb20gJy4uL3V0aWxzL3BhdGhVdGlscydcbmltcG9ydCB7IHBlcmxpbjIsIHNlZWROb2lzZSB9IGZyb20gJy4uL3V0aWxzL25vaXNlJ1xuaW1wb3J0IHsgcmFuZG9tLCBzZWVkUmFuZG9tIH0gZnJvbSAnLi4vdXRpbHMvcmFuZG9tJ1xuaW1wb3J0IE9zYyBmcm9tICcuL3Rvb2xzL09zYydcbmltcG9ydCBSYW5nZSBmcm9tICcuL3Rvb2xzL1JhbmdlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZXJsaW5MaW5lcyBleHRlbmRzIFNrZXRjaCB7XG4gIC8vIHN0YXRpYyBnZW5lcmF0ZUdDb2RlID0gZmFsc2VcblxuICBpbml0KCkge1xuICAgIHRoaXMudnMuc3BlZWRVcCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMSwgbWluOiAxLCBtYXg6IDEwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMuc2VlZCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogOTI3NSwgbWluOiAxMDAwLCBtYXg6IDUwMDAsIHN0ZXA6IDEgfSlcbiAgICB0aGlzLnZzLmNvbHMgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDE1MCwgbWluOiAxLCBtYXg6IDMwMCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMucm93cyA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMTIwLCBtaW46IDEsIG1heDogMzAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5zaXplID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjUsIG1pbjogMC4xLCBtYXg6IDgsIHN0ZXA6IDAuMSB9KVxuICAgIHRoaXMudnMucGVybGluRGl2WCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogNzUsIG1pbjogMSwgbWF4OiAxMDAsIHN0ZXA6IDEgfSlcbiAgICB0aGlzLnZzLnBlcmxpbkRpdlkgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDc1LCBtaW46IDEsIG1heDogMTAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5wZXJsaW5PZmZzZXRYID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IC0xMDAsIG1heDogMTAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5wZXJsaW5PZmZzZXRZID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IC0xMDAsIG1heDogMTAwLCBzdGVwOiAxIH0pXG4gICAgdGhpcy52cy5kcmF3T2Zmc2V0U3RhcnQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDEsIG1pbjogLTUsIG1heDogNSwgc3RlcDogMC4xIH0pXG4gICAgdGhpcy52cy5kcmF3T2Zmc2V0RW5kID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAtNC41LCBtaW46IC01LCBtYXg6IDUsIHN0ZXA6IDAuMSB9KVxuICAgIHRoaXMudnMub3V0ZXJHYXAgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDE4LCBtaW46IDAsIG1heDogMjUsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgfVxuXG4gIHByaXZhdGUgZHJhd0NvdW50OiBudW1iZXIgPSAwXG4gIHByaXZhdGUgbWF4RHJhd0NvdW50OiBudW1iZXIgPSAwXG4gIHByaXZhdGUgZWZmZWN0aXZlV2lkdGg6IG51bWJlclxuICBwcml2YXRlIGVmZmVjdGl2ZUhlaWdodDogbnVtYmVyXG5cbiAgaW5pdERyYXcoKTogdm9pZCB7XG4gICAgc2VlZFJhbmRvbSh0aGlzLnZzLnNlZWQudmFsdWUpXG4gICAgc2VlZE5vaXNlKHRoaXMudnMuc2VlZC52YWx1ZSlcbiAgICBjb25zdCBjb2xzID0gdGhpcy52cy5jb2xzLnZhbHVlXG4gICAgY29uc3Qgcm93cyA9IHRoaXMudnMucm93cy52YWx1ZVxuICAgIGNvbnN0IG91dGVyR2FwID0gdGhpcy52cy5vdXRlckdhcC52YWx1ZVxuICAgIHRoaXMuZWZmZWN0aXZlV2lkdGggPSB0aGlzLmN3IC0gb3V0ZXJHYXAgKiAyXG4gICAgdGhpcy5lZmZlY3RpdmVIZWlnaHQgPSB0aGlzLmNoIC0gb3V0ZXJHYXAgKiAyXG4gICAgdGhpcy5kcmF3Q291bnQgPSAwXG4gICAgdGhpcy5tYXhEcmF3Q291bnQgPSByb3dzICogY29sc1xuICB9XG5cbiAgZHJhdyhpbmNyZW1lbnQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLmRyYXdDb3VudCA+PSB0aGlzLm1heERyYXdDb3VudCkgcmV0dXJuXG5cbiAgICBjb25zdCBjb2xzID0gdGhpcy52cy5jb2xzLnZhbHVlXG4gICAgY29uc3Qgcm93cyA9IHRoaXMudnMucm93cy52YWx1ZVxuICAgIGNvbnN0IG91dGVyR2FwID0gdGhpcy52cy5vdXRlckdhcC52YWx1ZVxuICAgIGNvbnN0IHNpemUgPSB0aGlzLnZzLnNpemUudmFsdWVcbiAgICBjb25zdCBwZXJsaW5EaXZYID0gdGhpcy52cy5wZXJsaW5EaXZYLnZhbHVlXG4gICAgY29uc3QgcGVybGluRGl2WSA9IHRoaXMudnMucGVybGluRGl2WS52YWx1ZVxuICAgIGNvbnN0IHBlcmxpbk9mZnNldFggPSB0aGlzLnZzLnBlcmxpbk9mZnNldFgudmFsdWVcbiAgICBjb25zdCBwZXJsaW5PZmZzZXRZID0gdGhpcy52cy5wZXJsaW5PZmZzZXRZLnZhbHVlXG4gICAgY29uc3QgZHJhd09mZnNldFN0YXJ0ID0gdGhpcy52cy5kcmF3T2Zmc2V0U3RhcnQudmFsdWVcbiAgICBjb25zdCBkcmF3T2Zmc2V0RW5kID0gdGhpcy52cy5kcmF3T2Zmc2V0RW5kLnZhbHVlXG5cbiAgICBjb25zdCBzcGFjZVggPSB0aGlzLmVmZmVjdGl2ZVdpZHRoIC8gY29sc1xuICAgIGNvbnN0IHNwYWNlWSA9IHRoaXMuZWZmZWN0aXZlSGVpZ2h0IC8gcm93c1xuXG4gICAgY29uc3QgYWRqdXN0ZWRTaXplID0gc2l6ZSAvICgxICsgKHRoaXMudnMuc2l6ZS5tYXggLSAoY29scyArIHJvd3MpIC8gMikgLyA1MDApXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudnMuc3BlZWRVcC52YWx1ZTsgaSsrKSB7XG4gICAgICBjb25zdCByZWFsQ291bnQgPSB0aGlzLmRyYXdDb3VudCArIGlcbiAgICAgIGlmIChyZWFsQ291bnQgPj0gdGhpcy5tYXhEcmF3Q291bnQpIGJyZWFrXG5cbiAgICAgIGNvbnN0IHggPSByZWFsQ291bnQgJSBjb2xzXG4gICAgICBjb25zdCB5ID0gTWF0aC5mbG9vcihyZWFsQ291bnQgLyBjb2xzKVxuXG4gICAgICBjb25zdCB4UG9zID0gb3V0ZXJHYXAgKyB4ICogc3BhY2VYXG4gICAgICBjb25zdCB5UG9zID0gb3V0ZXJHYXAgKyB5ICogc3BhY2VZXG5cbiAgICAgIGNvbnN0IHRoZXRhID0gcGVybGluMigoeCArIHBlcmxpbk9mZnNldFgpIC8gcGVybGluRGl2WCwgKHkgKyBwZXJsaW5PZmZzZXRZKSAvIHBlcmxpbkRpdlkpICogTWF0aC5QSSAqIDJcbiAgICAgIGNvbnN0IHB0MSA9IHtcbiAgICAgICAgeDogeFBvcyArIE1hdGguY29zKHRoZXRhKSAqIChhZGp1c3RlZFNpemUgKyBkcmF3T2Zmc2V0U3RhcnQpLFxuICAgICAgICB5OiB5UG9zICsgTWF0aC5zaW4odGhldGEpICogKGFkanVzdGVkU2l6ZSArIGRyYXdPZmZzZXRTdGFydCksXG4gICAgICB9XG4gICAgICBjb25zdCBwdDIgPSB7XG4gICAgICAgIHg6IHhQb3MgKyBNYXRoLmNvcyh0aGV0YSArIE1hdGguUEkpICogKGFkanVzdGVkU2l6ZSArIGRyYXdPZmZzZXRFbmQpLFxuICAgICAgICB5OiB5UG9zICsgTWF0aC5zaW4odGhldGEgKyBNYXRoLlBJKSAqIChhZGp1c3RlZFNpemUgKyBkcmF3T2Zmc2V0RW5kKSxcbiAgICAgIH1cblxuICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKClcblxuICAgICAgLy8gYWx0ZXJuYXRlIHNvIHRoZSBwZW5jaWwgaGFzIGxlc3Mgc3BhY2UgdG8gbW92ZVxuICAgICAgaWYgKHJlYWxDb3VudCAlIDIgPT09IDApIHtcbiAgICAgICAgdGhpcy5jdHgubW92ZVRvKHB0MS54LCBwdDEueSlcbiAgICAgICAgdGhpcy5jdHgubGluZVRvKHB0Mi54LCBwdDIueSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY3R4Lm1vdmVUbyhwdDIueCwgcHQyLnkpXG4gICAgICAgIHRoaXMuY3R4LmxpbmVUbyhwdDEueCwgcHQxLnkpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuICAgIH1cbiAgICB0aGlzLmRyYXdDb3VudCArPSB0aGlzLnZzLnNwZWVkVXAudmFsdWVcbiAgfVxufVxuIiwiaW1wb3J0IFBvaW50IGZyb20gJy4uL1BvaW50J1xuaW1wb3J0IHsgU2tldGNoIH0gZnJvbSAnLi4vU2tldGNoJ1xuaW1wb3J0IHsgcmFuZEZsb2F0LCByYW5kRmxvYXRSYW5nZSB9IGZyb20gJy4uL3V0aWxzL251bWJlclV0aWxzJ1xuaW1wb3J0IHsgcmFuZG9tLCBzZWVkUmFuZG9tIH0gZnJvbSAnLi4vdXRpbHMvcmFuZG9tJ1xuaW1wb3J0IFJhbmdlIGZyb20gJy4vdG9vbHMvUmFuZ2UnXG5cbmludGVyZmFjZSBTdGVtIHtcbiAgcG9zaXRpb246IFBvaW50XG4gIGFuZ2xlOiBudW1iZXJcbiAgbGVuZ3RoOiBudW1iZXJcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJlZSBleHRlbmRzIFNrZXRjaCB7XG4gIC8vIHN0YXRpYyBnZW5lcmF0ZUdDb2RlID0gZmFsc2VcblxuICBpbml0KCkge1xuICAgIC8vIHRoaXMudnMuc3BlZWRVcCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMSwgbWluOiAxLCBtYXg6IDEwMCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICAgIHRoaXMudnMuc2VlZCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMjIyMiwgbWluOiAxMDAwLCBtYXg6IDUwMDAsIHN0ZXA6IDEgfSlcbiAgICB0aGlzLnZzLmluaXRCcmFuY2hMZW5ndGggPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDgsIG1pbjogNSwgbWF4OiAxMCwgc3RlcDogMC4xIH0pXG4gICAgdGhpcy52cy5icmFuY2hMZW5ndGhGYWxsb2ZmID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjgzLCBtaW46IDAuNCwgbWF4OiAwLjksIHN0ZXA6IDAuMDA1IH0pXG4gICAgdGhpcy52cy5zcGxpdFByb2JhYmlsaXR5ID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjYsIG1pbjogMCwgbWF4OiAxLCBzdGVwOiAwLjAwNSB9KVxuICAgIHRoaXMudnMucHJ1bmVQcm9iYWJpbGl0eSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMC45NSwgbWluOiAwLCBtYXg6IDEsIHN0ZXA6IDAuMDUgfSlcbiAgICB0aGlzLnZzLmJsb29tUHJvYmFiaWxpdHkgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAuNiwgbWluOiAwLCBtYXg6IDEsIHN0ZXA6IDAuMDUgfSlcbiAgICB0aGlzLnZzLmJsb29tU2l6ZSA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMC4zLCBtaW46IDAuMiwgbWF4OiAxLjIsIHN0ZXA6IDAuMSB9KVxuICAgIHRoaXMudnMuc3BsaXRBbmdsZVJhbmdlID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjQ0LCBtaW46IDAsIG1heDogTWF0aC5QSSAvIDIsIHN0ZXA6IE1hdGguUEkgLyAyNTYgfSlcbiAgICB0aGlzLnZzLnNwbGl0QW5nbGVCcmFuY2hMZXZlbE11bHRpID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjEsIG1pbjogLTEsIG1heDogMSwgc3RlcDogMC4wNSB9KVxuICAgIHRoaXMudnMuc3BsaXRBbmdsZU1pblBlcmNlbnQgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDAuNSwgbWluOiAwLCBtYXg6IDEsIHN0ZXA6IDAuMDUgfSlcbiAgICB0aGlzLnZzLmNoYW9zRmFjdG9yID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLjg1LCBtaW46IDAsIG1heDogMiwgc3RlcDogMC4wMSB9KVxuICAgIHRoaXMudnMuc3BsaXRDb3VudCA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMiwgbWluOiAyLCBtYXg6IDUsIHN0ZXA6IDEsIGRpc2FibGVSYW5kb21pemU6IHRydWUgfSlcbiAgICB0aGlzLnZzLm1heEJyYW5jaExldmVscyA9IG5ldyBSYW5nZSh7IGluaXRpYWxWYWx1ZTogMTQsIG1pbjogMSwgbWF4OiAyNCwgc3RlcDogMSwgZGlzYWJsZVJhbmRvbWl6ZTogdHJ1ZSB9KVxuICB9XG5cbiAgcHJpdmF0ZSBicmFuY2hMZXZlbDogbnVtYmVyID0gMFxuICBwcml2YXRlIGRyYXduQ3VycmVudFN0ZW1zOiBudW1iZXIgPSAwXG4gIHByaXZhdGUgY3VycmVudFN0ZW1zOiBTdGVtW10gPSBbXVxuICBwcml2YXRlIG5leHRTdGVtczogU3RlbVtdID0gW11cblxuICBpbml0RHJhdygpOiB2b2lkIHtcbiAgICBzZWVkUmFuZG9tKHRoaXMudnMuc2VlZC52YWx1ZSlcblxuICAgIHRoaXMuYnJhbmNoTGV2ZWwgPSAwXG4gICAgdGhpcy5kcmF3bkN1cnJlbnRTdGVtcyA9IDBcbiAgICB0aGlzLmN1cnJlbnRTdGVtcyA9IFtdXG4gICAgdGhpcy5uZXh0U3RlbXMgPSBbXVxuXG4gICAgY29uc3QgYnJhbmNoTGVuZ3RoRmFsbG9mZiA9IHRoaXMudnMuYnJhbmNoTGVuZ3RoRmFsbG9mZi52YWx1ZVxuICAgIGNvbnN0IGluaXRCcmFuY2hMZW5ndGggPSB0aGlzLnZzLmluaXRCcmFuY2hMZW5ndGgudmFsdWVcblxuICAgIGNvbnN0IGxlbmd0aCA9IGluaXRCcmFuY2hMZW5ndGggLyBicmFuY2hMZW5ndGhGYWxsb2ZmXG4gICAgY29uc3QgYW5nbGUgPSAtTWF0aC5QSSAvIDJcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZHJhd0JyYW5jaChuZXcgUG9pbnQodGhpcy5jeCwgdGhpcy5jaCAtIDEwKSwgYW5nbGUsIGxlbmd0aClcbiAgICB0aGlzLmN1cnJlbnRTdGVtcy5wdXNoKHsgcG9zaXRpb24sIGFuZ2xlLCBsZW5ndGggfSlcbiAgfVxuXG4gIGRyYXcoaW5jcmVtZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5icmFuY2hMZXZlbCA+IHRoaXMudnMubWF4QnJhbmNoTGV2ZWxzLnZhbHVlKSByZXR1cm5cbiAgICBpZiAodGhpcy5kcmF3bkN1cnJlbnRTdGVtcyA+PSB0aGlzLmN1cnJlbnRTdGVtcy5sZW5ndGgpIHtcbiAgICAgIC8vIHRpbWUgdG8gY2FsY3VsYXRlIG5ldyBzdGVtc1xuICAgICAgdGhpcy5jdXJyZW50U3RlbXMgPSBbLi4udGhpcy5uZXh0U3RlbXNdXG4gICAgICB0aGlzLm5leHRTdGVtcyA9IFtdXG4gICAgICB0aGlzLmJyYW5jaExldmVsKytcbiAgICAgIHRoaXMuZHJhd25DdXJyZW50U3RlbXMgPSAwXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRyYXcgY3VycmVudCBzdGVtc1xuICAgICAgY29uc3Qgc3RlbSA9IHRoaXMuY3VycmVudFN0ZW1zW3RoaXMuZHJhd25DdXJyZW50U3RlbXNdXG5cbiAgICAgIGNvbnN0IGJyYW5jaExlbmd0aEZhbGxvZmYgPSB0aGlzLnZzLmJyYW5jaExlbmd0aEZhbGxvZmYudmFsdWVcbiAgICAgIGNvbnN0IHNwbGl0UHJvYmFiaWxpdHkgPSB0aGlzLmJyYW5jaExldmVsIDwgMyA/IDEgOiB0aGlzLnZzLnNwbGl0UHJvYmFiaWxpdHkudmFsdWVcbiAgICAgIGNvbnN0IHNwbGl0QW5nbGVSYW5nZSA9IHRoaXMudnMuc3BsaXRBbmdsZVJhbmdlLnZhbHVlXG4gICAgICBjb25zdCBzcGxpdEFuZ2xlQnJhbmNoTGV2ZWxNdWx0aSA9IHRoaXMudnMuc3BsaXRBbmdsZUJyYW5jaExldmVsTXVsdGkudmFsdWVcbiAgICAgIGNvbnN0IHNwbGl0QW5nbGVNaW5QZXJjZW50ID0gdGhpcy52cy5zcGxpdEFuZ2xlTWluUGVyY2VudC52YWx1ZVxuICAgICAgY29uc3QgcHJ1bmVQcm9iYWJpbGl0eSA9IHRoaXMudnMucHJ1bmVQcm9iYWJpbGl0eS52YWx1ZVxuICAgICAgY29uc3QgYmxvb21Qcm9iYWJpbGl0eSA9IHRoaXMudnMuYmxvb21Qcm9iYWJpbGl0eS52YWx1ZVxuICAgICAgY29uc3QgY2hhb3NGYWN0b3IgPSB0aGlzLnZzLmNoYW9zRmFjdG9yLnZhbHVlXG5cbiAgICAgIGNvbnN0IGRvU3BsaXQgPSByYW5kb20oKSA8PSBzcGxpdFByb2JhYmlsaXR5XG5cbiAgICAgIGlmICghZG9TcGxpdCkge1xuICAgICAgICAvLyBkcmF3IGJyYW5jaFxuICAgICAgICBjb25zdCBhbmdsZSA9IHN0ZW0uYW5nbGUgKyByYW5kRmxvYXQoKE1hdGguUEkgKiBjaGFvc0ZhY3RvcikgLyAxMClcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gc3RlbS5sZW5ndGggKiBicmFuY2hMZW5ndGhGYWxsb2ZmICogKDEgKyByYW5kRmxvYXQoY2hhb3NGYWN0b3IgLyA4KSlcbiAgICAgICAgY29uc3QgZW5kUG9pbnQgPSB0aGlzLmRyYXdCcmFuY2goc3RlbS5wb3NpdGlvbiwgYW5nbGUsIGxlbmd0aClcbiAgICAgICAgaWYgKHRoaXMuYnJhbmNoTGV2ZWwgIT09IHRoaXMudnMubWF4QnJhbmNoTGV2ZWxzLnZhbHVlICYmIHJhbmRvbSgpID4gcHJ1bmVQcm9iYWJpbGl0eSkge1xuICAgICAgICAgIHRoaXMubmV4dFN0ZW1zLnB1c2goe1xuICAgICAgICAgICAgcG9zaXRpb246IGVuZFBvaW50LFxuICAgICAgICAgICAgYW5nbGUsXG4gICAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIGlmIChyYW5kb20oKSA8IGJsb29tUHJvYmFiaWxpdHkpIHtcbiAgICAgICAgICB0aGlzLmRyYXdCbG9vbShlbmRQb2ludCwgYW5nbGUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNwbGl0SW50byA9IHRoaXMudnMuc3BsaXRDb3VudC52YWx1ZVxuICAgICAgICBjb25zdCBhZGp1c3RlZFNwbGl0QW5nbGVSYW5nZSA9IHNwbGl0QW5nbGVSYW5nZSAqICgxICsgKHNwbGl0QW5nbGVCcmFuY2hMZXZlbE11bHRpICogdGhpcy5icmFuY2hMZXZlbCkgLyA0KVxuICAgICAgICBjb25zdCBzcGxpdEFuZ2xlU3BhbiA9XG4gICAgICAgICAgYWRqdXN0ZWRTcGxpdEFuZ2xlUmFuZ2UgKiBzcGxpdEFuZ2xlTWluUGVyY2VudCArXG4gICAgICAgICAgcmFuZEZsb2F0UmFuZ2UoYWRqdXN0ZWRTcGxpdEFuZ2xlUmFuZ2UgKiAoMSAtIHNwbGl0QW5nbGVNaW5QZXJjZW50KSkgK1xuICAgICAgICAgIChyYW5kRmxvYXQoY2hhb3NGYWN0b3IpICogTWF0aC5QSSkgLyA4XG5cbiAgICAgICAgY29uc3Qgc3BsaXRTbGljZSA9IChzcGxpdEFuZ2xlU3BhbiAqIDIpIC8gc3BsaXRJbnRvXG5cbiAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBzcGxpdEludG87IHMrKykge1xuICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHN0ZW0ubGVuZ3RoICogYnJhbmNoTGVuZ3RoRmFsbG9mZiAqICgxICsgcmFuZEZsb2F0KGNoYW9zRmFjdG9yIC8gOCkpXG4gICAgICAgICAgY29uc3QgYW5nbGUgPSBzdGVtLmFuZ2xlIC0gc3BsaXRBbmdsZVNwYW4gLyAyICsgc3BsaXRTbGljZSAqIHMgKyByYW5kRmxvYXQoKE1hdGguUEkgKiBjaGFvc0ZhY3RvcikgLyAxMClcbiAgICAgICAgICBjb25zdCBlbmRQb2ludCA9IHRoaXMuZHJhd0JyYW5jaChzdGVtLnBvc2l0aW9uLCBhbmdsZSwgbGVuZ3RoKVxuICAgICAgICAgIHRoaXMubmV4dFN0ZW1zLnB1c2goe1xuICAgICAgICAgICAgcG9zaXRpb246IGVuZFBvaW50LFxuICAgICAgICAgICAgYW5nbGUsXG4gICAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmRyYXduQ3VycmVudFN0ZW1zKytcbiAgICB9XG4gIH1cblxuICBkcmF3QnJhbmNoKHBvc2l0aW9uOiBQb2ludCwgYW5nbGU6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpOiBQb2ludCB7XG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICB0aGlzLmN0eC5tb3ZlVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSlcbiAgICBjb25zdCBlbmRQb2ludCA9IHBvc2l0aW9uLmNsb25lKCkuYWRkKG5ldyBQb2ludChNYXRoLmNvcyhhbmdsZSkgKiBsZW5ndGgsIE1hdGguc2luKGFuZ2xlKSAqIGxlbmd0aCkpXG4gICAgdGhpcy5jdHgubGluZVRvKGVuZFBvaW50LngsIGVuZFBvaW50LnkpXG4gICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKVxuICAgIHJldHVybiBlbmRQb2ludFxuICB9XG5cbiAgZHJhd0Jsb29tKHBvc2l0aW9uOiBQb2ludCwgYW5nbGU6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGJsb29tU2l6ZSA9IHRoaXMudnMuYmxvb21TaXplLnZhbHVlXG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKClcbiAgICAvLyBjb25zdCBvZmZzZXRBbmdsZSA9ICg2MCAvIDM2MCkgKiBNYXRoLlBJXG4gICAgLy8gdGhpcy5jdHgubW92ZVRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpXG4gICAgLy8gdGhpcy5jdHgubGluZVRvKHBvc2l0aW9uLnggKyBNYXRoLmNvcyhhbmdsZSAtIG9mZnNldEFuZ2xlKSAqIGJsb29tU2l6ZSwgcG9zaXRpb24ueSArIE1hdGguc2luKGFuZ2xlIC0gb2Zmc2V0QW5nbGUpICogYmxvb21TaXplKVxuICAgIC8vIHRoaXMuY3R4LmxpbmVUbyhwb3NpdGlvbi54ICsgTWF0aC5jb3MoYW5nbGUgKyBvZmZzZXRBbmdsZSkgKiBibG9vbVNpemUsIHBvc2l0aW9uLnkgKyBNYXRoLnNpbihhbmdsZSArIG9mZnNldEFuZ2xlKSAqIGJsb29tU2l6ZSlcbiAgICAvLyB0aGlzLmN0eC5saW5lVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSlcbiAgICB0aGlzLmN0eC5jaXJjbGUocG9zaXRpb24ueCArIE1hdGguY29zKGFuZ2xlKSAqIGJsb29tU2l6ZSwgcG9zaXRpb24ueSArIE1hdGguc2luKGFuZ2xlKSAqIGJsb29tU2l6ZSwgYmxvb21TaXplKVxuICAgIHRoaXMuY3R4LnN0cm9rZSgpXG4gICAgdGhpcy5jdHguY2xvc2VQYXRoKClcbiAgfVxufVxuIiwiaW1wb3J0IFBvaW50IGZyb20gJy4uL1BvaW50J1xuaW1wb3J0IHsgU2tldGNoIH0gZnJvbSAnLi4vU2tldGNoJ1xuaW1wb3J0IHsgbm9ybWFsaXplUmFkaWFuLCByYW5kSW50LCBzZWdtZW50VmFsdWUgfSBmcm9tICcuLi91dGlscy9udW1iZXJVdGlscydcbmltcG9ydCB7IHJhbmRvbSwgc2VlZFJhbmRvbSB9IGZyb20gJy4uL3V0aWxzL3JhbmRvbSdcbmltcG9ydCBSYW5nZSBmcm9tICcuL3Rvb2xzL1JhbmdlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb25kYXlNYXplIGV4dGVuZHMgU2tldGNoIHtcbiAgLy8gc3RhdGljIGdlbmVyYXRlR0NvZGUgPSBmYWxzZVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy52cy5zcGVlZFVwID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAxLCBtaW46IDEsIG1heDogMTAwLCBzdGVwOiAxLCBkaXNhYmxlUmFuZG9taXplOiB0cnVlIH0pXG4gICAgdGhpcy52cy5zZWVkID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAyMjIyLCBtaW46IDEwMDAsIG1heDogNTAwMCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMuZ3JpZFNpemUgPSBuZXcgUmFuZ2UoeyBpbml0aWFsVmFsdWU6IDIsIG1pbjogMSwgbWF4OiA4LCBzdGVwOiAwLjI1IH0pXG4gICAgdGhpcy52cy5yYWRpYWxEaXZzID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAyLCBtaW46IDEsIG1heDogNCwgc3RlcDogMSB9KVxuICAgIHRoaXMudnMub2Zmc2V0QW5nID0gbmV3IFJhbmdlKHsgaW5pdGlhbFZhbHVlOiAwLCBtaW46IDAsIG1heDogMzYwLCBzdGVwOiAxNSB9KVxuICB9XG5cbiAgcHJpdmF0ZSByb3dzOiBudW1iZXJcbiAgcHJpdmF0ZSBjb2xzOiBudW1iZXJcbiAgcHJpdmF0ZSBpOiBudW1iZXJcbiAgLy8gcHJpdmF0ZSBzZWdDYWNoZTogbnVtYmVyW11cblxuICBpbml0RHJhdygpOiB2b2lkIHtcbiAgICBzZWVkUmFuZG9tKHRoaXMudnMuc2VlZC52YWx1ZSlcbiAgICB0aGlzLmkgPSAwXG4gICAgdGhpcy5yb3dzID0gTWF0aC5jZWlsKHRoaXMuY3cgLyB0aGlzLnZzLmdyaWRTaXplLnZhbHVlKSArIDFcbiAgICB0aGlzLmNvbHMgPSBNYXRoLmNlaWwodGhpcy5jaCAvIHRoaXMudnMuZ3JpZFNpemUudmFsdWUpICsgMVxuICAgIHJldHVyblxuICAgIGlmICh0aGlzLmN0eC5jdHgpIHtcbiAgICAgIHRoaXMuY3R4LmN0eC5zdHJva2VTdHlsZSA9ICcjZGRkJ1xuICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCB0aGlzLnJvd3M7IHIrKykge1xuICAgICAgICB0aGlzLmN0eC5jdHgubW92ZVRvKDAsIHIgKiB0aGlzLnZzLmdyaWRTaXplLnZhbHVlKVxuICAgICAgICB0aGlzLmN0eC5jdHgubGluZVRvKHRoaXMuY3csIHIgKiB0aGlzLnZzLmdyaWRTaXplLnZhbHVlKVxuICAgICAgICB0aGlzLmN0eC5jdHguc3Ryb2tlKClcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jb2xzOyBjKyspIHtcbiAgICAgICAgdGhpcy5jdHguY3R4Lm1vdmVUbyhjICogdGhpcy52cy5ncmlkU2l6ZS52YWx1ZSwgMClcbiAgICAgICAgdGhpcy5jdHguY3R4LmxpbmVUbyhjICogdGhpcy52cy5ncmlkU2l6ZS52YWx1ZSwgdGhpcy5jaClcbiAgICAgICAgdGhpcy5jdHguY3R4LnN0cm9rZSgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZHJhdyhpbmNyZW1lbnQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLmkgPj0gdGhpcy5yb3dzICogdGhpcy5jb2xzKSByZXR1cm5cbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IHRoaXMudnMuc3BlZWRVcC52YWx1ZTsgbisrKSB7XG4gICAgICBpZiAodGhpcy5pID49IHRoaXMucm93cyAqIHRoaXMuY29scykgYnJlYWtcblxuICAgICAgY29uc3QgeEkgPSB0aGlzLmkgJSB0aGlzLnJvd3NcbiAgICAgIGNvbnN0IHlJID0gTWF0aC5mbG9vcih0aGlzLmkgLyB0aGlzLnJvd3MpXG4gICAgICBjb25zdCB4ID0geEkgKiB0aGlzLnZzLmdyaWRTaXplLnZhbHVlXG4gICAgICBjb25zdCB5ID0geUkgKiB0aGlzLnZzLmdyaWRTaXplLnZhbHVlXG5cbiAgICAgIGNvbnN0IG9mZnNldEFuZ2xlID0gc2VnbWVudFZhbHVlKHRoaXMudnMub2Zmc2V0QW5nLnZhbHVlLCB0aGlzLnZzLm9mZnNldEFuZy5tYXgsIE1hdGguUEkgKiAyKVxuICAgICAgY29uc3Qgc2VnSW5kZXggPSByYW5kSW50KHRoaXMudnMucmFkaWFsRGl2cy52YWx1ZSlcbiAgICAgIGxldCBhbmdsZSA9IChNYXRoLlBJIC8gdGhpcy52cy5yYWRpYWxEaXZzLnZhbHVlKSAqIHNlZ0luZGV4XG4gICAgICBhbmdsZSA9IG5vcm1hbGl6ZVJhZGlhbihhbmdsZSlcblxuICAgICAgaWYgKGFuZ2xlID4gTWF0aC5QSSAvIDIpIGFuZ2xlIC09IE1hdGguUElcbiAgICAgIGlmIChhbmdsZSA8IE1hdGguUEkgLyAyKSBhbmdsZSArPSBNYXRoLlBJXG5cbiAgICAgIGFuZ2xlICs9IG9mZnNldEFuZ2xlXG5cbiAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpXG4gICAgICAvLyB0aGlzLmN0eC5yZWN0KHggLSAwLjIsIHkgLSAwLjIsIDAuNCwgMC40KVxuICAgICAgLy8gdGhpcy5jdHguZmlsbCgpXG5cbiAgICAgIHRoaXMuY3R4Lm1vdmVUbyh4LCB5KVxuXG4gICAgICBjb25zdCBsZW4gPSBNYXRoLm1pbihcbiAgICAgICAgTWF0aC5hYnModGhpcy52cy5ncmlkU2l6ZS52YWx1ZSAvIE1hdGguY29zKGFuZ2xlKSksXG4gICAgICAgIE1hdGguYWJzKHRoaXMudnMuZ3JpZFNpemUudmFsdWUgLyBNYXRoLnNpbihhbmdsZSkpXG4gICAgICApXG5cbiAgICAgIHRoaXMuY3R4LmxpbmVUbyh4ICsgTWF0aC5jb3MoYW5nbGUpICogbGVuLCB5ICsgTWF0aC5zaW4oYW5nbGUpICogbGVuKVxuICAgICAgdGhpcy5jdHguc3Ryb2tlKClcbiAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpXG5cbiAgICAgIHRoaXMuaSsrXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgUG9pbnQgZnJvbSAnLi4vLi4vUG9pbnQnXG5cbmludGVyZmFjZSBPc2NPcHRpb25zIHtcbiAgcmFkaXVzPzogbnVtYmVyIHwgUG9pbnQgfCAoKGk6IG51bWJlcikgPT4gUG9pbnQgfCBudW1iZXIpXG4gIG9mZnNldD86IFBvaW50XG4gIHNwZWVkPzogbnVtYmVyIHwgKChpOiBudW1iZXIpID0+IG51bWJlcilcbiAgcGhhc2U/OiBudW1iZXJcbiAgb2Zmc2V0UGhhc2U/OiBudW1iZXJcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3NjIHtcbiAgcHVibGljIHZhbHVlID0gbmV3IFBvaW50KClcbiAgcHVibGljIHJhZGl1czogUG9pbnRcbiAgcHVibGljIG9mZnNldDogUG9pbnRcbiAgcHVibGljIHNwZWVkOiBudW1iZXJcbiAgcHVibGljIHBoYXNlOiBudW1iZXJcbiAgcHVibGljIG9mZnNldFBoYXNlID0gLU1hdGguUEkgLyAyIC8vIHN0YXJ0IGRyYXdpbmcgZnJvbSB0b3AgbWlkZGxlXG4gIHByaXZhdGUgdGhldGE6IFBvaW50XG4gIHByaXZhdGUgc3BlZWRGdW5jOiBFeGNsdWRlPE9zY09wdGlvbnNbJ3NwZWVkJ10sIG51bWJlcj5cbiAgcHJpdmF0ZSByYWRpdXNGdW5jOiBFeGNsdWRlPE9zY09wdGlvbnNbJ3JhZGl1cyddLCBudW1iZXIgfCBQb2ludD5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogT3NjT3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zcGVlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5zcGVlZEZ1bmMgPSBvcHRpb25zLnNwZWVkXG4gICAgICB0aGlzLnNwZWVkID0gdGhpcy5zcGVlZEZ1bmMoMClcbiAgICB9IGVsc2UgdGhpcy5zcGVlZCA9IG9wdGlvbnMuc3BlZWQgfHwgTWF0aC5QSSAvIDE4MFxuXG4gICAgaWYgKG9wdGlvbnMucmFkaXVzID09PSB1bmRlZmluZWQpIHRoaXMucmFkaXVzID0gbmV3IFBvaW50KDEsIDEpXG4gICAgZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMucmFkaXVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLnJhZGl1c0Z1bmMgPSBvcHRpb25zLnJhZGl1c1xuICAgICAgY29uc3QgcmFkaXVzID0gdGhpcy5yYWRpdXNGdW5jKDApXG4gICAgICB0aGlzLnJhZGl1cyA9IHR5cGVvZiByYWRpdXMgPT09ICdudW1iZXInID8gbmV3IFBvaW50KHJhZGl1cywgcmFkaXVzKSA6IHJhZGl1c1xuICAgIH0gZWxzZVxuICAgICAgdGhpcy5yYWRpdXMgPVxuICAgICAgICB0eXBlb2Ygb3B0aW9ucy5yYWRpdXMgPT09ICdudW1iZXInID8gbmV3IFBvaW50KG9wdGlvbnMucmFkaXVzLCBvcHRpb25zLnJhZGl1cykgOiBvcHRpb25zLnJhZGl1cy5jbG9uZSgpXG5cbiAgICB0aGlzLm9mZnNldCA9IG9wdGlvbnMub2Zmc2V0ID8gb3B0aW9ucy5vZmZzZXQuY2xvbmUoKSA6IG5ldyBQb2ludCgwLCAwKVxuICAgIHRoaXMub2Zmc2V0UGhhc2UgPSBvcHRpb25zLm9mZnNldFBoYXNlIHx8IDBcbiAgICB0aGlzLnBoYXNlID0gb3B0aW9ucy5waGFzZSB8fCAwXG4gICAgdGhpcy50aGV0YSA9IG5ldyBQb2ludCh0aGlzLnBoYXNlLCB0aGlzLnBoYXNlKVxuICAgIHRoaXMucHJvY2VzcygpXG4gIH1cbiAgcHVibGljIGdldCB4KCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlLnhcbiAgfVxuICBwdWJsaWMgZ2V0IHkoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUueVxuICB9XG4gIHB1YmxpYyByZXNldCgpIHtcbiAgICB0aGlzLnRoZXRhID0gbmV3IFBvaW50KHRoaXMucGhhc2UsIHRoaXMucGhhc2UpXG4gIH1cbiAgcHVibGljIHN0ZXAoaW5jcmVtZW50OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5zcGVlZEZ1bmMpIHtcbiAgICAgIGNvbnN0IHZhbCA9IHRoaXMuc3BlZWRGdW5jKGluY3JlbWVudClcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKSkgdGhpcy5zcGVlZCA9IHZhbFxuICAgIH1cbiAgICBpZiAodGhpcy5yYWRpdXNGdW5jKSB7XG4gICAgICBjb25zdCB2YWwgPSB0aGlzLnJhZGl1c0Z1bmMoaW5jcmVtZW50KVxuICAgICAgdGhpcy5yYWRpdXMgPSB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyA/IG5ldyBQb2ludCh2YWwsIHZhbCkgOiB2YWxcbiAgICB9XG4gICAgdGhpcy50aGV0YS54ID0gdGhpcy50aGV0YS54ICsgdGhpcy5zcGVlZFxuICAgIHRoaXMudGhldGEueSA9IHRoaXMudGhldGEueSArIHRoaXMuc3BlZWRcbiAgICB0aGlzLnByb2Nlc3MoKVxuICB9XG4gIHByaXZhdGUgcHJvY2VzcygpIHtcbiAgICB0aGlzLnZhbHVlLnggPSB0aGlzLm9mZnNldC54ICsgTWF0aC5jb3ModGhpcy5vZmZzZXRQaGFzZSArIHRoaXMudGhldGEueCkgKiB0aGlzLnJhZGl1cy54XG4gICAgdGhpcy52YWx1ZS55ID0gdGhpcy5vZmZzZXQueSArIE1hdGguc2luKHRoaXMub2Zmc2V0UGhhc2UgKyB0aGlzLnRoZXRhLnkpICogdGhpcy5yYWRpdXMueVxuICAgIGlmIChpc05hTih0aGlzLnZhbHVlLngpKSBkZWJ1Z2dlclxuICB9XG59XG4iLCJpbXBvcnQgeyByYW5kSW50UmFuZ2UsIHdyYXAgfSBmcm9tICcuLi8uLi91dGlscy9udW1iZXJVdGlscydcblxubGV0IGNvdW50ZXIgPSAwXG5cbmludGVyZmFjZSBSYW5nZU9wdGlvbnMge1xuICBuYW1lPzogc3RyaW5nXG4gIGluaXRpYWxWYWx1ZT86IG51bWJlclxuICBtaW46IG51bWJlclxuICBtYXg6IG51bWJlclxuICBzdGVwPzogbnVtYmVyXG4gIGRpc2FibGVSYW5kb21pemU/OiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhbmdlIHtcbiAgcHVibGljIG5hbWU6IHN0cmluZ1xuICBwdWJsaWMgbWluOiBudW1iZXJcbiAgcHVibGljIG1heDogbnVtYmVyXG4gIHB1YmxpYyBzdGVwOiBudW1iZXJcbiAgcHVibGljIGlucHV0RWxlbTogSFRNTElucHV0RWxlbWVudFxuICBwcml2YXRlIF92YWx1ZTogbnVtYmVyXG4gIHByaXZhdGUgX2Rpc2FibGVSYW5kb21pemU6IGJvb2xlYW5cblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBSYW5nZU9wdGlvbnMpIHtcbiAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgYFZhci0ke2NvdW50ZXIrK31gXG4gICAgdGhpcy5taW4gPSBvcHRpb25zLm1pblxuICAgIHRoaXMubWF4ID0gb3B0aW9ucy5tYXhcbiAgICB0aGlzLnN0ZXAgPSBvcHRpb25zLnN0ZXAgfHwgMC4wMVxuICAgIHRoaXMuX3ZhbHVlID0gb3B0aW9ucy5pbml0aWFsVmFsdWUgfHwgb3B0aW9ucy5taW5cbiAgICB0aGlzLl9kaXNhYmxlUmFuZG9taXplID0gb3B0aW9ucy5kaXNhYmxlUmFuZG9taXplIHx8IGZhbHNlXG4gIH1cbiAgcHVibGljIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVcbiAgfVxuICBwdWJsaWMgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl92YWx1ZSA9IHdyYXAodmFsdWUsIHRoaXMubWF4LCB0aGlzLm1pbilcbiAgfVxuICBwdWJsaWMgc2V0VmFsdWUodmFsdWU6IG51bWJlciwgdXBkYXRlSW5wdXQ6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgaWYgKHVwZGF0ZUlucHV0KSB0aGlzLmlucHV0RWxlbS52YWx1ZSA9IFN0cmluZyh0aGlzLnZhbHVlKVxuICB9XG4gIHB1YmxpYyByYW5kb21pemUoKSB7XG4gICAgaWYgKHRoaXMuX2Rpc2FibGVSYW5kb21pemUpIHJldHVyblxuICAgIGNvbnN0IHBpZWNlcyA9IE1hdGgucm91bmQoKHRoaXMubWF4IC0gdGhpcy5taW4pIC8gdGhpcy5zdGVwKVxuICAgIGxldCB2YWx1ZSA9IHRoaXMubWluICsgcmFuZEludFJhbmdlKHBpZWNlcykgKiB0aGlzLnN0ZXBcbiAgICBpZiAodGhpcy5zdGVwID49IDEpIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSlcbiAgICB0aGlzLnNldFZhbHVlKHZhbHVlLCB0cnVlKVxuICB9XG59XG4iLCIvKlxuICogU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vam9zZXBoZy9ub2lzZWpzXG4gKlxuICogQSBzcGVlZC1pbXByb3ZlZCBwZXJsaW4gYW5kIHNpbXBsZXggbm9pc2UgYWxnb3JpdGhtcyBmb3IgMkQuXG4gKlxuICogQmFzZWQgb24gZXhhbXBsZSBjb2RlIGJ5IFN0ZWZhbiBHdXN0YXZzb24gKHN0ZWd1QGl0bi5saXUuc2UpLlxuICogT3B0aW1pc2F0aW9ucyBieSBQZXRlciBFYXN0bWFuIChwZWFzdG1hbkBkcml6emxlLnN0YW5mb3JkLmVkdSkuXG4gKiBCZXR0ZXIgcmFuayBvcmRlcmluZyBtZXRob2QgYnkgU3RlZmFuIEd1c3RhdnNvbiBpbiAyMDEyLlxuICogQ29udmVydGVkIHRvIEphdmFzY3JpcHQgYnkgSm9zZXBoIEdlbnRsZS5cbiAqXG4gKiBWZXJzaW9uIDIwMTItMDMtMDlcbiAqXG4gKiBUaGlzIGNvZGUgd2FzIHBsYWNlZCBpbiB0aGUgcHVibGljIGRvbWFpbiBieSBpdHMgb3JpZ2luYWwgYXV0aG9yLFxuICogU3RlZmFuIEd1c3RhdnNvbi4gWW91IG1heSB1c2UgaXQgYXMgeW91IHNlZSBmaXQsIGJ1dFxuICogYXR0cmlidXRpb24gaXMgYXBwcmVjaWF0ZWQuXG4gKlxuICovXG5cbmNsYXNzIEdyYWQge1xuICB4OiBudW1iZXJcbiAgeTogbnVtYmVyXG4gIHo6IG51bWJlclxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKSB7XG4gICAgdGhpcy54ID0geFxuICAgIHRoaXMueSA9IHlcbiAgICB0aGlzLnogPSB6XG4gIH1cbiAgcHVibGljIGRvdDIgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIgPT4gdGhpcy54ICogeCArIHRoaXMueSAqIHlcbiAgcHVibGljIGRvdDMgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcik6IG51bWJlciA9PiB0aGlzLnggKiB4ICsgdGhpcy55ICogeSArIHRoaXMueiAqIHpcbn1cblxuY29uc3QgZ3JhZDMgPSBbXG4gIG5ldyBHcmFkKDEsIDEsIDApLFxuICBuZXcgR3JhZCgtMSwgMSwgMCksXG4gIG5ldyBHcmFkKDEsIC0xLCAwKSxcbiAgbmV3IEdyYWQoLTEsIC0xLCAwKSwgLy8gcHJldHRpZXItaWdub3JlXG4gIG5ldyBHcmFkKDEsIDAsIDEpLFxuICBuZXcgR3JhZCgtMSwgMCwgMSksXG4gIG5ldyBHcmFkKDEsIDAsIC0xKSxcbiAgbmV3IEdyYWQoLTEsIDAsIC0xKSwgLy8gcHJldHRpZXItaWdub3JlXG4gIG5ldyBHcmFkKDAsIDEsIDEpLFxuICBuZXcgR3JhZCgwLCAtMSwgMSksXG4gIG5ldyBHcmFkKDAsIDEsIC0xKSxcbiAgbmV3IEdyYWQoMCwgLTEsIC0xKSwgLy8gcHJldHRpZXItaWdub3JlXG5dXG5cbmNvbnN0IHAgPSBbXG4gIDE1MSwgMTYwLCAxMzcsIDkxLCA5MCwgMTUsIDEzMSwgMTMsIDIwMSwgOTUsIDk2LCA1MywgMTk0LCAyMzMsIDcsIDIyNSwgMTQwLCAzNiwgMTAzLCAzMCwgNjksIDE0MiwgOCwgOTksIDM3LCAyNDAsIDIxLFxuICAxMCwgMjMsIDE5MCwgNiwgMTQ4LCAyNDcsIDEyMCwgMjM0LCA3NSwgMCwgMjYsIDE5NywgNjIsIDk0LCAyNTIsIDIxOSwgMjAzLCAxMTcsIDM1LCAxMSwgMzIsIDU3LCAxNzcsIDMzLCA4OCwgMjM3LCAxNDksXG4gIDU2LCA4NywgMTc0LCAyMCwgMTI1LCAxMzYsIDE3MSwgMTY4LCA2OCwgMTc1LCA3NCwgMTY1LCA3MSwgMTM0LCAxMzksIDQ4LCAyNywgMTY2LCA3NywgMTQ2LCAxNTgsIDIzMSwgODMsIDExMSwgMjI5LFxuICAxMjIsIDYwLCAyMTEsIDEzMywgMjMwLCAyMjAsIDEwNSwgOTIsIDQxLCA1NSwgNDYsIDI0NSwgNDAsIDI0NCwgMTAyLCAxNDMsIDU0LCA2NSwgMjUsIDYzLCAxNjEsIDEsIDIxNiwgODAsIDczLCAyMDksXG4gIDc2LCAxMzIsIDE4NywgMjA4LCA4OSwgMTgsIDE2OSwgMjAwLCAxOTYsIDEzNSwgMTMwLCAxMTYsIDE4OCwgMTU5LCA4NiwgMTY0LCAxMDAsIDEwOSwgMTk4LCAxNzMsIDE4NiwgMywgNjQsIDUyLCAyMTcsXG4gIDIyNiwgMjUwLCAxMjQsIDEyMywgNSwgMjAyLCAzOCwgMTQ3LCAxMTgsIDEyNiwgMjU1LCA4MiwgODUsIDIxMiwgMjA3LCAyMDYsIDU5LCAyMjcsIDQ3LCAxNiwgNTgsIDE3LCAxODIsIDE4OSwgMjgsIDQyLFxuICAyMjMsIDE4MywgMTcwLCAyMTMsIDExOSwgMjQ4LCAxNTIsIDIsIDQ0LCAxNTQsIDE2MywgNzAsIDIyMSwgMTUzLCAxMDEsIDE1NSwgMTY3LCA0MywgMTcyLCA5LCAxMjksIDIyLCAzOSwgMjUzLCAxOSwgOTgsXG4gIDEwOCwgMTEwLCA3OSwgMTEzLCAyMjQsIDIzMiwgMTc4LCAxODUsIDExMiwgMTA0LCAyMTgsIDI0NiwgOTcsIDIyOCwgMjUxLCAzNCwgMjQyLCAxOTMsIDIzOCwgMjEwLCAxNDQsIDEyLCAxOTEsIDE3OSxcbiAgMTYyLCAyNDEsIDgxLCA1MSwgMTQ1LCAyMzUsIDI0OSwgMTQsIDIzOSwgMTA3LCA0OSwgMTkyLCAyMTQsIDMxLCAxODEsIDE5OSwgMTA2LCAxNTcsIDE4NCwgODQsIDIwNCwgMTc2LCAxMTUsIDEyMSwgNTAsXG4gIDQ1LCAxMjcsIDQsIDE1MCwgMjU0LCAxMzgsIDIzNiwgMjA1LCA5MywgMjIyLCAxMTQsIDY3LCAyOSwgMjQsIDcyLCAyNDMsIDE0MSwgMTI4LCAxOTUsIDc4LCA2NiwgMjE1LCA2MSwgMTU2LCAxODAsXG5dXG5cbi8vIFRvIHJlbW92ZSB0aGUgbmVlZCBmb3IgaW5kZXggd3JhcHBpbmcsIGRvdWJsZSB0aGUgcGVybXV0YXRpb24gdGFibGUgbGVuZ3RoXG5jb25zdCBwZXJtID0gbmV3IEFycmF5KDUxMilcbmNvbnN0IGdyYWRQID0gbmV3IEFycmF5KDUxMilcblxuLy8gVGhpcyBpc24ndCBhIHZlcnkgZ29vZCBzZWVkaW5nIGZ1bmN0aW9uLCBidXQgaXQgd29ya3Mgb2suIEl0IHN1cHBvcnRzIDJeMTZcbi8vIGRpZmZlcmVudCBzZWVkIHZhbHVlcy4gV3JpdGUgc29tZXRoaW5nIGJldHRlciBpZiB5b3UgbmVlZCBtb3JlIHNlZWRzLlxuZXhwb3J0IGNvbnN0IHNlZWROb2lzZSA9IChzZWVkOiBudW1iZXIpID0+IHtcbiAgaWYgKHNlZWQgPiAwICYmIHNlZWQgPCAxKSB7XG4gICAgLy8gU2NhbGUgdGhlIHNlZWQgb3V0XG4gICAgc2VlZCAqPSA2NTUzNlxuICB9XG5cbiAgc2VlZCA9IE1hdGguZmxvb3Ioc2VlZClcbiAgaWYgKHNlZWQgPCAyNTYpIHtcbiAgICBzZWVkIHw9IHNlZWQgPDwgOFxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgIGNvbnN0IHYgPSBpICYgMSA/IHBbaV0gXiAoc2VlZCAmIDI1NSkgOiBwW2ldIF4gKChzZWVkID4+IDgpICYgMjU1KVxuICAgIHBlcm1baV0gPSBwZXJtW2kgKyAyNTZdID0gdlxuICAgIGdyYWRQW2ldID0gZ3JhZFBbaSArIDI1Nl0gPSBncmFkM1t2ICUgMTJdXG4gIH1cbn1cblxuc2VlZE5vaXNlKDApXG5cbi8vIFNrZXdpbmcgYW5kIHVuc2tld2luZyBmYWN0b3JzIGZvciAyLCAzLCBhbmQgNCBkaW1lbnNpb25zXG5jb25zdCBGMiA9IDAuNSAqIChNYXRoLnNxcnQoMykgLSAxKVxuY29uc3QgRzIgPSAoMyAtIE1hdGguc3FydCgzKSkgLyA2XG5cbmNvbnN0IEYzID0gMSAvIDNcbmNvbnN0IEczID0gMSAvIDZcblxuLy8gMkQgc2ltcGxleCBub2lzZVxuZXhwb3J0IGNvbnN0IHNpbXBsZXgyID0gKHhJbjogbnVtYmVyLCB5SW46IG51bWJlcikgPT4ge1xuICBsZXQgbjAsIG4xLCBuMiAvLyBOb2lzZSBjb250cmlidXRpb25zIGZyb20gdGhlIHRocmVlIGNvcm5lcnNcblxuICAvLyBTa2V3IHRoZSBpbnB1dCBzcGFjZSB0byBkZXRlcm1pbmUgd2hpY2ggc2ltcGxleCBjZWxsIHdlJ3JlIGluXG4gIGNvbnN0IHMgPSAoeEluICsgeUluKSAqIEYyIC8vIEhhaXJ5IGZhY3RvciBmb3IgMkRcbiAgbGV0IGkgPSBNYXRoLmZsb29yKHhJbiArIHMpXG4gIGxldCBqID0gTWF0aC5mbG9vcih5SW4gKyBzKVxuICBjb25zdCB0ID0gKGkgKyBqKSAqIEcyXG5cbiAgLy8gVGhlIHgseSBkaXN0YW5jZXMgZnJvbSB0aGUgY2VsbCBvcmlnaW4sIHVuc2tld2VkLlxuICBjb25zdCB4MCA9IHhJbiAtIGkgKyB0XG4gIGNvbnN0IHkwID0geUluIC0gaiArIHRcblxuICAvLyBGb3IgdGhlIDJEIGNhc2UsIHRoZSBzaW1wbGV4IHNoYXBlIGlzIGFuIGVxdWlsYXRlcmFsIHRyaWFuZ2xlLlxuICAvLyBEZXRlcm1pbmUgd2hpY2ggc2ltcGxleCB3ZSBhcmUgaW4uXG4gIGxldCBpMSwgajEgLy8gT2Zmc2V0cyBmb3Igc2Vjb25kIChtaWRkbGUpIGNvcm5lciBvZiBzaW1wbGV4IGluIChpLGopIGNvb3Jkc1xuICBpZiAoeDAgPiB5MCkge1xuICAgIC8vIGxvd2VyIHRyaWFuZ2xlLCBYWSBvcmRlcjogKDAsMCktPigxLDApLT4oMSwxKVxuICAgIGkxID0gMVxuICAgIGoxID0gMFxuICB9IGVsc2Uge1xuICAgIC8vIHVwcGVyIHRyaWFuZ2xlLCBZWCBvcmRlcjogKDAsMCktPigwLDEpLT4oMSwxKVxuICAgIGkxID0gMFxuICAgIGoxID0gMVxuICB9XG5cbiAgLy8gQSBzdGVwIG9mICgxLDApIGluIChpLGopIG1lYW5zIGEgc3RlcCBvZiAoMS1jLC1jKSBpbiAoeCx5KSwgYW5kXG4gIC8vIGEgc3RlcCBvZiAoMCwxKSBpbiAoaSxqKSBtZWFucyBhIHN0ZXAgb2YgKC1jLDEtYykgaW4gKHgseSksIHdoZXJlXG4gIC8vIGMgPSAoMy1zcXJ0KDMpKS82XG4gIGNvbnN0IHgxID0geDAgLSBpMSArIEcyIC8vIE9mZnNldHMgZm9yIG1pZGRsZSBjb3JuZXIgaW4gKHgseSkgdW5za2V3ZWQgY29vcmRzXG4gIGNvbnN0IHkxID0geTAgLSBqMSArIEcyXG4gIGNvbnN0IHgyID0geDAgLSAxICsgMiAqIEcyIC8vIE9mZnNldHMgZm9yIGxhc3QgY29ybmVyIGluICh4LHkpIHVuc2tld2VkIGNvb3Jkc1xuICBjb25zdCB5MiA9IHkwIC0gMSArIDIgKiBHMlxuXG4gIC8vIFdvcmsgb3V0IHRoZSBoYXNoZWQgZ3JhZGllbnQgaW5kaWNlcyBvZiB0aGUgdGhyZWUgc2ltcGxleCBjb3JuZXJzXG4gIGkgJj0gMjU1XG4gIGogJj0gMjU1XG4gIGNvbnN0IGdpMCA9IGdyYWRQW2kgKyBwZXJtW2pdXVxuICBjb25zdCBnaTEgPSBncmFkUFtpICsgaTEgKyBwZXJtW2ogKyBqMV1dXG4gIGNvbnN0IGdpMiA9IGdyYWRQW2kgKyAxICsgcGVybVtqICsgMV1dXG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSBjb250cmlidXRpb24gZnJvbSB0aGUgdGhyZWUgY29ybmVyc1xuICBsZXQgdDAgPSAwLjUgLSB4MCAqIHgwIC0geTAgKiB5MFxuICBpZiAodDAgPCAwKSB7XG4gICAgbjAgPSAwXG4gIH0gZWxzZSB7XG4gICAgdDAgKj0gdDBcbiAgICBuMCA9IHQwICogdDAgKiBnaTAuZG90Mih4MCwgeTApIC8vICh4LHkpIG9mIGdyYWQzIHVzZWQgZm9yIDJEIGdyYWRpZW50XG4gIH1cbiAgbGV0IHQxID0gMC41IC0geDEgKiB4MSAtIHkxICogeTFcbiAgaWYgKHQxIDwgMCkge1xuICAgIG4xID0gMFxuICB9IGVsc2Uge1xuICAgIHQxICo9IHQxXG4gICAgbjEgPSB0MSAqIHQxICogZ2kxLmRvdDIoeDEsIHkxKVxuICB9XG4gIGxldCB0MiA9IDAuNSAtIHgyICogeDIgLSB5MiAqIHkyXG4gIGlmICh0MiA8IDApIHtcbiAgICBuMiA9IDBcbiAgfSBlbHNlIHtcbiAgICB0MiAqPSB0MlxuICAgIG4yID0gdDIgKiB0MiAqIGdpMi5kb3QyKHgyLCB5MilcbiAgfVxuXG4gIC8vIEFkZCBjb250cmlidXRpb25zIGZyb20gZWFjaCBjb3JuZXIgdG8gZ2V0IHRoZSBmaW5hbCBub2lzZSB2YWx1ZS5cbiAgLy8gVGhlIHJlc3VsdCBpcyBzY2FsZWQgdG8gcmV0dXJuIHZhbHVlcyBpbiB0aGUgaW50ZXJ2YWwgWy0xLDFdLlxuICByZXR1cm4gNzAgKiAobjAgKyBuMSArIG4yKVxufVxuXG4vLyAzRCBzaW1wbGV4IG5vaXNlXG4vKlxuICAgIG1vZHVsZS5zaW1wbGV4MyA9IGZ1bmN0aW9uKHhpbiwgeWluLCB6aW4pIHtcbiAgICB2YXIgbjAsIG4xLCBuMiwgbjM7IC8vIE5vaXNlIGNvbnRyaWJ1dGlvbnMgZnJvbSB0aGUgZm91ciBjb3JuZXJzXG5cbiAgICAvLyBTa2V3IHRoZSBpbnB1dCBzcGFjZSB0byBkZXRlcm1pbmUgd2hpY2ggc2ltcGxleCBjZWxsIHdlJ3JlIGluXG4gICAgdmFyIHMgPSAoeGluK3lpbit6aW4pKkYzOyAvLyBIYWlyeSBmYWN0b3IgZm9yIDJEXG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKHhpbitzKTtcbiAgICB2YXIgaiA9IE1hdGguZmxvb3IoeWluK3MpO1xuICAgIHZhciBrID0gTWF0aC5mbG9vcih6aW4rcyk7XG5cbiAgICB2YXIgdCA9IChpK2oraykqRzM7XG4gICAgdmFyIHgwID0geGluLWkrdDsgLy8gVGhlIHgseSBkaXN0YW5jZXMgZnJvbSB0aGUgY2VsbCBvcmlnaW4sIHVuc2tld2VkLlxuICAgIHZhciB5MCA9IHlpbi1qK3Q7XG4gICAgdmFyIHowID0gemluLWsrdDtcblxuICAgIC8vIEZvciB0aGUgM0QgY2FzZSwgdGhlIHNpbXBsZXggc2hhcGUgaXMgYSBzbGlnaHRseSBpcnJlZ3VsYXIgdGV0cmFoZWRyb24uXG4gICAgLy8gRGV0ZXJtaW5lIHdoaWNoIHNpbXBsZXggd2UgYXJlIGluLlxuICAgIHZhciBpMSwgajEsIGsxOyAvLyBPZmZzZXRzIGZvciBzZWNvbmQgY29ybmVyIG9mIHNpbXBsZXggaW4gKGksaixrKSBjb29yZHNcbiAgICB2YXIgaTIsIGoyLCBrMjsgLy8gT2Zmc2V0cyBmb3IgdGhpcmQgY29ybmVyIG9mIHNpbXBsZXggaW4gKGksaixrKSBjb29yZHNcbiAgICBpZih4MCA+PSB5MCkge1xuICAgICAgaWYoeTAgPj0gejApICAgICAgeyBpMT0xOyBqMT0wOyBrMT0wOyBpMj0xOyBqMj0xOyBrMj0wOyB9XG4gICAgICBlbHNlIGlmKHgwID49IHowKSB7IGkxPTE7IGoxPTA7IGsxPTA7IGkyPTE7IGoyPTA7IGsyPTE7IH1cbiAgICAgIGVsc2UgICAgICAgICAgICAgIHsgaTE9MDsgajE9MDsgazE9MTsgaTI9MTsgajI9MDsgazI9MTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZih5MCA8IHowKSAgICAgIHsgaTE9MDsgajE9MDsgazE9MTsgaTI9MDsgajI9MTsgazI9MTsgfVxuICAgICAgZWxzZSBpZih4MCA8IHowKSB7IGkxPTA7IGoxPTE7IGsxPTA7IGkyPTA7IGoyPTE7IGsyPTE7IH1cbiAgICAgIGVsc2UgICAgICAgICAgICAgeyBpMT0wOyBqMT0xOyBrMT0wOyBpMj0xOyBqMj0xOyBrMj0wOyB9XG4gICAgfVxuICAgIC8vIEEgc3RlcCBvZiAoMSwwLDApIGluIChpLGosaykgbWVhbnMgYSBzdGVwIG9mICgxLWMsLWMsLWMpIGluICh4LHkseiksXG4gICAgLy8gYSBzdGVwIG9mICgwLDEsMCkgaW4gKGksaixrKSBtZWFucyBhIHN0ZXAgb2YgKC1jLDEtYywtYykgaW4gKHgseSx6KSwgYW5kXG4gICAgLy8gYSBzdGVwIG9mICgwLDAsMSkgaW4gKGksaixrKSBtZWFucyBhIHN0ZXAgb2YgKC1jLC1jLDEtYykgaW4gKHgseSx6KSwgd2hlcmVcbiAgICAvLyBjID0gMS82LlxuICAgIHZhciB4MSA9IHgwIC0gaTEgKyBHMzsgLy8gT2Zmc2V0cyBmb3Igc2Vjb25kIGNvcm5lclxuICAgIHZhciB5MSA9IHkwIC0gajEgKyBHMztcbiAgICB2YXIgejEgPSB6MCAtIGsxICsgRzM7XG5cbiAgICB2YXIgeDIgPSB4MCAtIGkyICsgMiAqIEczOyAvLyBPZmZzZXRzIGZvciB0aGlyZCBjb3JuZXJcbiAgICB2YXIgeTIgPSB5MCAtIGoyICsgMiAqIEczO1xuICAgIHZhciB6MiA9IHowIC0gazIgKyAyICogRzM7XG5cbiAgICB2YXIgeDMgPSB4MCAtIDEgKyAzICogRzM7IC8vIE9mZnNldHMgZm9yIGZvdXJ0aCBjb3JuZXJcbiAgICB2YXIgeTMgPSB5MCAtIDEgKyAzICogRzM7XG4gICAgdmFyIHozID0gejAgLSAxICsgMyAqIEczO1xuXG4gICAgLy8gV29yayBvdXQgdGhlIGhhc2hlZCBncmFkaWVudCBpbmRpY2VzIG9mIHRoZSBmb3VyIHNpbXBsZXggY29ybmVyc1xuICAgIGkgJj0gMjU1O1xuICAgIGogJj0gMjU1O1xuICAgIGsgJj0gMjU1O1xuICAgIHZhciBnaTAgPSBncmFkUFtpKyAgIHBlcm1baisgICBwZXJtW2sgICBdXV07XG4gICAgdmFyIGdpMSA9IGdyYWRQW2kraTErcGVybVtqK2oxK3Blcm1baytrMV1dXTtcbiAgICB2YXIgZ2kyID0gZ3JhZFBbaStpMitwZXJtW2orajIrcGVybVtrK2syXV1dO1xuICAgIHZhciBnaTMgPSBncmFkUFtpKyAxK3Blcm1baisgMStwZXJtW2srIDFdXV07XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGNvbnRyaWJ1dGlvbiBmcm9tIHRoZSBmb3VyIGNvcm5lcnNcbiAgICB2YXIgdDAgPSAwLjYgLSB4MCp4MCAtIHkwKnkwIC0gejAqejA7XG4gICAgaWYodDA8MCkge1xuICAgICAgbjAgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0MCAqPSB0MDtcbiAgICAgIG4wID0gdDAgKiB0MCAqIGdpMC5kb3QzKHgwLCB5MCwgejApOyAgLy8gKHgseSkgb2YgZ3JhZDMgdXNlZCBmb3IgMkQgZ3JhZGllbnRcbiAgICB9XG4gICAgdmFyIHQxID0gMC42IC0geDEqeDEgLSB5MSp5MSAtIHoxKnoxO1xuICAgIGlmKHQxPDApIHtcbiAgICAgIG4xID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDEgKj0gdDE7XG4gICAgICBuMSA9IHQxICogdDEgKiBnaTEuZG90Myh4MSwgeTEsIHoxKTtcbiAgICB9XG4gICAgdmFyIHQyID0gMC42IC0geDIqeDIgLSB5Mip5MiAtIHoyKnoyO1xuICAgIGlmKHQyPDApIHtcbiAgICAgIG4yID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDIgKj0gdDI7XG4gICAgICBuMiA9IHQyICogdDIgKiBnaTIuZG90Myh4MiwgeTIsIHoyKTtcbiAgICB9XG4gICAgdmFyIHQzID0gMC42IC0geDMqeDMgLSB5Myp5MyAtIHozKnozO1xuICAgIGlmKHQzPDApIHtcbiAgICAgIG4zID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDMgKj0gdDM7XG4gICAgICBuMyA9IHQzICogdDMgKiBnaTMuZG90Myh4MywgeTMsIHozKTtcbiAgICB9XG4gICAgLy8gQWRkIGNvbnRyaWJ1dGlvbnMgZnJvbSBlYWNoIGNvcm5lciB0byBnZXQgdGhlIGZpbmFsIG5vaXNlIHZhbHVlLlxuICAgIC8vIFRoZSByZXN1bHQgaXMgc2NhbGVkIHRvIHJldHVybiB2YWx1ZXMgaW4gdGhlIGludGVydmFsIFstMSwxXS5cbiAgICByZXR1cm4gMzIgKiAobjAgKyBuMSArIG4yICsgbjMpO1xuXG4gIH07XG4gICovXG5cbi8vICMjIyMjIFBlcmxpbiBub2lzZSBzdHVmZlxuXG5jb25zdCBmYWRlID0gKHQ6IG51bWJlcikgPT4gdCAqIHQgKiB0ICogKHQgKiAodCAqIDYgLSAxNSkgKyAxMClcbmNvbnN0IGxlcnAgPSAoYTogbnVtYmVyLCBiOiBudW1iZXIsIHQ6IG51bWJlcikgPT4gKDEgLSB0KSAqIGEgKyB0ICogYlxuXG4vLyAyRCBQZXJsaW4gTm9pc2VcbmV4cG9ydCBjb25zdCBwZXJsaW4yID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB7XG4gIC8vIEZpbmQgdW5pdCBncmlkIGNlbGwgY29udGFpbmluZyBwb2ludFxuICBsZXQgWCA9IE1hdGguZmxvb3IoeClcbiAgbGV0IFkgPSBNYXRoLmZsb29yKHkpXG5cbiAgLy8gR2V0IHJlbGF0aXZlIHh5IGNvb3JkaW5hdGVzIG9mIHBvaW50IHdpdGhpbiB0aGF0IGNlbGxcbiAgeCA9IHggLSBYXG4gIHkgPSB5IC0gWVxuXG4gIC8vIFdyYXAgdGhlIGludGVnZXIgY2VsbHMgYXQgMjU1IChzbWFsbGVyIGludGVnZXIgcGVyaW9kIGNhbiBiZSBpbnRyb2R1Y2VkIGhlcmUpXG4gIFggPSBYICYgMjU1XG4gIFkgPSBZICYgMjU1XG5cbiAgLy8gQ2FsY3VsYXRlIG5vaXNlIGNvbnRyaWJ1dGlvbnMgZnJvbSBlYWNoIG9mIHRoZSBmb3VyIGNvcm5lcnNcbiAgY29uc3QgbjAwID0gZ3JhZFBbWCArIHBlcm1bWV1dLmRvdDIoeCwgeSlcbiAgY29uc3QgbjAxID0gZ3JhZFBbWCArIHBlcm1bWSArIDFdXS5kb3QyKHgsIHkgLSAxKVxuICBjb25zdCBuMTAgPSBncmFkUFtYICsgMSArIHBlcm1bWV1dLmRvdDIoeCAtIDEsIHkpXG4gIGNvbnN0IG4xMSA9IGdyYWRQW1ggKyAxICsgcGVybVtZICsgMV1dLmRvdDIoeCAtIDEsIHkgLSAxKVxuXG4gIC8vIENvbXB1dGUgdGhlIGZhZGUgY3VydmUgdmFsdWUgZm9yIHhcbiAgY29uc3QgdSA9IGZhZGUoeClcblxuICAvLyBJbnRlcnBvbGF0ZSB0aGUgZm91ciByZXN1bHRzXG4gIHJldHVybiBsZXJwKGxlcnAobjAwLCBuMTAsIHUpLCBsZXJwKG4wMSwgbjExLCB1KSwgZmFkZSh5KSlcbn1cblxuLy8gM0QgUGVybGluIE5vaXNlXG4vKlxuICBtb2R1bGUucGVybGluMyA9IGZ1bmN0aW9uKHgsIHksIHopIHtcbiAgICAvLyBGaW5kIHVuaXQgZ3JpZCBjZWxsIGNvbnRhaW5pbmcgcG9pbnRcbiAgICB2YXIgWCA9IE1hdGguZmxvb3IoeCksIFkgPSBNYXRoLmZsb29yKHkpLCBaID0gTWF0aC5mbG9vcih6KTtcbiAgICAvLyBHZXQgcmVsYXRpdmUgeHl6IGNvb3JkaW5hdGVzIG9mIHBvaW50IHdpdGhpbiB0aGF0IGNlbGxcbiAgICB4ID0geCAtIFg7IHkgPSB5IC0gWTsgeiA9IHogLSBaO1xuICAgIC8vIFdyYXAgdGhlIGludGVnZXIgY2VsbHMgYXQgMjU1IChzbWFsbGVyIGludGVnZXIgcGVyaW9kIGNhbiBiZSBpbnRyb2R1Y2VkIGhlcmUpXG4gICAgWCA9IFggJiAyNTU7IFkgPSBZICYgMjU1OyBaID0gWiAmIDI1NTtcblxuICAgIC8vIENhbGN1bGF0ZSBub2lzZSBjb250cmlidXRpb25zIGZyb20gZWFjaCBvZiB0aGUgZWlnaHQgY29ybmVyc1xuICAgIHZhciBuMDAwID0gZ3JhZFBbWCsgIHBlcm1bWSsgIHBlcm1bWiAgXV1dLmRvdDMoeCwgICB5LCAgICAgeik7XG4gICAgdmFyIG4wMDEgPSBncmFkUFtYKyAgcGVybVtZKyAgcGVybVtaKzFdXV0uZG90Myh4LCAgIHksICAgei0xKTtcbiAgICB2YXIgbjAxMCA9IGdyYWRQW1grICBwZXJtW1krMStwZXJtW1ogIF1dXS5kb3QzKHgsICAgeS0xLCAgIHopO1xuICAgIHZhciBuMDExID0gZ3JhZFBbWCsgIHBlcm1bWSsxK3Blcm1bWisxXV1dLmRvdDMoeCwgICB5LTEsIHotMSk7XG4gICAgdmFyIG4xMDAgPSBncmFkUFtYKzErcGVybVtZKyAgcGVybVtaICBdXV0uZG90Myh4LTEsICAgeSwgICB6KTtcbiAgICB2YXIgbjEwMSA9IGdyYWRQW1grMStwZXJtW1krICBwZXJtW1orMV1dXS5kb3QzKHgtMSwgICB5LCB6LTEpO1xuICAgIHZhciBuMTEwID0gZ3JhZFBbWCsxK3Blcm1bWSsxK3Blcm1bWiAgXV1dLmRvdDMoeC0xLCB5LTEsICAgeik7XG4gICAgdmFyIG4xMTEgPSBncmFkUFtYKzErcGVybVtZKzErcGVybVtaKzFdXV0uZG90Myh4LTEsIHktMSwgei0xKTtcblxuICAgIC8vIENvbXB1dGUgdGhlIGZhZGUgY3VydmUgdmFsdWUgZm9yIHgsIHksIHpcbiAgICB2YXIgdSA9IGZhZGUoeCk7XG4gICAgdmFyIHYgPSBmYWRlKHkpO1xuICAgIHZhciB3ID0gZmFkZSh6KTtcblxuICAgIC8vIEludGVycG9sYXRlXG4gICAgcmV0dXJuIGxlcnAoXG4gICAgICAgIGxlcnAoXG4gICAgICAgICAgbGVycChuMDAwLCBuMTAwLCB1KSxcbiAgICAgICAgICBsZXJwKG4wMDEsIG4xMDEsIHUpLCB3KSxcbiAgICAgICAgbGVycChcbiAgICAgICAgICBsZXJwKG4wMTAsIG4xMTAsIHUpLFxuICAgICAgICAgIGxlcnAobjAxMSwgbjExMSwgdSksIHcpLFxuICAgICAgIHYpO1xuICB9O1xuICAqL1xuIiwiaW1wb3J0IHsgcmFuZG9tIH0gZnJvbSAnLi9yYW5kb20nXG5cbmV4cG9ydCBjb25zdCByYW5kSW50UmFuZ2UgPSAobWF4OiBudW1iZXIsIG1pbjogbnVtYmVyID0gMCk6IG51bWJlciA9PiBNYXRoLnJvdW5kKHJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW4pXG5leHBvcnQgY29uc3QgcmFuZEZsb2F0UmFuZ2UgPSAobWF4OiBudW1iZXIsIG1pbjogbnVtYmVyID0gMCk6IG51bWJlciA9PiByYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluXG5leHBvcnQgY29uc3QgcmFuZEludCA9IChyYW5nZTogbnVtYmVyKTogbnVtYmVyID0+IE1hdGgucm91bmQocmFuZG9tKCkgKiAocmFuZ2UgKiAyKSAtIHJhbmdlKVxuZXhwb3J0IGNvbnN0IHJhbmRGbG9hdCA9IChyYW5nZTogbnVtYmVyKTogbnVtYmVyID0+IHJhbmRvbSgpICogKHJhbmdlICogMikgLSByYW5nZVxuZXhwb3J0IGNvbnN0IHdyYXAgPSAodmFsdWU6IG51bWJlciwgbWF4OiBudW1iZXIsIG1pbjogbnVtYmVyID0gMCk6IG51bWJlciA9PlxuICB2YWx1ZSA8IG1pbiA/IG1heCA6IHZhbHVlID4gbWF4ID8gbWluIDogdmFsdWVcblxuZXhwb3J0IGNvbnN0IGNvdW50RGVjaW1hbHMgPSAobnVtYmVyOiBudW1iZXIsIG1vc3Q6IG51bWJlciA9IDgpOiBudW1iZXIgPT4ge1xuICBmb3IgKGxldCBuID0gMSwgY291bnQgPSAwOyBjb3VudCA8IG1vc3Q7IGNvdW50KyssIG4gLz0gMTApIHtcbiAgICBpZiAobnVtYmVyICUgbiA9PT0gMCkgcmV0dXJuIGNvdW50XG4gIH1cbiAgcmV0dXJuIG1vc3Rcbn1cblxuZXhwb3J0IGNvbnN0IGZsb2F0U3RyaW5nID0gKG51bWJlcjogbnVtYmVyLCBkZWNpbWFsczogbnVtYmVyID0gNSk6IHN0cmluZyA9PiB7XG4gIGlmIChudW1iZXIgJSAxID09PSAwKSByZXR1cm4gU3RyaW5nKG51bWJlcilcbiAgY29uc3QgZGVjaW1hbHNDb3VudCA9IE1hdGgubWluKGNvdW50RGVjaW1hbHMobnVtYmVyLCBkZWNpbWFscyksIGRlY2ltYWxzKVxuICByZXR1cm4gZGVjaW1hbHNDb3VudCA9PT0gMCA/IFN0cmluZyhNYXRoLnJvdW5kKG51bWJlcikpIDogbnVtYmVyLnRvRml4ZWQoZGVjaW1hbHNDb3VudClcbn1cblxuLy8gbm9ybWFsaXplcyBhbnkgYW5nbGUgdG8gYmUgYmV0d2VlbiAtUEkgYW5kIFBJXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplUmFkaWFuID0gKHJhZGlhbjogbnVtYmVyKTogbnVtYmVyID0+ICgocmFkaWFuICsgTWF0aC5QSSkgJSAoTWF0aC5QSSAqIDIpKSAtIE1hdGguUElcblxuZXhwb3J0IGNvbnN0IHNlZ21lbnRWYWx1ZSA9IChzZWdtZW50czogbnVtYmVyLCB0b3RhbFNlZ21lbnRzOiBudW1iZXIsIG1heDogbnVtYmVyLCBtaW46IG51bWJlciA9IDApOiBudW1iZXIgPT5cbiAgKChtYXggLSBtaW4pIC8gdG90YWxTZWdtZW50cykgKiBzZWdtZW50c1xuIiwiaW1wb3J0IFBvaW50IGZyb20gJy4uL1BvaW50J1xuXG5leHBvcnQgY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxXG5cbi8vIENvbnZlcnQgc3RhcnQrZW5kIGFuZ2xlIGFyYyB0byBzdGFydC9lbmQgcG9pbnRzLlxuZXhwb3J0IGNvbnN0IGFyY1RvUG9pbnRzID0gKHg6IG51bWJlciwgeTogbnVtYmVyLCBhU3RhcnQ6IG51bWJlciwgYUVuZDogbnVtYmVyLCByYWRpdXM6IG51bWJlcikgPT4ge1xuICBhU3RhcnQgPSBhU3RhcnQgJSAoTWF0aC5QSSAqIDIpXG4gIGFFbmQgPSBhRW5kICUgKE1hdGguUEkgKiAyKVxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBuZXcgUG9pbnQocmFkaXVzICogTWF0aC5jb3MoYVN0YXJ0KSArIHgsIHJhZGl1cyAqIE1hdGguc2luKGFTdGFydCkgKyB5KSxcbiAgICBlbmQ6IG5ldyBQb2ludChyYWRpdXMgKiBNYXRoLmNvcyhhRW5kKSArIHgsIHJhZGl1cyAqIE1hdGguc2luKGFFbmQpICsgeSksXG4gIH1cbn1cblxuLy8gQ29udmVydCBzdGFydC9lbmQvY2VudGVyIHBvaW50IGFyYyB0byBzdGFydC9lbmQgYW5nbGUgYXJjLlxuZXhwb3J0IGNvbnN0IHBvaW50c1RvQXJjID0gKGNlbnRlcjogUG9pbnQsIHN0YXJ0OiBQb2ludCwgZW5kOiBQb2ludCkgPT4ge1xuICBjZW50ZXIgPSBjZW50ZXIuY2xvbmUoKVxuICBzdGFydCA9IHN0YXJ0LmNsb25lKClcbiAgZW5kID0gZW5kLmNsb25lKClcblxuICBjb25zdCBhU3RhcnQgPSBNYXRoLmF0YW4yKHN0YXJ0LnkgLSBjZW50ZXIueSwgc3RhcnQueCAtIGNlbnRlci54KVxuICBsZXQgYUVuZCA9IE1hdGguYXRhbjIoZW5kLnkgLSBjZW50ZXIueSwgZW5kLnggLSBjZW50ZXIueClcbiAgY29uc3QgcmFkaXVzID0gY2VudGVyLnN1YnRyYWN0KHN0YXJ0KS5tYWduaXR1ZGUoKVxuXG4gIC8vIEFsd2F5cyBhc3N1bWUgYSBmdWxsIGNpcmNsZSBpZiB0aGV5IGFyZSB0aGUgc2FtZVxuICAvLyBIYW5kbGluZyBvZiAwLDAgb3B0aW1pemVkIGluIHRoZSB1c2FnZVxuICBpZiAoYUVuZCA9PT0gYVN0YXJ0KSBhRW5kICs9IE1hdGguUEkgKiAyXG5cbiAgcmV0dXJuIHsgc3RhcnQ6IGFTdGFydCwgZW5kOiBhRW5kLCByYWRpdXMgfVxufVxuXG4vKipcbiAqIEdpdmVuIGFuIGFuZ2xlIGluIHJhZGlhbnMsIHdpbGwgcmV0dXJuIGFuIGVxdWl2YWxlbnQgYW5nbGUgYmV0d2VlbiBbLXBpLCBwaV1cbiAqIFdlIGhhdmUgdG8gd29yayBhcm91bmQgSmF2YXNjcmlwdCdzIFNUVVBJRCBtb2R1bG8gYnVnOiAtMiAlIDMgaXMgbm90IC0yLCBpdCBpcyAxLlxuICogVGhhdCdzIHdoeSB3ZSdyZSBjYWxsaW5nIG1vZHVsbyB0d2ljZS5cbiAqKi9cbmV4cG9ydCBjb25zdCBub3JtYWxpemVBbmdsZSA9IChhbmdsZTogbnVtYmVyKTogbnVtYmVyID0+XG4gICgoKChhbmdsZSArIE1hdGguUEkpICUgKDIgKiBNYXRoLlBJKSkgKyAyICogTWF0aC5QSSkgJSAoMiAqIE1hdGguUEkpKSAtIE1hdGguUElcblxuZXhwb3J0IGNvbnN0IHNhbWVGbG9hdCA9IChhOiBudW1iZXIsIGI6IG51bWJlciwgZXBzaWxvbiA9IEVQU0lMT04pOiBib29sZWFuID0+IHtcbiAgaWYgKE1hdGguYWJzKGEgLSBiKSA8IEVQU0lMT04pIHJldHVybiB0cnVlXG5cbiAgY29uc3QgYWJzQSA9IE1hdGguYWJzKGEpXG4gIGNvbnN0IGFic0IgPSBNYXRoLmFicyhiKVxuICBjb25zdCBkaWZmID0gTWF0aC5hYnMoYSAtIGIpXG5cbiAgLy8gc2hvcnRjdXQsIGhhbmRsZXMgaW5maW5pdGllc1xuICBpZiAoYSA9PSBiKSByZXR1cm4gdHJ1ZVxuXG4gIC8vIGEgb3IgYiBpcyB6ZXJvIG9yIGJvdGggYXJlIGV4dHJlbWVseSBjbG9zZSB0byBpdFxuICAvLyByZWxhdGl2ZSBlcnJvciBpcyBsZXNzIG1lYW5pbmdmdWwgaGVyZVxuICBpZiAoYSA9PT0gMCB8fCBiID09PSAwIHx8IGRpZmYgPCBOdW1iZXIuTUlOX1ZBTFVFKSByZXR1cm4gZGlmZiA8IGVwc2lsb24gKiBOdW1iZXIuTUlOX1ZBTFVFXG5cbiAgLy8gdXNlIHJlbGF0aXZlIGVycm9yXG4gIHJldHVybiBkaWZmIC8gKGFic0EgKyBhYnNCKSA8IGVwc2lsb25cbn1cblxuZXhwb3J0IGNvbnN0IHNhbWVQb3MgPSAoYTogUG9pbnQsIGI6IFBvaW50KTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiBzYW1lRmxvYXQoYS54LCBiLngpICYmIHNhbWVGbG9hdChhLnksIGIueSkgLy8gJiYgc2FtZUZsb2F0KGEueiwgYi56KSAmJiBzYW1lRmxvYXQoYS5hLCBiLmEpXG59XG4iLCIvLyBUYWtlbiBmcm9tIGhlcmU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xOTMwMTMwNlxuXG5sZXQgbV93ID0gMTIzNDU2Nzg5XG5sZXQgbV96ID0gOTg3NjU0MzIxXG5jb25zdCBtYXNrID0gMHhmZmZmZmZmZlxuXG4vLyBUYWtlcyBhbnkgaW50ZWdlclxuZXhwb3J0IGNvbnN0IHNlZWRSYW5kb20gPSAoaW50ZWdlcjogbnVtYmVyKSA9PiB7XG4gIG1fdyA9ICgxMjM0NTY3ODkgKyBpbnRlZ2VyKSAmIG1hc2tcbiAgbV96ID0gKDk4NzY1NDMyMSAtIGludGVnZXIpICYgbWFza1xufVxuXG4vLyBSZXR1cm5zIG51bWJlciBiZXR3ZWVuIDAgKGluY2x1c2l2ZSkgYW5kIDEuMCAoZXhjbHVzaXZlKSxcbi8vIGp1c3QgbGlrZSBNYXRoLnJhbmRvbSgpLlxuZXhwb3J0IGNvbnN0IHJhbmRvbSA9ICgpID0+IHtcbiAgbV96ID0gKDM2OTY5ICogKG1feiAmIDY1NTM1KSArIChtX3ogPj4gMTYpKSAmIG1hc2tcbiAgbV93ID0gKDE4MDAwICogKG1fdyAmIDY1NTM1KSArIChtX3cgPj4gMTYpKSAmIG1hc2tcbiAgY29uc3QgcmVzdWx0ID0gKChtX3ogPDwgMTYpICsgKG1fdyAmIDY1NTM1KSkgPj4+IDBcbiAgcmV0dXJuIHJlc3VsdCAvIDQyOTQ5NjcyOTZcbn1cblxuc2VlZFJhbmRvbSgwKVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4yMSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nLFxuICAgICAgSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCA9ICdJbnZhbGlkIGB2YXJpYWJsZWAgb3B0aW9uIHBhc3NlZCBpbnRvIGBfLnRlbXBsYXRlYCc7XG5cbiAgLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xuICB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xuICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xuICB2YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xuICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNhdGVgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG4gIHZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxhenkgaXRlcmF0ZWVzLiAqL1xuICB2YXIgTEFaWV9GSUxURVJfRkxBRyA9IDEsXG4gICAgICBMQVpZX01BUF9GTEFHID0gMixcbiAgICAgIExBWllfV0hJTEVfRkxBRyA9IDM7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG4gIHZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgICAgTkFOID0gMCAvIDA7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgdmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gIC8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG4gIHZhciB3cmFwRmxhZ3MgPSBbXG4gICAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gICAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICAgIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gICAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gICAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbiAgXTtcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nLFxuICAgICAgd2Vha1NldFRhZyA9ICdbb2JqZWN0IFdlYWtTZXRdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICAgKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAgICovXG4gIHZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgICByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGEgc2luZ2xlIHdoaXRlc3BhY2UgY2hhcmFjdGVyLiAqL1xuICB2YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKipcbiAgICogVXNlZCB0byB2YWxpZGF0ZSB0aGUgYHZhbGlkYXRlYCBvcHRpb24gaW4gYF8udGVtcGxhdGVgIHZhcmlhYmxlLlxuICAgKlxuICAgKiBGb3JiaWRzIGNoYXJhY3RlcnMgd2hpY2ggY291bGQgcG90ZW50aWFsbHkgY2hhbmdlIHRoZSBtZWFuaW5nIG9mIHRoZSBmdW5jdGlvbiBhcmd1bWVudCBkZWZpbml0aW9uOlxuICAgKiAtIFwiKCksXCIgKG1vZGlmaWNhdGlvbiBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzKVxuICAgKiAtIFwiPVwiIChkZWZhdWx0IHZhbHVlKVxuICAgKiAtIFwiW117fVwiIChkZXN0cnVjdHVyaW5nIG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMpXG4gICAqIC0gXCIvXCIgKGJlZ2lubmluZyBvZiBhIGNvbW1lbnQpXG4gICAqIC0gd2hpdGVzcGFjZVxuICAgKi9cbiAgdmFyIHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzID0gL1soKT0se31cXFtcXF1cXC9cXHNdLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udHJpbWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB0cmltLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUcmltKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmdcbiAgICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgICA6IHN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gICAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICAgKiBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1TdGFydGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNvdW50LlxuICAgKi9cbiAgZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IDA7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChhcnJheVtsZW5ndGhdID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICArK3Jlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAgICovXG4gIHZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gICAgdmFyIGRhdGEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gICAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZWlyIGluZGV4ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHJlcGxhY2UuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlSG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFt2YWx1ZSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmxhc3RJbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCArIDE7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBzeW1ib2xzIGluIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgICAgOiBhc2NpaVNpemUoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICAgKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyaW5nLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy51bmVzY2FwZWAgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIHVuZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sVW5lc2NhcGVzKTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgKytyZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB1c2luZyB0aGUgYGNvbnRleHRgIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMS4xLjBcbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLm1peGluKHsgJ2Zvbyc6IF8uY29uc3RhbnQoJ2ZvbycpIH0pO1xuICAgKlxuICAgKiB2YXIgbG9kYXNoID0gXy5ydW5JbkNvbnRleHQoKTtcbiAgICogbG9kYXNoLm1peGluKHsgJ2Jhcic6IGxvZGFzaC5jb25zdGFudCgnYmFyJykgfSk7XG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfLmZvbyk7XG4gICAqIC8vID0+IHRydWVcbiAgICogXy5pc0Z1bmN0aW9uKF8uYmFyKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmZvbyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5iYXIpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIC8vIENyZWF0ZSBhIHN1cGVkLXVwIGBkZWZlcmAgaW4gTm9kZS5qcy5cbiAgICogdmFyIGRlZmVyID0gXy5ydW5JbkNvbnRleHQoeyAnc2V0VGltZW91dCc6IHNldEltbWVkaWF0ZSB9KS5kZWZlcjtcbiAgICovXG4gIHZhciBydW5JbkNvbnRleHQgPSAoZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gY29udGV4dCA9PSBudWxsID8gcm9vdCA6IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpO1xuXG4gICAgLyoqIEJ1aWx0LWluIGNvbnN0cnVjdG9yIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHQuRGF0ZSxcbiAgICAgICAgRXJyb3IgPSBjb250ZXh0LkVycm9yLFxuICAgICAgICBGdW5jdGlvbiA9IGNvbnRleHQuRnVuY3Rpb24sXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LFxuICAgICAgICBSZWdFeHAgPSBjb250ZXh0LlJlZ0V4cCxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yO1xuXG4gICAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbiAgICB2YXIgY29yZUpzRGF0YSA9IGNvbnRleHRbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xuICAgIHZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG4gICAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xuICAgIHZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgICAgIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byByZXNvbHZlIHRoZVxuICAgICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgICAqIG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbiAgICB2YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBfLm5vQ29uZmxpY3RgLiAqL1xuICAgIHZhciBvbGREYXNoID0gcm9vdC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbiAgICB2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IGNvbnRleHQuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBTeW1ib2wgPSBjb250ZXh0LlN5bWJvbCxcbiAgICAgICAgVWludDhBcnJheSA9IGNvbnRleHQuVWludDhBcnJheSxcbiAgICAgICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQsXG4gICAgICAgIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpLFxuICAgICAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICAgICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bUl0ZXJhdG9yID0gU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9KCkpO1xuXG4gICAgLyoqIE1vY2tlZCBidWlsdC1pbnMuICovXG4gICAgdmFyIGN0eENsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0ICE9PSByb290LmNsZWFyVGltZW91dCAmJiBjb250ZXh0LmNsZWFyVGltZW91dCxcbiAgICAgICAgY3R4Tm93ID0gRGF0ZSAmJiBEYXRlLm5vdyAhPT0gcm9vdC5EYXRlLm5vdyAmJiBEYXRlLm5vdyxcbiAgICAgICAgY3R4U2V0VGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dCAhPT0gcm9vdC5zZXRUaW1lb3V0ICYmIGNvbnRleHQuc2V0VGltZW91dDtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbiAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICAgICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSxcbiAgICAgICAgbmF0aXZlSm9pbiA9IGFycmF5UHJvdG8uam9pbixcbiAgICAgICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlTm93ID0gRGF0ZS5ub3csXG4gICAgICAgIG5hdGl2ZVBhcnNlSW50ID0gY29udGV4dC5wYXJzZUludCxcbiAgICAgICAgbmF0aXZlUmFuZG9tID0gTWF0aC5yYW5kb20sXG4gICAgICAgIG5hdGl2ZVJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG4gICAgdmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdEYXRhVmlldycpLFxuICAgICAgICBNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ01hcCcpLFxuICAgICAgICBQcm9taXNlID0gZ2V0TmF0aXZlKGNvbnRleHQsICdQcm9taXNlJyksXG4gICAgICAgIFNldCA9IGdldE5hdGl2ZShjb250ZXh0LCAnU2V0JyksXG4gICAgICAgIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ1dlYWtNYXAnKSxcbiAgICAgICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4gICAgLyoqIFVzZWQgdG8gc3RvcmUgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gICAgdmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG4gICAgLyoqIFVzZWQgdG8gbG9va3VwIHVubWluaWZpZWQgZnVuY3Rpb24gbmFtZXMuICovXG4gICAgdmFyIHJlYWxOYW1lcyA9IHt9O1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbiAgICB2YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgICAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICAgICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICAgICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbiAgICAvKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbiAgICB2YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGltcGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcy4gTWV0aG9kcyB0aGF0IG9wZXJhdGUgb24gYW5kIHJldHVybiBhcnJheXMsIGNvbGxlY3Rpb25zLFxuICAgICAqIGFuZCBmdW5jdGlvbnMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZVxuICAgICAqIG9yIG1heSByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gc2VxdWVuY2VcbiAgICAgKiBhbmQgcmV0dXJuIHRoZSB1bndyYXBwZWQgdmFsdWUuIE90aGVyd2lzZSwgdGhlIHZhbHVlIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBFeHBsaWNpdCBjaGFpbiBzZXF1ZW5jZXMsIHdoaWNoIG11c3QgYmUgdW53cmFwcGVkIHdpdGggYF8jdmFsdWVgLCBtYXkgYmVcbiAgICAgKiBlbmFibGVkIHVzaW5nIGBfLmNoYWluYC5cbiAgICAgKlxuICAgICAqIFRoZSBleGVjdXRpb24gb2YgY2hhaW5lZCBtZXRob2RzIGlzIGxhenksIHRoYXQgaXMsIGl0J3MgZGVmZXJyZWQgdW50aWxcbiAgICAgKiBgXyN2YWx1ZWAgaXMgaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGNhbGxlZC5cbiAgICAgKlxuICAgICAqIExhenkgZXZhbHVhdGlvbiBhbGxvd3Mgc2V2ZXJhbCBtZXRob2RzIHRvIHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uLlxuICAgICAqIFNob3J0Y3V0IGZ1c2lvbiBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWVyZ2UgaXRlcmF0ZWUgY2FsbHM7IHRoaXMgYXZvaWRzXG4gICAgICogdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBhcnJheXMgYW5kIGNhbiBncmVhdGx5IHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICogaXRlcmF0ZWUgZXhlY3V0aW9ucy4gU2VjdGlvbnMgb2YgYSBjaGFpbiBzZXF1ZW5jZSBxdWFsaWZ5IGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpZiB0aGUgc2VjdGlvbiBpcyBhcHBsaWVkIHRvIGFuIGFycmF5IGFuZCBpdGVyYXRlZXMgYWNjZXB0IG9ubHlcbiAgICAgKiBvbmUgYXJndW1lbnQuIFRoZSBoZXVyaXN0aWMgZm9yIHdoZXRoZXIgYSBzZWN0aW9uIHF1YWxpZmllcyBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaXMgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgXyN2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiB0byBsb2Rhc2ggbWV0aG9kcywgd3JhcHBlcnMgaGF2ZSBgQXJyYXlgIGFuZCBgU3RyaW5nYCBtZXRob2RzLlxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYEFycmF5YCBtZXRob2RzIGFyZTpcbiAgICAgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgc2hpZnRgLCBgc29ydGAsIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAgICAgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gICAgICogYGF0YCwgYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsIGBmaW5kYCxcbiAgICAgKiBgZmluZExhc3RgLCBgaGVhZGAsIGBpbml0aWFsYCwgYGxhc3RgLCBgbWFwYCwgYHJlamVjdGAsIGByZXZlcnNlYCwgYHNsaWNlYCxcbiAgICAgKiBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBhbmQgYHRvQXJyYXlgXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgbWV0aG9kcyBhcmU6XG4gICAgICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXNzaWduSW5gLCBgYXNzaWduSW5XaXRoYCwgYGFzc2lnbldpdGhgLCBgYXRgLFxuICAgICAqIGBiZWZvcmVgLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2FzdEFycmF5YCwgYGNoYWluYCwgYGNodW5rYCxcbiAgICAgKiBgY29tbWl0YCwgYGNvbXBhY3RgLCBgY29uY2F0YCwgYGNvbmZvcm1zYCwgYGNvbnN0YW50YCwgYGNvdW50QnlgLCBgY3JlYXRlYCxcbiAgICAgKiBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGRlZmVyYCwgYGRlbGF5YCxcbiAgICAgKiBgZGlmZmVyZW5jZWAsIGBkaWZmZXJlbmNlQnlgLCBgZGlmZmVyZW5jZVdpdGhgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLFxuICAgICAqIGBkcm9wUmlnaHRXaGlsZWAsIGBkcm9wV2hpbGVgLCBgZXh0ZW5kYCwgYGV4dGVuZFdpdGhgLCBgZmlsbGAsIGBmaWx0ZXJgLFxuICAgICAqIGBmbGF0TWFwYCwgYGZsYXRNYXBEZWVwYCwgYGZsYXRNYXBEZXB0aGAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCxcbiAgICAgKiBgZmxhdHRlbkRlcHRoYCwgYGZsaXBgLCBgZmxvd2AsIGBmbG93UmlnaHRgLCBgZnJvbVBhaXJzYCwgYGZ1bmN0aW9uc2AsXG4gICAgICogYGZ1bmN0aW9uc0luYCwgYGdyb3VwQnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW50ZXJzZWN0aW9uQnlgLFxuICAgICAqIGBpbnRlcnNlY3Rpb25XaXRoYCwgYGludmVydGAsIGBpbnZlcnRCeWAsIGBpbnZva2VNYXBgLCBgaXRlcmF0ZWVgLCBga2V5QnlgLFxuICAgICAqIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsIGBtYXRjaGVzUHJvcGVydHlgLFxuICAgICAqIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1lcmdlV2l0aGAsIGBtZXRob2RgLCBgbWV0aG9kT2ZgLCBgbWl4aW5gLCBgbmVnYXRlYCxcbiAgICAgKiBgbnRoQXJnYCwgYG9taXRgLCBgb21pdEJ5YCwgYG9uY2VgLCBgb3JkZXJCeWAsIGBvdmVyYCwgYG92ZXJBcmdzYCxcbiAgICAgKiBgb3ZlckV2ZXJ5YCwgYG92ZXJTb21lYCwgYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBhcnRpdGlvbmAsIGBwaWNrYCxcbiAgICAgKiBgcGlja0J5YCwgYHBsYW50YCwgYHByb3BlcnR5YCwgYHByb3BlcnR5T2ZgLCBgcHVsbGAsIGBwdWxsQWxsYCwgYHB1bGxBbGxCeWAsXG4gICAgICogYHB1bGxBbGxXaXRoYCwgYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVhcmdgLCBgcmVqZWN0YCxcbiAgICAgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzYW1wbGVTaXplYCwgYHNldGAsIGBzZXRXaXRoYCwgYHNodWZmbGVgLFxuICAgICAqIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzcGxpY2VgLCBgc3ByZWFkYCwgYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdG9BcnJheWAsXG4gICAgICogYHRvUGFpcnNgLCBgdG9QYWlyc0luYCwgYHRvUGF0aGAsIGB0b1BsYWluT2JqZWN0YCwgYHRyYW5zZm9ybWAsIGB1bmFyeWAsXG4gICAgICogYHVuaW9uYCwgYHVuaW9uQnlgLCBgdW5pb25XaXRoYCwgYHVuaXFgLCBgdW5pcUJ5YCwgYHVuaXFXaXRoYCwgYHVuc2V0YCxcbiAgICAgKiBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdXBkYXRlYCwgYHVwZGF0ZVdpdGhgLCBgdmFsdWVzYCxcbiAgICAgKiBgdmFsdWVzSW5gLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB4b3JCeWAsIGB4b3JXaXRoYCwgYHppcGAsXG4gICAgICogYHppcE9iamVjdGAsIGB6aXBPYmplY3REZWVwYCwgYW5kIGB6aXBXaXRoYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcbiAgICAgKiBgYWRkYCwgYGF0dGVtcHRgLCBgY2FtZWxDYXNlYCwgYGNhcGl0YWxpemVgLCBgY2VpbGAsIGBjbGFtcGAsIGBjbG9uZWAsXG4gICAgICogYGNsb25lRGVlcGAsIGBjbG9uZURlZXBXaXRoYCwgYGNsb25lV2l0aGAsIGBjb25mb3Jtc1RvYCwgYGRlYnVycmAsXG4gICAgICogYGRlZmF1bHRUb2AsIGBkaXZpZGVgLCBgZWFjaGAsIGBlYWNoUmlnaHRgLCBgZW5kc1dpdGhgLCBgZXFgLCBgZXNjYXBlYCxcbiAgICAgKiBgZXNjYXBlUmVnRXhwYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCwgYGZpbmRLZXlgLCBgZmluZExhc3RgLFxuICAgICAqIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpcnN0YCwgYGZsb29yYCwgYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCxcbiAgICAgKiBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZ2V0YCwgYGd0YCwgYGd0ZWAsIGBoYXNgLFxuICAgICAqIGBoYXNJbmAsIGBoZWFkYCwgYGlkZW50aXR5YCwgYGluY2x1ZGVzYCwgYGluZGV4T2ZgLCBgaW5SYW5nZWAsIGBpbnZva2VgLFxuICAgICAqIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQXJyYXlCdWZmZXJgLCBgaXNBcnJheUxpa2VgLCBgaXNBcnJheUxpa2VPYmplY3RgLFxuICAgICAqIGBpc0Jvb2xlYW5gLCBgaXNCdWZmZXJgLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLFxuICAgICAqIGBpc0VxdWFsV2l0aGAsIGBpc0Vycm9yYCwgYGlzRmluaXRlYCwgYGlzRnVuY3Rpb25gLCBgaXNJbnRlZ2VyYCwgYGlzTGVuZ3RoYCxcbiAgICAgKiBgaXNNYXBgLCBgaXNNYXRjaGAsIGBpc01hdGNoV2l0aGAsIGBpc05hTmAsIGBpc05hdGl2ZWAsIGBpc05pbGAsIGBpc051bGxgLFxuICAgICAqIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc09iamVjdExpa2VgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsXG4gICAgICogYGlzU2FmZUludGVnZXJgLCBgaXNTZXRgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgaXNUeXBlZEFycmF5YCxcbiAgICAgKiBgaXNXZWFrTWFwYCwgYGlzV2Vha1NldGAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsIGBsYXN0YCwgYGxhc3RJbmRleE9mYCxcbiAgICAgKiBgbG93ZXJDYXNlYCwgYGxvd2VyRmlyc3RgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtYXhCeWAsIGBtZWFuYCwgYG1lYW5CeWAsXG4gICAgICogYG1pbmAsIGBtaW5CeWAsIGBtdWx0aXBseWAsIGBub0NvbmZsaWN0YCwgYG5vb3BgLCBgbm93YCwgYG50aGAsIGBwYWRgLFxuICAgICAqIGBwYWRFbmRgLCBgcGFkU3RhcnRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLFxuICAgICAqIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzYW1wbGVgLCBgc2hpZnRgLCBgc2l6ZWAsXG4gICAgICogYHNuYWtlQ2FzZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHNvcnRlZEluZGV4QnlgLCBgc29ydGVkTGFzdEluZGV4YCxcbiAgICAgKiBgc29ydGVkTGFzdEluZGV4QnlgLCBgc3RhcnRDYXNlYCwgYHN0YXJ0c1dpdGhgLCBgc3R1YkFycmF5YCwgYHN0dWJGYWxzZWAsXG4gICAgICogYHN0dWJPYmplY3RgLCBgc3R1YlN0cmluZ2AsIGBzdHViVHJ1ZWAsIGBzdWJ0cmFjdGAsIGBzdW1gLCBgc3VtQnlgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0aW1lc2AsIGB0b0Zpbml0ZWAsIGB0b0ludGVnZXJgLCBgdG9KU09OYCwgYHRvTGVuZ3RoYCxcbiAgICAgKiBgdG9Mb3dlcmAsIGB0b051bWJlcmAsIGB0b1NhZmVJbnRlZ2VyYCwgYHRvU3RyaW5nYCwgYHRvVXBwZXJgLCBgdHJpbWAsXG4gICAgICogYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYHRydW5jYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHVwcGVyQ2FzZWAsXG4gICAgICogYHVwcGVyRmlyc3RgLCBgdmFsdWVgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB3cmFwcGVkLnJlZHVjZShfLmFkZCk7XG4gICAgICogLy8gPT4gNlxuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhIHdyYXBwZWQgdmFsdWUuXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChzcXVhcmUpO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkge1xuICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGNvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICB0aGlzLl9faW5kZXhfXyA9IDA7XG4gICAgICB0aGlzLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpIGFzIHdlbGwgYXMgRVMyMDE1IHRlbXBsYXRlIHN0cmluZ3MuIENoYW5nZSB0aGVcbiAgICAgKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXZhbHVhdGUnOiByZUV2YWx1YXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICAnaW1wb3J0cyc6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHdyYXBwZXJzIGFyZSBpbnN0YW5jZXMgb2YgYGJhc2VMb2Rhc2hgLlxuICAgIGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbG9kYXNoO1xuXG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGVlc19fID0gW107XG4gICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuICAgICAgdGhpcy5fX3ZpZXdzX18gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGxhenkgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsb25lXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlDbG9uZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcy5fX3dyYXBwZWRfXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19kaXJfXyA9IHRoaXMuX19kaXJfXztcbiAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0aGlzLl9fZmlsdGVyZWRfXztcbiAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7XG4gICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXztcbiAgICAgIHJlc3VsdC5fX3ZpZXdzX18gPSBjb3B5QXJyYXkodGhpcy5fX3ZpZXdzX18pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGxhenkgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHJldmVyc2VkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlSZXZlcnNlKCkge1xuICAgICAgaWYgKHRoaXMuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fID0gLTE7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyAqPSAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHVud3JhcHBlZCB2YWx1ZSBmcm9tIGl0cyBsYXp5IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5VmFsdWUoKSB7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksXG4gICAgICAgICAgZGlyID0gdGhpcy5fX2Rpcl9fLFxuICAgICAgICAgIGlzQXJyID0gaXNBcnJheShhcnJheSksXG4gICAgICAgICAgaXNSaWdodCA9IGRpciA8IDAsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gaXNBcnIgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHZpZXcgPSBnZXRWaWV3KDAsIGFyckxlbmd0aCwgdGhpcy5fX3ZpZXdzX18pLFxuICAgICAgICAgIHN0YXJ0ID0gdmlldy5zdGFydCxcbiAgICAgICAgICBlbmQgPSB2aWV3LmVuZCxcbiAgICAgICAgICBsZW5ndGggPSBlbmQgLSBzdGFydCxcbiAgICAgICAgICBpbmRleCA9IGlzUmlnaHQgPyBlbmQgOiAoc3RhcnQgLSAxKSxcbiAgICAgICAgICBpdGVyYXRlZXMgPSB0aGlzLl9faXRlcmF0ZWVzX18sXG4gICAgICAgICAgaXRlckxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHRha2VDb3VudCA9IG5hdGl2ZU1pbihsZW5ndGgsIHRoaXMuX190YWtlQ291bnRfXyk7XG5cbiAgICAgIGlmICghaXNBcnIgfHwgKCFpc1JpZ2h0ICYmIGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlIChsZW5ndGgtLSAmJiByZXNJbmRleCA8IHRha2VDb3VudCkge1xuICAgICAgICBpbmRleCArPSBkaXI7XG5cbiAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sXG4gICAgICAgICAgICAgIGl0ZXJhdGVlID0gZGF0YS5pdGVyYXRlZSxcbiAgICAgICAgICAgICAgdHlwZSA9IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgYExhenlXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgYmFzZUxvZGFzaGAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gICAgICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbiAgICBIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbiAgICBIYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuICAgIEhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG4gICAgSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbiAgICBIYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gW107XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgIGRhdGEucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICAtLXRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX19kYXRhX18gPSB7XG4gICAgICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBhZGRcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAYWxpYXMgcHVzaFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuICAgIFNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuICAgIFNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgICAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgICAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuICAgIFN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG4gICAgU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuICAgIFN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICAgICApKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGUoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbYmFzZVJhbmRvbSgwLCBsZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZVNpemVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGVTaXplKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNodWZmbGUoYXJyYXkpIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICAgICAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWdncmVnYXRlcyBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgb24gYGFjY3VtdWxhdG9yYCB3aXRoIGtleXMgdHJhbnNmb3JtZWRcbiAgICAgKiBieSBgaXRlcmF0ZWVgIGFuZCB2YWx1ZXMgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gICAgICogdmFsdWUgY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWwgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIHNraXAgPSBvYmplY3QgPT0gbnVsbDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHNraXAgPyB1bmRlZmluZWQgOiBnZXQob2JqZWN0LCBwYXRoc1tpbmRleF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPD0gdXBwZXIgPyBudW1iZXIgOiB1cHBlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAgICAgKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gRGVlcCBjbG9uZVxuICAgICAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICAgICAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICAgICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkO1xuICAgICAgfVxuICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICAgICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICAgICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgICAgIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICAgICAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNUb2Agd2hpY2ggYWNjZXB0cyBgcHJvcHNgIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcykge1xuICAgICAgdmFyIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gc291cmNlW2tleV0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB8fCAhcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGVsYXlgIGFuZCBgXy5kZWZlcmAgd2hpY2ggYWNjZXB0cyBgYXJnc2BcbiAgICAgKiB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEZWxheShmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGV4Y2x1ZGluZyBtdWx0aXBsZSBhcnJheXMgb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICB2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA9PSBudWxsID8gdmFsdWUgOiBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ubWF4YCBhbmQgYF8ubWluYCB3aGljaCBhY2NlcHRzIGFcbiAgICAgKiBgY29tcGFyYXRvcmAgdG8gZGV0ZXJtaW5lIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV4dHJlbXVtKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50ICE9IG51bGwgJiYgKGNvbXB1dGVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAoY3VycmVudCA9PT0gY3VycmVudCAmJiAhaXNTeW1ib2woY3VycmVudCkpXG4gICAgICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICB2YXIgY29tcHV0ZWQgPSBjdXJyZW50LFxuICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZW5kID0gc3RhcnQgPiBlbmQgPyAwIDogdG9MZW5ndGgoZW5kKTtcbiAgICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gICAgICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlRm9yYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXNcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3JSaWdodCA9IGNyZWF0ZUJhc2VGb3IodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvclJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZ1bmN0aW9uc2Agd2hpY2ggY3JlYXRlcyBhbiBhcnJheSBvZlxuICAgICAqIGBvYmplY3RgIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZpbHRlcmVkIGZyb20gYHByb3BzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGZpbHRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqZWN0W2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAgICAgKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICAgICAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgICAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICAgICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ3RgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUd0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIG51bWJlciA+PSBuYXRpdmVNaW4oc3RhcnQsIGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmNsdWRlcyA9IGNvbXBhcmF0b3IgPyBhcnJheUluY2x1ZGVzV2l0aCA6IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXlzWzBdLmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoLFxuICAgICAgICAgIGNhY2hlcyA9IEFycmF5KG90aExlbmd0aCksXG4gICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgICAgIGlmIChvdGhJbmRleCAmJiBpdGVyYXRlZSkge1xuICAgICAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1heExlbmd0aCA9IG5hdGl2ZU1pbihhcnJheS5sZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgIGNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgKGxlbmd0aCA+PSAxMjAgJiYgYXJyYXkubGVuZ3RoID49IDEyMCkpXG4gICAgICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnJheSA9IGFycmF5c1swXTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiByZXN1bHQubGVuZ3RoIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKCEoc2VlblxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgICAgICA6IGluY2x1ZGVzKHJlc3VsdCwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKC0tb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tvdGhJbmRleF07XG4gICAgICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICAgICAgPyBjYWNoZUhhcyhjYWNoZSwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgICAgICA6IGluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52ZXJ0YCBhbmQgYF8uaW52ZXJ0QnlgIHdoaWNoIGludmVydHNcbiAgICAgKiBgb2JqZWN0YCB3aXRoIHZhbHVlcyB0cmFuc2Zvcm1lZCBieSBgaXRlcmF0ZWVgIGFuZCBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIGl0ZXJhdGVlKHZhbHVlKSwga2V5LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52b2tlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBtZXRob2QgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICB2YXIgZnVuYyA9IG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhcHBseShmdW5jLCBvYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FycmF5QnVmZmVyYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRGF0ZWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBkYXRlVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAgICAgKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAgICAgKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gICAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gICAgICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgICAgICBvYmpJc09iaiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgICAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgICAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzUmVnRXhwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHJlZ2V4cFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubHRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUx0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgYmFzZU1lcmdlLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICAgICAgc3JjVmFsdWUgPSBzYWZlR2V0KHNvdXJjZSwga2V5KSxcbiAgICAgICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgIGlmIChpc0FyciB8fCBpc0J1ZmYgfHwgaXNUeXBlZCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm50aGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTnRoKGFycmF5LCBuKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gaXNJbmRleChuLCBsZW5ndGgpID8gYXJyYXlbbl0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgICAgIGlmIChpdGVyYXRlZXMubGVuZ3RoKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShpdGVyYXRlZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gYmFzZUdldCh2YWx1ZSwgaXRlcmF0ZWUubGVuZ3RoID09PSAxID8gaXRlcmF0ZWVbMF0gOiBpdGVyYXRlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpdGVyYXRlZTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaWRlbnRpdHldO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgICAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5waWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBoYXNJbihvYmplY3QsIHBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhzW2luZGV4XSxcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuXG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICAgICAgYmFzZVNldChyZXN1bHQsIGNhc3RQYXRoKHBhdGgsIG9iamVjdCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEFsbEJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAgICogc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4T2YgPSBjb21wYXJhdG9yID8gYmFzZUluZGV4T2ZXaXRoIDogYmFzZUluZGV4T2YsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHNlZW4gPSBhcnJheTtcblxuICAgICAgaWYgKGFycmF5ID09PSB2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzID0gY29weUFycmF5KHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgc2VlbiA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBmcm9tSW5kZXggPSAwLFxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbUluZGV4ID0gaW5kZXhPZihzZWVuLCBjb21wdXRlZCwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSkgPiAtMSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoc2VlbiwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIGluZGV4ZXMgb3IgY2FwdHVyaW5nIHRoZSByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGluZGV4ZXMubGVuZ3RoIDogMCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBpZiAobGVuZ3RoID09IGxhc3RJbmRleCB8fCBpbmRleCAhPT0gcHJldmlvdXMpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXMgPSBpbmRleDtcbiAgICAgICAgICBpZiAoaXNJbmRleChpbmRleCkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleCwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2VVbnNldChhcnJheSwgaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmRvbWAgd2l0aG91dCBzdXBwb3J0IGZvciByZXR1cm5pbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcikge1xuICAgICAgcmV0dXJuIGxvd2VyICsgbmF0aXZlRmxvb3IobmF0aXZlUmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAgICAgKiBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlcGVhdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXBlYXQoc3RyaW5nLCBuKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICBpZiAoIXN0cmluZyB8fCBuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gTGV2ZXJhZ2UgdGhlIGV4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nIGFsZ29yaXRobSBmb3IgYSBmYXN0ZXIgcmVwZWF0LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V4cG9uZW50aWF0aW9uX2J5X3NxdWFyaW5nIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuICUgMikge1xuICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG5hdGl2ZUZsb29yKG4gLyAyKTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICBzdHJpbmcgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChuKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGFycmF5U2FtcGxlKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlU2l6ZWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuKSB7XG4gICAgICB2YXIgYXJyYXkgPSB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoYXJyYXksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gICAgICB3aGlsZSAobmVzdGVkICE9IG51bGwgJiYgKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJyB8fCBrZXkgPT09ICdjb25zdHJ1Y3RvcicgfHwga2V5ID09PSAncHJvdG90eXBlJykge1xuICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kZXggIT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgICAgIDogKGlzSW5kZXgocGF0aFtpbmRleCArIDFdKSA/IFtdIDoge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3NpZ25WYWx1ZShuZXN0ZWQsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldERhdGFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldERhdGEgPSAhbWV0YU1hcCA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgZGF0YSkge1xuICAgICAgbWV0YU1hcC5zZXQoZnVuYywgZGF0YSk7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zaHVmZmxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgICAgIHN0YXJ0ID4+Pj0gMDtcblxuICAgICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvbWVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gIXJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4YCB3aGljaFxuICAgICAqIHBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBvZiBgYXJyYXlgIHRvIGRldGVybWluZSB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gbG93IDogYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDEsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gYXJyYXlbbWlkXTtcblxuICAgICAgICAgIGlmIChjb21wdXRlZCAhPT0gbnVsbCAmJiAhaXNTeW1ib2woY29tcHV0ZWQpICYmXG4gICAgICAgICAgICAgIChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4QnlgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhCeWBcbiAgICAgKiB3aGljaCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGVcbiAgICAgKiB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICB2YXIgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uICYmIG5hdGl2ZUlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBvYmpTdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBvYmpTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gb2JqZWN0O1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgICAgIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAgICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IChmdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgYXJyYXkgPSByZWFsTmFtZXNbcmVzdWx0XSxcbiAgICAgICAgICBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0KSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IGFycmF5W2xlbmd0aF0sXG4gICAgICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgICAgIHZhciBvYmplY3QgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaCwgJ3BsYWNlaG9sZGVyJykgPyBsb2Rhc2ggOiBmdW5jO1xuICAgICAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcIml0ZXJhdGVlXCIgZnVuY3Rpb24uIElmIGBfLml0ZXJhdGVlYCBpcyBjdXN0b21pemVkLFxuICAgICAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGJhc2VJdGVyYXRlZWAuXG4gICAgICogSWYgYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgdGhlIGNob3NlbiBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIHRoZSBjcmVhdGVkIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2hvc2VuIGZ1bmN0aW9uIG9yIGl0cyByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoLml0ZXJhdGVlIHx8IGl0ZXJhdGVlO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBpdGVyYXRlZSA/IGJhc2VJdGVyYXRlZSA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcmVzdWx0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgICAgIDogZGF0YS5tYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICBpZiAodW5tYXNrZWQpIHtcbiAgICAgICAgaWYgKGlzT3duKSB7XG4gICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHdoaWxlIChvYmplY3QpIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICAgICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgdmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbiAgICAvLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG4gICAgaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgICAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAgICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgICAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gICAgICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmlldywgYXBwbHlpbmcgYW55IGB0cmFuc2Zvcm1zYCB0byB0aGUgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIFRoZSB0cmFuc2Zvcm1hdGlvbnMgdG8gYXBwbHkgdG8gdGhlIHZpZXcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHN0YXJ0YCBhbmQgYGVuZGBcbiAgICAgKiAgcG9zaXRpb25zIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZpZXcoc3RhcnQsIGVuZCwgdHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdHJhbnNmb3Jtc1tpbmRleF0sXG4gICAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6ICAgICAgc3RhcnQgKz0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcFJpZ2h0JzogZW5kIC09IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2UnOiAgICAgIGVuZCA9IG5hdGl2ZU1pbihlbmQsIHN0YXJ0ICsgc2l6ZSk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2VSaWdodCc6IHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0LCBlbmQgLSBzaXplKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7ICdzdGFydCc6IHN0YXJ0LCAnZW5kJzogZW5kIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgd3JhcHBlciBkZXRhaWxzIGZyb20gdGhlIGBzb3VyY2VgIGJvZHkgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3cmFwcGVyIGRldGFpbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0V3JhcERldGFpbHMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdChyZVNwbGl0RGV0YWlscykgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgICAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gICAgICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc291cmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICAgICAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UocmVXcmFwQ29tbWVudCwgJ3tcXG4vKiBbd3JhcHBlZCB3aXRoICcgKyBkZXRhaWxzICsgJ10gKi9cXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gICAgICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgICAgICkge1xuICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICAgICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSAnZnVuY3Rpb24nIHx8ICEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGdldERhdGEob3RoZXIpO1xuICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBpcyBjYXBhYmxlIG9mIGJlaW5nIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIHZhciBpc01hc2thYmxlID0gY29yZUpzRGF0YSA/IGlzRnVuY3Rpb24gOiBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gICAgICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAgICAgKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAgICAgKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAgICAgKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICAgICAqIGV4ZWN1dGVkIGltcG9ydGFudCwgcHJldmVudGluZyB0aGUgbWVyZ2luZyBvZiBtZXRhZGF0YS4gSG93ZXZlciwgd2UgbWFrZVxuICAgICAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gICAgICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyZ1Bvc2AgaWYgYXZhaWxhYmxlLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbN107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZGF0YVs3XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQVJZX0ZMQUcpIHtcbiAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gICAgICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gICAgICBkYXRhWzBdID0gc291cmNlWzBdO1xuICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICAgICAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIHNlY29uZCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlb3JkZXIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihpbmRleGVzLmxlbmd0aCwgYXJyTGVuZ3RoKSxcbiAgICAgICAgICBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4KGluZGV4LCBhcnJMZW5ndGgpID8gb2xkQXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICAgICAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAgICAgKiBmdW5jdGlvbiB0byBhdm9pZCBnYXJiYWdlIGNvbGxlY3Rpb24gcGF1c2VzIGluIFY4LiBTZWVcbiAgICAgKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgc2V0VGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL3NldFRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VGltZW91dCA9IGN0eFNldFRpbWVvdXQgfHwgZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAgICAgKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcod3JhcHBlciwgaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICAgICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICAgIHZhciBjb3VudCA9IDAsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCB3aGljaCBtdXRhdGVzIGFuZCBzZXRzIHRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemU7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgdmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgfVxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgICAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgICAgIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkZXRhaWxzYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gICAgICBhcnJheUVhY2god3JhcEZsYWdzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgICAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgICAgICBkZXRhaWxzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXRhaWxzLnNvcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh3cmFwcGVyLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2luZGV4X18gID0gd3JhcHBlci5fX2luZGV4X187XG4gICAgICByZXN1bHQuX192YWx1ZXNfXyA9IHdyYXBwZXIuX192YWx1ZXNfXztcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIGdyb3VwcyB0aGUgbGVuZ3RoIG9mIGBzaXplYC5cbiAgICAgKiBJZiBgYXJyYXlgIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIFRoZSBsZW5ndGggb2YgZWFjaCBjaHVua1xuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY2h1bmtzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWydjJywgJ2QnXV1cbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYicsICdjJ10sIFsnZCddXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzaXplLCBndWFyZCkgOiBzaXplID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHNpemUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IG5hdGl2ZU1heCh0b0ludGVnZXIoc2l6ZSksIDApO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc2l6ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlQ2VpbChsZW5ndGggLyBzaXplKSk7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBiYXNlU2xpY2UoYXJyYXksIGluZGV4LCAoaW5kZXggKz0gc2l6ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsXG4gICAgICogYDBgLCBgXCJcImAsIGB1bmRlZmluZWRgLCBhbmQgYE5hTmAgYXJlIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb25jYXRlbmF0aW5nIGBhcnJheWAgd2l0aCBhbnkgYWRkaXRpb25hbCBhcnJheXNcbiAgICAgKiBhbmQvb3IgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNvbmNhdChhcnJheSwgMiwgWzNdLCBbWzRdXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvdGhlcik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoIC0gMSksXG4gICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGFyZ3NbaW5kZXggLSAxXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlQdXNoKGlzQXJyYXkoYXJyYXkpID8gY29weUFycmF5KGFycmF5KSA6IFthcnJheV0sIGJhc2VGbGF0dGVuKGFyZ3MsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsQnlgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sIFt7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZUJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIG9yZGVyIGFuZFxuICAgICAqIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxXaXRoYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZVdpdGgob2JqZWN0cywgW3sgJ3gnOiAxLCAneSc6IDIgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZVdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgICAgICBjb21wYXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsbHMgZWxlbWVudHMgb2YgYGFycmF5YCB3aXRoIGB2YWx1ZWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90XG4gICAgICogaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8uZmlsbChhcnJheSwgJ2EnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2EnLCAnYSddXG4gICAgICpcbiAgICAgKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICAgICAqIC8vID0+IFsyLCAyLCAyXVxuICAgICAqXG4gICAgICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzQsICcqJywgJyonLCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ICYmIHR5cGVvZiBzdGFydCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRJbmRleGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAncGViYmxlcyc7IH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggPCAwXG4gICAgICAgICAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApXG4gICAgICAgICAgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0LCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIElORklOSVRZKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYGFycmF5YCB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgWzIsIFszLCBbNF1dLCA1XV07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlcHRoKGFycmF5LCBkZXB0aCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy50b1BhaXJzYDsgdGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBmcm9tIGtleS12YWx1ZSBgcGFpcnNgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZyb21QYWlycyhbWydhJywgMV0sIFsnYicsIDJdXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBmaXJzdFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmhlYWQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmhlYWQoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlYWQoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzIHRoZVxuICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMCwgLTEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsyXVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBpZiAoaXRlcmF0ZWUgPT09IGxhc3QobWFwcGVkKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXNcbiAgICAgKiBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYWxsIGVsZW1lbnRzIGluIGBhcnJheWAgaW50byBhIHN0cmluZyBzZXBhcmF0ZWQgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcGFyYXRvcj0nLCddIFRoZSBlbGVtZW50IHNlcGFyYXRvci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBqb2luZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmpvaW4oWydhJywgJ2InLCAnYyddLCAnficpO1xuICAgICAqIC8vID0+ICdhfmJ+YydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBqb2luKGFycmF5LCBzZXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gJycgOiBuYXRpdmVKb2luLmNhbGwoYXJyYXksIHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBhcnJheWAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKSA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICAgID8gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleClcbiAgICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbGVtZW50IGF0IGluZGV4IGBuYCBvZiBgYXJyYXlgLiBJZiBgbmAgaXMgbmVnYXRpdmUsIHRoZSBudGhcbiAgICAgKiBlbGVtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjExLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIC0yKTtcbiAgICAgKiAvLyA9PiAnYyc7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlTnRoKGFycmF5LCB0b0ludGVnZXIobikpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnJlbW92ZWBcbiAgICAgKiB0byByZW1vdmUgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSBwcmVkaWNhdGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgdmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbChhcnJheSwgWydhJywgJ2MnXSk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlQnlgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMyB9LCB7ICd4JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbEJ5KGFycmF5LCBbeyAneCc6IDEgfSwgeyAneCc6IDMgfV0sICd4Jyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZVdpdGhgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDMsICd5JzogNCB9LCB7ICd4JzogNSwgJ3knOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsV2l0aChhcnJheSwgW3sgJ3gnOiAzLCAneSc6IDQgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiA1LCAneSc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsV2l0aChhcnJheSwgdmFsdWVzLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGBhcnJheWAgY29ycmVzcG9uZGluZyB0byBgaW5kZXhlc2AgYW5kIHJldHVybnMgYW5cbiAgICAgKiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5hdGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKiB2YXIgcHVsbGVkID0gXy5wdWxsQXQoYXJyYXksIFsxLCAzXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2MnXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cocHVsbGVkKTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnZCddXG4gICAgICovXG4gICAgdmFyIHB1bGxBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcblxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgYXJyYXlNYXAoaW5kZXhlcywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGlzSW5kZXgoaW5kZXgsIGxlbmd0aCkgPyAraW5kZXggOiBpbmRleDtcbiAgICAgIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBgYXJyYXlgIHRoYXQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yXG4gICAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnB1bGxgXG4gICAgICogdG8gcHVsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDRdO1xuICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgYGFycmF5YCBzbyB0aGF0IHRoZSBmaXJzdCBlbGVtZW50IGJlY29tZXMgdGhlIGxhc3QsIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50IGJlY29tZXMgdGhlIHNlY29uZCB0byBsYXN0LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgIGFuZCBpcyBiYXNlZCBvblxuICAgICAqIFtgQXJyYXkjcmV2ZXJzZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3JldmVyc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5yZXZlcnNlKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXZlcnNlKGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/IGFycmF5IDogbmF0aXZlUmV2ZXJzZS5jYWxsKGFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICAgKiBbYEFycmF5I3NsaWNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvc2xpY2UpIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCAmJiBlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAgICAgKiBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG9cbiAgICAgKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZExhc3RJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubGFzdEluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpIC0gMTtcbiAgICAgICAgaWYgKGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXEoWzEsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFCeWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXFCeShbMS4xLCAxLjIsIDIuMywgMi40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMSwgMi4zXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRhaWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWlsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAxLCBsZW5ndGgpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZShhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gICAgICogdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGZhbHNlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICAgICAqIGFyZSB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgZnJvbSBhbGwgZ2l2ZW4gYXJyYXlzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uKFsyXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb20gdGhlIGZpcnN0XG4gICAgICogYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uQnkoWzIuMV0sIFsxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbVxuICAgICAqIHRoZSBmaXJzdCBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGluIHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaCBlbGVtZW50XG4gICAgICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICAgICAqIGluIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzIsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZVxuICAgICAqIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXFCeShbMi4xLCAxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS5UaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIHVuZGVmaW5lZCwgY29tcGFyYXRvcikgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiBncm91cGVkXG4gICAgICogZWxlbWVudHMgYW5kIGNyZWF0ZXMgYW4gYXJyYXkgcmVncm91cGluZyB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlLXppcFxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwKHppcHBlZCk7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcChhcnJheSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChncm91cCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoZ3JvdXAubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAoYXJyYXksIGJhc2VQcm9wZXJ0eShpbmRleCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgcmVncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSk7XG4gICAgICogLy8gPT4gW1sxLCAxMCwgMTAwXSwgWzIsIDIwLCAyMDBdXVxuICAgICAqXG4gICAgICogXy51bnppcFdpdGgoemlwcGVkLCBfLmFkZCk7XG4gICAgICogLy8gPT4gWzMsIDMwLCAzMDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdW56aXAoYXJyYXkpO1xuICAgICAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdW5kZWZpbmVkLCBncm91cCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzIsIDEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKi9cbiAgICB2YXIgd2l0aG91dCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgaXMgdGhlXG4gICAgICogW3N5bW1ldHJpYyBkaWZmZXJlbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZSlcbiAgICAgKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICAgICAqIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICovXG4gICAgdmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkXG4gICAgICogYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmVcbiAgICAgKiBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvckJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjIsIDMuNF1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ueG9yQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHhvckJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy54b3JXaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHhvcldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIHNlY29uZCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKi9cbiAgICB2YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mcm9tUGFpcnNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgdHdvIGFycmF5cyxcbiAgICAgKiBvbmUgb2YgcHJvcGVydHkgaWRlbnRpZmllcnMgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydhJywgJ2InXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3QocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYXNzaWduVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwT2JqZWN0YCBleGNlcHQgdGhhdCBpdCBzdXBwb3J0cyBwcm9wZXJ0eSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3REZWVwKFsnYS5iWzBdLmMnLCAnYS5iWzFdLmQnXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IFt7ICdjJzogMSB9LCB7ICdkJzogMiB9XSB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3REZWVwKHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGJhc2VTZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyBncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBXaXRoKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0sIGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBhICsgYiArIGM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzExMSwgMjIyXVxuICAgICAqL1xuICAgIHZhciB6aXBXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGl0ZXJhdGVlID0gdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgPyAoYXJyYXlzLnBvcCgpLCBpdGVyYXRlZSkgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUpO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCB3cmFwcyBgdmFsdWVgIHdpdGggZXhwbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuIFRoZSByZXN1bHQgb2Ygc3VjaCBzZXF1ZW5jZXMgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgeW91bmdlc3QgPSBfXG4gICAgICogICAuY2hhaW4odXNlcnMpXG4gICAgICogICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICogICAgIHJldHVybiBvLnVzZXIgKyAnIGlzICcgKyBvLmFnZTtcbiAgICAgKiAgIH0pXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoKHZhbHVlKTtcbiAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIGBpbnRlcmNlcHRvcmAgYW5kIHJldHVybnMgYHZhbHVlYC4gVGhlIGludGVyY2VwdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG9cbiAgICAgKiBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UgaW4gb3JkZXIgdG8gbW9kaWZ5IGludGVybWVkaWF0ZSByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICogICAgLy8gTXV0YXRlIGlucHV0IGFycmF5LlxuICAgICAqICAgIGFycmF5LnBvcCgpO1xuICAgICAqICB9KVxuICAgICAqICAucmV2ZXJzZSgpXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhcCh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnRhcGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJwYXNzIHRocnVcIiB2YWx1ZXMgcmVwbGFjaW5nIGludGVybWVkaWF0ZVxuICAgICAqIHJlc3VsdHMgaW4gYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKCcgIGFiYyAgJylcbiAgICAgKiAgLmNoYWluKClcbiAgICAgKiAgLnRyaW0oKVxuICAgICAqICAudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgIHJldHVybiBbdmFsdWVdO1xuICAgICAqICB9KVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhydSh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5hdGAuXG4gICAgICpcbiAgICAgKiBAbmFtZSBhdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfKG9iamVjdCkuYXQoWydhWzBdLmIuYycsICdhWzFdJ10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIHdyYXBwZXJBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoID8gcGF0aHNbMF0gOiAwLFxuICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKG9iamVjdCkgeyByZXR1cm4gYmFzZUF0KG9iamVjdCwgcGF0aHMpOyB9O1xuXG4gICAgICBpZiAobGVuZ3RoID4gMSB8fCB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCB8fFxuICAgICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikgfHwgIWlzSW5kZXgoc3RhcnQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShzdGFydCwgK3N0YXJ0ICsgKGxlbmd0aCA/IDEgOiAwKSk7XG4gICAgICB2YWx1ZS5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAnYXJncyc6IFtpbnRlcmNlcHRvcl0sXG4gICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSwgdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgaWYgKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXkucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycykuaGVhZCgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKVxuICAgICAqICAgLmNoYWluKClcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC5waWNrKCd1c2VyJylcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkge1xuICAgICAgcmV0dXJuIGNoYWluKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSBhbmQgcmV0dXJucyB0aGUgd3JhcHBlZCByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb21taXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkucHVzaCgzKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQgPSB3cmFwcGVkLmNvbW1pdCgpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubGFzdCgpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ29tbWl0KCkge1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgdmFsdWUgb24gYSB3cmFwcGVkIG9iamVjdCBmb2xsb3dpbmcgdGhlXG4gICAgICogW2l0ZXJhdG9yIHByb3RvY29sXShodHRwczovL21kbi5pby9pdGVyYXRpb25fcHJvdG9jb2xzI2l0ZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBuYW1lIG5leHRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXh0IGl0ZXJhdG9yIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMSB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDIgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IHRydWUsICd2YWx1ZSc6IHVuZGVmaW5lZCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlck5leHQoKSB7XG4gICAgICBpZiAodGhpcy5fX3ZhbHVlc19fID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdG9BcnJheSh0aGlzLnZhbHVlKCkpO1xuICAgICAgfVxuICAgICAgdmFyIGRvbmUgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gZG9uZSA/IHVuZGVmaW5lZCA6IHRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXTtcblxuICAgICAgcmV0dXJuIHsgJ2RvbmUnOiBkb25lLCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIHdyYXBwZXIgdG8gYmUgaXRlcmFibGUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBTeW1ib2wuaXRlcmF0b3JcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkW1N5bWJvbC5pdGVyYXRvcl0oKSA9PT0gd3JhcHBlZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBBcnJheS5mcm9tKHdyYXBwZWQpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb0l0ZXJhdG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBjaGFpbiBzZXF1ZW5jZSBwbGFudGluZyBgdmFsdWVgIGFzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgcGxhbnRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwbGFudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKS5tYXAoc3F1YXJlKTtcbiAgICAgKiB2YXIgb3RoZXIgPSB3cmFwcGVkLnBsYW50KFszLCA0XSk7XG4gICAgICpcbiAgICAgKiBvdGhlci52YWx1ZSgpO1xuICAgICAqIC8vID0+IFs5LCAxNl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUGxhbnQodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgcGFyZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHtcbiAgICAgICAgdmFyIGNsb25lID0gd3JhcHBlckNsb25lKHBhcmVudCk7XG4gICAgICAgIGNsb25lLl9faW5kZXhfXyA9IDA7XG4gICAgICAgIGNsb25lLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IGNsb25lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNsb25lO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187XG4gICAgICB9XG4gICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLnJldmVyc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIHdyYXBwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8oYXJyYXkpLnJldmVyc2UoKS52YWx1ZSgpXG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoKSB7XG4gICAgICAgICAgd3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkID0gd3JhcHBlZC5yZXZlcnNlKCk7XG4gICAgICAgIHdyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAgICdhcmdzJzogW3JldmVyc2VdLFxuICAgICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlZCwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudGhydShyZXZlcnNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyB0b0pTT04sIHZhbHVlT2ZcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUodGhpcy5fX3dyYXBwZWRfXywgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICAgICAqL1xuICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICArK3Jlc3VsdFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBbZW1wdHkgY29sbGVjdGlvbnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxuICAgICAqIFtldmVyeXRoaW5nIGlzIHRydWVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZhY3VvdXNfdHJ1dGgpIG9mXG4gICAgICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmV2ZXJ5KFt0cnVlLCAxLCBudWxsLCAneWVzJ10sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5yZWplY3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBDb21iaW5pbmcgc2V2ZXJhbCBwcmVkaWNhdGVzIHVzaW5nIGBfLm92ZXJFdmVyeWAgb3IgYF8ub3ZlclNvbWVgLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLm92ZXJTb21lKFt7ICdhZ2UnOiAzNiB9LCBbJ2FnZScsIDQwXV0pKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogMzAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDMwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDMwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICAgICAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgICAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICAgICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICAgICAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc2FmZSBpbnRlZ2VyLiBBIHNhZmUgaW50ZWdlciBjYW4gYmUgY29tcGFyZWQgYW5kXG4gICAgICogcmVwcmVzZW50ZWQgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA5MDA3MTk5MjU0NzQwOTkxXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgLU1BWF9TQUZFX0lOVEVHRVIsIE1BWF9TQUZFX0lOVEVHRVIpXG4gICAgICAgIDogKHZhbHVlID09PSAwID8gdmFsdWUgOiAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgICAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoLTApO1xuICAgICAqIC8vID0+ICctMCdcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduSW4oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFdpdGhcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBgcGF0aHNgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfLmF0KG9iamVjdCwgWydhWzBdLmIuYycsICdhWzFdJ10pO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciBhdCA9IGZsYXRSZXN0KGJhc2VBdCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgZ2l2ZW4sIGl0cyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllc1xuICAgICAqIGFyZSBhc3NpZ25lZCB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQgOiBiYXNlQXNzaWduKHJlc3VsdCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICAgICAqIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdFxuICAgICAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgICAgIHZhciBwcm9wc0luZGV4ID0gLTE7XG4gICAgICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytwcm9wc0luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbcHJvcHNJbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAoZXEodmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBhc3NpZ25zXG4gICAgICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICdhJzogeyAnYic6IDIgfSB9LCB7ICdhJzogeyAnYic6IDEsICdjJzogMyB9IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlKTtcbiAgICAgIHJldHVybiBhcHBseShtZXJnZVdpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgJ3BlYmJsZXMnIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICAgICAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYycsICdiJywgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9ySW5gIGxvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvclJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICAgICAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2InIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgdGhlbiAnYicuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gYW5kIGluaGVyaXRlZFxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICAgICAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG90aGVyLCAnYScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAgICAgKiBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG4gICAgfSwgY29uc3RhbnQoaWRlbnRpdHkpKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW52ZXJ0YCBleGNlcHQgdGhhdCB0aGUgaW52ZXJ0ZWQgb2JqZWN0IGlzIGdlbmVyYXRlZFxuICAgICAqIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIGludmVydGVkIHZhbHVlIG9mIGVhY2ggaW52ZXJ0ZWQga2V5IGlzIGFuIGFycmF5IG9mIGtleXNcbiAgICAgKiByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUgaW52ZXJ0ZWQgdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuICdncm91cCcgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdncm91cDEnOiBbJ2EnLCAnYyddLCAnZ3JvdXAyJzogWydiJ10gfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnRCeSA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0gPSBba2V5XTtcbiAgICAgIH1cbiAgICB9LCBnZXRJdGVyYXRlZSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogWzEsIDIsIDMsIDRdIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uaW52b2tlKG9iamVjdCwgJ2FbMF0uYi5jLnNsaWNlJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgdmFyIGludm9rZSA9IGJhc2VSZXN0KGJhc2VJbnZva2UpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICAgICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8ua2V5cygnaGknKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gICAgICogc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwVmFsdWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcEtleXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICAgICAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcEtleXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gICAgICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAgICAgKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAgICAgKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXIgPSB7XG4gICAgICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZXJnZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGFuZCBzb3VyY2VcbiAgICAgKiBwcm9wZXJ0aWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgbWVyZ2luZyBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgICAqIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBzaXggYXJndW1lbnRzOlxuICAgICAqIChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIG9ialZhbHVlLmNvbmNhdChzcmNWYWx1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbMV0sICdiJzogWzJdIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IFszXSwgJ2InOiBbNF0gfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2VXaXRoKG9iamVjdCwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbMSwgM10sICdiJzogWzIsIDRdIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2VXaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmFibHkgc2xvd2VyIHRoYW4gYF8ucGlja2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgdmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgIGlzRGVlcCB8fCAoaXNEZWVwID0gcGF0aC5sZW5ndGggPiAxKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9KTtcbiAgICAgIGNvcHlPYmplY3Qob2JqZWN0LCBnZXRBbGxLZXlzSW4ob2JqZWN0KSwgcmVzdWx0KTtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmVzdWx0ID0gYmFzZUNsb25lKHJlc3VsdCwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfRkxBVF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21PbWl0Q2xvbmUpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBiYXNlVW5zZXQocmVzdWx0LCBwYXRoc1tsZW5ndGhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja0J5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2ZcbiAgICAgKiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBgb2JqZWN0YCB0aGF0XG4gICAgICogYHByZWRpY2F0ZWAgZG9lc24ndCByZXR1cm4gdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdEJ5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gb21pdEJ5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gcGlja0J5KG9iamVjdCwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIHBpY2sgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJuc1xuICAgICAqIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrQnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICB2YXIgcHJvcHMgPSBhcnJheU1hcChnZXRBbGxLZXlzSW4ob2JqZWN0KSwgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICByZXR1cm4gW3Byb3BdO1xuICAgICAgfSk7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUpO1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh2YWx1ZSwgcGF0aFswXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmdldGAgZXhjZXB0IHRoYXQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFcbiAgICAgKiBmdW5jdGlvbiBpdCdzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgaXRzIHBhcmVudCBvYmplY3QgYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjMSc6IDMsICdjMic6IF8uY29uc3RhbnQoNCkgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMxJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMyJyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsIF8uY29uc3RhbnQoJ2RlZmF1bHQnKSk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdWx0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGUgbG9vcCBpcyBlbnRlcmVkIHdoZW4gcGF0aCBpcyBlbXB0eS5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIG9iamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXhdKV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gICAgICogaXQncyBjcmVhdGVkLiBBcnJheXMgYXJlIGNyZWF0ZWQgZm9yIG1pc3NpbmcgaW5kZXggcHJvcGVydGllcyB3aGlsZSBvYmplY3RzXG4gICAgICogYXJlIGNyZWF0ZWQgZm9yIGFsbCBvdGhlciBtaXNzaW5nIHByb3BlcnRpZXMuIFVzZSBgXy5zZXRXaXRoYCB0byBjdXN0b21pemVcbiAgICAgKiBgcGF0aGAgY3JlYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCBbJ3gnLCAnMCcsICd5JywgJ3onXSwgNSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8uc2V0V2l0aChvYmplY3QsICdbMF1bMV0nLCAnYScsIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V2l0aChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YFxuICAgICAqIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcCBvciBzZXQsIGl0c1xuICAgICAqIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl1dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnMgPSBjcmVhdGVUb1BhaXJzKGtleXMpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlyc1xuICAgICAqIGZvciBgb2JqZWN0YCB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXBcbiAgICAgKiBvciBzZXQsIGl0cyBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzSW5cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnNJbiA9IGNyZWF0ZVRvUGFpcnMoa2V5c0luKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAgICAgKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gICAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyB0aHJ1IGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uXG4gICAgICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICAgICAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gICAgICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA5XVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0FyciA/IG5ldyBDdG9yIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGlzQXJyTGlrZSA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiA3IH0gfV0gfTtcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqXG4gICAgICogXy51bnNldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB0cnVlIDogYmFzZVVuc2V0KG9iamVjdCwgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGFjY2VwdHMgYHVwZGF0ZXJgIHRvIHByb2R1Y2UgdGhlXG4gICAgICogdmFsdWUgdG8gc2V0LiBVc2UgYF8udXBkYXRlV2l0aGAgdG8gY3VzdG9taXplIGBwYXRoYCBjcmVhdGlvbi4gVGhlIGB1cGRhdGVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAnYVswXS5iLmMnLCBmdW5jdGlvbihuKSB7IHJldHVybiBuICogbjsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICd4WzBdLnkueicsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPyBuICsgMSA6IDA7IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udXBkYXRlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy51cGRhdGVXaXRoKG9iamVjdCwgJ1swXVsxXScsIF8uY29uc3RhbnQoJ2EnKSwgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXaXRoKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWydoJywgJ2knXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENsYW1wcyBgbnVtYmVyYCB3aXRoaW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoLTEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gLTVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSB0b051bWJlcih1cHBlcik7XG4gICAgICAgIHVwcGVyID0gdXBwZXIgPT09IHVwcGVyID8gdXBwZXIgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgICAgIGxvd2VyID0gbG93ZXIgPT09IGxvd2VyID8gbG93ZXIgOiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgbmAgaXMgYmV0d2VlbiBgc3RhcnRgIGFuZCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZlxuICAgICAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKiBJZiBgc3RhcnRgIGlzIGdyZWF0ZXIgdGhhbiBgZW5kYCB0aGUgcGFyYW1zIGFyZSBzd2FwcGVkIHRvIHN1cHBvcnRcbiAgICAgKiBuZWdhdGl2ZSByYW5nZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ucmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMywgMiwgNCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDgpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDIsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMS4yLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNS4yLCA0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKC0zLCAtMiwgLTYpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICB9XG4gICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKiBJZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlclxuICAgICAqIGlzIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBsb3dlcmAgb3IgYHVwcGVyYCBhcmVcbiAgICAgKiBmbG9hdHMsIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGlzIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXI9MF0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdXBwZXI9MV0gVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSB7XG4gICAgICBpZiAoZmxvYXRpbmcgJiYgdHlwZW9mIGZsb2F0aW5nICE9ICdib29sZWFuJyAmJiBpc0l0ZXJhdGVlQ2FsbChsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSkge1xuICAgICAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cHBlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IHVwcGVyO1xuICAgICAgICAgIHVwcGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBsb3dlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgdXBwZXIgPSAxO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvd2VyID0gdG9GaW5pdGUobG93ZXIpO1xuICAgICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwcGVyID0gdG9GaW5pdGUodXBwZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICB2YXIgdGVtcCA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVwcGVyO1xuICAgICAgICB1cHBlciA9IHRlbXA7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgfHwgbG93ZXIgJSAxIHx8IHVwcGVyICUgMSkge1xuICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlTWluKGxvd2VyICsgKHJhbmQgKiAodXBwZXIgLSBsb3dlciArIGZyZWVQYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsgJycpLmxlbmd0aCAtIDEpKSkpLCB1cHBlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKi9cbiAgICB2YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/IGNhcGl0YWxpemUod29yZCkgOiB3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICAgICAqIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICAgICAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICAgICAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAgICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gICAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gICAgICogLy8gPT4gJ2RlamEgdnUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj1zdHJpbmcubGVuZ3RoXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2MnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBsZW5ndGhcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgbGVuZ3RoKTtcblxuICAgICAgdmFyIGVuZCA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA+PSAwICYmIHN0cmluZy5zbGljZShwb3NpdGlvbiwgZW5kKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAgICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAgICAgKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gICAgICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgICAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICAgICAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gICAgICogWFNTIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgdGhlIGBSZWdFeHBgIHNwZWNpYWwgY2hhcmFjdGVycyBcIl5cIiwgXCIkXCIsIFwiXFxcIiwgXCIuXCIsIFwiKlwiLCBcIitcIixcbiAgICAgKiBcIj9cIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiLCBcIn1cIiwgYW5kIFwifFwiIGluIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGVSZWdFeHAoJ1tsb2Rhc2hdKGh0dHBzOi8vbG9kYXNoLmNvbS8pJyk7XG4gICAgICogLy8gPT4gJ1xcW2xvZGFzaFxcXVxcKGh0dHBzOi8vbG9kYXNoXFwuY29tL1xcKSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGtlYmFiIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqL1xuICAgIHZhciBrZWJhYkNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdmUkVEJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b0xvd2VyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBjYW4ndCBiZSBldmVubHkgZGl2aWRlZCBieSBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCk7XG4gICAgICogLy8gPT4gJyAgYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgsICdfLScpO1xuICAgICAqIC8vID0+ICdfLWFiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbWlkID0gKGxlbmd0aCAtIHN0ckxlbmd0aCkgLyAyO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVGbG9vcihtaWQpLCBjaGFycykgK1xuICAgICAgICBzdHJpbmcgK1xuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUNlaWwobWlkKSwgY2hhcnMpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIHJpZ2h0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICdhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZEVuZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKHN0cmluZyArIGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnICAgYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tX2FiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpICsgc3RyaW5nKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBpbnRlZ2VyIG9mIHRoZSBzcGVjaWZpZWQgcmFkaXguIElmIGByYWRpeGAgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCBvciBgMGAsIGEgYHJhZGl4YCBvZiBgMTBgIGlzIHVzZWQgdW5sZXNzIGB2YWx1ZWAgaXMgYVxuICAgICAqIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgYWxpZ25zIHdpdGggdGhlXG4gICAgICogW0VTNSBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjIpIG9mIGBwYXJzZUludGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeD0xMF0gVGhlIHJhZGl4IHRvIGludGVycHJldCBgdmFsdWVgIGJ5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzA4JywgJzEwJ10sIF8ucGFyc2VJbnQpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4LCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkIHx8IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgcmFkaXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChyYWRpeCkge1xuICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVQYXJzZUludCh0b1N0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKSwgcmFkaXggfHwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwZWF0cyB0aGUgZ2l2ZW4gc3RyaW5nIGBuYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCcqJywgMyk7XG4gICAgICogLy8gPT4gJyoqKidcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAyKTtcbiAgICAgKiAvLyA9PiAnYWJjYWJjJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDApO1xuICAgICAqIC8vID0+ICcnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSZXBlYXQodG9TdHJpbmcoc3RyaW5nKSwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgbWF0Y2hlcyBmb3IgYHBhdHRlcm5gIGluIGBzdHJpbmdgIHdpdGggYHJlcGxhY2VtZW50YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3JlcGxhY2VgXShodHRwczovL21kbi5pby9TdHJpbmcvcmVwbGFjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gcGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSByZXBsYWNlbWVudCBUaGUgbWF0Y2ggcmVwbGFjZW1lbnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGxhY2UoJ0hpIEZyZWQnLCAnRnJlZCcsICdCYXJuZXknKTtcbiAgICAgKiAvLyA9PiAnSGkgQmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhhcmdzWzBdKTtcblxuICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoIDwgMyA/IHN0cmluZyA6IHN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICovXG4gICAgdmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3NwbGl0YF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3NwbGl0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzcGxpdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHNlcGFyYXRvciBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF0gVGhlIGxlbmd0aCB0byB0cnVuY2F0ZSByZXN1bHRzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc3RyaW5nIHNlZ21lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNwbGl0KCdhLWItYycsICctJywgMik7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGxpbWl0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX0FSUkFZX0xFTkdUSCA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKCFsaW1pdCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoXG4gICAgICAgICAgICB0eXBlb2Ygc2VwYXJhdG9yID09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAoc2VwYXJhdG9yICE9IG51bGwgJiYgIWlzUmVnRXhwKHNlcGFyYXRvcikpXG4gICAgICAgICAgKSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IgJiYgaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHN0cmluZyksIDAsIGxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciBzdGFydENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB1cHBlckZpcnN0KHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT0gbnVsbFxuICAgICAgICA/IDBcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyB0YXJnZXQubGVuZ3RoKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uIHRoYXQgY2FuIGludGVycG9sYXRlIGRhdGEgcHJvcGVydGllc1xuICAgICAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gICAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAgICogcHJvcGVydGllcyBtYXkgYmUgYWNjZXNzZWQgYXMgZnJlZSB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlLiBJZiBhIHNldHRpbmdcbiAgICAgKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkIGBfLnRlbXBsYXRlYCB1dGlsaXplc1xuICAgICAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICAgICAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAgICAgKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAgICAgKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAgICAgKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlPV8udGVtcGxhdGVTZXR0aW5ncy5ldmFsdWF0ZV1cbiAgICAgKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gICAgICogIEFuIG9iamVjdCB0byBpbXBvcnQgaW50byB0aGUgdGVtcGxhdGUgYXMgZnJlZSB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAgICAgKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVSTD0nbG9kYXNoLnRlbXBsYXRlU291cmNlc1tuXSddXG4gICAgICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy52YXJpYWJsZT0nb2JqJ11cbiAgICAgKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAgICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiAvLyBEaXNhYmxlIHN1cHBvcnQgYnkgcmVwbGFjaW5nIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCU9IFwiXFxcXDwlLSB2YWx1ZSAlXFxcXD5cIiAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgICAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gICAgICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKHRleHQsIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gICAgICogY29tcGlsZWQoZGF0YSk7XG4gICAgICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHZhcmlhYmxlYCBvcHRpb24gdG8gZW5zdXJlIGEgd2l0aC1zdGF0ZW1lbnQgaXNuJ3QgdXNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICAgKiBjb21waWxlZC5zb3VyY2U7XG4gICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gICAgICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gICAgICogLy8gICByZXR1cm4gX19wO1xuICAgICAqIC8vIH1cbiAgICAgKlxuICAgICAqIC8vIFVzZSBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVycy5cbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAgICAgLy8gQmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncztcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgICAgICBpbXBvcnRzS2V5cyA9IGtleXMoaW1wb3J0cyksXG4gICAgICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gICAgICB2YXIgaXNFc2NhcGluZyxcbiAgICAgICAgICBpc0V2YWx1YXRpbmcsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICAgICAgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuXG4gICAgICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgLCAnZycpO1xuXG4gICAgICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICAvLyBUaGUgc291cmNlVVJMIGdldHMgaW5qZWN0ZWQgaW50byB0aGUgc291cmNlIHRoYXQncyBldmFsLWVkLCBzbyBiZSBjYXJlZnVsXG4gICAgICAvLyB0byBub3JtYWxpemUgYWxsIGtpbmRzIG9mIHdoaXRlc3BhY2UsIHNvIGUuZy4gbmV3bGluZXMgKGFuZCB1bmljb2RlIHZlcnNpb25zIG9mIGl0KSBjYW4ndCBzbmVhayBpblxuICAgICAgLy8gYW5kIGVzY2FwZSB0aGUgY29tbWVudCwgdGh1cyBpbmplY3RpbmcgY29kZSB0aGF0IGdldHMgZXZhbGVkLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAnc291cmNlVVJMJylcbiAgICAgICAgICA/IChvcHRpb25zLnNvdXJjZVVSTCArICcnKS5yZXBsYWNlKC9cXHMvZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgYSBmb3JiaWRkZW4gY2hhcmFjdGVyIHdhcyBmb3VuZCBpbiBgdmFyaWFibGVgLCB0byBwcmV2ZW50XG4gICAgICAvLyBwb3RlbnRpYWwgY29tbWFuZCBpbmplY3Rpb24gYXR0YWNrcy5cbiAgICAgIGVsc2UgaWYgKHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzLnRlc3QodmFyaWFibGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBiYXNlVHJpbShzdHJpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5vdmVyU29tZShbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCBfLm1hdGNoZXMoeyAnYSc6IDQgfSldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlc1Byb3BlcnR5KCdhJywgMSksIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckV2ZXJ5KFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyRXZlcnkgPSBjcmVhdGVPdmVyKGFycmF5RXZlcnkpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYW55Kiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciBtYXRjaGVzRnVuYyA9IF8ub3ZlclNvbWUoW3sgJ2EnOiAxIH0sIHsgJ2EnOiAyIH1dKVxuICAgICAqIHZhciBtYXRjaGVzUHJvcGVydHlGdW5jID0gXy5vdmVyU29tZShbWydhJywgMV0sIFsnYScsIDJdXSlcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gbG9kYXNoRnVuYy5uYW1lICsgJyc7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIGtleSkpIHtcbiAgICAgICAgICByZWFsTmFtZXNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJlYWxOYW1lc1trZXldLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiaW1wb3J0IFBvaW50IGZyb20gJy4vUG9pbnQnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdHJpeCB7XG4gIHB1YmxpYyBhOiBudW1iZXJcbiAgcHVibGljIGI6IG51bWJlclxuICBwdWJsaWMgYzogbnVtYmVyXG4gIHB1YmxpYyBkOiBudW1iZXJcbiAgcHVibGljIHR4OiBudW1iZXJcbiAgcHVibGljIHR5OiBudW1iZXJcblxuICBjb25zdHJ1Y3RvcihhOiBudW1iZXIgPSAxLCBiOiBudW1iZXIgPSAwLCBjOiBudW1iZXIgPSAwLCBkOiBudW1iZXIgPSAxLCB0eDogbnVtYmVyID0gMCwgdHk6IG51bWJlciA9IDApIHtcbiAgICB0aGlzLmEgPSBhXG4gICAgdGhpcy5iID0gYlxuICAgIHRoaXMuYyA9IGNcbiAgICB0aGlzLmQgPSBkXG4gICAgdGhpcy50eCA9IHR4XG4gICAgdGhpcy50eSA9IHR5XG4gIH1cblxuICBzdGF0aWMgdHJhbnNsYXRpb24odHg6IG51bWJlciwgdHk6IG51bWJlcikge1xuICAgIHJldHVybiBuZXcgTWF0cml4KDEsIDAsIDAsIDEsIHR4LCB0eSlcbiAgfVxuXG4gIHN0YXRpYyBzY2FsZShzeDogbnVtYmVyLCBzeT86IG51bWJlciwgYWJvdXRQb2ludD86IFBvaW50KSB7XG4gICAgaWYgKHN5ID09PSB1bmRlZmluZWQpIHN5ID0gc3hcbiAgICBsZXQgc2NhbGVNYXRyaXggPSBuZXcgTWF0cml4KHN4LCAwLCAwLCBzeSlcbiAgICBpZiAoYWJvdXRQb2ludCkge1xuICAgICAgc2NhbGVNYXRyaXggPSBNYXRyaXgudHJhbnNsYXRpb24oYWJvdXRQb2ludC54LCBhYm91dFBvaW50LnkpXG4gICAgICAgIC5jb25jYXQoc2NhbGVNYXRyaXgpXG4gICAgICAgIC5jb25jYXQoTWF0cml4LnRyYW5zbGF0aW9uKC1hYm91dFBvaW50LngsIC1hYm91dFBvaW50LnkpKVxuICAgIH1cbiAgICByZXR1cm4gc2NhbGVNYXRyaXhcbiAgfVxuXG4gIHN0YXRpYyByb3RhdGlvbih0aGV0YTogbnVtYmVyLCBhYm91dFBvaW50PzogUG9pbnQpIHtcbiAgICBsZXQgcm90YXRpb25NYXRyaXggPSBuZXcgTWF0cml4KE1hdGguY29zKHRoZXRhKSwgTWF0aC5zaW4odGhldGEpLCAtTWF0aC5zaW4odGhldGEpLCBNYXRoLmNvcyh0aGV0YSkpXG4gICAgaWYgKGFib3V0UG9pbnQpIHtcbiAgICAgIHJvdGF0aW9uTWF0cml4ID0gTWF0cml4LnRyYW5zbGF0aW9uKGFib3V0UG9pbnQueCwgYWJvdXRQb2ludC55KVxuICAgICAgICAuY29uY2F0KHJvdGF0aW9uTWF0cml4KVxuICAgICAgICAuY29uY2F0KE1hdHJpeC50cmFuc2xhdGlvbigtYWJvdXRQb2ludC54LCAtYWJvdXRQb2ludC55KSlcbiAgICB9XG4gICAgcmV0dXJuIHJvdGF0aW9uTWF0cml4XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IE1hdHJpeCh0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB0aGlzLmQsIHRoaXMudHgsIHRoaXMudHkpXG4gIH1cbiAgY29uY2F0KG1hdHJpeDogTWF0cml4KSB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgoXG4gICAgICB0aGlzLmEgKiBtYXRyaXguYSArIHRoaXMuYyAqIG1hdHJpeC5iLFxuICAgICAgdGhpcy5iICogbWF0cml4LmEgKyB0aGlzLmQgKiBtYXRyaXguYixcbiAgICAgIHRoaXMuYSAqIG1hdHJpeC5jICsgdGhpcy5jICogbWF0cml4LmQsXG4gICAgICB0aGlzLmIgKiBtYXRyaXguYyArIHRoaXMuZCAqIG1hdHJpeC5kLFxuICAgICAgdGhpcy5hICogbWF0cml4LnR4ICsgdGhpcy5jICogbWF0cml4LnR5ICsgdGhpcy50eCxcbiAgICAgIHRoaXMuYiAqIG1hdHJpeC50eCArIHRoaXMuZCAqIG1hdHJpeC50eSArIHRoaXMudHlcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogR2l2ZW4gYSBwb2ludCBpbiB0aGUgcHJlLXRyYW5zZm9ybSBjb29yZGluYXRlIHNwYWNlLCByZXR1cm5zIHRoZSBjb29yZGluYXRlcyBvZlxuICAgKiB0aGF0IHBvaW50IGFmdGVyIHRoZSB0cmFuc2Zvcm1hdGlvbiBvY2N1cnMuIFVubGlrZSB0aGUgc3RhbmRhcmQgdHJhbnNmb3JtYXRpb25cbiAgICogYXBwbGllZCB1c2luZyB0aGUgdHJhbnNmb3JtIG5ldyBQb2ludCgpIG1ldGhvZCwgdGhlIGRlbHRhVHJhbnNmb3JtbmV3IFBvaW50KCkgbWV0aG9kJ3NcbiAgICogdHJhbnNmb3JtYXRpb24gZG9lcyBub3QgY29uc2lkZXIgdGhlIHRyYW5zbGF0aW9uIHBhcmFtZXRlcnMgdHggYW5kIHR5LlxuICAgKi9cbiAgZGVsdGFUcmFuc2Zvcm1Qb2ludChwb2ludDogUG9pbnQpIHtcbiAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMuYSAqIHBvaW50LnggKyB0aGlzLmMgKiBwb2ludC55LCB0aGlzLmIgKiBwb2ludC54ICsgdGhpcy5kICogcG9pbnQueSlcbiAgfVxuICBpbnZlcnNlKCkge1xuICAgIGNvbnN0IGRldGVybWluYW50ID0gdGhpcy5hICogdGhpcy5kIC0gdGhpcy5iICogdGhpcy5jXG4gICAgcmV0dXJuIG5ldyBNYXRyaXgoXG4gICAgICB0aGlzLmQgLyBkZXRlcm1pbmFudCxcbiAgICAgIC10aGlzLmIgLyBkZXRlcm1pbmFudCxcbiAgICAgIC10aGlzLmMgLyBkZXRlcm1pbmFudCxcbiAgICAgIHRoaXMuYSAvIGRldGVybWluYW50LFxuICAgICAgKHRoaXMuYyAqIHRoaXMudHkgLSB0aGlzLmQgKiB0aGlzLnR4KSAvIGRldGVybWluYW50LFxuICAgICAgKHRoaXMuYiAqIHRoaXMudHggLSB0aGlzLmEgKiB0aGlzLnR5KSAvIGRldGVybWluYW50XG4gICAgKVxuICB9XG4gIHJvdGF0ZSh0aGV0YTogbnVtYmVyLCBhYm91dFBvaW50PzogUG9pbnQpIHtcbiAgICByZXR1cm4gdGhpcy5jb25jYXQoTWF0cml4LnJvdGF0aW9uKHRoZXRhLCBhYm91dFBvaW50KSlcbiAgfVxuICBzY2FsZShzeDogbnVtYmVyLCBzeT86IG51bWJlciwgYWJvdXRQb2ludD86IFBvaW50KSB7XG4gICAgcmV0dXJuIHRoaXMuY29uY2F0KE1hdHJpeC5zY2FsZShzeCwgc3ksIGFib3V0UG9pbnQpKVxuICB9XG4gIHRyYW5zbGF0ZSh0eDogbnVtYmVyLCB0eTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uY2F0KE1hdHJpeC50cmFuc2xhdGlvbih0eCwgdHkpKVxuICB9XG4gIHRyYW5zZm9ybVBvaW50KHBvaW50OiBQb2ludCkge1xuICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy5hICogcG9pbnQueCArIHRoaXMuYyAqIHBvaW50LnkgKyB0aGlzLnR4LCB0aGlzLmIgKiBwb2ludC54ICsgdGhpcy5kICogcG9pbnQueSArIHRoaXMudHkpXG4gIH1cbn1cbiIsImltcG9ydCBHQ2FudmFzIGZyb20gJy4vR0NhbnZhcydcbmltcG9ydCB7XG4gIEFsbENvbW1hbmRQYXJhbXMsXG4gIFplcm9QYXJhbXMsXG4gIFJhcGlkUGFyYW1zLFxuICBMaW5lYXJQYXJhbXMsXG4gIEFyY1BhcmFtcyxcbiAgRWxsaXBzZVBhcmFtcyxcbiAgVW5pdCxcbn0gZnJvbSAnLi9kcml2ZXJzL0RyaXZlcidcbmltcG9ydCBQYXRoIGZyb20gJy4vUGF0aCdcbmltcG9ydCBQb2ludCBmcm9tICcuL1BvaW50J1xuaW1wb3J0IFN1YlBhdGgsIHtcbiAgQmV6aWVyQ3VydmVUb0FjdGlvbixcbiAgRWxsaXBzZUFjdGlvbixcbiAgTGluZVRvQWN0aW9uLFxuICBNb3ZlVG9BY3Rpb24sXG4gIFF1YWRyYXRpY0N1cnZlVG9BY3Rpb24sXG59IGZyb20gJy4vU3ViUGF0aCdcbmltcG9ydCB7IGFyY1RvUG9pbnRzLCBwb2ludHNUb0FyYywgc2FtZUZsb2F0LCBzYW1lUG9zIH0gZnJvbSAnLi91dGlscy9wYXRoVXRpbHMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdGlvbiB7XG4gIHB1YmxpYyBjdXJyZW50VW5pdDogVW5pdFxuICBwdWJsaWMgY3VycmVudFRvb2xEaWFtZXRlcjogbnVtYmVyXG4gIHB1YmxpYyBjdXJyZW50U3BlZWQ6IG51bWJlclxuICBwdWJsaWMgY3VycmVudEZlZWQ6IG51bWJlclxuICBwdWJsaWMgY3VycmVudEF0YzogbnVtYmVyXG4gIHB1YmxpYyBwb3NpdGlvbjogUG9pbnQgPSBuZXcgUG9pbnQoKVxuICBwdWJsaWMgY3R4OiBHQ2FudmFzXG5cbiAgY29uc3RydWN0b3IoY3R4OiBHQ2FudmFzKSB7XG4gICAgdGhpcy5jdHggPSBjdHhcbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpIHtcbiAgICB0aGlzLmN1cnJlbnRVbml0ID0gdW5kZWZpbmVkXG4gICAgdGhpcy5jdXJyZW50VG9vbERpYW1ldGVyID0gdW5kZWZpbmVkXG4gICAgdGhpcy5jdXJyZW50U3BlZWQgPSB1bmRlZmluZWRcbiAgICB0aGlzLmN1cnJlbnRGZWVkID0gdW5kZWZpbmVkXG4gICAgdGhpcy5jdXJyZW50QXRjID0gdW5kZWZpbmVkXG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBQb2ludCgpXG4gIH1cblxuICBwdWJsaWMgcmV0cmFjdCgpIHtcbiAgICB0aGlzLmN0eC5kcml2ZXIuc2VuZChgTTAzIFMwOTBgKVxuICB9XG4gIHB1YmxpYyBwbHVuZ2UoKSB7XG4gICAgdGhpcy5jdHguZHJpdmVyLnNlbmQoYE0wMyBTMDcwYClcbiAgfVxuICBwdWJsaWMgemVybyhwYXJhbXM6IFplcm9QYXJhbXMpIHtcbiAgICB0aGlzLmN0eC5kcml2ZXIuemVybyhwYXJhbXMpXG4gIH1cblxuICBwdWJsaWMgcmFwaWQocGFyYW1zOiBSYXBpZFBhcmFtcykge1xuICAgIGNvbnN0IG5ld1Bvc2l0aW9uID0gdGhpcy5wb3N0UHJvY2VzcyhwYXJhbXMpXG4gICAgaWYgKCFuZXdQb3NpdGlvbikgcmV0dXJuXG4gICAgdGhpcy5jdHguZHJpdmVyLnJhcGlkKHBhcmFtcylcbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3UG9zaXRpb25cbiAgfVxuXG4gIHB1YmxpYyBsaW5lYXIocGFyYW1zOiBMaW5lYXJQYXJhbXMpIHtcbiAgICBjb25zdCBuZXdQb3NpdGlvbiA9IHRoaXMucG9zdFByb2Nlc3MocGFyYW1zKVxuICAgIGlmICghbmV3UG9zaXRpb24pIHJldHVyblxuXG4gICAgLy8gaWYocGFyYW1zLnogLSB0aGlzLnBvc2l0aW9uLnogPiAxMClcbiAgICAvLyAgIGRlYnVnZ2VyO1xuXG4gICAgdGhpcy5jdHguZHJpdmVyLmxpbmVhcihwYXJhbXMpXG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ld1Bvc2l0aW9uXG4gIH1cbiAgcHVibGljIGFyY0NXKHBhcmFtczogQXJjUGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJjKHBhcmFtcywgZmFsc2UpXG4gIH1cbiAgcHVibGljIGFyY0NDVyhwYXJhbXM6IEFyY1BhcmFtcykge1xuICAgIHJldHVybiB0aGlzLmFyYyhwYXJhbXMsIHRydWUpXG4gIH1cbiAgcHVibGljIGFyYyhwYXJhbXM6IEFyY1BhcmFtcywgY2N3OiBib29sZWFuID0gZmFsc2UpIHtcbiAgICBjb25zdCBuZXdQb3NpdGlvbiA9IHRoaXMucG9zdFByb2Nlc3MoeyAuLi5wYXJhbXMsIHo6IHRoaXMucG9zaXRpb24ueiB8fCAwIH0pXG4gICAgLy8gTm90ZTogQ2FuIGJlIGN5Y2xpYyBzbyB3ZSBkb24ndCBpZ25vcmUgaXQgaWYgdGhlIHBvc2l0aW9uIGlzIHRoZSBzYW1lXG4gICAgY29uc3QgY3ggPSB0aGlzLnBvc2l0aW9uLnggKyAocGFyYW1zLmkgfHwgMClcbiAgICBjb25zdCBjeSA9IHRoaXMucG9zaXRpb24ueSArIChwYXJhbXMuaiB8fCAwKVxuICAgIGNvbnN0IGFyYyA9IHBvaW50c1RvQXJjKG5ldyBQb2ludChjeCwgY3kpLCB0aGlzLnBvc2l0aW9uLCBuZXcgUG9pbnQocGFyYW1zLngsIHBhcmFtcy55KSlcblxuICAgIGNvbnN0IGxlbmd0aCA9IGFyYy5yYWRpdXMgKiAoYXJjLmVuZCAtIGFyYy5zdGFydClcbiAgICBsZXQgZiA9IGxlbmd0aCAvICgxIC8gdGhpcy5jdHguZmVlZClcbiAgICBmID0gTWF0aC5yb3VuZChmICogMTAwMDAwMCkgLyAxMDAwMDAwXG4gICAgaWYgKGYpIHBhcmFtcy5mID0gTWF0aC5hYnMoZilcblxuICAgIGlmICghY2N3ICYmIHRoaXMuY3R4LmRyaXZlci5hcmNDVykge1xuICAgICAgdGhpcy5jdHguZHJpdmVyLmFyY0NXKHBhcmFtcylcbiAgICB9IGVsc2UgaWYgKGNjdyAmJiB0aGlzLmN0eC5kcml2ZXIuYXJjQ0NXKSB7XG4gICAgICB0aGlzLmN0eC5kcml2ZXIuYXJjQ0NXKHBhcmFtcylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbnRlcnBvbGF0ZSgnYXJjJywgW2N4LCBjeSwgYXJjLnJhZGl1cywgYXJjLnN0YXJ0LCBhcmMuZW5kLCBjY3ddLCBwYXJhbXMueiB8fCAwKVxuICAgIH1cblxuICAgIGlmIChuZXdQb3NpdGlvbikgdGhpcy5wb3NpdGlvbiA9IG5ld1Bvc2l0aW9uXG4gIH1cblxuICBwdWJsaWMgcG9zdFByb2Nlc3MocGFyYW1zOiBQYXJ0aWFsPEFsbENvbW1hbmRQYXJhbXM+KSB7XG4gICAgLy8gU3luYyBtZXRhXG4gICAgaWYgKHRoaXMuY3R4LmRyaXZlci51bml0ICYmIHRoaXMuY3R4LnVuaXQgIT0gdGhpcy5jdXJyZW50VW5pdCkge1xuICAgICAgdGhpcy5jdHguZHJpdmVyLnVuaXQodGhpcy5jdHgudW5pdClcbiAgICAgIHRoaXMuY3VycmVudFVuaXQgPSB0aGlzLmN0eC51bml0XG4gICAgfVxuXG4gICAgLy8gU3luYyBtZXRhXG4gICAgaWYgKHRoaXMuY3R4LmRyaXZlci5tZXRhICYmIHRoaXMuY3R4LnRvb2xEaWFtZXRlciAhPSB0aGlzLmN1cnJlbnRUb29sRGlhbWV0ZXIpIHtcbiAgICAgIHRoaXMuY3R4LmRyaXZlci5tZXRhKHtcbiAgICAgICAgdG9vbERpYW1ldGVyOiB0aGlzLmN0eC50b29sRGlhbWV0ZXIsXG4gICAgICB9KVxuICAgICAgdGhpcy5jdXJyZW50VG9vbERpYW1ldGVyID0gdGhpcy5jdHgudG9vbERpYW1ldGVyXG4gICAgfVxuXG4gICAgLy8gU2V0IG5ldyBzcGluZGxlIGF0YyBjaGFuZ2VkXG4gICAgLy8gaWYgKHRoaXMuY3R4LmRyaXZlci5hdGMgJiYgdGhpcy5jdHguYXRjICE9IHRoaXMuY3VycmVudEF0Yykge1xuICAgIC8vICAgdGhpcy5jdHguZHJpdmVyLmF0Yyh0aGlzLmN0eC5hdGMpXG4gICAgLy8gICB0aGlzLmN1cnJlbnRBdGMgPSB0aGlzLmN0eC5hdGNcbiAgICAvLyB9XG5cbiAgICAvLyBTZXQgbmV3IHNwaW5kbGUgc3BlZWQgY2hhbmdlZFxuICAgIGlmICh0aGlzLmN0eC5kcml2ZXIuc3BlZWQgJiYgdGhpcy5jdHguc3BlZWQgIT0gdGhpcy5jdXJyZW50U3BlZWQpIHtcbiAgICAgIHRoaXMuY3R4LmRyaXZlci5zcGVlZCh0aGlzLmN0eC5zcGVlZClcbiAgICAgIHRoaXMuY3VycmVudFNwZWVkID0gdGhpcy5jdHguc3BlZWRcbiAgICB9XG5cbiAgICAvLyBTZXQgbmV3IGZlZWRyYXRlIGNoYW5nZWRcbiAgICBpZiAodGhpcy5jdHguZHJpdmVyLmZlZWQgJiYgdGhpcy5jdHguZmVlZCAhPSB0aGlzLmN1cnJlbnRGZWVkKSB7XG4gICAgICAvLyBBbHdheXMgdXNlIGludmVyc2UgdGltZSBtb2RlXG4gICAgICAvLyBidXQgd2Ugb25seSBzZW5kIGEgRzkzIHdoZW4gdGhlcmUgaXMgYSBmZWVkcmF0ZS5cbiAgICAgIC8vIFRoaXMgYWxsb3dzIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggZ2xvYmFsXG4gICAgICAvLyBjbGFzc2ljIGZlZWRyYXRlcy5cbiAgICAgIHRoaXMuY3R4LmRyaXZlci5zZW5kKCdHOTMgKGludmVyc2UgdGltZSBtb2RlKScpXG4gICAgICB0aGlzLmN1cnJlbnRGZWVkID0gdGhpcy5jdHguZmVlZFxuICAgIH1cblxuICAgIC8vIFNldCBjb29sYW50IGlmIGNoYW5nZWRcbiAgICAvLyBpZiAodGhpcy5jdHguZHJpdmVyLmNvb2xhbnQgJiYgdGhpcy5jdHguY29vbGFudCAhPSB0aGlzLmN1cnJlbnRDb29sYW50KSB7XG4gICAgLy8gICB0aGlzLmN0eC5kcml2ZXIuY29vbGFudCh0aGlzLmN0eC5jb29sYW50KVxuICAgIC8vICAgdGhpcy5jdXJyZW50Q29vbGFudCA9IHRoaXMuY3R4LmNvb2xhbnRcbiAgICAvLyB9XG5cbiAgICBjb25zdCB2MSA9IG5ldyBQb2ludChcbiAgICAgICd4JyBpbiBwYXJhbXMgPyBwYXJhbXMueCA6IHRoaXMucG9zaXRpb24ueCxcbiAgICAgICd5JyBpbiBwYXJhbXMgPyBwYXJhbXMueSA6IHRoaXMucG9zaXRpb24ueSxcbiAgICAgICd6JyBpbiBwYXJhbXMgPyBwYXJhbXMueiA6IHRoaXMucG9zaXRpb24ueixcbiAgICAgICdhJyBpbiBwYXJhbXMgPyBwYXJhbXMuYSA6IHRoaXMucG9zaXRpb24uYVxuICAgIClcblxuICAgIGNvbnN0IHYyID0gdGhpcy5wb3NpdGlvblxuICAgIGNvbnN0IGRpc3QgPSBNYXRoLnNxcnQoTWF0aC5wb3codjIueCAtIHYxLngsIDIpICsgTWF0aC5wb3codjIueSAtIHYxLnksIDIpIC8qICsgTWF0aC5wb3codjIueiAtIHYxLnosIDIpKi8pXG5cbiAgICBpZiAoIXBhcmFtcy5mKSB7XG4gICAgICBsZXQgZiA9IGRpc3QgLyAoMSAvIHRoaXMuY3R4LmZlZWQpXG4gICAgICBmID0gTWF0aC5yb3VuZChmICogMTAwMDAwMCkgLyAxMDAwMDAwXG4gICAgICBpZiAoZikgcGFyYW1zLmYgPSBNYXRoLmFicyhmKVxuICAgIH1cblxuICAgIGlmIChzYW1lUG9zKHRoaXMucG9zaXRpb24sIHYxKSkgcmV0dXJuIGZhbHNlXG5cbiAgICAvLyB0aGlzLmN0eC5maWx0ZXJzLmZvckVhY2goZnVuY3Rpb24gKGYpIHtcbiAgICAvLyAgIGNvbnN0IHRtcCA9IGYuY2FsbCh0aGlzLmN0eCwgcGFyYW1zKVxuICAgIC8vICAgaWYgKHRtcCkge1xuICAgIC8vICAgICBmb3IgKGxldCBrIGluIHRtcCkge1xuICAgIC8vICAgICAgIHBhcmFtc1trXSA9IHRtcFtrXVxuICAgIC8vICAgICB9XG4gICAgLy8gICB9XG4gICAgLy8gfSlcblxuICAgIC8vIFJvdW5kIGRvd24gdGhlIGRlY2ltYWwgcG9pbnRzIHRvIDEwIG5hbm9tZXRlcnNcbiAgICAvLyBHb3R0YSBhY2NlcHQgdGhhdCB0aGVyZSdzIG5vIHdlJ3JlIHRoYXQgcHJlY2lzZS5cbiAgICBmb3IgKGxldCBrIGluIHBhcmFtcykge1xuICAgICAgY29uc3Qga2V5ID0gayBhcyBrZXlvZiBBbGxDb21tYW5kUGFyYW1zXG4gICAgICBpZiAodHlwZW9mIHBhcmFtc1trZXldID09PSAnbnVtYmVyJykge1xuICAgICAgICBwYXJhbXNba2V5XSA9IE1hdGgucm91bmQocGFyYW1zW2tleV0gKiAxMDAwMDApIC8gMTAwMDAwXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHYxXG4gIH1cblxuICBwdWJsaWMgaW50ZXJwb2xhdGUobmFtZToga2V5b2YgU3ViUGF0aCwgYXJnczogYW55W10sIHpFbmQ6IG51bWJlcikge1xuICAgIGNvbnN0IHBhdGggPSBuZXcgU3ViUGF0aCgpXG4gICAgY29uc3QgZnVuYyA9IHBhdGhbbmFtZV1cbiAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicpIGZ1bmMuYXBwbHkocGF0aCwgYXJncylcblxuICAgIGxldCBjdXJMZW4gPSAwXG4gICAgY29uc3QgdG90YWxMZW4gPSBwYXRoLmdldExlbmd0aCgpXG4gICAgY29uc3QgelN0YXJ0ID0gdGhpcy5wb3NpdGlvbi56XG5cbiAgICBmdW5jdGlvbiBoZWxpeCgpIHtcbiAgICAgIGNvbnN0IGZ1bGxEZWx0YSA9IHpFbmQgLSB6U3RhcnRcbiAgICAgIGNvbnN0IHJhdGlvID0gY3VyTGVuIC8gdG90YWxMZW5cbiAgICAgIGNvbnN0IGN1ckRlbHRhID0gZnVsbERlbHRhICogcmF0aW9cbiAgICAgIHJldHVybiB6U3RhcnQgKyBjdXJEZWx0YVxuICAgIH1cblxuICAgIGNvbnN0IHB0cyA9IHBhdGguZ2V0UG9pbnRzKDQwKVxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gcHRzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgY29uc3QgcCA9IHB0c1tpXVxuXG4gICAgICBjb25zdCB4byA9IHAueCAtIHRoaXMucG9zaXRpb24ueFxuICAgICAgY29uc3QgeW8gPSBwLnkgLSB0aGlzLnBvc2l0aW9uLnlcbiAgICAgIGN1ckxlbiArPSBNYXRoLnNxcnQoeG8gKiB4byArIHlvICogeW8pXG5cbiAgICAgIHRoaXMubGluZWFyKHsgeDogcC54LCB5OiBwLnksIHo6IGhlbGl4KCkgfSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZm9sbG93UGF0aChwYXRoOiBQYXRoIHwgU3ViUGF0aCwgekVuZDogbnVtYmVyKSB7XG4gICAgaWYgKCFwYXRoKSByZXR1cm4gZmFsc2VcblxuICAgIGlmICgnc3ViUGF0aHMnIGluIHBhdGgpIHtcbiAgICAgIHBhdGguc3ViUGF0aHMuZm9yRWFjaCgoc3ViUGF0aCkgPT4ge1xuICAgICAgICB0aGlzLmZvbGxvd1BhdGgoc3ViUGF0aCwgekVuZClcbiAgICAgIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBsZXQgelN0YXJ0ID0gdGhpcy5wb3NpdGlvbi56XG4gICAgY29uc3QgdG90YWxMZW4gPSBwYXRoLmdldExlbmd0aCgpXG4gICAgbGV0IGN1ckxlbiA9IDBcblxuICAgIGNvbnN0IG1vdGlvbiA9IHRoaXNcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eFxuICAgIGNvbnN0IHJhbXBpbmcgPSBwYXRoLmlzQ2xvc2VkKCkgJiYgY3R4LnJhbXBpbmcgIT0gZmFsc2VcblxuICAgIGZ1bmN0aW9uIGhlbGl4KCkge1xuICAgICAgaWYgKCFyYW1waW5nKSByZXR1cm4gekVuZFxuXG4gICAgICAvLyBBdm9pZCBkaXZpZGUgYnkgMCBpbiBjYXNlIG9mXG4gICAgICAvLyBhIHNpbmdsZSBtb3ZlVG8gYWN0aW9uXG4gICAgICBpZiAodG90YWxMZW4gPT09IDApIHJldHVybiAwXG5cbiAgICAgIGNvbnN0IGZ1bGxEZWx0YSA9IHpFbmQgLSB6U3RhcnRcbiAgICAgIGNvbnN0IHJhdGlvID0gY3VyTGVuIC8gdG90YWxMZW5cbiAgICAgIGNvbnN0IGN1ckRlbHRhID0gZnVsbERlbHRhICogcmF0aW9cblxuICAgICAgcmV0dXJuIHpTdGFydCArIGN1ckRlbHRhXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUobmFtZToga2V5b2YgU3ViUGF0aCwgYXJnczogYW55W10pIHtcbiAgICAgIGNvbnN0IHBhdGggPSBuZXcgU3ViUGF0aCgpXG4gICAgICBwYXRoLm1vdmVUbyhtb3Rpb24ucG9zaXRpb24ueCwgbW90aW9uLnBvc2l0aW9uLnkpXG4gICAgICBjb25zdCBmdW5jID0gcGF0aFtuYW1lXVxuICAgICAgaWYgKHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nKSBmdW5jLmFwcGx5KHBhdGgsIGFyZ3MpXG5cbiAgICAgIGNvbnN0IHB0cyA9IHBhdGguZ2V0UG9pbnRzKDQwKVxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwdHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHAgPSBwdHNbaV1cbiAgICAgICAgbW90aW9uLmxpbmVhcih7IHg6IHAueCwgeTogcC55LCB6OiBoZWxpeCgpIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZWFjaCA9IHtcbiAgICAgIFsnTU9WRV9UTycgYXMgTW92ZVRvQWN0aW9uWyd0eXBlJ11dOiAoLi4uYXJnczogTW92ZVRvQWN0aW9uWydhcmdzJ10pID0+IHtcbiAgICAgICAgY29uc3QgW3gsIHldID0gYXJnc1xuICAgICAgICAvLyBPcHRpbWl6ZSBvdXQgMCBkaXN0YW5jZXMgbW92ZXNcbiAgICAgICAgY29uc3Qgc2FtZVhZID0gc2FtZUZsb2F0KHgsIHRoaXMucG9zaXRpb24ueCkgJiYgc2FtZUZsb2F0KHksIHRoaXMucG9zaXRpb24ueSlcbiAgICAgICAgaWYgKHJhbXBpbmcgJiYgc2FtZVhZKSByZXR1cm5cblxuICAgICAgICBpZiAoIXNhbWVYWSkgbW90aW9uLnJldHJhY3QoKVxuICAgICAgICBtb3Rpb24ucmFwaWQoeyB4LCB5IH0pXG4gICAgICAgIGlmICghc2FtZVhZKSBtb3Rpb24ucGx1bmdlKClcblxuICAgICAgICBpZiAoIXJhbXBpbmcpIG1vdGlvbi5saW5lYXIoeyB6OiB6RW5kIH0pXG4gICAgICAgIHpTdGFydCA9IG1vdGlvbi5wb3NpdGlvbi56XG4gICAgICB9LFxuICAgICAgWydMSU5FX1RPJyBhcyBMaW5lVG9BY3Rpb25bJ3R5cGUnXV06ICguLi5hcmdzOiBMaW5lVG9BY3Rpb25bJ2FyZ3MnXSkgPT4ge1xuICAgICAgICBjb25zdCBbeCwgeV0gPSBhcmdzXG4gICAgICAgIG1vdGlvbi5saW5lYXIoeyB4LCB5LCB6OiBoZWxpeCgpIH0pXG4gICAgICB9LFxuICAgICAgWydFTExJUFNFJyBhcyBFbGxpcHNlQWN0aW9uWyd0eXBlJ11dOiAoLi4uYXJnczogRWxsaXBzZUFjdGlvblsnYXJncyddKSA9PiB7XG4gICAgICAgIGNvbnN0IFt4LCB5LCByeCwgcnksIGFTdGFydCwgYUVuZCwgY2N3XSA9IGFyZ3NcbiAgICAgICAgLy8gRGV0ZWN0IHBsYWluIGFyY1xuICAgICAgICBpZiAoc2FtZUZsb2F0KHJ4LCByeSkpIHtcbiAgICAgICAgICBjb25zdCBwb2ludHMgPSBhcmNUb1BvaW50cyh4LCB5LCBhU3RhcnQsIGFFbmQsIHJ4KVxuICAgICAgICAgIGNvbnN0IHBhcmFtczogRWxsaXBzZVBhcmFtcyA9IHtcbiAgICAgICAgICAgIHg6IHBvaW50cy5lbmQueCxcbiAgICAgICAgICAgIHk6IHBvaW50cy5lbmQueSxcbiAgICAgICAgICAgIGk6IHggLSBwb2ludHMuc3RhcnQueCxcbiAgICAgICAgICAgIGo6IHkgLSBwb2ludHMuc3RhcnQueSxcbiAgICAgICAgICAgIHo6IGhlbGl4KCksXG4gICAgICAgICAgfVxuICAgICAgICAgIG1vdGlvbi5hcmMocGFyYW1zLCBjY3cpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJwb2xhdGUoJ2VsbGlwc2UnLCBhcmdzKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgWydCRVpJRVJfQ1VSVkVfVE8nIGFzIEJlemllckN1cnZlVG9BY3Rpb25bJ3R5cGUnXV06ICguLi5hcmdzOiBCZXppZXJDdXJ2ZVRvQWN0aW9uWydhcmdzJ10pID0+IHtcbiAgICAgICAgaW50ZXJwb2xhdGUoJ2JlemllckN1cnZlVG8nLCBhcmdzKVxuICAgICAgfSxcbiAgICAgIFsnUVVBRFJBVElDX0NVUlZFX1RPJyBhcyBRdWFkcmF0aWNDdXJ2ZVRvQWN0aW9uWyd0eXBlJ11dOiAoLi4uYXJnczogUXVhZHJhdGljQ3VydmVUb0FjdGlvblsnYXJncyddKSA9PiB7XG4gICAgICAgIGludGVycG9sYXRlKCdxdWFkcmF0aWNDdXJ2ZVRvJywgYXJncylcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXRoLmFjdGlvbnMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICBjb25zdCBhY3Rpb24gPSBwYXRoLmFjdGlvbnNbaV1cblxuICAgICAgaWYgKGkgIT0gMCkge1xuICAgICAgICBjb25zdCB4MCA9IHRoaXMucG9zaXRpb24ueFxuICAgICAgICBjb25zdCB5MCA9IHRoaXMucG9zaXRpb24ueVxuICAgICAgICBjdXJMZW4gKz0gcGF0aC5nZXRBY3Rpb25MZW5ndGgoeDAsIHkwLCBpKVxuICAgICAgfVxuXG4gICAgICAvLyBFdmVyeSBhY3Rpb24gc2hvdWxkIGJlIHBsdW5nZWQgZXhjZXB0IGZvciBtb3ZlXG4gICAgICAvLyBpZihpdGVtLmFjdGlvbiAhPT0gUGF0aC5hY3Rpb25zLk1PVkVfVE8pIHtcbiAgICAgIC8vIG1vdGlvbi5wbHVuZ2UoKTtcbiAgICAgIC8vIH1cblxuICAgICAgZWFjaFthY3Rpb24udHlwZV0uYXBwbHkodGhpcywgYWN0aW9uLmFyZ3MpXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgdHlwZSBVbml0ID0gJ21tJyB8ICdpbmNoJ1xuXG5leHBvcnQgdHlwZSBEcml2ZXJTdHJlYW0gPSB7XG4gIHdyaXRlOiAoc3RyOiBzdHJpbmcpID0+IHZvaWRcbiAgcmVzZXQ6ICgpID0+IHZvaWRcbn1cblxuZXhwb3J0IHR5cGUgQWxsQ29tbWFuZFBhcmFtcyA9IHtcbiAgeDogbnVtYmVyXG4gIHk6IG51bWJlclxuICB6OiBudW1iZXJcbiAgYTogbnVtYmVyXG4gIGI6IG51bWJlclxuICBjOiBudW1iZXJcbiAgaTogbnVtYmVyXG4gIGo6IG51bWJlclxuICBrOiBudW1iZXJcbiAgZjogbnVtYmVyXG4gIHQ6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBBcmNQYXJhbXMgPSBQYXJ0aWFsPFBpY2s8QWxsQ29tbWFuZFBhcmFtcywgJ3gnIHwgJ3knIHwgJ3onIHwgJ2knIHwgJ2onIHwgJ2YnPj5cbmV4cG9ydCB0eXBlIEVsbGlwc2VQYXJhbXMgPSBBcmNQYXJhbXNcbmV4cG9ydCB0eXBlIFJhcGlkUGFyYW1zID0gUGFydGlhbDxQaWNrPEFsbENvbW1hbmRQYXJhbXMsICd4JyB8ICd5JyB8ICd6JyB8ICdmJz4+XG5leHBvcnQgdHlwZSBMaW5lYXJQYXJhbXMgPSBQYXJ0aWFsPFBpY2s8QWxsQ29tbWFuZFBhcmFtcywgJ3gnIHwgJ3knIHwgJ3onIHwgJ2YnIHwgJ2EnPj5cbmV4cG9ydCB0eXBlIFplcm9QYXJhbXMgPSBQYXJ0aWFsPFBpY2s8QWxsQ29tbWFuZFBhcmFtcywgJ2EnPj5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHJpdmVyIHtcbiAgcHVibGljIHN0cmVhbTogRHJpdmVyU3RyZWFtXG5cbiAgY29uc3RydWN0b3Ioc3RyZWFtPzogRHJpdmVyU3RyZWFtKSB7XG4gICAgdGhpcy5zdHJlYW0gPSBzdHJlYW0gfHwge1xuICAgICAgd3JpdGU6IChzdHIpID0+IGNvbnNvbGUubG9nKHN0ciksXG4gICAgICByZXNldDogKCkgPT4ge30sXG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlc2V0KCkge1xuICAgIHRoaXMuc3RyZWFtLnJlc2V0KClcbiAgfVxuXG4gIHB1YmxpYyBzZW5kKC4uLmFyZ3M6IGFueVtdKSB7fVxuICBwdWJsaWMgaW5pdCgpIHt9XG4gIHB1YmxpYyB1bml0KG5hbWU6IFVuaXQpIHt9XG4gIHB1YmxpYyBzcGVlZChuOiBudW1iZXIpIHt9XG4gIHB1YmxpYyBmZWVkKG46IG51bWJlcikge31cbiAgcHVibGljIGNvb2xhbnQodHlwZTogJ21pc3QnIHwgJ2Zsb29kJyB8ICdvZmYnKSB7fVxuICBwdWJsaWMgemVybyhwYXJhbXM6IFplcm9QYXJhbXMpIHt9XG4gIC8vIHRvb2wgc2VsZWN0aW9uXG4gIHB1YmxpYyBhdGMoaWQ6IG51bWJlcikge31cbiAgcHVibGljIHJhcGlkKHBhcmFtczogUmFwaWRQYXJhbXMpIHt9XG4gIHB1YmxpYyBsaW5lYXIocGFyYW1zOiBMaW5lYXJQYXJhbXMpIHt9XG4gIHB1YmxpYyBhcmNDVyhwYXJhbXM6IEFyY1BhcmFtcykge31cbiAgcHVibGljIGFyY0NDVyhwYXJhbXM6IEFyY1BhcmFtcykge31cbiAgcHVibGljIGNvbW1lbnQoc3RyaW5nOiBzdHJpbmcpIHt9XG4gIHB1YmxpYyBtZXRhKHBhcmFtczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge31cbn1cbiIsImltcG9ydCBEcml2ZXIgZnJvbSAnLi9Ecml2ZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE51bGxEcml2ZXIgZXh0ZW5kcyBEcml2ZXIge31cbiIsImltcG9ydCBNYXRyaXggZnJvbSAnLi9NYXRyaXgnXG5pbXBvcnQgUG9pbnQgZnJvbSAnLi9Qb2ludCdcbmltcG9ydCBQYXRoLCB7IEJvdW5kcywgV2luZGluZ1J1bGUgfSBmcm9tICcuL1BhdGgnXG5pbXBvcnQgU3ViUGF0aCwgeyBBcmNBY3Rpb24sIEJlemllckN1cnZlVG9BY3Rpb24sIFF1YWRyYXRpY0N1cnZlVG9BY3Rpb24gfSBmcm9tICcuL1N1YlBhdGgnXG5pbXBvcnQgeyBhcmNUb1BvaW50cywgcG9pbnRzVG9BcmMgfSBmcm9tICcuL3V0aWxzL3BhdGhVdGlscydcbmltcG9ydCBNb3Rpb24gZnJvbSAnLi9Nb3Rpb24nXG5pbXBvcnQgRHJpdmVyLCB7IFVuaXQgfSBmcm9tICcuL2RyaXZlcnMvRHJpdmVyJ1xuaW1wb3J0IEdDb2RlRHJpdmVyIGZyb20gJy4vZHJpdmVycy9HQ29kZURyaXZlcidcbmltcG9ydCBOdWxsRHJpdmVyIGZyb20gJy4vZHJpdmVycy9OdWxsRHJpdmVyJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEdDYW52YXNDb25maWcge1xuICB3aWR0aDogbnVtYmVyXG4gIGhlaWdodDogbnVtYmVyXG4gIHZpcnR1YWxTY2FsZT86IG51bWJlclxuICBiYWNrZ3JvdW5kPzogc3RyaW5nXG4gIGNhbnZhcz86IEhUTUxDYW52YXNFbGVtZW50XG4gIG91dHB1dD86IEhUTUxUZXh0QXJlYUVsZW1lbnRcbiAgZHJpdmVyPzogRHJpdmVyXG59XG5cbmV4cG9ydCB0eXBlIFN0cm9rZUFsaWduID0gJ291dGVyJyB8ICdpbm5lcicgfCAnY2VudGVyJ1xuXG5leHBvcnQgdHlwZSBDYW52YXNTdGFja0l0ZW0gPSB7XG4gIG1hdHJpeDogTWF0cml4XG4gIGZvbnQ6IHN0cmluZ1xuICBmaWxsU3R5bGU6IHN0cmluZ1xuICBzdHJva2VTdHlsZTogc3RyaW5nXG4gIHRvcDogbnVtYmVyXG4gIGRlcHRoOiBudW1iZXJcbiAgZGVwdGhPZkN1dDogbnVtYmVyXG4gIHRvb2xEaWFtZXRlcjogbnVtYmVyXG4gIGFsaWduOiBTdHJva2VBbGlnblxuICBmaWx0ZXJzOiBhbnlbXVxufVxudHlwZSBDYW52YXNTdGFja0l0ZW1LZXkgPSBrZXlvZiBDYW52YXNTdGFja0l0ZW1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR0NhbnZhcyB7XG4gIHB1YmxpYyBjYW52YXNXaWR0aDogbnVtYmVyXG4gIHB1YmxpYyBjYW52YXNIZWlnaHQ6IG51bWJlclxuICBwdWJsaWMgdmlydHVhbFNjYWxlOiBudW1iZXJcbiAgcHVibGljIG91dHB1dEVsZW1lbnQ/OiBIVE1MVGV4dEFyZWFFbGVtZW50XG4gIHB1YmxpYyBjYW52YXNFbGVtZW50PzogSFRNTENhbnZhc0VsZW1lbnRcbiAgcHVibGljIGN0eD86IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRFxuICBwdWJsaWMgbW90aW9uOiBNb3Rpb25cbiAgcHVibGljIGRyaXZlcjogR0NvZGVEcml2ZXJcblxuICBwdWJsaWMgY2FudmFzOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH1cblxuICAvLyBjbmMtc3BlY2lmaWMgc3R1ZmZcbiAgcHVibGljIHByZWNpc2lvbjogbnVtYmVyID0gMjBcbiAgcHVibGljIGFsaWduOiBTdHJva2VBbGlnbiA9ICdjZW50ZXInXG4gIHB1YmxpYyByYW1waW5nOiBib29sZWFuID0gdHJ1ZVxuICBwdWJsaWMgZGVwdGg6IG51bWJlciA9IDBcbiAgcHVibGljIGRlcHRoT2ZDdXQ6IG51bWJlciA9IDBcbiAgcHVibGljIHJldHJhY3QgPSAwXG4gIHB1YmxpYyBzcGVlZCA9IDUwMFxuICBwdWJsaWMgZmVlZCA9IDEwMDBcbiAgcHVibGljIGFjdCA9IDBcbiAgcHVibGljIHVuaXQ6IFVuaXQgPSAnbW0nXG4gIHB1YmxpYyB0b3A6IG51bWJlciA9IDBcbiAgcHVibGljIHRvb2xEaWFtZXRlcjogbnVtYmVyID0gMC4xNVxuXG4gIHByaXZhdGUgbWF0cml4OiBNYXRyaXggPSBuZXcgTWF0cml4KClcbiAgcHJpdmF0ZSBjbGlwUmVnaW9uPzogUGF0aFxuICBwcml2YXRlIHBhdGg/OiBQYXRoXG4gIHByaXZhdGUgc3ViUGF0aHM6IFN1YlBhdGhbXSA9IFtdXG4gIHByaXZhdGUgZmlsdGVyczogYW55W10gPSBbXSAvLyBubyBpZGVhIGhleVxuICBwcml2YXRlIHN0YWNrOiBDYW52YXNTdGFja0l0ZW1bXSA9IFtdXG5cbiAgLy8gdmFycyB0aGF0IGdldCByZWxheWVkIHRvIGNhbnZhc1xuICBwcml2YXRlIF9zdHJva2VTdHlsZTogc3RyaW5nID0gJyMwMDAwMDAnXG4gIHByaXZhdGUgX2ZpbGxTdHlsZTogc3RyaW5nID0gJyMwMDAwMDAnXG4gIHByaXZhdGUgX2ZvbnQ6IHN0cmluZyA9ICc3cHQgSGVsdmV0aWNhJ1xuICBwcml2YXRlIF9iYWNrZ3JvdW5kOiBzdHJpbmcgPSAnI2ZmZmZmZidcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IEdDYW52YXNDb25maWcpIHtcbiAgICB0aGlzLmRyaXZlciA9IGNvbmZpZy5kcml2ZXIgfHwgbmV3IE51bGxEcml2ZXIoKVxuICAgIHRoaXMubW90aW9uID0gbmV3IE1vdGlvbih0aGlzKVxuICAgIHRoaXMuY2FudmFzV2lkdGggPSBjb25maWcud2lkdGhcbiAgICB0aGlzLmNhbnZhc0hlaWdodCA9IGNvbmZpZy5oZWlnaHRcbiAgICB0aGlzLnZpcnR1YWxTY2FsZSA9IGNvbmZpZy52aXJ0dWFsU2NhbGUgfHwgMVxuICAgIGlmIChjb25maWcuY2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhc0VsZW1lbnQgPSBjb25maWcuY2FudmFzXG4gICAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzRWxlbWVudC5nZXRDb250ZXh0KCcyZCcpXG4gICAgfVxuICAgIGlmIChjb25maWcub3V0cHV0KSB0aGlzLm91dHB1dEVsZW1lbnQgPSBjb25maWcub3V0cHV0XG4gICAgaWYgKGNvbmZpZy5iYWNrZ3JvdW5kKSB0aGlzLl9iYWNrZ3JvdW5kID0gY29uZmlnLmJhY2tncm91bmRcblxuICAgIHRoaXMucmVzZXQoKVxuICB9XG5cbiAgcHVibGljIHJlc2V0KCkge1xuICAgIGNvbnNvbGUuY2xlYXIoKVxuICAgIHRoaXMuZHJpdmVyLnJlc2V0KClcbiAgICB0aGlzLm1vdGlvbi5yZXNldCgpXG4gICAgdGhpcy5wYXRoID0gdW5kZWZpbmVkXG4gICAgdGhpcy5jbGlwUmVnaW9uID0gdW5kZWZpbmVkXG4gICAgdGhpcy5zdWJQYXRocyA9IFtdXG4gICAgdGhpcy5maWx0ZXJzID0gW11cbiAgICB0aGlzLnN0YWNrID0gW11cbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgoKVxuXG4gICAgaWYgKHRoaXMuY3R4KSB7XG4gICAgICB0aGlzLmN0eC5yZXNldFRyYW5zZm9ybSgpXG5cbiAgICAgIC8vIHNjYWxlIGRyYXdhYmxlIGFyZWEgdG8gbWF0Y2ggZGV2aWNlIHBpeGVsIHJhdGlvXG4gICAgICB0aGlzLmN0eC5zY2FsZSh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgd2luZG93LmRldmljZVBpeGVsUmF0aW8pXG5cbiAgICAgIC8vIHNjYWxlIGRyYXdhYmxlIGFyZWEgdG8gbWF0Y2ggdmlydHVhbCB6b29tXG4gICAgICB0aGlzLmN0eC5zY2FsZSh0aGlzLnZpcnR1YWxTY2FsZSwgdGhpcy52aXJ0dWFsU2NhbGUpXG5cbiAgICAgIC8vIGRyYXcgcmVjdCB0aGUgYWN0dWFsIHNpemUgb2YgdGhlIGNhbnZhcyAtIHNob3VsZCBmaWxsIHdob2xlIHNjcmVlbiBhdCB0aGlzIHN0YWdlXG4gICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSB0aGlzLl9iYWNrZ3JvdW5kXG4gICAgICB0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLmNhbnZhc1dpZHRoLCB0aGlzLmNhbnZhc0hlaWdodClcblxuICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMSAvIHRoaXMudmlydHVhbFNjYWxlXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCBzdHJva2VTdHlsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3Ryb2tlU3R5bGVcbiAgfVxuICBwdWJsaWMgc2V0IHN0cm9rZVN0eWxlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zdHJva2VTdHlsZSA9IHZhbHVlXG4gICAgaWYgKHRoaXMuY3R4KSB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IHZhbHVlXG4gIH1cblxuICBwdWJsaWMgZ2V0IGZpbGxTdHlsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsbFN0eWxlXG4gIH1cbiAgcHVibGljIHNldCBmaWxsU3R5bGUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2ZpbGxTdHlsZSA9IHZhbHVlXG4gICAgaWYgKHRoaXMuY3R4KSB0aGlzLmN0eC5maWxsU3R5bGUgPSB2YWx1ZVxuICB9XG5cbiAgcHVibGljIGdldCBmb250KCkge1xuICAgIHJldHVybiB0aGlzLl9maWxsU3R5bGVcbiAgfVxuICBwdWJsaWMgc2V0IGZvbnQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2ZvbnQgPSB2YWx1ZVxuICAgIGlmICh0aGlzLmN0eCkgdGhpcy5jdHguZm9udCA9IHZhbHVlXG4gIH1cblxuICBwdWJsaWMgc2F2ZSgpIHtcbiAgICB0aGlzLnN0YWNrLnB1c2goe1xuICAgICAgbWF0cml4OiB0aGlzLm1hdHJpeCxcbiAgICAgIGZvbnQ6IHRoaXMuZm9udCxcbiAgICAgIGRlcHRoOiB0aGlzLmRlcHRoLFxuICAgICAgZGVwdGhPZkN1dDogdGhpcy5kZXB0aE9mQ3V0LFxuICAgICAgdG9vbERpYW1ldGVyOiB0aGlzLnRvb2xEaWFtZXRlcixcbiAgICAgIGFsaWduOiB0aGlzLmFsaWduLFxuICAgICAgdG9wOiB0aGlzLnRvcCxcbiAgICAgIHN0cm9rZVN0eWxlOiB0aGlzLnN0cm9rZVN0eWxlLFxuICAgICAgZmlsbFN0eWxlOiB0aGlzLmZpbGxTdHlsZSxcbiAgICAgIGZpbHRlcnM6IHRoaXMuZmlsdGVycy5zbGljZSgpLFxuICAgIH0pXG4gIH1cbiAgcHVibGljIHJlc3RvcmUoKSB7XG4gICAgY29uc3QgcHJldiA9IHRoaXMuc3RhY2sucG9wKClcbiAgICA7KE9iamVjdC5rZXlzKHByZXYpIGFzIENhbnZhc1N0YWNrSXRlbUtleVtdKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgdGhpc1trZXldID0gcHJldltrZXldXG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBiZWdpblBhdGgoKSB7XG4gICAgdGhpcy5wYXRoID0gbmV3IFBhdGgoKVxuICAgIHRoaXMuY3R4Py5iZWdpblBhdGgoKVxuICB9XG5cbiAgcHVibGljIHRyYW5zZm9ybShhPzogbnVtYmVyLCBiPzogbnVtYmVyLCBjPzogbnVtYmVyLCBkPzogbnVtYmVyLCBlPzogbnVtYmVyLCBmPzogbnVtYmVyKSB7XG4gICAgdGhpcy5tYXRyaXggPSB0aGlzLm1hdHJpeC5jb25jYXQobmV3IE1hdHJpeChhLCBiLCBjLCBkLCBlLCBmKSlcbiAgICB0aGlzLmN0eD8udHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpXG4gIH1cblxuICBwdWJsaWMgc2V0VHJhbnNmb3JtKGE/OiBudW1iZXIsIGI/OiBudW1iZXIsIGM/OiBudW1iZXIsIGQ/OiBudW1iZXIsIGU/OiBudW1iZXIsIGY/OiBudW1iZXIpIHtcbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgoYSwgYiwgYywgZCwgZSwgZilcbiAgICB0aGlzLmN0eD8uc2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpXG4gIH1cblxuICBwdWJsaWMgcmVzZXRUcmFuc2Zvcm0oKSB7XG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4KClcbiAgICB0aGlzLmN0eD8ucmVzZXRUcmFuc2Zvcm0oKVxuICB9XG5cbiAgcHVibGljIHJvdGF0ZSh0aGV0YTogbnVtYmVyKSB7XG4gICAgdGhpcy5tYXRyaXggPSB0aGlzLm1hdHJpeC5yb3RhdGUodGhldGEpXG4gICAgdGhpcy5jdHg/LnJvdGF0ZSh0aGV0YSlcbiAgfVxuXG4gIHB1YmxpYyB0cmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLm1hdHJpeCA9IHRoaXMubWF0cml4LnRyYW5zbGF0ZSh4LCB5KVxuICAgIHRoaXMuY3R4Py50cmFuc2xhdGUoeCwgeSlcbiAgfVxuXG4gIHB1YmxpYyBzY2FsZSh4OiBudW1iZXIsIHk/OiBudW1iZXIpIHtcbiAgICB0aGlzLm1hdHJpeCA9IHRoaXMubWF0cml4LnNjYWxlKHgsIHkpXG4gICAgdGhpcy5jdHg/LnNjYWxlKHgsIHkpXG4gIH1cblxuICAvLyBOb3RlOiB0aGlzIHdhcyBtYXJrZWQgYXMgdG8tdGlkeSBieSBPRyBhdXRob3JcbiAgcHJpdmF0ZSB0cmFuc2Zvcm1Qb2ludChhOiBbeDogbnVtYmVyLCB5OiBudW1iZXJdIHwgUG9pbnQpOiBQb2ludCB7XG4gICAgLy8gaSA9IGkgfHwgMFxuICAgIGlmIChhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGNvbnN0IHYgPSB0aGlzLm1hdHJpeC50cmFuc2Zvcm1Qb2ludChuZXcgUG9pbnQoYVswXSwgYVsxXSkpXG4gICAgICAvLyAgIHZhciB2ID0gbmV3IFBvaW50KGFbaV0sIGFbaSArIDFdKVxuICAgICAgLy8gICB2ID0gdGhpcy5tYXRyaXgudHJhbnNmb3JtUG9pbnQodilcbiAgICAgIC8vICAgYVtpXSA9IHYueFxuICAgICAgLy8gICBhW2kgKyAxXSA9IHYueVxuICAgICAgcmV0dXJuIG5ldyBQb2ludCh2LngsIHYueSlcbiAgICB9IGVsc2UgaWYgKGEueCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgdiA9IG5ldyBQb2ludChhLngsIGEueSlcbiAgICAgIHYgPSB0aGlzLm1hdHJpeC50cmFuc2Zvcm1Qb2ludCh2KVxuICAgICAgYS54ID0gdi54XG4gICAgICBhLnkgPSB2LnlcbiAgICAgIHJldHVybiB2XG4gICAgfVxuICB9XG4gIHByaXZhdGUgZW5zdXJlUGF0aCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIGlmICghdGhpcy5wYXRoKSByZXR1cm5cbiAgICBpZiAodGhpcy5wYXRoLnN1YlBhdGhzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5wYXRoLm1vdmVUbyh4LCB5KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBtb3ZlVG8oX3g6IG51bWJlciwgX3k6IG51bWJlcikge1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy50cmFuc2Zvcm1Qb2ludChbX3gsIF95XSlcbiAgICB0aGlzLnBhdGgubW92ZVRvKHgsIHkpXG4gICAgdGhpcy5jdHg/Lm1vdmVUbyh4LCB5KVxuICB9XG5cbiAgcHVibGljIGxpbmVUbyhfeDogbnVtYmVyLCBfeTogbnVtYmVyKSB7XG4gICAgY29uc3QgeyB4LCB5IH0gPSB0aGlzLnRyYW5zZm9ybVBvaW50KFtfeCwgX3ldKVxuICAgIHRoaXMuZW5zdXJlUGF0aCh4LCB5KVxuICAgIHRoaXMucGF0aC5saW5lVG8oeCwgeSlcbiAgICB0aGlzLmN0eD8ubGluZVRvKHgsIHkpXG4gIH1cblxuICBwdWJsaWMgYXJjVG8oX3gxOiBudW1iZXIsIF95MTogbnVtYmVyLCBfeDI6IG51bWJlciwgX3kyOiBudW1iZXIsIHJhZGl1czogbnVtYmVyKSB7XG4gICAgLy8gVE9ETzogdGhpcyBkb2Vzbid0IG11dGF0ZSB0aGUgYXJndW1lbnRzIGFycmF5IHlldFxuICAgIGNvbnN0IHsgeDogeDEsIHk6IHkxIH0gPSB0aGlzLnRyYW5zZm9ybVBvaW50KFtfeDEsIF95MV0pXG4gICAgY29uc3QgeyB4OiB4MiwgeTogeTIgfSA9IHRoaXMudHJhbnNmb3JtUG9pbnQoW194MiwgX3kyXSlcblxuICAgIHRoaXMuZW5zdXJlUGF0aCh4MSwgeTEpXG5cbiAgICBjb25zdCBwMCA9IHRoaXMucGF0aC5sYXN0UG9pbnQoKSB8fCBuZXcgUG9pbnQoKVxuICAgIGNvbnN0IHAxID0gbmV3IFBvaW50KHgxLCB5MSlcbiAgICBjb25zdCBwMiA9IG5ldyBQb2ludCh4MiwgeTIpXG4gICAgY29uc3QgdjAxID0gcDAuc3VidHJhY3QocDEpXG4gICAgY29uc3QgdjIxID0gcDIuc3VidHJhY3QocDEpXG5cbiAgICAvLyBzaW4oQSAtIEIpID0gc2luKEEpICogY29zKEIpIC0gc2luKEIpICogY29zKEEpXG4gICAgY29uc3QgY3Jvc3MgPSB2MDEueCAqIHYyMS55IC0gdjAxLnkgKiB2MjEueFxuXG4gICAgaWYgKE1hdGguYWJzKGNyb3NzKSA8IDFlLTEwKSB7XG4gICAgICAvLyBvbiBvbmUgbGluZVxuICAgICAgdGhpcy5saW5lVG8oeDEsIHkxKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZDAxID0gdjAxLm1hZ25pdHVkZSgpXG4gICAgY29uc3QgZDIxID0gdjIxLm1hZ25pdHVkZSgpXG4gICAgY29uc3QgYW5nbGUgPSAoTWF0aC5QSSAtIE1hdGguYWJzKE1hdGguYXNpbihjcm9zcyAvIChkMDEgKiBkMjEpKSkpIC8gMlxuICAgIGNvbnN0IHNwYW4gPSByYWRpdXMgKiBNYXRoLnRhbihhbmdsZSlcbiAgICBsZXQgcmF0ZSA9IHNwYW4gLyBkMDFcblxuICAgIGNvbnN0IHN0YXJ0UG9pbnQgPSBuZXcgUG9pbnQocDEueCArIHYwMS54ICogcmF0ZSwgcDEueSArIHYwMS55ICogcmF0ZSlcblxuICAgIHJhdGUgPSBzcGFuIC8gZDIxXG5cbiAgICBjb25zdCBlbmRQb2ludCA9IG5ldyBQb2ludChwMS54ICsgdjIxLnggKiByYXRlLCBwMS55ICsgdjIxLnkgKiByYXRlKVxuXG4gICAgY29uc3QgbWlkUG9pbnQgPSBuZXcgUG9pbnQoKHN0YXJ0UG9pbnQueCArIGVuZFBvaW50LngpIC8gMiwgKHN0YXJ0UG9pbnQueSArIGVuZFBvaW50LnkpIC8gMilcblxuICAgIGNvbnN0IHZtMSA9IG1pZFBvaW50LnN1YnRyYWN0KHAxKVxuICAgIGNvbnN0IGRtMSA9IHZtMS5tYWduaXR1ZGUoKVxuICAgIGNvbnN0IGQgPSBNYXRoLnNxcnQocmFkaXVzICogcmFkaXVzICsgc3BhbiAqIHNwYW4pXG5cbiAgICBjb25zdCBjZW50ZXJQb2ludCA9IG5ldyBQb2ludCgpXG4gICAgcmF0ZSA9IGQgLyBkbTFcbiAgICBjZW50ZXJQb2ludC54ID0gcDEueCArIHZtMS54ICogcmF0ZVxuICAgIGNlbnRlclBvaW50LnkgPSBwMS55ICsgdm0xLnkgKiByYXRlXG5cbiAgICBjb25zdCBhcmMgPSBwb2ludHNUb0FyYyhjZW50ZXJQb2ludCwgc3RhcnRQb2ludCwgZW5kUG9pbnQpXG5cbiAgICB0aGlzLnBhdGgubGluZVRvKHN0YXJ0UG9pbnQueCwgc3RhcnRQb2ludC55KVxuICAgIHRoaXMucGF0aC5hcmMoY2VudGVyUG9pbnQueCwgY2VudGVyUG9pbnQueSwgYXJjLnJhZGl1cywgYXJjLnN0YXJ0LCBhcmMuZW5kLCBjcm9zcyA+IDApXG5cbiAgICB0aGlzLmN0eD8uYXJjVG8oeDEsIHkxLCB4MiwgeTIsIHJhZGl1cylcbiAgfVxuXG4gIHB1YmxpYyBhcmMoLi4uYXJnczogQXJjQWN0aW9uWydhcmdzJ10pIHtcbiAgICBsZXQgW3gsIHksIHJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYW50aUNsb2Nrd2lzZV0gPSBhcmdzXG5cbiAgICAvLyBJbiB0aGUgY29udmVyc2lvbiB0byBwb2ludHMgd2UgbG9zZSB0aGUgZGlzdGluY3Rpb25cbiAgICAvLyBiZXR3ZWVuIDAgYW5kIHBpMiBzbyB3ZSBtdXN0IG9wdGltaXplIG91dCAwIGhlcmVcbiAgICAvLyBvciBlbHNlIHRoZXkgd2lsbCBiZSB0cmVhdGVkIGFzIGZ1bGwgY2lyY2xlcy5cblxuICAgIGlmIChhU3RhcnRBbmdsZSAtIGFFbmRBbmdsZSA9PT0gMCkgcmV0dXJuXG5cbiAgICAvLyBTZWUgcG9ydGFsMiBleGFtcGxlXG4gICAgaWYgKGFFbmRBbmdsZSAtIGFTdGFydEFuZ2xlID09PSAtTWF0aC5QSSAqIDIpIGFFbmRBbmdsZSA9IE1hdGguUEkgKiAyXG5cbiAgICBjb25zdCBjZW50ZXIgPSBuZXcgUG9pbnQoeCwgeSlcbiAgICB2YXIgcG9pbnRzID0gYXJjVG9Qb2ludHMoeCwgeSwgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgcmFkaXVzKVxuXG4gICAgdGhpcy50cmFuc2Zvcm1Qb2ludChjZW50ZXIpXG4gICAgdGhpcy50cmFuc2Zvcm1Qb2ludChwb2ludHMuc3RhcnQpXG4gICAgdGhpcy50cmFuc2Zvcm1Qb2ludChwb2ludHMuZW5kKVxuXG4gICAgY29uc3QgcmVzID0gcG9pbnRzVG9BcmMoY2VudGVyLCBwb2ludHMuc3RhcnQsIHBvaW50cy5lbmQpXG5cbiAgICAvLyB0aGlzLmVuc3VyZVBhdGgocG9pbnRzLnN0YXJ0LngsIHBvaW50cy5zdGFydC55KVxuXG4gICAgaWYgKCF0aGlzLnBhdGgpIHRocm93ICdiZWdpblBhdGggbm90IGNhbGxlZCB5ZXQnXG4gICAgdGhpcy5wYXRoLmFyYyhjZW50ZXIueCwgY2VudGVyLnksIHJlcy5yYWRpdXMsIHJlcy5zdGFydCwgcmVzLmVuZCwgYW50aUNsb2Nrd2lzZSlcblxuICAgIC8vIHZhciB0bXAgPSBuZXcgUGF0aCgpO1xuICAgIC8vIHRtcC5tb3ZlVG8ocG9pbnRzLnN0YXJ0LngsIHBvaW50cy5zdGFydC55KTtcbiAgICAvLyB0bXAuYXJjKGNlbnRlci54LCBjZW50ZXIueSwgcmFkaXVzLCByZXMuc3RhcnQsIHJlcy5lbmQsIGFDbG9ja3dpc2UpO1xuXG4gICAgLy8gdG1wLmdldFBvaW50cyg0MCkuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgLy8gICB0aGlzLmxpbmVUbyhwLngscC55KTtcbiAgICAvLyB9LHRoaXMpO1xuXG4gICAgdGhpcy5jdHg/LmFyYyh4LCB5LCByYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFudGlDbG9ja3dpc2UpXG4gIH1cblxuICBwdWJsaWMgYmV6aWVyQ3VydmVUbyguLi5hcmdzOiBCZXppZXJDdXJ2ZVRvQWN0aW9uWydhcmdzJ10pIHtcbiAgICAvLyBsZXQgW2FDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVldID0gYXJnc1xuICAgIGNvbnN0IHsgeDogYUNQMXgsIHk6IGFDUDF5IH0gPSB0aGlzLnRyYW5zZm9ybVBvaW50KFthcmdzWzBdLCBhcmdzWzFdXSlcbiAgICBjb25zdCB7IHg6IGFDUDJ4LCB5OiBhQ1AyeSB9ID0gdGhpcy50cmFuc2Zvcm1Qb2ludChbYXJnc1syXSwgYXJnc1szXV0pXG4gICAgY29uc3QgeyB4OiBhWCwgeTogYVkgfSA9IHRoaXMudHJhbnNmb3JtUG9pbnQoW2FyZ3NbNF0sIGFyZ3NbNV1dKVxuICAgIHRoaXMucGF0aC5iZXppZXJDdXJ2ZVRvKGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkpXG5cbiAgICB0aGlzLmN0eD8uYmV6aWVyQ3VydmVUbyhhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZKVxuICB9XG5cbiAgcHVibGljIHF1YWRyYXRpY0N1cnZlVG8oLi4uYXJnczogUXVhZHJhdGljQ3VydmVUb0FjdGlvblsnYXJncyddKSB7XG4gICAgLy8gY29uc3QgW2FDUHgsIGFDUHksIGFYLCBhWV0gPSBhcmdzXG4gICAgY29uc3QgeyB4OiBhQ1B4LCB5OiBhQ1B5IH0gPSB0aGlzLnRyYW5zZm9ybVBvaW50KFthcmdzWzBdLCBhcmdzWzFdXSlcbiAgICBjb25zdCB7IHg6IGFYLCB5OiBhWSB9ID0gdGhpcy50cmFuc2Zvcm1Qb2ludChbYXJnc1syXSwgYXJnc1szXV0pXG4gICAgdGhpcy5wYXRoLnF1YWRyYXRpY0N1cnZlVG8oYUNQeCwgYUNQeSwgYVgsIGFZKVxuXG4gICAgdGhpcy5jdHg/LnF1YWRyYXRpY0N1cnZlVG8oYUNQeCwgYUNQeSwgYVgsIGFZKVxuICB9XG5cbiAgcHVibGljIGNsaXAoKSB7XG4gICAgdGhpcy5jbGlwUmVnaW9uID0gdGhpcy5wYXRoXG4gICAgdGhpcy5jdHg/LmNsaXAoKVxuICB9XG5cbiAgcHVibGljIHJlY3QoeDogbnVtYmVyLCB5OiBudW1iZXIsIHc6IG51bWJlciwgaDogbnVtYmVyKSB7XG4gICAgdGhpcy5tb3ZlVG8oeCwgeSlcbiAgICB0aGlzLmxpbmVUbyh4ICsgdywgeSlcbiAgICB0aGlzLmxpbmVUbyh4ICsgdywgeSArIGgpXG4gICAgdGhpcy5saW5lVG8oeCwgeSArIGgpXG4gICAgdGhpcy5saW5lVG8oeCwgeSlcbiAgfVxuXG4gIHB1YmxpYyBzdHJva2VSZWN0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlcikge1xuICAgIHRoaXMuYmVnaW5QYXRoKClcbiAgICB0aGlzLnJlY3QoeCwgeSwgdywgaClcbiAgICB0aGlzLnN0cm9rZSgpXG4gICAgdGhpcy5jbG9zZVBhdGgoKVxuICB9XG5cbiAgcHVibGljIGZpbGxSZWN0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlcikge1xuICAgIHRoaXMuYmVnaW5QYXRoKClcbiAgICB0aGlzLnJlY3QoeCwgeSwgdywgaClcbiAgICB0aGlzLmZpbGwoKVxuICAgIHRoaXMuY2xvc2VQYXRoKClcbiAgfVxuXG4gIHB1YmxpYyBjaXJjbGUoeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZDogbnVtYmVyLCBjY3c6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIHRoaXMuYXJjKHgsIHksIHJhZCwgMCwgTWF0aC5QSSAqIDIsIGNjdylcbiAgICAvLyBOT1RFOiBub3QgbmF0aXZlIHNvIGRvIG5vdCBuZWVkIHRvIGNhbGwgY2FudmFzIGFwaVxuICB9XG5cbiAgcHVibGljIHN0cm9rZUNpcmNsZSh4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIpIHtcbiAgICB0aGlzLmJlZ2luUGF0aCgpXG4gICAgdGhpcy5jaXJjbGUoeCwgeSwgcmFkaXVzKVxuICAgIHRoaXMuZmlsbCgpXG4gICAgdGhpcy5jbG9zZVBhdGgoKVxuICB9XG5cbiAgcHVibGljIGZpbGxDaXJjbGUoeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyKSB7XG4gICAgdGhpcy5iZWdpblBhdGgoKVxuICAgIHRoaXMuY2lyY2xlKHgsIHksIHJhZGl1cylcbiAgICB0aGlzLmZpbGwoKVxuICAgIHRoaXMuY2xvc2VQYXRoKClcbiAgfVxuXG4gIHB1YmxpYyBjbG9uZSgpIHt9XG5cbiAgcHVibGljIG1lYXN1cmVUZXh0KHRleHQ6IHN0cmluZyk6IEJvdW5kcyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGlzT3BhcXVlKGNvbG9yOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoY29sb3IgPT0gJ3RyYW5zcGFyZW50JykgcmV0dXJuIGZhbHNlXG4gICAgaWYgKGNvbG9yID09ICdub25lJykgcmV0dXJuIGZhbHNlXG5cbiAgICBpZiAodHlwZW9mIGNvbG9yID09ICdzdHJpbmcnICYmIGNvbG9yLm1hdGNoKC9yZ2JhXFwoKD86LiosKXszfVswXFwuXSpcXCkvKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHB1YmxpYyBzdHJva2UoYWxpZ246IFN0cm9rZUFsaWduID0gdGhpcy5hbGlnbiwgZGVwdGg6IG51bWJlciA9IHRoaXMuZGVwdGgpIHtcbiAgICBpZiAoIXRoaXMuaXNPcGFxdWUodGhpcy5zdHJva2VTdHlsZSkpIHJldHVyblxuICAgIHRoaXMuc2F2ZSgpXG5cbiAgICBsZXQgb2Zmc2V0ID0gMFxuXG4gICAgaWYgKGFsaWduID09PSAnb3V0ZXInKSB7XG4gICAgICBvZmZzZXQgPSB0aGlzLnRvb2xEaWFtZXRlciAvIDJcbiAgICB9XG4gICAgaWYgKGFsaWduID09PSAnaW5uZXInKSB7XG4gICAgICBvZmZzZXQgPSAtdGhpcy50b29sRGlhbWV0ZXIgLyAyXG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSB0aGlzLnBhdGhcblxuICAgIGlmIChhbGlnbiAhPSAnY2VudGVyJykge1xuICAgICAgcGF0aCA9IHBhdGguc2ltcGxpZnkoJ2V2ZW5vZGQnLCB0aGlzLnByZWNpc2lvbilcbiAgICAgIHBhdGggPSBwYXRoLm9mZnNldChvZmZzZXQpIHx8IHBhdGhcbiAgICB9XG5cbiAgICBpZiAocGF0aC5zdWJQYXRocylcbiAgICAgIHBhdGguc3ViUGF0aHMuZm9yRWFjaCgoc3ViUGF0aCkgPT4ge1xuICAgICAgICAvLyBDbGltYiBtaWxsaW5nXG4gICAgICAgIGlmIChhbGlnbiA9PSAnaW5uZXInKSBzdWJQYXRoID0gc3ViUGF0aC5yZXZlcnNlKClcbiAgICAgICAgdGhpcy5sYXllcihzdWJQYXRoLCAoeikgPT4ge1xuICAgICAgICAgIHRoaXMubW90aW9uLmZvbGxvd1BhdGgoc3ViUGF0aCwgeilcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgLy8gdGhpcy5tb3Rpb24ucmV0cmFjdCgpXG5cbiAgICB0aGlzLnJlc3RvcmUoKVxuXG4gICAgdGhpcy5jdHg/LnN0cm9rZSgpXG4gIH1cblxuICBwdWJsaWMgZmlsbCh3aW5kaW5nUnVsZT86IFdpbmRpbmdSdWxlKSB7XG4gICAgaWYgKCF0aGlzLmlzT3BhcXVlKHRoaXMuZmlsbFN0eWxlKSkgcmV0dXJuXG5cbiAgICB0aGlzLnNhdmUoKVxuXG4gICAgaWYgKCF0aGlzLnRvb2xEaWFtZXRlcikgdGhyb3cgJ1lvdSBtdXN0IHNldCBjb250ZXh0LnRvb2xEaWFtZXRlciB0byB1c2UgZmlsbCgpJ1xuXG4gICAgbGV0IHBhdGggPSB0aGlzLnBhdGhcbiAgICBwYXRoID0gcGF0aC5zaW1wbGlmeSh3aW5kaW5nUnVsZSwgdGhpcy5wcmVjaXNpb24pXG4gICAgcGF0aCA9IHBhdGguY2xpcCh0aGlzLmNsaXBSZWdpb24sIDAsIHRoaXMucHJlY2lzaW9uKVxuICAgIHBhdGggPSBwYXRoLmZpbGxQYXRoKHRoaXMudG9vbERpYW1ldGVyLCB0aGlzLnByZWNpc2lvbilcblxuICAgIGlmIChwYXRoLnN1YlBhdGhzKVxuICAgICAgcGF0aC5zdWJQYXRocy5mb3JFYWNoKChzdWJQYXRoKSA9PiB7XG4gICAgICAgIHRoaXMubGF5ZXIoc3ViUGF0aCwgKHopID0+IHtcbiAgICAgICAgICB0aGlzLm1vdGlvbi5mb2xsb3dQYXRoKHN1YlBhdGgsIHopXG4gICAgICAgIH0pXG4gICAgICB9LCB0aGlzKVxuXG4gICAgLy8gdGhpcy5tb3Rpb24ucmV0cmFjdCgpXG5cbiAgICB0aGlzLnJlc3RvcmUoKVxuXG4gICAgdGhpcy5jdHg/LmZpbGwoKVxuICB9XG5cbiAgcHVibGljIGNsZWFyUmVjdCh4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICB0aGlzLmN0eD8uY2xlYXJSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpXG4gIH1cblxuICBwdWJsaWMgY2xvc2VQYXRoKCkge1xuICAgIHRoaXMucGF0aC5jbG9zZSgpXG4gICAgdGhpcy5jdHg/LmNsb3NlUGF0aCgpXG4gIH1cblxuICAvLyBwdWJsaWMgZmlsbFRleHQodGV4dDogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlciwgcGFyYW1zOiBhbnkpIHtcbiAgLy8gICAgIHRoaXMudGV4dCh0ZXh0LCB4LCB5LCBwYXJhbXMpO1xuICAvLyAgICAgdGhpcy5maWxsKCk7XG4gIC8vICAgfVxuICAvLyBwdWJsaWMgc3Ryb2tlVGV4dCh0ZXh0OiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyLCBwYXJhbXM6IGFueSkge1xuICAvLyAgICAgdGhpcy50ZXh0KHRleHQsIHgsIHksIHBhcmFtcyk7XG4gIC8vICAgICB0aGlzLnN0cm9rZSgpO1xuICAvLyAgIH1cblxuICBwcml2YXRlIGxheWVyKHN1YlBhdGg6IFN1YlBhdGgsIGZuOiAoejogbnVtYmVyKSA9PiB2b2lkKSB7XG4gICAgbGV0IGRlcHRoT2ZDdXQgPSB0aGlzLmRlcHRoT2ZDdXQgfHwgdGhpcy5kZXB0aFxuXG4gICAgaWYgKGRlcHRoT2ZDdXQgPT09IDApIHtcbiAgICAgIGZuLmNhbGwodGhpcywgLXRoaXMudG9wKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgaW52ZXJ0ZWRaID0gdGhpcy5kZXB0aCA8IDBcbiAgICBpZiAoaW52ZXJ0ZWRaICYmIGRlcHRoT2ZDdXQgPiAwKSBkZXB0aE9mQ3V0ID0gLWRlcHRoT2ZDdXRcblxuICAgIGxldCBzdGVwcyA9IE1hdGguY2VpbChNYXRoLmFicyh0aGlzLmRlcHRoIC8gZGVwdGhPZkN1dCkpXG4gICAgbGV0IG9mZnNldCA9IC10aGlzLnRvcFxuICAgIHdoaWxlIChzdGVwcy0tKSB7XG4gICAgICBvZmZzZXQgLT0gZGVwdGhPZkN1dFxuXG4gICAgICAvLyBDbGlwIHRvIGFjdHVhbCBkZXB0aFxuICAgICAgaWYgKGludmVydGVkWikge1xuICAgICAgICBvZmZzZXQgPSBNYXRoLm1heChvZmZzZXQsIHRoaXMudG9wICsgdGhpcy5kZXB0aClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZnNldCA9IE1hdGgubWF4KG9mZnNldCwgLXRoaXMudG9wIC0gdGhpcy5kZXB0aClcbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHRoZSBtYXRlcmlhbCBhdCB0aGlzIGRlcHRoXG4gICAgICBmbi5jYWxsKHRoaXMsIG9mZnNldClcbiAgICB9XG5cbiAgICAvLyBGaW5pc2hpbmcgcGFzc1xuICAgIGlmICh0aGlzLnJhbXBpbmcgJiYgc3ViUGF0aC5pc0Nsb3NlZCgpKSB7XG4gICAgICBmbi5jYWxsKHRoaXMsIG9mZnNldClcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBEcml2ZXIsIHtcbiAgQWxsQ29tbWFuZFBhcmFtcyxcbiAgQXJjUGFyYW1zLFxuICBEcml2ZXJTdHJlYW0sXG4gIExpbmVhclBhcmFtcyxcbiAgUmFwaWRQYXJhbXMsXG4gIFVuaXQsXG4gIFplcm9QYXJhbXMsXG59IGZyb20gJy4vRHJpdmVyJ1xuXG50eXBlIFN0cmVhbSA9IHtcbiAgd3JpdGU6IChzdHI6IHN0cmluZykgPT4gdm9pZFxuICByZXNldDogKCkgPT4gdm9pZFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHQ29kZSBleHRlbmRzIERyaXZlciB7XG4gIHB1YmxpYyBzdHJlYW06IFN0cmVhbVxuXG4gIGNvbnN0cnVjdG9yKHN0cmVhbT86IERyaXZlclN0cmVhbSkge1xuICAgIHN1cGVyKHN0cmVhbSlcbiAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbSB8fCB7XG4gICAgICB3cml0ZTogKHN0cikgPT4gY29uc29sZS5sb2coc3RyKSxcbiAgICAgIHJlc2V0OiAoKSA9PiB7fSxcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgdGhpcy5zdHJlYW0ucmVzZXQoKVxuICAgIHRoaXMuaW5pdCgpXG4gIH1cblxuICBwdWJsaWMgc2VuZChjb2RlOiBzdHJpbmcsIHBhcmFtcz86IFBhcnRpYWw8QWxsQ29tbWFuZFBhcmFtcz4pIHtcbiAgICBsZXQgY29tbWFuZCA9IGAke2NvZGV9YFxuICAgIGlmIChwYXJhbXMpIHtcbiAgICAgIGNvbnN0IGtleXMgPSAneHl6YWJjaWprZnQnLnNwbGl0KCcnKSBhcyAoa2V5b2YgQWxsQ29tbWFuZFBhcmFtcylbXVxuICAgICAga2V5cy5mb3JFYWNoKChrKSA9PiB7XG4gICAgICAgIGlmIChwYXJhbXNba10gPT09IHVuZGVmaW5lZCB8fCBwYXJhbXNba10gPT09IG51bGwgfHwgaXNOYU4ocGFyYW1zW2tdKSkgcmV0dXJuXG4gICAgICAgIGNvbW1hbmQgKz0gYCAke2sudG9VcHBlckNhc2UoKX0ke3BhcmFtc1trXX1gXG4gICAgICB9KVxuICAgIH1cbiAgICB0aGlzLnN0cmVhbS53cml0ZShjb21tYW5kKVxuICB9XG5cbiAgcHVibGljIGluaXQoKSB7XG4gICAgLy8gdGhpcy5zZW5kKCdHMDAgKG1vdmUgYXMgZmFzdCBhcyBpdCBjYW4gb3IgaXMgcHJvZ3JhbW1lZCB0byknKVxuICAgIC8vIHRoaXMuc2VuZCgnRzkwIChhYnNvbHV0ZSBwb3NpdGlvbiBtb2RlKScpXG4gICAgLy8gdGhpcy5zZW5kKCdHODAgKGNhbmNlbCBhbnkgcHJldmlvdXNseSB1c2VkIGNhbm5lZCBjeWNsZXMpJylcbiAgICB0aGlzLnNlbmQoJ0cxNyAoc2VsZWN0IHRoZSB4eSBwbGFuZSknKVxuICAgIC8vIHRoaXMuc2VuZCgnRzI4IChyYXBpZCB0byBob21lIHBvc2l0aW9uKScpXG4gICAgdGhpcy5zZW5kKCdNMyBTMCAoYWN0aXZhdGUgc2Vydm8pJylcbiAgfVxuXG4gIHB1YmxpYyB1bml0KG5hbWU6IFVuaXQpIHtcbiAgICB0aGlzLnNlbmQoeyBpbmNoOiAnRzIwJywgbW06ICdHMjEnIH1bbmFtZV0gKyBgIChzZWxlY3QgJHtuYW1lfSB1bml0KWApXG4gIH1cbiAgcHVibGljIHNwZWVkKG46IG51bWJlcikge1xuICAgIHRoaXMuc2VuZChgUyR7bn0gKHNldCBzcGVlZCB0byAke259KWApXG4gIH1cbiAgcHVibGljIGZlZWQobjogbnVtYmVyKSB7XG4gICAgdGhpcy5zZW5kKCdGJyArIG4pXG4gIH1cbiAgcHVibGljIGNvb2xhbnQodHlwZTogJ21pc3QnIHwgJ2Zsb29kJyB8ICdvZmYnKSB7XG4gICAgaWYgKHR5cGUgPT09ICdtaXN0JykgdGhpcy5zZW5kKCdNMDcnKSAvLyBzcGVjaWFsXG4gICAgZWxzZSBpZiAodHlwZSkgdGhpcy5zZW5kKCdNMDgnKSAvLyBmbG9vZFxuICAgIGVsc2UgdGhpcy5zZW5kKCdNMDknKSAvLyBvZmZcbiAgfVxuICBwdWJsaWMgemVybyhwYXJhbXM6IFplcm9QYXJhbXMpIHtcbiAgICB0aGlzLnNlbmQoJ0cyOC4zJywgcGFyYW1zKVxuICB9XG4gIC8vIHRvb2wgc2VsZWN0aW9uXG4gIHB1YmxpYyBhdGMoaWQ6IG51bWJlcikge1xuICAgIHRoaXMuc2VuZCgnTTYnLCB7IHQ6IGlkIH0pXG4gIH1cbiAgcHVibGljIHJhcGlkKHBhcmFtczogUmFwaWRQYXJhbXMpIHtcbiAgICB0aGlzLnNlbmQoJ0cwJywgcGFyYW1zKVxuICB9XG4gIHB1YmxpYyBsaW5lYXIocGFyYW1zOiBMaW5lYXJQYXJhbXMpIHtcbiAgICB0aGlzLnNlbmQoJ0cxJywgcGFyYW1zKVxuICB9XG4gIHB1YmxpYyBhcmNDVyhwYXJhbXM6IEFyY1BhcmFtcykge1xuICAgIHRoaXMuc2VuZCgnRzInLCBwYXJhbXMpXG4gIH1cbiAgcHVibGljIGFyY0NDVyhwYXJhbXM6IEFyY1BhcmFtcykge1xuICAgIHRoaXMuc2VuZCgnRzMnLCBwYXJhbXMpXG4gIH1cbiAgcHVibGljIGNvbW1lbnQoc3RyaW5nOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlbmQoYCgke3N0cmluZ30pYClcbiAgfVxuICBwdWJsaWMgbWV0YShwYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcbiAgICBsZXQgY29tbWVudCA9ICcoJ1xuICAgIGZvciAodmFyIGsgaW4gcGFyYW1zKSB7XG4gICAgICBjb21tZW50ICs9IGAke2t9PSR7cGFyYW1zW2tdfWBcbiAgICB9XG4gICAgY29tbWVudCArPSAnKSdcbiAgICB0aGlzLnNlbmQoY29tbWVudClcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgW1xuICByZXF1aXJlKCcuLzAxX0luaXRpYWxTa2V0Y2gnKS5kZWZhdWx0LCAvLyBtYXliZSB3b3JrP1xuICByZXF1aXJlKCcuLzAyX0dDb2RlVGVzdCcpLmRlZmF1bHQsXG4gIHJlcXVpcmUoJy4vMDNfQXJjcycpLmRlZmF1bHQsXG4gIHJlcXVpcmUoJy4vMDRfQmV6aWVyU2NyaWJibGVzJykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnLi8wNV9TcGlyYWxpbmcnKS5kZWZhdWx0LFxuICByZXF1aXJlKCcuLzA2X1NwaXJhbGluZ1Byb3BvcnRpb25hbCcpLmRlZmF1bHQsXG4gIHJlcXVpcmUoJy4vMDdfQ29uY2VudHJpY0NpcmNsZXMnKS5kZWZhdWx0LFxuICByZXF1aXJlKCcuLzA4X0J1YmJsZXNJbkNpcmNsZScpLmRlZmF1bHQsXG4gIHJlcXVpcmUoJy4vMDlfR3JpZFdhdmVzJykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnLi8xMF9QZXJsaW5HcmlkJykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnLi8xMV9QZXJsaW5MaW5lcycpLmRlZmF1bHQsXG4gIHJlcXVpcmUoJy4vMTJfVHJlZScpLmRlZmF1bHQsXG4gIHJlcXVpcmUoJy4vMTNfTW9uZGF5TWF6ZScpLmRlZmF1bHQsXG5dXG4iLCJleHBvcnQgY29uc3QgbG9hZFZhbHVlID0gPFQgZXh0ZW5kcyBhbnk+KGtleTogc3RyaW5nLCBmYWxsYmFja1NldFZhbHVlPzogVCk6IFQgfCBudWxsID0+IHtcbiAgY29uc3QgZW5jb2RlZFZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KVxuICBpZiAoZW5jb2RlZFZhbHVlID09PSBudWxsKSB7XG4gICAgaWYgKGZhbGxiYWNrU2V0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc2F2ZVZhbHVlKGtleSwgZmFsbGJhY2tTZXRWYWx1ZSlcbiAgICAgIHJldHVybiBmYWxsYmFja1NldFZhbHVlXG4gICAgfSBlbHNlIHJldHVybiBudWxsXG4gIH1cbiAgcmV0dXJuIEpTT04ucGFyc2UoZW5jb2RlZFZhbHVlKVxufVxuZXhwb3J0IGNvbnN0IHNhdmVWYWx1ZSA9IDxUIGV4dGVuZHMgYW55PihrZXk6IHN0cmluZywgdmFsdWU6IFQpOiBUID0+IHtcbiAgY29uc3QgZW5jb2RlZFZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpXG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgZW5jb2RlZFZhbHVlKVxuICByZXR1cm4gdmFsdWVcbn1cbiIsImltcG9ydCB7IFNrZXRjaCB9IGZyb20gJy4vU2tldGNoJ1xuaW1wb3J0IHsgbG9hZFZhbHVlLCBzYXZlVmFsdWUgfSBmcm9tICcuL3V0aWxzL2xvY2FsU3RvcmFnZVV0aWxzJ1xuXG5leHBvcnQgY29uc3Qgc2F2ZU5ld1ByZXNldCA9IChza2V0Y2g6IFNrZXRjaCkgPT4ge1xuICBjb25zdCBzYXZlRGF0YSA9IE9iamVjdC5rZXlzKHNrZXRjaC52cykucmVkdWNlKFxuICAgIChhY2MsIGtleSkgPT4gKHsgLi4uYWNjLCBba2V5XTogc2tldGNoLnZzW2tleV0udmFsdWUgfSksXG4gICAge30gYXMgeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfVxuICApXG4gIGNvbnN0IHNrZXRjaE5hbWUgPSBza2V0Y2guY29uc3RydWN0b3IubmFtZVxuICBjb25zdCBza2V0Y2hTYXZlRGF0YSA9IGxvYWRWYWx1ZShza2V0Y2hOYW1lLCBbXSlcbiAgc2F2ZVZhbHVlKHNrZXRjaE5hbWUsIFsuLi5za2V0Y2hTYXZlRGF0YSwgc2F2ZURhdGFdKVxuICByZW5kZXJTa2V0Y2hTYXZlU2xvdHMoc2tldGNoKVxufVxuXG5jb25zdCBzYXZlU2xvdEFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2F2ZS1zbG90cycpXG5cbmV4cG9ydCBjb25zdCByZW5kZXJTa2V0Y2hTYXZlU2xvdHMgPSAoc2tldGNoOiBTa2V0Y2gsIG9uTG9hZD86ICgpID0+IHZvaWQpID0+IHtcbiAgc2F2ZVNsb3RBcmVhLmlubmVySFRNTCA9ICcnXG4gIGNvbnN0IHByZXNldHMgPSBsb2FkVmFsdWUoc2tldGNoLmNvbnN0cnVjdG9yLm5hbWUsIFtdKVxuICBwcmVzZXRzLmZvckVhY2goKHByZXNldCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgIGJ1dHRvbi50eXBlID0gJ2J1dHRvbidcbiAgICBidXR0b24uaW5uZXJUZXh0ID0gYCR7aW5kZXggKyAxfWBcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBvbkxvYWQ/LigpXG4gICAgICBza2V0Y2gucmVzZXQoKVxuICAgICAgY29uc29sZS5sb2coJ0xvYWRpbmc6JywgcHJlc2V0KVxuICAgICAgT2JqZWN0LmtleXMocHJlc2V0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgc2tldGNoLnZzW2tleV0uc2V0VmFsdWUocHJlc2V0W2tleV0sIHRydWUpXG4gICAgICB9KVxuICAgICAgc2tldGNoLmluaXREcmF3KClcbiAgICB9KVxuICAgIHNhdmVTbG90QXJlYS5hcHBlbmRDaGlsZChidXR0b24pXG4gIH0pXG59XG4iLCJpbXBvcnQgR0NhbnZhcyBmcm9tICcuL0dDYW52YXMnXG5pbXBvcnQgR0NvZGUgZnJvbSAnLi9kcml2ZXJzL0dDb2RlRHJpdmVyJ1xuaW1wb3J0IHsgU2tldGNoIH0gZnJvbSAnLi9Ta2V0Y2gnXG5cbmltcG9ydCBza2V0Y2hlcyBmcm9tICcuL3NrZXRjaGVzJ1xuaW1wb3J0IHsgbG9hZFZhbHVlLCBzYXZlVmFsdWUgfSBmcm9tICcuL3V0aWxzL2xvY2FsU3RvcmFnZVV0aWxzJ1xuaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgeyByZW5kZXJTa2V0Y2hTYXZlU2xvdHMsIHNhdmVOZXdQcmVzZXQgfSBmcm9tICcuL3NhdmVTbG90cydcbmltcG9ydCB7IHJlbmRlclNrZXRjaFNsaWRlcnMsIHVwZGF0ZVNsaWRlclZhbHVlcyB9IGZyb20gJy4vc2xpZGVycydcblxuY29uc3QgQ0FOVkFTX1dJRFRIID0gMTQwXG5jb25zdCBDQU5WQVNfSEVJR0hUID0gMTAwXG5jb25zdCBDQU5WQVNfQkFDS0dST1VORCA9ICcjZmZmJ1xuY29uc3QgVklSVFVBTF9TQ0FMRSA9IDhcbmNvbnN0IERSQVdfU1RFUFNfUEVSX0ZSQU1FID0gMTAwXG5cbmNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG5jb25zdCBjYW52YXNBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhcy1hcmVhJylcbmNvbnN0IHNrZXRjaEJ1dHRvbnNBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NrZXRjaC1idXR0b25zLWFyZWEnKVxuY29uc3Qgc2F2ZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzYXZlLWJ1dHRvbicpXG5jb25zdCByZXNldEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNldCcpXG5jb25zdCByYW5kb21pemVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmFuZG9taXplJylcbmNvbnN0IGdjb2RlVGV4dGFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2NvZGUnKVxuXG5sZXQgY3VycmVudFNrZXRjaEluZGV4ID0gbG9hZFZhbHVlKCdza2V0Y2hJbmRleCcsIDApXG5sZXQgQ3VycmVudFNrZXRjaDogU2tldGNoXG5sZXQgcmFmUmVmOiBudW1iZXIgPSAwXG5sZXQgYW5pbWF0ZUluY3JlbWVudCA9IDBcblxuY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgLy8gaW5pdGlhbGl6ZSBjYW52YXNcbiAgY2FudmFzLndpZHRoID0gQ0FOVkFTX1dJRFRIICogVklSVFVBTF9TQ0FMRSAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvXG4gIGNhbnZhcy5oZWlnaHQgPSBDQU5WQVNfSEVJR0hUICogVklSVFVBTF9TQ0FMRSAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvXG4gIGNhbnZhcy5zdHlsZS53aWR0aCA9IGAke0NBTlZBU19XSURUSCAqIFZJUlRVQUxfU0NBTEV9cHhgXG4gIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBgJHtDQU5WQVNfSEVJR0hUICogVklSVFVBTF9TQ0FMRX1weGBcbiAgaWYgKGNhbnZhc0FyZWEpIGNhbnZhc0FyZWEuYXBwZW5kQ2hpbGQoY2FudmFzKVxuICBlbHNlIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKVxuXG4gIC8vIGNyZWF0ZSBidXR0b25zIGZvciBhbGwgc2tldGNoZXNcbiAgc2tldGNoZXMuZm9yRWFjaCgoc2tldGNoLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXG4gICAgYnV0dG9uLnR5cGUgPSAnYnV0dG9uJ1xuICAgIGJ1dHRvbi5pbm5lclRleHQgPSBgJHtpbmRleCArIDF9ICR7c2tldGNoLm5hbWV9YFxuICAgIGlmIChjdXJyZW50U2tldGNoSW5kZXggPT09IGluZGV4KSBidXR0b24uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBjb25zdCBhbGxCdXR0b25zID0gc2tldGNoQnV0dG9uc0FyZWEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEJ1dHRvbnMubGVuZ3RoOyBpKyspIGFsbEJ1dHRvbnMuaXRlbShpKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXG4gICAgICBjdXJyZW50U2tldGNoSW5kZXggPSBzYXZlVmFsdWUoJ3NrZXRjaEluZGV4JywgaW5kZXgpXG4gICAgICBpbml0U2tldGNoKHNrZXRjaClcbiAgICB9KVxuICAgIHNrZXRjaEJ1dHRvbnNBcmVhLmFwcGVuZENoaWxkKGJ1dHRvbilcbiAgfSlcblxuICAvLyBpbml0aWFsaXplIGZpcnN0IHNrZXRjaFxuICBpbml0U2tldGNoKHNrZXRjaGVzW2N1cnJlbnRTa2V0Y2hJbmRleF0pXG5cbiAgLy8gYmluZCBtYWluIGZ1bmN0aW9uIGJ1dHRvbnNcbiAgcmVzZXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaWYgKCFDdXJyZW50U2tldGNoKSByZXR1cm5cbiAgICBhbmltYXRlSW5jcmVtZW50ID0gMFxuICAgIEN1cnJlbnRTa2V0Y2gucmVzZXQoKVxuICAgIEN1cnJlbnRTa2V0Y2guaW5pdERyYXcoKVxuICB9KVxuICByYW5kb21pemVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaWYgKCFDdXJyZW50U2tldGNoKSByZXR1cm5cbiAgICBhbmltYXRlSW5jcmVtZW50ID0gMFxuICAgIE9iamVjdC5rZXlzKEN1cnJlbnRTa2V0Y2gudnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgQ3VycmVudFNrZXRjaC52c1trZXldLnJhbmRvbWl6ZSgpXG4gICAgfSlcbiAgICB1cGRhdGVTbGlkZXJWYWx1ZXMoQ3VycmVudFNrZXRjaClcbiAgICBDdXJyZW50U2tldGNoLnJlc2V0KClcbiAgICBDdXJyZW50U2tldGNoLmluaXREcmF3KClcbiAgfSlcbiAgc2F2ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBpZiAoIUN1cnJlbnRTa2V0Y2gpIHJldHVyblxuICAgIHNhdmVOZXdQcmVzZXQoQ3VycmVudFNrZXRjaClcbiAgfSlcbn1cblxuY29uc3QgX3NldEdDb2RlSFRNTCA9IChzdHI6IHN0cmluZykgPT4gKGdjb2RlVGV4dGFyZWEuaW5uZXJIVE1MID0gc3RyKVxuY29uc3Qgc2V0R0NvZGVIVE1MID0gdGhyb3R0bGUoX3NldEdDb2RlSFRNTCwgMTAwMClcblxubGV0IGdDb2RlU3RyaW5nID0gJydcbmNvbnN0IHNldEdDb2RlID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIGdDb2RlU3RyaW5nID0gc3RyXG4gIHNldEdDb2RlSFRNTChnQ29kZVN0cmluZylcbn1cbmNvbnN0IGFwcGVuZEdDb2RlID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIGdDb2RlU3RyaW5nICs9IHN0ciArICdcXG4nXG4gIHNldEdDb2RlSFRNTChnQ29kZVN0cmluZylcbn1cblxuY29uc3QgaW5pdFNrZXRjaCA9IChTa2V0Y2hDbGFzczogdHlwZW9mIFNrZXRjaCkgPT4ge1xuICBjb25zb2xlLmNsZWFyKClcbiAgY29uc29sZS5sb2coJ0xvYWRpbmcgbmV3IHNrZXRjaCcsIFNrZXRjaENsYXNzLm5hbWUpXG5cbiAgYW5pbWF0ZUluY3JlbWVudCA9IDBcbiAgaWYgKHJhZlJlZikge1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShyYWZSZWYpXG4gICAgcmFmUmVmID0gMFxuICB9XG5cbiAgc2V0R0NvZGUoU2tldGNoQ2xhc3MuZ2VuZXJhdGVHQ29kZSA/ICcnIDogJyhHQ29kZSBkaXNhYmxlZCBmb3IgdGhpcyBza2V0Y2gpJylcblxuICAvLyBmb3Igbm93IGp1c3QgcmVjcmVhdGUgdGhpbmdzIGVhY2ggaW5pdFNrZXRjaCwgd2lsbCBwcm9iYWJseSBoYXZlIG1lbW9yeSBpc3N1ZSBsYXRlclxuICBjb25zdCBkcml2ZXIgPSAhU2tldGNoQ2xhc3MuZ2VuZXJhdGVHQ29kZVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiBuZXcgR0NvZGUoe1xuICAgICAgICByZXNldDogKCkgPT4geyBzZXRHQ29kZSgnJykgfSwgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIHdyaXRlOiAobGluZTogc3RyaW5nKSA9PiB7IGFwcGVuZEdDb2RlKGxpbmUpIH0sIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgfSlcbiAgY29uc3QgZ0NhbnZhcyA9IG5ldyBHQ2FudmFzKHtcbiAgICBjYW52YXMsXG4gICAgZHJpdmVyLFxuICAgIHdpZHRoOiBDQU5WQVNfV0lEVEgsXG4gICAgaGVpZ2h0OiBDQU5WQVNfSEVJR0hULFxuICAgIHZpcnR1YWxTY2FsZTogVklSVFVBTF9TQ0FMRSxcbiAgICBiYWNrZ3JvdW5kOiBDQU5WQVNfQkFDS0dST1VORCxcbiAgfSlcbiAgQ3VycmVudFNrZXRjaCA9IG5ldyBTa2V0Y2hDbGFzcyh7IGN0eDogZ0NhbnZhcywgd2lkdGg6IENBTlZBU19XSURUSCwgaGVpZ2h0OiBDQU5WQVNfSEVJR0hUIH0pXG4gIEN1cnJlbnRTa2V0Y2guaW5pdCgpXG4gIEN1cnJlbnRTa2V0Y2guaW5pdERyYXcoKVxuXG4gIC8vIGNyZWF0ZSBzbGlkZXJzIGZvciBhbGwgc2tldGNoIHBhcmFtZXRlcnNcbiAgcmVuZGVyU2tldGNoU2xpZGVycyhDdXJyZW50U2tldGNoLCAoKSA9PiB7XG4gICAgYW5pbWF0ZUluY3JlbWVudCA9IDBcbiAgfSlcblxuICAvLyBwb3B1bGF0ZSBzYXZlIHNsb3RzIGZyb20gbG9jYWxTdG9yYWdlXG4gIHJlbmRlclNrZXRjaFNhdmVTbG90cyhDdXJyZW50U2tldGNoLCAoKSA9PiB7XG4gICAgYW5pbWF0ZUluY3JlbWVudCA9IDBcbiAgfSlcblxuICAvLyBiZWdpbiBhbmltYXRpb24gbG9vcFxuICBhbmltYXRlKClcbn1cblxuY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBEUkFXX1NURVBTX1BFUl9GUkFNRTsgaSsrKSB7XG4gICAgYW5pbWF0ZUluY3JlbWVudCsrXG4gICAgQ3VycmVudFNrZXRjaC5kcmF3KGFuaW1hdGVJbmNyZW1lbnQpXG4gIH1cbiAgcmFmUmVmID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKVxufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGluaXQpXG4iLCJpbXBvcnQgeyBTa2V0Y2ggfSBmcm9tICcuL1NrZXRjaCdcbmltcG9ydCB7IGZsb2F0U3RyaW5nIH0gZnJvbSAnLi91dGlscy9udW1iZXJVdGlscydcblxuY29uc3Qgc2xpZGVyQXJlYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbGlkZXItYXJlYScpXG5cbmludGVyZmFjZSBTbGlkZXJET00ge1xuICBzbGlkZXI6IEhUTUxJbnB1dEVsZW1lbnRcbiAgbGFiZWxTcGFuOiBIVE1MU3BhbkVsZW1lbnRcbiAgdmFsdWVTcGFuOiBIVE1MRWxlbWVudFxufVxuXG5sZXQgc2xpZGVyczogeyBba2V5OiBzdHJpbmddOiBTbGlkZXJET00gfSA9IHt9XG5cbmV4cG9ydCBjb25zdCByZW5kZXJTa2V0Y2hTbGlkZXJzID0gKHNrZXRjaDogU2tldGNoLCBvblVwZGF0ZT86ICgpID0+IHZvaWQpID0+IHtcbiAgc2xpZGVycyA9IHt9XG4gIHNsaWRlckFyZWEuaW5uZXJIVE1MID0gJydcbiAgT2JqZWN0LmtleXMoc2tldGNoLnZzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZVJhbmdlID0gc2tldGNoLnZzW2tleV1cbiAgICBjb25zdCBzbGlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpXG4gICAgc2xpZGVyLnR5cGUgPSAncmFuZ2UnXG4gICAgc2xpZGVyLm1pbiA9IFN0cmluZyh2YWx1ZVJhbmdlLm1pbilcbiAgICBzbGlkZXIubWF4ID0gU3RyaW5nKHZhbHVlUmFuZ2UubWF4KVxuICAgIHNsaWRlci5zdGVwID0gU3RyaW5nKHZhbHVlUmFuZ2Uuc3RlcClcbiAgICBzbGlkZXIudmFsdWUgPSBTdHJpbmcodmFsdWVSYW5nZS52YWx1ZSlcbiAgICBzbGlkZXIuc2V0QXR0cmlidXRlKGBkYXRhLXNsaWRlcmAsIGtleSlcblxuICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKVxuICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJylcbiAgICBjb25zdCB2YWx1ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NtYWxsJylcblxuICAgIGNvbnN0IGhhbmRsZVVwZGF0ZSA9IChuZXdWYWx1ZT86IG51bWJlcikgPT4ge1xuICAgICAgY29uc3QgdiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyBOdW1iZXIoc2xpZGVyLnZhbHVlKSA6IG5ld1ZhbHVlXG4gICAgICB2YWx1ZS5pbm5lclRleHQgPSBmbG9hdFN0cmluZyh2LCA2KVxuICAgICAgc2tldGNoLnZzW2tleV0udmFsdWUgPSB2XG4gICAgICBza2V0Y2gucmVzZXQoKVxuICAgICAgc2tldGNoLmluaXREcmF3KClcbiAgICAgIG9uVXBkYXRlPy4oKVxuICAgIH1cbiAgICBzbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4gaGFuZGxlVXBkYXRlKCkpXG4gICAgc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiBoYW5kbGVVcGRhdGUoKSlcblxuICAgIHZhbHVlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgY29uc3QgbmV3VmFsdWUgPSB3aW5kb3cucHJvbXB0KGAke2tleX06IGAsIFN0cmluZyhzbGlkZXIudmFsdWUpKVxuICAgICAgaWYgKG5ld1ZhbHVlID09PSBudWxsKSByZXR1cm5cbiAgICAgIGNvbnN0IHBhcnNlZFZhbHVlID0gcGFyc2VGbG9hdChuZXdWYWx1ZSlcbiAgICAgIGlmIChpc05hTihwYXJzZWRWYWx1ZSkpIHJldHVyblxuICAgICAgaGFuZGxlVXBkYXRlKHBhcnNlZFZhbHVlKVxuICAgIH0pXG5cbiAgICB2YWx1ZS5pbm5lclRleHQgPSBmbG9hdFN0cmluZyhOdW1iZXIoc2xpZGVyLnZhbHVlKSlcbiAgICBzcGFuLmlubmVyVGV4dCA9IGtleVxuICAgIHNwYW4uYXBwZW5kQ2hpbGQodmFsdWUpXG4gICAgbGFiZWwuYXBwZW5kQ2hpbGQoc3BhbilcbiAgICBsYWJlbC5hcHBlbmRDaGlsZChzbGlkZXIpXG4gICAgc2xpZGVyQXJlYS5hcHBlbmRDaGlsZChsYWJlbClcbiAgICB2YWx1ZVJhbmdlLmlucHV0RWxlbSA9IHNsaWRlclxuXG4gICAgc2xpZGVyc1trZXldID0geyBzbGlkZXIsIGxhYmVsU3Bhbjogc3BhbiwgdmFsdWVTcGFuOiB2YWx1ZSB9XG4gIH0pXG59XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVTbGlkZXJWYWx1ZXMgPSAoc2tldGNoOiBTa2V0Y2gpID0+IHtcbiAgT2JqZWN0LmtleXMoc2xpZGVycykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgeyBzbGlkZXIsIHZhbHVlU3BhbiB9ID0gc2xpZGVyc1trZXldXG4gICAgc2xpZGVyLnZhbHVlID0gU3RyaW5nKHNrZXRjaC52c1trZXldLnZhbHVlKVxuICAgIHZhbHVlU3Bhbi5pbm5lclRleHQgPSBmbG9hdFN0cmluZyhza2V0Y2gudnNba2V5XS52YWx1ZSlcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJQYXRoIiwiY29weSIsInN1YlBhdGhzIiwidGhpcyIsInNsaWNlIiwieCIsInkiLCJzdWJQYXRoIiwiU3ViUGF0aCIsIm1vdmVUbyIsInB1c2giLCJjdXJyZW50IiwibGVuZ3RoIiwiY2xvc2UiLCJlbnN1cmUiLCJsaW5lVG8iLCJhcmdzIiwicmFkaXVzIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiYW50aUNsb2Nrd2lzZSIsImVsbGlwc2UiLCJhWCIsImFZIiwieFJhZGl1cyIsImFTdGFydEFuZ2xlIiwiYUVuZEFuZ2xlIiwicG9pbnRzIiwiYXJjVG9Qb2ludHMiLCJzYW1lUG9zIiwibGFzdFBvaW50Iiwic3RhcnQiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiYmV6aWVyQ3VydmVUbyIsInciLCJoIiwic2NhbGUiLCJkaXZpc2lvbnMiLCJtYXAiLCJ0b1BvbHkiLCJwb2x5Z29ucyIsImkiLCJsIiwiZnJvbVBvbHlzIiwiY2xpcFJlZ2lvbiIsImNsaXBUeXBlIiwic3VialBvbHlzIiwidG9Qb2x5cyIsImNsaXBQb2x5cyIsImNwciIsIkNsaXBwZXJMaWIiLCJBZGRQYXRocyIsImNsaXBwZWQiLCJFeGVjdXRlIiwicGF0aCIsInJlc3VsdCIsImZvckVhY2giLCJwdHMiLCJnZXRQb2ludHMiLCJwIiwiYm91bmRzIiwicDF1IiwicDAiLCJQb2ludCIsInAwdSIsImNsb25lIiwicDEiLCJ0b3AiLCJtIiwicmlnaHQiLCJ3aW5kaW5nUnVsZSIsInBvbHlzIiwidHlwZSIsImFjdGlvblR5cGUiLCJhY3Rpb25zIiwiZGVsdGEiLCJpcyIsImNvIiwic29sdXRpb24iLCJlcnIiLCJkZXB0aCIsInBhdGgyIiwiY29uY2F0IiwiZ2V0Qm91bmRzIiwid2lkdGgiLCJNYXRoIiwiYWJzIiwibGVmdCIsImhlaWdodCIsImJvdHRvbSIsImx0IiwibWluIiwiZ3QiLCJ0ZXN0Iiwib2Zmc2V0IiwiZGlhbWV0ZXIiLCJvdmVybGFwIiwic2luIiwiUEkiLCJtYXgiLCJlc3RpbWF0ZU1heE9mZnNldCIsIm9mZnNldFBhdGgiLCJyZXZlcnNlIiwiYWRkUGF0aCIsImZpbmlzaCIsInNwMSIsInNwMiIsIm5lYXJlc3QiLCJuZWFyZXN0UG9pbnQiLCJwMiIsInBvaW50IiwiZGlzdGFuY2UiLCJzaGlmdCIsInNwbGljZSIsInNwIiwic29ydCIsImEiLCJiIiwiZmlyc3RQb2ludCIsImQxIiwiZDIiLCJyZXMiLCJ6IiwiaXNOYU4iLCJyb3VuZCIsImVxdWFscyIsImFkZCIsIm1pZHBvaW50Iiwic3VidHJhY3QiLCJtYWduaXR1ZGUiLCJzcXJ0IiwibXVsdGlwbHkiLCJkaXZpZGUiLCJub3JtYWxpemUiLCJzZXQiLCJkb3QiLCJ0cmFuc2xhdGUiLCJtb3ZlQWxvbmdBbmdsZSIsImFuZ2xlIiwiY29zIiwicm90YXRlIiwiYW5nbGVUbyIsImF0YW4yIiwiZGlzdGFuY2VUbyIsInBvdyIsImFuZ2xlQmV0d2VlbiIsImFjb3MiLCJ0b1VuaXQiLCJwb2ludDEiLCJwb2ludDIiLCJTa2V0Y2giLCJjb25maWciLCJjdHgiLCJjYW52YXNXaWR0aCIsImN3IiwiY2FudmFzSGVpZ2h0IiwiY2giLCJjeCIsImN5IiwiaW5pdCIsImluaXREcmF3IiwiZHJhdyIsImluY3JlbWVudCIsInJlc2V0IiwiZnJvbVBvaW50cyIsImlzQ2xvc2VkIiwidG1wIiwidG9QYXRoIiwic2ltcGxpZnkiLCJhY3Rpb24iLCJwb2ludHNDYWNoZSIsImVuZCIsInYiLCJ2TGVuIiwieDAiLCJ5MCIsInlSYWRpdXMiLCJ4byIsInlvIiwibGVuIiwiZmlyc3QiLCJ4MSIsInkxIiwicm4iLCJycCIsInJkIiwiSW5maW5pdHkiLCJuIiwiZCIsImluZGV4IiwiYW4iLCJhZGRBY3Rpb24iLCJpbCIsImNweDAiLCJjcHkwIiwiYUNQeCIsImFDUHkiLCJsYXN0RSIsImxhc3RBY3Rpb24iLCJqIiwidCIsInR4IiwiYjIiLCJ0eSIsImFDUDF4IiwiYUNQMXkiLCJhQ1AyeCIsImFDUDJ5IiwiYjMiLCJkZWx0YUFuZ2xlIiwiY2xvc2VkIiwiWCIsIlkiLCJwb2x5IiwiY3VyU3RhcnQiLCJhcHBseSIsIk1PVkVfVE8iLCJMSU5FX1RPIiwiUVVBRFJBVElDX0NVUlZFX1RPIiwiQkVaSUVSX0NVUlZFX1RPIiwiRUxMSVBTRSIsImIycDAiLCJrIiwiYjJwMSIsImIycDIiLCJwMyIsImIzcDAiLCJiM3AxIiwiYjNwMiIsImIzcDMiLCJuYXZpZ2F0b3JfYXBwTmFtZSIsImlzTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsIndpbmRvdyIsInNlbGYiLCJuYXYiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b1N0cmluZyIsInRvTG93ZXJDYXNlIiwiYXBwTmFtZSIsImRiaXRzIiwiYnJvd3NlciIsImluZGV4T2YiLCJjaHJvbWUiLCJjaHJvbWl1bSIsInNhZmFyaSIsImZpcmVmb3giLCJmaXJlZm94MTciLCJmaXJlZm94MTUiLCJmaXJlZm94MyIsIm9wZXJhIiwibXNpZTEwIiwibXNpZTkiLCJtc2llOCIsIm1zaWU3IiwibXNpZSIsImJpZ2ludGVnZXJfdXNlZCIsIkJpZ0ludGVnZXIiLCJjIiwiZnJvbUludCIsImZyb21OdW1iZXIiLCJmcm9tU3RyaW5nIiwibmJpIiwidW5kZWZpbmVkIiwicHJvdG90eXBlIiwiYW0iLCJhbTIiLCJ4bCIsInhoIiwiYW0xIiwiZmxvb3IiLCJhbTMiLCJEQiIsIkRNIiwiRFYiLCJGViIsIkYxIiwiRjIiLCJyciIsInZ2IiwiQklfUkMiLCJBcnJheSIsImNoYXJDb2RlQXQiLCJpbnQyY2hhciIsImNoYXJBdCIsImludEF0IiwicyIsIm5idiIsInIiLCJuYml0cyIsIkNsYXNzaWMiLCJNb250Z29tZXJ5IiwibXAiLCJpbnZEaWdpdCIsIm1wbCIsIm1waCIsInVtIiwibXQyIiwib3BfYW5kIiwib3Bfb3IiLCJvcF94b3IiLCJvcF9hbmRub3QiLCJsYml0IiwiY2JpdCIsIk51bGxFeHAiLCJuTm9wIiwiQmFycmV0dCIsInIyIiwicTMiLCJPTkUiLCJkbFNoaWZ0VG8iLCJtdSIsImNvbnZlcnQiLCJjQ29udmVydCIsImNvbXBhcmVUbyIsIm1vZCIsInJldmVydCIsImNSZXZlcnQiLCJyZWR1Y2UiLCJjUmVkdWNlIiwiZGl2UmVtVG8iLCJtdWxUbyIsImNNdWxUbyIsIm11bHRpcGx5VG8iLCJzcXJUbyIsImNTcXJUbyIsInNxdWFyZVRvIiwibW9udENvbnZlcnQiLCJaRVJPIiwic3ViVG8iLCJtb250UmV2ZXJ0IiwiY29weVRvIiwibW9udFJlZHVjZSIsInUwIiwiY2xhbXAiLCJkclNoaWZ0VG8iLCJtb250TXVsVG8iLCJtb250U3FyVG8iLCJibnBDb3B5VG8iLCJibnBGcm9tSW50IiwiYm5wRnJvbVN0cmluZyIsImZyb21SYWRpeCIsIm1pIiwic2giLCJibnBDbGFtcCIsImJucERMU2hpZnRUbyIsImJucERSU2hpZnRUbyIsImxTaGlmdFRvIiwiYm5wTFNoaWZ0VG8iLCJicyIsImNicyIsImJtIiwiZHMiLCJyU2hpZnRUbyIsImJucFJTaGlmdFRvIiwiYm5wU3ViVG8iLCJibnBNdWx0aXBseVRvIiwiYm5wU3F1YXJlVG8iLCJibnBEaXZSZW1UbyIsInEiLCJwbSIsInB0IiwidHMiLCJtcyIsIm5zaCIsInlzIiwieXQiLCJlIiwicWQiLCJibnBJbnZEaWdpdCIsImlzRXZlbiIsImJucElzRXZlbiIsImV4cCIsImJucEV4cCIsImciLCJiblRvU3RyaW5nIiwibmVnYXRlIiwidG9SYWRpeCIsImttIiwiYm5OZWdhdGUiLCJibkFicyIsImJuQ29tcGFyZVRvIiwiYml0TGVuZ3RoIiwiYm5CaXRMZW5ndGgiLCJibk1vZCIsIm1vZFBvd0ludCIsImJuTW9kUG93SW50Iiwibk11bFRvIiwiblNxclRvIiwiYmFycmV0dENvbnZlcnQiLCJiYXJyZXR0UmV2ZXJ0IiwiYmFycmV0dFJlZHVjZSIsIm11bHRpcGx5VXBwZXJUbyIsIm11bHRpcGx5TG93ZXJUbyIsImRBZGRPZmZzZXQiLCJiYXJyZXR0TXVsVG8iLCJiYXJyZXR0U3FyVG8iLCJsb3dwcmltZXMiLCJscGxpbSIsImNodW5rU2l6ZSIsImJucENodW5rU2l6ZSIsIkxOMiIsImxvZyIsImJucFRvUmFkaXgiLCJzaWdudW0iLCJjcyIsImludFZhbHVlIiwic3Vic3RyIiwiYm5wRnJvbVJhZGl4IiwiZE11bHRpcGx5IiwiYm5wRnJvbU51bWJlciIsInRlc3RCaXQiLCJiaXR3aXNlVG8iLCJzaGlmdExlZnQiLCJpc1Byb2JhYmxlUHJpbWUiLCJuZXh0Qnl0ZXMiLCJibnBCaXR3aXNlVG8iLCJvcCIsImYiLCJjaGFuZ2VCaXQiLCJibnBDaGFuZ2VCaXQiLCJhZGRUbyIsImJucEFkZFRvIiwiYm5wRE11bHRpcGx5IiwiYm5wREFkZE9mZnNldCIsImJucE11bHRpcGx5TG93ZXJUbyIsImJucE11bHRpcGx5VXBwZXJUbyIsIm1vZEludCIsImJucE1vZEludCIsIm1pbGxlclJhYmluIiwiYm5wTWlsbGVyUmFiaW4iLCJuMSIsImdldExvd2VzdFNldEJpdCIsInNoaWZ0UmlnaHQiLCJyYW5kb20iLCJtb2RQb3ciLCJibkNsb25lIiwiYm5JbnRWYWx1ZSIsImJ5dGVWYWx1ZSIsImJuQnl0ZVZhbHVlIiwic2hvcnRWYWx1ZSIsImJuU2hvcnRWYWx1ZSIsImJuU2lnTnVtIiwidG9CeXRlQXJyYXkiLCJiblRvQnl0ZUFycmF5IiwiYm5FcXVhbHMiLCJibk1pbiIsImJuTWF4IiwiYW5kIiwiYm5BbmQiLCJvciIsImJuT3IiLCJ4b3IiLCJiblhvciIsImFuZE5vdCIsImJuQW5kTm90Iiwibm90IiwiYm5Ob3QiLCJiblNoaWZ0TGVmdCIsImJuU2hpZnRSaWdodCIsImJuR2V0TG93ZXN0U2V0Qml0IiwiYml0Q291bnQiLCJibkJpdENvdW50IiwiYm5UZXN0Qml0Iiwic2V0Qml0IiwiYm5TZXRCaXQiLCJjbGVhckJpdCIsImJuQ2xlYXJCaXQiLCJmbGlwQml0IiwiYm5GbGlwQml0IiwiYm5BZGQiLCJiblN1YnRyYWN0IiwiYm5NdWx0aXBseSIsImJuRGl2aWRlIiwicmVtYWluZGVyIiwiYm5SZW1haW5kZXIiLCJkaXZpZGVBbmRSZW1haW5kZXIiLCJibkRpdmlkZUFuZFJlbWFpbmRlciIsImJuTW9kUG93IiwiazEiLCJnMiIsImlzMSIsIm1vZEludmVyc2UiLCJibk1vZEludmVyc2UiLCJhYyIsInUiLCJiblBvdyIsImdjZCIsImJuR0NEIiwiYm5Jc1Byb2JhYmxlUHJpbWUiLCJzcXVhcmUiLCJiblNxdWFyZSIsIkludDEyOCIsIklzTmVnYXRpdmUiLCJvcF9FcXVhbGl0eSIsInZhbDEiLCJ2YWwyIiwib3BfSW5lcXVhbGl0eSIsIm9wX0dyZWF0ZXJUaGFuIiwib3BfTGVzc1RoYW4iLCJvcF9BZGRpdGlvbiIsImxocyIsInJocyIsIm9wX1N1YnRyYWN0aW9uIiwiSW50MTI4TXVsIiwib3BfRGl2aXNpb24iLCJUb0RvdWJsZSIsInBhcnNlRmxvYXQiLCJJbmhlcml0IiwiY2UiLCJjZTIiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGJhc2VDdG9yIiwicHJvcHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsIlBhdGhzIiwiRG91YmxlUG9pbnQiLCJhcmd1bWVudHMiLCJEb3VibGVQb2ludDAiLCJEb3VibGVQb2ludDEiLCJkcCIsIkRvdWJsZVBvaW50MiIsIlBvbHlOb2RlIiwibV9QYXJlbnQiLCJtX3BvbHlnb24iLCJtX0luZGV4IiwibV9qb2ludHlwZSIsIm1fZW5kdHlwZSIsIm1fQ2hpbGRzIiwiSXNPcGVuIiwiSXNIb2xlTm9kZSIsIm5vZGUiLCJDaGlsZENvdW50IiwiQ29udG91ciIsIkFkZENoaWxkIiwiQ2hpbGQiLCJjbnQiLCJHZXROZXh0IiwiR2V0TmV4dFNpYmxpbmdVcCIsIkNoaWxkcyIsIlBhcmVudCIsIklzSG9sZSIsIlBvbHlUcmVlIiwibV9BbGxQb2x5cyIsImNhbGwiLCJDbGVhciIsImlsZW4iLCJHZXRGaXJzdCIsIlRvdGFsIiwiTWF0aF9BYnNfSW50NjQiLCJNYXRoX0Fic19JbnQzMiIsIk1hdGhfQWJzX0RvdWJsZSIsIk1hdGhfTWF4X0ludDMyX0ludDMyIiwiQ2FzdF9JbnQzMiIsIk51bWJlciIsInRvSW50ZWdlciIsIkNhc3RfSW50NjQiLCJjZWlsIiwicGFyc2VJbnQiLCJQSTIiLCJJbnRQb2ludCIsImFsZW4iLCJ1c2VfeHl6IiwiWiIsIkNsaXBwZXIiLCJSb3VuZCIsIkludFBvaW50MCIsIkludFBvaW50MSIsIkludFBvaW50MWRwIiwiSW50UG9pbnQyIiwiSW50UmVjdCIsImlyIiwiSW50UmVjdDAiLCJJbnRSZWN0MSIsIkludFJlY3Q0IiwiQ2xpcFR5cGUiLCJjdEludGVyc2VjdGlvbiIsImN0VW5pb24iLCJjdERpZmZlcmVuY2UiLCJjdFhvciIsIlBvbHlUeXBlIiwicHRTdWJqZWN0IiwicHRDbGlwIiwiUG9seUZpbGxUeXBlIiwicGZ0RXZlbk9kZCIsInBmdE5vblplcm8iLCJwZnRQb3NpdGl2ZSIsInBmdE5lZ2F0aXZlIiwiSm9pblR5cGUiLCJqdFNxdWFyZSIsImp0Um91bmQiLCJqdE1pdGVyIiwiRW5kVHlwZSIsImV0T3BlblNxdWFyZSIsImV0T3BlblJvdW5kIiwiZXRPcGVuQnV0dCIsImV0Q2xvc2VkTGluZSIsImV0Q2xvc2VkUG9seWdvbiIsIkVkZ2VTaWRlIiwiZXNMZWZ0IiwiZXNSaWdodCIsIkRpcmVjdGlvbiIsImRSaWdodFRvTGVmdCIsImRMZWZ0VG9SaWdodCIsIlRFZGdlIiwiQm90IiwiQ3VyciIsIlRvcCIsIkRlbHRhIiwiRHgiLCJQb2x5VHlwIiwiU2lkZSIsIldpbmREZWx0YSIsIldpbmRDbnQiLCJXaW5kQ250MiIsIk91dElkeCIsIk5leHQiLCJQcmV2IiwiTmV4dEluTE1MIiwiTmV4dEluQUVMIiwiUHJldkluQUVMIiwiTmV4dEluU0VMIiwiUHJldkluU0VMIiwiSW50ZXJzZWN0Tm9kZSIsIkVkZ2UxIiwiRWRnZTIiLCJQdCIsIk15SW50ZXJzZWN0Tm9kZVNvcnQiLCJDb21wYXJlIiwibm9kZTEiLCJub2RlMiIsIkxvY2FsTWluaW1hIiwiTGVmdEJvdW5kIiwiUmlnaHRCb3VuZCIsIlNjYW5iZWFtIiwiTWF4aW1hIiwiT3V0UmVjIiwiSWR4IiwiRmlyc3RMZWZ0IiwiUHRzIiwiQm90dG9tUHQiLCJPdXRQdCIsIkpvaW4iLCJPdXRQdDEiLCJPdXRQdDIiLCJPZmZQdCIsIkNsaXBwZXJCYXNlIiwibV9NaW5pbWFMaXN0IiwibV9DdXJyZW50TE0iLCJtX2VkZ2VzIiwibV9Vc2VGdWxsUmFuZ2UiLCJtX0hhc09wZW5QYXRocyIsIlByZXNlcnZlQ29sbGluZWFyIiwibV9TY2FuYmVhbSIsIm1fUG9seU91dHMiLCJtX0FjdGl2ZUVkZ2VzIiwiaG9yaXpvbnRhbCIsIlNraXAiLCJVbmFzc2lnbmVkIiwidG9sZXJhbmNlIiwibG9SYW5nZSIsImhpUmFuZ2UiLCJuZWFyX3plcm8iLCJ2YWwiLCJJc0hvcml6b250YWwiLCJQb2ludElzVmVydGV4IiwicHAiLCJwcDIiLCJQb2ludE9uTGluZVNlZ21lbnQiLCJsaW5lUHQxIiwibGluZVB0MiIsIlVzZUZ1bGxSYW5nZSIsIlBvaW50T25Qb2x5Z29uIiwiU2xvcGVzRXF1YWwiLCJlMSIsImUyIiwicHQxIiwicHQyIiwicHQzIiwicHQ0IiwiU2xvcGVzRXF1YWwzIiwiU2xvcGVzRXF1YWw0IiwiU2xvcGVzRXF1YWw1IiwiRGlzcG9zZUxvY2FsTWluaW1hTGlzdCIsImpsZW4iLCJ0bXBMbSIsIlJhbmdlVGVzdCIsInVzZUZ1bGxSYW5nZSIsIlZhbHVlIiwiRXJyb3IiLCJJbml0RWRnZSIsImVOZXh0IiwiZVByZXYiLCJJbml0RWRnZTIiLCJwb2x5VHlwZSIsIlNldER4IiwiRmluZE5leHRMb2NNaW4iLCJFIiwiRTIiLCJQcm9jZXNzQm91bmQiLCJMZWZ0Qm91bmRJc0ZvcndhcmQiLCJFU3RhcnQiLCJIb3J6IiwiUmVzdWx0IiwibG9jTWluIiwiSW5zZXJ0TG9jYWxNaW5pbWEiLCJSZXZlcnNlSG9yaXpvbnRhbCIsIkFkZFBhdGgiLCJwZyIsIkNsb3NlZCIsInVzZV9saW5lcyIsImhpZ2hJIiwiZWRnZXMiLCJJc0ZsYXQiLCIkMSIsImxlZnRCb3VuZElzRm9yd2FyZCIsImVTdGFydCIsImVMb29wU3RvcCIsIlB0MklzQmV0d2VlblB0MUFuZFB0MyIsIlJlbW92ZUVkZ2UiLCJFTWluIiwicHBnIiwibmV3TG0iLCJQb3BMb2NhbE1pbmltYSIsIlJlc2V0IiwibG0iLCJJbnNlcnRTY2FuYmVhbSIsIm5ld1NiIiwic2IyIiwibmV3U2IxIiwiUG9wU2NhbmJlYW0iLCJMb2NhbE1pbmltYVBlbmRpbmciLCJDcmVhdGVPdXRSZWMiLCJEaXNwb3NlT3V0UmVjIiwib3V0UmVjIiwiVXBkYXRlRWRnZUludG9BRUwiLCJBZWxQcmV2IiwiQWVsTmV4dCIsIlN3YXBQb3NpdGlvbnNJbkFFTCIsImVkZ2UxIiwiZWRnZTIiLCJuZXh0IiwicHJldiIsIm5leHQxIiwicHJldjEiLCJuZXh0MiIsInByZXYyIiwiRGVsZXRlRnJvbUFFTCIsIkluaXRPcHRpb25zIiwibV9DbGlwVHlwZSIsIm1fTWF4aW1hIiwibV9Tb3J0ZWRFZGdlcyIsIm1fSW50ZXJzZWN0TGlzdCIsIm1fSW50ZXJzZWN0Tm9kZUNvbXBhcmVyIiwibV9FeGVjdXRlTG9ja2VkIiwibV9DbGlwRmlsbFR5cGUiLCJtX1N1YmpGaWxsVHlwZSIsIm1fSm9pbnMiLCJtX0dob3N0Sm9pbnMiLCJtX1VzaW5nUG9seVRyZWUiLCJSZXZlcnNlU29sdXRpb24iLCJTdHJpY3RseVNpbXBsZSIsIlpGaWxsRnVuY3Rpb24iLCJpb1JldmVyc2VTb2x1dGlvbiIsImlvU3RyaWN0bHlTaW1wbGUiLCJpb1ByZXNlcnZlQ29sbGluZWFyIiwiRGlzcG9zZUFsbFBvbHlQdHMiLCJJbnNlcnRNYXhpbWEiLCJuZXdNYXgiLCJpc3BvbHl0cmVlIiwic3ViakZpbGxUeXBlIiwiY2xpcEZpbGxUeXBlIiwic3VjY2VlZGVkIiwiRXhlY3V0ZUludGVybmFsIiwiQnVpbGRSZXN1bHQiLCJwb2x5dHJlZSIsIkJ1aWxkUmVzdWx0MiIsIkZpeEhvbGVMaW5rYWdlIiwib3JmbCIsImJvdFkiLCJ0b3BZIiwiSW5zZXJ0TG9jYWxNaW5pbWFJbnRvQUVMIiwiUHJvY2Vzc0hvcml6b250YWxzIiwiUHJvY2Vzc0ludGVyc2VjdGlvbnMiLCJQcm9jZXNzRWRnZXNBdFRvcE9mU2NhbmJlYW0iLCJBcmVhJDEiLCJSZXZlcnNlUG9seVB0TGlua3MiLCJKb2luQ29tbW9uRWRnZXMiLCJGaXh1cE91dFBvbHlsaW5lIiwiRml4dXBPdXRQb2x5Z29uIiwiRG9TaW1wbGVQb2x5Z29ucyIsIkFkZEpvaW4iLCJPcDEiLCJPcDIiLCJBZGRHaG9zdEpvaW4iLCJPcCIsIlNldFoiLCJsYiIsInJiIiwiSW5zZXJ0RWRnZUludG9BRUwiLCJTZXRXaW5kaW5nQ291bnQiLCJJc0NvbnRyaWJ1dGluZyIsIkFkZE91dFB0IiwiQWRkTG9jYWxNaW5Qb2x5IiwiQWRkRWRnZVRvU0VMIiwiSG9yelNlZ21lbnRzT3ZlcmxhcCIsIkludGVyc2VjdEVkZ2VzIiwiZWRnZSIsInN0YXJ0RWRnZSIsIkUySW5zZXJ0c0JlZm9yZUUxIiwiVG9wWCIsIklzRXZlbk9kZEZpbGxUeXBlIiwiSXNFdmVuT2RkQWx0RmlsbFR5cGUiLCJwZnQiLCJwZnQyIiwiSW5zaWRlIiwiUG9wRWRnZUZyb21TRUwiLCJvbGRFIiwiQ29weUFFTFRvU0VMIiwiU3dhcFBvc2l0aW9uc0luU0VMIiwiQWRkTG9jYWxNYXhQb2x5IiwiQXBwZW5kUG9seWdvbiIsInByZXZFIiwieFByZXYiLCJ4RSIsIm91dFB0IiwibmV3T3AiLCJTZXRIb2xlU3RhdGUiLCJUb0Zyb250IiwiR2V0TGFzdE91dFB0IiwiU3dhcFBvaW50cyIsInNlZzFhIiwic2VnMWIiLCJzZWcyYSIsInNlZzJiIiwiZVRtcCIsIkdldER4IiwiRmlyc3RJc0JvdHRvbVB0IiwiYnRtUHQxIiwiYnRtUHQyIiwiZHgxcCIsImR4MW4iLCJkeDJwIiwiZHgybiIsIkFyZWEiLCJHZXRCb3R0b21QdCIsImR1cHMiLCJHZXRMb3dlcm1vc3RSZWMiLCJvdXRSZWMxIiwib3V0UmVjMiIsImJQdDEiLCJiUHQyIiwiT3V0UmVjMVJpZ2h0T2ZPdXRSZWMyIiwiR2V0T3V0UmVjIiwiaWR4Iiwib3V0cmVjIiwiaG9sZVN0YXRlUmVjIiwicDFfbGZ0IiwicDFfcnQiLCJwMl9sZnQiLCJwMl9ydCIsIk9LSWR4IiwiT2Jzb2xldGVJZHgiLCJwcDEiLCJTd2FwU2lkZXMiLCJzaWRlIiwiU3dhcFBvbHlJbmRleGVzIiwib3V0SWR4IiwiZTFDb250cmlidXRpbmciLCJlMkNvbnRyaWJ1dGluZyIsIm9sZEUxV2luZENudCIsImUxRmlsbFR5cGUiLCJlMkZpbGxUeXBlIiwiZTFGaWxsVHlwZTIiLCJlMkZpbGxUeXBlMiIsImUxV2MiLCJlMldjIiwiZTFXYzIiLCJlMldjMiIsIkRlbGV0ZUZyb21TRUwiLCJTZWxQcmV2IiwiU2VsTmV4dCIsImhvcnpFZGdlIiwiUHJvY2Vzc0hvcml6b250YWwiLCJHZXRIb3J6RGlyZWN0aW9uIiwiSG9yekVkZ2UiLCIkdmFyIiwiTGVmdCIsIlJpZ2h0IiwiRGlyIiwiZGlyIiwiaG9yekxlZnQiLCJob3J6UmlnaHQiLCJlTGFzdEhvcnoiLCJlTWF4UGFpciIsIkdldE1heGltYVBhaXIiLCJjdXJyTWF4Iiwib3AxIiwiSXNMYXN0SG9yeiIsIkdldE5leHRJbkFFTCIsImVOZXh0SG9yeiIsIm9wMiIsIklzTWluaW1hIiwiSXNNYXhpbWEiLCJJc0ludGVybWVkaWF0ZSIsIkdldE1heGltYVBhaXJFeCIsIkJ1aWxkSW50ZXJzZWN0TGlzdCIsIkZpeHVwSW50ZXJzZWN0aW9uT3JkZXIiLCJQcm9jZXNzSW50ZXJzZWN0TGlzdCIsIiQkZTIiLCJpc01vZGlmaWVkIiwiSW50ZXJzZWN0UG9pbnQiLCJuZXdOb2RlIiwiRWRnZXNBZGphY2VudCIsImlub2RlIiwiSW50ZXJzZWN0Tm9kZVNvcnQiLCJpTm9kZSIsIlIxIiwiUjMiLCJSNCIsIlIyIiwiY3VycmVudFkiLCJpcCIsImIxIiwiSXNNYXhpbWFFZGdlIiwiRG9NYXhpbWEiLCJlUHJldjIiLCJSZXZlcnNlUGF0aHMiLCJPcmllbnRhdGlvbiIsIlBvaW50Q291bnQiLCJwb2x5ZyIsInBuIiwibGFzdFBQIiwidG1wUFAiLCJsYXN0T0siLCJwcmVzZXJ2ZUNvbCIsIkR1cE91dFB0IiwiSW5zZXJ0QWZ0ZXIiLCJHZXRPdmVybGFwIiwiYTEiLCJhMiIsIiR2YWwiLCJKb2luSG9yeiIsIm9wMWIiLCJvcDJiIiwiRGlzY2FyZExlZnQiLCJEaXIxIiwiRGlyMiIsIkpvaW5Qb2ludHMiLCJpc0hvcml6b250YWwiLCJyZXZlcnNlMSIsIkRpc2NhcmRMZWZ0U2lkZSIsIlJldmVyc2UxIiwiUmV2ZXJzZTIiLCJHZXRCb3VuZHMiLCJwYXRocyIsIkdldEJvdW5kczIiLCJvcHMiLCJvcFN0YXJ0IiwiUG9pbnRJblBvbHlnb24iLCJpcE5leHQiLCJzdGFydE9wIiwicHR4IiwicHR5IiwicG9seTB4IiwicG9seTB5IiwicG9seTF4IiwicG9seTF5IiwiUG9seTJDb250YWluc1BvbHkxIiwib3V0UHQxIiwib3V0UHQyIiwiRml4dXBGaXJzdExlZnRzMSIsIk9sZE91dFJlYyIsIk5ld091dFJlYyIsImZpcnN0TGVmdCIsIlBhcnNlRmlyc3RMZWZ0IiwiRml4dXBGaXJzdExlZnRzMiIsImlubmVyT3V0UmVjIiwib3V0ZXJPdXRSZWMiLCJGaXh1cEZpcnN0TGVmdHMzIiwiam9pbiIsIlVwZGF0ZU91dFB0SWR4cyIsIm9wMyIsIm9wNCIsIm91dHJlYzIiLCJpc0FycmF5Iiwib3BGaXJzdCIsIlNpbXBsaWZ5UG9seWdvbiIsImZpbGxUeXBlIiwiU2ltcGxpZnlQb2x5Z29ucyIsIkRpc3RhbmNlU3FyZCIsImR4IiwiZHkiLCJEaXN0YW5jZUZyb21MaW5lU3FyZCIsImxuMSIsImxuMiIsIkEiLCJCIiwiQyIsIlNsb3Blc05lYXJDb2xsaW5lYXIiLCJkaXN0U3FyZCIsIlBvaW50c0FyZUNsb3NlIiwiRXhjbHVkZU9wIiwiQ2xlYW5Qb2x5Z29uIiwib3V0UHRzIiwiQ2xlYW5Qb2x5Z29ucyIsIk1pbmtvd3NraSIsInBhdHRlcm4iLCJJc1N1bSIsIklzQ2xvc2VkIiwicG9seUNudCIsInBhdGhDbnQiLCJxdWFkcyIsInF1YWQiLCJNaW5rb3dza2lTdW0iLCJwYXRoX29yX3BhdGhzIiwicGF0aElzQ2xvc2VkIiwiVHJhbnNsYXRlUGF0aCIsIm91dFBhdGgiLCJNaW5rb3dza2lEaWZmIiwicG9seTEiLCJwb2x5MiIsIlBvbHlUcmVlVG9QYXRocyIsIkFkZFBvbHlOb2RlVG9QYXRocyIsIk5vZGVUeXBlIiwibnRBbnkiLCJwb2x5bm9kZSIsIm50IiwibWF0Y2giLCJudE9wZW4iLCJudENsb3NlZCIsIiRpMyIsIiR0MyIsIiRsMyIsIk9wZW5QYXRoc0Zyb21Qb2x5VHJlZSIsIkNsb3NlZFBhdGhzRnJvbVBvbHlUcmVlIiwiQ2xpcHBlck9mZnNldCIsIm1pdGVyTGltaXQiLCJhcmNUb2xlcmFuY2UiLCJkZWZfYXJjX3RvbGVyYW5jZSIsIm1fZGVzdFBvbHlzIiwibV9zcmNQb2x5IiwibV9kZXN0UG9seSIsIm1fbm9ybWFscyIsIm1fZGVsdGEiLCJtX3NpbkEiLCJtX3NpbiIsIm1fY29zIiwibV9taXRlckxpbSIsIm1fU3RlcHNQZXJSYWQiLCJtX2xvd2VzdCIsIm1fcG9seU5vZGVzIiwiTWl0ZXJMaW1pdCIsIkFyY1RvbGVyYW5jZSIsInR3b19waSIsImpvaW5UeXBlIiwiZW5kVHlwZSIsIkZpeE9yaWVudGF0aW9ucyIsIkdldFVuaXROb3JtYWwiLCJEb09mZnNldCIsInN0ZXBzIiwiT2Zmc2V0UG9pbnQiLCJEb1NxdWFyZSIsIkRvUm91bmQiLCJYMiIsImNscHIiLCJvdXRlciIsIm91dGVyTm9kZSIsImpvaW50eXBlIiwiRG9NaXRlciIsInRhbiIsIm1lc3NhZ2UiLCJhbGVydCIsIkpTIiwiQXJlYU9mUG9seWdvbiIsIkFyZWFPZlBvbHlnb25zIiwiYXJlYSIsIkJvdW5kc09mUGF0aCIsIkJvdW5kc09mUGF0aHMiLCJDbGVhbiIsInBvbHlnb24iLCJpc1BvbHlnb25zIiwiQ2xvbmUiLCJrX2xlbmd0aCIsInJlc3VsdHMiLCJwbGVuIiwiTGlnaHRlbiIsIlAiLCJyZW0iLCJhZGRsYXN0IiwiYnhheCIsImJ5YXkiLCJheCIsImF5IiwidG9sZXJhbmNlU3EiLCJwb3AiLCJQZXJpbWV0ZXJPZlBhdGgiLCJwZXJpbWV0ZXIiLCJwMXgiLCJwMXkiLCJwMngiLCJwMnkiLCJQZXJpbWV0ZXJPZlBhdGhzIiwiU2NhbGVEb3duUGF0aCIsIlNjYWxlRG93blBhdGhzIiwiU2NhbGVVcFBhdGgiLCJTY2FsZVVwUGF0aHMiLCJFeFBvbHlnb25zIiwiRXhQb2x5Z29uIiwiaG9sZXMiLCJBZGRPdXRlclBvbHlOb2RlVG9FeFBvbHlnb25zIiwiZXhwb2x5Z29ucyIsImVwIiwiY2hpbGRzMiIsImNoaWxkcyIsIkV4UG9seWdvbnNUb1BhdGhzIiwiUG9seVRyZWVUb0V4UG9seWdvbnMiLCJJbml0aWFsU2tldGNoIiwicG9zIiwidnMiLCJ4RHJpZnQiLCJSYW5nZSIsIm5hbWUiLCJpbml0aWFsVmFsdWUiLCJ5RHJpZnQiLCJjaXJjbGVNaW5SYWRpdXMiLCJjaXJjbGVNYXhSYWRpdXMiLCJjaXJjbGVEcmlmdCIsImNpcmNsZVNwYXduUmF0ZSIsInN0ZXAiLCJjaXJjbGVTcGF3bkNoYW5jZSIsInZhbHVlIiwic2V0VmFsdWUiLCJ3cmFwIiwic3Ryb2tlU3R5bGUiLCJyYW5kSW50UmFuZ2UiLCJiZWdpblBhdGgiLCJyYW5kRmxvYXQiLCJzdHJva2UiLCJjbG9zZVBhdGgiLCJwcmV2RmlsbFN0eWxlIiwiZmlsbFN0eWxlIiwicHJldlN0cm9rZVN0eWxlIiwiY2lyY2xlIiwicmFuZEludCIsImZpbGwiLCJHQ29kZVRlc3QiLCJkcml2ZXIiLCJjb21tZW50Iiwic3Ryb2tlUmVjdCIsImZpbGxSZWN0IiwiQXJjcyIsInByZWNpc2lvbiIsInNwZWVkUG93MSIsInJhZGl1c01pbiIsInJhZGl1c01heCIsInJhZGl1c1RoZXRhTXVsdGkiLCJvc2MiLCJPc2MiLCJzcGVlZCIsImNvbnNvbGUiLCJjb3VudCIsInN0YXJ0UG9pbnQiLCJhcmMiLCJjaXJjbGVQb2ludHMiLCJCZXppZXJTY3JpYmJsZXMiLCJzdG9wQWZ0ZXIiLCJkcmlmdE1pbiIsImRyaWZ0TWF4IiwibWlkcG9pbnREcmlmdCIsImxhc3RBbmNob3JQb2ludCIsImVuZFBvaW50IiwiZGlzdCIsIm1pZFBvaW50IiwiU3BpcmFsaW5nIiwic2NhbGVEb3duIiwic3BlZWRVcCIsImRpc2FibGVSYW5kb21pemUiLCJvc2Mxc3BlZWQiLCJvc2MxZGlzdCIsIm9zYzFwaGFzZSIsIm9zYzJzcGVlZCIsIm9zYzJkaXN0Iiwib3NjMnBoYXNlIiwib3NjM3NwZWVkIiwib3NjM2Rpc3QiLCJvc2MzcGhhc2UiLCJvc2MxIiwicGhhc2UiLCJvc2MyIiwib3NjMyIsImxvb3AiLCJTcGlyYWxpbmdQcm9wb3J0aW9uYWwiLCJvc2NTcGVlZCIsIm9zY1NwZWVkTXVsdGkiLCJvc2NEaXN0IiwiQ29uY2VudHJpY0NpcmNsZXMiLCJzaHJpbmtBbW91bnQiLCJzaHJpbmtEaXYiLCJzaHJpbmtGYWxsb2ZmIiwic2hyaW5rVmFyaWFuY2UiLCJzaHJpbmtWYXJPc2MiLCJyb3RhdGVTcGVlZCIsInRoZXRhIiwicmVhbEluY3JlbWVudCIsIm5leHRSYWRpdXMiLCJyYWREaWZmIiwiQnViYmxlc0luQ2lyY2xlIiwic2VlZCIsImF0TGVhc3QiLCJtYXhSYWRpdXMiLCJtaW5SYWRpdXMiLCJzZWVkUmFuZG9tIiwicmVvcmRlcmVkIiwicmVkcmF3bkNvdW50IiwiY2lyY2xlcyIsInBvc2l0aW9uIiwiY2VudGVyIiwibmV3UmFkaXVzIiwiYWxsb3dlZCIsImRpc3RUb0VkZ2UiLCJyYWRpdXNlcyIsIkdyaWRXYXZlcyIsImNvbHMiLCJyb3dzIiwiZ2FwIiwib3V0ZXJHYXAiLCJlZmZlY3RpdmVXaWR0aCIsImVmZmVjdGl2ZUhlaWdodCIsImJveFdpZHRoIiwicmVjdCIsIlBlcmxpbkdyaWQiLCJzaGFwZSIsInNpemUiLCJwZXJsaW5EaXYiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInNlZWROb2lzZSIsImRyYXdDb3VudCIsIm1heERyYXdDb3VudCIsImNvbFdpZHRoIiwicm93SGVpZ2h0IiwicmVhbENvdW50IiwieFBvcyIsInlQb3MiLCJwZXJsaW4yIiwiUGVybGluTGluZXMiLCJwZXJsaW5EaXZYIiwicGVybGluRGl2WSIsInBlcmxpbk9mZnNldFgiLCJwZXJsaW5PZmZzZXRZIiwiZHJhd09mZnNldFN0YXJ0IiwiZHJhd09mZnNldEVuZCIsInNwYWNlWCIsInNwYWNlWSIsImFkanVzdGVkU2l6ZSIsIlRyZWUiLCJpbml0QnJhbmNoTGVuZ3RoIiwiYnJhbmNoTGVuZ3RoRmFsbG9mZiIsInNwbGl0UHJvYmFiaWxpdHkiLCJwcnVuZVByb2JhYmlsaXR5IiwiYmxvb21Qcm9iYWJpbGl0eSIsImJsb29tU2l6ZSIsInNwbGl0QW5nbGVSYW5nZSIsInNwbGl0QW5nbGVCcmFuY2hMZXZlbE11bHRpIiwic3BsaXRBbmdsZU1pblBlcmNlbnQiLCJjaGFvc0ZhY3RvciIsInNwbGl0Q291bnQiLCJtYXhCcmFuY2hMZXZlbHMiLCJicmFuY2hMZXZlbCIsImRyYXduQ3VycmVudFN0ZW1zIiwiY3VycmVudFN0ZW1zIiwibmV4dFN0ZW1zIiwiZHJhd0JyYW5jaCIsInN0ZW0iLCJzcGxpdEludG8iLCJhZGp1c3RlZFNwbGl0QW5nbGVSYW5nZSIsInNwbGl0QW5nbGVTcGFuIiwicmFuZEZsb2F0UmFuZ2UiLCJzcGxpdFNsaWNlIiwiZHJhd0Jsb29tIiwiTW9uZGF5TWF6ZSIsImdyaWRTaXplIiwicmFkaWFsRGl2cyIsIm9mZnNldEFuZyIsInhJIiwieUkiLCJvZmZzZXRBbmdsZSIsInNlZ21lbnRWYWx1ZSIsInNlZ0luZGV4Iiwibm9ybWFsaXplUmFkaWFuIiwib3B0aW9ucyIsInNwZWVkRnVuYyIsInJhZGl1c0Z1bmMiLCJvZmZzZXRQaGFzZSIsInByb2Nlc3MiLCJjb3VudGVyIiwiX3ZhbHVlIiwiX2Rpc2FibGVSYW5kb21pemUiLCJ1cGRhdGVJbnB1dCIsImlucHV0RWxlbSIsIlN0cmluZyIsInBpZWNlcyIsIkdyYWQiLCJncmFkMyIsInBlcm0iLCJncmFkUCIsImZhZGUiLCJsZXJwIiwibjAwIiwiZG90MiIsIm4wMSIsIm4xMCIsIm4xMSIsInJhbmdlIiwiY291bnREZWNpbWFscyIsIm51bWJlciIsIm1vc3QiLCJmbG9hdFN0cmluZyIsImRlY2ltYWxzIiwiZGVjaW1hbHNDb3VudCIsInRvRml4ZWQiLCJyYWRpYW4iLCJzZWdtZW50cyIsInRvdGFsU2VnbWVudHMiLCJFUFNJTE9OIiwiYVN0YXJ0IiwiYUVuZCIsInBvaW50c1RvQXJjIiwic2FtZUZsb2F0IiwiZXBzaWxvbiIsImFic0EiLCJhYnNCIiwiZGlmZiIsIk1JTl9WQUxVRSIsIm1fdyIsIm1feiIsIm1hc2siLCJpbnRlZ2VyIiwiRlVOQ19FUlJPUl9URVhUIiwiSEFTSF9VTkRFRklORUQiLCJQTEFDRUhPTERFUiIsIldSQVBfQ1VSUllfUklHSFRfRkxBRyIsIldSQVBfUEFSVElBTF9GTEFHIiwiV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUciLCJXUkFQX0FSWV9GTEFHIiwiV1JBUF9SRUFSR19GTEFHIiwiSU5GSU5JVFkiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTkFOIiwiTUFYX0FSUkFZX0xFTkdUSCIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicHJvbWlzZVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVFbXB0eVN0cmluZ0xlYWRpbmciLCJyZUVtcHR5U3RyaW5nTWlkZGxlIiwicmVFbXB0eVN0cmluZ1RyYWlsaW5nIiwicmVFc2NhcGVkSHRtbCIsInJlVW5lc2NhcGVkSHRtbCIsInJlSGFzRXNjYXBlZEh0bWwiLCJSZWdFeHAiLCJzb3VyY2UiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJyZUVzY2FwZSIsInJlRXZhbHVhdGUiLCJyZUludGVycG9sYXRlIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInJlUHJvcE5hbWUiLCJyZVJlZ0V4cENoYXIiLCJyZUhhc1JlZ0V4cENoYXIiLCJyZVRyaW1TdGFydCIsInJlV2hpdGVzcGFjZSIsInJlV3JhcENvbW1lbnQiLCJyZVdyYXBEZXRhaWxzIiwicmVTcGxpdERldGFpbHMiLCJyZUFzY2lpV29yZCIsInJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzRGluZ2JhdFJhbmdlIiwicnNMb3dlclJhbmdlIiwicnNVcHBlclJhbmdlIiwicnNWYXJSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0Fwb3MiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicnNPcHRDb250ckxvd2VyIiwicnNPcHRDb250clVwcGVyIiwicmVPcHRNb2QiLCJyc09wdFZhciIsInJzU2VxIiwicnNFbW9qaSIsInJzU3ltYm9sIiwicmVBcG9zIiwicmVDb21ib01hcmsiLCJyZVVuaWNvZGUiLCJyZVVuaWNvZGVXb3JkIiwicmVIYXNVbmljb2RlIiwicmVIYXNVbmljb2RlV29yZCIsImNvbnRleHRQcm9wcyIsInRlbXBsYXRlQ291bnRlciIsInR5cGVkQXJyYXlUYWdzIiwiY2xvbmVhYmxlVGFncyIsInN0cmluZ0VzY2FwZXMiLCJmcmVlUGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsImZyZWVQcm9jZXNzIiwibm9kZVV0aWwiLCJ0eXBlcyIsInJlcXVpcmUiLCJiaW5kaW5nIiwibm9kZUlzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyIiwibm9kZUlzRGF0ZSIsImlzRGF0ZSIsIm5vZGVJc01hcCIsImlzTWFwIiwibm9kZUlzUmVnRXhwIiwiaXNSZWdFeHAiLCJub2RlSXNTZXQiLCJpc1NldCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJmdW5jIiwidGhpc0FyZyIsImFycmF5QWdncmVnYXRvciIsImFycmF5Iiwic2V0dGVyIiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImFycmF5RWFjaCIsImFycmF5RWFjaFJpZ2h0IiwiYXJyYXlFdmVyeSIsInByZWRpY2F0ZSIsImFycmF5RmlsdGVyIiwicmVzSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYmFzZUluZGV4T2YiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNvbXBhcmF0b3IiLCJhcnJheU1hcCIsImFycmF5UHVzaCIsInZhbHVlcyIsImFycmF5UmVkdWNlIiwiaW5pdEFjY3VtIiwiYXJyYXlSZWR1Y2VSaWdodCIsImFycmF5U29tZSIsImFzY2lpU2l6ZSIsImJhc2VQcm9wZXJ0eSIsImJhc2VGaW5kS2V5IiwiY29sbGVjdGlvbiIsImVhY2hGdW5jIiwia2V5IiwiYmFzZUZpbmRJbmRleCIsImZyb21JbmRleCIsImZyb21SaWdodCIsInN0cmljdEluZGV4T2YiLCJiYXNlSXNOYU4iLCJiYXNlSW5kZXhPZldpdGgiLCJiYXNlTWVhbiIsImJhc2VTdW0iLCJvYmplY3QiLCJiYXNlUHJvcGVydHlPZiIsImJhc2VSZWR1Y2UiLCJiYXNlVGltZXMiLCJiYXNlVHJpbSIsInN0cmluZyIsInRyaW1tZWRFbmRJbmRleCIsInJlcGxhY2UiLCJiYXNlVW5hcnkiLCJiYXNlVmFsdWVzIiwiY2FjaGVIYXMiLCJjYWNoZSIsImhhcyIsImNoYXJzU3RhcnRJbmRleCIsInN0clN5bWJvbHMiLCJjaHJTeW1ib2xzIiwiY2hhcnNFbmRJbmRleCIsImNvdW50SG9sZGVycyIsInBsYWNlaG9sZGVyIiwiZGVidXJyTGV0dGVyIiwiZXNjYXBlSHRtbENoYXIiLCJlc2NhcGVTdHJpbmdDaGFyIiwiY2hyIiwiaGFzVW5pY29kZSIsIm1hcFRvQXJyYXkiLCJvdmVyQXJnIiwidHJhbnNmb3JtIiwiYXJnIiwicmVwbGFjZUhvbGRlcnMiLCJzZXRUb0FycmF5Iiwic2V0VG9QYWlycyIsInN0cmluZ1NpemUiLCJ1bmljb2RlU2l6ZSIsImxhc3RJbmRleCIsInN0cmluZ1RvQXJyYXkiLCJ1bmljb2RlVG9BcnJheSIsImFzY2lpVG9BcnJheSIsInNwbGl0IiwidW5lc2NhcGVIdG1sQ2hhciIsIl8iLCJydW5JbkNvbnRleHQiLCJjb250ZXh0IiwidWlkIiwiZGVmYXVsdHMiLCJwaWNrIiwiRGF0ZSIsIlR5cGVFcnJvciIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsImlkQ291bnRlciIsIm1hc2tTcmNLZXkiLCJleGVjIiwia2V5cyIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RDdG9yU3RyaW5nIiwib2xkRGFzaCIsInJlSXNOYXRpdmUiLCJCdWZmZXIiLCJTeW1ib2wiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdENyZWF0ZSIsImNyZWF0ZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3ByZWFkYWJsZVN5bWJvbCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInN5bUl0ZXJhdG9yIiwiaXRlcmF0b3IiLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiZ2V0TmF0aXZlIiwiY3R4Q2xlYXJUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3R4Tm93Iiwibm93IiwiY3R4U2V0VGltZW91dCIsInNldFRpbWVvdXQiLCJuYXRpdmVDZWlsIiwibmF0aXZlRmxvb3IiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibmF0aXZlSXNCdWZmZXIiLCJpc0J1ZmZlciIsIm5hdGl2ZUlzRmluaXRlIiwiaXNGaW5pdGUiLCJuYXRpdmVKb2luIiwibmF0aXZlS2V5cyIsIm5hdGl2ZU1heCIsIm5hdGl2ZU1pbiIsIm5hdGl2ZU5vdyIsIm5hdGl2ZVBhcnNlSW50IiwibmF0aXZlUmFuZG9tIiwibmF0aXZlUmV2ZXJzZSIsIkRhdGFWaWV3IiwiTWFwIiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJuYXRpdmVDcmVhdGUiLCJtZXRhTWFwIiwicmVhbE5hbWVzIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwidG9Tb3VyY2UiLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJ2YWx1ZU9mIiwic3ltYm9sVG9TdHJpbmciLCJsb2Rhc2giLCJpc09iamVjdExpa2UiLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlQ3JlYXRlIiwicHJvdG8iLCJpc09iamVjdCIsImJhc2VMb2Rhc2giLCJjaGFpbkFsbCIsIl9fd3JhcHBlZF9fIiwiX19hY3Rpb25zX18iLCJfX2NoYWluX18iLCJfX2luZGV4X18iLCJfX3ZhbHVlc19fIiwiX19kaXJfXyIsIl9fZmlsdGVyZWRfXyIsIl9faXRlcmF0ZWVzX18iLCJfX3Rha2VDb3VudF9fIiwiX192aWV3c19fIiwiSGFzaCIsImVudHJpZXMiLCJjbGVhciIsImVudHJ5IiwiTGlzdENhY2hlIiwiTWFwQ2FjaGUiLCJTZXRDYWNoZSIsIl9fZGF0YV9fIiwiU3RhY2siLCJkYXRhIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImVxIiwiYmFzZUFzc2lnblZhbHVlIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsImJhc2VBZ2dyZWdhdG9yIiwiYmFzZUVhY2giLCJiYXNlQXNzaWduIiwiY29weU9iamVjdCIsImJhc2VBdCIsInNraXAiLCJnZXQiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImluaXRDbG9uZUFycmF5IiwiY29uc3RydWN0b3IiLCJpbnB1dCIsInRhZyIsImdldFRhZyIsImlzRnVuYyIsImNsb25lQnVmZmVyIiwiaW5pdENsb25lT2JqZWN0IiwiY29weVN5bWJvbHNJbiIsImdldFN5bWJvbHNJbiIsImJhc2VBc3NpZ25JbiIsImtleXNJbiIsImNvcHlTeW1ib2xzIiwiZ2V0U3ltYm9scyIsImluaXRDbG9uZUJ5VGFnIiwiQ3RvciIsImNsb25lQXJyYXlCdWZmZXIiLCJjbG9uZURhdGFWaWV3IiwiZGF0YVZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNsb25lVHlwZWRBcnJheSIsImNsb25lUmVnRXhwIiwicmVnZXhwIiwiY2xvbmVTeW1ib2wiLCJzeW1ib2wiLCJzdGFja2VkIiwic3ViVmFsdWUiLCJnZXRBbGxLZXlzSW4iLCJnZXRBbGxLZXlzIiwiYmFzZUNvbmZvcm1zVG8iLCJiYXNlRGVsYXkiLCJ3YWl0IiwiYmFzZURpZmZlcmVuY2UiLCJpbmNsdWRlcyIsImlzQ29tbW9uIiwidmFsdWVzTGVuZ3RoIiwiY29tcHV0ZWQiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJoYXNoQ2xlYXIiLCJoYXNoRGVsZXRlIiwiaGFzaEdldCIsImhhc2hIYXMiLCJoYXNoU2V0IiwibGlzdENhY2hlQ2xlYXIiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJtYXBDYWNoZUNsZWFyIiwibWFwQ2FjaGVEZWxldGUiLCJnZXRNYXBEYXRhIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0Iiwic2V0Q2FjaGVBZGQiLCJzZXRDYWNoZUhhcyIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvck93biIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJpc1N5bWJvbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImlzU3RyaWN0IiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiYmFzZUZvclJpZ2h0IiwiYmFzZUZ1bmN0aW9ucyIsImlzRnVuY3Rpb24iLCJiYXNlR2V0IiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJnZXRSYXdUYWciLCJpc093biIsInVubWFza2VkIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR3QiLCJvdGhlciIsImJhc2VIYXMiLCJiYXNlSGFzSW4iLCJiYXNlSW50ZXJzZWN0aW9uIiwiYXJyYXlzIiwib3RoTGVuZ3RoIiwib3RoSW5kZXgiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJzZWVuIiwiYmFzZUludm9rZSIsInBhcmVudCIsImxhc3QiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImJhc2VJc0VxdWFsRGVlcCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJlcXVhbEJ5VGFnIiwiaXNQYXJ0aWFsIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwiZXF1YWxPYmplY3RzIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJvYmpTdGFja2VkIiwib3RoU3RhY2tlZCIsInNraXBDdG9yIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm9iakN0b3IiLCJvdGhDdG9yIiwiYmFzZUlzTWF0Y2giLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJzcmNWYWx1ZSIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiYmFzZUlzTmF0aXZlIiwiaXNNYXNrZWQiLCJiYXNlSXRlcmF0ZWUiLCJpZGVudGl0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsInByb3BlcnR5IiwiYmFzZUtleXMiLCJpc1Byb3RvdHlwZSIsImJhc2VLZXlzSW4iLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiYmFzZUx0IiwiYmFzZU1hcCIsImlzQXJyYXlMaWtlIiwiZ2V0TWF0Y2hEYXRhIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJpc0tleSIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImhhc0luIiwiYmFzZU1lcmdlIiwic3JjSW5kZXgiLCJiYXNlTWVyZ2VEZWVwIiwibWVyZ2VGdW5jIiwic2FmZUdldCIsIm5ld1ZhbHVlIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTnRoIiwiYmFzZU9yZGVyQnkiLCJpdGVyYXRlZXMiLCJvcmRlcnMiLCJnZXRJdGVyYXRlZSIsImNyaXRlcmlhIiwiYmFzZVNvcnRCeSIsImNvbXBhcmVyIiwiY29tcGFyZU11bHRpcGxlIiwib2JqQ3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJiYXNlUGlja0J5IiwiYmFzZVNldCIsImJhc2VQdWxsQWxsIiwiYmFzZVB1bGxBdCIsImluZGV4ZXMiLCJwcmV2aW91cyIsImJhc2VVbnNldCIsImJhc2VSZXBlYXQiLCJiYXNlUmVzdCIsInNldFRvU3RyaW5nIiwib3ZlclJlc3QiLCJiYXNlU2FtcGxlIiwiYmFzZVNhbXBsZVNpemUiLCJuZXN0ZWQiLCJiYXNlU2V0RGF0YSIsImJhc2VTZXRUb1N0cmluZyIsImNvbnN0YW50IiwiYmFzZVNodWZmbGUiLCJiYXNlU2xpY2UiLCJiYXNlU29tZSIsImJhc2VTb3J0ZWRJbmRleCIsInJldEhpZ2hlc3QiLCJsb3ciLCJoaWdoIiwibWlkIiwiYmFzZVNvcnRlZEluZGV4QnkiLCJ2YWxJc05hTiIsInZhbElzTnVsbCIsInZhbElzU3ltYm9sIiwidmFsSXNVbmRlZmluZWQiLCJvdGhJc0RlZmluZWQiLCJvdGhJc051bGwiLCJvdGhJc1JlZmxleGl2ZSIsIm90aElzU3ltYm9sIiwic2V0TG93IiwiYmFzZVNvcnRlZFVuaXEiLCJiYXNlVG9OdW1iZXIiLCJiYXNlVG9TdHJpbmciLCJiYXNlVW5pcSIsImNyZWF0ZVNldCIsInNlZW5JbmRleCIsImJhc2VVcGRhdGUiLCJ1cGRhdGVyIiwiYmFzZVdoaWxlIiwiaXNEcm9wIiwiYmFzZVdyYXBwZXJWYWx1ZSIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJpZCIsImFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzSW5kZXgiLCJhcmdzTGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRJbmRleCIsImxlZnRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsImlzVW5jdXJyaWVkIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImlzTmV3IiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiaXRlcmFibGUiLCJjcmVhdGVDYXNlRmlyc3QiLCJtZXRob2ROYW1lIiwidHJhaWxpbmciLCJjcmVhdGVDb21wb3VuZGVyIiwiY2FsbGJhY2siLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImZuIiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImRlZmF1bHRWYWx1ZSIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJuZXdEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImNyZWF0ZVJvdW5kIiwicGFpciIsIm5vb3AiLCJjcmVhdGVUb1BhaXJzIiwiYmFzZVRvUGFpcnMiLCJjcmVhdGVXcmFwIiwibWVyZ2VEYXRhIiwic3JjQml0bWFzayIsIm5ld0JpdG1hc2siLCJpc0NvbWJvIiwiY3JlYXRlQ3VycnkiLCJjcmVhdGVQYXJ0aWFsIiwiY3JlYXRlQmluZCIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJjdXN0b21EZWZhdWx0c01lcmdlIiwiY3VzdG9tT21pdENsb25lIiwiYXJyTGVuZ3RoIiwiYXJyU3RhY2tlZCIsImFyclZhbHVlIiwiZmxhdHRlbiIsIm90aGVyRnVuYyIsImlzS2V5YWJsZSIsImdldFZhbHVlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsIkFycmF5QnVmZmVyIiwicmVzb2x2ZSIsImN0b3JTdHJpbmciLCJpc01hc2thYmxlIiwic3R1YkZhbHNlIiwib3RoZXJBcmdzIiwib2xkQXJyYXkiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImluc2VydFdyYXBEZXRhaWxzIiwiZGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJyYW5kIiwibWVtb2l6ZUNhcHBlZCIsIm1lbW9pemUiLCJxdW90ZSIsInN1YlN0cmluZyIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJoZWFkIiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsImdyb3VwIiwidW56aXBXaXRoIiwid2l0aG91dCIsInhvckJ5IiwieG9yV2l0aCIsInppcCIsInppcFdpdGgiLCJjaGFpbiIsImludGVyY2VwdG9yIiwid3JhcHBlckF0IiwiY291bnRCeSIsImZpbmQiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbnZva2VNYXAiLCJrZXlCeSIsInBhcnRpdGlvbiIsInNvcnRCeSIsImJlZm9yZSIsImJpbmQiLCJiaW5kS2V5IiwiV1JBUF9CSU5EX0ZMQUciLCJkZWJvdW5jZSIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsImludm9rZUZ1bmMiLCJ0aW1lIiwibGVhZGluZ0VkZ2UiLCJ0aW1lckV4cGlyZWQiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRyYWlsaW5nRWRnZSIsInJlbWFpbmluZ1dhaXQiLCJ0aW1lV2FpdGluZyIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJjYW5jZWwiLCJmbHVzaCIsImRlZmVyIiwiZGVsYXkiLCJyZXNvbHZlciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJvdmVyQXJncyIsInRyYW5zZm9ybXMiLCJmdW5jc0xlbmd0aCIsInBhcnRpYWwiLCJwYXJ0aWFsUmlnaHQiLCJyZWFyZyIsImd0ZSIsImJhc2VJc0FycmF5QnVmZmVyIiwiYmFzZUlzRGF0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJiYXNlSXNNYXAiLCJpc051bWJlciIsImJhc2VJc1JlZ0V4cCIsImJhc2VJc1NldCIsImlzU3RyaW5nIiwiYmFzZUlzVHlwZWRBcnJheSIsImx0ZSIsInRvQXJyYXkiLCJpdGVyYXRvclRvQXJyYXkiLCJkb25lIiwidG9MZW5ndGgiLCJpc0JpbmFyeSIsImFzc2lnbiIsImFzc2lnbkluIiwiYXNzaWduSW5XaXRoIiwiYXNzaWduV2l0aCIsImF0IiwicHJvcHNJbmRleCIsInByb3BzTGVuZ3RoIiwiZGVmYXVsdHNEZWVwIiwibWVyZ2VXaXRoIiwiaW52ZXJ0IiwiaW52ZXJ0QnkiLCJpbnZva2UiLCJtZXJnZSIsIm9taXQiLCJDTE9ORV9ERUVQX0ZMQUciLCJiYXNlUGljayIsInBpY2tCeSIsInByb3AiLCJ0b1BhaXJzIiwidG9QYWlyc0luIiwiY2FtZWxDYXNlIiwid29yZCIsImNhcGl0YWxpemUiLCJ1cHBlckZpcnN0Iiwia2ViYWJDYXNlIiwibG93ZXJDYXNlIiwibG93ZXJGaXJzdCIsInNuYWtlQ2FzZSIsInN0YXJ0Q2FzZSIsInVwcGVyQ2FzZSIsInRvVXBwZXJDYXNlIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2QiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwiYmFzZVByb3BlcnR5RGVlcCIsInJhbmdlUmlnaHQiLCJhdWdlbmQiLCJhZGRlbmQiLCJkaXZpZGVuZCIsImRpdmlzb3IiLCJtdWx0aXBsaWVyIiwibXVsdGlwbGljYW5kIiwibWludWVuZCIsInN1YnRyYWhlbmQiLCJhZnRlciIsImNhc3RBcnJheSIsImNodW5rIiwiY29tcGFjdCIsImNvbmQiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsInByb3BlcnRpZXMiLCJjdXJyeSIsImN1cnJ5UmlnaHQiLCJkcm9wIiwiZHJvcFJpZ2h0IiwiZHJvcFJpZ2h0V2hpbGUiLCJkcm9wV2hpbGUiLCJiYXNlRmlsbCIsImZpbHRlciIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW5EZWVwIiwiZmxhdHRlbkRlcHRoIiwiZmxpcCIsImZyb21QYWlycyIsImZ1bmN0aW9ucyIsImZ1bmN0aW9uc0luIiwiaW5pdGlhbCIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJtYXRjaGVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib25jZSIsIm9yZGVyQnkiLCJwcm9wZXJ0eU9mIiwicHVsbEFsbEJ5IiwicHVsbEFsbFdpdGgiLCJyZWplY3QiLCJyZW1vdmUiLCJyZXN0Iiwic2FtcGxlU2l6ZSIsInNldFdpdGgiLCJzaHVmZmxlIiwic29ydGVkVW5pcSIsInNvcnRlZFVuaXFCeSIsInNlcGFyYXRvciIsImxpbWl0Iiwic3ByZWFkIiwidGFpbCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwiaXNBcnJMaWtlIiwidW5hcnkiLCJ1bmlxIiwidW5pcUJ5IiwidW5pcVdpdGgiLCJ1bnNldCIsInVwZGF0ZSIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsInppcE9iamVjdCIsInppcE9iamVjdERlZXAiLCJlbnRyaWVzSW4iLCJleHRlbmQiLCJleHRlbmRXaXRoIiwiY2xvbmVEZWVwIiwiY2xvbmVEZWVwV2l0aCIsImNsb25lV2l0aCIsImNvbmZvcm1zVG8iLCJkZWZhdWx0VG8iLCJlbmRzV2l0aCIsInRhcmdldCIsImVzY2FwZSIsImVzY2FwZVJlZ0V4cCIsImV2ZXJ5IiwiZmluZEtleSIsImZpbmRMYXN0S2V5IiwiZm9ySW4iLCJmb3JJblJpZ2h0IiwiZm9yT3duIiwiZm9yT3duUmlnaHQiLCJpblJhbmdlIiwiYmFzZUluUmFuZ2UiLCJpc0Jvb2xlYW4iLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNNYXRjaCIsImlzTWF0Y2hXaXRoIiwiaXNOYXRpdmUiLCJpc05pbCIsImlzTnVsbCIsImlzU2FmZUludGVnZXIiLCJpc1VuZGVmaW5lZCIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImxhc3RJbmRleE9mIiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJub0NvbmZsaWN0IiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicGFkU3RhcnQiLCJyYWRpeCIsImZsb2F0aW5nIiwidGVtcCIsInJlZHVjZVJpZ2h0IiwicmVwZWF0Iiwic2FtcGxlIiwic29tZSIsInNvcnRlZEluZGV4Iiwic29ydGVkSW5kZXhCeSIsInNvcnRlZEluZGV4T2YiLCJzb3J0ZWRMYXN0SW5kZXgiLCJzb3J0ZWRMYXN0SW5kZXhCeSIsInNvcnRlZExhc3RJbmRleE9mIiwic3RhcnRzV2l0aCIsInN1bSIsInN1bUJ5IiwidGVtcGxhdGUiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwiaW50ZXJwb2xhdGUiLCJyZURlbGltaXRlcnMiLCJldmFsdWF0ZSIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ2YXJpYWJsZSIsInRpbWVzIiwidG9Mb3dlciIsInRvU2FmZUludGVnZXIiLCJ0b1VwcGVyIiwidHJpbSIsInRyaW1FbmQiLCJ0cmltU3RhcnQiLCJ0cnVuY2F0ZSIsIm9taXNzaW9uIiwic2VhcmNoIiwic3Vic3RyaW5nIiwiZ2xvYmFsIiwibmV3RW5kIiwidW5lc2NhcGUiLCJ1bmlxdWVJZCIsInByZWZpeCIsImVhY2giLCJlYWNoUmlnaHQiLCJWRVJTSU9OIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImxhenlDbG9uZSIsImxhenlSZXZlcnNlIiwibGF6eVZhbHVlIiwiaXNSaWdodCIsInZpZXciLCJnZXRWaWV3IiwiaXRlckxlbmd0aCIsInRha2VDb3VudCIsIml0ZXJJbmRleCIsIndyYXBwZXJDaGFpbiIsImNvbW1pdCIsIndyYXBwZXJDb21taXQiLCJ3cmFwcGVyTmV4dCIsIndyYXBwZXJQbGFudCIsIndyYXBwZXJSZXZlcnNlIiwid3JhcHBlZCIsInRvSlNPTiIsIndyYXBwZXJWYWx1ZSIsIndyYXBwZXJUb0l0ZXJhdG9yIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwibyIsImVudW1lcmFibGUiLCJnbG9iYWxUaGlzIiwib2JqIiwibm1kIiwiY2hpbGRyZW4iLCJNYXRyaXgiLCJtYXRyaXgiLCJkZWx0YVRyYW5zZm9ybVBvaW50IiwiaW52ZXJzZSIsImRldGVybWluYW50IiwiYWJvdXRQb2ludCIsInJvdGF0aW9uIiwic3giLCJzeSIsInRyYW5zbGF0aW9uIiwidHJhbnNmb3JtUG9pbnQiLCJzY2FsZU1hdHJpeCIsInJvdGF0aW9uTWF0cml4IiwiTW90aW9uIiwiY3VycmVudFVuaXQiLCJjdXJyZW50VG9vbERpYW1ldGVyIiwiY3VycmVudFNwZWVkIiwiY3VycmVudEZlZWQiLCJjdXJyZW50QXRjIiwic2VuZCIsInBhcmFtcyIsInplcm8iLCJuZXdQb3NpdGlvbiIsInBvc3RQcm9jZXNzIiwicmFwaWQiLCJsaW5lYXIiLCJjY3ciLCJmZWVkIiwiYXJjQ1ciLCJhcmNDQ1ciLCJ1bml0IiwibWV0YSIsInRvb2xEaWFtZXRlciIsInYxIiwidjIiLCJ6RW5kIiwiY3VyTGVuIiwidG90YWxMZW4iLCJnZXRMZW5ndGgiLCJ6U3RhcnQiLCJmb2xsb3dQYXRoIiwibW90aW9uIiwicmFtcGluZyIsInNhbWVYWSIsInJldHJhY3QiLCJwbHVuZ2UiLCJoZWxpeCIsInJ4IiwicnkiLCJnZXRBY3Rpb25MZW5ndGgiLCJEcml2ZXIiLCJzdHJlYW0iLCJ3cml0ZSIsInN0ciIsIk51bGxEcml2ZXIiLCJHQ2FudmFzIiwidmlydHVhbFNjYWxlIiwiY2FudmFzIiwiY2FudmFzRWxlbWVudCIsImdldENvbnRleHQiLCJvdXRwdXQiLCJvdXRwdXRFbGVtZW50IiwiYmFja2dyb3VuZCIsIl9iYWNrZ3JvdW5kIiwiZmlsdGVycyIsInJlc2V0VHJhbnNmb3JtIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImxpbmVXaWR0aCIsIl9zdHJva2VTdHlsZSIsIl9maWxsU3R5bGUiLCJfZm9udCIsImZvbnQiLCJkZXB0aE9mQ3V0IiwiYWxpZ24iLCJzZXRUcmFuc2Zvcm0iLCJfeCIsIl95IiwiZW5zdXJlUGF0aCIsIl94MSIsIl95MSIsIl94MiIsIl95MiIsIngyIiwieTIiLCJ2MDEiLCJ2MjEiLCJjcm9zcyIsImQwMSIsImQyMSIsImFzaW4iLCJzcGFuIiwicmF0ZSIsInZtMSIsImRtMSIsImNlbnRlclBvaW50IiwiYXJjVG8iLCJjbGlwIiwicmFkIiwidGV4dCIsImNvbG9yIiwiaXNPcGFxdWUiLCJzYXZlIiwibGF5ZXIiLCJyZXN0b3JlIiwiZmlsbFBhdGgiLCJjbGVhclJlY3QiLCJpbnZlcnRlZFoiLCJHQ29kZSIsImNvZGUiLCJjb21tYW5kIiwiaW5jaCIsIm1tIiwibG9hZFZhbHVlIiwiZmFsbGJhY2tTZXRWYWx1ZSIsImVuY29kZWRWYWx1ZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzYXZlVmFsdWUiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJzZXRJdGVtIiwiQ3VycmVudFNrZXRjaCIsInNhdmVTbG90QXJlYSIsImdldEVsZW1lbnRCeUlkIiwicmVuZGVyU2tldGNoU2F2ZVNsb3RzIiwic2tldGNoIiwib25Mb2FkIiwiaW5uZXJIVE1MIiwicHJlc2V0IiwiYnV0dG9uIiwiY3JlYXRlRWxlbWVudCIsImlubmVyVGV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhcHBlbmRDaGlsZCIsInNsaWRlckFyZWEiLCJzbGlkZXJzIiwiQ0FOVkFTX1dJRFRIIiwiQ0FOVkFTX0hFSUdIVCIsImNhbnZhc0FyZWEiLCJza2V0Y2hCdXR0b25zQXJlYSIsInNhdmVCdXR0b24iLCJyZXNldEJ1dHRvbiIsInJhbmRvbWl6ZUJ1dHRvbiIsImdjb2RlVGV4dGFyZWEiLCJjdXJyZW50U2tldGNoSW5kZXgiLCJyYWZSZWYiLCJhbmltYXRlSW5jcmVtZW50Iiwic2V0R0NvZGVIVE1MIiwiX3NldEdDb2RlSFRNTCIsImdDb2RlU3RyaW5nIiwic2V0R0NvZGUiLCJpbml0U2tldGNoIiwiU2tldGNoQ2xhc3MiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImdlbmVyYXRlR0NvZGUiLCJsaW5lIiwiYXBwZW5kR0NvZGUiLCJnQ2FudmFzIiwicmVuZGVyU2tldGNoU2xpZGVycyIsIm9uVXBkYXRlIiwidmFsdWVSYW5nZSIsInNsaWRlciIsInNldEF0dHJpYnV0ZSIsImxhYmVsIiwiaGFuZGxlVXBkYXRlIiwicHJvbXB0IiwicGFyc2VkVmFsdWUiLCJsYWJlbFNwYW4iLCJ2YWx1ZVNwYW4iLCJhbmltYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic3R5bGUiLCJib2R5Iiwic2tldGNoZXMiLCJjbGFzc0xpc3QiLCJhbGxCdXR0b25zIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpdGVtIiwicmFuZG9taXplIiwidXBkYXRlU2xpZGVyVmFsdWVzIiwic2F2ZU5ld1ByZXNldCIsInNhdmVEYXRhIiwiYWNjIiwic2tldGNoTmFtZSIsInNrZXRjaFNhdmVEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==