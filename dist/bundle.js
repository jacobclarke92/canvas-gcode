/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={563:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(73),a=i(132),l=i(604),u=i(323);function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var c=function(){function Path(){!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Path),_defineProperty(this,"subPaths",[])}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Path,[{key:"clone",value:function clone(){var t=new Path;return t.subPaths=this.subPaths.slice(0),t}},{key:"moveTo",value:function moveTo(t,r){var i=new o.Z;i.moveTo(t,r),this.subPaths.push(i),this.current=i}},{key:"ensure",value:function ensure(t,r){0===this.subPaths.length&&this.moveTo(t,r)}},{key:"close",value:function close(){if(!this.current)return!1;this.current.close()}},{key:"lineTo",value:function lineTo(){var t;this.ensure.apply(this,arguments),(t=this.current).lineTo.apply(t,arguments)}},{key:"arc",value:function arc(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var o=r[0],a=r[1],l=r[2],u=r[3],c=r[4],h=r[5];this.ellipse(o,a,l,l,u,c,h)}},{key:"ellipse",value:function ellipse(){for(var t,r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];var l=i[0],u=i[1],c=i[2],h=(i[3],i[4]),p=i[5],y=(i[6],(0,a.CS)(l,u,h,p,c));this.current&&(0,a.Bj)(this.current.lastPoint(),y.start)||this.moveTo(y.start.x,y.start.y),(t=this.current).ellipse.apply(t,i)}},{key:"quadraticCurveTo",value:function quadraticCurveTo(){var t;(t=this.current).quadraticCurveTo.apply(t,arguments)}},{key:"bezierCurveTo",value:function bezierCurveTo(){var t;(t=this.current).bezierCurveTo.apply(t,arguments)}},{key:"rect",value:function rect(t,r,i,o){this.moveTo(t,r),this.lineTo(t+i,r),this.lineTo(t+i,r+o),this.lineTo(t,r+o),this.lineTo(t,r)}},{key:"toPolys",value:function toPolys(t,r){if(!t)throw"NO SCALE!";return this.subPaths.map((function(i){return i.toPoly(t,r)}))}},{key:"fromPolys",value:function fromPolys(t,r){if(!r)throw"NO SCALE!";this.subPaths=[];for(var i=0,a=t.length;i<a;++i){var l=new o.Z;l.fromPolys(t[i],r),this.subPaths.push(l),this.current=l}return this}},{key:"clip",value:function clip(t,r,i){if(!t)return this;r=r||0;var o=1e3,a=this.toPolys(o,i),u=t.toPolys(o,i),c=new l.Clipper;c.AddPaths(a,l.PolyType.ptSubject,!0),c.AddPaths(u,l.PolyType.ptClip,!0);var h=[];c.Execute(r,h);var p=new Path;return p.fromPolys(h,o),p}},{key:"translate",value:function translate(t,r){var i=new Path;return this.subPaths.forEach((function(o){var a=o.getPoints();i.moveTo(a[0].x+t,a[0].y+r),a.slice(1).forEach((function(o){i.lineTo(o.x+t,o.y+r)}))})),i}},{key:"clipToBounds",value:function clipToBounds(t){var r,i=new Path,o=new u.Z,a=o.clone();return this.subPaths.forEach((function(l){l.getPoints().forEach((function(l,u){if(l=l.clone(),r=l.clone(),l.y<t.top){var c=(l.x-o.x)/(l.y-o.y);l.x+=c*(t.top-l.y)||0,l.y=t.top}else if(a.y<t.top){var h=(l.x-a.x)/(l.y-a.y)*(t.top-l.y)||0;i.moveTo(l.x+h,t.top)}if(l.x>t.right){var p=(l.y-o.y)/(l.x-o.x);l.y+=p*(t.right-l.x),l.x=t.right}else a.x,t.right;0===u?i.moveTo(l.x,l.y):i.lineTo(l.x,l.y),o=l,a=r}))})),i}},{key:"simplify",value:function simplify(t,r){var i=this.toPolys(1e3,r),o=l.PolyFillType.pftNonZero;"evenodd"===t&&(o=l.PolyFillType.pftEvenOdd),i=l.Clipper.SimplifyPolygons(i,o);var a=new Path;return a.fromPolys(i,1e3),a}},{key:"is",value:function is(t){return 1===this.subPaths.length&&2===this.subPaths[0].actions.length&&this.subPaths[0].actions[1].type===t}},{key:"offset",value:function offset(t,r){if(0===t)return this;if(this.is("ELLIPSE")){var i=new Path,o=this.subPaths[0].actions[1].args;return!(o[2]+t<0)&&(i.ellipse(o[0],o[1],o[2]+t,o[3]+t,o[4],o[5],o[6]),i)}var a=1e3,u=this.toPolys(a,r),c=new l.ClipperOffset;c.AddPaths(u,l.JoinType.jtMiter,l.EndType.etClosedPolygon);var h=[];try{c.Execute(h,t*a)}catch(t){return!1}if(!h||0===h.length||0===h[0].length)return!1;var p=new Path;return p.fromPolys(h,a),p.close(),p}},{key:"ramp",value:function ramp(t){}},{key:"addPath",value:function addPath(t){this.subPaths=this.subPaths.concat(t.subPaths)}},{key:"estimateMaxOffset",value:function estimateMaxOffset(t){for(var r=this.getBounds(),i=Math.abs(r.right-r.left),o=Math.abs(r.bottom-r.top),a=Math.min(i,o)/2,l=0,u=0;u<5;++u){var c=l+(a-l)/2;this.offset(-c,3)?l=c:a=c}return{lt:a,gt:l}}},{key:"fillPath",value:function fillPath(t,r){for(var i=new Path,o=Math.sin(Math.PI/4),a=this,l=a.estimateMaxOffset(5).lt,u=-(l-=t/2);u<-t/2;u+=t*o){var c=a.offset(u,r);if(!c)break;c=c.reverse(),i.addPath(c)}var h=a.offset(-t/2,r);return h&&i.addPath(h.reverse()),i}},{key:"connectEnds",value:function connectEnds(t){for(var r=this.subPaths.length-1;r>0;--r){var i=this.subPaths[r-1],o=this.subPaths[r],a=i.lastPoint(),l=o.nearestPoint(a),u=l.point;l.distance<2*t&&(o=o.shift(l.i),i.lineTo(u.x,u.y),o.actions[0].type="LINE_TO",i.actions=i.actions.concat(o.actions),this.subPaths.splice(r,1))}return this}},{key:"reverse",value:function reverse(){if(this.is("ELLIPSE")){var t=new Path,r=this.subPaths[0].actions[1].args;return t.ellipse(r[0],r[1],r[2],r[3],r[5],r[4],!r[6]),t}var i=new Path;return i.subPaths=this.subPaths.map((function(t){return t.reverse()})).reverse(),i}},{key:"sort",value:function sort(){if(0===this.subPaths.length)return this;var t=new Path,r=this.subPaths[0].lastPoint();return t.subPaths=this.subPaths.sort((function(t,i){var o=t.lastPoint(),a=i.firstPoint(),l=u.Z.distance(o,r),c=u.Z.distance(a,r);return r=i.lastPoint(),l<c?-1:l>c?1:0})),t}},{key:"firstPoint",value:function firstPoint(){return!!this.current&&this.subPaths[0].firstPoint()}},{key:"lastPoint",value:function lastPoint(){return!!this.current&&this.subPaths[this.subPaths.length-1].lastPoint()}},{key:"getPoints",value:function getPoints(t){var r=[];return this.subPaths.forEach((function(i){r.push.apply(r,_toConsumableArray(i.getPoints(t)))})),r}},{key:"getBounds",value:function getBounds(){var t=this.getPoints(),r=this.firstPoint()||new u.Z,i={left:r.x,top:r.y,right:r.x,bottom:r.y};return t.forEach((function(t){i.left=Math.min(i.left,t.x),i.top=Math.min(i.top,t.y),i.right=Math.max(i.right,t.x),i.bottom=Math.max(i.bottom,t.y)})),i}}]),Path}();_defineProperty(c,"actions",o.Z.actions)},323:(t,r,i)=>{"use strict";function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}i.d(r,{Z:()=>o});var o=function(){function Point(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2?arguments[2]:void 0,o=arguments.length>3?arguments[3]:void 0;_classCallCheck(this,Point),this.x=isNaN(t)?0:t,this.y=isNaN(r)?0:r,this.z=isNaN(i)?0:i,this.a=isNaN(o)?0:o}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Point,[{key:"clone",value:function clone(){return new Point(this.x,this.y)}},{key:"round",value:function round(){return new Point(Math.round(this.x),Math.round(this.y))}},{key:"equals",value:function equals(t){return this.x===t.x&&this.y===t.y}},{key:"add",value:function add(t){return new Point(this.x+t.x,this.y+t.y)}},{key:"midpoint",value:function midpoint(t){return new Point((this.x+t.x)/2,(this.y+t.y)/2)}},{key:"subtract",value:function subtract(t){return new Point(this.x-t.x,this.y-t.y)}},{key:"magnitude",value:function magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}},{key:"angle",value:function angle(){return Math.atan2(this.y,this.x)}},{key:"multiply",value:function multiply(t){return"number"==typeof t?new Point(this.x*t,this.y*t):new Point(this.x*t.x,this.y*t.y)}},{key:"scale",value:function scale(t){return this.multiply(t)}},{key:"divide",value:function divide(t){return new Point(this.x/t.x,this.y/t.y)}},{key:"normalize",value:function normalize(){return this.multiply(1/this.magnitude())}},{key:"set",value:function set(t,r){this.x=t,this.y=r}},{key:"dot",value:function dot(t){return this.x*t.x+this.y*t.y}},{key:"translate",value:function translate(t,r){return new Point(this.x+t,this.y+r)}},{key:"moveAlongAngle",value:function moveAlongAngle(t,r){return this.translate(Math.cos(t)*r,Math.sin(t)*r)}},{key:"rotate",value:function rotate(t){return new Point(this.x*Math.cos(t)-this.y*Math.sin(t),this.x*Math.sin(t)+this.y*Math.cos(t))}},{key:"angleTo",value:function angleTo(t){return Math.atan2(t.y-this.y,t.x-this.x)}},{key:"distanceTo",value:function distanceTo(t){return Math.sqrt(Math.pow(t.x-this.x,2)+Math.pow(t.y-this.y,2))}},{key:"angleBetween",value:function angleBetween(t){return Math.acos(this.dot(t)/(this.magnitude()*t.magnitude()))}},{key:"toUnit",value:function toUnit(){return this.multiply(1/this.magnitude())}}],[{key:"distance",value:function distance(t,r){return Math.sqrt(Math.pow(r.x-t.x,2)+Math.pow(r.y-t.y,2))}},{key:"angleBetween",value:function angleBetween(t,r){return Math.acos(t.dot(r)/(t.magnitude()*r.magnitude()))}}]),Point}()},204:(t,r,i)=>{"use strict";function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}i.d(r,{v:()=>o});var o=function(){function Sketch(t){!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Sketch),_defineProperty(this,"vs",{}),this.ctx=t.ctx,this.canvasWidth=this.cw=t.width,this.canvasHeight=this.ch=t.height,this.cx=this.canvasWidth/2,this.cy=this.canvasHeight/2}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Sketch,[{key:"init",value:function init(){}},{key:"initDraw",value:function initDraw(){}},{key:"draw",value:function draw(t){}},{key:"reset",value:function reset(){this.ctx.reset()}}]),Sketch}();_defineProperty(o,"generateGCode",!0)},73:(t,r,i)=>{"use strict";i.d(r,{Z:()=>u});var o=i(563),a=i(323),l=i(132);function _slicedToArray(t,r){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,r){var i=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null==i)return;var o,a,l=[],u=!0,c=!1;try{for(i=i.call(t);!(u=(o=i.next()).done)&&(l.push(o.value),!r||l.length!==r);u=!0);}catch(t){c=!0,a=t}finally{try{u||null==i.return||i.return()}finally{if(c)throw a}}return l}(t,r)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t,r)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var u=function(){function SubPath(t){!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,SubPath),_defineProperty(this,"actions",[]),_defineProperty(this,"pointsCache",[]),t&&this.fromPoints(t)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(SubPath,[{key:"clone",value:function clone(){var t=new SubPath;return t.actions=this.actions.slice(0),t}},{key:"isClosed",value:function isClosed(){return(0,l.Bj)(this.firstPoint(),this.lastPoint())}},{key:"closed",get:function get(){return this.isClosed()}},{key:"offset",value:function offset(t){var r=this.toPath().offset(t);return!!r&&r.subPaths[0]}},{key:"simplify",value:function simplify(){var t=this.toPath().simplify();return!!t&&t.subPaths[0]}},{key:"toPath",value:function toPath(){var t=this.clone(),r=new o.Z;return r.subPaths.push(t),r.current=r.subPaths[r.subPaths.length-1],r}},{key:"addAction",value:function addAction(t){this.actions.push(t),this.pointsCache=[]}},{key:"firstPoint",value:function firstPoint(){var t=new a.Z(0,0),r=this.actions[0];if("ELLIPSE"===r.type)t=(0,l.CS)(r.args[0],r.args[1],r.args[4],r.args[5],r.args[2]).start;else t.x=r.args[r.args.length-2],t.y=r.args[r.args.length-1];return t}},{key:"lastPoint",value:function lastPoint(){var t=new a.Z(0,0),r=this.actions[this.actions.length-1];if("ELLIPSE"===r.type)t=(0,l.CS)(r.args[0],r.args[1],r.args[4],r.args[5],r.args[2]).end;else t.x=r.args[r.args.length-2],t.y=r.args[r.args.length-1];return t}},{key:"fromPoints",value:function fromPoints(t){this.moveTo(t[0].x,t[0].y);for(var r=1,i=t.length;r<i;r++)this.lineTo(t[r].x,t[r].y)}},{key:"getActionLength",value:function getActionLength(t,r,i){var o=this.actions[i];if("ELLIPSE"===o.type){var a=_slicedToArray(o.args,7),l=(a[0],a[1],a[2],a[3]),u=a[4],c=a[5];a[6];return o.args,(c-u)*l}var h=o.args,p=h[h.length-2]-t,y=h[h.length-1]-r;return Math.sqrt(p*p+y*y)}},{key:"getLength",value:function getLength(){for(var t=0,r=this.firstPoint(),i=this.getPoints(1e4),o=1,a=i.length;o<a;++o){var l=i[o],u=r.x,c=r.y,h=l.x-u,p=l.y-c;t+=Math.sqrt(h*h+p*p)}return t}},{key:"nearestPoint",value:function nearestPoint(t){var r,i,o=new a.Z,l=1/0;return this.actions.forEach((function(u,c){if("ELLIPSE"===u.type){var h=_slicedToArray(u.args,7),p=h[0],y=h[1],d=h[2],v=h[3],m=h[4];h[5],h[6];o.x=p+d*Math.cos(m),o.y=y+v*Math.sin(m)}else o.x=u.args[u.args.length-2],o.y=u.args[u.args.length-1];var P=a.Z.distance(t,o);P<l&&(r=c,i=o.clone(),l=P)})),{i:r,distance:l,point:i}}},{key:"pointAt",value:function pointAt(t){var r=new a.Z,i=this.actions[t];if("LINE_TO"===i.type)r.x=i.args[i.args.length-2],r.y=i.args[i.args.length-1];return r}},{key:"shiftToNearest",value:function shiftToNearest(t,r){var i=this.nearestPoint(new a.Z(t,r));return this.shift(i.i)}},{key:"shift",value:function shift(t){if(0===t)return this;var r=new SubPath;return r.actions=this.actions.slice(t).concat(this.actions.slice(0,t)),r.actions.forEach((function(t){t.type="LINE_TO"})),r.lineTo(r.actions[0].args[0],r.actions[0].args[1]),r}},{key:"moveTo",value:function moveTo(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"MOVE_TO",args:r})}},{key:"lineTo",value:function lineTo(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"LINE_TO",args:r})}},{key:"quadraticCurveTo",value:function quadraticCurveTo(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"QUADRATIC_CURVE_TO",args:r})}},{key:"bezierCurveTo",value:function bezierCurveTo(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"BEZIER_CURVE_TO",args:r})}},{key:"arc",value:function arc(){this.ellipse.apply(this,arguments)}},{key:"ellipse",value:function ellipse(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];this.addAction({type:"ELLIPSE",args:r})}},{key:"getPoints",value:function getPoints(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:40,r=[],i=0,o=this.actions.length;i<o;i++){var l=this.actions[i];switch(l.type){case"MOVE_TO":case"LINE_TO":r.push(new a.Z(l.args[0],l.args[1]));break;case"QUADRATIC_CURVE_TO":var u=void 0,p=void 0,y=_slicedToArray(l.args,4),d=y[0],v=y[1],m=y[2],P=y[3];if(r.length>0){var g=r[r.length-1];u=g.x,p=g.y}else{var _=this.actions[i-1];if("ELLIPSE"!==_.type){var b=_.args;u=b[b.length-2],p=b[b.length-1]}else u=_.args[0],p=_.args[1]}for(var x=1;x<=t;x++){var C=x/t,I=c(C,u,d,m),w=c(C,p,v,P);r.push(new a.Z(I,w))}break;case"BEZIER_CURVE_TO":var O=void 0,S=void 0,T=_slicedToArray(l.args,6),E=T[0],L=T[1],A=T[2],k=T[3],M=T[4],R=T[5];if(r.length>0){var B=r[r.length-1];O=B.x,S=B.y}else{var N=this.actions[i-1];if("ELLIPSE"!==N.type){var D=N.args;O=D[D.length-2],S=D[D.length-1]}else O=N.args[0],S=N.args[1]}for(var j=1;j<=t;j++){var X=j/t,Y=h(X,O,E,A,M),z=h(X,S,L,k,R);r.push(new a.Z(Y,z))}break;case"ELLIPSE":var Z=void 0,W=void 0,q=_slicedToArray(l.args,7),V=q[0],G=q[1],U=q[2],H=q[3],J=q[4],K=q[5],$=q[6],Q=K-J,tt=void 0;for(Z=0;Z<=t;Z++){W=Z/t,Q===2*-Math.PI&&(Q=2*Math.PI),Q<0&&(Q+=2*Math.PI),Q>2*Math.PI&&(Q-=2*Math.PI),$?(Q===2*Math.PI&&(Q=0),tt=K+(1-W)*(2*Math.PI-Q)):tt=J+W*Q;var et=V+U*Math.cos(tt),rt=G+H*Math.sin(tt);r.push(new a.Z(et,rt))}}}return this.closed&&r.push(r[0]),r}},{key:"toPoly",value:function toPoly(t,r){return this.getPoints(r).map((function(r){return{X:r.x*t,Y:r.y*t}}))}},{key:"fromPolys",value:function fromPolys(t,r){r=1/r,this.moveTo(t[0].X*r,t[0].Y*r);for(var i=1,o=t.length;i<o;++i)this.lineTo(t[i].X*r,t[i].Y*r);return this.close(),this}},{key:"close",value:function close(){if(!this.isClosed()){var t=this.actions[0].args;this.lineTo.apply(this,t)}}},{key:"reverse",value:function reverse(){var t=new SubPath,r=this.getPoints().reverse();if(0==r.length)return t;t.moveTo(r[0].x,r[0].y);for(var i=1,o=r.length;i<o;++i)t.lineTo(r[i].x,r[i].y);return t}}]),SubPath}();_defineProperty(u,"actions",{MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",ELLIPSE:"ellipse"});var c=function b2(t,r,i,o){return function b2p0(t,r){var i=1-t;return i*i*r}(t,r)+function b2p1(t,r){return 2*(1-t)*t*r}(t,i)+function b2p2(t,r){return t*t*r}(t,o)},h=function b3(t,r,i,o,a){return function b3p0(t,r){var i=1-t;return i*i*i*r}(t,r)+function b3p1(t,r){var i=1-t;return 3*i*i*t*r}(t,i)+function b3p2(t,r){return 3*(1-t)*t*t*r}(t,o)+function b3p3(t,r){return t*t*t*r}(t,a)}},604:t=>{!function(){"use strict";var r,i={version:"6.4.2.2",use_lines:!0,use_xyz:!1},o=!1;if(t.exports?(t.exports=i,o=!0):"undefined"!=typeof document?window.ClipperLib=i:self.ClipperLib=i,o){a="chrome";r="Netscape"}else{var a=navigator.userAgent.toString().toLowerCase();r=navigator.appName}var l,u={};-1!=a.indexOf("chrome")&&-1==a.indexOf("chromium")?u.chrome=1:u.chrome=0,-1!=a.indexOf("chromium")?u.chromium=1:u.chromium=0,-1!=a.indexOf("safari")&&-1==a.indexOf("chrome")&&-1==a.indexOf("chromium")?u.safari=1:u.safari=0,-1!=a.indexOf("firefox")?u.firefox=1:u.firefox=0,-1!=a.indexOf("firefox/17")?u.firefox17=1:u.firefox17=0,-1!=a.indexOf("firefox/15")?u.firefox15=1:u.firefox15=0,-1!=a.indexOf("firefox/3")?u.firefox3=1:u.firefox3=0,-1!=a.indexOf("opera")?u.opera=1:u.opera=0,-1!=a.indexOf("msie 10")?u.msie10=1:u.msie10=0,-1!=a.indexOf("msie 9")?u.msie9=1:u.msie9=0,-1!=a.indexOf("msie 8")?u.msie8=1:u.msie8=0,-1!=a.indexOf("msie 7")?u.msie7=1:u.msie7=0,-1!=a.indexOf("msie ")?u.msie=1:u.msie=0,i.biginteger_used=null;function BigInteger(t,r,o){i.biginteger_used=1,null!=t&&("number"==typeof t&&void 0===r?this.fromInt(t):"number"==typeof t?this.fromNumber(t,r,o):null==r&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,r))}function nbi(){return new BigInteger(null,void 0,void 0)}"Microsoft Internet Explorer"==r?(BigInteger.prototype.am=function am2(t,r,i,o,a,l){for(var u=32767&r,c=r>>15;--l>=0;){var h=32767&this[t],p=this[t++]>>15,y=c*h+p*u;a=((h=u*h+((32767&y)<<15)+i[o]+(1073741823&a))>>>30)+(y>>>15)+c*p+(a>>>30),i[o++]=1073741823&h}return a},l=30):"Netscape"!=r?(BigInteger.prototype.am=function am1(t,r,i,o,a,l){for(;--l>=0;){var u=r*this[t++]+i[o]+a;a=Math.floor(u/67108864),i[o++]=67108863&u}return a},l=26):(BigInteger.prototype.am=function am3(t,r,i,o,a,l){for(var u=16383&r,c=r>>14;--l>=0;){var h=16383&this[t],p=this[t++]>>14,y=c*h+p*u;a=((h=u*h+((16383&y)<<14)+i[o]+a)>>28)+(y>>14)+c*p,i[o++]=268435455&h}return a},l=28),BigInteger.prototype.DB=l,BigInteger.prototype.DM=(1<<l)-1,BigInteger.prototype.DV=1<<l;BigInteger.prototype.FV=Math.pow(2,52),BigInteger.prototype.F1=52-l,BigInteger.prototype.F2=2*l-52;var c,h,p=new Array;for(c="0".charCodeAt(0),h=0;h<=9;++h)p[c++]=h;for(c="a".charCodeAt(0),h=10;h<36;++h)p[c++]=h;for(c="A".charCodeAt(0),h=10;h<36;++h)p[c++]=h;function int2char(t){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(t)}function intAt(t,r){var i=p[t.charCodeAt(r)];return null==i?-1:i}function nbv(t){var r=nbi();return r.fromInt(t),r}function nbits(t){var r,i=1;return 0!=(r=t>>>16)&&(t=r,i+=16),0!=(r=t>>8)&&(t=r,i+=8),0!=(r=t>>4)&&(t=r,i+=4),0!=(r=t>>2)&&(t=r,i+=2),0!=(r=t>>1)&&(t=r,i+=1),i}function Classic(t){this.m=t}function Montgomery(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function op_and(t,r){return t&r}function op_or(t,r){return t|r}function op_xor(t,r){return t^r}function op_andnot(t,r){return t&~r}function lbit(t){if(0==t)return-1;var r=0;return 0==(65535&t)&&(t>>=16,r+=16),0==(255&t)&&(t>>=8,r+=8),0==(15&t)&&(t>>=4,r+=4),0==(3&t)&&(t>>=2,r+=2),0==(1&t)&&++r,r}function cbit(t){for(var r=0;0!=t;)t&=t-1,++r;return r}function NullExp(){}function nNop(t){return t}function Barrett(t){this.r2=nbi(),this.q3=nbi(),BigInteger.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}Classic.prototype.convert=function cConvert(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},Classic.prototype.revert=function cRevert(t){return t},Classic.prototype.reduce=function cReduce(t){t.divRemTo(this.m,null,t)},Classic.prototype.mulTo=function cMulTo(t,r,i){t.multiplyTo(r,i),this.reduce(i)},Classic.prototype.sqrTo=function cSqrTo(t,r){t.squareTo(r),this.reduce(r)},Montgomery.prototype.convert=function montConvert(t){var r=nbi();return t.abs().dlShiftTo(this.m.t,r),r.divRemTo(this.m,null,r),t.s<0&&r.compareTo(BigInteger.ZERO)>0&&this.m.subTo(r,r),r},Montgomery.prototype.revert=function montRevert(t){var r=nbi();return t.copyTo(r),this.reduce(r),r},Montgomery.prototype.reduce=function montReduce(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var r=0;r<this.m.t;++r){var i=32767&t[r],o=i*this.mpl+((i*this.mph+(t[r]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=r+this.m.t]+=this.m.am(0,o,t,r,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},Montgomery.prototype.mulTo=function montMulTo(t,r,i){t.multiplyTo(r,i),this.reduce(i)},Montgomery.prototype.sqrTo=function montSqrTo(t,r){t.squareTo(r),this.reduce(r)},BigInteger.prototype.copyTo=function bnpCopyTo(t){for(var r=this.t-1;r>=0;--r)t[r]=this[r];t.t=this.t,t.s=this.s},BigInteger.prototype.fromInt=function bnpFromInt(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},BigInteger.prototype.fromString=function bnpFromString(t,r){var i;if(16==r)i=4;else if(8==r)i=3;else if(256==r)i=8;else if(2==r)i=1;else if(32==r)i=5;else{if(4!=r)return void this.fromRadix(t,r);i=2}this.t=0,this.s=0;for(var o=t.length,a=!1,l=0;--o>=0;){var u=8==i?255&t[o]:intAt(t,o);u<0?"-"==t.charAt(o)&&(a=!0):(a=!1,0==l?this[this.t++]=u:l+i>this.DB?(this[this.t-1]|=(u&(1<<this.DB-l)-1)<<l,this[this.t++]=u>>this.DB-l):this[this.t-1]|=u<<l,(l+=i)>=this.DB&&(l-=this.DB))}8==i&&0!=(128&t[0])&&(this.s=-1,l>0&&(this[this.t-1]|=(1<<this.DB-l)-1<<l)),this.clamp(),a&&BigInteger.ZERO.subTo(this,this)},BigInteger.prototype.clamp=function bnpClamp(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},BigInteger.prototype.dlShiftTo=function bnpDLShiftTo(t,r){var i;for(i=this.t-1;i>=0;--i)r[i+t]=this[i];for(i=t-1;i>=0;--i)r[i]=0;r.t=this.t+t,r.s=this.s},BigInteger.prototype.drShiftTo=function bnpDRShiftTo(t,r){for(var i=t;i<this.t;++i)r[i-t]=this[i];r.t=Math.max(this.t-t,0),r.s=this.s},BigInteger.prototype.lShiftTo=function bnpLShiftTo(t,r){var i,o=t%this.DB,a=this.DB-o,l=(1<<a)-1,u=Math.floor(t/this.DB),c=this.s<<o&this.DM;for(i=this.t-1;i>=0;--i)r[i+u+1]=this[i]>>a|c,c=(this[i]&l)<<o;for(i=u-1;i>=0;--i)r[i]=0;r[u]=c,r.t=this.t+u+1,r.s=this.s,r.clamp()},BigInteger.prototype.rShiftTo=function bnpRShiftTo(t,r){r.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)r.t=0;else{var o=t%this.DB,a=this.DB-o,l=(1<<o)-1;r[0]=this[i]>>o;for(var u=i+1;u<this.t;++u)r[u-i-1]|=(this[u]&l)<<a,r[u-i]=this[u]>>o;o>0&&(r[this.t-i-1]|=(this.s&l)<<a),r.t=this.t-i,r.clamp()}},BigInteger.prototype.subTo=function bnpSubTo(t,r){for(var i=0,o=0,a=Math.min(t.t,this.t);i<a;)o+=this[i]-t[i],r[i++]=o&this.DM,o>>=this.DB;if(t.t<this.t){for(o-=t.s;i<this.t;)o+=this[i],r[i++]=o&this.DM,o>>=this.DB;o+=this.s}else{for(o+=this.s;i<t.t;)o-=t[i],r[i++]=o&this.DM,o>>=this.DB;o-=t.s}r.s=o<0?-1:0,o<-1?r[i++]=this.DV+o:o>0&&(r[i++]=o),r.t=i,r.clamp()},BigInteger.prototype.multiplyTo=function bnpMultiplyTo(t,r){var i=this.abs(),o=t.abs(),a=i.t;for(r.t=a+o.t;--a>=0;)r[a]=0;for(a=0;a<o.t;++a)r[a+i.t]=i.am(0,o[a],r,a,0,i.t);r.s=0,r.clamp(),this.s!=t.s&&BigInteger.ZERO.subTo(r,r)},BigInteger.prototype.squareTo=function bnpSquareTo(t){for(var r=this.abs(),i=t.t=2*r.t;--i>=0;)t[i]=0;for(i=0;i<r.t-1;++i){var o=r.am(i,r[i],t,2*i,0,1);(t[i+r.t]+=r.am(i+1,2*r[i],t,2*i+1,o,r.t-i-1))>=r.DV&&(t[i+r.t]-=r.DV,t[i+r.t+1]=1)}t.t>0&&(t[t.t-1]+=r.am(i,r[i],t,2*i,0,1)),t.s=0,t.clamp()},BigInteger.prototype.divRemTo=function bnpDivRemTo(t,r,i){var o=t.abs();if(!(o.t<=0)){var a=this.abs();if(a.t<o.t)return null!=r&&r.fromInt(0),void(null!=i&&this.copyTo(i));null==i&&(i=nbi());var l=nbi(),u=this.s,c=t.s,h=this.DB-nbits(o[o.t-1]);h>0?(o.lShiftTo(h,l),a.lShiftTo(h,i)):(o.copyTo(l),a.copyTo(i));var p=l.t,y=l[p-1];if(0!=y){var d=y*(1<<this.F1)+(p>1?l[p-2]>>this.F2:0),v=this.FV/d,m=(1<<this.F1)/d,P=1<<this.F2,g=i.t,_=g-p,b=null==r?nbi():r;for(l.dlShiftTo(_,b),i.compareTo(b)>=0&&(i[i.t++]=1,i.subTo(b,i)),BigInteger.ONE.dlShiftTo(p,b),b.subTo(l,l);l.t<p;)l[l.t++]=0;for(;--_>=0;){var x=i[--g]==y?this.DM:Math.floor(i[g]*v+(i[g-1]+P)*m);if((i[g]+=l.am(0,x,i,_,0,p))<x)for(l.dlShiftTo(_,b),i.subTo(b,i);i[g]<--x;)i.subTo(b,i)}null!=r&&(i.drShiftTo(p,r),u!=c&&BigInteger.ZERO.subTo(r,r)),i.t=p,i.clamp(),h>0&&i.rShiftTo(h,i),u<0&&BigInteger.ZERO.subTo(i,i)}}},BigInteger.prototype.invDigit=function bnpInvDigit(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var r=3&t;return(r=(r=(r=(r=r*(2-(15&t)*r)&15)*(2-(255&t)*r)&255)*(2-((65535&t)*r&65535))&65535)*(2-t*r%this.DV)%this.DV)>0?this.DV-r:-r},BigInteger.prototype.isEven=function bnpIsEven(){return 0==(this.t>0?1&this[0]:this.s)},BigInteger.prototype.exp=function bnpExp(t,r){if(t>4294967295||t<1)return BigInteger.ONE;var i=nbi(),o=nbi(),a=r.convert(this),l=nbits(t)-1;for(a.copyTo(i);--l>=0;)if(r.sqrTo(i,o),(t&1<<l)>0)r.mulTo(o,a,i);else{var u=i;i=o,o=u}return r.revert(i)},BigInteger.prototype.toString=function bnToString(t){if(this.s<0)return"-"+this.negate().toString(t);var r;if(16==t)r=4;else if(8==t)r=3;else if(2==t)r=1;else if(32==t)r=5;else{if(4!=t)return this.toRadix(t);r=2}var i,o=(1<<r)-1,a=!1,l="",u=this.t,c=this.DB-u*this.DB%r;if(u-- >0)for(c<this.DB&&(i=this[u]>>c)>0&&(a=!0,l=int2char(i));u>=0;)c<r?(i=(this[u]&(1<<c)-1)<<r-c,i|=this[--u]>>(c+=this.DB-r)):(i=this[u]>>(c-=r)&o,c<=0&&(c+=this.DB,--u)),i>0&&(a=!0),a&&(l+=int2char(i));return a?l:"0"},BigInteger.prototype.negate=function bnNegate(){var t=nbi();return BigInteger.ZERO.subTo(this,t),t},BigInteger.prototype.abs=function bnAbs(){return this.s<0?this.negate():this},BigInteger.prototype.compareTo=function bnCompareTo(t){var r=this.s-t.s;if(0!=r)return r;var i=this.t;if(0!=(r=i-t.t))return this.s<0?-r:r;for(;--i>=0;)if(0!=(r=this[i]-t[i]))return r;return 0},BigInteger.prototype.bitLength=function bnBitLength(){return this.t<=0?0:this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)},BigInteger.prototype.mod=function bnMod(t){var r=nbi();return this.abs().divRemTo(t,null,r),this.s<0&&r.compareTo(BigInteger.ZERO)>0&&t.subTo(r,r),r},BigInteger.prototype.modPowInt=function bnModPowInt(t,r){var i;return i=t<256||r.isEven()?new Classic(r):new Montgomery(r),this.exp(t,i)},BigInteger.ZERO=nbv(0),BigInteger.ONE=nbv(1),NullExp.prototype.convert=nNop,NullExp.prototype.revert=nNop,NullExp.prototype.mulTo=function nMulTo(t,r,i){t.multiplyTo(r,i)},NullExp.prototype.sqrTo=function nSqrTo(t,r){t.squareTo(r)},Barrett.prototype.convert=function barrettConvert(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var r=nbi();return t.copyTo(r),this.reduce(r),r},Barrett.prototype.revert=function barrettRevert(t){return t},Barrett.prototype.reduce=function barrettReduce(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},Barrett.prototype.mulTo=function barrettMulTo(t,r,i){t.multiplyTo(r,i),this.reduce(i)},Barrett.prototype.sqrTo=function barrettSqrTo(t,r){t.squareTo(r),this.reduce(r)};var y=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],d=(1<<26)/y[y.length-1];BigInteger.prototype.chunkSize=function bnpChunkSize(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},BigInteger.prototype.toRadix=function bnpToRadix(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var r=this.chunkSize(t),i=Math.pow(t,r),o=nbv(i),a=nbi(),l=nbi(),u="";for(this.divRemTo(o,a,l);a.signum()>0;)u=(i+l.intValue()).toString(t).substr(1)+u,a.divRemTo(o,a,l);return l.intValue().toString(t)+u},BigInteger.prototype.fromRadix=function bnpFromRadix(t,r){this.fromInt(0),null==r&&(r=10);for(var i=this.chunkSize(r),o=Math.pow(r,i),a=!1,l=0,u=0,c=0;c<t.length;++c){var h=intAt(t,c);h<0?"-"==t.charAt(c)&&0==this.signum()&&(a=!0):(u=r*u+h,++l>=i&&(this.dMultiply(o),this.dAddOffset(u,0),l=0,u=0))}l>0&&(this.dMultiply(Math.pow(r,l)),this.dAddOffset(u,0)),a&&BigInteger.ZERO.subTo(this,this)},BigInteger.prototype.fromNumber=function bnpFromNumber(t,r,i){if("number"==typeof r)if(t<2)this.fromInt(1);else for(this.fromNumber(t,i),this.testBit(t-1)||this.bitwiseTo(BigInteger.ONE.shiftLeft(t-1),op_or,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(r);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(BigInteger.ONE.shiftLeft(t-1),this);else{var o=new Array,a=7&t;o.length=1+(t>>3),r.nextBytes(o),a>0?o[0]&=(1<<a)-1:o[0]=0,this.fromString(o,256)}},BigInteger.prototype.bitwiseTo=function bnpBitwiseTo(t,r,i){var o,a,l=Math.min(t.t,this.t);for(o=0;o<l;++o)i[o]=r(this[o],t[o]);if(t.t<this.t){for(a=t.s&this.DM,o=l;o<this.t;++o)i[o]=r(this[o],a);i.t=this.t}else{for(a=this.s&this.DM,o=l;o<t.t;++o)i[o]=r(a,t[o]);i.t=t.t}i.s=r(this.s,t.s),i.clamp()},BigInteger.prototype.changeBit=function bnpChangeBit(t,r){var i=BigInteger.ONE.shiftLeft(t);return this.bitwiseTo(i,r,i),i},BigInteger.prototype.addTo=function bnpAddTo(t,r){for(var i=0,o=0,a=Math.min(t.t,this.t);i<a;)o+=this[i]+t[i],r[i++]=o&this.DM,o>>=this.DB;if(t.t<this.t){for(o+=t.s;i<this.t;)o+=this[i],r[i++]=o&this.DM,o>>=this.DB;o+=this.s}else{for(o+=this.s;i<t.t;)o+=t[i],r[i++]=o&this.DM,o>>=this.DB;o+=t.s}r.s=o<0?-1:0,o>0?r[i++]=o:o<-1&&(r[i++]=this.DV+o),r.t=i,r.clamp()},BigInteger.prototype.dMultiply=function bnpDMultiply(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},BigInteger.prototype.dAddOffset=function bnpDAddOffset(t,r){if(0!=t){for(;this.t<=r;)this[this.t++]=0;for(this[r]+=t;this[r]>=this.DV;)this[r]-=this.DV,++r>=this.t&&(this[this.t++]=0),++this[r]}},BigInteger.prototype.multiplyLowerTo=function bnpMultiplyLowerTo(t,r,i){var o,a=Math.min(this.t+t.t,r);for(i.s=0,i.t=a;a>0;)i[--a]=0;for(o=i.t-this.t;a<o;++a)i[a+this.t]=this.am(0,t[a],i,a,0,this.t);for(o=Math.min(t.t,r);a<o;++a)this.am(0,t[a],i,a,0,r-a);i.clamp()},BigInteger.prototype.multiplyUpperTo=function bnpMultiplyUpperTo(t,r,i){--r;var o=i.t=this.t+t.t-r;for(i.s=0;--o>=0;)i[o]=0;for(o=Math.max(r-this.t,0);o<t.t;++o)i[this.t+o-r]=this.am(r-o,t[o],i,0,0,this.t+o-r);i.clamp(),i.drShiftTo(1,i)},BigInteger.prototype.modInt=function bnpModInt(t){if(t<=0)return 0;var r=this.DV%t,i=this.s<0?t-1:0;if(this.t>0)if(0==r)i=this[0]%t;else for(var o=this.t-1;o>=0;--o)i=(r*i+this[o])%t;return i},BigInteger.prototype.millerRabin=function bnpMillerRabin(t){var r=this.subtract(BigInteger.ONE),i=r.getLowestSetBit();if(i<=0)return!1;var o=r.shiftRight(i);(t=t+1>>1)>y.length&&(t=y.length);for(var a=nbi(),l=0;l<t;++l){a.fromInt(y[Math.floor(Math.random()*y.length)]);var u=a.modPow(o,this);if(0!=u.compareTo(BigInteger.ONE)&&0!=u.compareTo(r)){for(var c=1;c++<i&&0!=u.compareTo(r);)if(0==(u=u.modPowInt(2,this)).compareTo(BigInteger.ONE))return!1;if(0!=u.compareTo(r))return!1}}return!0},BigInteger.prototype.clone=function bnClone(){var t=nbi();return this.copyTo(t),t},BigInteger.prototype.intValue=function bnIntValue(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},BigInteger.prototype.byteValue=function bnByteValue(){return 0==this.t?this.s:this[0]<<24>>24},BigInteger.prototype.shortValue=function bnShortValue(){return 0==this.t?this.s:this[0]<<16>>16},BigInteger.prototype.signum=function bnSigNum(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},BigInteger.prototype.toByteArray=function bnToByteArray(){var t=this.t,r=new Array;r[0]=this.s;var i,o=this.DB-t*this.DB%8,a=0;if(t-- >0)for(o<this.DB&&(i=this[t]>>o)!=(this.s&this.DM)>>o&&(r[a++]=i|this.s<<this.DB-o);t>=0;)o<8?(i=(this[t]&(1<<o)-1)<<8-o,i|=this[--t]>>(o+=this.DB-8)):(i=this[t]>>(o-=8)&255,o<=0&&(o+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==a&&(128&this.s)!=(128&i)&&++a,(a>0||i!=this.s)&&(r[a++]=i);return r},BigInteger.prototype.equals=function bnEquals(t){return 0==this.compareTo(t)},BigInteger.prototype.min=function bnMin(t){return this.compareTo(t)<0?this:t},BigInteger.prototype.max=function bnMax(t){return this.compareTo(t)>0?this:t},BigInteger.prototype.and=function bnAnd(t){var r=nbi();return this.bitwiseTo(t,op_and,r),r},BigInteger.prototype.or=function bnOr(t){var r=nbi();return this.bitwiseTo(t,op_or,r),r},BigInteger.prototype.xor=function bnXor(t){var r=nbi();return this.bitwiseTo(t,op_xor,r),r},BigInteger.prototype.andNot=function bnAndNot(t){var r=nbi();return this.bitwiseTo(t,op_andnot,r),r},BigInteger.prototype.not=function bnNot(){for(var t=nbi(),r=0;r<this.t;++r)t[r]=this.DM&~this[r];return t.t=this.t,t.s=~this.s,t},BigInteger.prototype.shiftLeft=function bnShiftLeft(t){var r=nbi();return t<0?this.rShiftTo(-t,r):this.lShiftTo(t,r),r},BigInteger.prototype.shiftRight=function bnShiftRight(t){var r=nbi();return t<0?this.lShiftTo(-t,r):this.rShiftTo(t,r),r},BigInteger.prototype.getLowestSetBit=function bnGetLowestSetBit(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+lbit(this[t]);return this.s<0?this.t*this.DB:-1},BigInteger.prototype.bitCount=function bnBitCount(){for(var t=0,r=this.s&this.DM,i=0;i<this.t;++i)t+=cbit(this[i]^r);return t},BigInteger.prototype.testBit=function bnTestBit(t){var r=Math.floor(t/this.DB);return r>=this.t?0!=this.s:0!=(this[r]&1<<t%this.DB)},BigInteger.prototype.setBit=function bnSetBit(t){return this.changeBit(t,op_or)},BigInteger.prototype.clearBit=function bnClearBit(t){return this.changeBit(t,op_andnot)},BigInteger.prototype.flipBit=function bnFlipBit(t){return this.changeBit(t,op_xor)},BigInteger.prototype.add=function bnAdd(t){var r=nbi();return this.addTo(t,r),r},BigInteger.prototype.subtract=function bnSubtract(t){var r=nbi();return this.subTo(t,r),r},BigInteger.prototype.multiply=function bnMultiply(t){var r=nbi();return this.multiplyTo(t,r),r},BigInteger.prototype.divide=function bnDivide(t){var r=nbi();return this.divRemTo(t,r,null),r},BigInteger.prototype.remainder=function bnRemainder(t){var r=nbi();return this.divRemTo(t,null,r),r},BigInteger.prototype.divideAndRemainder=function bnDivideAndRemainder(t){var r=nbi(),i=nbi();return this.divRemTo(t,r,i),new Array(r,i)},BigInteger.prototype.modPow=function bnModPow(t,r){var i,o,a=t.bitLength(),l=nbv(1);if(a<=0)return l;i=a<18?1:a<48?3:a<144?4:a<768?5:6,o=a<8?new Classic(r):r.isEven()?new Barrett(r):new Montgomery(r);var u=new Array,c=3,h=i-1,p=(1<<i)-1;if(u[1]=o.convert(this),i>1){var y=nbi();for(o.sqrTo(u[1],y);c<=p;)u[c]=nbi(),o.mulTo(y,u[c-2],u[c]),c+=2}var d,v,m=t.t-1,P=!0,g=nbi();for(a=nbits(t[m])-1;m>=0;){for(a>=h?d=t[m]>>a-h&p:(d=(t[m]&(1<<a+1)-1)<<h-a,m>0&&(d|=t[m-1]>>this.DB+a-h)),c=i;0==(1&d);)d>>=1,--c;if((a-=c)<0&&(a+=this.DB,--m),P)u[d].copyTo(l),P=!1;else{for(;c>1;)o.sqrTo(l,g),o.sqrTo(g,l),c-=2;c>0?o.sqrTo(l,g):(v=l,l=g,g=v),o.mulTo(g,u[d],l)}for(;m>=0&&0==(t[m]&1<<a);)o.sqrTo(l,g),v=l,l=g,g=v,--a<0&&(a=this.DB-1,--m)}return o.revert(l)},BigInteger.prototype.modInverse=function bnModInverse(t){var r=t.isEven();if(this.isEven()&&r||0==t.signum())return BigInteger.ZERO;for(var i=t.clone(),o=this.clone(),a=nbv(1),l=nbv(0),u=nbv(0),c=nbv(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),r?(a.isEven()&&l.isEven()||(a.addTo(this,a),l.subTo(t,l)),a.rShiftTo(1,a)):l.isEven()||l.subTo(t,l),l.rShiftTo(1,l);for(;o.isEven();)o.rShiftTo(1,o),r?(u.isEven()&&c.isEven()||(u.addTo(this,u),c.subTo(t,c)),u.rShiftTo(1,u)):c.isEven()||c.subTo(t,c),c.rShiftTo(1,c);i.compareTo(o)>=0?(i.subTo(o,i),r&&a.subTo(u,a),l.subTo(c,l)):(o.subTo(i,o),r&&u.subTo(a,u),c.subTo(l,c))}return 0!=o.compareTo(BigInteger.ONE)?BigInteger.ZERO:c.compareTo(t)>=0?c.subtract(t):c.signum()<0?(c.addTo(t,c),c.signum()<0?c.add(t):c):c},BigInteger.prototype.pow=function bnPow(t){return this.exp(t,new NullExp)},BigInteger.prototype.gcd=function bnGCD(t){var r=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(r.compareTo(i)<0){var o=r;r=i,i=o}var a=r.getLowestSetBit(),l=i.getLowestSetBit();if(l<0)return r;for(a<l&&(l=a),l>0&&(r.rShiftTo(l,r),i.rShiftTo(l,i));r.signum()>0;)(a=r.getLowestSetBit())>0&&r.rShiftTo(a,r),(a=i.getLowestSetBit())>0&&i.rShiftTo(a,i),r.compareTo(i)>=0?(r.subTo(i,r),r.rShiftTo(1,r)):(i.subTo(r,i),i.rShiftTo(1,i));return l>0&&i.lShiftTo(l,i),i},BigInteger.prototype.isProbablePrime=function bnIsProbablePrime(t){var r,i=this.abs();if(1==i.t&&i[0]<=y[y.length-1]){for(r=0;r<y.length;++r)if(i[0]==y[r])return!0;return!1}if(i.isEven())return!1;for(r=1;r<y.length;){for(var o=y[r],a=r+1;a<y.length&&o<d;)o*=y[a++];for(o=i.modInt(o);r<a;)if(o%y[r++]==0)return!1}return i.millerRabin(t)},BigInteger.prototype.square=function bnSquare(){var t=nbi();return this.squareTo(t),t};var v=BigInteger;v.prototype.IsNegative=function(){return-1==this.compareTo(v.ZERO)},v.op_Equality=function(t,r){return 0==t.compareTo(r)},v.op_Inequality=function(t,r){return 0!=t.compareTo(r)},v.op_GreaterThan=function(t,r){return t.compareTo(r)>0},v.op_LessThan=function(t,r){return t.compareTo(r)<0},v.op_Addition=function(t,r){return new v(t,void 0,void 0).add(new v(r,void 0,void 0))},v.op_Subtraction=function(t,r){return new v(t,void 0,void 0).subtract(new v(r,void 0,void 0))},v.Int128Mul=function(t,r){return new v(t,void 0,void 0).multiply(new v(r,void 0,void 0))},v.op_Division=function(t,r){return t.divide(r)},v.prototype.ToDouble=function(){return parseFloat(this.toString())};var m=function Inherit(t,r){var i;if(void 0===Object.getOwnPropertyNames){for(i in r.prototype)void 0!==t.prototype[i]&&t.prototype[i]!==Object.prototype[i]||(t.prototype[i]=r.prototype[i]);for(i in r)void 0===t[i]&&(t[i]=r[i]);t.$baseCtor=r}else{for(var o=Object.getOwnPropertyNames(r.prototype),a=0;a<o.length;a++)void 0===Object.getOwnPropertyDescriptor(t.prototype,o[a])&&Object.defineProperty(t.prototype,o[a],Object.getOwnPropertyDescriptor(r.prototype,o[a]));for(i in r)void 0===t[i]&&(t[i]=r[i]);t.$baseCtor=r}};i.Path=function(){return[]},i.Path.prototype.push=Array.prototype.push,i.Paths=function(){return[]},i.Paths.prototype.push=Array.prototype.push,i.DoublePoint=function(){var t=arguments;this.X=0,this.Y=0,1===t.length?(this.X=t[0].X,this.Y=t[0].Y):2===t.length&&(this.X=t[0],this.Y=t[1])},i.DoublePoint0=function(){this.X=0,this.Y=0},i.DoublePoint0.prototype=i.DoublePoint.prototype,i.DoublePoint1=function(t){this.X=t.X,this.Y=t.Y},i.DoublePoint1.prototype=i.DoublePoint.prototype,i.DoublePoint2=function(t,r){this.X=t,this.Y=r},i.DoublePoint2.prototype=i.DoublePoint.prototype,i.PolyNode=function(){this.m_Parent=null,this.m_polygon=new i.Path,this.m_Index=0,this.m_jointype=0,this.m_endtype=0,this.m_Childs=[],this.IsOpen=!1},i.PolyNode.prototype.IsHoleNode=function(){for(var t=!0,r=this.m_Parent;null!==r;)t=!t,r=r.m_Parent;return t},i.PolyNode.prototype.ChildCount=function(){return this.m_Childs.length},i.PolyNode.prototype.Contour=function(){return this.m_polygon},i.PolyNode.prototype.AddChild=function(t){var r=this.m_Childs.length;this.m_Childs.push(t),t.m_Parent=this,t.m_Index=r},i.PolyNode.prototype.GetNext=function(){return this.m_Childs.length>0?this.m_Childs[0]:this.GetNextSiblingUp()},i.PolyNode.prototype.GetNextSiblingUp=function(){return null===this.m_Parent?null:this.m_Index===this.m_Parent.m_Childs.length-1?this.m_Parent.GetNextSiblingUp():this.m_Parent.m_Childs[this.m_Index+1]},i.PolyNode.prototype.Childs=function(){return this.m_Childs},i.PolyNode.prototype.Parent=function(){return this.m_Parent},i.PolyNode.prototype.IsHole=function(){return this.IsHoleNode()},i.PolyTree=function(){this.m_AllPolys=[],i.PolyNode.call(this)},i.PolyTree.prototype.Clear=function(){for(var t=0,r=this.m_AllPolys.length;t<r;t++)this.m_AllPolys[t]=null;this.m_AllPolys.length=0,this.m_Childs.length=0},i.PolyTree.prototype.GetFirst=function(){return this.m_Childs.length>0?this.m_Childs[0]:null},i.PolyTree.prototype.Total=function(){var t=this.m_AllPolys.length;return t>0&&this.m_Childs[0]!==this.m_AllPolys[0]&&t--,t},m(i.PolyTree,i.PolyNode),i.Math_Abs_Int64=i.Math_Abs_Int32=i.Math_Abs_Double=function(t){return Math.abs(t)},i.Math_Max_Int32_Int32=function(t,r){return Math.max(t,r)},u.msie||u.opera||u.safari?i.Cast_Int32=function(t){return 0|t}:i.Cast_Int32=function(t){return~~t},void 0===Number.toInteger&&(Number.toInteger=null),u.chrome?i.Cast_Int64=function(t){return t<-2147483648||t>2147483647?t<0?Math.ceil(t):Math.floor(t):~~t}:u.firefox&&"function"==typeof Number.toInteger?i.Cast_Int64=function(t){return Number.toInteger(t)}:u.msie7||u.msie8?i.Cast_Int64=function(t){return parseInt(t,10)}:u.msie?i.Cast_Int64=function(t){return t<-2147483648||t>2147483647?t<0?Math.ceil(t):Math.floor(t):0|t}:i.Cast_Int64=function(t){return t<0?Math.ceil(t):Math.floor(t)},i.Clear=function(t){t.length=0},i.PI=3.141592653589793,i.PI2=6.283185307179586,i.IntPoint=function(){var t=arguments,r=t.length;if(this.X=0,this.Y=0,i.use_xyz)if(this.Z=0,3===r)this.X=t[0],this.Y=t[1],this.Z=t[2];else if(2===r)this.X=t[0],this.Y=t[1],this.Z=0;else if(1===r)if(t[0]instanceof i.DoublePoint){var o=t[0];this.X=i.Clipper.Round(o.X),this.Y=i.Clipper.Round(o.Y),this.Z=0}else{void 0===(a=t[0]).Z&&(a.Z=0),this.X=a.X,this.Y=a.Y,this.Z=a.Z}else this.X=0,this.Y=0,this.Z=0;else if(2===r)this.X=t[0],this.Y=t[1];else if(1===r)if(t[0]instanceof i.DoublePoint){o=t[0];this.X=i.Clipper.Round(o.X),this.Y=i.Clipper.Round(o.Y)}else{var a=t[0];this.X=a.X,this.Y=a.Y}else this.X=0,this.Y=0},i.IntPoint.op_Equality=function(t,r){return t.X===r.X&&t.Y===r.Y},i.IntPoint.op_Inequality=function(t,r){return t.X!==r.X||t.Y!==r.Y},i.IntPoint0=function(){this.X=0,this.Y=0,i.use_xyz&&(this.Z=0)},i.IntPoint0.prototype=i.IntPoint.prototype,i.IntPoint1=function(t){this.X=t.X,this.Y=t.Y,i.use_xyz&&(void 0===t.Z?this.Z=0:this.Z=t.Z)},i.IntPoint1.prototype=i.IntPoint.prototype,i.IntPoint1dp=function(t){this.X=i.Clipper.Round(t.X),this.Y=i.Clipper.Round(t.Y),i.use_xyz&&(this.Z=0)},i.IntPoint1dp.prototype=i.IntPoint.prototype,i.IntPoint2=function(t,r,o){this.X=t,this.Y=r,i.use_xyz&&(this.Z=void 0===o?0:o)},i.IntPoint2.prototype=i.IntPoint.prototype,i.IntRect=function(){var t=arguments,r=t.length;if(4===r)this.left=t[0],this.top=t[1],this.right=t[2],this.bottom=t[3];else if(1===r){var i=t[0];this.left=i.left,this.top=i.top,this.right=i.right,this.bottom=i.bottom}else this.left=0,this.top=0,this.right=0,this.bottom=0},i.IntRect0=function(){this.left=0,this.top=0,this.right=0,this.bottom=0},i.IntRect0.prototype=i.IntRect.prototype,i.IntRect1=function(t){this.left=t.left,this.top=t.top,this.right=t.right,this.bottom=t.bottom},i.IntRect1.prototype=i.IntRect.prototype,i.IntRect4=function(t,r,i,o){this.left=t,this.top=r,this.right=i,this.bottom=o},i.IntRect4.prototype=i.IntRect.prototype,i.ClipType={ctIntersection:0,ctUnion:1,ctDifference:2,ctXor:3},i.PolyType={ptSubject:0,ptClip:1},i.PolyFillType={pftEvenOdd:0,pftNonZero:1,pftPositive:2,pftNegative:3},i.JoinType={jtSquare:0,jtRound:1,jtMiter:2},i.EndType={etOpenSquare:0,etOpenRound:1,etOpenButt:2,etClosedLine:3,etClosedPolygon:4},i.EdgeSide={esLeft:0,esRight:1},i.Direction={dRightToLeft:0,dLeftToRight:1},i.TEdge=function(){this.Bot=new i.IntPoint0,this.Curr=new i.IntPoint0,this.Top=new i.IntPoint0,this.Delta=new i.IntPoint0,this.Dx=0,this.PolyTyp=i.PolyType.ptSubject,this.Side=i.EdgeSide.esLeft,this.WindDelta=0,this.WindCnt=0,this.WindCnt2=0,this.OutIdx=0,this.Next=null,this.Prev=null,this.NextInLML=null,this.NextInAEL=null,this.PrevInAEL=null,this.NextInSEL=null,this.PrevInSEL=null},i.IntersectNode=function(){this.Edge1=null,this.Edge2=null,this.Pt=new i.IntPoint0},i.MyIntersectNodeSort=function(){},i.MyIntersectNodeSort.Compare=function(t,r){var i=r.Pt.Y-t.Pt.Y;return i>0?1:i<0?-1:0},i.LocalMinima=function(){this.Y=0,this.LeftBound=null,this.RightBound=null,this.Next=null},i.Scanbeam=function(){this.Y=0,this.Next=null},i.Maxima=function(){this.X=0,this.Next=null,this.Prev=null},i.OutRec=function(){this.Idx=0,this.IsHole=!1,this.IsOpen=!1,this.FirstLeft=null,this.Pts=null,this.BottomPt=null,this.PolyNode=null},i.OutPt=function(){this.Idx=0,this.Pt=new i.IntPoint0,this.Next=null,this.Prev=null},i.Join=function(){this.OutPt1=null,this.OutPt2=null,this.OffPt=new i.IntPoint0},i.ClipperBase=function(){this.m_MinimaList=null,this.m_CurrentLM=null,this.m_edges=new Array,this.m_UseFullRange=!1,this.m_HasOpenPaths=!1,this.PreserveCollinear=!1,this.m_Scanbeam=null,this.m_PolyOuts=null,this.m_ActiveEdges=null},i.ClipperBase.horizontal=-9007199254740992,i.ClipperBase.Skip=-2,i.ClipperBase.Unassigned=-1,i.ClipperBase.tolerance=1e-20,i.ClipperBase.loRange=47453132,i.ClipperBase.hiRange=0xfffffffffffff,i.ClipperBase.near_zero=function(t){return t>-i.ClipperBase.tolerance&&t<i.ClipperBase.tolerance},i.ClipperBase.IsHorizontal=function(t){return 0===t.Delta.Y},i.ClipperBase.prototype.PointIsVertex=function(t,r){var o=r;do{if(i.IntPoint.op_Equality(o.Pt,t))return!0;o=o.Next}while(o!==r);return!1},i.ClipperBase.prototype.PointOnLineSegment=function(t,r,i,o){return o?t.X===r.X&&t.Y===r.Y||t.X===i.X&&t.Y===i.Y||t.X>r.X==t.X<i.X&&t.Y>r.Y==t.Y<i.Y&&v.op_Equality(v.Int128Mul(t.X-r.X,i.Y-r.Y),v.Int128Mul(i.X-r.X,t.Y-r.Y)):t.X===r.X&&t.Y===r.Y||t.X===i.X&&t.Y===i.Y||t.X>r.X==t.X<i.X&&t.Y>r.Y==t.Y<i.Y&&(t.X-r.X)*(i.Y-r.Y)==(i.X-r.X)*(t.Y-r.Y)},i.ClipperBase.prototype.PointOnPolygon=function(t,r,i){for(var o=r;;){if(this.PointOnLineSegment(t,o.Pt,o.Next.Pt,i))return!0;if((o=o.Next)===r)break}return!1},i.ClipperBase.prototype.SlopesEqual=i.ClipperBase.SlopesEqual=function(){var t,r,o,a,l,u,c=arguments,h=c.length;return 3===h?(t=c[0],r=c[1],c[2]?v.op_Equality(v.Int128Mul(t.Delta.Y,r.Delta.X),v.Int128Mul(t.Delta.X,r.Delta.Y)):i.Cast_Int64(t.Delta.Y*r.Delta.X)===i.Cast_Int64(t.Delta.X*r.Delta.Y)):4===h?(o=c[0],a=c[1],l=c[2],c[3]?v.op_Equality(v.Int128Mul(o.Y-a.Y,a.X-l.X),v.Int128Mul(o.X-a.X,a.Y-l.Y)):i.Cast_Int64((o.Y-a.Y)*(a.X-l.X))-i.Cast_Int64((o.X-a.X)*(a.Y-l.Y))==0):(o=c[0],a=c[1],l=c[2],u=c[3],c[4]?v.op_Equality(v.Int128Mul(o.Y-a.Y,l.X-u.X),v.Int128Mul(o.X-a.X,l.Y-u.Y)):i.Cast_Int64((o.Y-a.Y)*(l.X-u.X))-i.Cast_Int64((o.X-a.X)*(l.Y-u.Y))==0)},i.ClipperBase.SlopesEqual3=function(t,r,o){return o?v.op_Equality(v.Int128Mul(t.Delta.Y,r.Delta.X),v.Int128Mul(t.Delta.X,r.Delta.Y)):i.Cast_Int64(t.Delta.Y*r.Delta.X)===i.Cast_Int64(t.Delta.X*r.Delta.Y)},i.ClipperBase.SlopesEqual4=function(t,r,o,a){return a?v.op_Equality(v.Int128Mul(t.Y-r.Y,r.X-o.X),v.Int128Mul(t.X-r.X,r.Y-o.Y)):i.Cast_Int64((t.Y-r.Y)*(r.X-o.X))-i.Cast_Int64((t.X-r.X)*(r.Y-o.Y))==0},i.ClipperBase.SlopesEqual5=function(t,r,o,a,l){return l?v.op_Equality(v.Int128Mul(t.Y-r.Y,o.X-a.X),v.Int128Mul(t.X-r.X,o.Y-a.Y)):i.Cast_Int64((t.Y-r.Y)*(o.X-a.X))-i.Cast_Int64((t.X-r.X)*(o.Y-a.Y))==0},i.ClipperBase.prototype.Clear=function(){this.DisposeLocalMinimaList();for(var t=0,r=this.m_edges.length;t<r;++t){for(var o=0,a=this.m_edges[t].length;o<a;++o)this.m_edges[t][o]=null;i.Clear(this.m_edges[t])}i.Clear(this.m_edges),this.m_UseFullRange=!1,this.m_HasOpenPaths=!1},i.ClipperBase.prototype.DisposeLocalMinimaList=function(){for(;null!==this.m_MinimaList;){var t=this.m_MinimaList.Next;this.m_MinimaList=null,this.m_MinimaList=t}this.m_CurrentLM=null},i.ClipperBase.prototype.RangeTest=function(t,r){r.Value?(t.X>i.ClipperBase.hiRange||t.Y>i.ClipperBase.hiRange||-t.X>i.ClipperBase.hiRange||-t.Y>i.ClipperBase.hiRange)&&i.Error("Coordinate outside allowed range in RangeTest()."):(t.X>i.ClipperBase.loRange||t.Y>i.ClipperBase.loRange||-t.X>i.ClipperBase.loRange||-t.Y>i.ClipperBase.loRange)&&(r.Value=!0,this.RangeTest(t,r))},i.ClipperBase.prototype.InitEdge=function(t,r,o,a){t.Next=r,t.Prev=o,t.Curr.X=a.X,t.Curr.Y=a.Y,i.use_xyz&&(t.Curr.Z=a.Z),t.OutIdx=-1},i.ClipperBase.prototype.InitEdge2=function(t,r){t.Curr.Y>=t.Next.Curr.Y?(t.Bot.X=t.Curr.X,t.Bot.Y=t.Curr.Y,i.use_xyz&&(t.Bot.Z=t.Curr.Z),t.Top.X=t.Next.Curr.X,t.Top.Y=t.Next.Curr.Y,i.use_xyz&&(t.Top.Z=t.Next.Curr.Z)):(t.Top.X=t.Curr.X,t.Top.Y=t.Curr.Y,i.use_xyz&&(t.Top.Z=t.Curr.Z),t.Bot.X=t.Next.Curr.X,t.Bot.Y=t.Next.Curr.Y,i.use_xyz&&(t.Bot.Z=t.Next.Curr.Z)),this.SetDx(t),t.PolyTyp=r},i.ClipperBase.prototype.FindNextLocMin=function(t){for(var r;;){for(;i.IntPoint.op_Inequality(t.Bot,t.Prev.Bot)||i.IntPoint.op_Equality(t.Curr,t.Top);)t=t.Next;if(t.Dx!==i.ClipperBase.horizontal&&t.Prev.Dx!==i.ClipperBase.horizontal)break;for(;t.Prev.Dx===i.ClipperBase.horizontal;)t=t.Prev;for(r=t;t.Dx===i.ClipperBase.horizontal;)t=t.Next;if(t.Top.Y!==t.Prev.Bot.Y){r.Prev.Bot.X<t.Bot.X&&(t=r);break}}return t},i.ClipperBase.prototype.ProcessBound=function(t,r){var o,a,l=t;if(l.OutIdx===i.ClipperBase.Skip){if(t=l,r){for(;t.Top.Y===t.Next.Bot.Y;)t=t.Next;for(;t!==l&&t.Dx===i.ClipperBase.horizontal;)t=t.Prev}else{for(;t.Top.Y===t.Prev.Bot.Y;)t=t.Prev;for(;t!==l&&t.Dx===i.ClipperBase.horizontal;)t=t.Next}if(t===l)l=r?t.Next:t.Prev;else{t=r?l.Next:l.Prev;var u=new i.LocalMinima;u.Next=null,u.Y=t.Bot.Y,u.LeftBound=null,u.RightBound=t,t.WindDelta=0,l=this.ProcessBound(t,r),this.InsertLocalMinima(u)}return l}if(t.Dx===i.ClipperBase.horizontal&&((o=r?t.Prev:t.Next).Dx===i.ClipperBase.horizontal?o.Bot.X!==t.Bot.X&&o.Top.X!==t.Bot.X&&this.ReverseHorizontal(t):o.Bot.X!==t.Bot.X&&this.ReverseHorizontal(t)),o=t,r){for(;l.Top.Y===l.Next.Bot.Y&&l.Next.OutIdx!==i.ClipperBase.Skip;)l=l.Next;if(l.Dx===i.ClipperBase.horizontal&&l.Next.OutIdx!==i.ClipperBase.Skip){for(a=l;a.Prev.Dx===i.ClipperBase.horizontal;)a=a.Prev;a.Prev.Top.X>l.Next.Top.X&&(l=a.Prev)}for(;t!==l;)t.NextInLML=t.Next,t.Dx===i.ClipperBase.horizontal&&t!==o&&t.Bot.X!==t.Prev.Top.X&&this.ReverseHorizontal(t),t=t.Next;t.Dx===i.ClipperBase.horizontal&&t!==o&&t.Bot.X!==t.Prev.Top.X&&this.ReverseHorizontal(t),l=l.Next}else{for(;l.Top.Y===l.Prev.Bot.Y&&l.Prev.OutIdx!==i.ClipperBase.Skip;)l=l.Prev;if(l.Dx===i.ClipperBase.horizontal&&l.Prev.OutIdx!==i.ClipperBase.Skip){for(a=l;a.Next.Dx===i.ClipperBase.horizontal;)a=a.Next;(a.Next.Top.X===l.Prev.Top.X||a.Next.Top.X>l.Prev.Top.X)&&(l=a.Next)}for(;t!==l;)t.NextInLML=t.Prev,t.Dx===i.ClipperBase.horizontal&&t!==o&&t.Bot.X!==t.Next.Top.X&&this.ReverseHorizontal(t),t=t.Prev;t.Dx===i.ClipperBase.horizontal&&t!==o&&t.Bot.X!==t.Next.Top.X&&this.ReverseHorizontal(t),l=l.Prev}return l},i.ClipperBase.prototype.AddPath=function(t,r,o){i.use_lines?o||r!==i.PolyType.ptClip||i.Error("AddPath: Open paths must be subject."):o||i.Error("AddPath: Open paths have been disabled.");var a=t.length-1;if(o)for(;a>0&&i.IntPoint.op_Equality(t[a],t[0]);)--a;for(;a>0&&i.IntPoint.op_Equality(t[a],t[a-1]);)--a;if(o&&a<2||!o&&a<1)return!1;for(var l=new Array,u=0;u<=a;u++)l.push(new i.TEdge);var c=!0;l[1].Curr.X=t[1].X,l[1].Curr.Y=t[1].Y,i.use_xyz&&(l[1].Curr.Z=t[1].Z);var h={Value:this.m_UseFullRange};this.RangeTest(t[0],h),this.m_UseFullRange=h.Value,h.Value=this.m_UseFullRange,this.RangeTest(t[a],h),this.m_UseFullRange=h.Value,this.InitEdge(l[0],l[1],l[a],t[0]),this.InitEdge(l[a],l[0],l[a-1],t[a]);for(u=a-1;u>=1;--u)h.Value=this.m_UseFullRange,this.RangeTest(t[u],h),this.m_UseFullRange=h.Value,this.InitEdge(l[u],l[u+1],l[u-1],t[u]);for(var p,y=l[0],d=y,v=y;;)if(d.Curr!==d.Next.Curr||!o&&d.Next===y){if(d.Prev===d.Next)break;if(!o||!i.ClipperBase.SlopesEqual4(d.Prev.Curr,d.Curr,d.Next.Curr,this.m_UseFullRange)||this.PreserveCollinear&&this.Pt2IsBetweenPt1AndPt3(d.Prev.Curr,d.Curr,d.Next.Curr)){if((d=d.Next)===v||!o&&d.Next===y)break}else d===y&&(y=d.Next),v=d=(d=this.RemoveEdge(d)).Prev}else{if(d===d.Next)break;d===y&&(y=d.Next),v=d=this.RemoveEdge(d)}if(!o&&d===d.Next||o&&d.Prev===d.Next)return!1;o||(this.m_HasOpenPaths=!0,y.Prev.OutIdx=i.ClipperBase.Skip),d=y;do{this.InitEdge2(d,r),d=d.Next,c&&d.Curr.Y!==y.Curr.Y&&(c=!1)}while(d!==y);if(c){if(o)return!1;for(d.Prev.OutIdx=i.ClipperBase.Skip,(P=new i.LocalMinima).Next=null,P.Y=d.Bot.Y,P.LeftBound=null,P.RightBound=d,P.RightBound.Side=i.EdgeSide.esRight,P.RightBound.WindDelta=0;d.Bot.X!==d.Prev.Top.X&&this.ReverseHorizontal(d),d.Next.OutIdx!==i.ClipperBase.Skip;)d.NextInLML=d.Next,d=d.Next;return this.InsertLocalMinima(P),this.m_edges.push(l),!0}this.m_edges.push(l);var m=null;for(i.IntPoint.op_Equality(d.Prev.Bot,d.Prev.Top)&&(d=d.Next);(d=this.FindNextLocMin(d))!==m;){var P;null===m&&(m=d),(P=new i.LocalMinima).Next=null,P.Y=d.Bot.Y,d.Dx<d.Prev.Dx?(P.LeftBound=d.Prev,P.RightBound=d,p=!1):(P.LeftBound=d,P.RightBound=d.Prev,p=!0),P.LeftBound.Side=i.EdgeSide.esLeft,P.RightBound.Side=i.EdgeSide.esRight,o?P.LeftBound.Next===P.RightBound?P.LeftBound.WindDelta=-1:P.LeftBound.WindDelta=1:P.LeftBound.WindDelta=0,P.RightBound.WindDelta=-P.LeftBound.WindDelta,(d=this.ProcessBound(P.LeftBound,p)).OutIdx===i.ClipperBase.Skip&&(d=this.ProcessBound(d,p));var g=this.ProcessBound(P.RightBound,!p);g.OutIdx===i.ClipperBase.Skip&&(g=this.ProcessBound(g,!p)),P.LeftBound.OutIdx===i.ClipperBase.Skip?P.LeftBound=null:P.RightBound.OutIdx===i.ClipperBase.Skip&&(P.RightBound=null),this.InsertLocalMinima(P),p||(d=g)}return!0},i.ClipperBase.prototype.AddPaths=function(t,r,i){for(var o=!1,a=0,l=t.length;a<l;++a)this.AddPath(t[a],r,i)&&(o=!0);return o},i.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3=function(t,r,o){return!(i.IntPoint.op_Equality(t,o)||i.IntPoint.op_Equality(t,r)||i.IntPoint.op_Equality(o,r))&&(t.X!==o.X?r.X>t.X==r.X<o.X:r.Y>t.Y==r.Y<o.Y)},i.ClipperBase.prototype.RemoveEdge=function(t){t.Prev.Next=t.Next,t.Next.Prev=t.Prev;var r=t.Next;return t.Prev=null,r},i.ClipperBase.prototype.SetDx=function(t){t.Delta.X=t.Top.X-t.Bot.X,t.Delta.Y=t.Top.Y-t.Bot.Y,0===t.Delta.Y?t.Dx=i.ClipperBase.horizontal:t.Dx=t.Delta.X/t.Delta.Y},i.ClipperBase.prototype.InsertLocalMinima=function(t){if(null===this.m_MinimaList)this.m_MinimaList=t;else if(t.Y>=this.m_MinimaList.Y)t.Next=this.m_MinimaList,this.m_MinimaList=t;else{for(var r=this.m_MinimaList;null!==r.Next&&t.Y<r.Next.Y;)r=r.Next;t.Next=r.Next,r.Next=t}},i.ClipperBase.prototype.PopLocalMinima=function(t,r){return r.v=this.m_CurrentLM,null!==this.m_CurrentLM&&this.m_CurrentLM.Y===t&&(this.m_CurrentLM=this.m_CurrentLM.Next,!0)},i.ClipperBase.prototype.ReverseHorizontal=function(t){var r=t.Top.X;t.Top.X=t.Bot.X,t.Bot.X=r,i.use_xyz&&(r=t.Top.Z,t.Top.Z=t.Bot.Z,t.Bot.Z=r)},i.ClipperBase.prototype.Reset=function(){if(this.m_CurrentLM=this.m_MinimaList,null!==this.m_CurrentLM){this.m_Scanbeam=null;for(var t=this.m_MinimaList;null!==t;){this.InsertScanbeam(t.Y);var r=t.LeftBound;null!==r&&(r.Curr.X=r.Bot.X,r.Curr.Y=r.Bot.Y,i.use_xyz&&(r.Curr.Z=r.Bot.Z),r.OutIdx=i.ClipperBase.Unassigned),null!==(r=t.RightBound)&&(r.Curr.X=r.Bot.X,r.Curr.Y=r.Bot.Y,i.use_xyz&&(r.Curr.Z=r.Bot.Z),r.OutIdx=i.ClipperBase.Unassigned),t=t.Next}this.m_ActiveEdges=null}},i.ClipperBase.prototype.InsertScanbeam=function(t){if(null===this.m_Scanbeam)this.m_Scanbeam=new i.Scanbeam,this.m_Scanbeam.Next=null,this.m_Scanbeam.Y=t;else if(t>this.m_Scanbeam.Y){var r=new i.Scanbeam;r.Y=t,r.Next=this.m_Scanbeam,this.m_Scanbeam=r}else{for(var o=this.m_Scanbeam;null!==o.Next&&t<=o.Next.Y;)o=o.Next;if(t===o.Y)return;var a=new i.Scanbeam;a.Y=t,a.Next=o.Next,o.Next=a}},i.ClipperBase.prototype.PopScanbeam=function(t){return null===this.m_Scanbeam?(t.v=0,!1):(t.v=this.m_Scanbeam.Y,this.m_Scanbeam=this.m_Scanbeam.Next,!0)},i.ClipperBase.prototype.LocalMinimaPending=function(){return null!==this.m_CurrentLM},i.ClipperBase.prototype.CreateOutRec=function(){var t=new i.OutRec;return t.Idx=i.ClipperBase.Unassigned,t.IsHole=!1,t.IsOpen=!1,t.FirstLeft=null,t.Pts=null,t.BottomPt=null,t.PolyNode=null,this.m_PolyOuts.push(t),t.Idx=this.m_PolyOuts.length-1,t},i.ClipperBase.prototype.DisposeOutRec=function(t){var r=this.m_PolyOuts[t];r.Pts=null,r=null,this.m_PolyOuts[t]=null},i.ClipperBase.prototype.UpdateEdgeIntoAEL=function(t){null===t.NextInLML&&i.Error("UpdateEdgeIntoAEL: invalid call");var r=t.PrevInAEL,o=t.NextInAEL;return t.NextInLML.OutIdx=t.OutIdx,null!==r?r.NextInAEL=t.NextInLML:this.m_ActiveEdges=t.NextInLML,null!==o&&(o.PrevInAEL=t.NextInLML),t.NextInLML.Side=t.Side,t.NextInLML.WindDelta=t.WindDelta,t.NextInLML.WindCnt=t.WindCnt,t.NextInLML.WindCnt2=t.WindCnt2,(t=t.NextInLML).Curr.X=t.Bot.X,t.Curr.Y=t.Bot.Y,t.PrevInAEL=r,t.NextInAEL=o,i.ClipperBase.IsHorizontal(t)||this.InsertScanbeam(t.Top.Y),t},i.ClipperBase.prototype.SwapPositionsInAEL=function(t,r){if(t.NextInAEL!==t.PrevInAEL&&r.NextInAEL!==r.PrevInAEL){if(t.NextInAEL===r){var i=r.NextInAEL;null!==i&&(i.PrevInAEL=t);var o=t.PrevInAEL;null!==o&&(o.NextInAEL=r),r.PrevInAEL=o,r.NextInAEL=t,t.PrevInAEL=r,t.NextInAEL=i}else if(r.NextInAEL===t){var a=t.NextInAEL;null!==a&&(a.PrevInAEL=r);var l=r.PrevInAEL;null!==l&&(l.NextInAEL=t),t.PrevInAEL=l,t.NextInAEL=r,r.PrevInAEL=t,r.NextInAEL=a}else{var u=t.NextInAEL,c=t.PrevInAEL;t.NextInAEL=r.NextInAEL,null!==t.NextInAEL&&(t.NextInAEL.PrevInAEL=t),t.PrevInAEL=r.PrevInAEL,null!==t.PrevInAEL&&(t.PrevInAEL.NextInAEL=t),r.NextInAEL=u,null!==r.NextInAEL&&(r.NextInAEL.PrevInAEL=r),r.PrevInAEL=c,null!==r.PrevInAEL&&(r.PrevInAEL.NextInAEL=r)}null===t.PrevInAEL?this.m_ActiveEdges=t:null===r.PrevInAEL&&(this.m_ActiveEdges=r)}},i.ClipperBase.prototype.DeleteFromAEL=function(t){var r=t.PrevInAEL,i=t.NextInAEL;null===r&&null===i&&t!==this.m_ActiveEdges||(null!==r?r.NextInAEL=i:this.m_ActiveEdges=i,null!==i&&(i.PrevInAEL=r),t.NextInAEL=null,t.PrevInAEL=null)},i.Clipper=function(t){void 0===t&&(t=0),this.m_PolyOuts=null,this.m_ClipType=i.ClipType.ctIntersection,this.m_Scanbeam=null,this.m_Maxima=null,this.m_ActiveEdges=null,this.m_SortedEdges=null,this.m_IntersectList=null,this.m_IntersectNodeComparer=null,this.m_ExecuteLocked=!1,this.m_ClipFillType=i.PolyFillType.pftEvenOdd,this.m_SubjFillType=i.PolyFillType.pftEvenOdd,this.m_Joins=null,this.m_GhostJoins=null,this.m_UsingPolyTree=!1,this.ReverseSolution=!1,this.StrictlySimple=!1,i.ClipperBase.call(this),this.m_Scanbeam=null,this.m_Maxima=null,this.m_ActiveEdges=null,this.m_SortedEdges=null,this.m_IntersectList=new Array,this.m_IntersectNodeComparer=i.MyIntersectNodeSort.Compare,this.m_ExecuteLocked=!1,this.m_UsingPolyTree=!1,this.m_PolyOuts=new Array,this.m_Joins=new Array,this.m_GhostJoins=new Array,this.ReverseSolution=0!=(1&t),this.StrictlySimple=0!=(2&t),this.PreserveCollinear=0!=(4&t),i.use_xyz&&(this.ZFillFunction=null)},i.Clipper.ioReverseSolution=1,i.Clipper.ioStrictlySimple=2,i.Clipper.ioPreserveCollinear=4,i.Clipper.prototype.Clear=function(){0!==this.m_edges.length&&(this.DisposeAllPolyPts(),i.ClipperBase.prototype.Clear.call(this))},i.Clipper.prototype.InsertMaxima=function(t){var r=new i.Maxima;if(r.X=t,null===this.m_Maxima)this.m_Maxima=r,this.m_Maxima.Next=null,this.m_Maxima.Prev=null;else if(t<this.m_Maxima.X)r.Next=this.m_Maxima,r.Prev=null,this.m_Maxima=r;else{for(var o=this.m_Maxima;null!==o.Next&&t>=o.Next.X;)o=o.Next;if(t===o.X)return;r.Next=o.Next,r.Prev=o,null!==o.Next&&(o.Next.Prev=r),o.Next=r}},i.Clipper.prototype.Execute=function(){var t=arguments,r=t.length,o=t[1]instanceof i.PolyTree;if(4===r&&!o){var a=t[0],l=t[1],u=t[2],c=t[3];if(this.m_ExecuteLocked)return!1;this.m_HasOpenPaths&&i.Error("Error: PolyTree struct is needed for open path clipping."),this.m_ExecuteLocked=!0,i.Clear(l),this.m_SubjFillType=u,this.m_ClipFillType=c,this.m_ClipType=a,this.m_UsingPolyTree=!1;try{(p=this.ExecuteInternal())&&this.BuildResult(l)}finally{this.DisposeAllPolyPts(),this.m_ExecuteLocked=!1}return p}if(4===r&&o){a=t[0];var h=t[1];u=t[2],c=t[3];if(this.m_ExecuteLocked)return!1;this.m_ExecuteLocked=!0,this.m_SubjFillType=u,this.m_ClipFillType=c,this.m_ClipType=a,this.m_UsingPolyTree=!0;try{var p;(p=this.ExecuteInternal())&&this.BuildResult2(h)}finally{this.DisposeAllPolyPts(),this.m_ExecuteLocked=!1}return p}if(2===r&&!o){a=t[0],l=t[1];return this.Execute(a,l,i.PolyFillType.pftEvenOdd,i.PolyFillType.pftEvenOdd)}if(2===r&&o){a=t[0],h=t[1];return this.Execute(a,h,i.PolyFillType.pftEvenOdd,i.PolyFillType.pftEvenOdd)}},i.Clipper.prototype.FixHoleLinkage=function(t){if(null!==t.FirstLeft&&(t.IsHole===t.FirstLeft.IsHole||null===t.FirstLeft.Pts)){for(var r=t.FirstLeft;null!==r&&(r.IsHole===t.IsHole||null===r.Pts);)r=r.FirstLeft;t.FirstLeft=r}},i.Clipper.prototype.ExecuteInternal=function(){try{this.Reset(),this.m_SortedEdges=null,this.m_Maxima=null;var t,r,i,o={},a={};if(!this.PopScanbeam(o))return!1;for(this.InsertLocalMinimaIntoAEL(o.v);this.PopScanbeam(a)||this.LocalMinimaPending();){if(this.ProcessHorizontals(),this.m_GhostJoins.length=0,!this.ProcessIntersections(a.v))return!1;this.ProcessEdgesAtTopOfScanbeam(a.v),o.v=a.v,this.InsertLocalMinimaIntoAEL(o.v)}for(r=0,i=this.m_PolyOuts.length;r<i;r++)null===(t=this.m_PolyOuts[r]).Pts||t.IsOpen||(t.IsHole^this.ReverseSolution)==this.Area$1(t)>0&&this.ReversePolyPtLinks(t.Pts);for(this.JoinCommonEdges(),r=0,i=this.m_PolyOuts.length;r<i;r++)null!==(t=this.m_PolyOuts[r]).Pts&&(t.IsOpen?this.FixupOutPolyline(t):this.FixupOutPolygon(t));return this.StrictlySimple&&this.DoSimplePolygons(),!0}finally{this.m_Joins.length=0,this.m_GhostJoins.length=0}},i.Clipper.prototype.DisposeAllPolyPts=function(){for(var t=0,r=this.m_PolyOuts.length;t<r;++t)this.DisposeOutRec(t);i.Clear(this.m_PolyOuts)},i.Clipper.prototype.AddJoin=function(t,r,o){var a=new i.Join;a.OutPt1=t,a.OutPt2=r,a.OffPt.X=o.X,a.OffPt.Y=o.Y,i.use_xyz&&(a.OffPt.Z=o.Z),this.m_Joins.push(a)},i.Clipper.prototype.AddGhostJoin=function(t,r){var o=new i.Join;o.OutPt1=t,o.OffPt.X=r.X,o.OffPt.Y=r.Y,i.use_xyz&&(o.OffPt.Z=r.Z),this.m_GhostJoins.push(o)},i.Clipper.prototype.SetZ=function(t,r,o){if(null!==this.ZFillFunction){if(0!==t.Z||null===this.ZFillFunction)return;i.IntPoint.op_Equality(t,r.Bot)?t.Z=r.Bot.Z:i.IntPoint.op_Equality(t,r.Top)?t.Z=r.Top.Z:i.IntPoint.op_Equality(t,o.Bot)?t.Z=o.Bot.Z:i.IntPoint.op_Equality(t,o.Top)?t.Z=o.Top.Z:this.ZFillFunction(r.Bot,r.Top,o.Bot,o.Top,t)}},i.Clipper.prototype.InsertLocalMinimaIntoAEL=function(t){for(var r,o,a={};this.PopLocalMinima(t,a);){r=a.v.LeftBound,o=a.v.RightBound;var l=null;if(null===r?(this.InsertEdgeIntoAEL(o,null),this.SetWindingCount(o),this.IsContributing(o)&&(l=this.AddOutPt(o,o.Bot))):null===o?(this.InsertEdgeIntoAEL(r,null),this.SetWindingCount(r),this.IsContributing(r)&&(l=this.AddOutPt(r,r.Bot)),this.InsertScanbeam(r.Top.Y)):(this.InsertEdgeIntoAEL(r,null),this.InsertEdgeIntoAEL(o,r),this.SetWindingCount(r),o.WindCnt=r.WindCnt,o.WindCnt2=r.WindCnt2,this.IsContributing(r)&&(l=this.AddLocalMinPoly(r,o,r.Bot)),this.InsertScanbeam(r.Top.Y)),null!==o&&(i.ClipperBase.IsHorizontal(o)?(null!==o.NextInLML&&this.InsertScanbeam(o.NextInLML.Top.Y),this.AddEdgeToSEL(o)):this.InsertScanbeam(o.Top.Y)),null!==r&&null!==o){if(null!==l&&i.ClipperBase.IsHorizontal(o)&&this.m_GhostJoins.length>0&&0!==o.WindDelta)for(var u=0,c=this.m_GhostJoins.length;u<c;u++){var h=this.m_GhostJoins[u];this.HorzSegmentsOverlap(h.OutPt1.Pt.X,h.OffPt.X,o.Bot.X,o.Top.X)&&this.AddJoin(h.OutPt1,l,h.OffPt)}if(r.OutIdx>=0&&null!==r.PrevInAEL&&r.PrevInAEL.Curr.X===r.Bot.X&&r.PrevInAEL.OutIdx>=0&&i.ClipperBase.SlopesEqual5(r.PrevInAEL.Curr,r.PrevInAEL.Top,r.Curr,r.Top,this.m_UseFullRange)&&0!==r.WindDelta&&0!==r.PrevInAEL.WindDelta){var p=this.AddOutPt(r.PrevInAEL,r.Bot);this.AddJoin(l,p,r.Top)}if(r.NextInAEL!==o){if(o.OutIdx>=0&&o.PrevInAEL.OutIdx>=0&&i.ClipperBase.SlopesEqual5(o.PrevInAEL.Curr,o.PrevInAEL.Top,o.Curr,o.Top,this.m_UseFullRange)&&0!==o.WindDelta&&0!==o.PrevInAEL.WindDelta){p=this.AddOutPt(o.PrevInAEL,o.Bot);this.AddJoin(l,p,o.Top)}var y=r.NextInAEL;if(null!==y)for(;y!==o;)this.IntersectEdges(o,y,r.Curr),y=y.NextInAEL}}}},i.Clipper.prototype.InsertEdgeIntoAEL=function(t,r){if(null===this.m_ActiveEdges)t.PrevInAEL=null,t.NextInAEL=null,this.m_ActiveEdges=t;else if(null===r&&this.E2InsertsBeforeE1(this.m_ActiveEdges,t))t.PrevInAEL=null,t.NextInAEL=this.m_ActiveEdges,this.m_ActiveEdges.PrevInAEL=t,this.m_ActiveEdges=t;else{for(null===r&&(r=this.m_ActiveEdges);null!==r.NextInAEL&&!this.E2InsertsBeforeE1(r.NextInAEL,t);)r=r.NextInAEL;t.NextInAEL=r.NextInAEL,null!==r.NextInAEL&&(r.NextInAEL.PrevInAEL=t),t.PrevInAEL=r,r.NextInAEL=t}},i.Clipper.prototype.E2InsertsBeforeE1=function(t,r){return r.Curr.X===t.Curr.X?r.Top.Y>t.Top.Y?r.Top.X<i.Clipper.TopX(t,r.Top.Y):t.Top.X>i.Clipper.TopX(r,t.Top.Y):r.Curr.X<t.Curr.X},i.Clipper.prototype.IsEvenOddFillType=function(t){return t.PolyTyp===i.PolyType.ptSubject?this.m_SubjFillType===i.PolyFillType.pftEvenOdd:this.m_ClipFillType===i.PolyFillType.pftEvenOdd},i.Clipper.prototype.IsEvenOddAltFillType=function(t){return t.PolyTyp===i.PolyType.ptSubject?this.m_ClipFillType===i.PolyFillType.pftEvenOdd:this.m_SubjFillType===i.PolyFillType.pftEvenOdd},i.Clipper.prototype.IsContributing=function(t){var r,o;switch(t.PolyTyp===i.PolyType.ptSubject?(r=this.m_SubjFillType,o=this.m_ClipFillType):(r=this.m_ClipFillType,o=this.m_SubjFillType),r){case i.PolyFillType.pftEvenOdd:if(0===t.WindDelta&&1!==t.WindCnt)return!1;break;case i.PolyFillType.pftNonZero:if(1!==Math.abs(t.WindCnt))return!1;break;case i.PolyFillType.pftPositive:if(1!==t.WindCnt)return!1;break;default:if(-1!==t.WindCnt)return!1}switch(this.m_ClipType){case i.ClipType.ctIntersection:switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0!==t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2>0;default:return t.WindCnt2<0}case i.ClipType.ctUnion:switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0===t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}case i.ClipType.ctDifference:if(t.PolyTyp===i.PolyType.ptSubject)switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0===t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}else switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0!==t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2>0;default:return t.WindCnt2<0}case i.ClipType.ctXor:if(0!==t.WindDelta)return!0;switch(o){case i.PolyFillType.pftEvenOdd:case i.PolyFillType.pftNonZero:return 0===t.WindCnt2;case i.PolyFillType.pftPositive:return t.WindCnt2<=0;default:return t.WindCnt2>=0}}return!0},i.Clipper.prototype.SetWindingCount=function(t){for(var r=t.PrevInAEL;null!==r&&(r.PolyTyp!==t.PolyTyp||0===r.WindDelta);)r=r.PrevInAEL;if(null===r){var o=t.PolyTyp===i.PolyType.ptSubject?this.m_SubjFillType:this.m_ClipFillType;0===t.WindDelta?t.WindCnt=o===i.PolyFillType.pftNegative?-1:1:t.WindCnt=t.WindDelta,t.WindCnt2=0,r=this.m_ActiveEdges}else if(0===t.WindDelta&&this.m_ClipType!==i.ClipType.ctUnion)t.WindCnt=1,t.WindCnt2=r.WindCnt2,r=r.NextInAEL;else if(this.IsEvenOddFillType(t)){if(0===t.WindDelta){for(var a=!0,l=r.PrevInAEL;null!==l;)l.PolyTyp===r.PolyTyp&&0!==l.WindDelta&&(a=!a),l=l.PrevInAEL;t.WindCnt=a?0:1}else t.WindCnt=t.WindDelta;t.WindCnt2=r.WindCnt2,r=r.NextInAEL}else r.WindCnt*r.WindDelta<0?Math.abs(r.WindCnt)>1?r.WindDelta*t.WindDelta<0?t.WindCnt=r.WindCnt:t.WindCnt=r.WindCnt+t.WindDelta:t.WindCnt=0===t.WindDelta?1:t.WindDelta:0===t.WindDelta?t.WindCnt=r.WindCnt<0?r.WindCnt-1:r.WindCnt+1:r.WindDelta*t.WindDelta<0?t.WindCnt=r.WindCnt:t.WindCnt=r.WindCnt+t.WindDelta,t.WindCnt2=r.WindCnt2,r=r.NextInAEL;if(this.IsEvenOddAltFillType(t))for(;r!==t;)0!==r.WindDelta&&(t.WindCnt2=0===t.WindCnt2?1:0),r=r.NextInAEL;else for(;r!==t;)t.WindCnt2+=r.WindDelta,r=r.NextInAEL},i.Clipper.prototype.AddEdgeToSEL=function(t){null===this.m_SortedEdges?(this.m_SortedEdges=t,t.PrevInSEL=null,t.NextInSEL=null):(t.NextInSEL=this.m_SortedEdges,t.PrevInSEL=null,this.m_SortedEdges.PrevInSEL=t,this.m_SortedEdges=t)},i.Clipper.prototype.PopEdgeFromSEL=function(t){if(t.v=this.m_SortedEdges,null===t.v)return!1;var r=t.v;return this.m_SortedEdges=t.v.NextInSEL,null!==this.m_SortedEdges&&(this.m_SortedEdges.PrevInSEL=null),r.NextInSEL=null,r.PrevInSEL=null,!0},i.Clipper.prototype.CopyAELToSEL=function(){var t=this.m_ActiveEdges;for(this.m_SortedEdges=t;null!==t;)t.PrevInSEL=t.PrevInAEL,t.NextInSEL=t.NextInAEL,t=t.NextInAEL},i.Clipper.prototype.SwapPositionsInSEL=function(t,r){if(!(null===t.NextInSEL&&null===t.PrevInSEL||null===r.NextInSEL&&null===r.PrevInSEL)){if(t.NextInSEL===r)null!==(i=r.NextInSEL)&&(i.PrevInSEL=t),null!==(o=t.PrevInSEL)&&(o.NextInSEL=r),r.PrevInSEL=o,r.NextInSEL=t,t.PrevInSEL=r,t.NextInSEL=i;else if(r.NextInSEL===t){null!==(i=t.NextInSEL)&&(i.PrevInSEL=r),null!==(o=r.PrevInSEL)&&(o.NextInSEL=t),t.PrevInSEL=o,t.NextInSEL=r,r.PrevInSEL=t,r.NextInSEL=i}else{var i=t.NextInSEL,o=t.PrevInSEL;t.NextInSEL=r.NextInSEL,null!==t.NextInSEL&&(t.NextInSEL.PrevInSEL=t),t.PrevInSEL=r.PrevInSEL,null!==t.PrevInSEL&&(t.PrevInSEL.NextInSEL=t),r.NextInSEL=i,null!==r.NextInSEL&&(r.NextInSEL.PrevInSEL=r),r.PrevInSEL=o,null!==r.PrevInSEL&&(r.PrevInSEL.NextInSEL=r)}null===t.PrevInSEL?this.m_SortedEdges=t:null===r.PrevInSEL&&(this.m_SortedEdges=r)}},i.Clipper.prototype.AddLocalMaxPoly=function(t,r,i){this.AddOutPt(t,i),0===r.WindDelta&&this.AddOutPt(r,i),t.OutIdx===r.OutIdx?(t.OutIdx=-1,r.OutIdx=-1):t.OutIdx<r.OutIdx?this.AppendPolygon(t,r):this.AppendPolygon(r,t)},i.Clipper.prototype.AddLocalMinPoly=function(t,r,o){var a,l,u;if(i.ClipperBase.IsHorizontal(r)||t.Dx>r.Dx?(a=this.AddOutPt(t,o),r.OutIdx=t.OutIdx,t.Side=i.EdgeSide.esLeft,r.Side=i.EdgeSide.esRight,u=(l=t).PrevInAEL===r?r.PrevInAEL:l.PrevInAEL):(a=this.AddOutPt(r,o),t.OutIdx=r.OutIdx,t.Side=i.EdgeSide.esRight,r.Side=i.EdgeSide.esLeft,u=(l=r).PrevInAEL===t?t.PrevInAEL:l.PrevInAEL),null!==u&&u.OutIdx>=0&&u.Top.Y<o.Y&&l.Top.Y<o.Y){var c=i.Clipper.TopX(u,o.Y),h=i.Clipper.TopX(l,o.Y);if(c===h&&0!==l.WindDelta&&0!==u.WindDelta&&i.ClipperBase.SlopesEqual5(new i.IntPoint2(c,o.Y),u.Top,new i.IntPoint2(h,o.Y),l.Top,this.m_UseFullRange)){var p=this.AddOutPt(u,o);this.AddJoin(a,p,l.Top)}}return a},i.Clipper.prototype.AddOutPt=function(t,r){if(t.OutIdx<0){(a=this.CreateOutRec()).IsOpen=0===t.WindDelta;var o=new i.OutPt;return a.Pts=o,o.Idx=a.Idx,o.Pt.X=r.X,o.Pt.Y=r.Y,i.use_xyz&&(o.Pt.Z=r.Z),o.Next=o,o.Prev=o,a.IsOpen||this.SetHoleState(t,a),t.OutIdx=a.Idx,o}var a,l=(a=this.m_PolyOuts[t.OutIdx]).Pts,u=t.Side===i.EdgeSide.esLeft;return u&&i.IntPoint.op_Equality(r,l.Pt)?l:!u&&i.IntPoint.op_Equality(r,l.Prev.Pt)?l.Prev:((o=new i.OutPt).Idx=a.Idx,o.Pt.X=r.X,o.Pt.Y=r.Y,i.use_xyz&&(o.Pt.Z=r.Z),o.Next=l,o.Prev=l.Prev,o.Prev.Next=o,l.Prev=o,u&&(a.Pts=o),o)},i.Clipper.prototype.GetLastOutPt=function(t){var r=this.m_PolyOuts[t.OutIdx];return t.Side===i.EdgeSide.esLeft?r.Pts:r.Pts.Prev},i.Clipper.prototype.SwapPoints=function(t,r){var o=new i.IntPoint1(t.Value);t.Value.X=r.Value.X,t.Value.Y=r.Value.Y,i.use_xyz&&(t.Value.Z=r.Value.Z),r.Value.X=o.X,r.Value.Y=o.Y,i.use_xyz&&(r.Value.Z=o.Z)},i.Clipper.prototype.HorzSegmentsOverlap=function(t,r,i,o){var a;return t>r&&(a=t,t=r,r=a),i>o&&(a=i,i=o,o=a),t<o&&i<r},i.Clipper.prototype.SetHoleState=function(t,r){for(var i=t.PrevInAEL,o=null;null!==i;)i.OutIdx>=0&&0!==i.WindDelta&&(null===o?o=i:o.OutIdx===i.OutIdx&&(o=null)),i=i.PrevInAEL;null===o?(r.FirstLeft=null,r.IsHole=!1):(r.FirstLeft=this.m_PolyOuts[o.OutIdx],r.IsHole=!r.FirstLeft.IsHole)},i.Clipper.prototype.GetDx=function(t,r){return t.Y===r.Y?i.ClipperBase.horizontal:(r.X-t.X)/(r.Y-t.Y)},i.Clipper.prototype.FirstIsBottomPt=function(t,r){for(var o=t.Prev;i.IntPoint.op_Equality(o.Pt,t.Pt)&&o!==t;)o=o.Prev;var a=Math.abs(this.GetDx(t.Pt,o.Pt));for(o=t.Next;i.IntPoint.op_Equality(o.Pt,t.Pt)&&o!==t;)o=o.Next;var l=Math.abs(this.GetDx(t.Pt,o.Pt));for(o=r.Prev;i.IntPoint.op_Equality(o.Pt,r.Pt)&&o!==r;)o=o.Prev;var u=Math.abs(this.GetDx(r.Pt,o.Pt));for(o=r.Next;i.IntPoint.op_Equality(o.Pt,r.Pt)&&o!==r;)o=o.Next;var c=Math.abs(this.GetDx(r.Pt,o.Pt));return Math.max(a,l)===Math.max(u,c)&&Math.min(a,l)===Math.min(u,c)?this.Area(t)>0:a>=u&&a>=c||l>=u&&l>=c},i.Clipper.prototype.GetBottomPt=function(t){for(var r=null,o=t.Next;o!==t;)o.Pt.Y>t.Pt.Y?(t=o,r=null):o.Pt.Y===t.Pt.Y&&o.Pt.X<=t.Pt.X&&(o.Pt.X<t.Pt.X?(r=null,t=o):o.Next!==t&&o.Prev!==t&&(r=o)),o=o.Next;if(null!==r)for(;r!==o;)for(this.FirstIsBottomPt(o,r)||(t=r),r=r.Next;i.IntPoint.op_Inequality(r.Pt,t.Pt);)r=r.Next;return t},i.Clipper.prototype.GetLowermostRec=function(t,r){null===t.BottomPt&&(t.BottomPt=this.GetBottomPt(t.Pts)),null===r.BottomPt&&(r.BottomPt=this.GetBottomPt(r.Pts));var i=t.BottomPt,o=r.BottomPt;return i.Pt.Y>o.Pt.Y?t:i.Pt.Y<o.Pt.Y?r:i.Pt.X<o.Pt.X?t:i.Pt.X>o.Pt.X||i.Next===i?r:o.Next===o||this.FirstIsBottomPt(i,o)?t:r},i.Clipper.prototype.OutRec1RightOfOutRec2=function(t,r){do{if((t=t.FirstLeft)===r)return!0}while(null!==t);return!1},i.Clipper.prototype.GetOutRec=function(t){for(var r=this.m_PolyOuts[t];r!==this.m_PolyOuts[r.Idx];)r=this.m_PolyOuts[r.Idx];return r},i.Clipper.prototype.AppendPolygon=function(t,r){var o,a=this.m_PolyOuts[t.OutIdx],l=this.m_PolyOuts[r.OutIdx];o=this.OutRec1RightOfOutRec2(a,l)?l:this.OutRec1RightOfOutRec2(l,a)?a:this.GetLowermostRec(a,l);var u=a.Pts,c=u.Prev,h=l.Pts,p=h.Prev;t.Side===i.EdgeSide.esLeft?r.Side===i.EdgeSide.esLeft?(this.ReversePolyPtLinks(h),h.Next=u,u.Prev=h,c.Next=p,p.Prev=c,a.Pts=p):(p.Next=u,u.Prev=p,h.Prev=c,c.Next=h,a.Pts=h):r.Side===i.EdgeSide.esRight?(this.ReversePolyPtLinks(h),c.Next=p,p.Prev=c,h.Next=u,u.Prev=h):(c.Next=h,h.Prev=c,u.Prev=p,p.Next=u),a.BottomPt=null,o===l&&(l.FirstLeft!==a&&(a.FirstLeft=l.FirstLeft),a.IsHole=l.IsHole),l.Pts=null,l.BottomPt=null,l.FirstLeft=a;var y=t.OutIdx,d=r.OutIdx;t.OutIdx=-1,r.OutIdx=-1;for(var v=this.m_ActiveEdges;null!==v;){if(v.OutIdx===d){v.OutIdx=y,v.Side=t.Side;break}v=v.NextInAEL}l.Idx=a.Idx},i.Clipper.prototype.ReversePolyPtLinks=function(t){if(null!==t){var r,i;r=t;do{i=r.Next,r.Next=r.Prev,r.Prev=i,r=i}while(r!==t)}},i.Clipper.SwapSides=function(t,r){var i=t.Side;t.Side=r.Side,r.Side=i},i.Clipper.SwapPolyIndexes=function(t,r){var i=t.OutIdx;t.OutIdx=r.OutIdx,r.OutIdx=i},i.Clipper.prototype.IntersectEdges=function(t,r,o){var a=t.OutIdx>=0,l=r.OutIdx>=0;if(i.use_xyz&&this.SetZ(o,t,r),!i.use_lines||0!==t.WindDelta&&0!==r.WindDelta){if(t.PolyTyp===r.PolyTyp)if(this.IsEvenOddFillType(t)){var u=t.WindCnt;t.WindCnt=r.WindCnt,r.WindCnt=u}else t.WindCnt+r.WindDelta===0?t.WindCnt=-t.WindCnt:t.WindCnt+=r.WindDelta,r.WindCnt-t.WindDelta==0?r.WindCnt=-r.WindCnt:r.WindCnt-=t.WindDelta;else this.IsEvenOddFillType(r)?t.WindCnt2=0===t.WindCnt2?1:0:t.WindCnt2+=r.WindDelta,this.IsEvenOddFillType(t)?r.WindCnt2=0===r.WindCnt2?1:0:r.WindCnt2-=t.WindDelta;var c,h,p,y,d,v;switch(t.PolyTyp===i.PolyType.ptSubject?(c=this.m_SubjFillType,p=this.m_ClipFillType):(c=this.m_ClipFillType,p=this.m_SubjFillType),r.PolyTyp===i.PolyType.ptSubject?(h=this.m_SubjFillType,y=this.m_ClipFillType):(h=this.m_ClipFillType,y=this.m_SubjFillType),c){case i.PolyFillType.pftPositive:d=t.WindCnt;break;case i.PolyFillType.pftNegative:d=-t.WindCnt;break;default:d=Math.abs(t.WindCnt)}switch(h){case i.PolyFillType.pftPositive:v=r.WindCnt;break;case i.PolyFillType.pftNegative:v=-r.WindCnt;break;default:v=Math.abs(r.WindCnt)}if(a&&l)0!==d&&1!==d||0!==v&&1!==v||t.PolyTyp!==r.PolyTyp&&this.m_ClipType!==i.ClipType.ctXor?this.AddLocalMaxPoly(t,r,o):(this.AddOutPt(t,o),this.AddOutPt(r,o),i.Clipper.SwapSides(t,r),i.Clipper.SwapPolyIndexes(t,r));else if(a)0!==v&&1!==v||(this.AddOutPt(t,o),i.Clipper.SwapSides(t,r),i.Clipper.SwapPolyIndexes(t,r));else if(l)0!==d&&1!==d||(this.AddOutPt(r,o),i.Clipper.SwapSides(t,r),i.Clipper.SwapPolyIndexes(t,r));else if(!(0!==d&&1!==d||0!==v&&1!==v)){var m,P;switch(p){case i.PolyFillType.pftPositive:m=t.WindCnt2;break;case i.PolyFillType.pftNegative:m=-t.WindCnt2;break;default:m=Math.abs(t.WindCnt2)}switch(y){case i.PolyFillType.pftPositive:P=r.WindCnt2;break;case i.PolyFillType.pftNegative:P=-r.WindCnt2;break;default:P=Math.abs(r.WindCnt2)}if(t.PolyTyp!==r.PolyTyp)this.AddLocalMinPoly(t,r,o);else if(1===d&&1===v)switch(this.m_ClipType){case i.ClipType.ctIntersection:m>0&&P>0&&this.AddLocalMinPoly(t,r,o);break;case i.ClipType.ctUnion:m<=0&&P<=0&&this.AddLocalMinPoly(t,r,o);break;case i.ClipType.ctDifference:(t.PolyTyp===i.PolyType.ptClip&&m>0&&P>0||t.PolyTyp===i.PolyType.ptSubject&&m<=0&&P<=0)&&this.AddLocalMinPoly(t,r,o);break;case i.ClipType.ctXor:this.AddLocalMinPoly(t,r,o)}else i.Clipper.SwapSides(t,r)}}else{if(0===t.WindDelta&&0===r.WindDelta)return;t.PolyTyp===r.PolyTyp&&t.WindDelta!==r.WindDelta&&this.m_ClipType===i.ClipType.ctUnion?0===t.WindDelta?l&&(this.AddOutPt(t,o),a&&(t.OutIdx=-1)):a&&(this.AddOutPt(r,o),l&&(r.OutIdx=-1)):t.PolyTyp!==r.PolyTyp&&(0!==t.WindDelta||1!==Math.abs(r.WindCnt)||this.m_ClipType===i.ClipType.ctUnion&&0!==r.WindCnt2?0!==r.WindDelta||1!==Math.abs(t.WindCnt)||this.m_ClipType===i.ClipType.ctUnion&&0!==t.WindCnt2||(this.AddOutPt(r,o),l&&(r.OutIdx=-1)):(this.AddOutPt(t,o),a&&(t.OutIdx=-1)))}},i.Clipper.prototype.DeleteFromSEL=function(t){var r=t.PrevInSEL,i=t.NextInSEL;null===r&&null===i&&t!==this.m_SortedEdges||(null!==r?r.NextInSEL=i:this.m_SortedEdges=i,null!==i&&(i.PrevInSEL=r),t.NextInSEL=null,t.PrevInSEL=null)},i.Clipper.prototype.ProcessHorizontals=function(){for(var t={};this.PopEdgeFromSEL(t);)this.ProcessHorizontal(t.v)},i.Clipper.prototype.GetHorzDirection=function(t,r){t.Bot.X<t.Top.X?(r.Left=t.Bot.X,r.Right=t.Top.X,r.Dir=i.Direction.dLeftToRight):(r.Left=t.Top.X,r.Right=t.Bot.X,r.Dir=i.Direction.dRightToLeft)},i.Clipper.prototype.ProcessHorizontal=function(t){var r={Dir:null,Left:null,Right:null};this.GetHorzDirection(t,r);for(var o=r.Dir,a=r.Left,l=r.Right,u=0===t.WindDelta,c=t,h=null;null!==c.NextInLML&&i.ClipperBase.IsHorizontal(c.NextInLML);)c=c.NextInLML;null===c.NextInLML&&(h=this.GetMaximaPair(c));var p=this.m_Maxima;if(null!==p)if(o===i.Direction.dLeftToRight){for(;null!==p&&p.X<=t.Bot.X;)p=p.Next;null!==p&&p.X>=c.Top.X&&(p=null)}else{for(;null!==p.Next&&p.Next.X<t.Bot.X;)p=p.Next;p.X<=c.Top.X&&(p=null)}for(var y=null;;){for(var d=t===c,v=this.GetNextInAEL(t,o);null!==v;){if(null!==p)if(o===i.Direction.dLeftToRight)for(;null!==p&&p.X<v.Curr.X;)t.OutIdx>=0&&!u&&this.AddOutPt(t,new i.IntPoint2(p.X,t.Bot.Y)),p=p.Next;else for(;null!==p&&p.X>v.Curr.X;)t.OutIdx>=0&&!u&&this.AddOutPt(t,new i.IntPoint2(p.X,t.Bot.Y)),p=p.Prev;if(o===i.Direction.dLeftToRight&&v.Curr.X>l||o===i.Direction.dRightToLeft&&v.Curr.X<a)break;if(v.Curr.X===t.Top.X&&null!==t.NextInLML&&v.Dx<t.NextInLML.Dx)break;if(t.OutIdx>=0&&!u){i.use_xyz&&(o===i.Direction.dLeftToRight?this.SetZ(v.Curr,t,v):this.SetZ(v.Curr,v,t)),y=this.AddOutPt(t,v.Curr);for(var m=this.m_SortedEdges;null!==m;){if(m.OutIdx>=0&&this.HorzSegmentsOverlap(t.Bot.X,t.Top.X,m.Bot.X,m.Top.X)){var P=this.GetLastOutPt(m);this.AddJoin(P,y,m.Top)}m=m.NextInSEL}this.AddGhostJoin(y,t.Bot)}if(v===h&&d)return t.OutIdx>=0&&this.AddLocalMaxPoly(t,h,t.Top),this.DeleteFromAEL(t),void this.DeleteFromAEL(h);if(o===i.Direction.dLeftToRight){var g=new i.IntPoint2(v.Curr.X,t.Curr.Y);this.IntersectEdges(t,v,g)}else{g=new i.IntPoint2(v.Curr.X,t.Curr.Y);this.IntersectEdges(v,t,g)}var _=this.GetNextInAEL(v,o);this.SwapPositionsInAEL(t,v),v=_}if(null===t.NextInLML||!i.ClipperBase.IsHorizontal(t.NextInLML))break;(t=this.UpdateEdgeIntoAEL(t)).OutIdx>=0&&this.AddOutPt(t,t.Bot),r={Dir:o,Left:a,Right:l},this.GetHorzDirection(t,r),o=r.Dir,a=r.Left,l=r.Right}if(t.OutIdx>=0&&null===y){y=this.GetLastOutPt(t);for(m=this.m_SortedEdges;null!==m;){if(m.OutIdx>=0&&this.HorzSegmentsOverlap(t.Bot.X,t.Top.X,m.Bot.X,m.Top.X)){P=this.GetLastOutPt(m);this.AddJoin(P,y,m.Top)}m=m.NextInSEL}this.AddGhostJoin(y,t.Top)}if(null!==t.NextInLML)if(t.OutIdx>=0){if(y=this.AddOutPt(t,t.Top),0===(t=this.UpdateEdgeIntoAEL(t)).WindDelta)return;var b=t.PrevInAEL;_=t.NextInAEL;if(null!==b&&b.Curr.X===t.Bot.X&&b.Curr.Y===t.Bot.Y&&0===b.WindDelta&&b.OutIdx>=0&&b.Curr.Y>b.Top.Y&&i.ClipperBase.SlopesEqual3(t,b,this.m_UseFullRange)){P=this.AddOutPt(b,t.Bot);this.AddJoin(y,P,t.Top)}else if(null!==_&&_.Curr.X===t.Bot.X&&_.Curr.Y===t.Bot.Y&&0!==_.WindDelta&&_.OutIdx>=0&&_.Curr.Y>_.Top.Y&&i.ClipperBase.SlopesEqual3(t,_,this.m_UseFullRange)){P=this.AddOutPt(_,t.Bot);this.AddJoin(y,P,t.Top)}}else t=this.UpdateEdgeIntoAEL(t);else t.OutIdx>=0&&this.AddOutPt(t,t.Top),this.DeleteFromAEL(t)},i.Clipper.prototype.GetNextInAEL=function(t,r){return r===i.Direction.dLeftToRight?t.NextInAEL:t.PrevInAEL},i.Clipper.prototype.IsMinima=function(t){return null!==t&&t.Prev.NextInLML!==t&&t.Next.NextInLML!==t},i.Clipper.prototype.IsMaxima=function(t,r){return null!==t&&t.Top.Y===r&&null===t.NextInLML},i.Clipper.prototype.IsIntermediate=function(t,r){return t.Top.Y===r&&null!==t.NextInLML},i.Clipper.prototype.GetMaximaPair=function(t){return i.IntPoint.op_Equality(t.Next.Top,t.Top)&&null===t.Next.NextInLML?t.Next:i.IntPoint.op_Equality(t.Prev.Top,t.Top)&&null===t.Prev.NextInLML?t.Prev:null},i.Clipper.prototype.GetMaximaPairEx=function(t){var r=this.GetMaximaPair(t);return null===r||r.OutIdx===i.ClipperBase.Skip||r.NextInAEL===r.PrevInAEL&&!i.ClipperBase.IsHorizontal(r)?null:r},i.Clipper.prototype.ProcessIntersections=function(t){if(null===this.m_ActiveEdges)return!0;try{if(this.BuildIntersectList(t),0===this.m_IntersectList.length)return!0;if(1!==this.m_IntersectList.length&&!this.FixupIntersectionOrder())return!1;this.ProcessIntersectList()}catch(t){this.m_SortedEdges=null,this.m_IntersectList.length=0,i.Error("ProcessIntersections error")}return this.m_SortedEdges=null,!0},i.Clipper.prototype.BuildIntersectList=function(t){if(null!==this.m_ActiveEdges){var r=this.m_ActiveEdges;for(this.m_SortedEdges=r;null!==r;)r.PrevInSEL=r.PrevInAEL,r.NextInSEL=r.NextInAEL,r.Curr.X=i.Clipper.TopX(r,t),r=r.NextInAEL;for(var o=!0;o&&null!==this.m_SortedEdges;){for(o=!1,r=this.m_SortedEdges;null!==r.NextInSEL;){var a=r.NextInSEL,l=new i.IntPoint0;if(r.Curr.X>a.Curr.X){this.IntersectPoint(r,a,l),l.Y<t&&(l=new i.IntPoint2(i.Clipper.TopX(r,t),t));var u=new i.IntersectNode;u.Edge1=r,u.Edge2=a,u.Pt.X=l.X,u.Pt.Y=l.Y,i.use_xyz&&(u.Pt.Z=l.Z),this.m_IntersectList.push(u),this.SwapPositionsInSEL(r,a),o=!0}else r=a}if(null===r.PrevInSEL)break;r.PrevInSEL.NextInSEL=null}this.m_SortedEdges=null}},i.Clipper.prototype.EdgesAdjacent=function(t){return t.Edge1.NextInSEL===t.Edge2||t.Edge1.PrevInSEL===t.Edge2},i.Clipper.IntersectNodeSort=function(t,r){return r.Pt.Y-t.Pt.Y},i.Clipper.prototype.FixupIntersectionOrder=function(){this.m_IntersectList.sort(this.m_IntersectNodeComparer),this.CopyAELToSEL();for(var t=this.m_IntersectList.length,r=0;r<t;r++){if(!this.EdgesAdjacent(this.m_IntersectList[r])){for(var i=r+1;i<t&&!this.EdgesAdjacent(this.m_IntersectList[i]);)i++;if(i===t)return!1;var o=this.m_IntersectList[r];this.m_IntersectList[r]=this.m_IntersectList[i],this.m_IntersectList[i]=o}this.SwapPositionsInSEL(this.m_IntersectList[r].Edge1,this.m_IntersectList[r].Edge2)}return!0},i.Clipper.prototype.ProcessIntersectList=function(){for(var t=0,r=this.m_IntersectList.length;t<r;t++){var i=this.m_IntersectList[t];this.IntersectEdges(i.Edge1,i.Edge2,i.Pt),this.SwapPositionsInAEL(i.Edge1,i.Edge2)}this.m_IntersectList.length=0};u.msie?i.Clipper.Round=function R1(t){return t<0?Math.ceil(t-.5):Math.round(t)}:u.chromium?i.Clipper.Round=function R3(t){return t<0?-Math.round(Math.abs(t)):Math.round(t)}:u.safari?i.Clipper.Round=function R4(t){return t<0?(t-=.5)<-2147483648?Math.ceil(t):0|t:(t+=.5)>2147483647?Math.floor(t):0|t}:i.Clipper.Round=function R2(t){return t<0?Math.ceil(t-.5):Math.floor(t+.5)},i.Clipper.TopX=function(t,r){return r===t.Top.Y?t.Top.X:t.Bot.X+i.Clipper.Round(t.Dx*(r-t.Bot.Y))},i.Clipper.prototype.IntersectPoint=function(t,r,o){var a,l;if(o.X=0,o.Y=0,t.Dx===r.Dx)return o.Y=t.Curr.Y,void(o.X=i.Clipper.TopX(t,o.Y));if(0===t.Delta.X)o.X=t.Bot.X,i.ClipperBase.IsHorizontal(r)?o.Y=r.Bot.Y:(l=r.Bot.Y-r.Bot.X/r.Dx,o.Y=i.Clipper.Round(o.X/r.Dx+l));else if(0===r.Delta.X)o.X=r.Bot.X,i.ClipperBase.IsHorizontal(t)?o.Y=t.Bot.Y:(a=t.Bot.Y-t.Bot.X/t.Dx,o.Y=i.Clipper.Round(o.X/t.Dx+a));else{a=t.Bot.X-t.Bot.Y*t.Dx;var u=((l=r.Bot.X-r.Bot.Y*r.Dx)-a)/(t.Dx-r.Dx);o.Y=i.Clipper.Round(u),Math.abs(t.Dx)<Math.abs(r.Dx)?o.X=i.Clipper.Round(t.Dx*u+a):o.X=i.Clipper.Round(r.Dx*u+l)}if(o.Y<t.Top.Y||o.Y<r.Top.Y){if(t.Top.Y>r.Top.Y)return o.Y=t.Top.Y,o.X=i.Clipper.TopX(r,t.Top.Y),o.X<t.Top.X;o.Y=r.Top.Y,Math.abs(t.Dx)<Math.abs(r.Dx)?o.X=i.Clipper.TopX(t,o.Y):o.X=i.Clipper.TopX(r,o.Y)}o.Y>t.Curr.Y&&(o.Y=t.Curr.Y,Math.abs(t.Dx)>Math.abs(r.Dx)?o.X=i.Clipper.TopX(r,o.Y):o.X=i.Clipper.TopX(t,o.Y))},i.Clipper.prototype.ProcessEdgesAtTopOfScanbeam=function(t){for(var r=this.m_ActiveEdges;null!==r;){var o=this.IsMaxima(r,t);if(o){var a=this.GetMaximaPairEx(r);o=null===a||!i.ClipperBase.IsHorizontal(a)}if(o){this.StrictlySimple&&this.InsertMaxima(r.Top.X);var l=r.PrevInAEL;this.DoMaxima(r),r=null===l?this.m_ActiveEdges:l.NextInAEL}else{if(this.IsIntermediate(r,t)&&i.ClipperBase.IsHorizontal(r.NextInLML)?((r=this.UpdateEdgeIntoAEL(r)).OutIdx>=0&&this.AddOutPt(r,r.Bot),this.AddEdgeToSEL(r)):(r.Curr.X=i.Clipper.TopX(r,t),r.Curr.Y=t),i.use_xyz&&(r.Top.Y===t?r.Curr.Z=r.Top.Z:r.Bot.Y===t?r.Curr.Z=r.Bot.Z:r.Curr.Z=0),this.StrictlySimple){l=r.PrevInAEL;if(r.OutIdx>=0&&0!==r.WindDelta&&null!==l&&l.OutIdx>=0&&l.Curr.X===r.Curr.X&&0!==l.WindDelta){var u=new i.IntPoint1(r.Curr);i.use_xyz&&this.SetZ(u,l,r);var c=this.AddOutPt(l,u),h=this.AddOutPt(r,u);this.AddJoin(c,h,u)}}r=r.NextInAEL}}for(this.ProcessHorizontals(),this.m_Maxima=null,r=this.m_ActiveEdges;null!==r;){if(this.IsIntermediate(r,t)){c=null;r.OutIdx>=0&&(c=this.AddOutPt(r,r.Top));l=(r=this.UpdateEdgeIntoAEL(r)).PrevInAEL;var p=r.NextInAEL;if(null!==l&&l.Curr.X===r.Bot.X&&l.Curr.Y===r.Bot.Y&&null!==c&&l.OutIdx>=0&&l.Curr.Y===l.Top.Y&&i.ClipperBase.SlopesEqual5(r.Curr,r.Top,l.Curr,l.Top,this.m_UseFullRange)&&0!==r.WindDelta&&0!==l.WindDelta){h=this.AddOutPt(ePrev2,r.Bot);this.AddJoin(c,h,r.Top)}else if(null!==p&&p.Curr.X===r.Bot.X&&p.Curr.Y===r.Bot.Y&&null!==c&&p.OutIdx>=0&&p.Curr.Y===p.Top.Y&&i.ClipperBase.SlopesEqual5(r.Curr,r.Top,p.Curr,p.Top,this.m_UseFullRange)&&0!==r.WindDelta&&0!==p.WindDelta){h=this.AddOutPt(p,r.Bot);this.AddJoin(c,h,r.Top)}}r=r.NextInAEL}},i.Clipper.prototype.DoMaxima=function(t){var r=this.GetMaximaPairEx(t);if(null===r)return t.OutIdx>=0&&this.AddOutPt(t,t.Top),void this.DeleteFromAEL(t);for(var o=t.NextInAEL;null!==o&&o!==r;)this.IntersectEdges(t,o,t.Top),this.SwapPositionsInAEL(t,o),o=t.NextInAEL;-1===t.OutIdx&&-1===r.OutIdx?(this.DeleteFromAEL(t),this.DeleteFromAEL(r)):t.OutIdx>=0&&r.OutIdx>=0?(t.OutIdx>=0&&this.AddLocalMaxPoly(t,r,t.Top),this.DeleteFromAEL(t),this.DeleteFromAEL(r)):i.use_lines&&0===t.WindDelta?(t.OutIdx>=0&&(this.AddOutPt(t,t.Top),t.OutIdx=i.ClipperBase.Unassigned),this.DeleteFromAEL(t),r.OutIdx>=0&&(this.AddOutPt(r,t.Top),r.OutIdx=i.ClipperBase.Unassigned),this.DeleteFromAEL(r)):i.Error("DoMaxima error")},i.Clipper.ReversePaths=function(t){for(var r=0,i=t.length;r<i;r++)t[r].reverse()},i.Clipper.Orientation=function(t){return i.Clipper.Area(t)>=0},i.Clipper.prototype.PointCount=function(t){if(null===t)return 0;var r=0,i=t;do{r++,i=i.Next}while(i!==t);return r},i.Clipper.prototype.BuildResult=function(t){i.Clear(t);for(var r=0,o=this.m_PolyOuts.length;r<o;r++){var a=this.m_PolyOuts[r];if(null!==a.Pts){var l=a.Pts.Prev,u=this.PointCount(l);if(!(u<2)){for(var c=new Array(u),h=0;h<u;h++)c[h]=l.Pt,l=l.Prev;t.push(c)}}}},i.Clipper.prototype.BuildResult2=function(t){t.Clear();for(var r=0,o=this.m_PolyOuts.length;r<o;r++){var a=this.m_PolyOuts[r],l=this.PointCount(a.Pts);if(!(a.IsOpen&&l<2||!a.IsOpen&&l<3)){this.FixHoleLinkage(a);var u=new i.PolyNode;t.m_AllPolys.push(u),a.PolyNode=u,u.m_polygon.length=l;for(var c=a.Pts.Prev,h=0;h<l;h++)u.m_polygon[h]=c.Pt,c=c.Prev}}for(r=0,o=this.m_PolyOuts.length;r<o;r++){null!==(a=this.m_PolyOuts[r]).PolyNode&&(a.IsOpen?(a.PolyNode.IsOpen=!0,t.AddChild(a.PolyNode)):null!==a.FirstLeft&&null!==a.FirstLeft.PolyNode?a.FirstLeft.PolyNode.AddChild(a.PolyNode):t.AddChild(a.PolyNode))}},i.Clipper.prototype.FixupOutPolyline=function(t){for(var r=t.Pts,o=r.Prev;r!==o;)if(r=r.Next,i.IntPoint.op_Equality(r.Pt,r.Prev.Pt)){r===o&&(o=r.Prev);var a=r.Prev;a.Next=r.Next,r.Next.Prev=a,r=a}r===r.Prev&&(t.Pts=null)},i.Clipper.prototype.FixupOutPolygon=function(t){var r=null;t.BottomPt=null;for(var o=t.Pts,a=this.PreserveCollinear||this.StrictlySimple;;){if(o.Prev===o||o.Prev===o.Next)return void(t.Pts=null);if(i.IntPoint.op_Equality(o.Pt,o.Next.Pt)||i.IntPoint.op_Equality(o.Pt,o.Prev.Pt)||i.ClipperBase.SlopesEqual4(o.Prev.Pt,o.Pt,o.Next.Pt,this.m_UseFullRange)&&(!a||!this.Pt2IsBetweenPt1AndPt3(o.Prev.Pt,o.Pt,o.Next.Pt)))r=null,o.Prev.Next=o.Next,o.Next.Prev=o.Prev,o=o.Prev;else{if(o===r)break;null===r&&(r=o),o=o.Next}}t.Pts=o},i.Clipper.prototype.DupOutPt=function(t,r){var o=new i.OutPt;return o.Pt.X=t.Pt.X,o.Pt.Y=t.Pt.Y,i.use_xyz&&(o.Pt.Z=t.Pt.Z),o.Idx=t.Idx,r?(o.Next=t.Next,o.Prev=t,t.Next.Prev=o,t.Next=o):(o.Prev=t.Prev,o.Next=t,t.Prev.Next=o,t.Prev=o),o},i.Clipper.prototype.GetOverlap=function(t,r,i,o,a){return t<r?i<o?(a.Left=Math.max(t,i),a.Right=Math.min(r,o)):(a.Left=Math.max(t,o),a.Right=Math.min(r,i)):i<o?(a.Left=Math.max(r,i),a.Right=Math.min(t,o)):(a.Left=Math.max(r,o),a.Right=Math.min(t,i)),a.Left<a.Right},i.Clipper.prototype.JoinHorz=function(t,r,o,a,l,u){var c=t.Pt.X>r.Pt.X?i.Direction.dRightToLeft:i.Direction.dLeftToRight,h=o.Pt.X>a.Pt.X?i.Direction.dRightToLeft:i.Direction.dLeftToRight;if(c===h)return!1;if(c===i.Direction.dLeftToRight){for(;t.Next.Pt.X<=l.X&&t.Next.Pt.X>=t.Pt.X&&t.Next.Pt.Y===l.Y;)t=t.Next;u&&t.Pt.X!==l.X&&(t=t.Next),r=this.DupOutPt(t,!u),i.IntPoint.op_Inequality(r.Pt,l)&&((t=r).Pt.X=l.X,t.Pt.Y=l.Y,i.use_xyz&&(t.Pt.Z=l.Z),r=this.DupOutPt(t,!u))}else{for(;t.Next.Pt.X>=l.X&&t.Next.Pt.X<=t.Pt.X&&t.Next.Pt.Y===l.Y;)t=t.Next;u||t.Pt.X===l.X||(t=t.Next),r=this.DupOutPt(t,u),i.IntPoint.op_Inequality(r.Pt,l)&&((t=r).Pt.X=l.X,t.Pt.Y=l.Y,i.use_xyz&&(t.Pt.Z=l.Z),r=this.DupOutPt(t,u))}if(h===i.Direction.dLeftToRight){for(;o.Next.Pt.X<=l.X&&o.Next.Pt.X>=o.Pt.X&&o.Next.Pt.Y===l.Y;)o=o.Next;u&&o.Pt.X!==l.X&&(o=o.Next),a=this.DupOutPt(o,!u),i.IntPoint.op_Inequality(a.Pt,l)&&((o=a).Pt.X=l.X,o.Pt.Y=l.Y,i.use_xyz&&(o.Pt.Z=l.Z),a=this.DupOutPt(o,!u))}else{for(;o.Next.Pt.X>=l.X&&o.Next.Pt.X<=o.Pt.X&&o.Next.Pt.Y===l.Y;)o=o.Next;u||o.Pt.X===l.X||(o=o.Next),a=this.DupOutPt(o,u),i.IntPoint.op_Inequality(a.Pt,l)&&((o=a).Pt.X=l.X,o.Pt.Y=l.Y,i.use_xyz&&(o.Pt.Z=l.Z),a=this.DupOutPt(o,u))}return c===i.Direction.dLeftToRight===u?(t.Prev=o,o.Next=t,r.Next=a,a.Prev=r):(t.Next=o,o.Prev=t,r.Prev=a,a.Next=r),!0},i.Clipper.prototype.JoinPoints=function(t,r,o){var a=t.OutPt1,l=new i.OutPt,u=t.OutPt2,c=new i.OutPt,h=t.OutPt1.Pt.Y===t.OffPt.Y;if(h&&i.IntPoint.op_Equality(t.OffPt,t.OutPt1.Pt)&&i.IntPoint.op_Equality(t.OffPt,t.OutPt2.Pt)){if(r!==o)return!1;for(l=t.OutPt1.Next;l!==a&&i.IntPoint.op_Equality(l.Pt,t.OffPt);)l=l.Next;var p=l.Pt.Y>t.OffPt.Y;for(c=t.OutPt2.Next;c!==u&&i.IntPoint.op_Equality(c.Pt,t.OffPt);)c=c.Next;return p!==c.Pt.Y>t.OffPt.Y&&(p?(l=this.DupOutPt(a,!1),c=this.DupOutPt(u,!0),a.Prev=u,u.Next=a,l.Next=c,c.Prev=l,t.OutPt1=a,t.OutPt2=l,!0):(l=this.DupOutPt(a,!0),c=this.DupOutPt(u,!1),a.Next=u,u.Prev=a,l.Prev=c,c.Next=l,t.OutPt1=a,t.OutPt2=l,!0))}if(h){for(l=a;a.Prev.Pt.Y===a.Pt.Y&&a.Prev!==l&&a.Prev!==u;)a=a.Prev;for(;l.Next.Pt.Y===l.Pt.Y&&l.Next!==a&&l.Next!==u;)l=l.Next;if(l.Next===a||l.Next===u)return!1;for(c=u;u.Prev.Pt.Y===u.Pt.Y&&u.Prev!==c&&u.Prev!==l;)u=u.Prev;for(;c.Next.Pt.Y===c.Pt.Y&&c.Next!==u&&c.Next!==a;)c=c.Next;if(c.Next===u||c.Next===a)return!1;var y={Left:null,Right:null};if(!this.GetOverlap(a.Pt.X,l.Pt.X,u.Pt.X,c.Pt.X,y))return!1;var d,v=y.Left,m=y.Right,P=new i.IntPoint0;return a.Pt.X>=v&&a.Pt.X<=m?(P.X=a.Pt.X,P.Y=a.Pt.Y,i.use_xyz&&(P.Z=a.Pt.Z),d=a.Pt.X>l.Pt.X):u.Pt.X>=v&&u.Pt.X<=m?(P.X=u.Pt.X,P.Y=u.Pt.Y,i.use_xyz&&(P.Z=u.Pt.Z),d=u.Pt.X>c.Pt.X):l.Pt.X>=v&&l.Pt.X<=m?(P.X=l.Pt.X,P.Y=l.Pt.Y,i.use_xyz&&(P.Z=l.Pt.Z),d=l.Pt.X>a.Pt.X):(P.X=c.Pt.X,P.Y=c.Pt.Y,i.use_xyz&&(P.Z=c.Pt.Z),d=c.Pt.X>u.Pt.X),t.OutPt1=a,t.OutPt2=u,this.JoinHorz(a,l,u,c,P,d)}for(l=a.Next;i.IntPoint.op_Equality(l.Pt,a.Pt)&&l!==a;)l=l.Next;var g=l.Pt.Y>a.Pt.Y||!i.ClipperBase.SlopesEqual4(a.Pt,l.Pt,t.OffPt,this.m_UseFullRange);if(g){for(l=a.Prev;i.IntPoint.op_Equality(l.Pt,a.Pt)&&l!==a;)l=l.Prev;if(l.Pt.Y>a.Pt.Y||!i.ClipperBase.SlopesEqual4(a.Pt,l.Pt,t.OffPt,this.m_UseFullRange))return!1}for(c=u.Next;i.IntPoint.op_Equality(c.Pt,u.Pt)&&c!==u;)c=c.Next;var _=c.Pt.Y>u.Pt.Y||!i.ClipperBase.SlopesEqual4(u.Pt,c.Pt,t.OffPt,this.m_UseFullRange);if(_){for(c=u.Prev;i.IntPoint.op_Equality(c.Pt,u.Pt)&&c!==u;)c=c.Prev;if(c.Pt.Y>u.Pt.Y||!i.ClipperBase.SlopesEqual4(u.Pt,c.Pt,t.OffPt,this.m_UseFullRange))return!1}return l!==a&&c!==u&&l!==c&&(r!==o||g!==_)&&(g?(l=this.DupOutPt(a,!1),c=this.DupOutPt(u,!0),a.Prev=u,u.Next=a,l.Next=c,c.Prev=l,t.OutPt1=a,t.OutPt2=l,!0):(l=this.DupOutPt(a,!0),c=this.DupOutPt(u,!1),a.Next=u,u.Prev=a,l.Prev=c,c.Next=l,t.OutPt1=a,t.OutPt2=l,!0))},i.Clipper.GetBounds=function(t){for(var r=0,o=t.length;r<o&&0===t[r].length;)r++;if(r===o)return new i.IntRect(0,0,0,0);var a=new i.IntRect;for(a.left=t[r][0].X,a.right=a.left,a.top=t[r][0].Y,a.bottom=a.top;r<o;r++)for(var l=0,u=t[r].length;l<u;l++)t[r][l].X<a.left?a.left=t[r][l].X:t[r][l].X>a.right&&(a.right=t[r][l].X),t[r][l].Y<a.top?a.top=t[r][l].Y:t[r][l].Y>a.bottom&&(a.bottom=t[r][l].Y);return a},i.Clipper.prototype.GetBounds2=function(t){var r=t,o=new i.IntRect;for(o.left=t.Pt.X,o.right=t.Pt.X,o.top=t.Pt.Y,o.bottom=t.Pt.Y,t=t.Next;t!==r;)t.Pt.X<o.left&&(o.left=t.Pt.X),t.Pt.X>o.right&&(o.right=t.Pt.X),t.Pt.Y<o.top&&(o.top=t.Pt.Y),t.Pt.Y>o.bottom&&(o.bottom=t.Pt.Y),t=t.Next;return o},i.Clipper.PointInPolygon=function(t,r){var i=0,o=r.length;if(o<3)return 0;for(var a=r[0],l=1;l<=o;++l){var u=l===o?r[0]:r[l];if(u.Y===t.Y&&(u.X===t.X||a.Y===t.Y&&u.X>t.X==a.X<t.X))return-1;if(a.Y<t.Y!=u.Y<t.Y)if(a.X>=t.X)if(u.X>t.X)i=1-i;else{if(0===(c=(a.X-t.X)*(u.Y-t.Y)-(u.X-t.X)*(a.Y-t.Y)))return-1;c>0==u.Y>a.Y&&(i=1-i)}else if(u.X>t.X){var c;if(0===(c=(a.X-t.X)*(u.Y-t.Y)-(u.X-t.X)*(a.Y-t.Y)))return-1;c>0==u.Y>a.Y&&(i=1-i)}a=u}return i},i.Clipper.prototype.PointInPolygon=function(t,r){var i=0,o=r,a=t.X,l=t.Y,u=r.Pt.X,c=r.Pt.Y;do{var h=(r=r.Next).Pt.X,p=r.Pt.Y;if(p===l&&(h===a||c===l&&h>a==u<a))return-1;if(c<l!=p<l)if(u>=a)if(h>a)i=1-i;else{if(0===(y=(u-a)*(p-l)-(h-a)*(c-l)))return-1;y>0==p>c&&(i=1-i)}else if(h>a){var y;if(0===(y=(u-a)*(p-l)-(h-a)*(c-l)))return-1;y>0==p>c&&(i=1-i)}u=h,c=p}while(o!==r);return i},i.Clipper.prototype.Poly2ContainsPoly1=function(t,r){var i=t;do{var o=this.PointInPolygon(i.Pt,r);if(o>=0)return o>0;i=i.Next}while(i!==t);return!0},i.Clipper.prototype.FixupFirstLefts1=function(t,r){for(var o,a,l=0,u=this.m_PolyOuts.length;l<u;l++)o=this.m_PolyOuts[l],a=i.Clipper.ParseFirstLeft(o.FirstLeft),null!==o.Pts&&a===t&&this.Poly2ContainsPoly1(o.Pts,r.Pts)&&(o.FirstLeft=r)},i.Clipper.prototype.FixupFirstLefts2=function(t,r){for(var o,a,l=r.FirstLeft,u=0,c=this.m_PolyOuts.length;u<c;u++)null!==(o=this.m_PolyOuts[u]).Pts&&o!==r&&o!==t&&((a=i.Clipper.ParseFirstLeft(o.FirstLeft))!==l&&a!==t&&a!==r||(this.Poly2ContainsPoly1(o.Pts,t.Pts)?o.FirstLeft=t:this.Poly2ContainsPoly1(o.Pts,r.Pts)?o.FirstLeft=r:o.FirstLeft!==t&&o.FirstLeft!==r||(o.FirstLeft=l)))},i.Clipper.prototype.FixupFirstLefts3=function(t,r){for(var o,a,l=0,u=this.m_PolyOuts.length;l<u;l++)o=this.m_PolyOuts[l],a=i.Clipper.ParseFirstLeft(o.FirstLeft),null!==o.Pts&&a===t&&(o.FirstLeft=r)},i.Clipper.ParseFirstLeft=function(t){for(;null!==t&&null===t.Pts;)t=t.FirstLeft;return t},i.Clipper.prototype.JoinCommonEdges=function(){for(var t=0,r=this.m_Joins.length;t<r;t++){var i,o=this.m_Joins[t],a=this.GetOutRec(o.OutPt1.Idx),l=this.GetOutRec(o.OutPt2.Idx);if(null!==a.Pts&&null!==l.Pts)if(!a.IsOpen&&!l.IsOpen)i=a===l?a:this.OutRec1RightOfOutRec2(a,l)?l:this.OutRec1RightOfOutRec2(l,a)?a:this.GetLowermostRec(a,l),this.JoinPoints(o,a,l)&&(a===l?(a.Pts=o.OutPt1,a.BottomPt=null,(l=this.CreateOutRec()).Pts=o.OutPt2,this.UpdateOutPtIdxs(l),this.Poly2ContainsPoly1(l.Pts,a.Pts)?(l.IsHole=!a.IsHole,l.FirstLeft=a,this.m_UsingPolyTree&&this.FixupFirstLefts2(l,a),(l.IsHole^this.ReverseSolution)==this.Area$1(l)>0&&this.ReversePolyPtLinks(l.Pts)):this.Poly2ContainsPoly1(a.Pts,l.Pts)?(l.IsHole=a.IsHole,a.IsHole=!l.IsHole,l.FirstLeft=a.FirstLeft,a.FirstLeft=l,this.m_UsingPolyTree&&this.FixupFirstLefts2(a,l),(a.IsHole^this.ReverseSolution)==this.Area$1(a)>0&&this.ReversePolyPtLinks(a.Pts)):(l.IsHole=a.IsHole,l.FirstLeft=a.FirstLeft,this.m_UsingPolyTree&&this.FixupFirstLefts1(a,l))):(l.Pts=null,l.BottomPt=null,l.Idx=a.Idx,a.IsHole=i.IsHole,i===l&&(a.FirstLeft=l.FirstLeft),l.FirstLeft=a,this.m_UsingPolyTree&&this.FixupFirstLefts3(l,a)))}},i.Clipper.prototype.UpdateOutPtIdxs=function(t){var r=t.Pts;do{r.Idx=t.Idx,r=r.Prev}while(r!==t.Pts)},i.Clipper.prototype.DoSimplePolygons=function(){for(var t=0;t<this.m_PolyOuts.length;){var r=this.m_PolyOuts[t++],o=r.Pts;if(null!==o&&!r.IsOpen)do{for(var a=o.Next;a!==r.Pts;){if(i.IntPoint.op_Equality(o.Pt,a.Pt)&&a.Next!==o&&a.Prev!==o){var l=o.Prev,u=a.Prev;o.Prev=u,u.Next=o,a.Prev=l,l.Next=a,r.Pts=o;var c=this.CreateOutRec();c.Pts=a,this.UpdateOutPtIdxs(c),this.Poly2ContainsPoly1(c.Pts,r.Pts)?(c.IsHole=!r.IsHole,c.FirstLeft=r,this.m_UsingPolyTree&&this.FixupFirstLefts2(c,r)):this.Poly2ContainsPoly1(r.Pts,c.Pts)?(c.IsHole=r.IsHole,r.IsHole=!c.IsHole,c.FirstLeft=r.FirstLeft,r.FirstLeft=c,this.m_UsingPolyTree&&this.FixupFirstLefts2(r,c)):(c.IsHole=r.IsHole,c.FirstLeft=r.FirstLeft,this.m_UsingPolyTree&&this.FixupFirstLefts1(r,c)),a=o}a=a.Next}o=o.Next}while(o!==r.Pts)}},i.Clipper.Area=function(t){if(!Array.isArray(t))return 0;var r=t.length;if(r<3)return 0;for(var i=0,o=0,a=r-1;o<r;++o)i+=(t[a].X+t[o].X)*(t[a].Y-t[o].Y),a=o;return.5*-i},i.Clipper.prototype.Area=function(t){var r=t;if(null===t)return 0;var i=0;do{i+=(t.Prev.Pt.X+t.Pt.X)*(t.Prev.Pt.Y-t.Pt.Y),t=t.Next}while(t!==r);return.5*i},i.Clipper.prototype.Area$1=function(t){return this.Area(t.Pts)},i.Clipper.SimplifyPolygon=function(t,r){var o=new Array,a=new i.Clipper(0);return a.StrictlySimple=!0,a.AddPath(t,i.PolyType.ptSubject,!0),a.Execute(i.ClipType.ctUnion,o,r,r),o},i.Clipper.SimplifyPolygons=function(t,r){void 0===r&&(r=i.PolyFillType.pftEvenOdd);var o=new Array,a=new i.Clipper(0);return a.StrictlySimple=!0,a.AddPaths(t,i.PolyType.ptSubject,!0),a.Execute(i.ClipType.ctUnion,o,r,r),o},i.Clipper.DistanceSqrd=function(t,r){var i=t.X-r.X,o=t.Y-r.Y;return i*i+o*o},i.Clipper.DistanceFromLineSqrd=function(t,r,i){var o=r.Y-i.Y,a=i.X-r.X,l=o*r.X+a*r.Y;return(l=o*t.X+a*t.Y-l)*l/(o*o+a*a)},i.Clipper.SlopesNearCollinear=function(t,r,o,a){return Math.abs(t.X-r.X)>Math.abs(t.Y-r.Y)?t.X>r.X==t.X<o.X?i.Clipper.DistanceFromLineSqrd(t,r,o)<a:r.X>t.X==r.X<o.X?i.Clipper.DistanceFromLineSqrd(r,t,o)<a:i.Clipper.DistanceFromLineSqrd(o,t,r)<a:t.Y>r.Y==t.Y<o.Y?i.Clipper.DistanceFromLineSqrd(t,r,o)<a:r.Y>t.Y==r.Y<o.Y?i.Clipper.DistanceFromLineSqrd(r,t,o)<a:i.Clipper.DistanceFromLineSqrd(o,t,r)<a},i.Clipper.PointsAreClose=function(t,r,i){var o=t.X-r.X,a=t.Y-r.Y;return o*o+a*a<=i},i.Clipper.ExcludeOp=function(t){var r=t.Prev;return r.Next=t.Next,t.Next.Prev=r,r.Idx=0,r},i.Clipper.CleanPolygon=function(t,r){void 0===r&&(r=1.415);var o=t.length;if(0===o)return new Array;for(var a=new Array(o),l=0;l<o;++l)a[l]=new i.OutPt;for(l=0;l<o;++l)a[l].Pt=t[l],a[l].Next=a[(l+1)%o],a[l].Next.Prev=a[l],a[l].Idx=0;for(var u=r*r,c=a[0];0===c.Idx&&c.Next!==c.Prev;)i.Clipper.PointsAreClose(c.Pt,c.Prev.Pt,u)?(c=i.Clipper.ExcludeOp(c),o--):i.Clipper.PointsAreClose(c.Prev.Pt,c.Next.Pt,u)?(i.Clipper.ExcludeOp(c.Next),c=i.Clipper.ExcludeOp(c),o-=2):i.Clipper.SlopesNearCollinear(c.Prev.Pt,c.Pt,c.Next.Pt,u)?(c=i.Clipper.ExcludeOp(c),o--):(c.Idx=1,c=c.Next);o<3&&(o=0);var h=new Array(o);for(l=0;l<o;++l)h[l]=new i.IntPoint1(c.Pt),c=c.Next;return a=null,h},i.Clipper.CleanPolygons=function(t,r){for(var o=new Array(t.length),a=0,l=t.length;a<l;a++)o[a]=i.Clipper.CleanPolygon(t[a],r);return o},i.Clipper.Minkowski=function(t,r,o,a){var l=a?1:0,u=t.length,c=r.length,h=new Array;if(o)for(var p=0;p<c;p++){for(var y=new Array(u),d=0,v=t.length,m=t[d];d<v;m=t[++d])y[d]=new i.IntPoint2(r[p].X+m.X,r[p].Y+m.Y);h.push(y)}else for(p=0;p<c;p++){for(y=new Array(u),d=0,v=t.length,m=t[d];d<v;m=t[++d])y[d]=new i.IntPoint2(r[p].X-m.X,r[p].Y-m.Y);h.push(y)}var P=new Array;for(p=0;p<c-1+l;p++)for(d=0;d<u;d++){var g=new Array;g.push(h[p%c][d%u]),g.push(h[(p+1)%c][d%u]),g.push(h[(p+1)%c][(d+1)%u]),g.push(h[p%c][(d+1)%u]),i.Clipper.Orientation(g)||g.reverse(),P.push(g)}return P},i.Clipper.MinkowskiSum=function(t,r,o){if(r[0]instanceof Array){p=r;for(var a=new i.Paths,l=(c=new i.Clipper,0);l<p.length;++l){var u=i.Clipper.Minkowski(t,p[l],!0,o);if(c.AddPaths(u,i.PolyType.ptSubject,!0),o){h=i.Clipper.TranslatePath(p[l],t[0]);c.AddPath(h,i.PolyType.ptClip,!0)}}return c.Execute(i.ClipType.ctUnion,a,i.PolyFillType.pftNonZero,i.PolyFillType.pftNonZero),a}var c,h=r,p=i.Clipper.Minkowski(t,h,!0,o);return(c=new i.Clipper).AddPaths(p,i.PolyType.ptSubject,!0),c.Execute(i.ClipType.ctUnion,p,i.PolyFillType.pftNonZero,i.PolyFillType.pftNonZero),p},i.Clipper.TranslatePath=function(t,r){for(var o=new i.Path,a=0;a<t.length;a++)o.push(new i.IntPoint2(t[a].X+r.X,t[a].Y+r.Y));return o},i.Clipper.MinkowskiDiff=function(t,r){var o=i.Clipper.Minkowski(t,r,!1,!0),a=new i.Clipper;return a.AddPaths(o,i.PolyType.ptSubject,!0),a.Execute(i.ClipType.ctUnion,o,i.PolyFillType.pftNonZero,i.PolyFillType.pftNonZero),o},i.Clipper.PolyTreeToPaths=function(t){var r=new Array;return i.Clipper.AddPolyNodeToPaths(t,i.Clipper.NodeType.ntAny,r),r},i.Clipper.AddPolyNodeToPaths=function(t,r,o){var a=!0;switch(r){case i.Clipper.NodeType.ntOpen:return;case i.Clipper.NodeType.ntClosed:a=!t.IsOpen}t.m_polygon.length>0&&a&&o.push(t.m_polygon);for(var l=0,u=t.Childs(),c=u.length,h=u[l];l<c;h=u[++l])i.Clipper.AddPolyNodeToPaths(h,r,o)},i.Clipper.OpenPathsFromPolyTree=function(t){for(var r=new i.Paths,o=0,a=t.ChildCount();o<a;o++)t.Childs()[o].IsOpen&&r.push(t.Childs()[o].m_polygon);return r},i.Clipper.ClosedPathsFromPolyTree=function(t){var r=new i.Paths;return i.Clipper.AddPolyNodeToPaths(t,i.Clipper.NodeType.ntClosed,r),r},m(i.Clipper,i.ClipperBase),i.Clipper.NodeType={ntAny:0,ntOpen:1,ntClosed:2},i.ClipperOffset=function(t,r){void 0===t&&(t=2),void 0===r&&(r=i.ClipperOffset.def_arc_tolerance),this.m_destPolys=new i.Paths,this.m_srcPoly=new i.Path,this.m_destPoly=new i.Path,this.m_normals=new Array,this.m_delta=0,this.m_sinA=0,this.m_sin=0,this.m_cos=0,this.m_miterLim=0,this.m_StepsPerRad=0,this.m_lowest=new i.IntPoint0,this.m_polyNodes=new i.PolyNode,this.MiterLimit=t,this.ArcTolerance=r,this.m_lowest.X=-1},i.ClipperOffset.two_pi=6.28318530717959,i.ClipperOffset.def_arc_tolerance=.25,i.ClipperOffset.prototype.Clear=function(){i.Clear(this.m_polyNodes.Childs()),this.m_lowest.X=-1},i.ClipperOffset.Round=i.Clipper.Round,i.ClipperOffset.prototype.AddPath=function(t,r,o){var a=t.length-1;if(!(a<0)){var l=new i.PolyNode;if(l.m_jointype=r,l.m_endtype=o,o===i.EndType.etClosedLine||o===i.EndType.etClosedPolygon)for(;a>0&&i.IntPoint.op_Equality(t[0],t[a]);)a--;l.m_polygon.push(t[0]);for(var u=0,c=0,h=1;h<=a;h++)i.IntPoint.op_Inequality(l.m_polygon[u],t[h])&&(u++,l.m_polygon.push(t[h]),(t[h].Y>l.m_polygon[c].Y||t[h].Y===l.m_polygon[c].Y&&t[h].X<l.m_polygon[c].X)&&(c=u));if(!(o===i.EndType.etClosedPolygon&&u<2)&&(this.m_polyNodes.AddChild(l),o===i.EndType.etClosedPolygon))if(this.m_lowest.X<0)this.m_lowest=new i.IntPoint2(this.m_polyNodes.ChildCount()-1,c);else{var p=this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];(l.m_polygon[c].Y>p.Y||l.m_polygon[c].Y===p.Y&&l.m_polygon[c].X<p.X)&&(this.m_lowest=new i.IntPoint2(this.m_polyNodes.ChildCount()-1,c))}}},i.ClipperOffset.prototype.AddPaths=function(t,r,i){for(var o=0,a=t.length;o<a;o++)this.AddPath(t[o],r,i)},i.ClipperOffset.prototype.FixOrientations=function(){if(this.m_lowest.X>=0&&!i.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))for(var t=0;t<this.m_polyNodes.ChildCount();t++){((r=this.m_polyNodes.Childs()[t]).m_endtype===i.EndType.etClosedPolygon||r.m_endtype===i.EndType.etClosedLine&&i.Clipper.Orientation(r.m_polygon))&&r.m_polygon.reverse()}else for(t=0;t<this.m_polyNodes.ChildCount();t++){var r;(r=this.m_polyNodes.Childs()[t]).m_endtype!==i.EndType.etClosedLine||i.Clipper.Orientation(r.m_polygon)||r.m_polygon.reverse()}},i.ClipperOffset.GetUnitNormal=function(t,r){var o=r.X-t.X,a=r.Y-t.Y;if(0===o&&0===a)return new i.DoublePoint2(0,0);var l=1/Math.sqrt(o*o+a*a);return o*=l,a*=l,new i.DoublePoint2(a,-o)},i.ClipperOffset.prototype.DoOffset=function(t){if(this.m_destPolys=new Array,this.m_delta=t,i.ClipperBase.near_zero(t))for(var r=0;r<this.m_polyNodes.ChildCount();r++){(l=this.m_polyNodes.Childs()[r]).m_endtype===i.EndType.etClosedPolygon&&this.m_destPolys.push(l.m_polygon)}else{var o;this.MiterLimit>2?this.m_miterLim=2/(this.MiterLimit*this.MiterLimit):this.m_miterLim=.5,o=this.ArcTolerance<=0?i.ClipperOffset.def_arc_tolerance:this.ArcTolerance>Math.abs(t)*i.ClipperOffset.def_arc_tolerance?Math.abs(t)*i.ClipperOffset.def_arc_tolerance:this.ArcTolerance;var a=3.14159265358979/Math.acos(1-o/Math.abs(t));this.m_sin=Math.sin(i.ClipperOffset.two_pi/a),this.m_cos=Math.cos(i.ClipperOffset.two_pi/a),this.m_StepsPerRad=a/i.ClipperOffset.two_pi,t<0&&(this.m_sin=-this.m_sin);for(r=0;r<this.m_polyNodes.ChildCount();r++){var l=this.m_polyNodes.Childs()[r];this.m_srcPoly=l.m_polygon;var u=this.m_srcPoly.length;if(!(0===u||t<=0&&(u<3||l.m_endtype!==i.EndType.etClosedPolygon)))if(this.m_destPoly=new Array,1!==u){this.m_normals.length=0;for(v=0;v<u-1;v++)this.m_normals.push(i.ClipperOffset.GetUnitNormal(this.m_srcPoly[v],this.m_srcPoly[v+1]));if(l.m_endtype===i.EndType.etClosedLine||l.m_endtype===i.EndType.etClosedPolygon?this.m_normals.push(i.ClipperOffset.GetUnitNormal(this.m_srcPoly[u-1],this.m_srcPoly[0])):this.m_normals.push(new i.DoublePoint1(this.m_normals[u-2])),l.m_endtype===i.EndType.etClosedPolygon){var c=u-1;for(v=0;v<u;v++)c=this.OffsetPoint(v,c,l.m_jointype);this.m_destPolys.push(this.m_destPoly)}else if(l.m_endtype===i.EndType.etClosedLine){for(c=u-1,v=0;v<u;v++)c=this.OffsetPoint(v,c,l.m_jointype);this.m_destPolys.push(this.m_destPoly),this.m_destPoly=new Array;var h=this.m_normals[u-1];for(v=u-1;v>0;v--)this.m_normals[v]=new i.DoublePoint2(-this.m_normals[v-1].X,-this.m_normals[v-1].Y);this.m_normals[0]=new i.DoublePoint2(-h.X,-h.Y),c=0;for(v=u-1;v>=0;v--)c=this.OffsetPoint(v,c,l.m_jointype);this.m_destPolys.push(this.m_destPoly)}else{var p;for(c=0,v=1;v<u-1;++v)c=this.OffsetPoint(v,c,l.m_jointype);if(l.m_endtype===i.EndType.etOpenButt){v=u-1;p=new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[v].X+this.m_normals[v].X*t),i.ClipperOffset.Round(this.m_srcPoly[v].Y+this.m_normals[v].Y*t)),this.m_destPoly.push(p),p=new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[v].X-this.m_normals[v].X*t),i.ClipperOffset.Round(this.m_srcPoly[v].Y-this.m_normals[v].Y*t)),this.m_destPoly.push(p)}else{v=u-1;c=u-2,this.m_sinA=0,this.m_normals[v]=new i.DoublePoint2(-this.m_normals[v].X,-this.m_normals[v].Y),l.m_endtype===i.EndType.etOpenSquare?this.DoSquare(v,c):this.DoRound(v,c)}for(v=u-1;v>0;v--)this.m_normals[v]=new i.DoublePoint2(-this.m_normals[v-1].X,-this.m_normals[v-1].Y);this.m_normals[0]=new i.DoublePoint2(-this.m_normals[1].X,-this.m_normals[1].Y);for(v=(c=u-1)-1;v>0;--v)c=this.OffsetPoint(v,c,l.m_jointype);l.m_endtype===i.EndType.etOpenButt?(p=new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[0].X-this.m_normals[0].X*t),i.ClipperOffset.Round(this.m_srcPoly[0].Y-this.m_normals[0].Y*t)),this.m_destPoly.push(p),p=new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[0].X+this.m_normals[0].X*t),i.ClipperOffset.Round(this.m_srcPoly[0].Y+this.m_normals[0].Y*t)),this.m_destPoly.push(p)):(c=1,this.m_sinA=0,l.m_endtype===i.EndType.etOpenSquare?this.DoSquare(0,1):this.DoRound(0,1)),this.m_destPolys.push(this.m_destPoly)}}else{if(l.m_jointype===i.JoinType.jtRound)for(var y=1,d=0,v=1;v<=a;v++){this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[0].X+y*t),i.ClipperOffset.Round(this.m_srcPoly[0].Y+d*t)));var m=y;y=y*this.m_cos-this.m_sin*d,d=m*this.m_sin+d*this.m_cos}else{y=-1,d=-1;for(var v=0;v<4;++v)this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[0].X+y*t),i.ClipperOffset.Round(this.m_srcPoly[0].Y+d*t))),y<0?y=1:d<0?d=1:y=-1}this.m_destPolys.push(this.m_destPoly)}}}},i.ClipperOffset.prototype.Execute=function(){var t=arguments,r=t[0]instanceof i.PolyTree;if(r){u=t[0],c=t[1];if(u.Clear(),this.FixOrientations(),this.DoOffset(c),(l=new i.Clipper(0)).AddPaths(this.m_destPolys,i.PolyType.ptSubject,!0),c>0)l.Execute(i.ClipType.ctUnion,u,i.PolyFillType.pftPositive,i.PolyFillType.pftPositive);else{p=i.Clipper.GetBounds(this.m_destPolys);if((h=new i.Path).push(new i.IntPoint2(p.left-10,p.bottom+10)),h.push(new i.IntPoint2(p.right+10,p.bottom+10)),h.push(new i.IntPoint2(p.right+10,p.top-10)),h.push(new i.IntPoint2(p.left-10,p.top-10)),l.AddPath(h,i.PolyType.ptSubject,!0),l.ReverseSolution=!0,l.Execute(i.ClipType.ctUnion,u,i.PolyFillType.pftNegative,i.PolyFillType.pftNegative),1===u.ChildCount()&&u.Childs()[0].ChildCount()>0){var o=u.Childs()[0];u.Childs()[0]=o.Childs()[0],u.Childs()[0].m_Parent=u;for(var a=1;a<o.ChildCount();a++)u.AddChild(o.Childs()[a])}else u.Clear()}}else{var l,u=t[0],c=t[1];if(i.Clear(u),this.FixOrientations(),this.DoOffset(c),(l=new i.Clipper(0)).AddPaths(this.m_destPolys,i.PolyType.ptSubject,!0),c>0)l.Execute(i.ClipType.ctUnion,u,i.PolyFillType.pftPositive,i.PolyFillType.pftPositive);else{var h,p=i.Clipper.GetBounds(this.m_destPolys);(h=new i.Path).push(new i.IntPoint2(p.left-10,p.bottom+10)),h.push(new i.IntPoint2(p.right+10,p.bottom+10)),h.push(new i.IntPoint2(p.right+10,p.top-10)),h.push(new i.IntPoint2(p.left-10,p.top-10)),l.AddPath(h,i.PolyType.ptSubject,!0),l.ReverseSolution=!0,l.Execute(i.ClipType.ctUnion,u,i.PolyFillType.pftNegative,i.PolyFillType.pftNegative),u.length>0&&u.splice(0,1)}}},i.ClipperOffset.prototype.OffsetPoint=function(t,r,o){if(this.m_sinA=this.m_normals[r].X*this.m_normals[t].Y-this.m_normals[t].X*this.m_normals[r].Y,Math.abs(this.m_sinA*this.m_delta)<1){if(this.m_normals[r].X*this.m_normals[t].X+this.m_normals[t].Y*this.m_normals[r].Y>0)return this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[r].X*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[r].Y*this.m_delta))),r}else this.m_sinA>1?this.m_sinA=1:this.m_sinA<-1&&(this.m_sinA=-1);if(this.m_sinA*this.m_delta<0)this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[r].X*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[r].Y*this.m_delta))),this.m_destPoly.push(new i.IntPoint1(this.m_srcPoly[t])),this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[t].X*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[t].Y*this.m_delta)));else switch(o){case i.JoinType.jtMiter:var a=this.m_normals[t].X*this.m_normals[r].X+this.m_normals[t].Y*this.m_normals[r].Y+1;a>=this.m_miterLim?this.DoMiter(t,r,a):this.DoSquare(t,r);break;case i.JoinType.jtSquare:this.DoSquare(t,r);break;case i.JoinType.jtRound:this.DoRound(t,r)}return r=t},i.ClipperOffset.prototype.DoSquare=function(t,r){var o=Math.tan(Math.atan2(this.m_sinA,this.m_normals[r].X*this.m_normals[t].X+this.m_normals[r].Y*this.m_normals[t].Y)/4);this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_delta*(this.m_normals[r].X-this.m_normals[r].Y*o)),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_delta*(this.m_normals[r].Y+this.m_normals[r].X*o)))),this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_delta*(this.m_normals[t].X+this.m_normals[t].Y*o)),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_delta*(this.m_normals[t].Y-this.m_normals[t].X*o))))},i.ClipperOffset.prototype.DoMiter=function(t,r,o){var a=this.m_delta/o;this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+(this.m_normals[r].X+this.m_normals[t].X)*a),i.ClipperOffset.Round(this.m_srcPoly[t].Y+(this.m_normals[r].Y+this.m_normals[t].Y)*a)))},i.ClipperOffset.prototype.DoRound=function(t,r){for(var o,a=Math.atan2(this.m_sinA,this.m_normals[r].X*this.m_normals[t].X+this.m_normals[r].Y*this.m_normals[t].Y),l=Math.max(i.Cast_Int32(i.ClipperOffset.Round(this.m_StepsPerRad*Math.abs(a))),1),u=this.m_normals[r].X,c=this.m_normals[r].Y,h=0;h<l;++h)this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+u*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+c*this.m_delta))),o=u,u=u*this.m_cos-this.m_sin*c,c=o*this.m_sin+c*this.m_cos;this.m_destPoly.push(new i.IntPoint2(i.ClipperOffset.Round(this.m_srcPoly[t].X+this.m_normals[t].X*this.m_delta),i.ClipperOffset.Round(this.m_srcPoly[t].Y+this.m_normals[t].Y*this.m_delta)))},i.Error=function(t){try{throw new Error(t)}catch(t){alert(t.message)}},i.JS={},i.JS.AreaOfPolygon=function(t,r){return r||(r=1),i.Clipper.Area(t)/(r*r)},i.JS.AreaOfPolygons=function(t,r){r||(r=1);for(var o=0,a=0;a<t.length;a++)o+=i.Clipper.Area(t[a]);return o/(r*r)},i.JS.BoundsOfPath=function(t,r){return i.JS.BoundsOfPaths([t],r)},i.JS.BoundsOfPaths=function(t,r){r||(r=1);var o=i.Clipper.GetBounds(t);return o.left/=r,o.bottom/=r,o.right/=r,o.top/=r,o},i.JS.Clean=function(t,r){if(!(t instanceof Array))return[];var o=t[0]instanceof Array;t=i.JS.Clone(t);if("number"!=typeof r||null===r)return i.Error("Delta is not a number in Clean()."),t;if(0===t.length||1===t.length&&0===t[0].length||r<0)return t;o||(t=[t]);for(var a,l,u,c,h,p,y,d=t.length,v=[],m=0;m<d;m++)if(0!==(a=(l=t[m]).length))if(a<3)u=l,v.push(u);else{for(u=l,c=r*r,h=l[0],p=1,y=1;y<a;y++)(l[y].X-h.X)*(l[y].X-h.X)+(l[y].Y-h.Y)*(l[y].Y-h.Y)<=c||(u[p]=l[y],h=l[y],p++);h=l[p-1],(l[0].X-h.X)*(l[0].X-h.X)+(l[0].Y-h.Y)*(l[0].Y-h.Y)<=c&&p--,p<a&&u.splice(p,a-p),u.length&&v.push(u)}return!o&&v.length?v=v[0]:o||0!==v.length?o&&0===v.length&&(v=[[]]):v=[],v},i.JS.Clone=function(t){if(!(t instanceof Array))return[];if(0===t.length)return[];if(1===t.length&&0===t[0].length)return[[]];var r=t[0]instanceof Array;r||(t=[t]);var i,o,a,l,u=t.length,c=new Array(u);for(o=0;o<u;o++){for(i=t[o].length,l=new Array(i),a=0;a<i;a++)l[a]={X:t[o][a].X,Y:t[o][a].Y};c[o]=l}return r||(c=c[0]),c},i.JS.Lighten=function(t,r){if(!(t instanceof Array))return[];if("number"!=typeof r||null===r)return i.Error("Tolerance is not a number in Lighten()."),i.JS.Clone(t);if(0===t.length||1===t.length&&0===t[0].length||r<0)return i.JS.Clone(t);var o,a,l,u,c,h,p,y,d,v,m,P,g,_,b,x,C=t[0]instanceof Array;C||(t=[t]);var I=t.length,w=r*r,O=[];for(o=0;o<I;o++)if(0!==(h=(l=t[o]).length)){for(u=0;u<1e6;u++){for(c=[],l[(h=l.length)-1].X!==l[0].X||l[h-1].Y!==l[0].Y?(m=1,l.push({X:l[0].X,Y:l[0].Y}),h=l.length):m=0,v=[],a=0;a<h-2;a++)p=l[a],d=l[a+1],y=l[a+2],b=p.X,x=p.Y,P=y.X-b,g=y.Y-x,0===P&&0===g||((_=((d.X-b)*P+(d.Y-x)*g)/(P*P+g*g))>1?(b=y.X,x=y.Y):_>0&&(b+=P*_,x+=g*_)),(P=d.X-b)*P+(g=d.Y-x)*g<=w&&(v[a+1]=1,a++);for(c.push({X:l[0].X,Y:l[0].Y}),a=1;a<h-1;a++)v[a]||c.push({X:l[a].X,Y:l[a].Y});if(c.push({X:l[h-1].X,Y:l[h-1].Y}),m&&l.pop(),!v.length)break;l=c}c[(h=c.length)-1].X===c[0].X&&c[h-1].Y===c[0].Y&&c.pop(),c.length>2&&O.push(c)}return C||(O=O[0]),void 0===O&&(O=[]),O},i.JS.PerimeterOfPath=function(t,r,i){if(void 0===t)return 0;var o,a,l=Math.sqrt,u=0,c=0,h=0,p=0,y=0,d=t.length;if(d<2)return 0;for(r&&(t[d]=t[0],d++);--d;)c=(o=t[d]).X,h=o.Y,u+=l((c-(p=(a=t[d-1]).X))*(c-p)+(h-(y=a.Y))*(h-y));return r&&t.pop(),u/i},i.JS.PerimeterOfPaths=function(t,r,o){o||(o=1);for(var a=0,l=0;l<t.length;l++)a+=i.JS.PerimeterOfPath(t[l],r,o);return a},i.JS.ScaleDownPath=function(t,r){var i,o;for(r||(r=1),i=t.length;i--;)(o=t[i]).X=o.X/r,o.Y=o.Y/r},i.JS.ScaleDownPaths=function(t,r){var i,o,a;for(r||(r=1),i=t.length;i--;)for(o=t[i].length;o--;)(a=t[i][o]).X=a.X/r,a.Y=a.Y/r},i.JS.ScaleUpPath=function(t,r){var i,o,a=Math.round;for(r||(r=1),i=t.length;i--;)(o=t[i]).X=a(o.X*r),o.Y=a(o.Y*r)},i.JS.ScaleUpPaths=function(t,r){var i,o,a,l=Math.round;for(r||(r=1),i=t.length;i--;)for(o=t[i].length;o--;)(a=t[i][o]).X=l(a.X*r),a.Y=l(a.Y*r)},i.ExPolygons=function(){return[]},i.ExPolygon=function(){this.outer=null,this.holes=null},i.JS.AddOuterPolyNodeToExPolygons=function(t,r){var o=new i.ExPolygon;o.outer=t.Contour();var a,l,u,c,h,p,y=t.Childs(),d=y.length;for(o.holes=new Array(d),u=0;u<d;u++)for(a=y[u],o.holes[u]=a.Contour(),c=0,p=(h=a.Childs()).length;c<p;c++)l=h[c],i.JS.AddOuterPolyNodeToExPolygons(l,r);r.push(o)},i.JS.ExPolygonsToPaths=function(t){var r,o,a,l,u=new i.Paths;for(r=0,a=t.length;r<a;r++)for(u.push(t[r].outer),o=0,l=t[r].holes.length;o<l;o++)u.push(t[r].holes[o]);return u},i.JS.PolyTreeToExPolygons=function(t){var r,o,a,l,u=new i.ExPolygons;for(o=0,l=(a=t.Childs()).length;o<l;o++)r=a[o],i.JS.AddOuterPolyNodeToExPolygons(r,u);return u}}()},899:(t,r,i)=>{"use strict";i.d(r,{Z:()=>u});var o=i(204),a=i(561),l=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var u=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(InitialSketch,t);var r=_createSuper(InitialSketch);function InitialSketch(){return _classCallCheck(this,InitialSketch),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(InitialSketch,[{key:"init",value:function init(){this.pos={x:this.canvasWidth/2,y:this.canvasHeight/2},this.vs.xDrift=new l.Z({name:"x Drift",min:0,max:20,initialValue:5}),this.vs.yDrift=new l.Z({name:"y Drift",min:0,max:20,initialValue:5}),this.vs.circleMinRadius=new l.Z({name:"Min rad",min:0,max:25,initialValue:3}),this.vs.circleMaxRadius=new l.Z({name:"Max rad",min:0,max:50,initialValue:12}),this.vs.circleDrift=new l.Z({name:"Circle Drift",min:0,max:100,initialValue:30}),this.vs.circleSpawnRate=new l.Z({name:"Spawn rate",min:1,max:300,step:1,initialValue:150}),this.vs.circleSpawnChance=new l.Z({name:"Spawn chance",min:0,max:1,initialValue:.5})}},{key:"initDraw",value:function initDraw(){this.vs.circleMaxRadius.value<this.vs.circleMinRadius.value&&this.vs.circleMaxRadius.setValue(this.vs.circleMinRadius.value,!0)}},{key:"draw",value:function draw(t){if(this.pos.x=(0,a.re)(this.pos.x,this.canvasWidth),this.pos.y=(0,a.re)(this.pos.y,this.canvasHeight),t%100==0&&(this.ctx.strokeStyle="#".concat((65793*(0,a.c4)(128)).toString(16))),this.ctx.beginPath(),this.ctx.moveTo(this.pos.x,this.pos.y),this.pos.x+=(0,a.Qy)(this.vs.xDrift.value),this.pos.y+=(0,a.Qy)(this.vs.yDrift.value),this.ctx.lineTo(this.pos.x,this.pos.y),this.ctx.stroke(),this.ctx.closePath(),t%this.vs.circleSpawnRate.value==0&&Math.random()<this.vs.circleSpawnChance.value){var r=this.ctx.fillStyle,i=this.ctx.strokeStyle;this.ctx.strokeStyle="#000",this.ctx.fillStyle="#".concat(Math.floor(8388607.5+(0,a.c4)(8388607.5)).toString(16)),this.ctx.beginPath(),this.ctx.circle(this.pos.x+(0,a.rO)(this.vs.circleDrift.value),this.pos.y+(0,a.rO)(this.vs.circleDrift.value),(0,a.c4)(this.vs.circleMaxRadius.value,this.vs.circleMinRadius.value)),this.ctx.fill(),this.ctx.stroke(),this.ctx.closePath(),this.ctx.strokeStyle=i,this.ctx.fillStyle=r}}}]),InitialSketch}(o.v);!function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}(u,"generateGCode",!1)},715:(t,r,i)=>{"use strict";function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}i.d(r,{Z:()=>o});var o=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(GCodeTest,t);var r=_createSuper(GCodeTest);function GCodeTest(){return _classCallCheck(this,GCodeTest),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(GCodeTest,[{key:"init",value:function init(){this.ctx.driver.comment("Drawing single line"),this.ctx.beginPath(),this.ctx.moveTo(10,10),this.ctx.lineTo(20,10),this.ctx.stroke(),this.ctx.closePath(),this.ctx.driver.comment("Drawing joined line"),this.ctx.beginPath(),this.ctx.moveTo(20,40),this.ctx.lineTo(25,40),this.ctx.lineTo(30,45),this.ctx.stroke(),this.ctx.closePath(),this.ctx.driver.comment("Drawing rect outline"),this.ctx.strokeRect(20,20,5,5),this.ctx.driver.comment("Drawing rect fill"),this.ctx.fillRect(30,20,5,5),this.ctx.driver.comment("Drawing circle"),this.ctx.beginPath(),"circle"in this.ctx&&this.ctx.circle(40,40,5),this.ctx.stroke(),this.ctx.closePath()}}]),GCodeTest}(i(204).v)},798:(t,r,i)=>{"use strict";i.d(r,{Z:()=>p});var o=i(563),a=i(323),l=i(204),u=i(132),c=i(286),h=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var p=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Arcs,t);var r=_createSuper(Arcs);function Arcs(){var t;_classCallCheck(this,Arcs);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"count",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Arcs,[{key:"init",value:function init(){var t=this;this.vs.precision=new h.Z({initialValue:180,min:2,max:1440,step:1}),this.vs.speedPow1=new h.Z({initialValue:.5,min:.001,max:10,step:.001}),this.vs.radiusMin=new h.Z({initialValue:.1,min:1,max:20,step:.1}),this.vs.radiusMax=new h.Z({initialValue:.5,min:1,max:20,step:.1}),this.vs.radiusThetaMulti=new h.Z({initialValue:1,min:.001,max:5,step:.001}),this.osc=new c.Z({speed:function speed(r){var i=Math.sqrt(r)/-Math.pow(Math.sqrt(r),t.vs.speedPow1.value);return isNaN(i)?0:i},radius:function radius(r){return new a.Z(t.vs.radiusMin.value+Math.cos(r*t.vs.radiusThetaMulti.value)*t.vs.radiusMax.value,t.vs.radiusMin.value+Math.sin(r*t.vs.radiusThetaMulti.value)*t.vs.radiusMax.value)}})}},{key:"initDraw",value:function initDraw(){this.vs.radiusMin.value>this.vs.radiusMax.value&&this.vs.radiusMax.setValue(this.vs.radiusMin.value,!0),console.log({precision:this.vs.precision.value,speedPow1:this.vs.speedPow1.value,radiusMin:this.vs.radiusMin.value,radiusMax:this.vs.radiusMax.value,radiusThetaMulti:this.vs.radiusThetaMulti.value}),this.count=0,this.lastPoint=void 0,this.osc.reset();var t=Math.min(this.cw,this.ch)/2-(this.vs.radiusMax.value+10),r=(0,u.CS)(this.cx,this.cy,0,2*Math.PI,t).start,i=new o.Z;i.moveTo(r.x,r.y),i.arc(this.cx,this.cy,t,0,2*Math.PI,!1),this.circlePoints=i.getPoints(this.vs.precision.value)}},{key:"draw",value:function draw(t){if(!(this.count>=this.circlePoints.length)){this.osc.step(this.count+1);var r=this.circlePoints[this.count],i=new a.Z(r.x+this.osc.x,r.y+this.osc.y);this.lastPoint&&r&&(this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.lineTo(i.x,i.y),this.ctx.stroke(),this.ctx.closePath()),this.lastPoint=i.clone(),this.count++}}}]),Arcs}(l.v)},613:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),l=i(561),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(BezierScribbles,t);var r=_createSuper(BezierScribbles);function BezierScribbles(){return _classCallCheck(this,BezierScribbles),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(BezierScribbles,[{key:"init",value:function init(){this.vs.stopAfter=new u.Z({initialValue:5,min:1,max:200,step:1}),this.vs.driftMin=new u.Z({initialValue:20,min:0,max:100,step:1}),this.vs.driftMax=new u.Z({initialValue:50,min:0,max:100,step:1}),this.vs.midpointDrift=new u.Z({initialValue:30,min:0,max:100,step:1})}},{key:"initDraw",value:function initDraw(){var t=Math.random()*Math.PI*2;this.lastPoint=new o.Z(this.cx+100*Math.cos(t),this.cy+100*+Math.sin(t)),this.lastAnchorPoint=this.lastPoint.clone()}},{key:"draw",value:function draw(t){if(!(t>this.vs.stopAfter.value)){var r=new o.Z(this.lastPoint.x+Math.cos(Math.random()*Math.PI*2)*(this.vs.driftMin.value+Math.random()*(this.vs.driftMax.value-this.vs.driftMin.value)),this.lastPoint.y+Math.sin(Math.random()*Math.PI*2)*(this.vs.driftMin.value+Math.random()*(this.vs.driftMax.value-this.vs.driftMin.value)));r.x+=(this.cx-r.x)/15,r.y+=(this.cy-r.y)/15;var i=this.lastAnchorPoint.angleTo(this.lastPoint),a=this.lastAnchorPoint.distanceTo(this.lastPoint),u=this.lastAnchorPoint.add(new o.Z(Math.cos(i)*(2*a),Math.sin(i)*(2*a))).add(new o.Z((0,l.rO)(this.vs.midpointDrift.value),(0,l.rO)(this.vs.midpointDrift.value)));u.x+=(this.cx-u.x)/15,u.y+=(this.cy-u.y)/15,this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.bezierCurveTo(u.x,u.y,u.x,u.y,r.x,r.y),this.ctx.stroke(),this.ctx.closePath(),this.lastPoint=r.clone(),this.lastAnchorPoint=u.clone()}}}]),BezierScribbles}(a.v);!function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}(c,"generateGCode",!1)},918:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),l=i(286),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Spiraling,t);var r=_createSuper(Spiraling);function Spiraling(){return _classCallCheck(this,Spiraling),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Spiraling,[{key:"init",value:function init(){var t=this,r=15;this.vs.speedUp=new u.Z({initialValue:10,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new u.Z({initialValue:5e4,min:1,max:12e4,step:1,disableRandomize:!0}),this.vs.osc1speed=new u.Z({initialValue:.1,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.osc1dist=new u.Z({initialValue:Math.PI/4/r,min:Math.PI/8/r,max:16*Math.PI/r,step:Math.PI/32/r}),this.vs.osc1phase=new u.Z({initialValue:0,min:0,max:2*Math.PI,step:Math.PI/16}),this.vs.osc2speed=new u.Z({initialValue:.1,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.osc2dist=new u.Z({initialValue:Math.PI/4/r,min:Math.PI/8/r,max:16*Math.PI/r,step:Math.PI/32/r}),this.vs.osc2phase=new u.Z({initialValue:0,min:0,max:2*Math.PI,step:Math.PI/16}),this.vs.osc3speed=new u.Z({initialValue:.1,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.osc3dist=new u.Z({initialValue:Math.PI/4/r,min:Math.PI/8/r,max:16*Math.PI/r,step:Math.PI/32/r}),this.vs.osc3phase=new u.Z({initialValue:0,min:0,max:2*Math.PI,step:Math.PI/16}),this.osc1=new l.Z({speed:function speed(r){return t.vs.osc1speed.value},radius:function radius(r){return t.vs.osc1dist.value},phase:0}),this.osc2=new l.Z({speed:function speed(r){return t.vs.osc2speed.value},radius:function radius(r){return t.vs.osc2dist.value},phase:0}),this.osc3=new l.Z({speed:function speed(r){return t.vs.osc3speed.value},radius:function radius(r){return t.vs.osc3dist.value},phase:0})}},{key:"initDraw",value:function initDraw(){this.lastPoint=new o.Z(this.cx,this.cy),this.vs.stopAfter.step=this.vs.speedUp.value,this.osc1.phase=this.vs.osc1phase.value,this.osc2.phase=this.vs.osc2phase.value,this.osc3.phase=this.vs.osc3phase.value,this.osc1.reset(),this.osc2.reset(),this.osc3.reset()}},{key:"draw",value:function draw(t){var r=this.vs.speedUp.value;if(!(t*r>this.vs.stopAfter.value))for(var i=0;i<r;i++){this.osc1.step(t),this.osc2.step(t),this.osc3.step(t);var o=this.lastPoint.clone().add(this.osc1.value.add(this.osc2.value).add(this.osc3.value));this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.lineTo(o.x,o.y),this.ctx.stroke(),this.ctx.closePath(),this.lastPoint=o}}}]),Spiraling}(a.v)},511:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),l=i(286),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(SpiralingProportional,t);var r=_createSuper(SpiralingProportional);function SpiralingProportional(){return _classCallCheck(this,SpiralingProportional),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(SpiralingProportional,[{key:"init",value:function init(){var t=this;this.vs.speedUp=new u.Z({initialValue:15,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new u.Z({initialValue:1e3,min:1,max:2e4,step:1,disableRandomize:!0}),this.vs.oscSpeed=new u.Z({initialValue:.1825,min:-Math.PI/8,max:Math.PI/8,step:Math.PI/666}),this.vs.oscSpeedMulti=new u.Z({initialValue:2.994,min:.5,max:5,step:1e-5}),this.vs.oscDist=new u.Z({initialValue:50,min:1,max:20,step:.25}),this.vs.osc1phase=new u.Z({initialValue:5.9,min:0,max:2*Math.PI,step:Math.PI/32}),this.vs.osc2phase=new u.Z({initialValue:1.8,min:0,max:2*Math.PI,step:Math.PI/32}),this.vs.osc3phase=new u.Z({initialValue:2,min:0,max:2*Math.PI,step:Math.PI/32}),this.osc1=new l.Z({speed:function speed(r){return t.vs.oscSpeed.value*t.vs.oscSpeedMulti.value/2},radius:function radius(r){return t.vs.oscDist.value},phase:0}),this.osc2=new l.Z({speed:function speed(r){return t.vs.oscSpeed.value*Math.pow(t.vs.oscSpeedMulti.value,2)/2},radius:function radius(r){return t.vs.oscDist.value},phase:0}),this.osc3=new l.Z({speed:function speed(r){return t.vs.oscSpeed.value*Math.pow(t.vs.oscSpeedMulti.value,3)/3},radius:function radius(r){return t.vs.oscDist.value},phase:0})}},{key:"initDraw",value:function initDraw(){this.lastPoint=new o.Z(this.cx,this.cy),this.vs.stopAfter.step=this.vs.speedUp.value,this.osc1.phase=this.vs.osc1phase.value,this.osc2.phase=this.vs.osc2phase.value,this.osc3.phase=this.vs.osc3phase.value,this.osc1.reset(),this.osc2.reset(),this.osc3.reset()}},{key:"draw",value:function draw(t){var r=this.vs.speedUp.value;if(!(t*r>this.vs.stopAfter.value))for(var i=0;i<r;i++){this.osc1.step(t),this.osc2.step(t),this.osc3.step(t);var o=this.lastPoint.clone().add(this.osc1.value.add(this.osc2.value).add(this.osc3.value));this.ctx.beginPath(),this.ctx.moveTo(this.lastPoint.x,this.lastPoint.y),this.ctx.lineTo(o.x,o.y),this.ctx.stroke(),this.ctx.closePath(),this.lastPoint=o}}}]),SpiralingProportional}(a.v)},166:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),l=i(286),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(ConcentricCircles,t);var r=_createSuper(ConcentricCircles);function ConcentricCircles(){return _classCallCheck(this,ConcentricCircles),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(ConcentricCircles,[{key:"init",value:function init(){var t=this;this.vs.speedUp=new u.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new u.Z({initialValue:100,min:1,max:1e3,step:1,disableRandomize:!0}),this.vs.shrinkAmount=new u.Z({initialValue:15,min:1,max:12,step:.1}),this.vs.shrinkDiv=new u.Z({initialValue:1,min:0,max:1.8,step:.01}),this.vs.shrinkFalloff=new u.Z({initialValue:1,min:.9,max:1.1,step:.005}),this.vs.shrinkVariance=new u.Z({initialValue:0,min:0,max:50,step:.01}),this.vs.shrinkVarOsc=new u.Z({initialValue:Math.PI/32,min:0,max:Math.PI/4,step:.001}),this.vs.rotateSpeed=new u.Z({initialValue:Math.PI/32,min:-Math.PI/4,max:Math.PI/4,step:.001}),this.osc1=new l.Z({radius:function radius(r){return t.vs.shrinkVariance.value},speed:function speed(r){return t.vs.shrinkVarOsc.value},phase:0})}},{key:"initDraw",value:function initDraw(){this.lastPoint=new o.Z(this.cx,this.cy),this.radius=.45*Math.min(this.cw,this.ch),this.theta=0,this.osc1.reset()}},{key:"draw",value:function draw(t){var r=this.vs.speedUp.value;if(!(t*r>this.vs.stopAfter.value))for(var i=0;i<r;i++){var o=t*r+i;this.osc1.step(o),this.radius>0&&(this.ctx.beginPath(),this.ctx.circle(this.lastPoint.x,this.lastPoint.y,this.radius),this.ctx.stroke(),this.ctx.closePath()),this.theta+=this.vs.rotateSpeed.value;var a=this.radius-(this.vs.shrinkAmount.value+this.osc1.x)*Math.pow(this.vs.shrinkFalloff.value,o),l=this.radius-a;this.lastPoint=this.lastPoint.moveAlongAngle(this.theta,l*this.vs.shrinkDiv.value),this.radius=a}}}]),ConcentricCircles}(a.v)},703:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(323),a=i(204),l=i(497),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _createForOfIteratorHelper(t,r){var i="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!i){if(Array.isArray(t)||(i=function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t))||r&&t&&"number"==typeof t.length){i&&(t=i);var o=0,a=function F(){};return{s:a,n:function n(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function e(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var l,u=!0,c=!1;return{s:function s(){i=i.call(t)},n:function n(){var t=i.next();return u=t.done,t},e:function e(t){c=!0,l=t},f:function f(){try{u||null==i.return||i.return()}finally{if(c)throw l}}}}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(BubblesInCircle,t);var r=_createSuper(BubblesInCircle);function BubblesInCircle(){return _classCallCheck(this,BubblesInCircle),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(BubblesInCircle,[{key:"init",value:function init(){this.vs.seed=new u.Z({initialValue:1391,min:1e3,max:5e3,step:1}),this.vs.atLeast=new u.Z({initialValue:777,min:1,max:5e3,step:1,disableRandomize:!0}),this.vs.maxRadius=new u.Z({initialValue:300,min:.5,max:45,step:.5,disableRandomize:!0}),this.vs.minRadius=new u.Z({initialValue:.2,min:.1,max:5,step:.05,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){(0,l.b)(this.vs.seed.value),this.reordered=!1,this.redrawnCount=0,this.circles=[],this.radius=.45*Math.min(this.cw,this.ch),this.ctx.beginPath(),this.ctx.circle(this.cx,this.cy,this.radius),this.ctx.stroke(),this.ctx.closePath()}},{key:"draw",value:function draw(t){if(this.circles.length>this.vs.atLeast.value)if(this.reordered){if(this.redrawnCount<this.circles.length){var r=this.circles[this.redrawnCount];this.ctx.beginPath(),this.ctx.circle(r.position.x,r.position.y,r.radius),this.ctx.stroke(),this.ctx.closePath(),this.redrawnCount++}}else{var i=new o.Z(this.cx,this.cy);this.circles.sort((function(t,r){return o.Z.distance(i,r.position)-o.Z.distance(i,t.position)})),this.ctx.reset(),this.ctx.beginPath(),this.ctx.circle(this.cx,this.cy,this.radius),this.ctx.stroke(),this.ctx.closePath(),this.reordered=!0}else{var a=(0,l.M)()*Math.PI*2,u=(0,l.M)()*this.radius,c=new o.Z(this.cx+Math.cos(a)*u,this.cy+Math.sin(a)*u),h=0,p=!0,y=this.radius-o.Z.distance(new o.Z(this.cx,this.cy),c);if(this.circles.length){var d,v=[],m=_createForOfIteratorHelper(this.circles);try{for(m.s();!(d=m.n()).done;){var P=d.value,g=o.Z.distance(P.position,c);g<=P.radius?p=!1:v.push(g-P.radius)}}catch(t){m.e(t)}finally{m.f()}v.sort((function(t,r){return t-r})),h=v[0],p&&h>y&&(h=y)}else h=y;(h>this.vs.maxRadius.value||h<this.vs.minRadius.value)&&(p=!1),p&&h>0&&(this.circles.push({position:c,radius:h}),this.ctx.beginPath(),this.ctx.circle(c.x,c.y,h),this.ctx.stroke(),this.ctx.closePath())}}}]),BubblesInCircle}(a.v);!function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}(c,"generateGCode",!1)},139:(t,r,i)=>{"use strict";i.d(r,{Z:()=>l});var o=i(204),a=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var l=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(GridWaves,t);var r=_createSuper(GridWaves);function GridWaves(){return _classCallCheck(this,GridWaves),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(GridWaves,[{key:"init",value:function init(){this.vs.cols=new a.Z({initialValue:3,min:1,max:10,step:1,disableRandomize:!0}),this.vs.rows=new a.Z({initialValue:4,min:1,max:10,step:1,disableRandomize:!0}),this.vs.gap=new a.Z({initialValue:2,min:0,max:25,step:1,disableRandomize:!0}),this.vs.outerGap=new a.Z({initialValue:5,min:0,max:25,step:1,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){var t=this.vs.cols.value,r=this.vs.rows.value,i=this.vs.gap.value,o=this.vs.outerGap.value;this.effectiveWidth=this.cw-2*o,this.effectiveHeight=this.ch-2*o;for(var a=(this.effectiveWidth-i*(t-1))/t,l=o,u=o,c=0;c<r;c++){l=o;for(var h=0;h<t;h++)this.ctx.beginPath(),this.ctx.rect(l,u,a,a),this.ctx.stroke(),this.ctx.closePath(),l+=a+i;u+=a+i}}},{key:"draw",value:function draw(t){}}]),GridWaves}(o.v)},97:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(204),a=i(393),l=i(497),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(PerlinGrid,t);var r=_createSuper(PerlinGrid);function PerlinGrid(){var t;_classCallCheck(this,PerlinGrid);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"drawCount",0),_defineProperty(_assertThisInitialized(t),"maxDrawCount",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(PerlinGrid,[{key:"init",value:function init(){this.vs.speedUp=new u.Z({initialValue:10,min:1,max:100,step:1,disableRandomize:!0}),this.vs.seed=new u.Z({initialValue:1e3,min:1e3,max:5e3,step:1}),this.vs.cols=new u.Z({initialValue:90,min:1,max:200,step:1,disableRandomize:!0}),this.vs.rows=new u.Z({initialValue:90,min:1,max:200,step:1,disableRandomize:!0}),this.vs.shape=new u.Z({initialValue:1,min:0,max:1,step:1,disableRandomize:!0}),this.vs.size=new u.Z({initialValue:18,min:.1,max:64,step:.1}),this.vs.perlinDiv=new u.Z({initialValue:25,min:1,max:100,step:1,disableRandomize:!0}),this.vs.offsetX=new u.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.offsetY=new u.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.outerGap=new u.Z({initialValue:12,min:0,max:25,step:1,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){(0,l.b)(this.vs.seed.value),(0,a.ii)(this.vs.seed.value);var t=this.vs.cols.value,r=this.vs.rows.value,i=this.vs.outerGap.value;this.effectiveWidth=this.cw-2*i,this.effectiveHeight=this.ch-2*i,this.drawCount=0,this.maxDrawCount=r*t}},{key:"draw",value:function draw(t){if(!(this.drawCount>=this.maxDrawCount)){var r=this.vs.speedUp.value,i=this.vs.cols.value,o=this.vs.rows.value,l=this.vs.outerGap.value,u=this.vs.size.value,c=this.vs.shape.value,h=this.vs.perlinDiv.value,p=this.vs.offsetX.value,y=this.vs.offsetY.value,d=this.effectiveWidth/i,v=this.effectiveHeight/o;0===c&&(r=Math.max(1,Math.floor(r/4)));for(var m=0;m<this.vs.speedUp.value;m++){var P=this.drawCount+m;if(P>=this.maxDrawCount)break;var g=P%i,_=Math.floor(P/i),b=l+g*d,x=l+_*v,C=Math.abs((0,a.tv)((g+p)/h,(_+y)/h))*u;this.ctx.beginPath(),0===c?this.ctx.circle(b,x,C):1===c&&this.ctx.rect(b-C/2,x-C/2,C,C),this.ctx.stroke(),this.ctx.closePath()}this.drawCount+=this.vs.speedUp.value}}}]),PerlinGrid}(o.v)},165:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(204),a=i(393),l=i(497),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(PerlinLines,t);var r=_createSuper(PerlinLines);function PerlinLines(){var t;_classCallCheck(this,PerlinLines);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"drawCount",0),_defineProperty(_assertThisInitialized(t),"maxDrawCount",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(PerlinLines,[{key:"init",value:function init(){this.vs.speedUp=new u.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.seed=new u.Z({initialValue:9275,min:1e3,max:5e3,step:1}),this.vs.cols=new u.Z({initialValue:150,min:1,max:300,step:1}),this.vs.rows=new u.Z({initialValue:120,min:1,max:300,step:1}),this.vs.size=new u.Z({initialValue:.5,min:.1,max:8,step:.1}),this.vs.perlinDivX=new u.Z({initialValue:75,min:1,max:100,step:1}),this.vs.perlinDivY=new u.Z({initialValue:75,min:1,max:100,step:1}),this.vs.perlinOffsetX=new u.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.perlinOffsetY=new u.Z({initialValue:0,min:-100,max:100,step:1}),this.vs.drawOffsetStart=new u.Z({initialValue:1,min:-5,max:5,step:.1}),this.vs.drawOffsetEnd=new u.Z({initialValue:-4.5,min:-5,max:5,step:.1}),this.vs.outerGap=new u.Z({initialValue:18,min:0,max:25,step:1,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){(0,l.b)(this.vs.seed.value),(0,a.ii)(this.vs.seed.value);var t=this.vs.cols.value,r=this.vs.rows.value,i=this.vs.outerGap.value;this.effectiveWidth=this.cw-2*i,this.effectiveHeight=this.ch-2*i,this.drawCount=0,this.maxDrawCount=r*t}},{key:"draw",value:function draw(t){if(!(this.drawCount>=this.maxDrawCount)){for(var r=this.vs.cols.value,i=this.vs.rows.value,o=this.vs.outerGap.value,l=this.vs.size.value,u=this.vs.perlinDivX.value,c=this.vs.perlinDivY.value,h=this.vs.perlinOffsetX.value,p=this.vs.perlinOffsetY.value,y=this.vs.drawOffsetStart.value,d=this.vs.drawOffsetEnd.value,v=this.effectiveWidth/r,m=this.effectiveHeight/i,P=l/(1+(this.vs.size.max-(r+i)/2)/500),g=0;g<this.vs.speedUp.value;g++){var _=this.drawCount+g;if(_>=this.maxDrawCount)break;var b=_%r,x=Math.floor(_/r),C=o+b*v,I=o+x*m,w=(0,a.tv)((b+h)/u,(x+p)/c)*Math.PI*2,O={x:C+Math.cos(w)*(P+y),y:I+Math.sin(w)*(P+y)},S={x:C+Math.cos(w+Math.PI)*(P+d),y:I+Math.sin(w+Math.PI)*(P+d)};this.ctx.beginPath(),_%2==0?(this.ctx.moveTo(O.x,O.y),this.ctx.lineTo(S.x,S.y)):(this.ctx.moveTo(S.x,S.y),this.ctx.lineTo(O.x,O.y)),this.ctx.stroke(),this.ctx.closePath()}this.drawCount+=this.vs.speedUp.value}}}]),PerlinLines}(o.v)},52:(t,r,i)=>{"use strict";i.d(r,{Z:()=>h});var o=i(323),a=i(204),l=i(561),u=i(497),c=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var h=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Tree,t);var r=_createSuper(Tree);function Tree(){var t;_classCallCheck(this,Tree);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"branchLevel",0),_defineProperty(_assertThisInitialized(t),"drawnCurrentStems",0),_defineProperty(_assertThisInitialized(t),"currentStems",[]),_defineProperty(_assertThisInitialized(t),"nextStems",[]),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Tree,[{key:"init",value:function init(){this.vs.seed=new c.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.initBranchLength=new c.Z({initialValue:8,min:5,max:10,step:.1}),this.vs.branchLengthFalloff=new c.Z({initialValue:.83,min:.4,max:.9,step:.005}),this.vs.splitProbability=new c.Z({initialValue:.6,min:0,max:1,step:.005}),this.vs.pruneProbability=new c.Z({initialValue:.95,min:0,max:1,step:.05}),this.vs.bloomProbability=new c.Z({initialValue:.6,min:0,max:1,step:.05}),this.vs.bloomSize=new c.Z({initialValue:.3,min:.2,max:1.2,step:.1}),this.vs.splitAngleRange=new c.Z({initialValue:.44,min:0,max:Math.PI/2,step:Math.PI/256}),this.vs.splitAngleBranchLevelMulti=new c.Z({initialValue:.1,min:-1,max:1,step:.05}),this.vs.splitAngleMinPercent=new c.Z({initialValue:.5,min:0,max:1,step:.05}),this.vs.chaosFactor=new c.Z({initialValue:.85,min:0,max:2,step:.01}),this.vs.splitCount=new c.Z({initialValue:2,min:2,max:5,step:1,disableRandomize:!0}),this.vs.maxBranchLevels=new c.Z({initialValue:14,min:1,max:24,step:1,disableRandomize:!0})}},{key:"initDraw",value:function initDraw(){(0,u.b)(this.vs.seed.value),this.branchLevel=0,this.drawnCurrentStems=0,this.currentStems=[],this.nextStems=[];var t=this.vs.branchLengthFalloff.value,r=this.vs.initBranchLength.value/t,i=-Math.PI/2,a=this.drawBranch(new o.Z(this.cx,this.ch-10),i,r);this.currentStems.push({position:a,angle:i,length:r})}},{key:"draw",value:function draw(t){if(!(this.branchLevel>this.vs.maxBranchLevels.value))if(this.drawnCurrentStems>=this.currentStems.length)this.currentStems=_toConsumableArray(this.nextStems),this.nextStems=[],this.branchLevel++,this.drawnCurrentStems=0;else{var r=this.currentStems[this.drawnCurrentStems],i=this.vs.branchLengthFalloff.value,o=this.branchLevel<3?1:this.vs.splitProbability.value,a=this.vs.splitAngleRange.value,c=this.vs.splitAngleBranchLevelMulti.value,h=this.vs.splitAngleMinPercent.value,p=this.vs.pruneProbability.value,y=this.vs.bloomProbability.value,d=this.vs.chaosFactor.value;if((0,u.M)()<=o)for(var v=this.vs.splitCount.value,m=a*(1+c*this.branchLevel/4),P=m*h+(0,l.EA)(m*(1-h))+(0,l.Qy)(d)*Math.PI/8,g=2*P/v,_=0;_<v;_++){var b=r.length*i*(1+(0,l.Qy)(d/8)),x=r.angle-P/2+g*_+(0,l.Qy)(Math.PI*d/10),C=this.drawBranch(r.position,x,b);this.nextStems.push({position:C,angle:x,length:b})}else{var I=r.angle+(0,l.Qy)(Math.PI*d/10),w=r.length*i*(1+(0,l.Qy)(d/8)),O=this.drawBranch(r.position,I,w);this.branchLevel!==this.vs.maxBranchLevels.value&&(0,u.M)()>p?this.nextStems.push({position:O,angle:I,length:w}):(0,u.M)()<y&&this.drawBloom(O,I)}this.drawnCurrentStems++}}},{key:"drawBranch",value:function drawBranch(t,r,i){this.ctx.beginPath(),this.ctx.moveTo(t.x,t.y);var a=t.clone().add(new o.Z(Math.cos(r)*i,Math.sin(r)*i));return this.ctx.lineTo(a.x,a.y),this.ctx.stroke(),this.ctx.closePath(),a}},{key:"drawBloom",value:function drawBloom(t,r){var i=this.vs.bloomSize.value;this.ctx.beginPath(),this.ctx.circle(t.x+Math.cos(r)*i,t.y+Math.sin(r)*i,i),this.ctx.stroke(),this.ctx.closePath()}}]),Tree}(a.v)},404:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(204),a=i(561),l=i(497),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(MondayMaze,t);var r=_createSuper(MondayMaze);function MondayMaze(){return _classCallCheck(this,MondayMaze),r.apply(this,arguments)}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(MondayMaze,[{key:"init",value:function init(){this.vs.speedUp=new u.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.seed=new u.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.gridSize=new u.Z({initialValue:2,min:1,max:8,step:.25}),this.vs.radialDivs=new u.Z({initialValue:2,min:1,max:4,step:1}),this.vs.offsetAng=new u.Z({initialValue:0,min:0,max:360,step:15})}},{key:"initDraw",value:function initDraw(){(0,l.b)(this.vs.seed.value),this.i=0,this.rows=Math.ceil(this.cw/this.vs.gridSize.value)+1,this.cols=Math.ceil(this.ch/this.vs.gridSize.value)+1}},{key:"draw",value:function draw(t){if(!(this.i>=this.rows*this.cols))for(var r=0;r<this.vs.speedUp.value&&!(this.i>=this.rows*this.cols);r++){var i=this.i%this.rows,o=Math.floor(this.i/this.rows),l=i*this.vs.gridSize.value,u=o*this.vs.gridSize.value,c=(0,a.Cn)(this.vs.offsetAng.value,this.vs.offsetAng.max,2*Math.PI),h=(0,a.rO)(this.vs.radialDivs.value),p=Math.PI/this.vs.radialDivs.value*h;(p=(0,a.mb)(p))>Math.PI/2&&(p-=Math.PI),p<Math.PI/2&&(p+=Math.PI),p+=c,this.ctx.beginPath(),this.ctx.moveTo(l,u);var y=Math.min(Math.abs(this.vs.gridSize.value/Math.cos(p)),Math.abs(this.vs.gridSize.value/Math.sin(p)));this.ctx.lineTo(l+Math.cos(p)*y,u+Math.sin(p)*y),this.ctx.stroke(),this.ctx.closePath(),this.i++}}}]),MondayMaze}(o.v)},544:(t,r,i)=>{"use strict";i.d(r,{Z:()=>h});var o=i(323),a=i(204),l=i(561),u=i(497),c=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var h=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Chaser,t);var r=_createSuper(Chaser);function Chaser(){var t;_classCallCheck(this,Chaser);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"angleChangeCountdown",0),_defineProperty(_assertThisInitialized(t),"increment",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Chaser,[{key:"init",value:function init(){this.vs.downscaleDrawing=new c.Z({initialValue:5,min:1,max:200,step:.01,disableRandomize:!0}),this.vs.speedUp=new c.Z({initialValue:1,min:1,max:500,step:1,disableRandomize:!0}),this.vs.stopAfter=new c.Z({initialValue:7e4,min:1,max:1e5,step:100,disableRandomize:!0}),this.vs.seed=new c.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.angleDiff=new c.Z({initialValue:23,min:0,max:180,step:1}),this.vs.minAngleDiff=new c.Z({initialValue:7,min:0,max:180,step:1}),this.vs.angleChangeSpeed=new c.Z({initialValue:68,min:0,max:1200,step:1}),this.vs.easeToAngle=new c.Z({initialValue:25,min:1,max:60,step:.25}),this.vs.centerForce=new c.Z({initialValue:450,min:2,max:1200,step:1}),this.vs.travel=new c.Z({initialValue:.1,min:.001,max:1,step:.001}),this.vs.centerDistRatio=new c.Z({initialValue:40,min:-10,max:80,step:.01})}},{key:"initDraw",value:function initDraw(){this.vs.minAngleDiff.value>this.vs.angleDiff.value&&this.vs.minAngleDiff.setValue(this.vs.angleDiff.value,!0),(0,u.b)(this.vs.seed.value),this.point=new o.Z((0,l.EA)(this.cw),(0,l.EA)(this.ch)),this.pointAngle=(0,l.EA)(2*Math.PI),this.aimAngle=this.pointAngle,this.increment=0,this.angleChangeCountdown=0}},{key:"draw",value:function draw(t){if(!(this.increment>this.vs.stopAfter.value))for(var r=(0,l.Id)(this.vs.angleDiff.value),i=(0,l.Id)(this.vs.minAngleDiff.value),a=0;a<this.vs.speedUp.value&&(this.increment++,!(this.increment>this.vs.stopAfter.value));a++){if(this.angleChangeCountdown<=0){var u=(0,l.Qy)(r-i);u+=(u>0?1:-1)*i,this.aimAngle=this.pointAngle+u,this.aimAngle=(0,l.mb)(this.aimAngle),this.pointAngle=(0,l.mb)(this.pointAngle),this.angleChangeCountdown=this.vs.angleChangeSpeed.value}var c=Math.max(.5,o.Z.distance(this.point,new o.Z(this.cx,this.cy)));this.pointAngle+=(this.aimAngle-this.pointAngle)/this.vs.easeToAngle.value,this.ctx.beginPath(),this.ctx.moveTo((this.point.x-this.cx)/this.vs.downscaleDrawing.value+this.cx,(this.point.y-this.cy)/this.vs.downscaleDrawing.value+this.cy),this.point.x+=Math.cos(this.pointAngle)*this.vs.travel.value,this.point.y+=Math.sin(this.pointAngle)*this.vs.travel.value,this.point.x+=(this.cx-this.point.x)/(this.vs.centerForce.value*(c/this.vs.centerDistRatio.value)),this.point.y+=(this.cy-this.point.y)/(this.vs.centerForce.value*(c/this.vs.centerDistRatio.value)),this.ctx.lineTo((this.point.x-this.cx)/this.vs.downscaleDrawing.value+this.cx,(this.point.y-this.cy)/this.vs.downscaleDrawing.value+this.cy),this.ctx.stroke(),this.ctx.closePath(),this.angleChangeCountdown--}}}]),Chaser}(a.v)},230:(t,r,i)=>{"use strict";i.d(r,{Z:()=>c});var o=i(204),a=i(561),l=i(497),u=i(109);function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(Kaleido,t);var r=_createSuper(Kaleido);function Kaleido(){var t;_classCallCheck(this,Kaleido);for(var i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return _defineProperty(_assertThisInitialized(t=r.call.apply(r,[this].concat(o))),"increment",0),t}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Kaleido,[{key:"init",value:function init(){this.vs.speedUp=new u.Z({initialValue:1,min:1,max:100,step:1,disableRandomize:!0}),this.vs.stopAfter=new u.Z({initialValue:20,min:1,max:420,step:1,disableRandomize:!0}),this.vs.maxRadius=new u.Z({initialValue:.45*this.ch,min:1,max:.5*this.ch,step:.1,disableRandomize:!0}),this.vs.angleOffset=new u.Z({initialValue:0,min:0,max:90,step:1,disableRandomize:!0}),this.vs.seed=new u.Z({initialValue:2222,min:1e3,max:5e3,step:1}),this.vs.segments=new u.Z({initialValue:8,min:2,max:24,step:2}),this.vs.maxHeightDiff=new u.Z({initialValue:120,min:0,max:this.vs.maxRadius.value,step:1})}},{key:"initDraw",value:function initDraw(){this.vs.maxHeightDiff.max=this.vs.maxRadius.value,this.vs.maxHeightDiff.value>this.vs.maxRadius.value&&this.vs.maxHeightDiff.setValue(this.vs.maxRadius.value,!0),(0,l.b)(this.vs.seed.value),this.increment=0}},{key:"draw",value:function draw(t){if(!(this.increment>this.vs.stopAfter.value))for(var r=(0,a.Id)(360/this.vs.segments.value),i=0;i<this.vs.speedUp.value&&(this.increment++,!(this.increment>this.vs.stopAfter.value));i++){var o=(0,a.EA)(this.vs.maxRadius.value),l=(0,a.re)(o+(0,a.Qy)(this.vs.maxHeightDiff.value/2),this.vs.maxRadius.value,0);if(o!==l)for(var u=0;u<this.vs.segments.value;u++){var c=r*u+(0,a.Id)(this.vs.angleOffset.value);this.ctx.beginPath(),this.ctx.moveTo(this.cx+Math.cos(c)*(u%2?o:l),this.cy+Math.sin(c)*(u%2?o:l)),this.ctx.lineTo(this.cx+Math.cos(c+r)*(u%2?l:o),this.cy+Math.sin(c+r)*(u%2?l:o)),this.ctx.stroke(),this.ctx.closePath()}}}}]),Kaleido}(o.v)},286:(t,r,i)=>{"use strict";i.d(r,{Z:()=>a});var o=i(323);function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var a=function(){function Osc(t){if(function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Osc),_defineProperty(this,"value",new o.Z),_defineProperty(this,"offsetPhase",-Math.PI/2),"function"==typeof t.speed?(this.speedFunc=t.speed,this.speed=this.speedFunc(0)):this.speed=t.speed||Math.PI/180,void 0===t.radius)this.radius=new o.Z(1,1);else if("function"==typeof t.radius){this.radiusFunc=t.radius;var r=this.radiusFunc(0);this.radius="number"==typeof r?new o.Z(r,r):r}else this.radius="number"==typeof t.radius?new o.Z(t.radius,t.radius):t.radius.clone();this.offset=t.offset?t.offset.clone():new o.Z(0,0),this.offsetPhase=t.offsetPhase||0,this.phase=t.phase||0,this.theta=new o.Z(this.phase,this.phase),this.process()}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Osc,[{key:"x",get:function get(){return this.value.x}},{key:"y",get:function get(){return this.value.y}},{key:"reset",value:function reset(){this.theta=new o.Z(this.phase,this.phase)}},{key:"step",value:function step(t){if(this.speedFunc){var r=this.speedFunc(t);"number"!=typeof r||isNaN(r)||(this.speed=r)}if(this.radiusFunc){var i=this.radiusFunc(t);this.radius="number"==typeof i?new o.Z(i,i):i}this.theta.x=this.theta.x+this.speed,this.theta.y=this.theta.y+this.speed,this.process()}},{key:"process",value:function process(){this.value.x=this.offset.x+Math.cos(this.offsetPhase+this.theta.x)*this.radius.x,this.value.y=this.offset.y+Math.sin(this.offsetPhase+this.theta.y)*this.radius.y,isNaN(this.value.x)}}]),Osc}()},109:(t,r,i)=>{"use strict";i.d(r,{Z:()=>l});var o=i(561);function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var a=0,l=function(){function Range(t){!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Range),this.name=t.name||"Var-".concat(a++),this.min=t.min,this.max=t.max,this.step=t.step||.01,this._value=t.initialValue||t.min,this._disableRandomize=t.disableRandomize||!1}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Range,[{key:"value",get:function get(){return this._value},set:function set(t){this._value=(0,o.re)(t,this.max,this.min)}},{key:"setValue",value:function setValue(t){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];this.value=t,r&&this.inputElem&&(this.inputElem.value=String(this.value))}},{key:"randomize",value:function randomize(){if(!this._disableRandomize){var t=Math.round((this.max-this.min)/this.step),r=this.min+(0,o.c4)(t)*this.step;this.step>=1&&(r=Math.round(r)),this.setValue(r,!0)}}}]),Range}()},393:(t,r,i)=>{"use strict";function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}i.d(r,{ii:()=>h,tv:()=>d});var o=_createClass((function Grad(t,r,i){var o=this;!function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Grad),_defineProperty(this,"dot2",(function(t,r){return o.x*t+o.y*r})),_defineProperty(this,"dot3",(function(t,r,i){return o.x*t+o.y*r+o.z*i})),this.x=t,this.y=r,this.z=i})),a=[new o(1,1,0),new o(-1,1,0),new o(1,-1,0),new o(-1,-1,0),new o(1,0,1),new o(-1,0,1),new o(1,0,-1),new o(-1,0,-1),new o(0,1,1),new o(0,-1,1),new o(0,1,-1),new o(0,-1,-1)],l=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],u=new Array(512),c=new Array(512),h=function seedNoise(t){t>0&&t<1&&(t*=65536),(t=Math.floor(t))<256&&(t|=t<<8);for(var r=0;r<256;r++){var i=1&r?l[r]^255&t:l[r]^t>>8&255;u[r]=u[r+256]=i,c[r]=c[r+256]=a[i%12]}};h(0);Math.sqrt(3),Math.sqrt(3);var p=function fade(t){return t*t*t*(t*(6*t-15)+10)},y=function lerp(t,r,i){return(1-i)*t+i*r},d=function perlin2(t,r){var i=Math.floor(t),o=Math.floor(r);t-=i,r-=o;var a=c[(i&=255)+u[o&=255]].dot2(t,r),l=c[i+u[o+1]].dot2(t,r-1),h=c[i+1+u[o]].dot2(t-1,r),d=c[i+1+u[o+1]].dot2(t-1,r-1),v=p(t);return y(y(a,h,v),y(l,d,v),p(r))}},561:(t,r,i)=>{"use strict";i.d(r,{Cn:()=>v,EA:()=>l,Id:()=>m,Qy:()=>c,c4:()=>a,iH:()=>y,mb:()=>d,rO:()=>u,re:()=>h});var o=i(497),a=function randIntRange(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Math.round((0,o.M)()*(t-r)+r)},l=function randFloatRange(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return(0,o.M)()*(t-r)+r},u=function randInt(t){return Math.round((0,o.M)()*(2*t)-t)},c=function randFloat(t){return(0,o.M)()*(2*t)-t},h=function wrap(t,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return t<i?r:t>r?i:t},p=function countDecimals(t){for(var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:8,i=1,o=0;o<r;o++,i/=10)if(t%i==0)return o;return r},y=function floatString(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;if(t%1==0)return String(t);var i=Math.min(p(t,r),r);return 0===i?String(Math.round(t)):t.toFixed(i)},d=function normalizeRadian(t){return(t+Math.PI)%(2*Math.PI)-Math.PI},v=function segmentValue(t,r,i){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return(i-o)/r*t},m=function degToRad(t){return t*Math.PI/180}},132:(t,r,i)=>{"use strict";i.d(r,{Bj:()=>h,CS:()=>l,S3:()=>c,mb:()=>u});var o=i(323),a=1e-6,l=function arcToPoints(t,r,i,a,l){return i%=2*Math.PI,a%=2*Math.PI,{start:new o.Z(l*Math.cos(i)+t,l*Math.sin(i)+r),end:new o.Z(l*Math.cos(a)+t,l*Math.sin(a)+r)}},u=function pointsToArc(t,r,i){t=t.clone(),r=r.clone(),i=i.clone();var o=Math.atan2(r.y-t.y,r.x-t.x),a=Math.atan2(i.y-t.y,i.x-t.x),l=t.subtract(r).magnitude();return a===o&&(a+=2*Math.PI),{start:o,end:a,radius:l}},c=function sameFloat(t,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a;if(Math.abs(t-r)<a)return!0;var o=Math.abs(t),l=Math.abs(r),u=Math.abs(t-r);return t==r||(0===t||0===r||u<Number.MIN_VALUE?u<i*Number.MIN_VALUE:u/(o+l)<i)},h=function samePos(t,r){return c(t.x,r.x)&&c(t.y,r.y)}},497:(t,r,i)=>{"use strict";i.d(r,{M:()=>c,b:()=>u});var o=123456789,a=987654321,l=4294967295,u=function seedRandom(t){o=123456789+t&l,a=987654321-t&l},c=function random(){return(((a=36969*(65535&a)+(a>>16)&l)<<16)+(65535&(o=18e3*(65535&o)+(o>>16)&l))>>>0)/4294967296};u(0)},486:function(t,r,i){var o;t=i.nmd(t),function(){var a,l="Expected a function",u="__lodash_hash_undefined__",c="__lodash_placeholder__",h=16,p=32,y=64,d=128,v=256,m=1/0,P=9007199254740991,g=NaN,_=4294967295,b=[["ary",d],["bind",1],["bindKey",2],["curry",8],["curryRight",h],["flip",512],["partial",p],["partialRight",y],["rearg",v]],x="[object Arguments]",C="[object Array]",I="[object Boolean]",w="[object Date]",O="[object Error]",S="[object Function]",T="[object GeneratorFunction]",E="[object Map]",L="[object Number]",A="[object Object]",k="[object Promise]",M="[object RegExp]",R="[object Set]",B="[object String]",N="[object Symbol]",D="[object WeakMap]",j="[object ArrayBuffer]",X="[object DataView]",Y="[object Float32Array]",z="[object Float64Array]",Z="[object Int8Array]",W="[object Int16Array]",q="[object Int32Array]",V="[object Uint8Array]",G="[object Uint8ClampedArray]",U="[object Uint16Array]",H="[object Uint32Array]",J=/\b__p \+= '';/g,K=/\b(__p \+=) '' \+/g,$=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Q=/&(?:amp|lt|gt|quot|#39);/g,tt=/[&<>"']/g,et=RegExp(Q.source),rt=RegExp(tt.source),nt=/<%-([\s\S]+?)%>/g,it=/<%([\s\S]+?)%>/g,ot=/<%=([\s\S]+?)%>/g,st=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,at=/^\w*$/,lt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ut=/[\\^$.*+?()[\]{}|]/g,ct=RegExp(ut.source),ht=/^\s+/,ft=/\s/,pt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,yt=/\{\n\/\* \[wrapped with (.+)\] \*/,dt=/,? & /,vt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,mt=/[()=,{}\[\]\/\s]/,Pt=/\\(\\)?/g,gt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,_t=/\w*$/,bt=/^[-+]0x[0-9a-f]+$/i,xt=/^0b[01]+$/i,Ct=/^\[object .+?Constructor\]$/,It=/^0o[0-7]+$/i,wt=/^(?:0|[1-9]\d*)$/,Ot=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,St=/($^)/,Tt=/['\n\r\u2028\u2029\\]/g,Et="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Lt="\\u2700-\\u27bf",At="a-z\\xdf-\\xf6\\xf8-\\xff",kt="A-Z\\xc0-\\xd6\\xd8-\\xde",Mt="\\ufe0e\\ufe0f",Rt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Bt="['’]",Nt="[\\ud800-\\udfff]",Dt="["+Rt+"]",jt="["+Et+"]",Xt="\\d+",Yt="[\\u2700-\\u27bf]",Ft="["+At+"]",zt="[^\\ud800-\\udfff"+Rt+Xt+Lt+At+kt+"]",Zt="\\ud83c[\\udffb-\\udfff]",Wt="[^\\ud800-\\udfff]",qt="(?:\\ud83c[\\udde6-\\uddff]){2}",Vt="[\\ud800-\\udbff][\\udc00-\\udfff]",Gt="["+kt+"]",Ut="(?:"+Ft+"|"+zt+")",Ht="(?:"+Gt+"|"+zt+")",Jt="(?:['’](?:d|ll|m|re|s|t|ve))?",Kt="(?:['’](?:D|LL|M|RE|S|T|VE))?",$t="(?:"+jt+"|"+Zt+")"+"?",Qt="[\\ufe0e\\ufe0f]?",te=Qt+$t+("(?:\\u200d(?:"+[Wt,qt,Vt].join("|")+")"+Qt+$t+")*"),ee="(?:"+[Yt,qt,Vt].join("|")+")"+te,re="(?:"+[Wt+jt+"?",jt,qt,Vt,Nt].join("|")+")",ne=RegExp(Bt,"g"),ie=RegExp(jt,"g"),oe=RegExp(Zt+"(?="+Zt+")|"+re+te,"g"),se=RegExp([Gt+"?"+Ft+"+"+Jt+"(?="+[Dt,Gt,"$"].join("|")+")",Ht+"+"+Kt+"(?="+[Dt,Gt+Ut,"$"].join("|")+")",Gt+"?"+Ut+"+"+Jt,Gt+"+"+Kt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Xt,ee].join("|"),"g"),ae=RegExp("[\\u200d\\ud800-\\udfff"+Et+Mt+"]"),le=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ue=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ce=-1,he={};he[Y]=he[z]=he[Z]=he[W]=he[q]=he[V]=he[G]=he[U]=he[H]=!0,he[x]=he[C]=he[j]=he[I]=he[X]=he[w]=he[O]=he[S]=he[E]=he[L]=he[A]=he[M]=he[R]=he[B]=he[D]=!1;var fe={};fe[x]=fe[C]=fe[j]=fe[X]=fe[I]=fe[w]=fe[Y]=fe[z]=fe[Z]=fe[W]=fe[q]=fe[E]=fe[L]=fe[A]=fe[M]=fe[R]=fe[B]=fe[N]=fe[V]=fe[G]=fe[U]=fe[H]=!0,fe[O]=fe[S]=fe[D]=!1;var pe={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ye=parseFloat,de=parseInt,ve="object"==typeof i.g&&i.g&&i.g.Object===Object&&i.g,me="object"==typeof self&&self&&self.Object===Object&&self,Pe=ve||me||Function("return this")(),ge=r&&!r.nodeType&&r,_e=ge&&t&&!t.nodeType&&t,be=_e&&_e.exports===ge,xe=be&&ve.process,Ce=function(){try{var t=_e&&_e.require&&_e.require("util").types;return t||xe&&xe.binding&&xe.binding("util")}catch(t){}}(),Ie=Ce&&Ce.isArrayBuffer,we=Ce&&Ce.isDate,Oe=Ce&&Ce.isMap,Se=Ce&&Ce.isRegExp,Te=Ce&&Ce.isSet,Ee=Ce&&Ce.isTypedArray;function apply(t,r,i){switch(i.length){case 0:return t.call(r);case 1:return t.call(r,i[0]);case 2:return t.call(r,i[0],i[1]);case 3:return t.call(r,i[0],i[1],i[2])}return t.apply(r,i)}function arrayAggregator(t,r,i,o){for(var a=-1,l=null==t?0:t.length;++a<l;){var u=t[a];r(o,u,i(u),t)}return o}function arrayEach(t,r){for(var i=-1,o=null==t?0:t.length;++i<o&&!1!==r(t[i],i,t););return t}function arrayEachRight(t,r){for(var i=null==t?0:t.length;i--&&!1!==r(t[i],i,t););return t}function arrayEvery(t,r){for(var i=-1,o=null==t?0:t.length;++i<o;)if(!r(t[i],i,t))return!1;return!0}function arrayFilter(t,r){for(var i=-1,o=null==t?0:t.length,a=0,l=[];++i<o;){var u=t[i];r(u,i,t)&&(l[a++]=u)}return l}function arrayIncludes(t,r){return!!(null==t?0:t.length)&&baseIndexOf(t,r,0)>-1}function arrayIncludesWith(t,r,i){for(var o=-1,a=null==t?0:t.length;++o<a;)if(i(r,t[o]))return!0;return!1}function arrayMap(t,r){for(var i=-1,o=null==t?0:t.length,a=Array(o);++i<o;)a[i]=r(t[i],i,t);return a}function arrayPush(t,r){for(var i=-1,o=r.length,a=t.length;++i<o;)t[a+i]=r[i];return t}function arrayReduce(t,r,i,o){var a=-1,l=null==t?0:t.length;for(o&&l&&(i=t[++a]);++a<l;)i=r(i,t[a],a,t);return i}function arrayReduceRight(t,r,i,o){var a=null==t?0:t.length;for(o&&a&&(i=t[--a]);a--;)i=r(i,t[a],a,t);return i}function arraySome(t,r){for(var i=-1,o=null==t?0:t.length;++i<o;)if(r(t[i],i,t))return!0;return!1}var Le=baseProperty("length");function baseFindKey(t,r,i){var o;return i(t,(function(t,i,a){if(r(t,i,a))return o=i,!1})),o}function baseFindIndex(t,r,i,o){for(var a=t.length,l=i+(o?1:-1);o?l--:++l<a;)if(r(t[l],l,t))return l;return-1}function baseIndexOf(t,r,i){return r==r?function strictIndexOf(t,r,i){var o=i-1,a=t.length;for(;++o<a;)if(t[o]===r)return o;return-1}(t,r,i):baseFindIndex(t,baseIsNaN,i)}function baseIndexOfWith(t,r,i,o){for(var a=i-1,l=t.length;++a<l;)if(o(t[a],r))return a;return-1}function baseIsNaN(t){return t!=t}function baseMean(t,r){var i=null==t?0:t.length;return i?baseSum(t,r)/i:g}function baseProperty(t){return function(r){return null==r?a:r[t]}}function basePropertyOf(t){return function(r){return null==t?a:t[r]}}function baseReduce(t,r,i,o,a){return a(t,(function(t,a,l){i=o?(o=!1,t):r(i,t,a,l)})),i}function baseSum(t,r){for(var i,o=-1,l=t.length;++o<l;){var u=r(t[o]);u!==a&&(i=i===a?u:i+u)}return i}function baseTimes(t,r){for(var i=-1,o=Array(t);++i<t;)o[i]=r(i);return o}function baseTrim(t){return t?t.slice(0,trimmedEndIndex(t)+1).replace(ht,""):t}function baseUnary(t){return function(r){return t(r)}}function baseValues(t,r){return arrayMap(r,(function(r){return t[r]}))}function cacheHas(t,r){return t.has(r)}function charsStartIndex(t,r){for(var i=-1,o=t.length;++i<o&&baseIndexOf(r,t[i],0)>-1;);return i}function charsEndIndex(t,r){for(var i=t.length;i--&&baseIndexOf(r,t[i],0)>-1;);return i}function countHolders(t,r){for(var i=t.length,o=0;i--;)t[i]===r&&++o;return o}var Ae=basePropertyOf({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),ke=basePropertyOf({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function escapeStringChar(t){return"\\"+pe[t]}function hasUnicode(t){return ae.test(t)}function mapToArray(t){var r=-1,i=Array(t.size);return t.forEach((function(t,o){i[++r]=[o,t]})),i}function overArg(t,r){return function(i){return t(r(i))}}function replaceHolders(t,r){for(var i=-1,o=t.length,a=0,l=[];++i<o;){var u=t[i];u!==r&&u!==c||(t[i]=c,l[a++]=i)}return l}function setToArray(t){var r=-1,i=Array(t.size);return t.forEach((function(t){i[++r]=t})),i}function setToPairs(t){var r=-1,i=Array(t.size);return t.forEach((function(t){i[++r]=[t,t]})),i}function stringSize(t){return hasUnicode(t)?function unicodeSize(t){var r=oe.lastIndex=0;for(;oe.test(t);)++r;return r}(t):Le(t)}function stringToArray(t){return hasUnicode(t)?function unicodeToArray(t){return t.match(oe)||[]}(t):function asciiToArray(t){return t.split("")}(t)}function trimmedEndIndex(t){for(var r=t.length;r--&&ft.test(t.charAt(r)););return r}var Me=basePropertyOf({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Re=function runInContext(t){var r,i=(t=null==t?Pe:Re.defaults(Pe.Object(),t,Re.pick(Pe,ue))).Array,o=t.Date,ft=t.Error,Et=t.Function,Lt=t.Math,At=t.Object,kt=t.RegExp,Mt=t.String,Rt=t.TypeError,Bt=i.prototype,Nt=Et.prototype,Dt=At.prototype,jt=t["__core-js_shared__"],Xt=Nt.toString,Yt=Dt.hasOwnProperty,Ft=0,zt=(r=/[^.]+$/.exec(jt&&jt.keys&&jt.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"",Zt=Dt.toString,Wt=Xt.call(At),qt=Pe._,Vt=kt("^"+Xt.call(Yt).replace(ut,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Gt=be?t.Buffer:a,Ut=t.Symbol,Ht=t.Uint8Array,Jt=Gt?Gt.allocUnsafe:a,Kt=overArg(At.getPrototypeOf,At),$t=At.create,Qt=Dt.propertyIsEnumerable,te=Bt.splice,ee=Ut?Ut.isConcatSpreadable:a,re=Ut?Ut.iterator:a,oe=Ut?Ut.toStringTag:a,ae=function(){try{var t=getNative(At,"defineProperty");return t({},"",{}),t}catch(t){}}(),pe=t.clearTimeout!==Pe.clearTimeout&&t.clearTimeout,ve=o&&o.now!==Pe.Date.now&&o.now,me=t.setTimeout!==Pe.setTimeout&&t.setTimeout,ge=Lt.ceil,_e=Lt.floor,xe=At.getOwnPropertySymbols,Ce=Gt?Gt.isBuffer:a,Le=t.isFinite,Be=Bt.join,Ne=overArg(At.keys,At),De=Lt.max,je=Lt.min,Xe=o.now,Ye=t.parseInt,Fe=Lt.random,ze=Bt.reverse,Ze=getNative(t,"DataView"),We=getNative(t,"Map"),qe=getNative(t,"Promise"),Ve=getNative(t,"Set"),Ge=getNative(t,"WeakMap"),Ue=getNative(At,"create"),He=Ge&&new Ge,Je={},Ke=toSource(Ze),$e=toSource(We),Qe=toSource(qe),tr=toSource(Ve),er=toSource(Ge),rr=Ut?Ut.prototype:a,nr=rr?rr.valueOf:a,ir=rr?rr.toString:a;function lodash(t){if(isObjectLike(t)&&!un(t)&&!(t instanceof LazyWrapper)){if(t instanceof LodashWrapper)return t;if(Yt.call(t,"__wrapped__"))return wrapperClone(t)}return new LodashWrapper(t)}var or=function(){function object(){}return function(t){if(!isObject(t))return{};if($t)return $t(t);object.prototype=t;var r=new object;return object.prototype=a,r}}();function baseLodash(){}function LodashWrapper(t,r){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!r,this.__index__=0,this.__values__=a}function LazyWrapper(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=_,this.__views__=[]}function Hash(t){var r=-1,i=null==t?0:t.length;for(this.clear();++r<i;){var o=t[r];this.set(o[0],o[1])}}function ListCache(t){var r=-1,i=null==t?0:t.length;for(this.clear();++r<i;){var o=t[r];this.set(o[0],o[1])}}function MapCache(t){var r=-1,i=null==t?0:t.length;for(this.clear();++r<i;){var o=t[r];this.set(o[0],o[1])}}function SetCache(t){var r=-1,i=null==t?0:t.length;for(this.__data__=new MapCache;++r<i;)this.add(t[r])}function Stack(t){var r=this.__data__=new ListCache(t);this.size=r.size}function arrayLikeKeys(t,r){var i=un(t),o=!i&&ln(t),a=!i&&!o&&hn(t),l=!i&&!o&&!a&&vn(t),u=i||o||a||l,c=u?baseTimes(t.length,Mt):[],h=c.length;for(var p in t)!r&&!Yt.call(t,p)||u&&("length"==p||a&&("offset"==p||"parent"==p)||l&&("buffer"==p||"byteLength"==p||"byteOffset"==p)||isIndex(p,h))||c.push(p);return c}function arraySample(t){var r=t.length;return r?t[baseRandom(0,r-1)]:a}function arraySampleSize(t,r){return shuffleSelf(copyArray(t),baseClamp(r,0,t.length))}function arrayShuffle(t){return shuffleSelf(copyArray(t))}function assignMergeValue(t,r,i){(i!==a&&!eq(t[r],i)||i===a&&!(r in t))&&baseAssignValue(t,r,i)}function assignValue(t,r,i){var o=t[r];Yt.call(t,r)&&eq(o,i)&&(i!==a||r in t)||baseAssignValue(t,r,i)}function assocIndexOf(t,r){for(var i=t.length;i--;)if(eq(t[i][0],r))return i;return-1}function baseAggregator(t,r,i,o){return sr(t,(function(t,a,l){r(o,t,i(t),l)})),o}function baseAssign(t,r){return t&&copyObject(r,keys(r),t)}function baseAssignValue(t,r,i){"__proto__"==r&&ae?ae(t,r,{configurable:!0,enumerable:!0,value:i,writable:!0}):t[r]=i}function baseAt(t,r){for(var o=-1,l=r.length,u=i(l),c=null==t;++o<l;)u[o]=c?a:get(t,r[o]);return u}function baseClamp(t,r,i){return t==t&&(i!==a&&(t=t<=i?t:i),r!==a&&(t=t>=r?t:r)),t}function baseClone(t,r,i,o,l,u){var c,h=1&r,p=2&r,y=4&r;if(i&&(c=l?i(t,o,l,u):i(t)),c!==a)return c;if(!isObject(t))return t;var d=un(t);if(d){if(c=function initCloneArray(t){var r=t.length,i=new t.constructor(r);r&&"string"==typeof t[0]&&Yt.call(t,"index")&&(i.index=t.index,i.input=t.input);return i}(t),!h)return copyArray(t,c)}else{var v=Pr(t),m=v==S||v==T;if(hn(t))return cloneBuffer(t,h);if(v==A||v==x||m&&!l){if(c=p||m?{}:initCloneObject(t),!h)return p?function copySymbolsIn(t,r){return copyObject(t,mr(t),r)}(t,function baseAssignIn(t,r){return t&&copyObject(r,keysIn(r),t)}(c,t)):function copySymbols(t,r){return copyObject(t,vr(t),r)}(t,baseAssign(c,t))}else{if(!fe[v])return l?t:{};c=function initCloneByTag(t,r,i){var o=t.constructor;switch(r){case j:return cloneArrayBuffer(t);case I:case w:return new o(+t);case X:return function cloneDataView(t,r){var i=r?cloneArrayBuffer(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.byteLength)}(t,i);case Y:case z:case Z:case W:case q:case V:case G:case U:case H:return cloneTypedArray(t,i);case E:return new o;case L:case B:return new o(t);case M:return function cloneRegExp(t){var r=new t.constructor(t.source,_t.exec(t));return r.lastIndex=t.lastIndex,r}(t);case R:return new o;case N:return function cloneSymbol(t){return nr?At(nr.call(t)):{}}(t)}}(t,v,h)}}u||(u=new Stack);var P=u.get(t);if(P)return P;u.set(t,c),dn(t)?t.forEach((function(o){c.add(baseClone(o,r,i,o,t,u))})):pn(t)&&t.forEach((function(o,a){c.set(a,baseClone(o,r,i,a,t,u))}));var g=d?a:(y?p?getAllKeysIn:getAllKeys:p?keysIn:keys)(t);return arrayEach(g||t,(function(o,a){g&&(o=t[a=o]),assignValue(c,a,baseClone(o,r,i,a,t,u))})),c}function baseConformsTo(t,r,i){var o=i.length;if(null==t)return!o;for(t=At(t);o--;){var l=i[o],u=r[l],c=t[l];if(c===a&&!(l in t)||!u(c))return!1}return!0}function baseDelay(t,r,i){if("function"!=typeof t)throw new Rt(l);return br((function(){t.apply(a,i)}),r)}function baseDifference(t,r,i,o){var a=-1,l=arrayIncludes,u=!0,c=t.length,h=[],p=r.length;if(!c)return h;i&&(r=arrayMap(r,baseUnary(i))),o?(l=arrayIncludesWith,u=!1):r.length>=200&&(l=cacheHas,u=!1,r=new SetCache(r));t:for(;++a<c;){var y=t[a],d=null==i?y:i(y);if(y=o||0!==y?y:0,u&&d==d){for(var v=p;v--;)if(r[v]===d)continue t;h.push(y)}else l(r,d,o)||h.push(y)}return h}lodash.templateSettings={escape:nt,evaluate:it,interpolate:ot,variable:"",imports:{_:lodash}},lodash.prototype=baseLodash.prototype,lodash.prototype.constructor=lodash,LodashWrapper.prototype=or(baseLodash.prototype),LodashWrapper.prototype.constructor=LodashWrapper,LazyWrapper.prototype=or(baseLodash.prototype),LazyWrapper.prototype.constructor=LazyWrapper,Hash.prototype.clear=function hashClear(){this.__data__=Ue?Ue(null):{},this.size=0},Hash.prototype.delete=function hashDelete(t){var r=this.has(t)&&delete this.__data__[t];return this.size-=r?1:0,r},Hash.prototype.get=function hashGet(t){var r=this.__data__;if(Ue){var i=r[t];return i===u?a:i}return Yt.call(r,t)?r[t]:a},Hash.prototype.has=function hashHas(t){var r=this.__data__;return Ue?r[t]!==a:Yt.call(r,t)},Hash.prototype.set=function hashSet(t,r){var i=this.__data__;return this.size+=this.has(t)?0:1,i[t]=Ue&&r===a?u:r,this},ListCache.prototype.clear=function listCacheClear(){this.__data__=[],this.size=0},ListCache.prototype.delete=function listCacheDelete(t){var r=this.__data__,i=assocIndexOf(r,t);return!(i<0)&&(i==r.length-1?r.pop():te.call(r,i,1),--this.size,!0)},ListCache.prototype.get=function listCacheGet(t){var r=this.__data__,i=assocIndexOf(r,t);return i<0?a:r[i][1]},ListCache.prototype.has=function listCacheHas(t){return assocIndexOf(this.__data__,t)>-1},ListCache.prototype.set=function listCacheSet(t,r){var i=this.__data__,o=assocIndexOf(i,t);return o<0?(++this.size,i.push([t,r])):i[o][1]=r,this},MapCache.prototype.clear=function mapCacheClear(){this.size=0,this.__data__={hash:new Hash,map:new(We||ListCache),string:new Hash}},MapCache.prototype.delete=function mapCacheDelete(t){var r=getMapData(this,t).delete(t);return this.size-=r?1:0,r},MapCache.prototype.get=function mapCacheGet(t){return getMapData(this,t).get(t)},MapCache.prototype.has=function mapCacheHas(t){return getMapData(this,t).has(t)},MapCache.prototype.set=function mapCacheSet(t,r){var i=getMapData(this,t),o=i.size;return i.set(t,r),this.size+=i.size==o?0:1,this},SetCache.prototype.add=SetCache.prototype.push=function setCacheAdd(t){return this.__data__.set(t,u),this},SetCache.prototype.has=function setCacheHas(t){return this.__data__.has(t)},Stack.prototype.clear=function stackClear(){this.__data__=new ListCache,this.size=0},Stack.prototype.delete=function stackDelete(t){var r=this.__data__,i=r.delete(t);return this.size=r.size,i},Stack.prototype.get=function stackGet(t){return this.__data__.get(t)},Stack.prototype.has=function stackHas(t){return this.__data__.has(t)},Stack.prototype.set=function stackSet(t,r){var i=this.__data__;if(i instanceof ListCache){var o=i.__data__;if(!We||o.length<199)return o.push([t,r]),this.size=++i.size,this;i=this.__data__=new MapCache(o)}return i.set(t,r),this.size=i.size,this};var sr=createBaseEach(baseForOwn),ar=createBaseEach(baseForOwnRight,!0);function baseEvery(t,r){var i=!0;return sr(t,(function(t,o,a){return i=!!r(t,o,a)})),i}function baseExtremum(t,r,i){for(var o=-1,l=t.length;++o<l;){var u=t[o],c=r(u);if(null!=c&&(h===a?c==c&&!isSymbol(c):i(c,h)))var h=c,p=u}return p}function baseFilter(t,r){var i=[];return sr(t,(function(t,o,a){r(t,o,a)&&i.push(t)})),i}function baseFlatten(t,r,i,o,a){var l=-1,u=t.length;for(i||(i=isFlattenable),a||(a=[]);++l<u;){var c=t[l];r>0&&i(c)?r>1?baseFlatten(c,r-1,i,o,a):arrayPush(a,c):o||(a[a.length]=c)}return a}var lr=createBaseFor(),ur=createBaseFor(!0);function baseForOwn(t,r){return t&&lr(t,r,keys)}function baseForOwnRight(t,r){return t&&ur(t,r,keys)}function baseFunctions(t,r){return arrayFilter(r,(function(r){return isFunction(t[r])}))}function baseGet(t,r){for(var i=0,o=(r=castPath(r,t)).length;null!=t&&i<o;)t=t[toKey(r[i++])];return i&&i==o?t:a}function baseGetAllKeys(t,r,i){var o=r(t);return un(t)?o:arrayPush(o,i(t))}function baseGetTag(t){return null==t?t===a?"[object Undefined]":"[object Null]":oe&&oe in At(t)?function getRawTag(t){var r=Yt.call(t,oe),i=t[oe];try{t[oe]=a;var o=!0}catch(t){}var l=Zt.call(t);o&&(r?t[oe]=i:delete t[oe]);return l}(t):function objectToString(t){return Zt.call(t)}(t)}function baseGt(t,r){return t>r}function baseHas(t,r){return null!=t&&Yt.call(t,r)}function baseHasIn(t,r){return null!=t&&r in At(t)}function baseIntersection(t,r,o){for(var l=o?arrayIncludesWith:arrayIncludes,u=t[0].length,c=t.length,h=c,p=i(c),y=1/0,d=[];h--;){var v=t[h];h&&r&&(v=arrayMap(v,baseUnary(r))),y=je(v.length,y),p[h]=!o&&(r||u>=120&&v.length>=120)?new SetCache(h&&v):a}v=t[0];var m=-1,P=p[0];t:for(;++m<u&&d.length<y;){var g=v[m],_=r?r(g):g;if(g=o||0!==g?g:0,!(P?cacheHas(P,_):l(d,_,o))){for(h=c;--h;){var b=p[h];if(!(b?cacheHas(b,_):l(t[h],_,o)))continue t}P&&P.push(_),d.push(g)}}return d}function baseInvoke(t,r,i){var o=null==(t=parent(t,r=castPath(r,t)))?t:t[toKey(last(r))];return null==o?a:apply(o,t,i)}function baseIsArguments(t){return isObjectLike(t)&&baseGetTag(t)==x}function baseIsEqual(t,r,i,o,l){return t===r||(null==t||null==r||!isObjectLike(t)&&!isObjectLike(r)?t!=t&&r!=r:function baseIsEqualDeep(t,r,i,o,l,u){var c=un(t),h=un(r),p=c?C:Pr(t),y=h?C:Pr(r),d=(p=p==x?A:p)==A,v=(y=y==x?A:y)==A,m=p==y;if(m&&hn(t)){if(!hn(r))return!1;c=!0,d=!1}if(m&&!d)return u||(u=new Stack),c||vn(t)?equalArrays(t,r,i,o,l,u):function equalByTag(t,r,i,o,a,l,u){switch(i){case X:if(t.byteLength!=r.byteLength||t.byteOffset!=r.byteOffset)return!1;t=t.buffer,r=r.buffer;case j:return!(t.byteLength!=r.byteLength||!l(new Ht(t),new Ht(r)));case I:case w:case L:return eq(+t,+r);case O:return t.name==r.name&&t.message==r.message;case M:case B:return t==r+"";case E:var c=mapToArray;case R:var h=1&o;if(c||(c=setToArray),t.size!=r.size&&!h)return!1;var p=u.get(t);if(p)return p==r;o|=2,u.set(t,r);var y=equalArrays(c(t),c(r),o,a,l,u);return u.delete(t),y;case N:if(nr)return nr.call(t)==nr.call(r)}return!1}(t,r,p,i,o,l,u);if(!(1&i)){var P=d&&Yt.call(t,"__wrapped__"),g=v&&Yt.call(r,"__wrapped__");if(P||g){var _=P?t.value():t,b=g?r.value():r;return u||(u=new Stack),l(_,b,i,o,u)}}if(!m)return!1;return u||(u=new Stack),function equalObjects(t,r,i,o,l,u){var c=1&i,h=getAllKeys(t),p=h.length,y=getAllKeys(r).length;if(p!=y&&!c)return!1;var d=p;for(;d--;){var v=h[d];if(!(c?v in r:Yt.call(r,v)))return!1}var m=u.get(t),P=u.get(r);if(m&&P)return m==r&&P==t;var g=!0;u.set(t,r),u.set(r,t);var _=c;for(;++d<p;){var b=t[v=h[d]],x=r[v];if(o)var C=c?o(x,b,v,r,t,u):o(b,x,v,t,r,u);if(!(C===a?b===x||l(b,x,i,o,u):C)){g=!1;break}_||(_="constructor"==v)}if(g&&!_){var I=t.constructor,w=r.constructor;I==w||!("constructor"in t)||!("constructor"in r)||"function"==typeof I&&I instanceof I&&"function"==typeof w&&w instanceof w||(g=!1)}return u.delete(t),u.delete(r),g}(t,r,i,o,l,u)}(t,r,i,o,baseIsEqual,l))}function baseIsMatch(t,r,i,o){var l=i.length,u=l,c=!o;if(null==t)return!u;for(t=At(t);l--;){var h=i[l];if(c&&h[2]?h[1]!==t[h[0]]:!(h[0]in t))return!1}for(;++l<u;){var p=(h=i[l])[0],y=t[p],d=h[1];if(c&&h[2]){if(y===a&&!(p in t))return!1}else{var v=new Stack;if(o)var m=o(y,d,p,t,r,v);if(!(m===a?baseIsEqual(d,y,3,o,v):m))return!1}}return!0}function baseIsNative(t){return!(!isObject(t)||function isMasked(t){return!!zt&&zt in t}(t))&&(isFunction(t)?Vt:Ct).test(toSource(t))}function baseIteratee(t){return"function"==typeof t?t:null==t?identity:"object"==typeof t?un(t)?baseMatchesProperty(t[0],t[1]):baseMatches(t):property(t)}function baseKeys(t){if(!isPrototype(t))return Ne(t);var r=[];for(var i in At(t))Yt.call(t,i)&&"constructor"!=i&&r.push(i);return r}function baseKeysIn(t){if(!isObject(t))return function nativeKeysIn(t){var r=[];if(null!=t)for(var i in At(t))r.push(i);return r}(t);var r=isPrototype(t),i=[];for(var o in t)("constructor"!=o||!r&&Yt.call(t,o))&&i.push(o);return i}function baseLt(t,r){return t<r}function baseMap(t,r){var o=-1,a=isArrayLike(t)?i(t.length):[];return sr(t,(function(t,i,l){a[++o]=r(t,i,l)})),a}function baseMatches(t){var r=getMatchData(t);return 1==r.length&&r[0][2]?matchesStrictComparable(r[0][0],r[0][1]):function(i){return i===t||baseIsMatch(i,t,r)}}function baseMatchesProperty(t,r){return isKey(t)&&isStrictComparable(r)?matchesStrictComparable(toKey(t),r):function(i){var o=get(i,t);return o===a&&o===r?hasIn(i,t):baseIsEqual(r,o,3)}}function baseMerge(t,r,i,o,l){t!==r&&lr(r,(function(u,c){if(l||(l=new Stack),isObject(u))!function baseMergeDeep(t,r,i,o,l,u,c){var h=safeGet(t,i),p=safeGet(r,i),y=c.get(p);if(y)return void assignMergeValue(t,i,y);var d=u?u(h,p,i+"",t,r,c):a,v=d===a;if(v){var m=un(p),P=!m&&hn(p),g=!m&&!P&&vn(p);d=p,m||P||g?un(h)?d=h:isArrayLikeObject(h)?d=copyArray(h):P?(v=!1,d=cloneBuffer(p,!0)):g?(v=!1,d=cloneTypedArray(p,!0)):d=[]:isPlainObject(p)||ln(p)?(d=h,ln(h)?d=toPlainObject(h):isObject(h)&&!isFunction(h)||(d=initCloneObject(p))):v=!1}v&&(c.set(p,d),l(d,p,o,u,c),c.delete(p));assignMergeValue(t,i,d)}(t,r,c,i,baseMerge,o,l);else{var h=o?o(safeGet(t,c),u,c+"",t,r,l):a;h===a&&(h=u),assignMergeValue(t,c,h)}}),keysIn)}function baseNth(t,r){var i=t.length;if(i)return isIndex(r+=r<0?i:0,i)?t[r]:a}function baseOrderBy(t,r,i){r=r.length?arrayMap(r,(function(t){return un(t)?function(r){return baseGet(r,1===t.length?t[0]:t)}:t})):[identity];var o=-1;r=arrayMap(r,baseUnary(getIteratee()));var a=baseMap(t,(function(t,i,a){var l=arrayMap(r,(function(r){return r(t)}));return{criteria:l,index:++o,value:t}}));return function baseSortBy(t,r){var i=t.length;for(t.sort(r);i--;)t[i]=t[i].value;return t}(a,(function(t,r){return function compareMultiple(t,r,i){var o=-1,a=t.criteria,l=r.criteria,u=a.length,c=i.length;for(;++o<u;){var h=compareAscending(a[o],l[o]);if(h)return o>=c?h:h*("desc"==i[o]?-1:1)}return t.index-r.index}(t,r,i)}))}function basePickBy(t,r,i){for(var o=-1,a=r.length,l={};++o<a;){var u=r[o],c=baseGet(t,u);i(c,u)&&baseSet(l,castPath(u,t),c)}return l}function basePullAll(t,r,i,o){var a=o?baseIndexOfWith:baseIndexOf,l=-1,u=r.length,c=t;for(t===r&&(r=copyArray(r)),i&&(c=arrayMap(t,baseUnary(i)));++l<u;)for(var h=0,p=r[l],y=i?i(p):p;(h=a(c,y,h,o))>-1;)c!==t&&te.call(c,h,1),te.call(t,h,1);return t}function basePullAt(t,r){for(var i=t?r.length:0,o=i-1;i--;){var a=r[i];if(i==o||a!==l){var l=a;isIndex(a)?te.call(t,a,1):baseUnset(t,a)}}return t}function baseRandom(t,r){return t+_e(Fe()*(r-t+1))}function baseRepeat(t,r){var i="";if(!t||r<1||r>P)return i;do{r%2&&(i+=t),(r=_e(r/2))&&(t+=t)}while(r);return i}function baseRest(t,r){return xr(overRest(t,r,identity),t+"")}function baseSample(t){return arraySample(values(t))}function baseSampleSize(t,r){var i=values(t);return shuffleSelf(i,baseClamp(r,0,i.length))}function baseSet(t,r,i,o){if(!isObject(t))return t;for(var l=-1,u=(r=castPath(r,t)).length,c=u-1,h=t;null!=h&&++l<u;){var p=toKey(r[l]),y=i;if("__proto__"===p||"constructor"===p||"prototype"===p)return t;if(l!=c){var d=h[p];(y=o?o(d,p,h):a)===a&&(y=isObject(d)?d:isIndex(r[l+1])?[]:{})}assignValue(h,p,y),h=h[p]}return t}var cr=He?function(t,r){return He.set(t,r),t}:identity,hr=ae?function(t,r){return ae(t,"toString",{configurable:!0,enumerable:!1,value:constant(r),writable:!0})}:identity;function baseShuffle(t){return shuffleSelf(values(t))}function baseSlice(t,r,o){var a=-1,l=t.length;r<0&&(r=-r>l?0:l+r),(o=o>l?l:o)<0&&(o+=l),l=r>o?0:o-r>>>0,r>>>=0;for(var u=i(l);++a<l;)u[a]=t[a+r];return u}function baseSome(t,r){var i;return sr(t,(function(t,o,a){return!(i=r(t,o,a))})),!!i}function baseSortedIndex(t,r,i){var o=0,a=null==t?o:t.length;if("number"==typeof r&&r==r&&a<=2147483647){for(;o<a;){var l=o+a>>>1,u=t[l];null!==u&&!isSymbol(u)&&(i?u<=r:u<r)?o=l+1:a=l}return a}return baseSortedIndexBy(t,r,identity,i)}function baseSortedIndexBy(t,r,i,o){var l=0,u=null==t?0:t.length;if(0===u)return 0;for(var c=(r=i(r))!=r,h=null===r,p=isSymbol(r),y=r===a;l<u;){var d=_e((l+u)/2),v=i(t[d]),m=v!==a,P=null===v,g=v==v,_=isSymbol(v);if(c)var b=o||g;else b=y?g&&(o||m):h?g&&m&&(o||!P):p?g&&m&&!P&&(o||!_):!P&&!_&&(o?v<=r:v<r);b?l=d+1:u=d}return je(u,4294967294)}function baseSortedUniq(t,r){for(var i=-1,o=t.length,a=0,l=[];++i<o;){var u=t[i],c=r?r(u):u;if(!i||!eq(c,h)){var h=c;l[a++]=0===u?0:u}}return l}function baseToNumber(t){return"number"==typeof t?t:isSymbol(t)?g:+t}function baseToString(t){if("string"==typeof t)return t;if(un(t))return arrayMap(t,baseToString)+"";if(isSymbol(t))return ir?ir.call(t):"";var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}function baseUniq(t,r,i){var o=-1,a=arrayIncludes,l=t.length,u=!0,c=[],h=c;if(i)u=!1,a=arrayIncludesWith;else if(l>=200){var p=r?null:yr(t);if(p)return setToArray(p);u=!1,a=cacheHas,h=new SetCache}else h=r?[]:c;t:for(;++o<l;){var y=t[o],d=r?r(y):y;if(y=i||0!==y?y:0,u&&d==d){for(var v=h.length;v--;)if(h[v]===d)continue t;r&&h.push(d),c.push(y)}else a(h,d,i)||(h!==c&&h.push(d),c.push(y))}return c}function baseUnset(t,r){return null==(t=parent(t,r=castPath(r,t)))||delete t[toKey(last(r))]}function baseUpdate(t,r,i,o){return baseSet(t,r,i(baseGet(t,r)),o)}function baseWhile(t,r,i,o){for(var a=t.length,l=o?a:-1;(o?l--:++l<a)&&r(t[l],l,t););return i?baseSlice(t,o?0:l,o?l+1:a):baseSlice(t,o?l+1:0,o?a:l)}function baseWrapperValue(t,r){var i=t;return i instanceof LazyWrapper&&(i=i.value()),arrayReduce(r,(function(t,r){return r.func.apply(r.thisArg,arrayPush([t],r.args))}),i)}function baseXor(t,r,o){var a=t.length;if(a<2)return a?baseUniq(t[0]):[];for(var l=-1,u=i(a);++l<a;)for(var c=t[l],h=-1;++h<a;)h!=l&&(u[l]=baseDifference(u[l]||c,t[h],r,o));return baseUniq(baseFlatten(u,1),r,o)}function baseZipObject(t,r,i){for(var o=-1,l=t.length,u=r.length,c={};++o<l;){var h=o<u?r[o]:a;i(c,t[o],h)}return c}function castArrayLikeObject(t){return isArrayLikeObject(t)?t:[]}function castFunction(t){return"function"==typeof t?t:identity}function castPath(t,r){return un(t)?t:isKey(t,r)?[t]:Cr(toString(t))}var fr=baseRest;function castSlice(t,r,i){var o=t.length;return i=i===a?o:i,!r&&i>=o?t:baseSlice(t,r,i)}var pr=pe||function(t){return Pe.clearTimeout(t)};function cloneBuffer(t,r){if(r)return t.slice();var i=t.length,o=Jt?Jt(i):new t.constructor(i);return t.copy(o),o}function cloneArrayBuffer(t){var r=new t.constructor(t.byteLength);return new Ht(r).set(new Ht(t)),r}function cloneTypedArray(t,r){var i=r?cloneArrayBuffer(t.buffer):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}function compareAscending(t,r){if(t!==r){var i=t!==a,o=null===t,l=t==t,u=isSymbol(t),c=r!==a,h=null===r,p=r==r,y=isSymbol(r);if(!h&&!y&&!u&&t>r||u&&c&&p&&!h&&!y||o&&c&&p||!i&&p||!l)return 1;if(!o&&!u&&!y&&t<r||y&&i&&l&&!o&&!u||h&&i&&l||!c&&l||!p)return-1}return 0}function composeArgs(t,r,o,a){for(var l=-1,u=t.length,c=o.length,h=-1,p=r.length,y=De(u-c,0),d=i(p+y),v=!a;++h<p;)d[h]=r[h];for(;++l<c;)(v||l<u)&&(d[o[l]]=t[l]);for(;y--;)d[h++]=t[l++];return d}function composeArgsRight(t,r,o,a){for(var l=-1,u=t.length,c=-1,h=o.length,p=-1,y=r.length,d=De(u-h,0),v=i(d+y),m=!a;++l<d;)v[l]=t[l];for(var P=l;++p<y;)v[P+p]=r[p];for(;++c<h;)(m||l<u)&&(v[P+o[c]]=t[l++]);return v}function copyArray(t,r){var o=-1,a=t.length;for(r||(r=i(a));++o<a;)r[o]=t[o];return r}function copyObject(t,r,i,o){var l=!i;i||(i={});for(var u=-1,c=r.length;++u<c;){var h=r[u],p=o?o(i[h],t[h],h,i,t):a;p===a&&(p=t[h]),l?baseAssignValue(i,h,p):assignValue(i,h,p)}return i}function createAggregator(t,r){return function(i,o){var a=un(i)?arrayAggregator:baseAggregator,l=r?r():{};return a(i,t,getIteratee(o,2),l)}}function createAssigner(t){return baseRest((function(r,i){var o=-1,l=i.length,u=l>1?i[l-1]:a,c=l>2?i[2]:a;for(u=t.length>3&&"function"==typeof u?(l--,u):a,c&&isIterateeCall(i[0],i[1],c)&&(u=l<3?a:u,l=1),r=At(r);++o<l;){var h=i[o];h&&t(r,h,o,u)}return r}))}function createBaseEach(t,r){return function(i,o){if(null==i)return i;if(!isArrayLike(i))return t(i,o);for(var a=i.length,l=r?a:-1,u=At(i);(r?l--:++l<a)&&!1!==o(u[l],l,u););return i}}function createBaseFor(t){return function(r,i,o){for(var a=-1,l=At(r),u=o(r),c=u.length;c--;){var h=u[t?c:++a];if(!1===i(l[h],h,l))break}return r}}function createCaseFirst(t){return function(r){var i=hasUnicode(r=toString(r))?stringToArray(r):a,o=i?i[0]:r.charAt(0),l=i?castSlice(i,1).join(""):r.slice(1);return o[t]()+l}}function createCompounder(t){return function(r){return arrayReduce(words(deburr(r).replace(ne,"")),t,"")}}function createCtor(t){return function(){var r=arguments;switch(r.length){case 0:return new t;case 1:return new t(r[0]);case 2:return new t(r[0],r[1]);case 3:return new t(r[0],r[1],r[2]);case 4:return new t(r[0],r[1],r[2],r[3]);case 5:return new t(r[0],r[1],r[2],r[3],r[4]);case 6:return new t(r[0],r[1],r[2],r[3],r[4],r[5]);case 7:return new t(r[0],r[1],r[2],r[3],r[4],r[5],r[6])}var i=or(t.prototype),o=t.apply(i,r);return isObject(o)?o:i}}function createFind(t){return function(r,i,o){var l=At(r);if(!isArrayLike(r)){var u=getIteratee(i,3);r=keys(r),i=function(t){return u(l[t],t,l)}}var c=t(r,i,o);return c>-1?l[u?r[c]:c]:a}}function createFlow(t){return flatRest((function(r){var i=r.length,o=i,u=LodashWrapper.prototype.thru;for(t&&r.reverse();o--;){var c=r[o];if("function"!=typeof c)throw new Rt(l);if(u&&!h&&"wrapper"==getFuncName(c))var h=new LodashWrapper([],!0)}for(o=h?o:i;++o<i;){var p=getFuncName(c=r[o]),y="wrapper"==p?dr(c):a;h=y&&isLaziable(y[0])&&424==y[1]&&!y[4].length&&1==y[9]?h[getFuncName(y[0])].apply(h,y[3]):1==c.length&&isLaziable(c)?h[p]():h.thru(c)}return function(){var t=arguments,o=t[0];if(h&&1==t.length&&un(o))return h.plant(o).value();for(var a=0,l=i?r[a].apply(this,t):o;++a<i;)l=r[a].call(this,l);return l}}))}function createHybrid(t,r,o,l,u,c,h,p,y,v){var m=r&d,P=1&r,g=2&r,_=24&r,b=512&r,x=g?a:createCtor(t);return function wrapper(){for(var a=arguments.length,d=i(a),C=a;C--;)d[C]=arguments[C];if(_)var I=getHolder(wrapper),w=countHolders(d,I);if(l&&(d=composeArgs(d,l,u,_)),c&&(d=composeArgsRight(d,c,h,_)),a-=w,_&&a<v){var O=replaceHolders(d,I);return createRecurry(t,r,createHybrid,wrapper.placeholder,o,d,O,p,y,v-a)}var S=P?o:this,T=g?S[t]:t;return a=d.length,p?d=reorder(d,p):b&&a>1&&d.reverse(),m&&y<a&&(d.length=y),this&&this!==Pe&&this instanceof wrapper&&(T=x||createCtor(T)),T.apply(S,d)}}function createInverter(t,r){return function(i,o){return function baseInverter(t,r,i,o){return baseForOwn(t,(function(t,a,l){r(o,i(t),a,l)})),o}(i,t,r(o),{})}}function createMathOperation(t,r){return function(i,o){var l;if(i===a&&o===a)return r;if(i!==a&&(l=i),o!==a){if(l===a)return o;"string"==typeof i||"string"==typeof o?(i=baseToString(i),o=baseToString(o)):(i=baseToNumber(i),o=baseToNumber(o)),l=t(i,o)}return l}}function createOver(t){return flatRest((function(r){return r=arrayMap(r,baseUnary(getIteratee())),baseRest((function(i){var o=this;return t(r,(function(t){return apply(t,o,i)}))}))}))}function createPadding(t,r){var i=(r=r===a?" ":baseToString(r)).length;if(i<2)return i?baseRepeat(r,t):r;var o=baseRepeat(r,ge(t/stringSize(r)));return hasUnicode(r)?castSlice(stringToArray(o),0,t).join(""):o.slice(0,t)}function createRange(t){return function(r,o,l){return l&&"number"!=typeof l&&isIterateeCall(r,o,l)&&(o=l=a),r=toFinite(r),o===a?(o=r,r=0):o=toFinite(o),function baseRange(t,r,o,a){for(var l=-1,u=De(ge((r-t)/(o||1)),0),c=i(u);u--;)c[a?u:++l]=t,t+=o;return c}(r,o,l=l===a?r<o?1:-1:toFinite(l),t)}}function createRelationalOperation(t){return function(r,i){return"string"==typeof r&&"string"==typeof i||(r=toNumber(r),i=toNumber(i)),t(r,i)}}function createRecurry(t,r,i,o,l,u,c,h,d,v){var m=8&r;r|=m?p:y,4&(r&=~(m?y:p))||(r&=-4);var P=[t,r,l,m?u:a,m?c:a,m?a:u,m?a:c,h,d,v],g=i.apply(a,P);return isLaziable(t)&&_r(g,P),g.placeholder=o,setWrapToString(g,t,r)}function createRound(t){var r=Lt[t];return function(t,i){if(t=toNumber(t),(i=null==i?0:je(toInteger(i),292))&&Le(t)){var o=(toString(t)+"e").split("e");return+((o=(toString(r(o[0]+"e"+(+o[1]+i)))+"e").split("e"))[0]+"e"+(+o[1]-i))}return r(t)}}var yr=Ve&&1/setToArray(new Ve([,-0]))[1]==m?function(t){return new Ve(t)}:noop;function createToPairs(t){return function(r){var i=Pr(r);return i==E?mapToArray(r):i==R?setToPairs(r):function baseToPairs(t,r){return arrayMap(r,(function(r){return[r,t[r]]}))}(r,t(r))}}function createWrap(t,r,o,u,m,P,g,_){var b=2&r;if(!b&&"function"!=typeof t)throw new Rt(l);var x=u?u.length:0;if(x||(r&=-97,u=m=a),g=g===a?g:De(toInteger(g),0),_=_===a?_:toInteger(_),x-=m?m.length:0,r&y){var C=u,I=m;u=m=a}var w=b?a:dr(t),O=[t,r,o,u,m,C,I,P,g,_];if(w&&function mergeData(t,r){var i=t[1],o=r[1],a=i|o,l=a<131,u=o==d&&8==i||o==d&&i==v&&t[7].length<=r[8]||384==o&&r[7].length<=r[8]&&8==i;if(!l&&!u)return t;1&o&&(t[2]=r[2],a|=1&i?0:4);var h=r[3];if(h){var p=t[3];t[3]=p?composeArgs(p,h,r[4]):h,t[4]=p?replaceHolders(t[3],c):r[4]}(h=r[5])&&(p=t[5],t[5]=p?composeArgsRight(p,h,r[6]):h,t[6]=p?replaceHolders(t[5],c):r[6]);(h=r[7])&&(t[7]=h);o&d&&(t[8]=null==t[8]?r[8]:je(t[8],r[8]));null==t[9]&&(t[9]=r[9]);return t[0]=r[0],t[1]=a,t}(O,w),t=O[0],r=O[1],o=O[2],u=O[3],m=O[4],!(_=O[9]=O[9]===a?b?0:t.length:De(O[9]-x,0))&&24&r&&(r&=-25),r&&1!=r)S=8==r||r==h?function createCurry(t,r,o){var l=createCtor(t);return function wrapper(){for(var u=arguments.length,c=i(u),h=u,p=getHolder(wrapper);h--;)c[h]=arguments[h];var y=u<3&&c[0]!==p&&c[u-1]!==p?[]:replaceHolders(c,p);return(u-=y.length)<o?createRecurry(t,r,createHybrid,wrapper.placeholder,a,c,y,a,a,o-u):apply(this&&this!==Pe&&this instanceof wrapper?l:t,this,c)}}(t,r,_):r!=p&&33!=r||m.length?createHybrid.apply(a,O):function createPartial(t,r,o,a){var l=1&r,u=createCtor(t);return function wrapper(){for(var r=-1,c=arguments.length,h=-1,p=a.length,y=i(p+c),d=this&&this!==Pe&&this instanceof wrapper?u:t;++h<p;)y[h]=a[h];for(;c--;)y[h++]=arguments[++r];return apply(d,l?o:this,y)}}(t,r,o,u);else var S=function createBind(t,r,i){var o=1&r,a=createCtor(t);return function wrapper(){return(this&&this!==Pe&&this instanceof wrapper?a:t).apply(o?i:this,arguments)}}(t,r,o);return setWrapToString((w?cr:_r)(S,O),t,r)}function customDefaultsAssignIn(t,r,i,o){return t===a||eq(t,Dt[i])&&!Yt.call(o,i)?r:t}function customDefaultsMerge(t,r,i,o,l,u){return isObject(t)&&isObject(r)&&(u.set(r,t),baseMerge(t,r,a,customDefaultsMerge,u),u.delete(r)),t}function customOmitClone(t){return isPlainObject(t)?a:t}function equalArrays(t,r,i,o,l,u){var c=1&i,h=t.length,p=r.length;if(h!=p&&!(c&&p>h))return!1;var y=u.get(t),d=u.get(r);if(y&&d)return y==r&&d==t;var v=-1,m=!0,P=2&i?new SetCache:a;for(u.set(t,r),u.set(r,t);++v<h;){var g=t[v],_=r[v];if(o)var b=c?o(_,g,v,r,t,u):o(g,_,v,t,r,u);if(b!==a){if(b)continue;m=!1;break}if(P){if(!arraySome(r,(function(t,r){if(!cacheHas(P,r)&&(g===t||l(g,t,i,o,u)))return P.push(r)}))){m=!1;break}}else if(g!==_&&!l(g,_,i,o,u)){m=!1;break}}return u.delete(t),u.delete(r),m}function flatRest(t){return xr(overRest(t,a,flatten),t+"")}function getAllKeys(t){return baseGetAllKeys(t,keys,vr)}function getAllKeysIn(t){return baseGetAllKeys(t,keysIn,mr)}var dr=He?function(t){return He.get(t)}:noop;function getFuncName(t){for(var r=t.name+"",i=Je[r],o=Yt.call(Je,r)?i.length:0;o--;){var a=i[o],l=a.func;if(null==l||l==t)return a.name}return r}function getHolder(t){return(Yt.call(lodash,"placeholder")?lodash:t).placeholder}function getIteratee(){var t=lodash.iteratee||iteratee;return t=t===iteratee?baseIteratee:t,arguments.length?t(arguments[0],arguments[1]):t}function getMapData(t,r){var i=t.__data__;return function isKeyable(t){var r=typeof t;return"string"==r||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==t:null===t}(r)?i["string"==typeof r?"string":"hash"]:i.map}function getMatchData(t){for(var r=keys(t),i=r.length;i--;){var o=r[i],a=t[o];r[i]=[o,a,isStrictComparable(a)]}return r}function getNative(t,r){var i=function getValue(t,r){return null==t?a:t[r]}(t,r);return baseIsNative(i)?i:a}var vr=xe?function(t){return null==t?[]:(t=At(t),arrayFilter(xe(t),(function(r){return Qt.call(t,r)})))}:stubArray,mr=xe?function(t){for(var r=[];t;)arrayPush(r,vr(t)),t=Kt(t);return r}:stubArray,Pr=baseGetTag;function hasPath(t,r,i){for(var o=-1,a=(r=castPath(r,t)).length,l=!1;++o<a;){var u=toKey(r[o]);if(!(l=null!=t&&i(t,u)))break;t=t[u]}return l||++o!=a?l:!!(a=null==t?0:t.length)&&isLength(a)&&isIndex(u,a)&&(un(t)||ln(t))}function initCloneObject(t){return"function"!=typeof t.constructor||isPrototype(t)?{}:or(Kt(t))}function isFlattenable(t){return un(t)||ln(t)||!!(ee&&t&&t[ee])}function isIndex(t,r){var i=typeof t;return!!(r=null==r?P:r)&&("number"==i||"symbol"!=i&&wt.test(t))&&t>-1&&t%1==0&&t<r}function isIterateeCall(t,r,i){if(!isObject(i))return!1;var o=typeof r;return!!("number"==o?isArrayLike(i)&&isIndex(r,i.length):"string"==o&&r in i)&&eq(i[r],t)}function isKey(t,r){if(un(t))return!1;var i=typeof t;return!("number"!=i&&"symbol"!=i&&"boolean"!=i&&null!=t&&!isSymbol(t))||(at.test(t)||!st.test(t)||null!=r&&t in At(r))}function isLaziable(t){var r=getFuncName(t),i=lodash[r];if("function"!=typeof i||!(r in LazyWrapper.prototype))return!1;if(t===i)return!0;var o=dr(i);return!!o&&t===o[0]}(Ze&&Pr(new Ze(new ArrayBuffer(1)))!=X||We&&Pr(new We)!=E||qe&&Pr(qe.resolve())!=k||Ve&&Pr(new Ve)!=R||Ge&&Pr(new Ge)!=D)&&(Pr=function(t){var r=baseGetTag(t),i=r==A?t.constructor:a,o=i?toSource(i):"";if(o)switch(o){case Ke:return X;case $e:return E;case Qe:return k;case tr:return R;case er:return D}return r});var gr=jt?isFunction:stubFalse;function isPrototype(t){var r=t&&t.constructor;return t===("function"==typeof r&&r.prototype||Dt)}function isStrictComparable(t){return t==t&&!isObject(t)}function matchesStrictComparable(t,r){return function(i){return null!=i&&(i[t]===r&&(r!==a||t in At(i)))}}function overRest(t,r,o){return r=De(r===a?t.length-1:r,0),function(){for(var a=arguments,l=-1,u=De(a.length-r,0),c=i(u);++l<u;)c[l]=a[r+l];l=-1;for(var h=i(r+1);++l<r;)h[l]=a[l];return h[r]=o(c),apply(t,this,h)}}function parent(t,r){return r.length<2?t:baseGet(t,baseSlice(r,0,-1))}function reorder(t,r){for(var i=t.length,o=je(r.length,i),l=copyArray(t);o--;){var u=r[o];t[o]=isIndex(u,i)?l[u]:a}return t}function safeGet(t,r){if(("constructor"!==r||"function"!=typeof t[r])&&"__proto__"!=r)return t[r]}var _r=shortOut(cr),br=me||function(t,r){return Pe.setTimeout(t,r)},xr=shortOut(hr);function setWrapToString(t,r,i){var o=r+"";return xr(t,function insertWrapDetails(t,r){var i=r.length;if(!i)return t;var o=i-1;return r[o]=(i>1?"& ":"")+r[o],r=r.join(i>2?", ":" "),t.replace(pt,"{\n/* [wrapped with "+r+"] */\n")}(o,function updateWrapDetails(t,r){return arrayEach(b,(function(i){var o="_."+i[0];r&i[1]&&!arrayIncludes(t,o)&&t.push(o)})),t.sort()}(function getWrapDetails(t){var r=t.match(yt);return r?r[1].split(dt):[]}(o),i)))}function shortOut(t){var r=0,i=0;return function(){var o=Xe(),l=16-(o-i);if(i=o,l>0){if(++r>=800)return arguments[0]}else r=0;return t.apply(a,arguments)}}function shuffleSelf(t,r){var i=-1,o=t.length,l=o-1;for(r=r===a?o:r;++i<r;){var u=baseRandom(i,l),c=t[u];t[u]=t[i],t[i]=c}return t.length=r,t}var Cr=function memoizeCapped(t){var r=memoize(t,(function(t){return 500===i.size&&i.clear(),t})),i=r.cache;return r}((function(t){var r=[];return 46===t.charCodeAt(0)&&r.push(""),t.replace(lt,(function(t,i,o,a){r.push(o?a.replace(Pt,"$1"):i||t)})),r}));function toKey(t){if("string"==typeof t||isSymbol(t))return t;var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}function toSource(t){if(null!=t){try{return Xt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function wrapperClone(t){if(t instanceof LazyWrapper)return t.clone();var r=new LodashWrapper(t.__wrapped__,t.__chain__);return r.__actions__=copyArray(t.__actions__),r.__index__=t.__index__,r.__values__=t.__values__,r}var Ir=baseRest((function(t,r){return isArrayLikeObject(t)?baseDifference(t,baseFlatten(r,1,isArrayLikeObject,!0)):[]})),wr=baseRest((function(t,r){var i=last(r);return isArrayLikeObject(i)&&(i=a),isArrayLikeObject(t)?baseDifference(t,baseFlatten(r,1,isArrayLikeObject,!0),getIteratee(i,2)):[]})),Or=baseRest((function(t,r){var i=last(r);return isArrayLikeObject(i)&&(i=a),isArrayLikeObject(t)?baseDifference(t,baseFlatten(r,1,isArrayLikeObject,!0),a,i):[]}));function findIndex(t,r,i){var o=null==t?0:t.length;if(!o)return-1;var a=null==i?0:toInteger(i);return a<0&&(a=De(o+a,0)),baseFindIndex(t,getIteratee(r,3),a)}function findLastIndex(t,r,i){var o=null==t?0:t.length;if(!o)return-1;var l=o-1;return i!==a&&(l=toInteger(i),l=i<0?De(o+l,0):je(l,o-1)),baseFindIndex(t,getIteratee(r,3),l,!0)}function flatten(t){return(null==t?0:t.length)?baseFlatten(t,1):[]}function head(t){return t&&t.length?t[0]:a}var Sr=baseRest((function(t){var r=arrayMap(t,castArrayLikeObject);return r.length&&r[0]===t[0]?baseIntersection(r):[]})),Tr=baseRest((function(t){var r=last(t),i=arrayMap(t,castArrayLikeObject);return r===last(i)?r=a:i.pop(),i.length&&i[0]===t[0]?baseIntersection(i,getIteratee(r,2)):[]})),Er=baseRest((function(t){var r=last(t),i=arrayMap(t,castArrayLikeObject);return(r="function"==typeof r?r:a)&&i.pop(),i.length&&i[0]===t[0]?baseIntersection(i,a,r):[]}));function last(t){var r=null==t?0:t.length;return r?t[r-1]:a}var Lr=baseRest(pullAll);function pullAll(t,r){return t&&t.length&&r&&r.length?basePullAll(t,r):t}var Ar=flatRest((function(t,r){var i=null==t?0:t.length,o=baseAt(t,r);return basePullAt(t,arrayMap(r,(function(t){return isIndex(t,i)?+t:t})).sort(compareAscending)),o}));function reverse(t){return null==t?t:ze.call(t)}var kr=baseRest((function(t){return baseUniq(baseFlatten(t,1,isArrayLikeObject,!0))})),Mr=baseRest((function(t){var r=last(t);return isArrayLikeObject(r)&&(r=a),baseUniq(baseFlatten(t,1,isArrayLikeObject,!0),getIteratee(r,2))})),Rr=baseRest((function(t){var r=last(t);return r="function"==typeof r?r:a,baseUniq(baseFlatten(t,1,isArrayLikeObject,!0),a,r)}));function unzip(t){if(!t||!t.length)return[];var r=0;return t=arrayFilter(t,(function(t){if(isArrayLikeObject(t))return r=De(t.length,r),!0})),baseTimes(r,(function(r){return arrayMap(t,baseProperty(r))}))}function unzipWith(t,r){if(!t||!t.length)return[];var i=unzip(t);return null==r?i:arrayMap(i,(function(t){return apply(r,a,t)}))}var Br=baseRest((function(t,r){return isArrayLikeObject(t)?baseDifference(t,r):[]})),Nr=baseRest((function(t){return baseXor(arrayFilter(t,isArrayLikeObject))})),Dr=baseRest((function(t){var r=last(t);return isArrayLikeObject(r)&&(r=a),baseXor(arrayFilter(t,isArrayLikeObject),getIteratee(r,2))})),jr=baseRest((function(t){var r=last(t);return r="function"==typeof r?r:a,baseXor(arrayFilter(t,isArrayLikeObject),a,r)})),Xr=baseRest(unzip);var Yr=baseRest((function(t){var r=t.length,i=r>1?t[r-1]:a;return i="function"==typeof i?(t.pop(),i):a,unzipWith(t,i)}));function chain(t){var r=lodash(t);return r.__chain__=!0,r}function thru(t,r){return r(t)}var Fr=flatRest((function(t){var r=t.length,i=r?t[0]:0,o=this.__wrapped__,interceptor=function(r){return baseAt(r,t)};return!(r>1||this.__actions__.length)&&o instanceof LazyWrapper&&isIndex(i)?((o=o.slice(i,+i+(r?1:0))).__actions__.push({func:thru,args:[interceptor],thisArg:a}),new LodashWrapper(o,this.__chain__).thru((function(t){return r&&!t.length&&t.push(a),t}))):this.thru(interceptor)}));var zr=createAggregator((function(t,r,i){Yt.call(t,i)?++t[i]:baseAssignValue(t,i,1)}));var Zr=createFind(findIndex),Wr=createFind(findLastIndex);function forEach(t,r){return(un(t)?arrayEach:sr)(t,getIteratee(r,3))}function forEachRight(t,r){return(un(t)?arrayEachRight:ar)(t,getIteratee(r,3))}var qr=createAggregator((function(t,r,i){Yt.call(t,i)?t[i].push(r):baseAssignValue(t,i,[r])}));var Vr=baseRest((function(t,r,o){var a=-1,l="function"==typeof r,u=isArrayLike(t)?i(t.length):[];return sr(t,(function(t){u[++a]=l?apply(r,t,o):baseInvoke(t,r,o)})),u})),Gr=createAggregator((function(t,r,i){baseAssignValue(t,i,r)}));function map(t,r){return(un(t)?arrayMap:baseMap)(t,getIteratee(r,3))}var Ur=createAggregator((function(t,r,i){t[i?0:1].push(r)}),(function(){return[[],[]]}));var Hr=baseRest((function(t,r){if(null==t)return[];var i=r.length;return i>1&&isIterateeCall(t,r[0],r[1])?r=[]:i>2&&isIterateeCall(r[0],r[1],r[2])&&(r=[r[0]]),baseOrderBy(t,baseFlatten(r,1),[])})),Jr=ve||function(){return Pe.Date.now()};function ary(t,r,i){return r=i?a:r,r=t&&null==r?t.length:r,createWrap(t,d,a,a,a,a,r)}function before(t,r){var i;if("function"!=typeof r)throw new Rt(l);return t=toInteger(t),function(){return--t>0&&(i=r.apply(this,arguments)),t<=1&&(r=a),i}}var Kr=baseRest((function(t,r,i){var o=1;if(i.length){var a=replaceHolders(i,getHolder(Kr));o|=p}return createWrap(t,o,r,i,a)})),$r=baseRest((function(t,r,i){var o=3;if(i.length){var a=replaceHolders(i,getHolder($r));o|=p}return createWrap(r,o,t,i,a)}));function debounce(t,r,i){var o,u,c,h,p,y,d=0,v=!1,m=!1,P=!0;if("function"!=typeof t)throw new Rt(l);function invokeFunc(r){var i=o,l=u;return o=u=a,d=r,h=t.apply(l,i)}function leadingEdge(t){return d=t,p=br(timerExpired,r),v?invokeFunc(t):h}function shouldInvoke(t){var i=t-y;return y===a||i>=r||i<0||m&&t-d>=c}function timerExpired(){var t=Jr();if(shouldInvoke(t))return trailingEdge(t);p=br(timerExpired,function remainingWait(t){var i=r-(t-y);return m?je(i,c-(t-d)):i}(t))}function trailingEdge(t){return p=a,P&&o?invokeFunc(t):(o=u=a,h)}function debounced(){var t=Jr(),i=shouldInvoke(t);if(o=arguments,u=this,y=t,i){if(p===a)return leadingEdge(y);if(m)return pr(p),p=br(timerExpired,r),invokeFunc(y)}return p===a&&(p=br(timerExpired,r)),h}return r=toNumber(r)||0,isObject(i)&&(v=!!i.leading,c=(m="maxWait"in i)?De(toNumber(i.maxWait)||0,r):c,P="trailing"in i?!!i.trailing:P),debounced.cancel=function cancel(){p!==a&&pr(p),d=0,o=y=u=p=a},debounced.flush=function flush(){return p===a?h:trailingEdge(Jr())},debounced}var Qr=baseRest((function(t,r){return baseDelay(t,1,r)})),tn=baseRest((function(t,r,i){return baseDelay(t,toNumber(r)||0,i)}));function memoize(t,r){if("function"!=typeof t||null!=r&&"function"!=typeof r)throw new Rt(l);var memoized=function(){var i=arguments,o=r?r.apply(this,i):i[0],a=memoized.cache;if(a.has(o))return a.get(o);var l=t.apply(this,i);return memoized.cache=a.set(o,l)||a,l};return memoized.cache=new(memoize.Cache||MapCache),memoized}function negate(t){if("function"!=typeof t)throw new Rt(l);return function(){var r=arguments;switch(r.length){case 0:return!t.call(this);case 1:return!t.call(this,r[0]);case 2:return!t.call(this,r[0],r[1]);case 3:return!t.call(this,r[0],r[1],r[2])}return!t.apply(this,r)}}memoize.Cache=MapCache;var en=fr((function(t,r){var i=(r=1==r.length&&un(r[0])?arrayMap(r[0],baseUnary(getIteratee())):arrayMap(baseFlatten(r,1),baseUnary(getIteratee()))).length;return baseRest((function(o){for(var a=-1,l=je(o.length,i);++a<l;)o[a]=r[a].call(this,o[a]);return apply(t,this,o)}))})),rn=baseRest((function(t,r){var i=replaceHolders(r,getHolder(rn));return createWrap(t,p,a,r,i)})),nn=baseRest((function(t,r){var i=replaceHolders(r,getHolder(nn));return createWrap(t,y,a,r,i)})),on=flatRest((function(t,r){return createWrap(t,v,a,a,a,r)}));function eq(t,r){return t===r||t!=t&&r!=r}var sn=createRelationalOperation(baseGt),an=createRelationalOperation((function(t,r){return t>=r})),ln=baseIsArguments(function(){return arguments}())?baseIsArguments:function(t){return isObjectLike(t)&&Yt.call(t,"callee")&&!Qt.call(t,"callee")},un=i.isArray,cn=Ie?baseUnary(Ie):function baseIsArrayBuffer(t){return isObjectLike(t)&&baseGetTag(t)==j};function isArrayLike(t){return null!=t&&isLength(t.length)&&!isFunction(t)}function isArrayLikeObject(t){return isObjectLike(t)&&isArrayLike(t)}var hn=Ce||stubFalse,fn=we?baseUnary(we):function baseIsDate(t){return isObjectLike(t)&&baseGetTag(t)==w};function isError(t){if(!isObjectLike(t))return!1;var r=baseGetTag(t);return r==O||"[object DOMException]"==r||"string"==typeof t.message&&"string"==typeof t.name&&!isPlainObject(t)}function isFunction(t){if(!isObject(t))return!1;var r=baseGetTag(t);return r==S||r==T||"[object AsyncFunction]"==r||"[object Proxy]"==r}function isInteger(t){return"number"==typeof t&&t==toInteger(t)}function isLength(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=P}function isObject(t){var r=typeof t;return null!=t&&("object"==r||"function"==r)}function isObjectLike(t){return null!=t&&"object"==typeof t}var pn=Oe?baseUnary(Oe):function baseIsMap(t){return isObjectLike(t)&&Pr(t)==E};function isNumber(t){return"number"==typeof t||isObjectLike(t)&&baseGetTag(t)==L}function isPlainObject(t){if(!isObjectLike(t)||baseGetTag(t)!=A)return!1;var r=Kt(t);if(null===r)return!0;var i=Yt.call(r,"constructor")&&r.constructor;return"function"==typeof i&&i instanceof i&&Xt.call(i)==Wt}var yn=Se?baseUnary(Se):function baseIsRegExp(t){return isObjectLike(t)&&baseGetTag(t)==M};var dn=Te?baseUnary(Te):function baseIsSet(t){return isObjectLike(t)&&Pr(t)==R};function isString(t){return"string"==typeof t||!un(t)&&isObjectLike(t)&&baseGetTag(t)==B}function isSymbol(t){return"symbol"==typeof t||isObjectLike(t)&&baseGetTag(t)==N}var vn=Ee?baseUnary(Ee):function baseIsTypedArray(t){return isObjectLike(t)&&isLength(t.length)&&!!he[baseGetTag(t)]};var mn=createRelationalOperation(baseLt),Pn=createRelationalOperation((function(t,r){return t<=r}));function toArray(t){if(!t)return[];if(isArrayLike(t))return isString(t)?stringToArray(t):copyArray(t);if(re&&t[re])return function iteratorToArray(t){for(var r,i=[];!(r=t.next()).done;)i.push(r.value);return i}(t[re]());var r=Pr(t);return(r==E?mapToArray:r==R?setToArray:values)(t)}function toFinite(t){return t?(t=toNumber(t))===m||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function toInteger(t){var r=toFinite(t),i=r%1;return r==r?i?r-i:r:0}function toLength(t){return t?baseClamp(toInteger(t),0,_):0}function toNumber(t){if("number"==typeof t)return t;if(isSymbol(t))return g;if(isObject(t)){var r="function"==typeof t.valueOf?t.valueOf():t;t=isObject(r)?r+"":r}if("string"!=typeof t)return 0===t?t:+t;t=baseTrim(t);var i=xt.test(t);return i||It.test(t)?de(t.slice(2),i?2:8):bt.test(t)?g:+t}function toPlainObject(t){return copyObject(t,keysIn(t))}function toString(t){return null==t?"":baseToString(t)}var gn=createAssigner((function(t,r){if(isPrototype(r)||isArrayLike(r))copyObject(r,keys(r),t);else for(var i in r)Yt.call(r,i)&&assignValue(t,i,r[i])})),_n=createAssigner((function(t,r){copyObject(r,keysIn(r),t)})),bn=createAssigner((function(t,r,i,o){copyObject(r,keysIn(r),t,o)})),xn=createAssigner((function(t,r,i,o){copyObject(r,keys(r),t,o)})),Cn=flatRest(baseAt);var In=baseRest((function(t,r){t=At(t);var i=-1,o=r.length,l=o>2?r[2]:a;for(l&&isIterateeCall(r[0],r[1],l)&&(o=1);++i<o;)for(var u=r[i],c=keysIn(u),h=-1,p=c.length;++h<p;){var y=c[h],d=t[y];(d===a||eq(d,Dt[y])&&!Yt.call(t,y))&&(t[y]=u[y])}return t})),wn=baseRest((function(t){return t.push(a,customDefaultsMerge),apply(Ln,a,t)}));function get(t,r,i){var o=null==t?a:baseGet(t,r);return o===a?i:o}function hasIn(t,r){return null!=t&&hasPath(t,r,baseHasIn)}var On=createInverter((function(t,r,i){null!=r&&"function"!=typeof r.toString&&(r=Zt.call(r)),t[r]=i}),constant(identity)),Sn=createInverter((function(t,r,i){null!=r&&"function"!=typeof r.toString&&(r=Zt.call(r)),Yt.call(t,r)?t[r].push(i):t[r]=[i]}),getIteratee),Tn=baseRest(baseInvoke);function keys(t){return isArrayLike(t)?arrayLikeKeys(t):baseKeys(t)}function keysIn(t){return isArrayLike(t)?arrayLikeKeys(t,!0):baseKeysIn(t)}var En=createAssigner((function(t,r,i){baseMerge(t,r,i)})),Ln=createAssigner((function(t,r,i,o){baseMerge(t,r,i,o)})),An=flatRest((function(t,r){var i={};if(null==t)return i;var o=!1;r=arrayMap(r,(function(r){return r=castPath(r,t),o||(o=r.length>1),r})),copyObject(t,getAllKeysIn(t),i),o&&(i=baseClone(i,7,customOmitClone));for(var a=r.length;a--;)baseUnset(i,r[a]);return i}));var kn=flatRest((function(t,r){return null==t?{}:function basePick(t,r){return basePickBy(t,r,(function(r,i){return hasIn(t,i)}))}(t,r)}));function pickBy(t,r){if(null==t)return{};var i=arrayMap(getAllKeysIn(t),(function(t){return[t]}));return r=getIteratee(r),basePickBy(t,i,(function(t,i){return r(t,i[0])}))}var Mn=createToPairs(keys),Rn=createToPairs(keysIn);function values(t){return null==t?[]:baseValues(t,keys(t))}var Bn=createCompounder((function(t,r,i){return r=r.toLowerCase(),t+(i?capitalize(r):r)}));function capitalize(t){return zn(toString(t).toLowerCase())}function deburr(t){return(t=toString(t))&&t.replace(Ot,Ae).replace(ie,"")}var Nn=createCompounder((function(t,r,i){return t+(i?"-":"")+r.toLowerCase()})),Dn=createCompounder((function(t,r,i){return t+(i?" ":"")+r.toLowerCase()})),jn=createCaseFirst("toLowerCase");var Xn=createCompounder((function(t,r,i){return t+(i?"_":"")+r.toLowerCase()}));var Yn=createCompounder((function(t,r,i){return t+(i?" ":"")+zn(r)}));var Fn=createCompounder((function(t,r,i){return t+(i?" ":"")+r.toUpperCase()})),zn=createCaseFirst("toUpperCase");function words(t,r,i){return t=toString(t),(r=i?a:r)===a?function hasUnicodeWord(t){return le.test(t)}(t)?function unicodeWords(t){return t.match(se)||[]}(t):function asciiWords(t){return t.match(vt)||[]}(t):t.match(r)||[]}var Zn=baseRest((function(t,r){try{return apply(t,a,r)}catch(t){return isError(t)?t:new ft(t)}})),Wn=flatRest((function(t,r){return arrayEach(r,(function(r){r=toKey(r),baseAssignValue(t,r,Kr(t[r],t))})),t}));function constant(t){return function(){return t}}var qn=createFlow(),Vn=createFlow(!0);function identity(t){return t}function iteratee(t){return baseIteratee("function"==typeof t?t:baseClone(t,1))}var Gn=baseRest((function(t,r){return function(i){return baseInvoke(i,t,r)}})),Un=baseRest((function(t,r){return function(i){return baseInvoke(t,i,r)}}));function mixin(t,r,i){var o=keys(r),a=baseFunctions(r,o);null!=i||isObject(r)&&(a.length||!o.length)||(i=r,r=t,t=this,a=baseFunctions(r,keys(r)));var l=!(isObject(i)&&"chain"in i&&!i.chain),u=isFunction(t);return arrayEach(a,(function(i){var o=r[i];t[i]=o,u&&(t.prototype[i]=function(){var r=this.__chain__;if(l||r){var i=t(this.__wrapped__),a=i.__actions__=copyArray(this.__actions__);return a.push({func:o,args:arguments,thisArg:t}),i.__chain__=r,i}return o.apply(t,arrayPush([this.value()],arguments))})})),t}function noop(){}var Hn=createOver(arrayMap),Jn=createOver(arrayEvery),Kn=createOver(arraySome);function property(t){return isKey(t)?baseProperty(toKey(t)):function basePropertyDeep(t){return function(r){return baseGet(r,t)}}(t)}var $n=createRange(),Qn=createRange(!0);function stubArray(){return[]}function stubFalse(){return!1}var ti=createMathOperation((function(t,r){return t+r}),0),ei=createRound("ceil"),ri=createMathOperation((function(t,r){return t/r}),1),ni=createRound("floor");var ii,oi=createMathOperation((function(t,r){return t*r}),1),si=createRound("round"),ai=createMathOperation((function(t,r){return t-r}),0);return lodash.after=function after(t,r){if("function"!=typeof r)throw new Rt(l);return t=toInteger(t),function(){if(--t<1)return r.apply(this,arguments)}},lodash.ary=ary,lodash.assign=gn,lodash.assignIn=_n,lodash.assignInWith=bn,lodash.assignWith=xn,lodash.at=Cn,lodash.before=before,lodash.bind=Kr,lodash.bindAll=Wn,lodash.bindKey=$r,lodash.castArray=function castArray(){if(!arguments.length)return[];var t=arguments[0];return un(t)?t:[t]},lodash.chain=chain,lodash.chunk=function chunk(t,r,o){r=(o?isIterateeCall(t,r,o):r===a)?1:De(toInteger(r),0);var l=null==t?0:t.length;if(!l||r<1)return[];for(var u=0,c=0,h=i(ge(l/r));u<l;)h[c++]=baseSlice(t,u,u+=r);return h},lodash.compact=function compact(t){for(var r=-1,i=null==t?0:t.length,o=0,a=[];++r<i;){var l=t[r];l&&(a[o++]=l)}return a},lodash.concat=function concat(){var t=arguments.length;if(!t)return[];for(var r=i(t-1),o=arguments[0],a=t;a--;)r[a-1]=arguments[a];return arrayPush(un(o)?copyArray(o):[o],baseFlatten(r,1))},lodash.cond=function cond(t){var r=null==t?0:t.length,i=getIteratee();return t=r?arrayMap(t,(function(t){if("function"!=typeof t[1])throw new Rt(l);return[i(t[0]),t[1]]})):[],baseRest((function(i){for(var o=-1;++o<r;){var a=t[o];if(apply(a[0],this,i))return apply(a[1],this,i)}}))},lodash.conforms=function conforms(t){return function baseConforms(t){var r=keys(t);return function(i){return baseConformsTo(i,t,r)}}(baseClone(t,1))},lodash.constant=constant,lodash.countBy=zr,lodash.create=function create(t,r){var i=or(t);return null==r?i:baseAssign(i,r)},lodash.curry=function curry(t,r,i){var o=createWrap(t,8,a,a,a,a,a,r=i?a:r);return o.placeholder=curry.placeholder,o},lodash.curryRight=function curryRight(t,r,i){var o=createWrap(t,h,a,a,a,a,a,r=i?a:r);return o.placeholder=curryRight.placeholder,o},lodash.debounce=debounce,lodash.defaults=In,lodash.defaultsDeep=wn,lodash.defer=Qr,lodash.delay=tn,lodash.difference=Ir,lodash.differenceBy=wr,lodash.differenceWith=Or,lodash.drop=function drop(t,r,i){var o=null==t?0:t.length;return o?baseSlice(t,(r=i||r===a?1:toInteger(r))<0?0:r,o):[]},lodash.dropRight=function dropRight(t,r,i){var o=null==t?0:t.length;return o?baseSlice(t,0,(r=o-(r=i||r===a?1:toInteger(r)))<0?0:r):[]},lodash.dropRightWhile=function dropRightWhile(t,r){return t&&t.length?baseWhile(t,getIteratee(r,3),!0,!0):[]},lodash.dropWhile=function dropWhile(t,r){return t&&t.length?baseWhile(t,getIteratee(r,3),!0):[]},lodash.fill=function fill(t,r,i,o){var l=null==t?0:t.length;return l?(i&&"number"!=typeof i&&isIterateeCall(t,r,i)&&(i=0,o=l),function baseFill(t,r,i,o){var l=t.length;for((i=toInteger(i))<0&&(i=-i>l?0:l+i),(o=o===a||o>l?l:toInteger(o))<0&&(o+=l),o=i>o?0:toLength(o);i<o;)t[i++]=r;return t}(t,r,i,o)):[]},lodash.filter=function filter(t,r){return(un(t)?arrayFilter:baseFilter)(t,getIteratee(r,3))},lodash.flatMap=function flatMap(t,r){return baseFlatten(map(t,r),1)},lodash.flatMapDeep=function flatMapDeep(t,r){return baseFlatten(map(t,r),m)},lodash.flatMapDepth=function flatMapDepth(t,r,i){return i=i===a?1:toInteger(i),baseFlatten(map(t,r),i)},lodash.flatten=flatten,lodash.flattenDeep=function flattenDeep(t){return(null==t?0:t.length)?baseFlatten(t,m):[]},lodash.flattenDepth=function flattenDepth(t,r){return(null==t?0:t.length)?baseFlatten(t,r=r===a?1:toInteger(r)):[]},lodash.flip=function flip(t){return createWrap(t,512)},lodash.flow=qn,lodash.flowRight=Vn,lodash.fromPairs=function fromPairs(t){for(var r=-1,i=null==t?0:t.length,o={};++r<i;){var a=t[r];o[a[0]]=a[1]}return o},lodash.functions=function functions(t){return null==t?[]:baseFunctions(t,keys(t))},lodash.functionsIn=function functionsIn(t){return null==t?[]:baseFunctions(t,keysIn(t))},lodash.groupBy=qr,lodash.initial=function initial(t){return(null==t?0:t.length)?baseSlice(t,0,-1):[]},lodash.intersection=Sr,lodash.intersectionBy=Tr,lodash.intersectionWith=Er,lodash.invert=On,lodash.invertBy=Sn,lodash.invokeMap=Vr,lodash.iteratee=iteratee,lodash.keyBy=Gr,lodash.keys=keys,lodash.keysIn=keysIn,lodash.map=map,lodash.mapKeys=function mapKeys(t,r){var i={};return r=getIteratee(r,3),baseForOwn(t,(function(t,o,a){baseAssignValue(i,r(t,o,a),t)})),i},lodash.mapValues=function mapValues(t,r){var i={};return r=getIteratee(r,3),baseForOwn(t,(function(t,o,a){baseAssignValue(i,o,r(t,o,a))})),i},lodash.matches=function matches(t){return baseMatches(baseClone(t,1))},lodash.matchesProperty=function matchesProperty(t,r){return baseMatchesProperty(t,baseClone(r,1))},lodash.memoize=memoize,lodash.merge=En,lodash.mergeWith=Ln,lodash.method=Gn,lodash.methodOf=Un,lodash.mixin=mixin,lodash.negate=negate,lodash.nthArg=function nthArg(t){return t=toInteger(t),baseRest((function(r){return baseNth(r,t)}))},lodash.omit=An,lodash.omitBy=function omitBy(t,r){return pickBy(t,negate(getIteratee(r)))},lodash.once=function once(t){return before(2,t)},lodash.orderBy=function orderBy(t,r,i,o){return null==t?[]:(un(r)||(r=null==r?[]:[r]),un(i=o?a:i)||(i=null==i?[]:[i]),baseOrderBy(t,r,i))},lodash.over=Hn,lodash.overArgs=en,lodash.overEvery=Jn,lodash.overSome=Kn,lodash.partial=rn,lodash.partialRight=nn,lodash.partition=Ur,lodash.pick=kn,lodash.pickBy=pickBy,lodash.property=property,lodash.propertyOf=function propertyOf(t){return function(r){return null==t?a:baseGet(t,r)}},lodash.pull=Lr,lodash.pullAll=pullAll,lodash.pullAllBy=function pullAllBy(t,r,i){return t&&t.length&&r&&r.length?basePullAll(t,r,getIteratee(i,2)):t},lodash.pullAllWith=function pullAllWith(t,r,i){return t&&t.length&&r&&r.length?basePullAll(t,r,a,i):t},lodash.pullAt=Ar,lodash.range=$n,lodash.rangeRight=Qn,lodash.rearg=on,lodash.reject=function reject(t,r){return(un(t)?arrayFilter:baseFilter)(t,negate(getIteratee(r,3)))},lodash.remove=function remove(t,r){var i=[];if(!t||!t.length)return i;var o=-1,a=[],l=t.length;for(r=getIteratee(r,3);++o<l;){var u=t[o];r(u,o,t)&&(i.push(u),a.push(o))}return basePullAt(t,a),i},lodash.rest=function rest(t,r){if("function"!=typeof t)throw new Rt(l);return baseRest(t,r=r===a?r:toInteger(r))},lodash.reverse=reverse,lodash.sampleSize=function sampleSize(t,r,i){return r=(i?isIterateeCall(t,r,i):r===a)?1:toInteger(r),(un(t)?arraySampleSize:baseSampleSize)(t,r)},lodash.set=function set(t,r,i){return null==t?t:baseSet(t,r,i)},lodash.setWith=function setWith(t,r,i,o){return o="function"==typeof o?o:a,null==t?t:baseSet(t,r,i,o)},lodash.shuffle=function shuffle(t){return(un(t)?arrayShuffle:baseShuffle)(t)},lodash.slice=function slice(t,r,i){var o=null==t?0:t.length;return o?(i&&"number"!=typeof i&&isIterateeCall(t,r,i)?(r=0,i=o):(r=null==r?0:toInteger(r),i=i===a?o:toInteger(i)),baseSlice(t,r,i)):[]},lodash.sortBy=Hr,lodash.sortedUniq=function sortedUniq(t){return t&&t.length?baseSortedUniq(t):[]},lodash.sortedUniqBy=function sortedUniqBy(t,r){return t&&t.length?baseSortedUniq(t,getIteratee(r,2)):[]},lodash.split=function split(t,r,i){return i&&"number"!=typeof i&&isIterateeCall(t,r,i)&&(r=i=a),(i=i===a?_:i>>>0)?(t=toString(t))&&("string"==typeof r||null!=r&&!yn(r))&&!(r=baseToString(r))&&hasUnicode(t)?castSlice(stringToArray(t),0,i):t.split(r,i):[]},lodash.spread=function spread(t,r){if("function"!=typeof t)throw new Rt(l);return r=null==r?0:De(toInteger(r),0),baseRest((function(i){var o=i[r],a=castSlice(i,0,r);return o&&arrayPush(a,o),apply(t,this,a)}))},lodash.tail=function tail(t){var r=null==t?0:t.length;return r?baseSlice(t,1,r):[]},lodash.take=function take(t,r,i){return t&&t.length?baseSlice(t,0,(r=i||r===a?1:toInteger(r))<0?0:r):[]},lodash.takeRight=function takeRight(t,r,i){var o=null==t?0:t.length;return o?baseSlice(t,(r=o-(r=i||r===a?1:toInteger(r)))<0?0:r,o):[]},lodash.takeRightWhile=function takeRightWhile(t,r){return t&&t.length?baseWhile(t,getIteratee(r,3),!1,!0):[]},lodash.takeWhile=function takeWhile(t,r){return t&&t.length?baseWhile(t,getIteratee(r,3)):[]},lodash.tap=function tap(t,r){return r(t),t},lodash.throttle=function throttle(t,r,i){var o=!0,a=!0;if("function"!=typeof t)throw new Rt(l);return isObject(i)&&(o="leading"in i?!!i.leading:o,a="trailing"in i?!!i.trailing:a),debounce(t,r,{leading:o,maxWait:r,trailing:a})},lodash.thru=thru,lodash.toArray=toArray,lodash.toPairs=Mn,lodash.toPairsIn=Rn,lodash.toPath=function toPath(t){return un(t)?arrayMap(t,toKey):isSymbol(t)?[t]:copyArray(Cr(toString(t)))},lodash.toPlainObject=toPlainObject,lodash.transform=function transform(t,r,i){var o=un(t),a=o||hn(t)||vn(t);if(r=getIteratee(r,4),null==i){var l=t&&t.constructor;i=a?o?new l:[]:isObject(t)&&isFunction(l)?or(Kt(t)):{}}return(a?arrayEach:baseForOwn)(t,(function(t,o,a){return r(i,t,o,a)})),i},lodash.unary=function unary(t){return ary(t,1)},lodash.union=kr,lodash.unionBy=Mr,lodash.unionWith=Rr,lodash.uniq=function uniq(t){return t&&t.length?baseUniq(t):[]},lodash.uniqBy=function uniqBy(t,r){return t&&t.length?baseUniq(t,getIteratee(r,2)):[]},lodash.uniqWith=function uniqWith(t,r){return r="function"==typeof r?r:a,t&&t.length?baseUniq(t,a,r):[]},lodash.unset=function unset(t,r){return null==t||baseUnset(t,r)},lodash.unzip=unzip,lodash.unzipWith=unzipWith,lodash.update=function update(t,r,i){return null==t?t:baseUpdate(t,r,castFunction(i))},lodash.updateWith=function updateWith(t,r,i,o){return o="function"==typeof o?o:a,null==t?t:baseUpdate(t,r,castFunction(i),o)},lodash.values=values,lodash.valuesIn=function valuesIn(t){return null==t?[]:baseValues(t,keysIn(t))},lodash.without=Br,lodash.words=words,lodash.wrap=function wrap(t,r){return rn(castFunction(r),t)},lodash.xor=Nr,lodash.xorBy=Dr,lodash.xorWith=jr,lodash.zip=Xr,lodash.zipObject=function zipObject(t,r){return baseZipObject(t||[],r||[],assignValue)},lodash.zipObjectDeep=function zipObjectDeep(t,r){return baseZipObject(t||[],r||[],baseSet)},lodash.zipWith=Yr,lodash.entries=Mn,lodash.entriesIn=Rn,lodash.extend=_n,lodash.extendWith=bn,mixin(lodash,lodash),lodash.add=ti,lodash.attempt=Zn,lodash.camelCase=Bn,lodash.capitalize=capitalize,lodash.ceil=ei,lodash.clamp=function clamp(t,r,i){return i===a&&(i=r,r=a),i!==a&&(i=(i=toNumber(i))==i?i:0),r!==a&&(r=(r=toNumber(r))==r?r:0),baseClamp(toNumber(t),r,i)},lodash.clone=function clone(t){return baseClone(t,4)},lodash.cloneDeep=function cloneDeep(t){return baseClone(t,5)},lodash.cloneDeepWith=function cloneDeepWith(t,r){return baseClone(t,5,r="function"==typeof r?r:a)},lodash.cloneWith=function cloneWith(t,r){return baseClone(t,4,r="function"==typeof r?r:a)},lodash.conformsTo=function conformsTo(t,r){return null==r||baseConformsTo(t,r,keys(r))},lodash.deburr=deburr,lodash.defaultTo=function defaultTo(t,r){return null==t||t!=t?r:t},lodash.divide=ri,lodash.endsWith=function endsWith(t,r,i){t=toString(t),r=baseToString(r);var o=t.length,l=i=i===a?o:baseClamp(toInteger(i),0,o);return(i-=r.length)>=0&&t.slice(i,l)==r},lodash.eq=eq,lodash.escape=function escape(t){return(t=toString(t))&&rt.test(t)?t.replace(tt,ke):t},lodash.escapeRegExp=function escapeRegExp(t){return(t=toString(t))&&ct.test(t)?t.replace(ut,"\\$&"):t},lodash.every=function every(t,r,i){var o=un(t)?arrayEvery:baseEvery;return i&&isIterateeCall(t,r,i)&&(r=a),o(t,getIteratee(r,3))},lodash.find=Zr,lodash.findIndex=findIndex,lodash.findKey=function findKey(t,r){return baseFindKey(t,getIteratee(r,3),baseForOwn)},lodash.findLast=Wr,lodash.findLastIndex=findLastIndex,lodash.findLastKey=function findLastKey(t,r){return baseFindKey(t,getIteratee(r,3),baseForOwnRight)},lodash.floor=ni,lodash.forEach=forEach,lodash.forEachRight=forEachRight,lodash.forIn=function forIn(t,r){return null==t?t:lr(t,getIteratee(r,3),keysIn)},lodash.forInRight=function forInRight(t,r){return null==t?t:ur(t,getIteratee(r,3),keysIn)},lodash.forOwn=function forOwn(t,r){return t&&baseForOwn(t,getIteratee(r,3))},lodash.forOwnRight=function forOwnRight(t,r){return t&&baseForOwnRight(t,getIteratee(r,3))},lodash.get=get,lodash.gt=sn,lodash.gte=an,lodash.has=function has(t,r){return null!=t&&hasPath(t,r,baseHas)},lodash.hasIn=hasIn,lodash.head=head,lodash.identity=identity,lodash.includes=function includes(t,r,i,o){t=isArrayLike(t)?t:values(t),i=i&&!o?toInteger(i):0;var a=t.length;return i<0&&(i=De(a+i,0)),isString(t)?i<=a&&t.indexOf(r,i)>-1:!!a&&baseIndexOf(t,r,i)>-1},lodash.indexOf=function indexOf(t,r,i){var o=null==t?0:t.length;if(!o)return-1;var a=null==i?0:toInteger(i);return a<0&&(a=De(o+a,0)),baseIndexOf(t,r,a)},lodash.inRange=function inRange(t,r,i){return r=toFinite(r),i===a?(i=r,r=0):i=toFinite(i),function baseInRange(t,r,i){return t>=je(r,i)&&t<De(r,i)}(t=toNumber(t),r,i)},lodash.invoke=Tn,lodash.isArguments=ln,lodash.isArray=un,lodash.isArrayBuffer=cn,lodash.isArrayLike=isArrayLike,lodash.isArrayLikeObject=isArrayLikeObject,lodash.isBoolean=function isBoolean(t){return!0===t||!1===t||isObjectLike(t)&&baseGetTag(t)==I},lodash.isBuffer=hn,lodash.isDate=fn,lodash.isElement=function isElement(t){return isObjectLike(t)&&1===t.nodeType&&!isPlainObject(t)},lodash.isEmpty=function isEmpty(t){if(null==t)return!0;if(isArrayLike(t)&&(un(t)||"string"==typeof t||"function"==typeof t.splice||hn(t)||vn(t)||ln(t)))return!t.length;var r=Pr(t);if(r==E||r==R)return!t.size;if(isPrototype(t))return!baseKeys(t).length;for(var i in t)if(Yt.call(t,i))return!1;return!0},lodash.isEqual=function isEqual(t,r){return baseIsEqual(t,r)},lodash.isEqualWith=function isEqualWith(t,r,i){var o=(i="function"==typeof i?i:a)?i(t,r):a;return o===a?baseIsEqual(t,r,a,i):!!o},lodash.isError=isError,lodash.isFinite=function isFinite(t){return"number"==typeof t&&Le(t)},lodash.isFunction=isFunction,lodash.isInteger=isInteger,lodash.isLength=isLength,lodash.isMap=pn,lodash.isMatch=function isMatch(t,r){return t===r||baseIsMatch(t,r,getMatchData(r))},lodash.isMatchWith=function isMatchWith(t,r,i){return i="function"==typeof i?i:a,baseIsMatch(t,r,getMatchData(r),i)},lodash.isNaN=function isNaN(t){return isNumber(t)&&t!=+t},lodash.isNative=function isNative(t){if(gr(t))throw new ft("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return baseIsNative(t)},lodash.isNil=function isNil(t){return null==t},lodash.isNull=function isNull(t){return null===t},lodash.isNumber=isNumber,lodash.isObject=isObject,lodash.isObjectLike=isObjectLike,lodash.isPlainObject=isPlainObject,lodash.isRegExp=yn,lodash.isSafeInteger=function isSafeInteger(t){return isInteger(t)&&t>=-9007199254740991&&t<=P},lodash.isSet=dn,lodash.isString=isString,lodash.isSymbol=isSymbol,lodash.isTypedArray=vn,lodash.isUndefined=function isUndefined(t){return t===a},lodash.isWeakMap=function isWeakMap(t){return isObjectLike(t)&&Pr(t)==D},lodash.isWeakSet=function isWeakSet(t){return isObjectLike(t)&&"[object WeakSet]"==baseGetTag(t)},lodash.join=function join(t,r){return null==t?"":Be.call(t,r)},lodash.kebabCase=Nn,lodash.last=last,lodash.lastIndexOf=function lastIndexOf(t,r,i){var o=null==t?0:t.length;if(!o)return-1;var l=o;return i!==a&&(l=(l=toInteger(i))<0?De(o+l,0):je(l,o-1)),r==r?function strictLastIndexOf(t,r,i){for(var o=i+1;o--;)if(t[o]===r)return o;return o}(t,r,l):baseFindIndex(t,baseIsNaN,l,!0)},lodash.lowerCase=Dn,lodash.lowerFirst=jn,lodash.lt=mn,lodash.lte=Pn,lodash.max=function max(t){return t&&t.length?baseExtremum(t,identity,baseGt):a},lodash.maxBy=function maxBy(t,r){return t&&t.length?baseExtremum(t,getIteratee(r,2),baseGt):a},lodash.mean=function mean(t){return baseMean(t,identity)},lodash.meanBy=function meanBy(t,r){return baseMean(t,getIteratee(r,2))},lodash.min=function min(t){return t&&t.length?baseExtremum(t,identity,baseLt):a},lodash.minBy=function minBy(t,r){return t&&t.length?baseExtremum(t,getIteratee(r,2),baseLt):a},lodash.stubArray=stubArray,lodash.stubFalse=stubFalse,lodash.stubObject=function stubObject(){return{}},lodash.stubString=function stubString(){return""},lodash.stubTrue=function stubTrue(){return!0},lodash.multiply=oi,lodash.nth=function nth(t,r){return t&&t.length?baseNth(t,toInteger(r)):a},lodash.noConflict=function noConflict(){return Pe._===this&&(Pe._=qt),this},lodash.noop=noop,lodash.now=Jr,lodash.pad=function pad(t,r,i){t=toString(t);var o=(r=toInteger(r))?stringSize(t):0;if(!r||o>=r)return t;var a=(r-o)/2;return createPadding(_e(a),i)+t+createPadding(ge(a),i)},lodash.padEnd=function padEnd(t,r,i){t=toString(t);var o=(r=toInteger(r))?stringSize(t):0;return r&&o<r?t+createPadding(r-o,i):t},lodash.padStart=function padStart(t,r,i){t=toString(t);var o=(r=toInteger(r))?stringSize(t):0;return r&&o<r?createPadding(r-o,i)+t:t},lodash.parseInt=function parseInt(t,r,i){return i||null==r?r=0:r&&(r=+r),Ye(toString(t).replace(ht,""),r||0)},lodash.random=function random(t,r,i){if(i&&"boolean"!=typeof i&&isIterateeCall(t,r,i)&&(r=i=a),i===a&&("boolean"==typeof r?(i=r,r=a):"boolean"==typeof t&&(i=t,t=a)),t===a&&r===a?(t=0,r=1):(t=toFinite(t),r===a?(r=t,t=0):r=toFinite(r)),t>r){var o=t;t=r,r=o}if(i||t%1||r%1){var l=Fe();return je(t+l*(r-t+ye("1e-"+((l+"").length-1))),r)}return baseRandom(t,r)},lodash.reduce=function reduce(t,r,i){var o=un(t)?arrayReduce:baseReduce,a=arguments.length<3;return o(t,getIteratee(r,4),i,a,sr)},lodash.reduceRight=function reduceRight(t,r,i){var o=un(t)?arrayReduceRight:baseReduce,a=arguments.length<3;return o(t,getIteratee(r,4),i,a,ar)},lodash.repeat=function repeat(t,r,i){return r=(i?isIterateeCall(t,r,i):r===a)?1:toInteger(r),baseRepeat(toString(t),r)},lodash.replace=function replace(){var t=arguments,r=toString(t[0]);return t.length<3?r:r.replace(t[1],t[2])},lodash.result=function result(t,r,i){var o=-1,l=(r=castPath(r,t)).length;for(l||(l=1,t=a);++o<l;){var u=null==t?a:t[toKey(r[o])];u===a&&(o=l,u=i),t=isFunction(u)?u.call(t):u}return t},lodash.round=si,lodash.runInContext=runInContext,lodash.sample=function sample(t){return(un(t)?arraySample:baseSample)(t)},lodash.size=function size(t){if(null==t)return 0;if(isArrayLike(t))return isString(t)?stringSize(t):t.length;var r=Pr(t);return r==E||r==R?t.size:baseKeys(t).length},lodash.snakeCase=Xn,lodash.some=function some(t,r,i){var o=un(t)?arraySome:baseSome;return i&&isIterateeCall(t,r,i)&&(r=a),o(t,getIteratee(r,3))},lodash.sortedIndex=function sortedIndex(t,r){return baseSortedIndex(t,r)},lodash.sortedIndexBy=function sortedIndexBy(t,r,i){return baseSortedIndexBy(t,r,getIteratee(i,2))},lodash.sortedIndexOf=function sortedIndexOf(t,r){var i=null==t?0:t.length;if(i){var o=baseSortedIndex(t,r);if(o<i&&eq(t[o],r))return o}return-1},lodash.sortedLastIndex=function sortedLastIndex(t,r){return baseSortedIndex(t,r,!0)},lodash.sortedLastIndexBy=function sortedLastIndexBy(t,r,i){return baseSortedIndexBy(t,r,getIteratee(i,2),!0)},lodash.sortedLastIndexOf=function sortedLastIndexOf(t,r){if(null==t?0:t.length){var i=baseSortedIndex(t,r,!0)-1;if(eq(t[i],r))return i}return-1},lodash.startCase=Yn,lodash.startsWith=function startsWith(t,r,i){return t=toString(t),i=null==i?0:baseClamp(toInteger(i),0,t.length),r=baseToString(r),t.slice(i,i+r.length)==r},lodash.subtract=ai,lodash.sum=function sum(t){return t&&t.length?baseSum(t,identity):0},lodash.sumBy=function sumBy(t,r){return t&&t.length?baseSum(t,getIteratee(r,2)):0},lodash.template=function template(t,r,i){var o=lodash.templateSettings;i&&isIterateeCall(t,r,i)&&(r=a),t=toString(t),r=bn({},r,o,customDefaultsAssignIn);var l,u,c=bn({},r.imports,o.imports,customDefaultsAssignIn),h=keys(c),p=baseValues(c,h),y=0,d=r.interpolate||St,v="__p += '",m=kt((r.escape||St).source+"|"+d.source+"|"+(d===ot?gt:St).source+"|"+(r.evaluate||St).source+"|$","g"),P="//# sourceURL="+(Yt.call(r,"sourceURL")?(r.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++ce+"]")+"\n";t.replace(m,(function(r,i,o,a,c,h){return o||(o=a),v+=t.slice(y,h).replace(Tt,escapeStringChar),i&&(l=!0,v+="' +\n__e("+i+") +\n'"),c&&(u=!0,v+="';\n"+c+";\n__p += '"),o&&(v+="' +\n((__t = ("+o+")) == null ? '' : __t) +\n'"),y=h+r.length,r})),v+="';\n";var g=Yt.call(r,"variable")&&r.variable;if(g){if(mt.test(g))throw new ft("Invalid `variable` option passed into `_.template`")}else v="with (obj) {\n"+v+"\n}\n";v=(u?v.replace(J,""):v).replace(K,"$1").replace($,"$1;"),v="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(l?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+v+"return __p\n}";var _=Zn((function(){return Et(h,P+"return "+v).apply(a,p)}));if(_.source=v,isError(_))throw _;return _},lodash.times=function times(t,r){if((t=toInteger(t))<1||t>P)return[];var i=_,o=je(t,_);r=getIteratee(r),t-=_;for(var a=baseTimes(o,r);++i<t;)r(i);return a},lodash.toFinite=toFinite,lodash.toInteger=toInteger,lodash.toLength=toLength,lodash.toLower=function toLower(t){return toString(t).toLowerCase()},lodash.toNumber=toNumber,lodash.toSafeInteger=function toSafeInteger(t){return t?baseClamp(toInteger(t),-9007199254740991,P):0===t?t:0},lodash.toString=toString,lodash.toUpper=function toUpper(t){return toString(t).toUpperCase()},lodash.trim=function trim(t,r,i){if((t=toString(t))&&(i||r===a))return baseTrim(t);if(!t||!(r=baseToString(r)))return t;var o=stringToArray(t),l=stringToArray(r);return castSlice(o,charsStartIndex(o,l),charsEndIndex(o,l)+1).join("")},lodash.trimEnd=function trimEnd(t,r,i){if((t=toString(t))&&(i||r===a))return t.slice(0,trimmedEndIndex(t)+1);if(!t||!(r=baseToString(r)))return t;var o=stringToArray(t);return castSlice(o,0,charsEndIndex(o,stringToArray(r))+1).join("")},lodash.trimStart=function trimStart(t,r,i){if((t=toString(t))&&(i||r===a))return t.replace(ht,"");if(!t||!(r=baseToString(r)))return t;var o=stringToArray(t);return castSlice(o,charsStartIndex(o,stringToArray(r))).join("")},lodash.truncate=function truncate(t,r){var i=30,o="...";if(isObject(r)){var l="separator"in r?r.separator:l;i="length"in r?toInteger(r.length):i,o="omission"in r?baseToString(r.omission):o}var u=(t=toString(t)).length;if(hasUnicode(t)){var c=stringToArray(t);u=c.length}if(i>=u)return t;var h=i-stringSize(o);if(h<1)return o;var p=c?castSlice(c,0,h).join(""):t.slice(0,h);if(l===a)return p+o;if(c&&(h+=p.length-h),yn(l)){if(t.slice(h).search(l)){var y,d=p;for(l.global||(l=kt(l.source,toString(_t.exec(l))+"g")),l.lastIndex=0;y=l.exec(d);)var v=y.index;p=p.slice(0,v===a?h:v)}}else if(t.indexOf(baseToString(l),h)!=h){var m=p.lastIndexOf(l);m>-1&&(p=p.slice(0,m))}return p+o},lodash.unescape=function unescape(t){return(t=toString(t))&&et.test(t)?t.replace(Q,Me):t},lodash.uniqueId=function uniqueId(t){var r=++Ft;return toString(t)+r},lodash.upperCase=Fn,lodash.upperFirst=zn,lodash.each=forEach,lodash.eachRight=forEachRight,lodash.first=head,mixin(lodash,(ii={},baseForOwn(lodash,(function(t,r){Yt.call(lodash.prototype,r)||(ii[r]=t)})),ii),{chain:!1}),lodash.VERSION="4.17.21",arrayEach(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){lodash[t].placeholder=lodash})),arrayEach(["drop","take"],(function(t,r){LazyWrapper.prototype[t]=function(i){i=i===a?1:De(toInteger(i),0);var o=this.__filtered__&&!r?new LazyWrapper(this):this.clone();return o.__filtered__?o.__takeCount__=je(i,o.__takeCount__):o.__views__.push({size:je(i,_),type:t+(o.__dir__<0?"Right":"")}),o},LazyWrapper.prototype[t+"Right"]=function(r){return this.reverse()[t](r).reverse()}})),arrayEach(["filter","map","takeWhile"],(function(t,r){var i=r+1,o=1==i||3==i;LazyWrapper.prototype[t]=function(t){var r=this.clone();return r.__iteratees__.push({iteratee:getIteratee(t,3),type:i}),r.__filtered__=r.__filtered__||o,r}})),arrayEach(["head","last"],(function(t,r){var i="take"+(r?"Right":"");LazyWrapper.prototype[t]=function(){return this[i](1).value()[0]}})),arrayEach(["initial","tail"],(function(t,r){var i="drop"+(r?"":"Right");LazyWrapper.prototype[t]=function(){return this.__filtered__?new LazyWrapper(this):this[i](1)}})),LazyWrapper.prototype.compact=function(){return this.filter(identity)},LazyWrapper.prototype.find=function(t){return this.filter(t).head()},LazyWrapper.prototype.findLast=function(t){return this.reverse().find(t)},LazyWrapper.prototype.invokeMap=baseRest((function(t,r){return"function"==typeof t?new LazyWrapper(this):this.map((function(i){return baseInvoke(i,t,r)}))})),LazyWrapper.prototype.reject=function(t){return this.filter(negate(getIteratee(t)))},LazyWrapper.prototype.slice=function(t,r){t=toInteger(t);var i=this;return i.__filtered__&&(t>0||r<0)?new LazyWrapper(i):(t<0?i=i.takeRight(-t):t&&(i=i.drop(t)),r!==a&&(i=(r=toInteger(r))<0?i.dropRight(-r):i.take(r-t)),i)},LazyWrapper.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},LazyWrapper.prototype.toArray=function(){return this.take(_)},baseForOwn(LazyWrapper.prototype,(function(t,r){var i=/^(?:filter|find|map|reject)|While$/.test(r),o=/^(?:head|last)$/.test(r),l=lodash[o?"take"+("last"==r?"Right":""):r],u=o||/^find/.test(r);l&&(lodash.prototype[r]=function(){var r=this.__wrapped__,c=o?[1]:arguments,h=r instanceof LazyWrapper,p=c[0],y=h||un(r),interceptor=function(t){var r=l.apply(lodash,arrayPush([t],c));return o&&d?r[0]:r};y&&i&&"function"==typeof p&&1!=p.length&&(h=y=!1);var d=this.__chain__,v=!!this.__actions__.length,m=u&&!d,P=h&&!v;if(!u&&y){r=P?r:new LazyWrapper(this);var g=t.apply(r,c);return g.__actions__.push({func:thru,args:[interceptor],thisArg:a}),new LodashWrapper(g,d)}return m&&P?t.apply(this,c):(g=this.thru(interceptor),m?o?g.value()[0]:g.value():g)})})),arrayEach(["pop","push","shift","sort","splice","unshift"],(function(t){var r=Bt[t],i=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",o=/^(?:pop|shift)$/.test(t);lodash.prototype[t]=function(){var t=arguments;if(o&&!this.__chain__){var a=this.value();return r.apply(un(a)?a:[],t)}return this[i]((function(i){return r.apply(un(i)?i:[],t)}))}})),baseForOwn(LazyWrapper.prototype,(function(t,r){var i=lodash[r];if(i){var o=i.name+"";Yt.call(Je,o)||(Je[o]=[]),Je[o].push({name:r,func:i})}})),Je[createHybrid(a,2).name]=[{name:"wrapper",func:a}],LazyWrapper.prototype.clone=function lazyClone(){var t=new LazyWrapper(this.__wrapped__);return t.__actions__=copyArray(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=copyArray(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=copyArray(this.__views__),t},LazyWrapper.prototype.reverse=function lazyReverse(){if(this.__filtered__){var t=new LazyWrapper(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},LazyWrapper.prototype.value=function lazyValue(){var t=this.__wrapped__.value(),r=this.__dir__,i=un(t),o=r<0,a=i?t.length:0,l=function getView(t,r,i){var o=-1,a=i.length;for(;++o<a;){var l=i[o],u=l.size;switch(l.type){case"drop":t+=u;break;case"dropRight":r-=u;break;case"take":r=je(r,t+u);break;case"takeRight":t=De(t,r-u)}}return{start:t,end:r}}(0,a,this.__views__),u=l.start,c=l.end,h=c-u,p=o?c:u-1,y=this.__iteratees__,d=y.length,v=0,m=je(h,this.__takeCount__);if(!i||!o&&a==h&&m==h)return baseWrapperValue(t,this.__actions__);var P=[];t:for(;h--&&v<m;){for(var g=-1,_=t[p+=r];++g<d;){var b=y[g],x=b.iteratee,C=b.type,I=x(_);if(2==C)_=I;else if(!I){if(1==C)continue t;break t}}P[v++]=_}return P},lodash.prototype.at=Fr,lodash.prototype.chain=function wrapperChain(){return chain(this)},lodash.prototype.commit=function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__)},lodash.prototype.next=function wrapperNext(){this.__values__===a&&(this.__values__=toArray(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?a:this.__values__[this.__index__++]}},lodash.prototype.plant=function wrapperPlant(t){for(var r,i=this;i instanceof baseLodash;){var o=wrapperClone(i);o.__index__=0,o.__values__=a,r?l.__wrapped__=o:r=o;var l=o;i=i.__wrapped__}return l.__wrapped__=t,r},lodash.prototype.reverse=function wrapperReverse(){var t=this.__wrapped__;if(t instanceof LazyWrapper){var r=t;return this.__actions__.length&&(r=new LazyWrapper(this)),(r=r.reverse()).__actions__.push({func:thru,args:[reverse],thisArg:a}),new LodashWrapper(r,this.__chain__)}return this.thru(reverse)},lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__)},lodash.prototype.first=lodash.prototype.head,re&&(lodash.prototype[re]=function wrapperToIterator(){return this}),lodash}();Pe._=Re,(o=function(){return Re}.call(r,i,r,t))===a||(t.exports=o)}.call(this)}},r={};function __webpack_require__(i){var o=r[i];if(void 0!==o)return o.exports;var a=r[i]={id:i,loaded:!1,exports:{}};return t[i].call(a.exports,a,a.exports,__webpack_require__),a.loaded=!0,a.exports}__webpack_require__.n=t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(r,{a:r}),r},__webpack_require__.d=(t,r)=>{for(var i in r)__webpack_require__.o(r,i)&&!__webpack_require__.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:r[i]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),__webpack_require__.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t=__webpack_require__(323);function _classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var r=function(){function Matrix(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;_classCallCheck(this,Matrix),this.a=t,this.b=r,this.c=i,this.d=o,this.tx=a,this.ty=l}return function _createClass(t,r,i){return r&&_defineProperties(t.prototype,r),i&&_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Matrix,[{key:"clone",value:function clone(){return new Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty)}},{key:"concat",value:function concat(t){return new Matrix(this.a*t.a+this.c*t.b,this.b*t.a+this.d*t.b,this.a*t.c+this.c*t.d,this.b*t.c+this.d*t.d,this.a*t.tx+this.c*t.ty+this.tx,this.b*t.tx+this.d*t.ty+this.ty)}},{key:"deltaTransformPoint",value:function deltaTransformPoint(r){return new t.Z(this.a*r.x+this.c*r.y,this.b*r.x+this.d*r.y)}},{key:"inverse",value:function inverse(){var t=this.a*this.d-this.b*this.c;return new Matrix(this.d/t,-this.b/t,-this.c/t,this.a/t,(this.c*this.ty-this.d*this.tx)/t,(this.b*this.tx-this.a*this.ty)/t)}},{key:"rotate",value:function rotate(t,r){return this.concat(Matrix.rotation(t,r))}},{key:"scale",value:function scale(t,r,i){return this.concat(Matrix.scale(t,r,i))}},{key:"translate",value:function translate(t,r){return this.concat(Matrix.translation(t,r))}},{key:"transformPoint",value:function transformPoint(r){return new t.Z(this.a*r.x+this.c*r.y+this.tx,this.b*r.x+this.d*r.y+this.ty)}}],[{key:"translation",value:function translation(t,r){return new Matrix(1,0,0,1,t,r)}},{key:"scale",value:function scale(t,r,i){void 0===r&&(r=t);var o=new Matrix(t,0,0,r);return i&&(o=Matrix.translation(i.x,i.y).concat(o).concat(Matrix.translation(-i.x,-i.y))),o}},{key:"rotation",value:function rotation(t,r){var i=new Matrix(Math.cos(t),Math.sin(t),-Math.sin(t),Math.cos(t));return r&&(i=Matrix.translation(r.x,r.y).concat(i).concat(Matrix.translation(-r.x,-r.y))),i}}]),Matrix}(),i=__webpack_require__(563),o=__webpack_require__(132),a=__webpack_require__(73);function ownKeys(t,r){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),i.push.apply(i,o)}return i}function _objectSpread(t){for(var r=1;r<arguments.length;r++){var i=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(i),!0).forEach((function(r){_defineProperty(t,r,i[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):ownKeys(Object(i)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(i,r))}))}return t}function Motion_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var l=function(){function Motion(r){!function Motion_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Motion),_defineProperty(this,"position",new t.Z),this.ctx=r}return function Motion_createClass(t,r,i){return r&&Motion_defineProperties(t.prototype,r),i&&Motion_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Motion,[{key:"reset",value:function reset(){this.currentUnit=void 0,this.currentToolDiameter=void 0,this.currentSpeed=void 0,this.currentFeed=void 0,this.currentAtc=void 0,this.position=new t.Z}},{key:"retract",value:function retract(){this.ctx.driver.send("M03 S090")}},{key:"plunge",value:function plunge(){this.ctx.driver.send("M03 S070")}},{key:"zero",value:function zero(t){this.ctx.driver.zero(t)}},{key:"rapid",value:function rapid(t){var r=this.postProcess(t);r&&(this.ctx.driver.rapid(t),this.position=r)}},{key:"linear",value:function linear(t){var r=this.postProcess(t);r&&(this.ctx.driver.linear(t),this.position=r)}},{key:"arcCW",value:function arcCW(t){return this.arc(t,!1)}},{key:"arcCCW",value:function arcCCW(t){return this.arc(t,!0)}},{key:"arc",value:function arc(r){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=this.postProcess(_objectSpread(_objectSpread({},r),{},{z:this.position.z||0})),l=this.position.x+(r.i||0),u=this.position.y+(r.j||0),arc=(0,o.mb)(new t.Z(l,u),this.position,new t.Z(r.x,r.y)),c=arc.radius*(arc.end-arc.start),h=c/(1/this.ctx.feed);(h=Math.round(1e6*h)/1e6)&&(r.f=Math.abs(h)),!i&&this.ctx.driver.arcCW?this.ctx.driver.arcCW(r):i&&this.ctx.driver.arcCCW?this.ctx.driver.arcCCW(r):this.interpolate("arc",[l,u,arc.radius,arc.start,arc.end,i],r.z||0),a&&(this.position=a)}},{key:"postProcess",value:function postProcess(r){this.ctx.driver.unit&&this.ctx.unit!=this.currentUnit&&(this.ctx.driver.unit(this.ctx.unit),this.currentUnit=this.ctx.unit),this.ctx.driver.meta&&this.ctx.toolDiameter!=this.currentToolDiameter&&(this.ctx.driver.meta({toolDiameter:this.ctx.toolDiameter}),this.currentToolDiameter=this.ctx.toolDiameter),this.ctx.driver.speed&&this.ctx.speed!=this.currentSpeed&&(this.ctx.driver.speed(this.ctx.speed),this.currentSpeed=this.ctx.speed),this.ctx.driver.feed&&this.ctx.feed!=this.currentFeed&&(this.ctx.driver.send("G93 (inverse time mode)"),this.currentFeed=this.ctx.feed);var i=new t.Z("x"in r?r.x:this.position.x,"y"in r?r.y:this.position.y,"z"in r?r.z:this.position.z,"a"in r?r.a:this.position.a),a=this.position,l=Math.sqrt(Math.pow(a.x-i.x,2)+Math.pow(a.y-i.y,2));if(!r.f){var u=l/(1/this.ctx.feed);(u=Math.round(1e6*u)/1e6)&&(r.f=Math.abs(u))}if((0,o.Bj)(this.position,i))return!1;for(var c in r){var h=c;"number"==typeof r[h]&&(r[h]=Math.round(1e5*r[h])/1e5)}return i}},{key:"interpolate",value:function interpolate(t,r,i){var o=new a.Z,l=o[t];"function"==typeof l&&l.apply(o,r);var u=0,c=o.getLength(),h=this.position.z;for(var p=o.getPoints(40),y=0,d=p.length;y<d;++y){var v=p[y],m=v.x-this.position.x,P=v.y-this.position.y;u+=Math.sqrt(m*m+P*P),this.linear({x:v.x,y:v.y,z:h+u/c*(i-h)})}}},{key:"followPath",value:function followPath(t,r){var i,l=this;if(!t)return!1;if("subPaths"in t)t.subPaths.forEach((function(t){l.followPath(t,r)}));else for(var u=this.position.z,c=t.getLength(),h=0,p=this,y=this.ctx,d=t.isClosed()&&0!=y.ramping,v=(_defineProperty(i={},"MOVE_TO",(function(){for(var t=arguments.length,i=new Array(t),a=0;a<t;a++)i[a]=arguments[a];var c=i[0],h=i[1],y=(0,o.S3)(c,l.position.x)&&(0,o.S3)(h,l.position.y);d&&y||(y||p.retract(),p.rapid({x:c,y:h}),y||p.plunge(),d||p.linear({z:r}),u=p.position.z)})),_defineProperty(i,"LINE_TO",(function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var o=r[0],a=r[1];p.linear({x:o,y:a,z:helix()})})),_defineProperty(i,"ELLIPSE",(function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];var a=r[0],l=r[1],u=r[2],c=r[3],h=r[4],y=r[5],d=r[6];if((0,o.S3)(u,c)){var v=(0,o.CS)(a,l,h,y,u),m={x:v.end.x,y:v.end.y,i:a-v.start.x,j:l-v.start.y,z:helix()};p.arc(m,d)}else interpolate("ellipse",r)})),_defineProperty(i,"BEZIER_CURVE_TO",(function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];interpolate("bezierCurveTo",r)})),_defineProperty(i,"QUADRATIC_CURVE_TO",(function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++)r[i]=arguments[i];interpolate("quadraticCurveTo",r)})),i),m=0,P=t.actions.length;m<P;++m){var g=t.actions[m];if(0!=m){var _=this.position.x,b=this.position.y;h+=t.getActionLength(_,b,m)}v[g.type].apply(this,g.args)}function helix(){return d?0===c?0:u+(r-u)*(h/c):r}function interpolate(t,r){var i=new a.Z;i.moveTo(p.position.x,p.position.y);var o=i[t];"function"==typeof o&&o.apply(i,r);for(var l=i.getPoints(40),u=0,c=l.length;u<c;++u){var h=l[u];p.linear({x:h.x,y:h.y,z:helix()})}}}}]),Motion}();function Driver_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var u=function(){function Driver(t){!function Driver_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,Driver),this.stream=t||{write:function write(t){return console.log(t)},reset:function reset(){}}}return function Driver_createClass(t,r,i){return r&&Driver_defineProperties(t.prototype,r),i&&Driver_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(Driver,[{key:"reset",value:function reset(){this.stream.reset()}},{key:"send",value:function send(){}},{key:"init",value:function init(){}},{key:"unit",value:function unit(t){}},{key:"speed",value:function speed(t){}},{key:"feed",value:function feed(t){}},{key:"coolant",value:function coolant(t){}},{key:"zero",value:function zero(t){}},{key:"atc",value:function atc(t){}},{key:"rapid",value:function rapid(t){}},{key:"linear",value:function linear(t){}},{key:"arcCW",value:function arcCW(t){}},{key:"arcCCW",value:function arcCCW(t){}},{key:"comment",value:function comment(t){}},{key:"meta",value:function meta(t){}}]),Driver}();function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function NullDriver_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function NullDriver_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}function _setPrototypeOf(t,r){return _setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},_setPrototypeOf(t,r)}function _createSuper(t){var r=function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=_getPrototypeOf(t);if(r){var a=_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return _possibleConstructorReturn(this,i)}}function _possibleConstructorReturn(t,r){if(r&&("object"===_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}var c=function(t){!function _inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&_setPrototypeOf(t,r)}(NullDriver,t);var r=_createSuper(NullDriver);function NullDriver(){return NullDriver_classCallCheck(this,NullDriver),r.apply(this,arguments)}return function NullDriver_createClass(t,r,i){return r&&NullDriver_defineProperties(t.prototype,r),i&&NullDriver_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(NullDriver)}(u);function GCanvas_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function GCanvas_defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var h=function(){function GCanvas(t){!function GCanvas_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,GCanvas),GCanvas_defineProperty(this,"precision",20),GCanvas_defineProperty(this,"align","center"),GCanvas_defineProperty(this,"ramping",!0),GCanvas_defineProperty(this,"depth",0),GCanvas_defineProperty(this,"depthOfCut",0),GCanvas_defineProperty(this,"retract",0),GCanvas_defineProperty(this,"speed",500),GCanvas_defineProperty(this,"feed",1e3),GCanvas_defineProperty(this,"act",0),GCanvas_defineProperty(this,"unit","mm"),GCanvas_defineProperty(this,"top",0),GCanvas_defineProperty(this,"toolDiameter",.15),GCanvas_defineProperty(this,"matrix",new r),GCanvas_defineProperty(this,"subPaths",[]),GCanvas_defineProperty(this,"filters",[]),GCanvas_defineProperty(this,"stack",[]),GCanvas_defineProperty(this,"_strokeStyle","#000000"),GCanvas_defineProperty(this,"_fillStyle","#000000"),GCanvas_defineProperty(this,"_font","7pt Helvetica"),GCanvas_defineProperty(this,"_background","#ffffff"),this.driver=t.driver||new c,this.motion=new l(this),this.canvasWidth=t.width,this.canvasHeight=t.height,this.virtualScale=t.virtualScale||1,t.canvas&&(this.canvasElement=t.canvas,this.ctx=this.canvasElement.getContext("2d")),t.output&&(this.outputElement=t.output),t.background&&(this._background=t.background),this.reset()}return function GCanvas_createClass(t,r,i){return r&&GCanvas_defineProperties(t.prototype,r),i&&GCanvas_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(GCanvas,[{key:"reset",value:function reset(){console.clear(),this.driver.reset(),this.motion.reset(),this.path=void 0,this.clipRegion=void 0,this.subPaths=[],this.filters=[],this.stack=[],this.matrix=new r,this.ctx&&(this.ctx.resetTransform(),this.ctx.scale(window.devicePixelRatio,window.devicePixelRatio),this.ctx.scale(this.virtualScale,this.virtualScale),this.ctx.fillStyle=this._background,this.ctx.fillRect(0,0,this.canvasWidth,this.canvasHeight),this.ctx.lineWidth=1/this.virtualScale)}},{key:"strokeStyle",get:function get(){return this._strokeStyle},set:function set(t){this._strokeStyle=t,this.ctx&&(this.ctx.strokeStyle=t)}},{key:"fillStyle",get:function get(){return this._fillStyle},set:function set(t){this._fillStyle=t,this.ctx&&(this.ctx.fillStyle=t)}},{key:"font",get:function get(){return this._fillStyle},set:function set(t){this._font=t,this.ctx&&(this.ctx.font=t)}},{key:"save",value:function save(){this.stack.push({matrix:this.matrix,font:this.font,depth:this.depth,depthOfCut:this.depthOfCut,toolDiameter:this.toolDiameter,align:this.align,top:this.top,strokeStyle:this.strokeStyle,fillStyle:this.fillStyle,filters:this.filters.slice()})}},{key:"restore",value:function restore(){var t=this,r=this.stack.pop();Object.keys(r).forEach((function(i){t[i]=r[i]}))}},{key:"beginPath",value:function beginPath(){var t;this.path=new i.Z,null===(t=this.ctx)||void 0===t||t.beginPath()}},{key:"transform",value:function transform(t,i,o,a,l,u){var c;this.matrix=this.matrix.concat(new r(t,i,o,a,l,u)),null===(c=this.ctx)||void 0===c||c.transform(t,i,o,a,l,u)}},{key:"setTransform",value:function setTransform(t,i,o,a,l,u){var c;this.matrix=new r(t,i,o,a,l,u),null===(c=this.ctx)||void 0===c||c.setTransform(t,i,o,a,l,u)}},{key:"resetTransform",value:function resetTransform(){var t;this.matrix=new r,null===(t=this.ctx)||void 0===t||t.resetTransform()}},{key:"rotate",value:function rotate(t){var r;this.matrix=this.matrix.rotate(t),null===(r=this.ctx)||void 0===r||r.rotate(t)}},{key:"translate",value:function translate(t,r){var i;this.matrix=this.matrix.translate(t,r),null===(i=this.ctx)||void 0===i||i.translate(t,r)}},{key:"scale",value:function scale(t,r){var i;this.matrix=this.matrix.scale(t,r),null===(i=this.ctx)||void 0===i||i.scale(t,r)}},{key:"transformPoint",value:function transformPoint(r){if(r instanceof Array){var i=this.matrix.transformPoint(new t.Z(r[0],r[1]));return new t.Z(i.x,i.y)}if(void 0!==r.x){var o=new t.Z(r.x,r.y);return o=this.matrix.transformPoint(o),r.x=o.x,r.y=o.y,o}}},{key:"ensurePath",value:function ensurePath(t,r){this.path&&0===this.path.subPaths.length&&this.path.moveTo(t,r)}},{key:"moveTo",value:function moveTo(t,r){var i,o=this.transformPoint([t,r]),a=o.x,l=o.y;this.path.moveTo(a,l),null===(i=this.ctx)||void 0===i||i.moveTo(a,l)}},{key:"lineTo",value:function lineTo(t,r){var i,o=this.transformPoint([t,r]),a=o.x,l=o.y;this.ensurePath(a,l),this.path.lineTo(a,l),null===(i=this.ctx)||void 0===i||i.lineTo(a,l)}},{key:"arcTo",value:function arcTo(r,i,a,l,u){var c,h=this.transformPoint([r,i]),p=h.x,y=h.y,d=this.transformPoint([a,l]),v=d.x,m=d.y;this.ensurePath(p,y);var P=this.path.lastPoint()||new t.Z,g=new t.Z(p,y),_=new t.Z(v,m),b=P.subtract(g),x=_.subtract(g),C=b.x*x.y-b.y*x.x;if(Math.abs(C)<1e-10)this.lineTo(p,y);else{var I=b.magnitude(),w=x.magnitude(),O=(Math.PI-Math.abs(Math.asin(C/(I*w))))/2,S=u*Math.tan(O),T=S/I,E=new t.Z(g.x+b.x*T,g.y+b.y*T);T=S/w;var L=new t.Z(g.x+x.x*T,g.y+x.y*T),A=new t.Z((E.x+L.x)/2,(E.y+L.y)/2).subtract(g),k=A.magnitude(),M=Math.sqrt(u*u+S*S),R=new t.Z;T=M/k,R.x=g.x+A.x*T,R.y=g.y+A.y*T;var B=(0,o.mb)(R,E,L);this.path.lineTo(E.x,E.y),this.path.arc(R.x,R.y,B.radius,B.start,B.end,C>0),null===(c=this.ctx)||void 0===c||c.arcTo(p,y,v,m,u)}}},{key:"arc",value:function arc(){for(var r,i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];var u=a[0],c=a[1],h=a[2],p=a[3],y=a[4],d=a[5];if(p-y!=0){y-p==2*-Math.PI&&(y=2*Math.PI);var v=new t.Z(u,c),m=(0,o.CS)(u,c,p,y,h);this.transformPoint(v),this.transformPoint(m.start),this.transformPoint(m.end);var P=(0,o.mb)(v,m.start,m.end);if(!this.path)throw"beginPath not called yet";this.path.arc(v.x,v.y,P.radius,P.start,P.end,d),null===(r=this.ctx)||void 0===r||r.arc(u,c,h,p,y,d)}}},{key:"bezierCurveTo",value:function bezierCurveTo(){var t,r=this.transformPoint([arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1]]),i=r.x,o=r.y,a=this.transformPoint([arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3]]),l=a.x,u=a.y,c=this.transformPoint([arguments.length<=4?void 0:arguments[4],arguments.length<=5?void 0:arguments[5]]),h=c.x,p=c.y;this.path.bezierCurveTo(i,o,l,u,h,p),null===(t=this.ctx)||void 0===t||t.bezierCurveTo(i,o,l,u,h,p)}},{key:"quadraticCurveTo",value:function quadraticCurveTo(){var t,r=this.transformPoint([arguments.length<=0?void 0:arguments[0],arguments.length<=1?void 0:arguments[1]]),i=r.x,o=r.y,a=this.transformPoint([arguments.length<=2?void 0:arguments[2],arguments.length<=3?void 0:arguments[3]]),l=a.x,u=a.y;this.path.quadraticCurveTo(i,o,l,u),null===(t=this.ctx)||void 0===t||t.quadraticCurveTo(i,o,l,u)}},{key:"clip",value:function clip(){var t;this.clipRegion=this.path,null===(t=this.ctx)||void 0===t||t.clip()}},{key:"rect",value:function rect(t,r,i,o){this.moveTo(t,r),this.lineTo(t+i,r),this.lineTo(t+i,r+o),this.lineTo(t,r+o),this.lineTo(t,r)}},{key:"strokeRect",value:function strokeRect(t,r,i,o){this.beginPath(),this.rect(t,r,i,o),this.stroke(),this.closePath()}},{key:"fillRect",value:function fillRect(t,r,i,o){this.beginPath(),this.rect(t,r,i,o),this.fill(),this.closePath()}},{key:"circle",value:function circle(t,r,i){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];this.arc(t,r,i,0,2*Math.PI,o)}},{key:"strokeCircle",value:function strokeCircle(t,r,i){this.beginPath(),this.circle(t,r,i),this.fill(),this.closePath()}},{key:"fillCircle",value:function fillCircle(t,r,i){this.beginPath(),this.circle(t,r,i),this.fill(),this.closePath()}},{key:"clone",value:function clone(){}},{key:"measureText",value:function measureText(t){return{top:0,left:0,right:0,bottom:0}}},{key:"isOpaque",value:function isOpaque(t){return"transparent"!=t&&("none"!=t&&("string"!=typeof t||!t.match(/rgba\((?:.*,){3}[0\.]*\)/)))}},{key:"stroke",value:function stroke(){var t,r=this,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.align;arguments.length>1&&void 0!==arguments[1]||this.depth;if(this.isOpaque(this.strokeStyle)){this.save();var o=0;"outer"===i&&(o=this.toolDiameter/2),"inner"===i&&(o=-this.toolDiameter/2);var a=this.path;"center"!=i&&(a=(a=a.simplify("evenodd",this.precision)).offset(o)||a),a.subPaths&&a.subPaths.forEach((function(t){"inner"==i&&(t=t.reverse()),r.layer(t,(function(i){r.motion.followPath(t,i)}))})),this.restore(),null===(t=this.ctx)||void 0===t||t.stroke()}}},{key:"fill",value:function fill(t){var r,i=this;if(this.isOpaque(this.fillStyle)){if(this.save(),!this.toolDiameter)throw"You must set context.toolDiameter to use fill()";var o=this.path;(o=(o=(o=o.simplify(t,this.precision)).clip(this.clipRegion,0,this.precision)).fillPath(this.toolDiameter,this.precision)).subPaths&&o.subPaths.forEach((function(t){i.layer(t,(function(r){i.motion.followPath(t,r)}))}),this),this.restore(),null===(r=this.ctx)||void 0===r||r.fill()}}},{key:"clearRect",value:function clearRect(t,r,i,o){var a;null===(a=this.ctx)||void 0===a||a.clearRect(t,r,i,o)}},{key:"closePath",value:function closePath(){var t;this.path.close(),null===(t=this.ctx)||void 0===t||t.closePath()}},{key:"layer",value:function layer(t,r){var i=this.depthOfCut||this.depth;if(0!==i){var o=this.depth<0;o&&i>0&&(i=-i);for(var a=Math.ceil(Math.abs(this.depth/i)),l=-this.top;a--;)l-=i,l=o?Math.max(l,this.top+this.depth):Math.max(l,-this.top-this.depth),r.call(this,l);this.ramping&&t.isClosed()&&r.call(this,l)}else r.call(this,-this.top)}}]),GCanvas}();function GCodeDriver_typeof(t){return GCodeDriver_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},GCodeDriver_typeof(t)}function GCodeDriver_defineProperties(t,r){for(var i=0;i<r.length;i++){var o=r[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function GCodeDriver_setPrototypeOf(t,r){return GCodeDriver_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,r){return t.__proto__=r,t},GCodeDriver_setPrototypeOf(t,r)}function GCodeDriver_createSuper(t){var r=function GCodeDriver_isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function _createSuperInternal(){var i,o=GCodeDriver_getPrototypeOf(t);if(r){var a=GCodeDriver_getPrototypeOf(this).constructor;i=Reflect.construct(o,arguments,a)}else i=o.apply(this,arguments);return GCodeDriver_possibleConstructorReturn(this,i)}}function GCodeDriver_possibleConstructorReturn(t,r){if(r&&("object"===GCodeDriver_typeof(r)||"function"==typeof r))return r;if(void 0!==r)throw new TypeError("Derived constructors may only return object or undefined");return function GCodeDriver_assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function GCodeDriver_getPrototypeOf(t){return GCodeDriver_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)},GCodeDriver_getPrototypeOf(t)}var p=function(t){!function GCodeDriver_inherits(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(r&&r.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),r&&GCodeDriver_setPrototypeOf(t,r)}(GCode,t);var r=GCodeDriver_createSuper(GCode);function GCode(t){var i;return function GCodeDriver_classCallCheck(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,GCode),(i=r.call(this,t)).stream=t||{write:function write(t){return console.log(t)},reset:function reset(){}},i}return function GCodeDriver_createClass(t,r,i){return r&&GCodeDriver_defineProperties(t.prototype,r),i&&GCodeDriver_defineProperties(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}(GCode,[{key:"reset",value:function reset(){this.stream.reset(),this.init()}},{key:"send",value:function send(t,r){var i="".concat(t);r&&"xyzabcijkft".split("").forEach((function(t){void 0===r[t]||null===r[t]||isNaN(r[t])||(i+=" ".concat(t.toUpperCase()).concat(r[t]))}));this.stream.write(i)}},{key:"init",value:function init(){this.send("G17 (select the xy plane)"),this.send("M3 S0 (activate servo)")}},{key:"unit",value:function unit(t){this.send({inch:"G20",mm:"G21"}[t]+" (select ".concat(t," unit)"))}},{key:"speed",value:function speed(t){this.send("S".concat(t," (set speed to ").concat(t,")"))}},{key:"feed",value:function feed(t){this.send("F"+t)}},{key:"coolant",value:function coolant(t){"mist"===t?this.send("M07"):t?this.send("M08"):this.send("M09")}},{key:"zero",value:function zero(t){this.send("G28.3",t)}},{key:"atc",value:function atc(t){this.send("M6",{t})}},{key:"rapid",value:function rapid(t){this.send("G0",t)}},{key:"linear",value:function linear(t){this.send("G1",t)}},{key:"arcCW",value:function arcCW(t){this.send("G2",t)}},{key:"arcCCW",value:function arcCCW(t){this.send("G3",t)}},{key:"comment",value:function comment(t){this.send("(".concat(t,")"))}},{key:"meta",value:function meta(t){var r="(";for(var i in t)r+="".concat(i,"=").concat(t[i]);r+=")",this.send(r)}}]),GCode}(u);const y=[__webpack_require__(899).Z,__webpack_require__(715).Z,__webpack_require__(798).Z,__webpack_require__(613).Z,__webpack_require__(918).Z,__webpack_require__(511).Z,__webpack_require__(166).Z,__webpack_require__(703).Z,__webpack_require__(139).Z,__webpack_require__(97).Z,__webpack_require__(165).Z,__webpack_require__(52).Z,__webpack_require__(404).Z,__webpack_require__(544).Z,__webpack_require__(230).Z];var d=function loadValue(t,r){var i=localStorage.getItem(t);return null===i?void 0!==r?(v(t,r),r):null:JSON.parse(i)},v=function saveValue(t,r){var i=JSON.stringify(r);return localStorage.setItem(t,i),r},m=__webpack_require__(486);function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t))return _arrayLikeToArray(t)}(t)||function _iterableToArray(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function _unsupportedIterableToArray(t,r){if(!t)return;if("string"==typeof t)return _arrayLikeToArray(t,r);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return _arrayLikeToArray(t,r)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var i=0,o=new Array(r);i<r;i++)o[i]=t[i];return o}function saveSlots_ownKeys(t,r){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),i.push.apply(i,o)}return i}function saveSlots_objectSpread(t){for(var r=1;r<arguments.length;r++){var i=null!=arguments[r]?arguments[r]:{};r%2?saveSlots_ownKeys(Object(i),!0).forEach((function(r){saveSlots_defineProperty(t,r,i[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):saveSlots_ownKeys(Object(i)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(i,r))}))}return t}function saveSlots_defineProperty(t,r,i){return r in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,t}var P,g=document.getElementById("save-slots"),_=function renderSketchSaveSlots(t,r){g.innerHTML="",d(t.constructor.name,[]).forEach((function(i,o){var a=document.createElement("button");a.type="button",a.innerText="".concat(o+1),a.addEventListener("click",(function(){null==r||r(),t.reset(),console.log("Loading:",i),Object.keys(i).forEach((function(r){t.vs[r].setValue(i[r],!0)})),t.initDraw()})),g.appendChild(a)}))},b=__webpack_require__(561),x=document.getElementById("slider-area"),C={},I=140,w=100,O=document.createElement("canvas"),S=document.getElementById("canvas-area"),T=document.getElementById("sketch-buttons-area"),E=document.getElementById("save-button"),L=document.getElementById("reset"),A=document.getElementById("randomize"),k=document.getElementById("gcode"),M=d("sketchIndex",0),R=0,B=0,N=(0,m.throttle)((function _setGCodeHTML(t){return k.innerHTML=t}),1e3),D="",j=function setGCode(t){N(D=t)},X=function initSketch(t){console.clear(),console.log("Loading new sketch",t.name),B=0,R&&(window.cancelAnimationFrame(R),R=0),j(t.generateGCode?"":"(GCode disabled for this sketch)");var r=t.generateGCode?new p({reset:function reset(){j("")},write:function write(t){!function appendGCode(t){N(D+=t+"\n")}(t)}}):void 0,i=new h({canvas:O,driver:r,width:I,height:w,virtualScale:8,background:"#fff"});(P=new t({ctx:i,width:I,height:w})).init(),P.initDraw(),function renderSketchSliders(t,r){C={},x.innerHTML="",Object.keys(t.vs).forEach((function(i){var o=t.vs[i],a=document.createElement("input");a.type="range",a.min=String(o.min),a.max=String(o.max),a.step=String(o.step),a.value=String(o.value),a.setAttribute("data-slider",i);var l=document.createElement("label"),u=document.createElement("span"),c=document.createElement("small"),h=function handleUpdate(o){var l=void 0===o?Number(a.value):o;c.innerText=(0,b.iH)(l,6),t.vs[i].value=l,t.reset(),t.initDraw(),null==r||r()};a.addEventListener("input",(function(t){return h()})),a.addEventListener("change",(function(t){return h()})),c.addEventListener("click",(function(){var t=window.prompt("".concat(i,": "),String(a.value));if(null!==t){var r=parseFloat(t);isNaN(r)||h(r)}})),c.innerText=(0,b.iH)(Number(a.value)),u.innerText=i,u.appendChild(c),l.appendChild(u),l.appendChild(a),x.appendChild(l),o.inputElem=a,C[i]={slider:a,labelSpan:u,valueSpan:c}}))}(P,(function(){B=0})),_(P,(function(){B=0})),Y()},Y=function animate(){for(var t=0;t<100;t++)B++,P.draw(B);R=window.requestAnimationFrame(animate)};window.addEventListener("load",(function init(){O.width=1120*window.devicePixelRatio,O.height=800*window.devicePixelRatio,O.style.width="".concat(1120,"px"),O.style.height="".concat(800,"px"),S?S.appendChild(O):document.body.appendChild(O),y.forEach((function(t,r){var i=document.createElement("button");i.type="button",i.innerText="".concat(r+1," ").concat(t.name),M===r&&i.classList.add("active"),i.addEventListener("click",(function(){for(var o=T.getElementsByTagName("button"),a=0;a<o.length;a++)o.item(a).classList.remove("active");i.classList.add("active"),M=v("sketchIndex",r),X(t)})),T.appendChild(i)})),X(y[M]),L.addEventListener("click",(function(){P&&(B=0,P.reset(),P.initDraw())})),A.addEventListener("click",(function(){P&&(B=0,Object.keys(P.vs).forEach((function(t){P.vs[t].randomize()})),function updateSliderValues(t){Object.keys(C).forEach((function(r){var i=C[r],o=i.slider,a=i.valueSpan;o.value=String(t.vs[r].value),a.innerText=(0,b.iH)(t.vs[r].value)}))}(P),P.reset(),P.initDraw())})),E.addEventListener("click",(function(){P&&function saveNewPreset(t){var r=Object.keys(t.vs).reduce((function(r,i){return saveSlots_objectSpread(saveSlots_objectSpread({},r),{},saveSlots_defineProperty({},i,t.vs[i].value))}),{}),i=t.constructor.name,o=d(i,[]);v(i,[].concat(_toConsumableArray(o),[r])),_(t)}(P)}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,